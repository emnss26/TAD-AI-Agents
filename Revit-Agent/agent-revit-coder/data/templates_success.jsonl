{"prompt":"Model a wall of {length_m} meters in length and {height_m} meters in height.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null \u0026\u0026 wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({length_m}, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Design a wall spanning {length_m} meters and rising {height_m} meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null \u0026\u0026 wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({length_m}, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Crea un muro de {length_m} metros de largo y {height_m} metros de alto.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null \u0026\u0026 wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({length_m}, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Create a wall measuring {length_m} meters long and {height_m} meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null \u0026\u0026 wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({length_m}, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Create a wall {length_m} meters long and {height_m} meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null \u0026\u0026 wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({length_m}, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Produce a wall measuring {length_m} meters in length and {height_m} meters in height.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null \u0026\u0026 wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({length_m}, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Design a wall spanning {length_m} meters in length and {height_m} meters in height.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null \u0026\u0026 wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({length_m}, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Model a wall with a length of {length_m} meters and a height of {height_m} meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null \u0026\u0026 wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({length_m}, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Dibuja una pared de {length_m}m de largo por {height_m}m de altura.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null \u0026\u0026 wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({length_m}, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Create a wall with dimensions {length_m}m by {height_m}m.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null \u0026\u0026 wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({length_m}, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Model a wall of {length_m}m in length and {height_m}m in height.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null \u0026\u0026 wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({length_m}, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Draw a wall of length {length_m}m and height {height_m}m.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null \u0026\u0026 wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({length_m}, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Place a window with dimensions {width_m} meters by {height_m} meters on a wall, defining a new window type if required.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null \u0026\u0026 hostWall != null)\n{\n    string newTypeName = $\"Window {width_m}m x {height_m}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    if(widthParam != null) widthParam.Set(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters));\n\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n    if(heightParam != null) heightParam.Set(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Establish a window of {width_m} meters wide and {height_m} meters high within a wall, introducing a new window type if necessary.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null \u0026\u0026 hostWall != null)\n{\n    string newTypeName = $\"Window {width_m}m x {height_m}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    if(widthParam != null) widthParam.Set(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters));\n\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n    if(heightParam != null) heightParam.Set(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Inserta una ventana de {width_m} metro de ancho y {height_m} metros de alto en un muro, creando un nuevo tipo si es necesario.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null \u0026\u0026 hostWall != null)\n{\n    string newTypeName = $\"Window {width_m}m x {height_m}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    if(widthParam != null) widthParam.Set(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters));\n\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n    if(heightParam != null) heightParam.Set(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Insert a window of {width_m} meters in width and {height_m} meters in height onto a wall, creating a new window type if necessary.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null \u0026\u0026 hostWall != null)\n{\n    string newTypeName = $\"Window {width_m}m x {height_m}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    if(widthParam != null) widthParam.Set(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters));\n\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n    if(heightParam != null) heightParam.Set(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Insert a window {width_m}m wide and {height_m}m high into a wall.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null \u0026\u0026 hostWall != null)\n{\n    string newTypeName = $\"Window {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null \u0026\u0026 heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null \u0026\u0026 locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create a window opening with a width of {width_m} meters and a height of {height_m} meters within the defined wall.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null \u0026\u0026 hostWall != null)\n{\n    string newTypeName = $\"Window {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null \u0026\u0026 heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null \u0026\u0026 locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Establish a window of dimensions {width_m} meters by {height_m} meters within the specified wall structure.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null \u0026\u0026 hostWall != null)\n{\n    string newTypeName = $\"Window {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null \u0026\u0026 heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null \u0026\u0026 locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Define a window aperture with a width of {width_m} meters and a height of {height_m} meters in the existing wall.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null \u0026\u0026 hostWall != null)\n{\n    string newTypeName = $\"Window {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null \u0026\u0026 heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null \u0026\u0026 locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Insert a window of dimensions {width_m}x{height_m} meters into the closest wall.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null \u0026\u0026 hostWall != null)\n{\n    string newTypeName = $\"Window {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null \u0026\u0026 heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null \u0026\u0026 locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Position a window with dimensions {width_m}x{height_m} meters on the nearest wall.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null \u0026\u0026 hostWall != null)\n{\n    string newTypeName = $\"Window {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null \u0026\u0026 heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null \u0026\u0026 locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Place a window of {width_m}x{height_m} meters on the nearest wall.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null \u0026\u0026 hostWall != null)\n{\n    string newTypeName = $\"Window {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null \u0026\u0026 heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null \u0026\u0026 locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Coloca una ventana de {width_m}x{height_m} metros en la pared más cercana.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null \u0026\u0026 hostWall != null)\n{\n    string newTypeName = $\"Window {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null \u0026\u0026 heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null \u0026\u0026 locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Position a structural column at location X={x1}, Y={y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Insert a structural column at the specified coordinates X={x1}, Y={y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Crea una columna estructural en la posición X={x1}, Y={y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Establish a structural column at the coordinates X={x1}, Y={y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Position a structural column at location X={x1}, Y={y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Insert a structural column at point X={x1}, Y={y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Create a structural column at position X={x1}, Y={y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Establish a structural column at coordinates X={x1}, Y={y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Place a structural column at coordinates {x1},{y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Establish a structural pillar at position {x1},{y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Pon un pilar estructural en las coordenadas {x1},{y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Position a structural support column at location {x1},{y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Create a rectangular floor plan of {floor_l_m} meters in length and {floor_w_m} meters in width.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits({floor_w_m}, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits({floor_l_m}, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List\u003cCurveLoop\u003e {{ loop }}, floorType.Id, level.Id);\n}"}
{"prompt":"Establish a rectilinear floor plan of dimensions {floor_w_m} meters by {floor_l_m} meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits({floor_w_m}, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits({floor_l_m}, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List\u003cCurveLoop\u003e {{ loop }}, floorType.Id, level.Id);\n}"}
{"prompt":"Model a square floor layout measuring {floor_l_m} meters by {floor_w_m} meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits({floor_w_m}, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits({floor_l_m}, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List\u003cCurveLoop\u003e {{ loop }}, floorType.Id, level.Id);\n}"}
{"prompt":"Genera un piso rectangular de {floor_w_m}×{floor_l_m} metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits({floor_w_m}, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits({floor_l_m}, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List\u003cCurveLoop\u003e {{ loop }}, floorType.Id, level.Id);\n}"}
{"prompt":"Produce a rectangular floor plan of {floor_w_m} meters by {floor_l_m} meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits({floor_w_m}, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits({floor_l_m}, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List\u003cCurveLoop\u003e {{ loop }}, floorType.Id, level.Id);\n}"}
{"prompt":"Generate a rectangular floor design with a width of {floor_w_m} meters and a length of {floor_l_m} meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits({floor_w_m}, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits({floor_l_m}, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List\u003cCurveLoop\u003e {{ loop }}, floorType.Id, level.Id);\n}"}
{"prompt":"Generate a rectangular floor of {floor_w_m}x{floor_l_m} meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits({floor_w_m}, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits({floor_l_m}, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List\u003cCurveLoop\u003e {{ loop }}, floorType.Id, level.Id);\n}"}
{"prompt":"Create a rectangular floor layout with dimensions {floor_w_m} x {floor_l_m} meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits({floor_w_m}, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits({floor_l_m}, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List\u003cCurveLoop\u003e {{ loop }}, floorType.Id, level.Id);\n}"}
{"prompt":"Delineate a floor plan with dimensions {floor_w_m} meters by {floor_l_m} meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits({floor_w_m}, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits({floor_l_m}, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List\u003cCurveLoop\u003e {{ loop }}, floorType.Id, level.Id);\n}"}
{"prompt":"Draw a floor plan with a perimeter of {floor_w_m} meters wide and {floor_l_m} meters long.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits({floor_w_m}, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits({floor_l_m}, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List\u003cCurveLoop\u003e {{ loop }}, floorType.Id, level.Id);\n}"}
{"prompt":"Model a floor plan with dimensions {floor_w_m} meters by {floor_l_m} meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits({floor_w_m}, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits({floor_l_m}, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List\u003cCurveLoop\u003e {{ loop }}, floorType.Id, level.Id);\n}"}
{"prompt":"Crea un suelo con un contorno de {floor_w_m} por {floor_l_m} metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits({floor_w_m}, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits({floor_l_m}, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List\u003cCurveLoop\u003e {{ loop }}, floorType.Id, level.Id);\n}"}
{"prompt":"Create a sliding wall of {width_m} meters in width and {height_m} meters in height.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.Kind == WallKind.Curtain);\n\nif (level != null \u0026\u0026 cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Crea un muro cortina de {width_m} metros de ancho y {height_m} metros de alto.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.Kind == WallKind.Curtain);\n\nif (level != null \u0026\u0026 cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Establish a {width_m} meter wide and {height_m} meter high sliding partition wall.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.Kind == WallKind.Curtain);\n\nif (level != null \u0026\u0026 cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Form a partition wall with a width of {width_m} meters and a height of {height_m} meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.Kind == WallKind.Curtain);\n\nif (level != null \u0026\u0026 cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Model a vertical curtain wall, {width_m} meters wide and {height_m} meters tall.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.Kind == WallKind.Curtain);\n\nif (level != null \u0026\u0026 cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Design a facade curtain wall spanning {width_m} meters in width and {height_m} meters in height.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.Kind == WallKind.Curtain);\n\nif (level != null \u0026\u0026 cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Create a curtain wall {width_m} meters wide and {height_m} meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.Kind == WallKind.Curtain);\n\nif (level != null \u0026\u0026 cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Draft a horizontal curtain wall with dimensions {width_m} meters by {height_m} meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.Kind == WallKind.Curtain);\n\nif (level != null \u0026\u0026 cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Create {num_grids} horizontal lines with a spacing of {separation_m} meters between them.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i \u003c {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Establish {num_grids} horizontal axes spaced apart by {separation_m} meters.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i \u003c {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea {num_grids} ejes horizontales separados por {separation_m} metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i \u003c {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Insert {num_grids} horizontal gridlines at intervals of {separation_m} meters.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i \u003c {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Establish {num_grids} evenly spaced horizontal grids with a separation of {separation_m} meters.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i \u003c {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Insert {num_grids} horizontal grid lines with a spacing of {separation_m} meters.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i \u003c {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create {num_grids} horizontal grids spaced {separation_m} meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i \u003c {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Draw {num_grids} horizontal gridlines at intervals of {separation_m} meters.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i \u003c {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Insert {num_grids} horizontal grid markers spaced {separation_m} meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i \u003c {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Establish {num_grids} horizontal grids with a separation of {separation_m} meters.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i \u003c {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create {num_grids} horizontal gridlines at a distance of {separation_m} meters.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i \u003c {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Genera {num_grids} rejillas horizontales con una separación de {separation_m}m.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i \u003c {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Establish {num_grids} vertical axes with a spacing of {separation_m} meters.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i=0; i\u003c{num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea {num_grids} ejes en sentido vertical separados {separation_m} metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i=0; i\u003c{num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create {num_grids} vertical gridlines at intervals of {separation_m} meters.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i=0; i\u003c{num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Insert {num_grids} vertical gridlines with a separation of {separation_m} meters.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i=0; i\u003c{num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Set up {num_grids} vertical gridlines at intervals of {separation_m} meters.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i=0; i\u003c{num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create {num_grids} vertical grids spaced {separation_m} meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i=0; i\u003c{num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Insert {num_grids} vertical gridlines with a spacing of {separation_m} meters.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i=0; i\u003c{num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Establish {num_grids} vertical grid lines, spaced {separation_m} meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i=0; i\u003c{num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea columnas en cada intersección de ejes.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList\u003cGrid\u003e grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast\u003cGrid\u003e().ToList();\n\nif (colSymbol != null \u0026\u0026 level != null \u0026\u0026 grids.Count \u003e= 2)\n{\n    if(!colSymbol.IsActive) colSymbol.Activate();\n    for (int i = 0; i \u003c grids.Count; i++)\n    {\n        for (int j = i + 1; j \u003c grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                 if(results != null) {\n                     foreach (IntersectionResult ir in results)\n                     {\n                         doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                     }\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Create columns at each grid intersection.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList\u003cGrid\u003e grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast\u003cGrid\u003e().ToList();\n\nif (colSymbol != null \u0026\u0026 level != null \u0026\u0026 grids.Count \u003e= 2)\n{\n    if(!colSymbol.IsActive) colSymbol.Activate();\n    for (int i = 0; i \u003c grids.Count; i++)\n    {\n        for (int j = i + 1; j \u003c grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                 if(results != null) {\n                     foreach (IntersectionResult ir in results)\n                     {\n                         doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                     }\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Coloca pilares en todos los cruces de la rejilla.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList\u003cGrid\u003e grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast\u003cGrid\u003e().ToList();\n\nif (colSymbol != null \u0026\u0026 level != null \u0026\u0026 grids.Count \u003e= 2)\n{\n    if(!colSymbol.IsActive) colSymbol.Activate();\n    for (int i = 0; i \u003c grids.Count; i++)\n    {\n        for (int j = i + 1; j \u003c grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                 if(results != null) {\n                     foreach (IntersectionResult ir in results)\n                     {\n                         doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                     }\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Crea vigas entre las columnas alineadas horizontalmente.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList\u003cFamilyInstance\u003e columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().OrderBy(c =\u003e c.GetTransform().Origin.Y).ThenBy(c =\u003e c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null \u0026\u0026 level != null \u0026\u0026 columns.Count \u003e= 2)\n{\n    if(!beamSymbol.IsActive) beamSymbol.Activate();\n    for(int i=0; i \u003c columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null \u0026\u0026 p2 != null \u0026\u0026 Math.Abs(p1.Point.Y - p2.Point.Y) \u003c 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Create beams between horizontally aligned columns.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList\u003cFamilyInstance\u003e columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().OrderBy(c =\u003e c.GetTransform().Origin.Y).ThenBy(c =\u003e c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null \u0026\u0026 level != null \u0026\u0026 columns.Count \u003e= 2)\n{\n    if(!beamSymbol.IsActive) beamSymbol.Activate();\n    for(int i=0; i \u003c columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null \u0026\u0026 p2 != null \u0026\u0026 Math.Abs(p1.Point.Y - p2.Point.Y) \u003c 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Acota la longitud de un muro seleccionado por el usuario.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un muro para acotar\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null \u0026\u0026 activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}
{"prompt":"Dimension the length of a user-selected wall.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select a wall to dimension\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null \u0026\u0026 activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}
{"prompt":"Create a door with a width of {width_m} meters and a height of {height_m} meters on the wall.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null \u0026\u0026 hostWall != null)\n{\n    string newTypeName = $\"Door {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null \u0026\u0026 heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null \u0026\u0026 locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Generate a door of {width_m} meters in width and {height_m} meters in height on the wall.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null \u0026\u0026 hostWall != null)\n{\n    string newTypeName = $\"Door {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null \u0026\u0026 heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null \u0026\u0026 locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Model a door with dimensions {width_m} meters in width and {height_m} meters in height on the wall.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null \u0026\u0026 hostWall != null)\n{\n    string newTypeName = $\"Door {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null \u0026\u0026 heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null \u0026\u0026 locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Crea una puerta de {width_m}m de ancho y {height_m}m de alto en el muro.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null \u0026\u0026 hostWall != null)\n{\n    string newTypeName = $\"Door {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null \u0026\u0026 heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null \u0026\u0026 locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create a door {width_m}m wide and {height_m}m high in the wall.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null \u0026\u0026 hostWall != null)\n{\n    string newTypeName = $\"Door {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null \u0026\u0026 heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null \u0026\u0026 locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Insert a door measuring {width_m} meters in width and {height_m} meters in height into the wall.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null \u0026\u0026 hostWall != null)\n{\n    string newTypeName = $\"Door {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null \u0026\u0026 heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null \u0026\u0026 locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create a door of width {width_m} meters and height {height_m} meters within the wall.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null \u0026\u0026 hostWall != null)\n{\n    string newTypeName = $\"Door {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null \u0026\u0026 heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null \u0026\u0026 locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Draw a door with a width of {width_m} meters and a height of {height_m} meters on the wall.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null \u0026\u0026 hostWall != null)\n{\n    string newTypeName = $\"Door {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null \u0026\u0026 heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null \u0026\u0026 locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Generate a new floor plane named \u0027{level_name}\u0027 at an elevation of {elevation_m} meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Establish a new level named \u0027{level_name}\u0027 at an elevation of {elevation_m} meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Create a new floor level named \u0027{level_name}\u0027 at an elevation of {elevation_m} meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Crea un nuevo Nivel llamado \u0027{level_name}\u0027 a una elevación de {elevation_m} metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Generate a new floor level, titled \u0027{level_name}\u0027, at an elevation of {elevation_m} meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Produce a new horizontal datum, labeled \u0027{level_name}\u0027, situated at an elevation of {elevation_m} meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Create a new Level named \u0027{level_name}\u0027 at an elevation of {elevation_m} meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Establish a fresh Level, designated as \u0027{level_name}\u0027, at an elevation of {elevation_m} meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Crea una tubería con un diámetro de {pipe_diameter_mm}mm.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null \u0026\u0026 pipeType != null \u0026\u0026 systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits({pipe_diameter_mm}, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Model a pipe with a diameter of {pipe_diameter_mm} millimeters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null \u0026\u0026 pipeType != null \u0026\u0026 systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits({pipe_diameter_mm}, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Design a pipe with a diameter of {pipe_diameter_mm} millimeters in Revit.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null \u0026\u0026 pipeType != null \u0026\u0026 systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits({pipe_diameter_mm}, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Create a pipe with a diameter of {pipe_diameter_mm} millimetres.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null \u0026\u0026 pipeType != null \u0026\u0026 systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits({pipe_diameter_mm}, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Model a pipe with a {pipe_diameter_mm} millimeter diameter.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null \u0026\u0026 pipeType != null \u0026\u0026 systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits({pipe_diameter_mm}, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Create a pipe with a {pipe_diameter_mm}mm diameter.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null \u0026\u0026 pipeType != null \u0026\u0026 systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits({pipe_diameter_mm}, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Design a pipe with a {pipe_diameter_mm} millimeter circumference.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null \u0026\u0026 pipeType != null \u0026\u0026 systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits({pipe_diameter_mm}, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Produce a pipe of {pipe_diameter_mm} millimeters in diameter.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null \u0026\u0026 pipeType != null \u0026\u0026 systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits({pipe_diameter_mm}, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Modela un barandal en una escalera existente.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null \u0026\u0026 stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Model a railing on an existing staircase.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null \u0026\u0026 stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Place a piece of furniture at coordinates ({x1},{y1}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 furnitureSymbol != null)\n{\n    if(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), furnitureSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Arrange furniture at coordinates ({x1},{y1}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 furnitureSymbol != null)\n{\n    if(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), furnitureSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Position a piece of furniture at coordinates ({x1},{y1}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 furnitureSymbol != null)\n{\n    if(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), furnitureSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Coloca un mueble en las coordenadas ({x1},{y1}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 furnitureSymbol != null)\n{\n    if(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), furnitureSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Place a piece of furniture at coordinates ({x1},{y1}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 furnitureSymbol != null)\n{\n    if(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), furnitureSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Place the selected furniture item at the given coordinates ({x1},{y1}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 furnitureSymbol != null)\n{\n    if(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), furnitureSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Arrange furniture at the designated location ({x1},{y1}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 furnitureSymbol != null)\n{\n    if(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), furnitureSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Position a piece of furniture at the specified coordinates ({x1},{y1}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 furnitureSymbol != null)\n{\n    if(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), furnitureSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Create a slab-on-grade foundation with a length of {length_m} meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({length_m}, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Footing);\n}"}
{"prompt":"Model a beam foundation, {length_m} meters in length.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({length_m}, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Footing);\n}"}
{"prompt":"Crea una cimentación de viga de {length_m} metros de largo.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({length_m}, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Footing);\n}"}
{"prompt":"Generate a footing for a beam, {length_m} meters in extent.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({length_m}, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Footing);\n}"}
{"prompt":"Create an {length_m}-meter long foundation beam.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({length_m}, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Footing);\n}"}
{"prompt":"Model a {length_m}-meter long foundation column.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({length_m}, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Footing);\n}"}
{"prompt":"Design a {length_m}-meter linear foundation support.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({length_m}, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Footing);\n}"}
{"prompt":"Produce a {length_m}-meter extended foundation element.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({length_m}, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Footing);\n}"}
{"prompt":"Añade refuerzo a una columna.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null \u0026\u0026 shape != null \u0026\u0026 column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Add reinforcement to a column.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null \u0026\u0026 shape != null \u0026\u0026 column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Fija el elemento seleccionado para que no se mueva.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count \u003e 0)\n{\n    Element elementToPin = doc.GetElement(selectedIds.First());\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}
{"prompt":"Pin the selected element so it cannot be moved.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count \u003e 0)\n{\n    Element elementToPin = doc.GetElement(selectedIds.First());\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}
{"prompt":"Insert a window {width_m}m wide and {height_m}m high into a wall.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null \u0026\u0026 hostWall != null)\n{\n    string newTypeName = $\"Window {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null \u0026\u0026 heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null \u0026\u0026 locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create a window opening with a width of {width_m} meters and a height of {height_m} meters within the defined wall.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null \u0026\u0026 hostWall != null)\n{\n    string newTypeName = $\"Window {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null \u0026\u0026 heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null \u0026\u0026 locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Insert a window of specified dimensions, {width_m} meters in width and {height_m} meters in height, into the given wall.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null \u0026\u0026 hostWall != null)\n{\n    string newTypeName = $\"Window {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null \u0026\u0026 heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null \u0026\u0026 locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Establish a window element measuring {width_m} meters in width and {height_m} meters in height within the existing wall.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null \u0026\u0026 hostWall != null)\n{\n    string newTypeName = $\"Window {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null \u0026\u0026 heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null \u0026\u0026 locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Insert a window of dimensions {width_m}x{height_m} meters into the closest wall.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null \u0026\u0026 hostWall != null)\n{\n    string newTypeName = $\"Window {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null \u0026\u0026 heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null \u0026\u0026 locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Place a window of {width_m}x{height_m} meters on the nearest wall.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null \u0026\u0026 hostWall != null)\n{\n    string newTypeName = $\"Window {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null \u0026\u0026 heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null \u0026\u0026 locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Position a window measuring {width_m}x{height_m} meters on the adjacent wall.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null \u0026\u0026 hostWall != null)\n{\n    string newTypeName = $\"Window {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null \u0026\u0026 heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null \u0026\u0026 locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Coloca una ventana de {width_m}x{height_m} metros en la pared más cercana.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null \u0026\u0026 hostWall != null)\n{\n    string newTypeName = $\"Window {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null \u0026\u0026 heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null \u0026\u0026 locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Position a structural column at location X={x1}, Y={y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Insert a structural column at point X={x1}, Y={y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Crea una columna estructural en la posición X={x1}, Y={y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Establish a structural column at coordinates X={x1}, Y={y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Position a structural column at location X={x1}, Y={y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Insert a structural column at point X={x1}, Y={y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Create a structural column at position X={x1}, Y={y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Establish a structural column at coordinates X={x1}, Y={y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Place a structural column at coordinates {x1},{y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Position a structural support column at the given coordinates {x1},{y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Pon un pilar estructural en las coordenadas {x1},{y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Insert a structural pillar at the specified coordinates {x1},{y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}
{"prompt":"Create a rectangular floor plan with dimensions {floor_w_m} meters by {floor_l_m} meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits({floor_w_m}, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits({floor_l_m}, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List\u003cCurveLoop\u003e {{ loop }}, floorType.Id, level.Id);\n}"}
{"prompt":"Form a rectangular floor model with dimensions {floor_w_m} meters in width and {floor_l_m} meters in length.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits({floor_w_m}, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits({floor_l_m}, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List\u003cCurveLoop\u003e {{ loop }}, floorType.Id, level.Id);\n}"}
{"prompt":"Establish a rectangular floor layout measuring {floor_w_m} meters in width and {floor_l_m} meters in length.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits({floor_w_m}, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits({floor_l_m}, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List\u003cCurveLoop\u003e {{ loop }}, floorType.Id, level.Id);\n}"}
{"prompt":"Genera un piso rectangular de {floor_w_m}×{floor_l_m} metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits({floor_w_m}, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits({floor_l_m}, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List\u003cCurveLoop\u003e {{ loop }}, floorType.Id, level.Id);\n}"}
{"prompt":"Form a rectangular floor model with the specified dimensions of {floor_w_m} meters in width and {floor_l_m} meters in length.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits({floor_w_m}, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits({floor_l_m}, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List\u003cCurveLoop\u003e {{ loop }}, floorType.Id, level.Id);\n}"}
{"prompt":"Develop a rectangular floor plan of {floor_w_m} meters in width and {floor_l_m} meters in length.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits({floor_w_m}, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits({floor_l_m}, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List\u003cCurveLoop\u003e {{ loop }}, floorType.Id, level.Id);\n}"}
{"prompt":"Create a rectangular floor layout with dimensions of {floor_w_m} meters by {floor_l_m} meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits({floor_w_m}, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits({floor_l_m}, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List\u003cCurveLoop\u003e {{ loop }}, floorType.Id, level.Id);\n}"}
{"prompt":"Generate a rectangular floor of {floor_w_m}x{floor_l_m} meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits({floor_w_m}, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits({floor_l_m}, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List\u003cCurveLoop\u003e {{ loop }}, floorType.Id, level.Id);\n}"}
{"prompt":"Draw a floor layout measuring {floor_w_m} meters in width and {floor_l_m} meters in length.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits({floor_w_m}, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits({floor_l_m}, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List\u003cCurveLoop\u003e {{ loop }}, floorType.Id, level.Id);\n}"}
{"prompt":"Model a floor with boundaries of {floor_w_m} meters wide and {floor_l_m} meters long.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits({floor_w_m}, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits({floor_l_m}, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List\u003cCurveLoop\u003e {{ loop }}, floorType.Id, level.Id);\n}"}
{"prompt":"Create a floor plan with dimensions {floor_w_m} meters by {floor_l_m} meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits({floor_w_m}, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits({floor_l_m}, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List\u003cCurveLoop\u003e {{ loop }}, floorType.Id, level.Id);\n}"}
{"prompt":"Crea un suelo con un contorno de {floor_w_m} por {floor_l_m} metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits({floor_w_m}, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits({floor_l_m}, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List\u003cCurveLoop\u003e {{ loop }}, floorType.Id, level.Id);\n}"}
{"prompt":"Fashion a partition wall measuring {width_m} meters wide by {height_m} meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.Kind == WallKind.Curtain);\n\nif (level != null \u0026\u0026 cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Create a partition wall of {width_m} meters in width and {height_m} meters in height.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.Kind == WallKind.Curtain);\n\nif (level != null \u0026\u0026 cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Crea un muro cortina de {width_m} metros de ancho y {height_m} metros de alto.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.Kind == WallKind.Curtain);\n\nif (level != null \u0026\u0026 cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Establish a partition wall with dimensions of {width_m} meters by {height_m} meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.Kind == WallKind.Curtain);\n\nif (level != null \u0026\u0026 cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Sketch a curtain wall that is {width_m} meters wide and {height_m} meters tall.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.Kind == WallKind.Curtain);\n\nif (level != null \u0026\u0026 cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Delineate a curtain wall with a width of {width_m} meters and a height of {height_m} meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.Kind == WallKind.Curtain);\n\nif (level != null \u0026\u0026 cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Create a curtain wall {width_m} meters wide and {height_m} meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.Kind == WallKind.Curtain);\n\nif (level != null \u0026\u0026 cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Model a curtain wall spanning {width_m} meters in width and {height_m} meters in height.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.Kind == WallKind.Curtain);\n\nif (level != null \u0026\u0026 cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Insert {num_grids} horizontal gridlines with a {separation_m} meter spacing.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i \u003c {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create {num_grids} horizontal gridlines at {separation_m} meter intervals.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i \u003c {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea {num_grids} ejes horizontales separados por {separation_m} metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i \u003c {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Establish {num_grids} horizontal axes, spaced {separation_m} meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i \u003c {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Insert {num_grids} horizontal gridlines at specified distances of {separation_m} meters.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i \u003c {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create {num_grids} horizontal grids spaced {separation_m} meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i \u003c {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Generate {num_grids} horizontal gridlines at regular intervals of {separation_m} meters.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i \u003c {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Establish {num_grids} horizontal grid lines with a spacing of {separation_m} meters between each.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i \u003c {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Establish {num_grids} horizontal gridlines with a spacing of {separation_m} meters.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i \u003c {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create {num_grids} horizontal grids with a separation of {separation_m} meters.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i \u003c {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Genera {num_grids} rejillas horizontales con una separación de {separation_m}m.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i \u003c {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Insert {num_grids} horizontal gridlines at a spacing of {separation_m} meters.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i \u003c {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create {num_grids} vertical gridlines at intervals of {separation_m} meters.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i=0; i\u003c{num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea {num_grids} ejes en sentido vertical separados {separation_m} metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i=0; i\u003c{num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Establish {num_grids} vertical axes spaced apart by {separation_m} meters.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i=0; i\u003c{num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Insert {num_grids} vertical gridlines with a separation of {separation_m} meters.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i=0; i\u003c{num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create {num_grids} vertical grids spaced {separation_m} meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i=0; i\u003c{num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Establish {num_grids} vertical grid lines with a separation of {separation_m} meters between each.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i=0; i\u003c{num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Insert {num_grids} vertical grid lines at specified distances of {separation_m} meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i=0; i\u003c{num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Set up {num_grids} vertical grid markers at intervals of {separation_m} meters.","completion":"double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i=0; i\u003c{num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea columnas en cada intersección de ejes.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList\u003cGrid\u003e grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast\u003cGrid\u003e().ToList();\n\nif (colSymbol != null \u0026\u0026 level != null \u0026\u0026 grids.Count \u003e= 2)\n{\n    if(!colSymbol.IsActive) colSymbol.Activate();\n    for (int i = 0; i \u003c grids.Count; i++)\n    {\n        for (int j = i + 1; j \u003c grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                 if(results != null) {\n                     foreach (IntersectionResult ir in results)\n                     {\n                         doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                     }\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Create columns at each grid intersection.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList\u003cGrid\u003e grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast\u003cGrid\u003e().ToList();\n\nif (colSymbol != null \u0026\u0026 level != null \u0026\u0026 grids.Count \u003e= 2)\n{\n    if(!colSymbol.IsActive) colSymbol.Activate();\n    for (int i = 0; i \u003c grids.Count; i++)\n    {\n        for (int j = i + 1; j \u003c grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                 if(results != null) {\n                     foreach (IntersectionResult ir in results)\n                     {\n                         doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                     }\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Coloca pilares en todos los cruces de la rejilla.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList\u003cGrid\u003e grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast\u003cGrid\u003e().ToList();\n\nif (colSymbol != null \u0026\u0026 level != null \u0026\u0026 grids.Count \u003e= 2)\n{\n    if(!colSymbol.IsActive) colSymbol.Activate();\n    for (int i = 0; i \u003c grids.Count; i++)\n    {\n        for (int j = i + 1; j \u003c grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                 if(results != null) {\n                     foreach (IntersectionResult ir in results)\n                     {\n                         doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                     }\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Crea vigas entre las columnas alineadas horizontalmente.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList\u003cFamilyInstance\u003e columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().OrderBy(c =\u003e c.GetTransform().Origin.Y).ThenBy(c =\u003e c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null \u0026\u0026 level != null \u0026\u0026 columns.Count \u003e= 2)\n{\n    if(!beamSymbol.IsActive) beamSymbol.Activate();\n    for(int i=0; i \u003c columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null \u0026\u0026 p2 != null \u0026\u0026 Math.Abs(p1.Point.Y - p2.Point.Y) \u003c 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Create beams between horizontally aligned columns.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList\u003cFamilyInstance\u003e columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().OrderBy(c =\u003e c.GetTransform().Origin.Y).ThenBy(c =\u003e c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null \u0026\u0026 level != null \u0026\u0026 columns.Count \u003e= 2)\n{\n    if(!beamSymbol.IsActive) beamSymbol.Activate();\n    for(int i=0; i \u003c columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null \u0026\u0026 p2 != null \u0026\u0026 Math.Abs(p1.Point.Y - p2.Point.Y) \u003c 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Acota la longitud de un muro seleccionado por el usuario.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un muro para acotar\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null \u0026\u0026 activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}
{"prompt":"Dimension the length of a user-selected wall.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select a wall to dimension\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null \u0026\u0026 activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}
{"prompt":"Establish a new level named \u0027{level_name}\u0027 at an elevation of {elevation_m} meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Generate a new floor level named \u0027{level_name}\u0027 at an elevation of {elevation_m} meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Create a level named \u0027{level_name}\u0027 at an elevation of {elevation_m} meters in the model.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Crea un nuevo Nivel llamado \u0027{level_name}\u0027 a una elevación de {elevation_m} metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Create a new Level named \u0027{level_name}\u0027 at an elevation of {elevation_m} meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Establish a fresh Level denominated \u0027{level_name}\u0027 at an elevation of {elevation_m} meters above the existing datum.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Construct a new Level labelled \u0027{level_name}\u0027 with an elevation of {elevation_m} meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Produce a new Level, designated \u0027{level_name}\u0027, at an elevation of {elevation_m} meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Crea una tubería con un diámetro de {pipe_diameter_mm}mm.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null \u0026\u0026 pipeType != null \u0026\u0026 systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits({pipe_diameter_mm}, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Create a pipe with a diameter of {pipe_diameter_mm} millimeters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null \u0026\u0026 pipeType != null \u0026\u0026 systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits({pipe_diameter_mm}, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Form a pipe with a diameter of {pipe_diameter_mm} millimeters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null \u0026\u0026 pipeType != null \u0026\u0026 systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits({pipe_diameter_mm}, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Draft a pipe with a diameter of {pipe_diameter_mm} millimetres.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null \u0026\u0026 pipeType != null \u0026\u0026 systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits({pipe_diameter_mm}, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Model a pipe with a diameter of {pipe_diameter_mm} millimeters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null \u0026\u0026 pipeType != null \u0026\u0026 systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits({pipe_diameter_mm}, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Create a pipe with a {pipe_diameter_mm}mm diameter.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null \u0026\u0026 pipeType != null \u0026\u0026 systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits({pipe_diameter_mm}, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Produce a pipe with a specified diameter of {pipe_diameter_mm} millimeters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null \u0026\u0026 pipeType != null \u0026\u0026 systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits({pipe_diameter_mm}, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Draft a pipe having a diameter of {pipe_diameter_mm} millimeters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null \u0026\u0026 pipeType != null \u0026\u0026 systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits({pipe_diameter_mm}, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Modela un barandal en una escalera existente.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null \u0026\u0026 stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Model a railing on an existing staircase.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null \u0026\u0026 stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Place a piece of furniture at coordinates ({x1},{y1}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 furnitureSymbol != null)\n{\n    if(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), furnitureSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Arrange furniture at the designated coordinates ({x1},{y1}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 furnitureSymbol != null)\n{\n    if(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), furnitureSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Coloca un mueble en las coordenadas ({x1},{y1}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 furnitureSymbol != null)\n{\n    if(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), furnitureSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Position a piece of furniture at the specified coordinates ({x1},{y1}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 furnitureSymbol != null)\n{\n    if(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), furnitureSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Place a piece of furniture at coordinates ({x1},{y1}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 furnitureSymbol != null)\n{\n    if(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), furnitureSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Set the furniture object at the given coordinates ({x1},{y1}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 furnitureSymbol != null)\n{\n    if(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), furnitureSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Arrange the selected furniture item at the designated coordinates ({x1},{y1}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 furnitureSymbol != null)\n{\n    if(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), furnitureSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Position a piece of furniture at the specified coordinates ({x1},{y1}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 furnitureSymbol != null)\n{\n    if(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0), furnitureSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Design a beam footing with a length of {length_m} meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({length_m}, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Footing);\n}"}
{"prompt":"Crea una cimentación de viga de {length_m} metros de largo.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({length_m}, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Footing);\n}"}
{"prompt":"Create a beam foundation of {length_m} meters in length.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({length_m}, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Footing);\n}"}
{"prompt":"Form a foundation beam of {length_m} meters in span.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({length_m}, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Footing);\n}"}
{"prompt":"Create an {length_m}-meter long foundation beam.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({length_m}, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Footing);\n}"}
{"prompt":"Model a {length_m}-meter foundation beam.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({length_m}, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Footing);\n}"}
{"prompt":"Design and produce a {length_m}-meter long foundation beam.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({length_m}, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Footing);\n}"}
{"prompt":"Establish a {length_m}-meter foundation beam in the model.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits({length_m}, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Footing);\n}"}
{"prompt":"Añade refuerzo a una columna.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null \u0026\u0026 shape != null \u0026\u0026 column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Add reinforcement to a column.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null \u0026\u0026 shape != null \u0026\u0026 column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Fija el elemento seleccionado para que no se mueva.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count \u003e 0)\n{\n    Element elementToPin = doc.GetElement(selectedIds.First());\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}
{"prompt":"Pin the selected element so it cannot be moved.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count \u003e 0)\n{\n    Element elementToPin = doc.GetElement(selectedIds.First());\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}
{"prompt":"Position an electrical equipment at coordinates X={x1}, Y={y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 panelSymbol != null)\n{\n    if(!panelSymbol.IsActive) panelSymbol.Activate();\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Genera un equipo eléctrico en X={x1},Y={y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 panelSymbol != null)\n{\n    if(!panelSymbol.IsActive) panelSymbol.Activate();\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Create an electrical equipment at X={x1}, Y={y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 panelSymbol != null)\n{\n    if(!panelSymbol.IsActive) panelSymbol.Activate();\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Establish an electrical equipment at location X={x1}, Y={y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 panelSymbol != null)\n{\n    if(!panelSymbol.IsActive) panelSymbol.Activate();\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Form an electrical panel at the specified location X={x1}, Y={y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 panelSymbol != null)\n{\n    if(!panelSymbol.IsActive) panelSymbol.Activate();\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Generate an electrical panel at X={x1},Y={y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 panelSymbol != null)\n{\n    if(!panelSymbol.IsActive) panelSymbol.Activate();\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Produce an electrical panel at coordinates X={x1}, Y={y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 panelSymbol != null)\n{\n    if(!panelSymbol.IsActive) panelSymbol.Activate();\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Create an electrical panel at position X={x1}, Y={y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null \u0026\u0026 panelSymbol != null)\n{\n    if(!panelSymbol.IsActive) panelSymbol.Activate();\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Formulate a new floor level \u0027{level_name}\u0027 at an elevation of {elevation_m} meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Establish a new level \u0027{level_name}\u0027 at an elevation of {elevation_m} meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Crea un nuevo nivel \u0027{level_name}\u0027 a una elevación de {elevation_m} metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Create a new floor plane \u0027{level_name}\u0027 at an elevation of {elevation_m} meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Create a new level \u0027{level_name}\u0027 at an elevation of {elevation_m} meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Formulate a new horizontal work plane \u0027{level_name}\u0027 at the specified elevation of {elevation_m} meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Establish a fresh level \u0027{level_name}\u0027 at an elevation of {elevation_m} meters above the existing datum.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Generate a new level \u0027{level_name}\u0027 at the designated elevation of {elevation_m} meters, relative to the current datum plane.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Establish level \u0027{level_name}\u0027 at height {elevation_m} meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Insert level named \u0027{level_name}\u0027 at elevation {elevation_m} meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Añade un nivel llamado \u0027{level_name}\u0027 a {elevation_m} metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Create a new level named \u0027{level_name}\u0027 at elevation {elevation_m} meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Model a wall within the {level_name}, spanning from point ({x1},{y1},{z1}) to point ({x2},{y2},{z2}), with a height of {height_m} meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null \u0026\u0026 wallType != null)\n{\n    XYZ p1 = new XYZ({x1}, {y1}, {z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({z2}, UnitTypeId.Meters));\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Crea un muro en el {level_name} que vaya de ({x1},{y1},{z1}) a ({x2},{y2},{z2}) con una altura de {height_m} metros.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null \u0026\u0026 wallType != null)\n{\n    XYZ p1 = new XYZ({x1}, {y1}, {z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({z2}, UnitTypeId.Meters));\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Draft a wall on the {level_name} extending from ({x1},{y1},{z1}) to ({x2},{y2},{z2}) and set its height to {height_m} meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null \u0026\u0026 wallType != null)\n{\n    XYZ p1 = new XYZ({x1}, {y1}, {z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({z2}, UnitTypeId.Meters));\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Create a vertical wall element in the {level_name} that spans from ({x1},{y1},{z1}) to ({x2},{y2},{z2}), with a height of {height_m} meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null \u0026\u0026 wallType != null)\n{\n    XYZ p1 = new XYZ({x1}, {y1}, {z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({z2}, UnitTypeId.Meters));\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Delineate a wall on {level_name} at the specified coordinates ({x1},{y1},{z1}) to ({x2},{y2},{z2}), with a height of {height_m} meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null \u0026\u0026 wallType != null)\n{\n    XYZ p1 = new XYZ({x1}, {y1}, {z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({z2}, UnitTypeId.Meters));\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Sketch a wall on {level_name} with the defined parameters: originating from ({x1},{y1},{z1}), ending at ({x2},{y2},{z2}), and having a height of {height_m} meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null \u0026\u0026 wallType != null)\n{\n    XYZ p1 = new XYZ({x1}, {y1}, {z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({z2}, UnitTypeId.Meters));\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Model a wall on level {level_name}, originating from coordinates ({x1},{y1},{z1}) and extending to ({x2},{y2},{z2}), with a height of {height_m} meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null \u0026\u0026 wallType != null)\n{\n    XYZ p1 = new XYZ({x1}, {y1}, {z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({z2}, UnitTypeId.Meters));\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Create a wall on {level_name} from ({x1},{y1},{z1}) to ({x2},{y2},{z2}) with a height of {height_m} meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null \u0026\u0026 wallType != null)\n{\n    XYZ p1 = new XYZ({x1}, {y1}, {z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({z2}, UnitTypeId.Meters));\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Exporta el modelo actual a un archivo NWC.","completion":"string folderPath = \"C:/exports/\";\nstring fileName = doc.Title + \".nwc\";\nNavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Export the current model to an NWC file.","completion":"string folderPath = \"C:/exports/\";\nstring fileName = doc.Title + \".nwc\";\nNavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Update the material parameter of all walls to \u0027{material_name}\u0027. ","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\n\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null \u0026\u0026 !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Set the material parameter of all walls to \u0027{material_name}\u0027.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\n\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null \u0026\u0026 !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Assign \u0027{material_name}\u0027 as the material parameter for all walls.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\n\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null \u0026\u0026 !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Rellena el parámetro de material de todos los muros con \u0027{material_name}\u0027.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\n\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null \u0026\u0026 !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Fill the material parameter of all walls with \u0027{material_name}\u0027.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\n\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null \u0026\u0026 !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Set the material parameter of all walls to \u0027{material_name}\u0027.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\n\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null \u0026\u0026 !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Assign \u0027{material_name}\u0027 to the material parameter for all walls.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\n\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null \u0026\u0026 !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"All walls should have their material parameter set to \u0027{material_name}.\u0027","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\n\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null \u0026\u0026 !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Establish a new wall type called \u0027{wall_type_name}\u0027 with a width of {width_cm}cm.","completion":"string newTypeName = \"{wall_type_name}\";\nWallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (wallTypeToDuplicate != null)\n{\n    WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n        cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n        cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits({width_cm} / 100.0, UnitTypeId.Meters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Design a new wall type \u0027{wall_type_name}\u0027 with a width of {width_cm} centimeters.","completion":"string newTypeName = \"{wall_type_name}\";\nWallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (wallTypeToDuplicate != null)\n{\n    WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n        cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n        cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits({width_cm} / 100.0, UnitTypeId.Meters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Create a new wall type named \u0027{wall_type_name}\u0027 with a width of {width_cm}cm.","completion":"string newTypeName = \"{wall_type_name}\";\nWallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (wallTypeToDuplicate != null)\n{\n    WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n        cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n        cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits({width_cm} / 100.0, UnitTypeId.Meters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Crea un nuevo tipo de muro de {width_cm}cm llamado \u0027{wall_type_name}\u0027.","completion":"string newTypeName = \"{wall_type_name}\";\nWallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (wallTypeToDuplicate != null)\n{\n    WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n        cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n        cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits({width_cm} / 100.0, UnitTypeId.Meters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Load the family \u0027{family_name}.rfa\u0027 and place it at ({x1},{y1},{z1}) on the {level_name}.","completion":"string familyPath = \"C:/Rutas/Comunes/{family_name}.rfa\";\nFamily deskFamily = null;\nbool familyLoaded = doc.LoadFamily(familyPath, out deskFamily);\n\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (familyLoaded \u0026\u0026 deskFamily != null \u0026\u0026 level1 != null)\n{\n    FamilySymbol deskSymbol = doc.GetElement(deskFamily.GetFamilySymbolIds().FirstOrDefault()) as FamilySymbol;\n    if (deskSymbol != null)\n    {\n        if (!deskSymbol.IsActive) deskSymbol.Activate();\n        XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), {z1});\n        doc.Create.NewFamilyInstance(point, deskSymbol, level1, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Insert the family \u0027{family_name}.rfa\u0027 at the specified coordinates ({x1},{y1},{z1}) on level {level_name}.","completion":"string familyPath = \"C:/Rutas/Comunes/{family_name}.rfa\";\nFamily deskFamily = null;\nbool familyLoaded = doc.LoadFamily(familyPath, out deskFamily);\n\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (familyLoaded \u0026\u0026 deskFamily != null \u0026\u0026 level1 != null)\n{\n    FamilySymbol deskSymbol = doc.GetElement(deskFamily.GetFamilySymbolIds().FirstOrDefault()) as FamilySymbol;\n    if (deskSymbol != null)\n    {\n        if (!deskSymbol.IsActive) deskSymbol.Activate();\n        XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), {z1});\n        doc.Create.NewFamilyInstance(point, deskSymbol, level1, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Position the family \u0027{family_name}.rfa\u0027 at the given coordinates ({x1},{y1},{z1}) on level {level_name}.","completion":"string familyPath = \"C:/Rutas/Comunes/{family_name}.rfa\";\nFamily deskFamily = null;\nbool familyLoaded = doc.LoadFamily(familyPath, out deskFamily);\n\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (familyLoaded \u0026\u0026 deskFamily != null \u0026\u0026 level1 != null)\n{\n    FamilySymbol deskSymbol = doc.GetElement(deskFamily.GetFamilySymbolIds().FirstOrDefault()) as FamilySymbol;\n    if (deskSymbol != null)\n    {\n        if (!deskSymbol.IsActive) deskSymbol.Activate();\n        XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), {z1});\n        doc.Create.NewFamilyInstance(point, deskSymbol, level1, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Carga la familia \u0027{family_name}.rfa\u0027 y colócala en ({x1},{y1},{z1}) en el {level_name}.","completion":"string familyPath = \"C:/Rutas/Comunes/{family_name}.rfa\";\nFamily deskFamily = null;\nbool familyLoaded = doc.LoadFamily(familyPath, out deskFamily);\n\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (familyLoaded \u0026\u0026 deskFamily != null \u0026\u0026 level1 != null)\n{\n    FamilySymbol deskSymbol = doc.GetElement(deskFamily.GetFamilySymbolIds().FirstOrDefault()) as FamilySymbol;\n    if (deskSymbol != null)\n    {\n        if (!deskSymbol.IsActive) deskSymbol.Activate();\n        XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), {z1});\n        doc.Create.NewFamilyInstance(point, deskSymbol, level1, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Insert the \u0027{family_name}.rfa\u0027 family into the project and locate it at the coordinates ({x1},{y1},{z1}) on the {level_name} level.","completion":"string familyPath = \"C:/Common/Paths/{family_name}.rfa\";\nFamily tableFamily = null;\nbool familyLoaded = doc.LoadFamily(familyPath, out tableFamily);\n\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (familyLoaded \u0026\u0026 tableFamily != null \u0026\u0026 level1 != null)\n{\n    FamilySymbol tableSymbol = doc.GetElement(tableFamily.GetFamilySymbolIds().FirstOrDefault()) as FamilySymbol;\n    if (tableSymbol != null)\n    {\n        if (!tableSymbol.IsActive) tableSymbol.Activate();\n        XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), {z1});\n        doc.Create.NewFamilyInstance(point, tableSymbol, level1, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Place the \u0027{family_name}.rfa\u0027 family onto the {level_name} level, with its position being defined by the coordinates ({x1},{y1},{z1}).","completion":"string familyPath = \"C:/Common/Paths/{family_name}.rfa\";\nFamily tableFamily = null;\nbool familyLoaded = doc.LoadFamily(familyPath, out tableFamily);\n\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (familyLoaded \u0026\u0026 tableFamily != null \u0026\u0026 level1 != null)\n{\n    FamilySymbol tableSymbol = doc.GetElement(tableFamily.GetFamilySymbolIds().FirstOrDefault()) as FamilySymbol;\n    if (tableSymbol != null)\n    {\n        if (!tableSymbol.IsActive) tableSymbol.Activate();\n        XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), {z1});\n        doc.Create.NewFamilyInstance(point, tableSymbol, level1, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Import the \u0027{family_name}.rfa\u0027 family and position it at ({x1},{y1},{z1}) on the {level_name} level.","completion":"string familyPath = \"C:/Common/Paths/{family_name}.rfa\";\nFamily tableFamily = null;\nbool familyLoaded = doc.LoadFamily(familyPath, out tableFamily);\n\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (familyLoaded \u0026\u0026 tableFamily != null \u0026\u0026 level1 != null)\n{\n    FamilySymbol tableSymbol = doc.GetElement(tableFamily.GetFamilySymbolIds().FirstOrDefault()) as FamilySymbol;\n    if (tableSymbol != null)\n    {\n        if (!tableSymbol.IsActive) tableSymbol.Activate();\n        XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), {z1});\n        doc.Create.NewFamilyInstance(point, tableSymbol, level1, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Load the \u0027{family_name}.rfa\u0027 family and place it at ({x1},{y1},{z1}) on {level_name}.","completion":"string familyPath = \"C:/Common/Paths/{family_name}.rfa\";\nFamily tableFamily = null;\nbool familyLoaded = doc.LoadFamily(familyPath, out tableFamily);\n\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (familyLoaded \u0026\u0026 tableFamily != null \u0026\u0026 level1 != null)\n{\n    FamilySymbol tableSymbol = doc.GetElement(tableFamily.GetFamilySymbolIds().FirstOrDefault()) as FamilySymbol;\n    if (tableSymbol != null)\n    {\n        if (!tableSymbol.IsActive) tableSymbol.Activate();\n        XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), {z1});\n        doc.Create.NewFamilyInstance(point, tableSymbol, level1, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Crea una nueva habitación en el {level_name} en el punto ({x1}, {y1}).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters));\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Create a new room on the {level_name} at the coordinates ({x1}, {y1}).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters));\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Form a new room on the {level_name} at the coordinates ({x1}, {y1}).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters));\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Generate a new room in the {level_name} at position ({x1}, {y1}).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters));\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Designate a new room on {level_name} at point ({x1}, {y1}).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters));\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Model a new room on {level_name} at coordinates ({x1}, {y1}).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters));\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Create a new room on {level_name} at point ({x1}, {y1}).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters));\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Establish a new room on {level_name} at location ({x1}, {y1}).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters));\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Une la geometría de una columna y un suelo que se cruzan.","completion":"Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\n\nif (column != null \u0026\u0026 floor != null)\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}
{"prompt":"Join the geometry of an intersecting column and floor.","completion":"Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\n\nif (column != null \u0026\u0026 floor != null)\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}
{"prompt":"Obtén el elemento anfitrión de la primera ventana que encuentres.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}
{"prompt":"Get the host element of the first window found.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}
{"prompt":"Calcula la longitud total de todos los ductos de Suministro de Aire.","completion":"List\u003cDuct\u003e ducts = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctCurves).WhereElementIsNotElementType().Cast\u003cDuct\u003e().Where(d =\u003e d.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString() == \"SupplyAir\").ToList();\ndouble totalLength = 0.0;\nforeach (Duct d in ducts)\n{\n    totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}"}
{"prompt":"Calculate the total length of all Supply Air ducts.","completion":"List\u003cDuct\u003e ducts = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctCurves).WhereElementIsNotElementType().Cast\u003cDuct\u003e().Where(d =\u003e d.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString() == \"SupplyAir\").ToList();\ndouble totalLength = 0.0;\nforeach (Duct d in ducts)\n{\n    totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}"}
{"prompt":"Alinea las líneas de centro de dos muros seleccionados por el usuario.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona el primer muro (el que se moverá)\");\nReference r2 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona el segundo muro (el de referencia)\");\n\nif (r1 != null \u0026\u0026 r2 != null)\n{\n    Wall w1 = doc.GetElement(r1) as Wall;\n    Wall w2 = doc.GetElement(r2) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (w1 != null \u0026\u0026 w2 != null \u0026\u0026 activeView != null)\n    {\n        LocationCurve lc1 = w1.Location as LocationCurve;\n        LocationCurve lc2 = w2.Location as LocationCurve;\n        if (lc1 != null \u0026\u0026 lc2 != null)\n        {\n            doc.Create.NewAlignment(activeView, lc1.Curve.Reference, lc2.Curve.Reference);\n        }\n    }\n}"}
{"prompt":"Align the centerlines of two user-selected walls.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select the first wall (the one that will move)\");\nReference r2 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select the second wall (the reference)\");\n\nif (r1 != null \u0026\u0026 r2 != null)\n{\n    Wall w1 = doc.GetElement(r1) as Wall;\n    Wall w2 = doc.GetElement(r2) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (w1 != null \u0026\u0026 w2 != null \u0026\u0026 activeView != null)\n    {\n        LocationCurve lc1 = w1.Location as LocationCurve;\n        LocationCurve lc2 = w2.Location as LocationCurve;\n        if (lc1 != null \u0026\u0026 lc2 != null)\n        {\n            doc.Create.NewAlignment(activeView, lc1.Curve.Reference, lc2.Curve.Reference);\n        }\n    }\n}"}
{"prompt":"Crea una superficie topográfica a partir de una lista de 4 puntos.","completion":"IList\u003cXYZ\u003e points = new List\u003cXYZ\u003e\n{\n    new XYZ(0, 0, 0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters))\n};\nTopographySurface.Create(doc, points);"}
{"prompt":"Create a topography surface from a list of 4 points.","completion":"IList\u003cXYZ\u003e points = new List\u003cXYZ\u003e\n{\n    new XYZ(0, 0, 0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters))\n};\nTopographySurface.Create(doc, points);"}
{"prompt":"Create a copy of the current view and name it \u0027{view_name}\u0027.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{view_name}\";\n    }\n}"}
{"prompt":"Replicate the active perspective and designate it as \u0027{view_name}\u0027.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{view_name}\";\n    }\n}"}
{"prompt":"Duplicate the active view and label it as \u0027{view_name}\u0027.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{view_name}\";\n    }\n}"}
{"prompt":"Crea una copia de la vista activa y nómbrala \u0027{view_name}\u0027.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{view_name}\";\n    }\n}"}
{"prompt":"Copy the active view and label it \u0027{view_name}\u0027. ","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{view_name}\";\n    }\n}"}
{"prompt":"Duplicate the active view and name it \u0027{view_name}\u0027.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{view_name}\";\n    }\n}"}
{"prompt":"Duplicate the present view and title it \u0027{view_name}\u0027. ","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{view_name}\";\n    }\n}"}
{"prompt":"Replicate the current view and designate it as \u0027{view_name}\u0027. ","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{view_name}\";\n    }\n}"}
{"prompt":"Crea una vista 3D por defecto.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n}"}
{"prompt":"Create a default 3D view.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n}"}
{"prompt":"Obtén todas las habitaciones que están en el {level_name}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nList\u003cElement\u003e roomsOnLevel = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r =\u003e r.LevelId == level.Id).ToList();\n}"}
{"prompt":"Find the rooms on the designated {level_name}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nList\u003cElement\u003e roomsOnLevel = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r =\u003e r.LevelId == level.Id).ToList();\n}"}
{"prompt":"Retrieve all rooms present within the {level_name}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nList\u003cElement\u003e roomsOnLevel = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r =\u003e r.LevelId == level.Id).ToList();\n}"}
{"prompt":"Locate all rooms on the specified {level_name}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nList\u003cElement\u003e roomsOnLevel = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r =\u003e r.LevelId == level.Id).ToList();\n}"}
{"prompt":"Retrieve all rooms within {level_name}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nList\u003cElement\u003e roomsOnLevel = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r =\u003e r.LevelId == level.Id).ToList();\n}"}
{"prompt":"Get all rooms on {level_name}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nList\u003cElement\u003e roomsOnLevel = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r =\u003e r.LevelId == level.Id).ToList();\n}"}
{"prompt":"Identify all enclosed spaces on {level_name}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nList\u003cElement\u003e roomsOnLevel = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r =\u003e r.LevelId == level.Id).ToList();\n}"}
{"prompt":"Locate all rooms on the {level_name} level.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nList\u003cElement\u003e roomsOnLevel = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r =\u003e r.LevelId == level.Id).ToList();\n}"}
{"prompt":"Create a section view named \u0027{view_name}\u0027.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.Section);\n\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-1, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    \n    if (sectionView != null)\n    {\n        sectionView.Name = \"{view_name}\";\n    }\n}"}
{"prompt":"Generate a sectional view as \u0027{view_name}\u0027.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.Section);\n\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-1, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    \n    if (sectionView != null)\n    {\n        sectionView.Name = \"{view_name}\";\n    }\n}"}
{"prompt":"Name the section view \u0027{view_name}\u0027 and create it.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.Section);\n\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-1, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    \n    if (sectionView != null)\n    {\n        sectionView.Name = \"{view_name}\";\n    }\n}"}
{"prompt":"Crea una vista de sección llamada \u0027{view_name}\u0027.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.Section);\n\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-1, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    \n    if (sectionView != null)\n    {\n        sectionView.Name = \"{view_name}\";\n    }\n}"}
{"prompt":"Produce a section view called \u0027{view_name}\u0027.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.Section);\n\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-1, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    \n    if (sectionView != null)\n    {\n        sectionView.Name = \"{view_name}\";\n    }\n}"}
{"prompt":"Create a section view named \u0027{view_name}\u0027.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.Section);\n\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-1, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    \n    if (sectionView != null)\n    {\n        sectionView.Name = \"{view_name}\";\n    }\n}"}
{"prompt":"Establish a sectional cut named \u0027{view_name}\u0027.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.Section);\n\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-1, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    \n    if (sectionView != null)\n    {\n        sectionView.Name = \"{view_name}\";\n    }\n}"}
{"prompt":"Generate a sectional perspective labeled \u0027{view_name}\u0027.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.Section);\n\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-1, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    \n    if (sectionView != null)\n    {\n        sectionView.Name = \"{view_name}\";\n    }\n}"}
{"prompt":"Cambia el nivel de detalle de la vista activa a \u0027Medio\u0027.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Medium;\n}"}
{"prompt":"Change the detail level of the active view to \u0027Medium\u0027.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Medium;\n}"}
{"prompt":"Establish a group from the current selection and displace it {distance_m} meters to the right.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n{\n    Group group = doc.Create.NewGroup(selectedIds);\n    if (group != null)\n    {\n        XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters), 0, 0);\n        ElementTransformUtils.MoveElement(doc, group.Id, translation);\n    }\n}"}
{"prompt":"Genera un grupo a partir de la selección actual y muévelo {distance_m} metros a la derecha.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n{\n    Group group = doc.Create.NewGroup(selectedIds);\n    if (group != null)\n    {\n        XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters), 0, 0);\n        ElementTransformUtils.MoveElement(doc, group.Id, translation);\n    }\n}"}
{"prompt":"Create a group from the current selection and translate it {distance_m} meters to the right.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n{\n    Group group = doc.Create.NewGroup(selectedIds);\n    if (group != null)\n    {\n        XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters), 0, 0);\n        ElementTransformUtils.MoveElement(doc, group.Id, translation);\n    }\n}"}
{"prompt":"Form a group from the current selection and move it {distance_m} meters to the right.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n{\n    Group group = doc.Create.NewGroup(selectedIds);\n    if (group != null)\n    {\n        XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters), 0, 0);\n        ElementTransformUtils.MoveElement(doc, group.Id, translation);\n    }\n}"}
{"prompt":"Form a collection from the current selection and translate it {distance_m} meters horizontally.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n{\n    Group group = doc.Create.NewGroup(selectedIds);\n    if (group != null)\n    {\n        XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters), 0, 0);\n        ElementTransformUtils.MoveElement(doc, group.Id, translation);\n    }\n}"}
{"prompt":"Group the chosen elements and relocate it {distance_m} meters to the east.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n{\n    Group group = doc.Create.NewGroup(selectedIds);\n    if (group != null)\n    {\n        XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters), 0, 0);\n        ElementTransformUtils.MoveElement(doc, group.Id, translation);\n    }\n}"}
{"prompt":"Create a group from the current selection and move it {distance_m} meters to the right.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n{\n    Group group = doc.Create.NewGroup(selectedIds);\n    if (group != null)\n    {\n        XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters), 0, 0);\n        ElementTransformUtils.MoveElement(doc, group.Id, translation);\n    }\n}"}
{"prompt":"Aggregate a set from the current selection and shift it {distance_m} meters towards the right.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n{\n    Group group = doc.Create.NewGroup(selectedIds);\n    if (group != null)\n    {\n        XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters), 0, 0);\n        ElementTransformUtils.MoveElement(doc, group.Id, translation);\n    }\n}"}
{"prompt":"Obtén todas las instancias de la categoría Mobiliario.","completion":"List\u003cElement\u003e furnitureInstances = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToList();"}
{"prompt":"Get all instances of the Furniture category.","completion":"List\u003cElement\u003e furnitureInstances = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToList();"}
{"prompt":"Activa todos los símbolos de familia cargados en el proyecto.","completion":"List\u003cFamilySymbol\u003e symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast\u003cFamilySymbol\u003e().ToList();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) \n    {\n        sym.Activate();\n    }\n}"}
{"prompt":"Activate all family symbols loaded in the project.","completion":"List\u003cFamilySymbol\u003e symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast\u003cFamilySymbol\u003e().ToList();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) \n    {\n        sym.Activate();\n    }\n}"}
{"prompt":"Aplica un color rojo a todas las ventanas en la vista activa.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(255, 0, 0));\n    ICollection\u003cElementId\u003e windows = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().ToElementIds();\n    \n    foreach (ElementId windowId in windows)\n    {\n        activeView.SetElementOverrides(windowId, ogs);\n    }\n}"}
{"prompt":"Apply a red color to all windows in the active view.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(255, 0, 0));\n    ICollection\u003cElementId\u003e windows = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().ToElementIds();\n    \n    foreach (ElementId windowId in windows)\n    {\n        activeView.SetElementOverrides(windowId, ogs);\n    }\n}"}
{"prompt":"Inserta una nota de texto con \u0027{text_note}\u0027 en la vista actual.","completion":"View activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (activeView != null \u0026\u0026 defaultTypeId != ElementId.InvalidElementId)\n{\n    XYZ position = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\n    TextNote.Create(doc, activeView.Id, position, \"{text_note}\", defaultTypeId);\n}"}
{"prompt":"Place a text note with \u0027{text_note}\u0027 on the active view.","completion":"View activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (activeView != null \u0026\u0026 defaultTypeId != ElementId.InvalidElementId)\n{\n    XYZ position = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\n    TextNote.Create(doc, activeView.Id, position, \"{text_note}\", defaultTypeId);\n}"}
{"prompt":"Insert a text note with \u0027{text_note}\u0027 on the current view.","completion":"View activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (activeView != null \u0026\u0026 defaultTypeId != ElementId.InvalidElementId)\n{\n    XYZ position = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\n    TextNote.Create(doc, activeView.Id, position, \"{text_note}\", defaultTypeId);\n}"}
{"prompt":"Add a text note containing \u0027{text_note}\u0027 to the current view.","completion":"View activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (activeView != null \u0026\u0026 defaultTypeId != ElementId.InvalidElementId)\n{\n    XYZ position = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\n    TextNote.Create(doc, activeView.Id, position, \"{text_note}\", defaultTypeId);\n}"}
{"prompt":"Incorporate a text note with \u0027{text_note}\u0027 into the active view.","completion":"View activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (activeView != null \u0026\u0026 defaultTypeId != ElementId.InvalidElementId)\n{\n    XYZ position = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\n    TextNote.Create(doc, activeView.Id, position, \"{text_note}\", defaultTypeId);\n}"}
{"prompt":"Add a text note annotated with \u0027{text_note}\u0027 to the current visualization.","completion":"View activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (activeView != null \u0026\u0026 defaultTypeId != ElementId.InvalidElementId)\n{\n    XYZ position = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\n    TextNote.Create(doc, activeView.Id, position, \"{text_note}\", defaultTypeId);\n}"}
{"prompt":"Create a text note containing \u0027{text_note}\u0027 within the present perspective.","completion":"View activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (activeView != null \u0026\u0026 defaultTypeId != ElementId.InvalidElementId)\n{\n    XYZ position = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\n    TextNote.Create(doc, activeView.Id, position, \"{text_note}\", defaultTypeId);\n}"}
{"prompt":"Insert a text note with \u0027{text_note}\u0027 in the current view.","completion":"View activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (activeView != null \u0026\u0026 defaultTypeId != ElementId.InvalidElementId)\n{\n    XYZ position = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\n    TextNote.Create(doc, activeView.Id, position, \"{text_note}\", defaultTypeId);\n}"}
{"prompt":"Transfer the selected item to location ({x1},{y1}).","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para mover\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            XYZ newPosition = new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), lp.Point.Z);\n            lp.Point = newPosition;\n        }\n    }\n}"}
{"prompt":"Mueve un elemento seleccionado a la posición ({x1},{y1}).","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para mover\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            XYZ newPosition = new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), lp.Point.Z);\n            lp.Point = newPosition;\n        }\n    }\n}"}
{"prompt":"Move the selected element to position ({x1},{y1}).","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para mover\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            XYZ newPosition = new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), lp.Point.Z);\n            lp.Point = newPosition;\n        }\n    }\n}"}
{"prompt":"Relocate the chosen element to coordinates ({x1},{y1}).","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para mover\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            XYZ newPosition = new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), lp.Point.Z);\n            lp.Point = newPosition;\n        }\n    }\n}"}
{"prompt":"Transfer the chosen element to the specified position ({x1},{y1}).","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element to move\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            XYZ newPosition = new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), lp.Point.Z);\n            lp.Point = newPosition;\n        }\n    }\n}"}
{"prompt":"Relocate the chosen element to the coordinates ({x1},{y1}).","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element to move\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            XYZ newPosition = new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), lp.Point.Z);\n            lp.Point = newPosition;\n        }\n    }\n}"}
{"prompt":"Move a selected element to position ({x1},{y1}).","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element to move\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            XYZ newPosition = new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), lp.Point.Z);\n            lp.Point = newPosition;\n        }\n    }\n}"}
{"prompt":"Shift the selected element to the designated location ({x1},{y1}).","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element to move\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            XYZ newPosition = new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), lp.Point.Z);\n            lp.Point = newPosition;\n        }\n    }\n}"}
{"prompt":"Set the \u0027Comments\u0027 parameter of all doors on the {level_name} to \u0027{parameter_value}\u0027.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (level1 != null)\n{\n    List\u003cFamilyInstance\u003e doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().Where(fi =\u003e fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null \u0026\u0026 !commentsParam.IsReadOnly) commentsParam.Set(\"{parameter_value}\");\n    }\n}"}
{"prompt":"Establece el parámetro \u0027Comentarios\u0027 de todas las puertas del {level_name} a \u0027{parameter_value}\u0027.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (level1 != null)\n{\n    List\u003cFamilyInstance\u003e doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().Where(fi =\u003e fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null \u0026\u0026 !commentsParam.IsReadOnly) commentsParam.Set(\"{parameter_value}\");\n    }\n}"}
{"prompt":"Modify the \u0027Comments\u0027 parameter for all doors within the {level_name} to \u0027{parameter_value}\u0027.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (level1 != null)\n{\n    List\u003cFamilyInstance\u003e doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().Where(fi =\u003e fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null \u0026\u0026 !commentsParam.IsReadOnly) commentsParam.Set(\"{parameter_value}\");\n    }\n}"}
{"prompt":"Adjust the \u0027Comments\u0027 parameter of each door on the {level_name} to \u0027{parameter_value}\u0027.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (level1 != null)\n{\n    List\u003cFamilyInstance\u003e doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().Where(fi =\u003e fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null \u0026\u0026 !commentsParam.IsReadOnly) commentsParam.Set(\"{parameter_value}\");\n    }\n}"}
{"prompt":"Establish the \u0027Comments\u0027 parameter for all doors on the designated level {level_name} as \u0027{parameter_value}\u0027.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (level1 != null)\n{\n    List\u003cFamilyInstance\u003e doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().Where(fi =\u003e fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null \u0026\u0026 !commentsParam.IsReadOnly) commentsParam.Set(\"{parameter_value}\");\n    }\n}"}
{"prompt":"Set the \u0027Comments\u0027 parameter for all doors on {level_name} to \u0027{parameter_value}\u0027.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (level1 != null)\n{\n    List\u003cFamilyInstance\u003e doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().Where(fi =\u003e fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null \u0026\u0026 !commentsParam.IsReadOnly) commentsParam.Set(\"{parameter_value}\");\n    }\n}"}
{"prompt":"Adjust the \u0027Comments\u0027 parameter for all doors within {level_name} to the provided value \u0027{parameter_value}\u0027.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (level1 != null)\n{\n    List\u003cFamilyInstance\u003e doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().Where(fi =\u003e fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null \u0026\u0026 !commentsParam.IsReadOnly) commentsParam.Set(\"{parameter_value}\");\n    }\n}"}
{"prompt":"Configure the \u0027Comments\u0027 parameter for all doors on level {level_name} to the specified value \u0027{parameter_value}\u0027.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (level1 != null)\n{\n    List\u003cFamilyInstance\u003e doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().Where(fi =\u003e fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null \u0026\u0026 !commentsParam.IsReadOnly) commentsParam.Set(\"{parameter_value}\");\n    }\n}"}
{"prompt":"Exporta cada tabla de planificación a un archivo CSV individual.","completion":"string exportPath = \"C:/RevitExports/\";\nList\u003cViewSchedule\u003e schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast\u003cViewSchedule\u003e().Where(vs =\u003e !vs.IsTemplate).ToList();\nViewScheduleExportOptions options = new ViewScheduleExportOptions();\noptions.FieldDelimiter = \",\";\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Export(exportPath, schedule.Name + \".csv\", options);\n}"}
{"prompt":"Export each schedule to an individual CSV file.","completion":"string exportPath = \"C:/RevitExports/\";\nList\u003cViewSchedule\u003e schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast\u003cViewSchedule\u003e().Where(vs =\u003e !vs.IsTemplate).ToList();\nViewScheduleExportOptions options = new ViewScheduleExportOptions();\noptions.FieldDelimiter = \",\";\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Export(exportPath, schedule.Name + \".csv\", options);\n}"}
{"prompt":"Exporta el modelo a formato IFC4 para coordinación.","completion":"string folderPath = \"C:/RevitExports/\";\nstring fileName = doc.Title + \"-Coordination.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Export the model to IFC4 format for coordination.","completion":"string folderPath = \"C:/RevitExports/\";\nstring fileName = doc.Title + \"-Coordination.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Vincula un archivo DWG como referencia en la vista activa.","completion":"string filePath = \"C:/CAD_Files/Base_Plan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.ColorMode = ImportColorMode.Preserved;\nElementId linkedFileId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(filePath, options, activeView, out linkedFileId);\n}"}
{"prompt":"Link a DWG file as a reference in the active view.","completion":"string filePath = \"C:/CAD_Files/Base_Plan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.ColorMode = ImportColorMode.Preserved;\nElementId linkedFileId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(filePath, options, activeView, out linkedFileId);\n}"}
{"prompt":"Exporta todas las hojas de un conjunto a un único PDF.","completion":"ViewSheetSet sheetSet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheetSet)).FirstOrDefault() as ViewSheetSet;\n\nif (sheetSet != null)\n{\n    string folderPath = \"C:/RevitExports/\";\n    PDFExportOptions options = new PDFExportOptions();\n    options.Combine = true;\n    options.FileName = sheetSet.Name;\n    List\u003cElementId\u003e sheetIds = sheetSet.Views.Cast\u003cViewSheet\u003e().Select(s =\u003e s.Id).ToList();\n    doc.Export(folderPath, sheetIds, options);\n}"}
{"prompt":"Export all sheets in a set to a single combined PDF.","completion":"ViewSheetSet sheetSet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheetSet)).FirstOrDefault() as ViewSheetSet;\n\nif (sheetSet != null)\n{\n    string folderPath = \"C:/RevitExports/\";\n    PDFExportOptions options = new PDFExportOptions();\n    options.Combine = true;\n    options.FileName = sheetSet.Name;\n    List\u003cElementId\u003e sheetIds = sheetSet.Views.Cast\u003cViewSheet\u003e().Select(s =\u003e s.Id).ToList();\n    doc.Export(folderPath, sheetIds, options);\n}"}
{"prompt":"Create a new material named \u0027{material_name}\u0027 with a wooden surface pattern.","completion":"string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p =\u003e p.Name.Contains(\"Wood\") || p.Name.Contains(\"Madera\")) as FillPatternElement;\n    \n    if (material != null \u0026\u0026 fillPattern != null)\n    {\n        material.SurfaceForegroundPatternId = fillPattern.Id;\n        material.Color = new Color(139, 69, 19);\n    }\n}"}
{"prompt":"Generate a new material, \u0027{material_name}\u0027, containing a wooden surface pattern.","completion":"string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p =\u003e p.Name.Contains(\"Wood\") || p.Name.Contains(\"Madera\")) as FillPatternElement;\n    \n    if (material != null \u0026\u0026 fillPattern != null)\n    {\n        material.SurfaceForegroundPatternId = fillPattern.Id;\n        material.Color = new Color(139, 69, 19);\n    }\n}"}
{"prompt":"Formulate a new material, \u0027{material_name}\u0027, featuring a wooden surface texture.","completion":"string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p =\u003e p.Name.Contains(\"Wood\") || p.Name.Contains(\"Madera\")) as FillPatternElement;\n    \n    if (material != null \u0026\u0026 fillPattern != null)\n    {\n        material.SurfaceForegroundPatternId = fillPattern.Id;\n        material.Color = new Color(139, 69, 19);\n    }\n}"}
{"prompt":"Crea un nuevo material llamado \u0027{material_name}\u0027 con un patrón de superficie de madera.","completion":"string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p =\u003e p.Name.Contains(\"Wood\") || p.Name.Contains(\"Madera\")) as FillPatternElement;\n    \n    if (material != null \u0026\u0026 fillPattern != null)\n    {\n        material.SurfaceForegroundPatternId = fillPattern.Id;\n        material.Color = new Color(139, 69, 19);\n    }\n}"}
{"prompt":"Develop a fresh material referred to as \u0027{material_name}\u0027, characterized by a wood surface pattern.","completion":"string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p =\u003e p.Name.Contains(\"Wood\") || p.Name.Contains(\"Madera\")) as FillPatternElement;\n    \n    if (material != null \u0026\u0026 fillPattern != null)\n    {\n        material.SurfaceForegroundPatternId = fillPattern.Id;\n        material.Color = new Color(139, 69, 19);\n    }\n}"}
{"prompt":"Establish a novel material designated as \u0027{material_name}\u0027, featuring a wood surface texture.","completion":"string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p =\u003e p.Name.Contains(\"Wood\") || p.Name.Contains(\"Madera\")) as FillPatternElement;\n    \n    if (material != null \u0026\u0026 fillPattern != null)\n    {\n        material.SurfaceForegroundPatternId = fillPattern.Id;\n        material.Color = new Color(139, 69, 19);\n    }\n}"}
{"prompt":"Generate a new material labeled \u0027{material_name}\u0027, with a wood grain surface appearance.","completion":"string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p =\u003e p.Name.Contains(\"Wood\") || p.Name.Contains(\"Madera\")) as FillPatternElement;\n    \n    if (material != null \u0026\u0026 fillPattern != null)\n    {\n        material.SurfaceForegroundPatternId = fillPattern.Id;\n        material.Color = new Color(139, 69, 19);\n    }\n}"}
{"prompt":"Create a new material named \u0027{material_name}\u0027 with a wood surface pattern.","completion":"string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p =\u003e p.Name.Contains(\"Wood\") || p.Name.Contains(\"Madera\")) as FillPatternElement;\n    \n    if (material != null \u0026\u0026 fillPattern != null)\n    {\n        material.SurfaceForegroundPatternId = fillPattern.Id;\n        material.Color = new Color(139, 69, 19);\n    }\n}"}
{"prompt":"Cambia el estilo visual de la vista activa a \u0027Línea Oculta\u0027.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}
{"prompt":"Change the visual style of the active view to \u0027Hidden Line\u0027.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}
{"prompt":"Duplica la vista \u0027{view_name}\u0027 como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v =\u003e v.Name == \"{view_name}\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Copy view \u0027{view_name}\u0027 and create a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v =\u003e v.Name == \"{view_name}\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Replicate view \u0027{view_name}\u0027 as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v =\u003e v.Name == \"{view_name}\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Duplicate view \u0027{view_name}\u0027 into a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v =\u003e v.Name == \"{view_name}\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Create a duplicate of the \u0027{view_name}\u0027 view and establish it as a dependent representation.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v =\u003e v.Name == \"{view_name}\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Duplicate the \u0027{view_name}\u0027 view and make it a dependent visualization.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v =\u003e v.Name == \"{view_name}\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Replicate the \u0027{view_name}\u0027 view as a subordinate perspective.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v =\u003e v.Name == \"{view_name}\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Duplicate the \u0027{view_name}\u0027 view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v =\u003e v.Name == \"{view_name}\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Coloca una cámara llamada \u0027{view_name}\u0027 en la posición ({eye_x_m}, {eye_y_m}, {eye_z_m}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(f =\u003e f.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        cameraView.Name = \"{view_name}\";\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits({eye_x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_z_m}, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}
{"prompt":"Arrange \u0027{view_name}\u0027 camera at the specified location ({eye_x_m}, {eye_y_m}, {eye_z_m}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(f =\u003e f.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        cameraView.Name = \"{view_name}\";\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits({eye_x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_z_m}, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}
{"prompt":"Position camera named \u0027{view_name}\u0027 at coordinates ({eye_x_m}, {eye_y_m}, {eye_z_m}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(f =\u003e f.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        cameraView.Name = \"{view_name}\";\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits({eye_x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_z_m}, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}
{"prompt":"Set \u0027{view_name}\u0027 camera to the designated position ({eye_x_m}, {eye_y_m}, {eye_z_m}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(f =\u003e f.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        cameraView.Name = \"{view_name}\";\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits({eye_x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_z_m}, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}
{"prompt":"Locate the camera \u0027{view_name}\u0027 at the designated point ({eye_x_m}, {eye_y_m}, {eye_z_m}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(f =\u003e f.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        cameraView.Name = \"{view_name}\";\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits({eye_x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_z_m}, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}
{"prompt":"Set the camera \u0027{view_name}\u0027 to the specified location ({eye_x_m}, {eye_y_m}, {eye_z_m}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(f =\u003e f.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        cameraView.Name = \"{view_name}\";\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits({eye_x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_z_m}, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}
{"prompt":"Position the camera labeled \u0027{view_name}\u0027 at coordinates ({eye_x_m}, {eye_y_m}, {eye_z_m}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(f =\u003e f.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        cameraView.Name = \"{view_name}\";\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits({eye_x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_z_m}, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}
{"prompt":"Place a camera named \u0027{view_name}\u0027 at position ({eye_x_m}, {eye_y_m}, {eye_z_m}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(f =\u003e f.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        cameraView.Name = \"{view_name}\";\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits({eye_x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_z_m}, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}
{"prompt":"Locate all rooms on Level \u0027{level_name}\u0027.","completion":"Level targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nList\u003cElement\u003e roomsOnLevel = new List\u003cElement\u003e();\n\nif (targetLevel != null)\n{\n    roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r =\u003e r.LevelId == targetLevel.Id).ToList();\n}"}
{"prompt":"Obtén todas las habitaciones en el Nivel \u0027{level_name}\u0027.","completion":"Level targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nList\u003cElement\u003e roomsOnLevel = new List\u003cElement\u003e();\n\nif (targetLevel != null)\n{\n    roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r =\u003e r.LevelId == targetLevel.Id).ToList();\n}"}
{"prompt":"Find all the rooms on the specified Level \u0027{level_name}\u0027.","completion":"Level targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nList\u003cElement\u003e roomsOnLevel = new List\u003cElement\u003e();\n\nif (targetLevel != null)\n{\n    roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r =\u003e r.LevelId == targetLevel.Id).ToList();\n}"}
{"prompt":"Retrieve all rooms within Level \u0027{level_name}\u0027.","completion":"Level targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nList\u003cElement\u003e roomsOnLevel = new List\u003cElement\u003e();\n\nif (targetLevel != null)\n{\n    roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r =\u003e r.LevelId == targetLevel.Id).ToList();\n}"}
{"prompt":"Locate all rooms within the \u0027{level_name}\u0027 level.","completion":"Level targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nList\u003cElement\u003e roomsOnLevel = new List\u003cElement\u003e();\n\nif (targetLevel != null)\n{\n    roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r =\u003e r.LevelId == targetLevel.Id).ToList();\n}"}
{"prompt":"Get all rooms on the \u0027{level_name}\u0027 Level.","completion":"Level targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nList\u003cElement\u003e roomsOnLevel = new List\u003cElement\u003e();\n\nif (targetLevel != null)\n{\n    roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r =\u003e r.LevelId == targetLevel.Id).ToList();\n}"}
{"prompt":"Retrieve all rooms on the \u0027{level_name}\u0027 floor level.","completion":"Level targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nList\u003cElement\u003e roomsOnLevel = new List\u003cElement\u003e();\n\nif (targetLevel != null)\n{\n    roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r =\u003e r.LevelId == targetLevel.Id).ToList();\n}"}
{"prompt":"Identify the rooms present on the \u0027{level_name}\u0027 level.","completion":"Level targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nList\u003cElement\u003e roomsOnLevel = new List\u003cElement\u003e();\n\nif (targetLevel != null)\n{\n    roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r =\u003e r.LevelId == targetLevel.Id).ToList();\n}"}
{"prompt":"Activa todos los FamilySymbol del proyecto.","completion":"List\u003cFamilySymbol\u003e symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast\u003cFamilySymbol\u003e().ToList();\nforeach (FamilySymbol sym in symbols)\n{\n    if (!sym.IsActive)\n    {\n        sym.Activate();\n    }\n}"}
{"prompt":"Activate all FamilySymbols in the project.","completion":"List\u003cFamilySymbol\u003e symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast\u003cFamilySymbol\u003e().ToList();\nforeach (FamilySymbol sym in symbols)\n{\n    if (!sym.IsActive)\n    {\n        sym.Activate();\n    }\n}"}
{"prompt":"Create a DirectShape in the form of a box with measurements {size_m}x{size_m}x{size_m} meters, named \u0027{shape_name}\u0027.","completion":"TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits({size_m}, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"{shape_name}\";\n}"}
{"prompt":"Crea un DirectShape con forma de caja de {size_m}x{size_m}x{size_m} metros llamado \u0027{shape_name}\u0027.","completion":"TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits({size_m}, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"{shape_name}\";\n}"}
{"prompt":"Generate a DirectShape with a cubic form, having dimensions {size_m}x{size_m}x{size_m} meters, labeled as \u0027{shape_name}\u0027.","completion":"TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits({size_m}, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"{shape_name}\";\n}"}
{"prompt":"Model a DirectShape with a box shape of dimensions {size_m}x{size_m}x{size_m} meters, named \u0027{shape_name}\u0027.","completion":"TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits({size_m}, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"{shape_name}\";\n}"}
{"prompt":"Create a DirectShape with a {size_m}x{size_m}x{size_m} meter box shape named \u0027{shape_name}\u0027.","completion":"TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits({size_m}, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"{shape_name}\";\n}"}
{"prompt":"Form a DirectShape box with dimensions {size_m}x{size_m}x{size_m} meters, labeling it as \u0027{shape_name}\u0027.","completion":"TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits({size_m}, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"{shape_name}\";\n}"}
{"prompt":"Generate a DirectShape with a box-like form measuring {size_m}x{size_m}x{size_m} meters, denominating it as \u0027{shape_name}\u0027.","completion":"TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits({size_m}, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"{shape_name}\";\n}"}
{"prompt":"Model a DirectShape cube with measurements {size_m}x{size_m}x{size_m} meters, naming it \u0027{shape_name}\u0027.","completion":"TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits({size_m}, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"{shape_name}\";\n}"}
{"prompt":"Displace wall {distance_m} meters to the right side.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (wall != null)\n{\n    XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters),0,0);\n    ElementTransformUtils.MoveElement(doc, wall.Id, translation);\n}"}
{"prompt":"Shift wall {distance_m} meters towards the right.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (wall != null)\n{\n    XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters),0,0);\n    ElementTransformUtils.MoveElement(doc, wall.Id, translation);\n}"}
{"prompt":"Mueve un muro {distance_m} metros a la derecha.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (wall != null)\n{\n    XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters),0,0);\n    ElementTransformUtils.MoveElement(doc, wall.Id, translation);\n}"}
{"prompt":"Move wall {distance_m} meters to the right.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (wall != null)\n{\n    XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters),0,0);\n    ElementTransformUtils.MoveElement(doc, wall.Id, translation);\n}"}
{"prompt":"Move a wall {distance_m} meters to the right.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (wall != null)\n{\n    XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters),0,0);\n    ElementTransformUtils.MoveElement(doc, wall.Id, translation);\n}"}
{"prompt":"Translate a wall {distance_m} meters to the right.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (wall != null)\n{\n    XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters),0,0);\n    ElementTransformUtils.MoveElement(doc, wall.Id, translation);\n}"}
{"prompt":"Shift a wall {distance_m} meters eastward.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (wall != null)\n{\n    XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters),0,0);\n    ElementTransformUtils.MoveElement(doc, wall.Id, translation);\n}"}
{"prompt":"Relocate a wall {distance_m} meters towards the right.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (wall != null)\n{\n    XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters),0,0);\n    ElementTransformUtils.MoveElement(doc, wall.Id, translation);\n}"}
{"prompt":"Duplica el tipo de muro \u0027{original_type_name}\u0027 y llámalo \u0027{new_type_name}\u0027.","completion":"WallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(w=\u003ew.Name==\"{original_type_name}\");\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(\"{new_type_name}\") as WallType;\n}"}
{"prompt":"Replicate the \u0027{original_type_name}\u0027 wall type and rename it as \u0027{new_type_name}\u0027.","completion":"WallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(w=\u003ew.Name==\"{original_type_name}\");\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(\"{new_type_name}\") as WallType;\n}"}
{"prompt":"Copy the \u0027{original_type_name}\u0027 wall type and rename it to \u0027{new_type_name}\u0027.","completion":"WallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(w=\u003ew.Name==\"{original_type_name}\");\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(\"{new_type_name}\") as WallType;\n}"}
{"prompt":"Duplicate the \u0027{original_type_name}\u0027 wall and label it as \u0027{new_type_name}\u0027.","completion":"WallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(w=\u003ew.Name==\"{original_type_name}\");\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(\"{new_type_name}\") as WallType;\n}"}
{"prompt":"Replicate the existing \u0027{original_type_name}\u0027 wall type and rename it to \u0027{new_type_name}\u0027.","completion":"WallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(w=\u003ew.Name==\"{original_type_name}\");\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(\"{new_type_name}\") as WallType;\n}"}
{"prompt":"Copy the \u0027{original_type_name}\u0027 wall type and designate a new name for it as \u0027{new_type_name}\u0027.","completion":"WallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(w=\u003ew.Name==\"{original_type_name}\");\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(\"{new_type_name}\") as WallType;\n}"}
{"prompt":"Duplicate the \u0027{original_type_name}\u0027 wall type and rename the duplicated type as \u0027{new_type_name}\u0027.","completion":"WallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(w=\u003ew.Name==\"{original_type_name}\");\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(\"{new_type_name}\") as WallType;\n}"}
{"prompt":"Duplicate the \u0027{original_type_name}\u0027 wall type and name it \u0027{new_type_name}\u0027.","completion":"WallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(w=\u003ew.Name==\"{original_type_name}\");\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(\"{new_type_name}\") as WallType;\n}"}
{"prompt":"Establish a new 3D view called \u0027{view_name}\u0027, originating from the point ({eye_x_m},{eye_y_m},{eye_z_m}) and directed towards the origin.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v=\u003ev.ViewFamily==ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    if (view != null)\n    {\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits({eye_x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_z_m}, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D vo = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        view.SetOrientation(vo);\n        view.Name = \"{view_name}\";\n    }\n}"}
{"prompt":"Create a 3D view named \u0027{view_name}\u0027 with the origin as the target, located at the coordinates ({eye_x_m},{eye_y_m},{eye_z_m}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v=\u003ev.ViewFamily==ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    if (view != null)\n    {\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits({eye_x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_z_m}, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D vo = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        view.SetOrientation(vo);\n        view.Name = \"{view_name}\";\n    }\n}"}
{"prompt":"Crea una nueva vista 3D llamada \u0027{view_name}\u0027 orientada desde el punto ({eye_x_m},{eye_y_m},{eye_z_m}) mirando hacia el origen.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v=\u003ev.ViewFamily==ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    if (view != null)\n    {\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits({eye_x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_z_m}, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D vo = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        view.SetOrientation(vo);\n        view.Name = \"{view_name}\";\n    }\n}"}
{"prompt":"Generate a new 3D view named \u0027{view_name}\u0027 oriented from the point ({eye_x_m},{eye_y_m},{eye_z_m}) with the origin as the focal point.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v=\u003ev.ViewFamily==ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    if (view != null)\n    {\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits({eye_x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_z_m}, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D vo = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        view.SetOrientation(vo);\n        view.Name = \"{view_name}\";\n    }\n}"}
{"prompt":"Create a new 3D view named \u0027{view_name}\u0027 oriented from point ({eye_x_m},{eye_y_m},{eye_z_m}) looking at the origin.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v=\u003ev.ViewFamily==ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    if (view != null)\n    {\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits({eye_x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_z_m}, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D vo = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        view.SetOrientation(vo);\n        view.Name = \"{view_name}\";\n    }\n}"}
{"prompt":"Produce a new 3D view, titled \u0027{view_name}\u0027, aligned from the point ({eye_x_m},{eye_y_m},{eye_z_m}) and aimed at the origin.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v=\u003ev.ViewFamily==ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    if (view != null)\n    {\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits({eye_x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_z_m}, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D vo = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        view.SetOrientation(vo);\n        view.Name = \"{view_name}\";\n    }\n}"}
{"prompt":"Generate a novel 3D perspective, designated as \u0027{view_name}\u0027, oriented from the point ({eye_x_m},{eye_y_m},{eye_z_m}) with the focus on the origin.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v=\u003ev.ViewFamily==ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    if (view != null)\n    {\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits({eye_x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_z_m}, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D vo = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        view.SetOrientation(vo);\n        view.Name = \"{view_name}\";\n    }\n}"}
{"prompt":"Formulate a fresh 3D view, labeled \u0027{view_name}\u0027, positioned from the point ({eye_x_m},{eye_y_m},{eye_z_m}) and directed towards the origin.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v=\u003ev.ViewFamily==ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    if (view != null)\n    {\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits({eye_x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_z_m}, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D vo = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        view.SetOrientation(vo);\n        view.Name = \"{view_name}\";\n    }\n}"}
{"prompt":"Establish a new material called \u0027{material_name}\u0027, featuring the given color (RGB: {color_r}, {color_g}, {color_b}) and a transparency of {transparency_percent}%.","completion":"ElementId materialId = Material.Create(doc, \"{material_name}\");\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color({color_r}, {color_g}, {color_b});\n        material.Transparency = {transparency_percent};\n    }\n}"}
{"prompt":"Create a new material named \u0027{material_name}\u0027 with the specified color (RGB: {color_r}, {color_g}, {color_b}) and transparency level of {transparency_percent}%.","completion":"ElementId materialId = Material.Create(doc, \"{material_name}\");\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color({color_r}, {color_g}, {color_b});\n        material.Transparency = {transparency_percent};\n    }\n}"}
{"prompt":"Define a new material as \u0027{material_name}\u0027 with the designated color (RGB: {color_r}, {color_g}, {color_b}) and a transparency of {transparency_percent}%.","completion":"ElementId materialId = Material.Create(doc, \"{material_name}\");\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color({color_r}, {color_g}, {color_b});\n        material.Transparency = {transparency_percent};\n    }\n}"}
{"prompt":"Crea un nuevo material llamado \u0027{material_name}\u0027 con color ({color_r}, {color_g}, {color_b}) y transparencia de {transparency_percent}%.","completion":"ElementId materialId = Material.Create(doc, \"{material_name}\");\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color({color_r}, {color_g}, {color_b});\n        material.Transparency = {transparency_percent};\n    }\n}"}
{"prompt":"Formulate a fresh material, designated as \u0027{material_name}\u0027, with the specified color ({color_r}, {color_g}, {color_b}) and a transparency level of {transparency_percent}%.","completion":"ElementId materialId = Material.Create(doc, \"{material_name}\");\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color({color_r}, {color_g}, {color_b});\n        material.Transparency = {transparency_percent};\n    }\n}"}
{"prompt":"Create a new material named \u0027{material_name}\u0027 with color ({color_r}, {color_g}, {color_b}) and {transparency_percent}% transparency.","completion":"ElementId materialId = Material.Create(doc, \"{material_name}\");\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color({color_r}, {color_g}, {color_b});\n        material.Transparency = {transparency_percent};\n    }\n}"}
{"prompt":"Produce a new material, named \u0027{material_name}\u0027, with the given color ({color_r}, {color_g}, {color_b}) and a transparency value of {transparency_percent}%.","completion":"ElementId materialId = Material.Create(doc, \"{material_name}\");\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color({color_r}, {color_g}, {color_b});\n        material.Transparency = {transparency_percent};\n    }\n}"}
{"prompt":"Generate a novel material, labeled \u0027{material_name}\u0027, possessing the defined color ({color_r}, {color_g}, {color_b}) and a transparency rate of {transparency_percent}%.","completion":"ElementId materialId = Material.Create(doc, \"{material_name}\");\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color({color_r}, {color_g}, {color_b});\n        material.Transparency = {transparency_percent};\n    }\n}"}
{"prompt":"Crea una topografía DirectShape a partir de una lista de puntos.","completion":"List\u003cXYZ\u003e points = new List\u003cXYZ\u003e\n{\n    new XYZ(0,0,0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0)\n};\nTessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{points[0], points[1], points[2]}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{points[1], points[3], points[2]}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_Topography));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"Topografía DirectShape\";\n}"}
{"prompt":"Create a DirectShape topography from a list of points.","completion":"List\u003cXYZ\u003e points = new List\u003cXYZ\u003e\n{\n    new XYZ(0,0,0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0)\n};\nTessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{points[0], points[1], points[2]}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List\u003cXYZ\u003e{points[1], points[3], points[2]}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_Topography));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"Topography DirectShape\";\n}"}
{"prompt":"Retrieve a DWG link from \u0027{file_path}\u0027 and keep the color settings intact.","completion":"DWGImportOptions opts = new DWGImportOptions();\nopts.ColorMode = ImportColorMode.Preserved;\nElementId linkId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(\"{file_path}\", opts, activeView, out linkId);\n}"}
{"prompt":"Load a DWG link from \u0027{file_path}\u0027 while maintaining the colors.","completion":"DWGImportOptions opts = new DWGImportOptions();\nopts.ColorMode = ImportColorMode.Preserved;\nElementId linkId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(\"{file_path}\", opts, activeView, out linkId);\n}"}
{"prompt":"Carga un enlace DWG desde \u0027{file_path}\u0027 preservando los colores.","completion":"DWGImportOptions opts = new DWGImportOptions();\nopts.ColorMode = ImportColorMode.Preserved;\nElementId linkId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(\"{file_path}\", opts, activeView, out linkId);\n}"}
{"prompt":"Import a DWG file from \u0027{file_path}\u0027 preserving the colors.","completion":"DWGImportOptions opts = new DWGImportOptions();\nopts.ColorMode = ImportColorMode.Preserved;\nElementId linkId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(\"{file_path}\", opts, activeView, out linkId);\n}"}
{"prompt":"Attach a DWG link from \u0027{file_path}\u0027, keeping its color settings intact.","completion":"DWGImportOptions opts = new DWGImportOptions();\nopts.ColorMode = ImportColorMode.Preserved;\nElementId linkId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(\"{file_path}\", opts, activeView, out linkId);\n}"}
{"prompt":"Import a DWG link from \u0027{file_path}\u0027, maintaining its color scheme.","completion":"DWGImportOptions opts = new DWGImportOptions();\nopts.ColorMode = ImportColorMode.Preserved;\nElementId linkId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(\"{file_path}\", opts, activeView, out linkId);\n}"}
{"prompt":"Load a DWG link from \u0027{file_path}\u0027, preserving its colors.","completion":"DWGImportOptions opts = new DWGImportOptions();\nopts.ColorMode = ImportColorMode.Preserved;\nElementId linkId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(\"{file_path}\", opts, activeView, out linkId);\n}"}
{"prompt":"Insert a DWG link from \u0027{file_path}\u0027, retaining its color properties.","completion":"DWGImportOptions opts = new DWGImportOptions();\nopts.ColorMode = ImportColorMode.Preserved;\nElementId linkId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(\"{file_path}\", opts, activeView, out linkId);\n}"}
{"prompt":"Obtén una lista de todas las vistas de planta del proyecto.","completion":"List\u003cViewPlan\u003e planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cViewPlan\u003e().Where(v =\u003e !v.IsTemplate).ToList();"}
{"prompt":"Get a list of all plan views in the project.","completion":"List\u003cViewPlan\u003e planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cViewPlan\u003e().Where(v =\u003e !v.IsTemplate).ToList();"}
{"prompt":"Establish a new level named \u0027{level_name}\u0027 at an elevation of {elevation_m} meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Create a new floor level designated as \u0027{level_name}\u0027 at an elevation of {elevation_m} meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Generate a new level named \u0027{level_name}\u0027 with an elevation of {elevation_m} meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Crea un nuevo nivel llamado \u0027{level_name}\u0027 a {elevation_m} metros de elevación.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Create a new level named \u0027{level_name}\u0027 at {elevation_m} meters elevation.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Formulate a new horizontal plane, labeled \u0027{level_name}\u0027, at an elevation of {elevation_m} meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Establish a new level, labeled \u0027{level_name}\u0027, at an elevation of {elevation_m} meters above ground level.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Develop a fresh level, designated as \u0027{level_name}\u0027, at an elevation of {elevation_m} meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"{level_name}\";\n}"}
{"prompt":"Configure a view-specific filter named \u0027{filter_name}\u0027 for hiding detailed line segments.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection\u003cElementId\u003e catsToHide = new List\u003cElementId\u003e{new ElementId(BuiltInCategory.OST_Lines)};\n    ElementFilter filter = new ElementCategoryFilter(new ElementId(BuiltInCategory.OST_Lines));\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"{filter_name}\", catsToHide, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}
{"prompt":"Establish a view filter named \u0027{filter_name}\u0027 to hide detailed linework.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection\u003cElementId\u003e catsToHide = new List\u003cElementId\u003e{new ElementId(BuiltInCategory.OST_Lines)};\n    ElementFilter filter = new ElementCategoryFilter(new ElementId(BuiltInCategory.OST_Lines));\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"{filter_name}\", catsToHide, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}
{"prompt":"Set up a view filter named \u0027{filter_name}\u0027 to conceal detailed line details.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection\u003cElementId\u003e catsToHide = new List\u003cElementId\u003e{new ElementId(BuiltInCategory.OST_Lines)};\n    ElementFilter filter = new ElementCategoryFilter(new ElementId(BuiltInCategory.OST_Lines));\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"{filter_name}\", catsToHide, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}
{"prompt":"Define un filtro de vista llamado \u0027{filter_name}\u0027 para ocultar las líneas de detalle.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection\u003cElementId\u003e catsToHide = new List\u003cElementId\u003e{new ElementId(BuiltInCategory.OST_Lines)};\n    ElementFilter filter = new ElementCategoryFilter(new ElementId(BuiltInCategory.OST_Lines));\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"{filter_name}\", catsToHide, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}
{"prompt":"Set up a view filter labelled \u0027{filter_name}\u0027, to omit the display of detail lines.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection\u003cElementId\u003e catsToHide = new List\u003cElementId\u003e{new ElementId(BuiltInCategory.OST_Lines)};\n    ElementFilter filter = new ElementCategoryFilter(new ElementId(BuiltInCategory.OST_Lines));\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"{filter_name}\", catsToHide, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}
{"prompt":"Define a view filter named \u0027{filter_name}\u0027 to hide detail lines.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection\u003cElementId\u003e catsToHide = new List\u003cElementId\u003e{new ElementId(BuiltInCategory.OST_Lines)};\n    ElementFilter filter = new ElementCategoryFilter(new ElementId(BuiltInCategory.OST_Lines));\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"{filter_name}\", catsToHide, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}
{"prompt":"Configure a view filter, named \u0027{filter_name}\u0027, to exclude detail lines from visualization.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection\u003cElementId\u003e catsToHide = new List\u003cElementId\u003e{new ElementId(BuiltInCategory.OST_Lines)};\n    ElementFilter filter = new ElementCategoryFilter(new ElementId(BuiltInCategory.OST_Lines));\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"{filter_name}\", catsToHide, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}
{"prompt":"Establish a view filter, designated as \u0027{filter_name}\u0027, to conceal detail line elements.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection\u003cElementId\u003e catsToHide = new List\u003cElementId\u003e{new ElementId(BuiltInCategory.OST_Lines)};\n    ElementFilter filter = new ElementCategoryFilter(new ElementId(BuiltInCategory.OST_Lines));\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"{filter_name}\", catsToHide, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}
{"prompt":"Create a sectional view by defining a box with dimensions {width_m}x{depth_m}x{height_m} meters.","completion":"ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Section);\n\nif (sectionVFT != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(0,0,0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({depth_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}
{"prompt":"Generate a section view using a box of {width_m}x{depth_m}x{height_m} meters.","completion":"ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Section);\n\nif (sectionVFT != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(0,0,0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({depth_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}
{"prompt":"Produce a sectional representation with a box measuring {width_m}x{depth_m}x{height_m} meters.","completion":"ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Section);\n\nif (sectionVFT != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(0,0,0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({depth_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}
{"prompt":"Crea una vista de sección usando una caja de {width_m}x{depth_m}x{height_m} metros.","completion":"ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Section);\n\nif (sectionVFT != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(0,0,0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({depth_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}
{"prompt":"Model a section view using a {width_m}x{depth_m}x{height_m} meter cube.","completion":"ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Section);\n\nif (sectionVFT != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(0,0,0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({depth_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}
{"prompt":"Create a section view using a {width_m}x{depth_m}x{height_m} meter box.","completion":"ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Section);\n\nif (sectionVFT != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(0,0,0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({depth_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}
{"prompt":"Fabricate a sectional perspective using a {width_m}x{depth_m}x{height_m} meter cube.","completion":"ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Section);\n\nif (sectionVFT != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(0,0,0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({depth_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}
{"prompt":"Generate a sectional view with a {width_m}x{depth_m}x{height_m} meter cuboid.","completion":"ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Section);\n\nif (sectionVFT != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(0,0,0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits({width_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({depth_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}
{"prompt":"Create a workset designated \u0027{workset_name}\u0027.","completion":"Workset.Create(doc, \"{workset_name}\");"}
{"prompt":"Create a workset called \u0027{workset_name}\u0027.","completion":"Workset.Create(doc, \"{workset_name}\");"}
{"prompt":"Establish a workset referred to as \u0027{workset_name}\u0027.","completion":"Workset.Create(doc, \"{workset_name}\");"}
{"prompt":"Establish a workset named \u0027{workset_name}\u0027.","completion":"Workset.Create(doc, \"{workset_name}\");"}
{"prompt":"Form a workset named \u0027{workset_name}\u0027.","completion":"Workset.Create(doc, \"{workset_name}\");"}
{"prompt":"Produce a workset known as \u0027{workset_name}\u0027.","completion":"Workset.Create(doc, \"{workset_name}\");"}
{"prompt":"Crea un workset llamado \u0027{workset_name}\u0027.","completion":"Workset.Create(doc, \"{workset_name}\");"}
{"prompt":"Develop a workset named \u0027{workset_name}\u0027.","completion":"Workset.Create(doc, \"{workset_name}\");"}
{"prompt":"Generate a workset labelled \u0027{workset_name}\u0027.","completion":"Workset.Create(doc, \"{workset_name}\");"}
{"prompt":"Generate a workset titled \u0027{workset_name}\u0027.","completion":"Workset.Create(doc, \"{workset_name}\");"}
{"prompt":"Produce a workset called \u0027{workset_name}\u0027.","completion":"Workset.Create(doc, \"{workset_name}\");"}
{"prompt":"Form a new workset, labeled \u0027{workset_name}\u0027.","completion":"Workset.Create(doc, \"{workset_name}\");"}
{"prompt":"Establish a fresh workset, designated as \u0027{workset_name}\u0027.","completion":"Workset.Create(doc, \"{workset_name}\");"}
{"prompt":"Create a new workset named \u0027{workset_name}\u0027.","completion":"Workset.Create(doc, \"{workset_name}\");"}
{"prompt":"Initiate a new workset, titled \u0027{workset_name}\u0027.","completion":"Workset.Create(doc, \"{workset_name}\");"}
{"prompt":"Acquire the planning table \u0027{schedule_name}\u0027 and save its data as \u0027{folder_path}{file_name}\u0027.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast\u003cViewSchedule\u003e().FirstOrDefault(s=\u003es.Name==\"{schedule_name}\");\n\nif (schedule != null)\n{\n    string folderPath = \"{folder_path}\";\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(folderPath, \"{file_name}\", options);\n}"}
{"prompt":"Gather the planning schedule \u0027{schedule_name}\u0027 and export its information to \u0027{folder_path}{file_name}\u0027.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast\u003cViewSchedule\u003e().FirstOrDefault(s=\u003es.Name==\"{schedule_name}\");\n\nif (schedule != null)\n{\n    string folderPath = \"{folder_path}\";\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(folderPath, \"{file_name}\", options);\n}"}
{"prompt":"Obtén la tabla de planificación \u0027{schedule_name}\u0027 y exporta sus datos a \u0027{folder_path}{file_name}\u0027.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast\u003cViewSchedule\u003e().FirstOrDefault(s=\u003es.Name==\"{schedule_name}\");\n\nif (schedule != null)\n{\n    string folderPath = \"{folder_path}\";\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(folderPath, \"{file_name}\", options);\n}"}
{"prompt":"Retrieve the planning table \u0027{schedule_name}\u0027 and export its data to \u0027{folder_path}{file_name}\u0027.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast\u003cViewSchedule\u003e().FirstOrDefault(s=\u003es.Name==\"{schedule_name}\");\n\nif (schedule != null)\n{\n    string folderPath = \"{folder_path}\";\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(folderPath, \"{file_name}\", options);\n}"}
{"prompt":"Extract the \u0027{schedule_name}\u0027 schedule and export its data to \u0027{folder_path}{file_name}\u0027.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast\u003cViewSchedule\u003e().FirstOrDefault(s=\u003es.Name==\"{schedule_name}\");\n\nif (schedule != null)\n{\n    string folderPath = \"{folder_path}\";\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(folderPath, \"{file_name}\", options);\n}"}
{"prompt":"Obtain the \u0027{schedule_name}\u0027 schedule and save its data as \u0027{folder_path}{file_name}\u0027.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast\u003cViewSchedule\u003e().FirstOrDefault(s=\u003es.Name==\"{schedule_name}\");\n\nif (schedule != null)\n{\n    string folderPath = \"{folder_path}\";\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(folderPath, \"{file_name}\", options);\n}"}
{"prompt":"Get the \u0027{schedule_name}\u0027 schedule and export its data to \u0027{folder_path}{file_name}\u0027.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast\u003cViewSchedule\u003e().FirstOrDefault(s=\u003es.Name==\"{schedule_name}\");\n\nif (schedule != null)\n{\n    string folderPath = \"{folder_path}\";\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(folderPath, \"{file_name}\", options);\n}"}
{"prompt":"Retrieve the \u0027{schedule_name}\u0027 schedule and export its information to \u0027{folder_path}{file_name}\u0027.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast\u003cViewSchedule\u003e().FirstOrDefault(s=\u003es.Name==\"{schedule_name}\");\n\nif (schedule != null)\n{\n    string folderPath = \"{folder_path}\";\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(folderPath, \"{file_name}\", options);\n}"}
{"prompt":"Enable the user to select a wall with the message \u0027{selection_prompt}\u0027 and acquire its ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"{selection_prompt}\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Allow the user to pick a wall with the message \u0027{selection_prompt}\u0027, and retrieve its ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"{selection_prompt}\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Permite al usuario seleccionar un muro con el mensaje \u0027{selection_prompt}\u0027 y obtén su ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"{selection_prompt}\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Grant the user the ability to select a wall using the message \u0027{selection_prompt}\u0027, and obtain its ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"{selection_prompt}\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Allow the user to select a wall with the prompt \u0027{selection_prompt}\u0027 and get its ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"{selection_prompt}\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Request the user to pick a wall and acquire its ElementId using \u0027{selection_prompt}\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"{selection_prompt}\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Have the user select a wall and obtain its ElementId with the given \u0027{selection_prompt}\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"{selection_prompt}\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Prompt the user to choose a wall using \u0027{selection_prompt}\u0027, then retrieve its ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"{selection_prompt}\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Create a new sheet with number \u0027{sheet_number}\u0027 and name \u0027{sheet_name}\u0027 using the first available tab.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"{sheet_name}\";\n        sheet.SheetNumber = \"{sheet_number}\";\n    }\n}"}
{"prompt":"Crea una nueva hoja con número \u0027{sheet_number}\u0027 y nombre \u0027{sheet_name}\u0027 usando el primer cajetín disponible.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"{sheet_name}\";\n        sheet.SheetNumber = \"{sheet_number}\";\n    }\n}"}
{"prompt":"Generate a new sheet with the specified number \u0027{sheet_number}\u0027 and title \u0027{sheet_name}\u0027, utilizing the first available slot.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"{sheet_name}\";\n        sheet.SheetNumber = \"{sheet_number}\";\n    }\n}"}
{"prompt":"Produce a new sheet labeled \u0027{sheet_name}\u0027 and numbered \u0027{sheet_number}\u0027, utilizing the first available option in the tabs.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"{sheet_name}\";\n        sheet.SheetNumber = \"{sheet_number}\";\n    }\n}"}
{"prompt":"Create a new sheet number \u0027{sheet_number}\u0027 named \u0027{sheet_name}\u0027 using the first available title block.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"{sheet_name}\";\n        sheet.SheetNumber = \"{sheet_number}\";\n    }\n}"}
{"prompt":"Produce a fresh sheet, labeled \u0027{sheet_number}\u0027 and \u0027{sheet_name}\u0027, using the first vacant title block.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"{sheet_name}\";\n        sheet.SheetNumber = \"{sheet_number}\";\n    }\n}"}
{"prompt":"Form a new sheet, designated \u0027{sheet_number}\u0027 and \u0027{sheet_name}\u0027, by employing the first available title block.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"{sheet_name}\";\n        sheet.SheetNumber = \"{sheet_number}\";\n    }\n}"}
{"prompt":"Generate a new sheet, numbered \u0027{sheet_number}\u0027, titled \u0027{sheet_name}\u0027 utilizing the first available title block template.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"{sheet_name}\";\n        sheet.SheetNumber = \"{sheet_number}\";\n    }\n}"}
{"prompt":"Position view \u0027{view_name}\u0027 at the center of the active sheet.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v =\u003e v.Name == \"{view_name}\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null \u0026\u0026 activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) / 2, (sheetBox.Min.V + sheetBox.Max.V) / 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Arrange \u0027{view_name}\u0027 view to be centered on the active sheet.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v =\u003e v.Name == \"{view_name}\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null \u0026\u0026 activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) / 2, (sheetBox.Min.V + sheetBox.Max.V) / 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Align \u0027{view_name}\u0027 view to the center of the current active sheet.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v =\u003e v.Name == \"{view_name}\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null \u0026\u0026 activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) / 2, (sheetBox.Min.V + sheetBox.Max.V) / 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Coloca la vista \u0027{view_name}\u0027 en el centro de la hoja activa.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v =\u003e v.Name == \"{view_name}\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null \u0026\u0026 activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) / 2, (sheetBox.Min.V + sheetBox.Max.V) / 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Centrate the \u0027{view_name}\u0027 view on the active sheet.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v =\u003e v.Name == \"{view_name}\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null \u0026\u0026 activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) / 2, (sheetBox.Min.V + sheetBox.Max.V) / 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Position the \u0027{view_name}\u0027 view centrally on the active sheet.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v =\u003e v.Name == \"{view_name}\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null \u0026\u0026 activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) / 2, (sheetBox.Min.V + sheetBox.Max.V) / 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Align the \u0027{view_name}\u0027 view to the center of the active sheet.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v =\u003e v.Name == \"{view_name}\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null \u0026\u0026 activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) / 2, (sheetBox.Min.V + sheetBox.Max.V) / 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Place the \u0027{view_name}\u0027 view in the center of the active sheet.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v =\u003e v.Name == \"{view_name}\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null \u0026\u0026 activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) / 2, (sheetBox.Min.V + sheetBox.Max.V) / 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Apply \u0027{template_name}\u0027 view template to active view.","completion":"View activeView = doc.ActiveView;\nView viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.IsTemplate \u0026\u0026 v.Name == \"{template_name}\");\n\nif (activeView != null \u0026\u0026 viewTemplate != null)\n{\n    activeView.ViewTemplateId = viewTemplate.Id;\n}"}
{"prompt":"Assign \u0027{template_name}\u0027 as the active view template.","completion":"View activeView = doc.ActiveView;\nView viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.IsTemplate \u0026\u0026 v.Name == \"{template_name}\");\n\nif (activeView != null \u0026\u0026 viewTemplate != null)\n{\n    activeView.ViewTemplateId = viewTemplate.Id;\n}"}
{"prompt":"Set active view to \u0027{template_name}\u0027 view template.","completion":"View activeView = doc.ActiveView;\nView viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.IsTemplate \u0026\u0026 v.Name == \"{template_name}\");\n\nif (activeView != null \u0026\u0026 viewTemplate != null)\n{\n    activeView.ViewTemplateId = viewTemplate.Id;\n}"}
{"prompt":"Aplica la plantilla de vista \u0027{template_name}\u0027 a la vista activa.","completion":"View activeView = doc.ActiveView;\nView viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.IsTemplate \u0026\u0026 v.Name == \"{template_name}\");\n\nif (activeView != null \u0026\u0026 viewTemplate != null)\n{\n    activeView.ViewTemplateId = viewTemplate.Id;\n}"}
{"prompt":"Apply the \u0027{template_name}\u0027 view template to the active view.","completion":"View activeView = doc.ActiveView;\nView viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.IsTemplate \u0026\u0026 v.Name == \"{template_name}\");\n\nif (activeView != null \u0026\u0026 viewTemplate != null)\n{\n    activeView.ViewTemplateId = viewTemplate.Id;\n}"}
{"prompt":"Apply the specified view template \u0027{template_name}\u0027 to the current view.","completion":"View activeView = doc.ActiveView;\nView viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.IsTemplate \u0026\u0026 v.Name == \"{template_name}\");\n\nif (activeView != null \u0026\u0026 viewTemplate != null)\n{\n    activeView.ViewTemplateId = viewTemplate.Id;\n}"}
{"prompt":"Set the active view to adopt the view template \u0027{template_name}\u0027. ","completion":"View activeView = doc.ActiveView;\nView viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.IsTemplate \u0026\u0026 v.Name == \"{template_name}\");\n\nif (activeView != null \u0026\u0026 viewTemplate != null)\n{\n    activeView.ViewTemplateId = viewTemplate.Id;\n}"}
{"prompt":"Implement the view template \u0027{template_name}\u0027 on the active view.","completion":"View activeView = doc.ActiveView;\nView viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.IsTemplate \u0026\u0026 v.Name == \"{template_name}\");\n\nif (activeView != null \u0026\u0026 viewTemplate != null)\n{\n    activeView.ViewTemplateId = viewTemplate.Id;\n}"}
{"prompt":"Create a cable tray model between the point ({p1x_m}, {p1y_m}, {p1z_m}) and ({p2x_m}, {p2y_m}, {p2z_m}).","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (trayType != null \u0026\u0026 level != null)\n{\n    XYZ p1 = new XYZ(UnitUtils.ConvertToInternalUnits({p1x_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p1y_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p1z_m}, UnitTypeId.Meters)); \n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({p2x_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p2y_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p2z_m}, UnitTypeId.Meters));\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}
{"prompt":"Design a cable tray between the specified locations ({p1x_m}, {p1y_m}, {p1z_m}) and ({p2x_m}, {p2y_m}, {p2z_m}).","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (trayType != null \u0026\u0026 level != null)\n{\n    XYZ p1 = new XYZ(UnitUtils.ConvertToInternalUnits({p1x_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p1y_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p1z_m}, UnitTypeId.Meters)); \n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({p2x_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p2y_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p2z_m}, UnitTypeId.Meters));\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}
{"prompt":"Modela una bandeja de cables entre el punto ({p1x_m}, {p1y_m}, {p1z_m}) y ({p2x_m}, {p2y_m}, {p2z_m}).","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (trayType != null \u0026\u0026 level != null)\n{\n    XYZ p1 = new XYZ(UnitUtils.ConvertToInternalUnits({p1x_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p1y_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p1z_m}, UnitTypeId.Meters)); \n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({p2x_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p2y_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p2z_m}, UnitTypeId.Meters));\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}
{"prompt":"Draft a cable tray between the coordinates ({p1x_m}, {p1y_m}, {p1z_m}) and ({p2x_m}, {p2y_m}, {p2z_m}).","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (trayType != null \u0026\u0026 level != null)\n{\n    XYZ p1 = new XYZ(UnitUtils.ConvertToInternalUnits({p1x_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p1y_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p1z_m}, UnitTypeId.Meters)); \n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({p2x_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p2y_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p2z_m}, UnitTypeId.Meters));\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}
{"prompt":"Model a cable tray between points ({p1x_m}, {p1y_m}, {p1z_m}) and ({p2x_m}, {p2y_m}, {p2z_m}).","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (trayType != null \u0026\u0026 level != null)\n{\n    XYZ p1 = new XYZ(UnitUtils.ConvertToInternalUnits({p1x_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p1y_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p1z_m}, UnitTypeId.Meters)); \n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({p2x_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p2y_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p2z_m}, UnitTypeId.Meters));\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}
{"prompt":"Draw a cable tray spanning between the given coordinates ({p1x_m}, {p1y_m}, {p1z_m}) and ({p2x_m}, {p2y_m}, {p2z_m}).","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (trayType != null \u0026\u0026 level != null)\n{\n    XYZ p1 = new XYZ(UnitUtils.ConvertToInternalUnits({p1x_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p1y_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p1z_m}, UnitTypeId.Meters)); \n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({p2x_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p2y_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p2z_m}, UnitTypeId.Meters));\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}
{"prompt":"Sketch a cable tray traversing from coordinates ({p1x_m}, {p1y_m}, {p1z_m}) to ({p2x_m}, {p2y_m}, {p2z_m}).","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (trayType != null \u0026\u0026 level != null)\n{\n    XYZ p1 = new XYZ(UnitUtils.ConvertToInternalUnits({p1x_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p1y_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p1z_m}, UnitTypeId.Meters)); \n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({p2x_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p2y_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p2z_m}, UnitTypeId.Meters));\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}
{"prompt":"Delineate a cable tray connecting points ({p1x_m}, {p1y_m}, {p1z_m}) and ({p2x_m}, {p2y_m}, {p2z_m}).","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (trayType != null \u0026\u0026 level != null)\n{\n    XYZ p1 = new XYZ(UnitUtils.ConvertToInternalUnits({p1x_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p1y_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p1z_m}, UnitTypeId.Meters)); \n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({p2x_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p2y_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p2z_m}, UnitTypeId.Meters));\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}
{"prompt":"Set up a global parameter for length, named \u0027{param_name}\u0027, with a specified value of {value_m} meters.","completion":"GlobalParameter gp = GlobalParameter.Create(doc, \"{param_name}\", SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits({value_m}, UnitTypeId.Meters)));\n}"}
{"prompt":"Crea un parámetro global de longitud llamado \u0027{param_name}\u0027 con valor de {value_m}m.","completion":"GlobalParameter gp = GlobalParameter.Create(doc, \"{param_name}\", SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits({value_m}, UnitTypeId.Meters)));\n}"}
{"prompt":"Establish a global length parameter named \u0027{param_name}\u0027 with a value of {value_m} meters.","completion":"GlobalParameter gp = GlobalParameter.Create(doc, \"{param_name}\", SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits({value_m}, UnitTypeId.Meters)));\n}"}
{"prompt":"Create a global parameter for length, named \u0027{param_name}\u0027, with a value equal to {value_m} meters.","completion":"GlobalParameter gp = GlobalParameter.Create(doc, \"{param_name}\", SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits({value_m}, UnitTypeId.Meters)));\n}"}
{"prompt":"Create a global length parameter named \u0027{param_name}\u0027 with a value of {value_m}m.","completion":"GlobalParameter gp = GlobalParameter.Create(doc, \"{param_name}\", SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits({value_m}, UnitTypeId.Meters)));\n}"}
{"prompt":"Define a global length parameter, {param_name}, having a value of {value_m} meters.","completion":"GlobalParameter gp = GlobalParameter.Create(doc, \"{param_name}\", SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits({value_m}, UnitTypeId.Meters)));\n}"}
{"prompt":"Set up a universal length parameter, {param_name}, equal to {value_m} meters.","completion":"GlobalParameter gp = GlobalParameter.Create(doc, \"{param_name}\", SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits({value_m}, UnitTypeId.Meters)));\n}"}
{"prompt":"Establish a global length parameter, {param_name}, with a value of {value_m} meters.","completion":"GlobalParameter gp = GlobalParameter.Create(doc, \"{param_name}\", SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits({value_m}, UnitTypeId.Meters)));\n}"}
{"prompt":"Alinea la cara de un muro con la cara de otro.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Face, \"Selecciona la cara de destino (estática)\");\nReference ref2 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Face, \"Selecciona la cara a mover\");\nView activeView = doc.ActiveView;\n\nif (ref1 != null \u0026\u0026 ref2 != null \u0026\u0026 activeView != null)\n{\n    doc.Create.NewAlignment(activeView, ref1, ref2);\n}"}
{"prompt":"Align the face of one wall with the face of another.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Face, \"Select the target face (stationary)\");\nReference ref2 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Face, \"Select the face to move\");\nView activeView = doc.ActiveView;\n\nif (ref1 != null \u0026\u0026 ref2 != null \u0026\u0026 activeView != null)\n{\n    doc.Create.NewAlignment(activeView, ref1, ref2);\n}"}
{"prompt":"Cambia el tipo de todas las ventanas de \u0027{old_type_name}\u0027 a \u0027{new_type_name}\u0027.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Name.Contains(\"{new_type_name}\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Name.Contains(\"{old_type_name}\"));\n\nif (newType != null \u0026\u0026 oldType != null)\n{\n    if(!newType.IsActive) newType.Activate();\n    List\u003cFamilyInstance\u003e windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().Where(fi =\u003e fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Adjust the window type of all instances from \u0027{old_type_name}\u0027 to \u0027{new_type_name}\u0027.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Name.Contains(\"{new_type_name}\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Name.Contains(\"{old_type_name}\"));\n\nif (newType != null \u0026\u0026 oldType != null)\n{\n    if(!newType.IsActive) newType.Activate();\n    List\u003cFamilyInstance\u003e windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().Where(fi =\u003e fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Modify the window type property of all occurrences from \u0027{old_type_name}\u0027 to \u0027{new_type_name}\u0027.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Name.Contains(\"{new_type_name}\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Name.Contains(\"{old_type_name}\"));\n\nif (newType != null \u0026\u0026 oldType != null)\n{\n    if(!newType.IsActive) newType.Activate();\n    List\u003cFamilyInstance\u003e windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().Where(fi =\u003e fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Update the window category of all existing instances from \u0027{old_type_name}\u0027 to \u0027{new_type_name}\u0027.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Name.Contains(\"{new_type_name}\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Name.Contains(\"{old_type_name}\"));\n\nif (newType != null \u0026\u0026 oldType != null)\n{\n    if(!newType.IsActive) newType.Activate();\n    List\u003cFamilyInstance\u003e windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().Where(fi =\u003e fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Transform the window properties of all present \u0027{old_type_name}\u0027 components to \u0027{new_type_name}\u0027.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Name.Contains(\"{new_type_name}\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Name.Contains(\"{old_type_name}\"));\n\nif (newType != null \u0026\u0026 oldType != null)\n{\n    if(!newType.IsActive) newType.Activate();\n    List\u003cFamilyInstance\u003e windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().Where(fi =\u003e fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Change the type of all \u0027{old_type_name}\u0027 windows to \u0027{new_type_name}\u0027.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Name.Contains(\"{new_type_name}\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Name.Contains(\"{old_type_name}\"));\n\nif (newType != null \u0026\u0026 oldType != null)\n{\n    if(!newType.IsActive) newType.Activate();\n    List\u003cFamilyInstance\u003e windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().Where(fi =\u003e fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Update the window category of all current \u0027{old_type_name}\u0027 elements to \u0027{new_type_name}\u0027.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Name.Contains(\"{new_type_name}\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Name.Contains(\"{old_type_name}\"));\n\nif (newType != null \u0026\u0026 oldType != null)\n{\n    if(!newType.IsActive) newType.Activate();\n    List\u003cFamilyInstance\u003e windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().Where(fi =\u003e fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Adjust the window type of all existing instances of \u0027{old_type_name}\u0027 to \u0027{new_type_name}\u0027.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Name.Contains(\"{new_type_name}\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Name.Contains(\"{old_type_name}\"));\n\nif (newType != null \u0026\u0026 oldType != null)\n{\n    if(!newType.IsActive) newType.Activate();\n    List\u003cFamilyInstance\u003e windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().Where(fi =\u003e fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Refresh the Revit connection \u0027{link_name}\u0027.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast\u003cRevitLinkType\u003e().FirstOrDefault(lt =\u003e lt.Name == \"{link_name}\");\n\nif (linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Reestablish the Revit link \u0027{link_name}\u0027.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast\u003cRevitLinkType\u003e().FirstOrDefault(lt =\u003e lt.Name == \"{link_name}\");\n\nif (linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Regenerate the Revit reference \u0027{link_name}\u0027.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast\u003cRevitLinkType\u003e().FirstOrDefault(lt =\u003e lt.Name == \"{link_name}\");\n\nif (linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Recarga el vínculo de Revit \u0027{link_name}\u0027.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast\u003cRevitLinkType\u003e().FirstOrDefault(lt =\u003e lt.Name == \"{link_name}\");\n\nif (linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Re-import the Revit link \u0027{link_name}\u0027.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast\u003cRevitLinkType\u003e().FirstOrDefault(lt =\u003e lt.Name == \"{link_name}\");\n\nif (linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Reestablish the Revit link \u0027{link_name}\u0027.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast\u003cRevitLinkType\u003e().FirstOrDefault(lt =\u003e lt.Name == \"{link_name}\");\n\nif (linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Retrieve the Revit link \u0027{link_name}\u0027.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast\u003cRevitLinkType\u003e().FirstOrDefault(lt =\u003e lt.Name == \"{link_name}\");\n\nif (linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Reload the Revit link \u0027{link_name}\u0027.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast\u003cRevitLinkType\u003e().FirstOrDefault(lt =\u003e lt.Name == \"{link_name}\");\n\nif (linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Crea una vista de planta para el \u0027{level_name}\u0027.","completion":"string levelName = \"{level_name}\";\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level != null \u0026\u0026 vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level.Id);\n}"}
{"prompt":"Generate a ground plan for the \u0027{level_name}\u0027.","completion":"string levelName = \"{level_name}\";\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level != null \u0026\u0026 vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level.Id);\n}"}
{"prompt":"Produce a floor layout for the \u0027{level_name}\u0027.","completion":"string levelName = \"{level_name}\";\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level != null \u0026\u0026 vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level.Id);\n}"}
{"prompt":"Develop a floor plan for the \u0027{level_name}\u0027.","completion":"string levelName = \"{level_name}\";\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level != null \u0026\u0026 vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level.Id);\n}"}
{"prompt":"Produce a plan view for \u0027{level_name}\u0027 floor.","completion":"string levelName = \"{level_name}\";\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level != null \u0026\u0026 vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level.Id);\n}"}
{"prompt":"Create a floor plan view for \u0027{level_name}\u0027.","completion":"string levelName = \"{level_name}\";\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level != null \u0026\u0026 vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level.Id);\n}"}
{"prompt":"Develop a floor layout for \u0027{level_name}\u0027. ","completion":"string levelName = \"{level_name}\";\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level != null \u0026\u0026 vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level.Id);\n}"}
{"prompt":"Generate a floor plan for \u0027{level_name}\u0027. ","completion":"string levelName = \"{level_name}\";\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level != null \u0026\u0026 vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level.Id);\n}"}
{"prompt":"Calcula el área total de todas las habitaciones.","completion":"double totalArea = 0.0;\nList\u003cRoom\u003e rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast\u003cRoom\u003e().ToList();\nforeach (Room room in rooms)\n{\n    totalArea += room.Area;\n}"}
{"prompt":"Calculate the total area of all rooms.","completion":"double totalArea = 0.0;\nList\u003cRoom\u003e rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast\u003cRoom\u003e().ToList();\nforeach (Room room in rooms)\n{\n    totalArea += room.Area;\n}"}
{"prompt":"Obtén una lista de todas las familias y sus tipos.","completion":"List\u003cstring\u003e familyAndTypeNames = new List\u003cstring\u003e();\nList\u003cFamily\u003e families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast\u003cFamily\u003e().ToList();\nforeach (Family fam in families)\n{\n    familyAndTypeNames.Add($\"Familia: {{fam.Name}}\");\n    foreach (ElementId symbolId in fam.GetFamilySymbolIds())\n    {\n        FamilySymbol sym = doc.GetElement(symbolId) as FamilySymbol;\n        if (sym != null)\n        {\n            familyAndTypeNames.Add($\"\\tTipo: {{sym.Name}}\");\n        }\n    }\n}"}
{"prompt":"Get a list of all families and their types.","completion":"List\u003cstring\u003e familyAndTypeNames = new List\u003cstring\u003e();\nList\u003cFamily\u003e families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast\u003cFamily\u003e().ToList();\nforeach (Family fam in families)\n{\n    familyAndTypeNames.Add($\"Family: {{fam.Name}}\");\n    foreach (ElementId symbolId in fam.GetFamilySymbolIds())\n    {\n        FamilySymbol sym = doc.GetElement(symbolId) as FamilySymbol;\n        if (sym != null)\n        {\n            familyAndTypeNames.Add($\"\\tType: {{sym.Name}}\");\n        }\n    }\n}"}
{"prompt":"Rota el elemento dado {angle_degrees} grados alrededor de su centro.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para rotar\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n            double angle = {angle_degrees} * Math.PI / 180.0;\n            ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n        }\n    }\n}"}
{"prompt":"Rotate the selected entity {angle_degrees} degrees from its central pivot.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para rotar\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n            double angle = {angle_degrees} * Math.PI / 180.0;\n            ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n        }\n    }\n}"}
{"prompt":"Rotate the given element {angle_degrees} degrees about its center axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para rotar\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n            double angle = {angle_degrees} * Math.PI / 180.0;\n            ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n        }\n    }\n}"}
{"prompt":"Turn the provided element {angle_degrees} degrees around its central point.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para rotar\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n            double angle = {angle_degrees} * Math.PI / 180.0;\n            ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n        }\n    }\n}"}
{"prompt":"Rotate the designated element {angle_degrees} degrees, pivoting it about its central axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element to rotate\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n            double angle = {angle_degrees} * Math.PI / 180.0;\n            ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n        }\n    }\n}"}
{"prompt":"Adjust the orientation of the specified element by {angle_degrees} degrees, rotating it around its center point.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element to rotate\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n            double angle = {angle_degrees} * Math.PI / 180.0;\n            ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n        }\n    }\n}"}
{"prompt":"Rotate the given element {angle_degrees} degrees about its center.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element to rotate\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n            double angle = {angle_degrees} * Math.PI / 180.0;\n            ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n        }\n    }\n}"}
{"prompt":"Orient the selected element {angle_degrees} degrees counterclockwise about its center of rotation.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element to rotate\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n            double angle = {angle_degrees} * Math.PI / 180.0;\n            ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n        }\n    }\n}"}
{"prompt":"Conecta dos bandejas de cables con un codo.","completion":"List\u003cCableTray\u003e trays = new FilteredElementCollector(doc).OfClass(typeof(CableTray)).Cast\u003cCableTray\u003e().ToList();\n\nif (trays.Count \u003e= 2)\n{\n    Connector c1 = trays[0].ConnectorManager.UnusedConnectors.Cast\u003cConnector\u003e().FirstOrDefault();\n    Connector c2 = trays[1].ConnectorManager.UnusedConnectors.Cast\u003cConnector\u003e().FirstOrDefault();\n    \n    if (c1 != null \u0026\u0026 c2 != null)\n    {\n        doc.Create.NewUnionFitting(c1, c2);\n    }\n}"}
{"prompt":"Connect two cable trays with an elbow fitting.","completion":"List\u003cCableTray\u003e trays = new FilteredElementCollector(doc).OfClass(typeof(CableTray)).Cast\u003cCableTray\u003e().ToList();\n\nif (trays.Count \u003e= 2)\n{\n    Connector c1 = trays[0].ConnectorManager.UnusedConnectors.Cast\u003cConnector\u003e().FirstOrDefault();\n    Connector c2 = trays[1].ConnectorManager.UnusedConnectors.Cast\u003cConnector\u003e().FirstOrDefault();\n    \n    if (c1 != null \u0026\u0026 c2 != null)\n    {\n        doc.Create.NewUnionFitting(c1, c2);\n    }\n}"}
{"prompt":"Crea una vista 3D axonométrica orientada al Noroeste.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(-1, 1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(1, -1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = \"Vista 3D Noroeste\";\n    }\n}"}
{"prompt":"Create an axonometric 3D view oriented to the Northwest.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(-1, 1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(1, -1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = \"3D View Northwest\";\n    }\n}"}
{"prompt":"Encuentra todas las puertas en el {level_name} usando un filtro combinado.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level1 != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    doors = new FilteredElementCollector(doc).WherePasses(combinedFilter).ToList();\n}"}
{"prompt":"Locate all doors on the {level_name} by applying a combined filter.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level1 != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    doors = new FilteredElementCollector(doc).WherePasses(combinedFilter).ToList();\n}"}
{"prompt":"Identify all doors on the {level_name} with a combined filter.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level1 != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    doors = new FilteredElementCollector(doc).WherePasses(combinedFilter).ToList();\n}"}
{"prompt":"Find all doors on the {level_name} utilizing a combined filter.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level1 != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    doors = new FilteredElementCollector(doc).WherePasses(combinedFilter).ToList();\n}"}
{"prompt":"Search for doors on {level_name} with a combined selection criterion.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level1 != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    doors = new FilteredElementCollector(doc).WherePasses(combinedFilter).ToList();\n}"}
{"prompt":"Identify doors on {level_name} using a composite filter.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level1 != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    doors = new FilteredElementCollector(doc).WherePasses(combinedFilter).ToList();\n}"}
{"prompt":"Locate all doors on {level_name} by applying a unified filter.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level1 != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    doors = new FilteredElementCollector(doc).WherePasses(combinedFilter).ToList();\n}"}
{"prompt":"Find all doors on {level_name} using a combined filter.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level1 != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    doors = new FilteredElementCollector(doc).WherePasses(combinedFilter).ToList();\n}"}
{"prompt":"Obtén una lista de todas las advertencias del proyecto.","completion":"IList\u003cFailureMessage\u003e warnings = doc.GetWarnings();\nList\u003cstring\u003e warningDescriptions = warnings.Select(w =\u003e w.GetDescriptionText()).ToList();"}
{"prompt":"Get a list of all project warnings.","completion":"IList\u003cFailureMessage\u003e warnings = doc.GetWarnings();\nList\u003cstring\u003e warningDescriptions = warnings.Select(w =\u003e w.GetDescriptionText()).ToList();"}
{"prompt":"Desune la geometría de dos elementos dados.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona el primer elemento\");\nReference ref2 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona el segundo elemento\");\n\nif (ref1 != null \u0026\u0026 ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null \u0026\u0026 e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}
{"prompt":"Unjoin the geometry of two given elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select the first element\");\nReference ref2 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select the second element\");\n\nif (ref1 != null \u0026\u0026 ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null \u0026\u0026 e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}
{"prompt":"Verifica si una tubería está conectada en ambos extremos.","completion":"Pipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nbool isFullyConnected = false;\n\nif (pipe != null)\n{\n    isFullyConnected = pipe.ConnectorManager.UnusedConnectors.IsEmpty;\n}"}
{"prompt":"Check if a pipe is connected at both ends.","completion":"Pipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nbool isFullyConnected = false;\n\nif (pipe != null)\n{\n    isFullyConnected = pipe.ConnectorManager.UnusedConnectors.IsEmpty;\n}"}
{"prompt":"Within the Family Editor, create a vertical reference plan named \u0027{plane_name}\u0027.","completion":"string rpName = \"{plane_name}\";\nXYZ start = new XYZ(0, UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0);\nXYZ end = new XYZ(0, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nXYZ normal = XYZ.BasisX;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null \u0026\u0026 doc.IsFamilyDocument)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = rpName;\n    }\n}"}
{"prompt":"Dentro del editor de familias, crea un plano de referencia vertical llamado \u0027{plane_name}\u0027.","completion":"string rpName = \"{plane_name}\";\nXYZ start = new XYZ(0, UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0);\nXYZ end = new XYZ(0, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nXYZ normal = XYZ.BasisX;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null \u0026\u0026 doc.IsFamilyDocument)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = rpName;\n    }\n}"}
{"prompt":"In the Family Editor, establish a vertical reference plan as \u0027{plane_name}\u0027.","completion":"string rpName = \"{plane_name}\";\nXYZ start = new XYZ(0, UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0);\nXYZ end = new XYZ(0, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nXYZ normal = XYZ.BasisX;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null \u0026\u0026 doc.IsFamilyDocument)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = rpName;\n    }\n}"}
{"prompt":"Family Editor: Create a vertical reference plan named \u0027{plane_name}\u0027.","completion":"string rpName = \"{plane_name}\";\nXYZ start = new XYZ(0, UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0);\nXYZ end = new XYZ(0, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nXYZ normal = XYZ.BasisX;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null \u0026\u0026 doc.IsFamilyDocument)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = rpName;\n    }\n}"}
{"prompt":"Inside the family editor, create a vertical reference plane named \u0027{plane_name}\u0027.","completion":"string rpName = \"{plane_name}\";\nXYZ start = new XYZ(0, UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0);\nXYZ end = new XYZ(0, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nXYZ normal = XYZ.BasisX;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null \u0026\u0026 doc.IsFamilyDocument)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = rpName;\n    }\n}"}
{"prompt":"Inside the Family Editor, generate a reference plane in the vertical direction, labeling it as \u0027{plane_name}\u0027.","completion":"string rpName = \"{plane_name}\";\nXYZ start = new XYZ(0, UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0);\nXYZ end = new XYZ(0, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nXYZ normal = XYZ.BasisX;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null \u0026\u0026 doc.IsFamilyDocument)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = rpName;\n    }\n}"}
{"prompt":"In the Family Editor, create a vertically oriented reference plane, designating it as \u0027{plane_name}\u0027.","completion":"string rpName = \"{plane_name}\";\nXYZ start = new XYZ(0, UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0);\nXYZ end = new XYZ(0, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nXYZ normal = XYZ.BasisX;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null \u0026\u0026 doc.IsFamilyDocument)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = rpName;\n    }\n}"}
{"prompt":"Within the Family Editor, establish a vertical reference plane named \u0027{plane_name}\u0027.","completion":"string rpName = \"{plane_name}\";\nXYZ start = new XYZ(0, UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0);\nXYZ end = new XYZ(0, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nXYZ normal = XYZ.BasisX;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null \u0026\u0026 doc.IsFamilyDocument)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = rpName;\n    }\n}"}
{"prompt":"Averigua quién es el propietario de un elemento seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento\");\n\nWorksharingTooltipInfo info = null;\nif (pickedRef != null)\n{\n    info = WorksharingUtils.GetWorksharingTooltipInfo(doc, pickedRef.ElementId);\n}\n"}
{"prompt":"Find out who the owner of a selected element is.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element\");\n\nWorksharingTooltipInfo info = null;\nif (pickedRef != null)\n{\n    info = WorksharingUtils.GetWorksharingTooltipInfo(doc, pickedRef.ElementId);\n}\n"}
{"prompt":"Aísla temporalmente los elementos seleccionados en la vista activa.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e idsToIsolate = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null \u0026\u0026 idsToIsolate.Count \u003e 0)\n{\n    activeView.IsolateElementsTemporary(idsToIsolate);\n}"}
{"prompt":"Temporarily isolate the selected elements in the active view.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e idsToIsolate = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null \u0026\u0026 idsToIsolate.Count \u003e 0)\n{\n    activeView.IsolateElementsTemporary(idsToIsolate);\n}"}
{"prompt":"Cambia el tipo de una losa por uno que contenga \u0027{floor_type_name}\u0027.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast\u003cFloorType\u003e().FirstOrDefault(ft =\u003e ft.Name.Contains(\"{floor_type_name}\"));\n\nif (floorToChange != null \u0026\u0026 newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Modify the floor slab\u0027s type to include \u0027{floor_type_name}\u0027.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast\u003cFloorType\u003e().FirstOrDefault(ft =\u003e ft.Name.Contains(\"{floor_type_name}\"));\n\nif (floorToChange != null \u0026\u0026 newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Change the floor type of the slab to one containing \u0027{floor_type_name}\u0027.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast\u003cFloorType\u003e().FirstOrDefault(ft =\u003e ft.Name.Contains(\"{floor_type_name}\"));\n\nif (floorToChange != null \u0026\u0026 newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Switch the slab\u0027s type to one incorporating \u0027{floor_type_name}\u0027.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast\u003cFloorType\u003e().FirstOrDefault(ft =\u003e ft.Name.Contains(\"{floor_type_name}\"));\n\nif (floorToChange != null \u0026\u0026 newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Adjust the floor type to incorporate \u0027{floor_type_name}\u0027.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast\u003cFloorType\u003e().FirstOrDefault(ft =\u003e ft.Name.Contains(\"{floor_type_name}\"));\n\nif (floorToChange != null \u0026\u0026 newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Replace the current floor type with one labeled \u0027{floor_type_name}\u0027.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast\u003cFloorType\u003e().FirstOrDefault(ft =\u003e ft.Name.Contains(\"{floor_type_name}\"));\n\nif (floorToChange != null \u0026\u0026 newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Modify the floor to include the specified \u0027{floor_type_name}\u0027.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast\u003cFloorType\u003e().FirstOrDefault(ft =\u003e ft.Name.Contains(\"{floor_type_name}\"));\n\nif (floorToChange != null \u0026\u0026 newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Change the type of a floor to one that contains \u0027{floor_type_name}\u0027.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast\u003cFloorType\u003e().FirstOrDefault(ft =\u003e ft.Name.Contains(\"{floor_type_name}\"));\n\nif (floorToChange != null \u0026\u0026 newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Exporta la geometría de un elemento seleccionado a un archivo SAT.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para exportar\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        string folderPath = \"C:/RevitExports/\";\n        string fileName = elem.Name + \".sat\";\n        SATExportOptions options = new SATExportOptions();\n        doc.Export(folderPath, fileName, new List\u003cElementId\u003e{{elem.Id}}, options);\n    }\n}"}
{"prompt":"Export the geometry of a selected element to an SAT file.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element to export\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        string folderPath = \"C:/RevitExports/\";\n        string fileName = elem.Name + \".sat\";\n        SATExportOptions options = new SATExportOptions();\n        doc.Export(folderPath, fileName, new List\u003cElementId\u003e{{elem.Id}}, options);\n    }\n}"}
{"prompt":"Obtén el tipo de sistema de una tubería seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona una tubería\");\n\nPipingSystemType systemType = null;\nif (pickedRef != null)\n{\n    Pipe pipe = doc.GetElement(pickedRef.ElementId) as Pipe;\n    if (pipe != null)\n    {\n        Parameter systemTypeParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        if (systemTypeParam != null \u0026\u0026 systemTypeParam.HasValue)\n        {\n            systemType = doc.GetElement(systemTypeParam.AsElementId()) as PipingSystemType;\n        }\n    }\n}"}
{"prompt":"Get the system type of a selected pipe.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select a pipe\");\n\nPipingSystemType systemType = null;\nif (pickedRef != null)\n{\n    Pipe pipe = doc.GetElement(pickedRef.ElementId) as Pipe;\n    if (pipe != null)\n    {\n        Parameter systemTypeParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        if (systemTypeParam != null \u0026\u0026 systemTypeParam.HasValue)\n        {\n            systemType = doc.GetElement(systemTypeParam.AsElementId()) as PipingSystemType;\n        }\n    }\n}"}
{"prompt":"Establish a new pipe family with {material_name} as its constituent material.","completion":"string newTypeName = \"Tubería de {material_name}\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\")) as Material;\n\nif (pipeTypeToDuplicate != null \u0026\u0026 material != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null \u0026\u0026 !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}
{"prompt":"Define a new pipe category utilizing {material_name} as its structural material.","completion":"string newTypeName = \"Tubería de {material_name}\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\")) as Material;\n\nif (pipeTypeToDuplicate != null \u0026\u0026 material != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null \u0026\u0026 !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}
{"prompt":"Crea un nuevo tipo de tubería con material de {material_name}.","completion":"string newTypeName = \"Tubería de {material_name}\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\")) as Material;\n\nif (pipeTypeToDuplicate != null \u0026\u0026 material != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null \u0026\u0026 !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}
{"prompt":"Create a new pipe type with {material_name} as its material.","completion":"string newTypeName = \"Tubería de {material_name}\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\")) as Material;\n\nif (pipeTypeToDuplicate != null \u0026\u0026 material != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null \u0026\u0026 !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}
{"prompt":"Fabricate a fresh pipe type with {material_name} as its specified material.","completion":"string newTypeName = \"{material_name} Pipe\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\")) as Material;\n\nif (pipeTypeToDuplicate != null \u0026\u0026 material != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null \u0026\u0026 !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}
{"prompt":"Generate a new pipe type, employing {material_name} as its chosen material.","completion":"string newTypeName = \"{material_name} Pipe\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\")) as Material;\n\nif (pipeTypeToDuplicate != null \u0026\u0026 material != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null \u0026\u0026 !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}
{"prompt":"Establish a novel pipe type utilizing {material_name} as its material.","completion":"string newTypeName = \"{material_name} Pipe\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\")) as Material;\n\nif (pipeTypeToDuplicate != null \u0026\u0026 material != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null \u0026\u0026 !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}
{"prompt":"Create a new pipe type with {material_name} material.","completion":"string newTypeName = \"{material_name} Pipe\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\")) as Material;\n\nif (pipeTypeToDuplicate != null \u0026\u0026 material != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null \u0026\u0026 !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}
{"prompt":"Oculta los elementos seleccionados en la vista activa.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e idsToHide = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null \u0026\u0026 idsToHide.Count \u003e 0)\n{\n    activeView.HideElements(idsToHide);\n}"}
{"prompt":"Hide the selected elements in the active view.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e idsToHide = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null \u0026\u0026 idsToHide.Count \u003e 0)\n{\n    activeView.HideElements(idsToHide);\n}"}
{"prompt":"Rename the selected door family to \u0027{new_family_name}\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una puerta\");\n\nif (pickedRef != null)\n{\n    FamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (door != null \u0026\u0026 door.Symbol != null)\n    {\n        Family family = door.Symbol.Family;\n        if (family != null)\n        {\n            family.Name = \"{new_family_name}\";\n        }\n    }\n}"}
{"prompt":"Cambia el nombre de la familia de una puerta seleccionada a \u0027{new_family_name}\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una puerta\");\n\nif (pickedRef != null)\n{\n    FamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (door != null \u0026\u0026 door.Symbol != null)\n    {\n        Family family = door.Symbol.Family;\n        if (family != null)\n        {\n            family.Name = \"{new_family_name}\";\n        }\n    }\n}"}
{"prompt":"Alter the name of the chosen door family to \u0027{new_family_name}\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una puerta\");\n\nif (pickedRef != null)\n{\n    FamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (door != null \u0026\u0026 door.Symbol != null)\n    {\n        Family family = door.Symbol.Family;\n        if (family != null)\n        {\n            family.Name = \"{new_family_name}\";\n        }\n    }\n}"}
{"prompt":"Adjust the title of the selected door family to \u0027{new_family_name}\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una puerta\");\n\nif (pickedRef != null)\n{\n    FamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (door != null \u0026\u0026 door.Symbol != null)\n    {\n        Family family = door.Symbol.Family;\n        if (family != null)\n        {\n            family.Name = \"{new_family_name}\";\n        }\n    }\n}"}
{"prompt":"Change the family name of a selected door to \u0027{new_family_name}\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a door\");\n\nif (pickedRef != null)\n{\n    FamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (door != null \u0026\u0026 door.Symbol != null)\n    {\n        Family family = door.Symbol.Family;\n        if (family != null)\n        {\n            family.Name = \"{new_family_name}\";\n        }\n    }\n}"}
{"prompt":"Update the family designation of the selected door to \u0027{new_family_name}\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a door\");\n\nif (pickedRef != null)\n{\n    FamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (door != null \u0026\u0026 door.Symbol != null)\n    {\n        Family family = door.Symbol.Family;\n        if (family != null)\n        {\n            family.Name = \"{new_family_name}\";\n        }\n    }\n}"}
{"prompt":"Rename the family of the selected door to \u0027{new_family_name}\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a door\");\n\nif (pickedRef != null)\n{\n    FamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (door != null \u0026\u0026 door.Symbol != null)\n    {\n        Family family = door.Symbol.Family;\n        if (family != null)\n        {\n            family.Name = \"{new_family_name}\";\n        }\n    }\n}"}
{"prompt":"Adjust the family name of the chosen door to \u0027{new_family_name}\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a door\");\n\nif (pickedRef != null)\n{\n    FamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (door != null \u0026\u0026 door.Symbol != null)\n    {\n        Family family = door.Symbol.Family;\n        if (family != null)\n        {\n            family.Name = \"{new_family_name}\";\n        }\n    }\n}"}
{"prompt":"Generate a new sheet, numbered \u0027{sheet_number}\u0027, and named \u0027{sheet_name}\u0027.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"{sheet_name}\";\n        sheet.SheetNumber = \"{sheet_number}\";\n    }\n}"}
{"prompt":"Produce a new sheet, designated as \u0027{sheet_number}\u0027, and titled \u0027{sheet_name}\u0027.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"{sheet_name}\";\n        sheet.SheetNumber = \"{sheet_number}\";\n    }\n}"}
{"prompt":"Crea una nueva hoja con el número \u0027{sheet_number}\u0027 y nombre \u0027{sheet_name}\u0027.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"{sheet_name}\";\n        sheet.SheetNumber = \"{sheet_number}\";\n    }\n}"}
{"prompt":"Create a new sheet with the number \u0027{sheet_number}\u0027 and name \u0027{sheet_name}\u0027.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"{sheet_name}\";\n        sheet.SheetNumber = \"{sheet_number}\";\n    }\n}"}
{"prompt":"Establish a new sheet with the number \u0027{sheet_number}\u0027 and name \u0027{sheet_name}\u0027.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"{sheet_name}\";\n        sheet.SheetNumber = \"{sheet_number}\";\n    }\n}"}
{"prompt":"Produce a fresh sheet denoted as \u0027{sheet_number}\u0027, and label it \u0027{sheet_name}\u0027.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"{sheet_name}\";\n        sheet.SheetNumber = \"{sheet_number}\";\n    }\n}"}
{"prompt":"Create a new sheet with number \u0027{sheet_number}\u0027 and name \u0027{sheet_name}\u0027.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"{sheet_name}\";\n        sheet.SheetNumber = \"{sheet_number}\";\n    }\n}"}
{"prompt":"Generate a new sheet identified by \u0027{sheet_number}\u0027 and label it as \u0027{sheet_name}\u0027.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"{sheet_name}\";\n        sheet.SheetNumber = \"{sheet_number}\";\n    }\n}"}
{"prompt":"Generate a new revision with description \u0027{description}\u0027, issued by \u0027{issued_by}\u0027 on date \u0027{date}\u0027. Apply it to the active sheet.","completion":"Revision rev = Revision.Create(doc);\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (rev != null \u0026\u0026 sheet != null)\n{\n    rev.Description = \"{description}\";\n    rev.RevisionDate = \"{date}\";\n    rev.IssuedBy = \"{issued_by}\";\n    \n    ICollection\u003cElementId\u003e revisions = sheet.GetAdditionalRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}
{"prompt":"Create a new revision with description \u0027{description}\u0027, issued by \u0027{issued_by}\u0027 on \u0027{date}\u0027. Apply it to the current sheet.","completion":"Revision rev = Revision.Create(doc);\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (rev != null \u0026\u0026 sheet != null)\n{\n    rev.Description = \"{description}\";\n    rev.RevisionDate = \"{date}\";\n    rev.IssuedBy = \"{issued_by}\";\n    \n    ICollection\u003cElementId\u003e revisions = sheet.GetAdditionalRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}
{"prompt":"Formulate a new revision with description \u0027{description}\u0027, issued by \u0027{issued_by}\u0027 on \u0027{date}\u0027. Assign it to the active drawing.","completion":"Revision rev = Revision.Create(doc);\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (rev != null \u0026\u0026 sheet != null)\n{\n    rev.Description = \"{description}\";\n    rev.RevisionDate = \"{date}\";\n    rev.IssuedBy = \"{issued_by}\";\n    \n    ICollection\u003cElementId\u003e revisions = sheet.GetAdditionalRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}
{"prompt":"Crea una nueva revisión con descripción \u0027{description}\u0027, emitida por \u0027{issued_by}\u0027 en la fecha \u0027{date}\u0027 y aplícala a la hoja activa.","completion":"Revision rev = Revision.Create(doc);\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (rev != null \u0026\u0026 sheet != null)\n{\n    rev.Description = \"{description}\";\n    rev.RevisionDate = \"{date}\";\n    rev.IssuedBy = \"{issued_by}\";\n    \n    ICollection\u003cElementId\u003e revisions = sheet.GetAdditionalRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}
{"prompt":"Draft a new revision with the description \u0027{description}\u0027, issued by \u0027{issued_by}\u0027 on \u0027{date}\u0027, and apply it to the current working sheet.","completion":"Revision rev = Revision.Create(doc);\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (rev != null \u0026\u0026 sheet != null)\n{\n    rev.Description = \"{description}\";\n    rev.RevisionDate = \"{date}\";\n    rev.IssuedBy = \"{issued_by}\";\n    \n    ICollection\u003cElementId\u003e revisions = sheet.GetAdditionalRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}
{"prompt":"Create a new revision with description \u0027{description}\u0027, issued by \u0027{issued_by}\u0027 on \u0027{date}\u0027, and apply it to the active sheet.","completion":"Revision rev = Revision.Create(doc);\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (rev != null \u0026\u0026 sheet != null)\n{\n    rev.Description = \"{description}\";\n    rev.RevisionDate = \"{date}\";\n    rev.IssuedBy = \"{issued_by}\";\n    \n    ICollection\u003cElementId\u003e revisions = sheet.GetAdditionalRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}
{"prompt":"Produce a new revision with the given description \u0027{description}\u0027, issued by \u0027{issued_by}\u0027 on \u0027{date}\u0027, and attach it to the active plan.","completion":"Revision rev = Revision.Create(doc);\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (rev != null \u0026\u0026 sheet != null)\n{\n    rev.Description = \"{description}\";\n    rev.RevisionDate = \"{date}\";\n    rev.IssuedBy = \"{issued_by}\";\n    \n    ICollection\u003cElementId\u003e revisions = sheet.GetAdditionalRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}
{"prompt":"Generate a fresh revision with the specified description \u0027{description}\u0027, issued by \u0027{issued_by}\u0027 on \u0027{date}\u0027, and assign it to the active sheet.","completion":"Revision rev = Revision.Create(doc);\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (rev != null \u0026\u0026 sheet != null)\n{\n    rev.Description = \"{description}\";\n    rev.RevisionDate = \"{date}\";\n    rev.IssuedBy = \"{issued_by}\";\n    \n    ICollection\u003cElementId\u003e revisions = sheet.GetAdditionalRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}
{"prompt":"Modify the label of each table containing \u0027{text_to_find}\u0027 to \u0027{new_text}\u0027.","completion":"List\u003cViewSchedule\u003e schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast\u003cViewSchedule\u003e().Where(vs =\u003e vs.Name.Contains(\"{text_to_find}\")).ToList();\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"{text_to_find}\", \"{new_text}\");\n}"}
{"prompt":"Cambia el nombre de todas las tablas que contienen \u0027{text_to_find}\u0027 por \u0027{new_text}\u0027.","completion":"List\u003cViewSchedule\u003e schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast\u003cViewSchedule\u003e().Where(vs =\u003e vs.Name.Contains(\"{text_to_find}\")).ToList();\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"{text_to_find}\", \"{new_text}\");\n}"}
{"prompt":"Adjust the names of all tables with \u0027{text_to_find}\u0027 to \u0027{new_text}\u0027.","completion":"List\u003cViewSchedule\u003e schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast\u003cViewSchedule\u003e().Where(vs =\u003e vs.Name.Contains(\"{text_to_find}\")).ToList();\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"{text_to_find}\", \"{new_text}\");\n}"}
{"prompt":"Rename all tables containing \u0027{text_to_find}\u0027 to \u0027{new_text}\u0027.","completion":"List\u003cViewSchedule\u003e schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast\u003cViewSchedule\u003e().Where(vs =\u003e vs.Name.Contains(\"{text_to_find}\")).ToList();\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"{text_to_find}\", \"{new_text}\");\n}"}
{"prompt":"Update the nomenclature of all schedules containing \u0027{text_to_find}\u0027, to \u0027{new_text}\u0027.","completion":"List\u003cViewSchedule\u003e schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast\u003cViewSchedule\u003e().Where(vs =\u003e vs.Name.Contains(\"{text_to_find}\")).ToList();\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"{text_to_find}\", \"{new_text}\");\n}"}
{"prompt":"Rename all schedules containing \u0027{text_to_find}\u0027 to \u0027{new_text}\u0027.","completion":"List\u003cViewSchedule\u003e schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast\u003cViewSchedule\u003e().Where(vs =\u003e vs.Name.Contains(\"{text_to_find}\")).ToList();\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"{text_to_find}\", \"{new_text}\");\n}"}
{"prompt":"Rename all schedule instances of \u0027{text_to_find}\u0027 to \u0027{new_text}\u0027.","completion":"List\u003cViewSchedule\u003e schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast\u003cViewSchedule\u003e().Where(vs =\u003e vs.Name.Contains(\"{text_to_find}\")).ToList();\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"{text_to_find}\", \"{new_text}\");\n}"}
{"prompt":"Renumber all schedules with \u0027{text_to_find}\u0027, to \u0027{new_text}\u0027.","completion":"List\u003cViewSchedule\u003e schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast\u003cViewSchedule\u003e().Where(vs =\u003e vs.Name.Contains(\"{text_to_find}\")).ToList();\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"{text_to_find}\", \"{new_text}\");\n}"}
{"prompt":"Obtén el número total de advertencias en el proyecto.","completion":"int totalWarnings = doc.GetWarnings().Count;"}
{"prompt":"Get the total number of warnings in the project.","completion":"int totalWarnings = doc.GetWarnings().Count;"}
{"prompt":"Shift the chosen elements {distance_m} meters vertically upward.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Mueve los elementos seleccionados {distance_m} metros hacia arriba.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Elevate the selected items {distance_m} meters in the positive Z direction.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Translate the selected elements {distance_m} meters upward.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Move the selected elements {distance_m} meters up.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Shift the picked items {distance_m} meters in the upward direction along the Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Elevate the designated components {distance_m} meters in the positive Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Translate the chosen elements {distance_m} meters vertically upward.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Find walls taller than {height_m} meters in height.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nList\u003cElementId\u003e tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds().ToList();"}
{"prompt":"Identify walls with a height greater than {height_m} meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nList\u003cElementId\u003e tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds().ToList();"}
{"prompt":"Encuentra todos los muros que miden más de {height_m} metros de alto.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nList\u003cElementId\u003e tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds().ToList();"}
{"prompt":"Locate all walls that exceed {height_m} meters in height.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nList\u003cElementId\u003e tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds().ToList();"}
{"prompt":"Identify all walls exceeding {height_m} meters in height.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nList\u003cElementId\u003e tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds().ToList();"}
{"prompt":"Determine walls with a height greater than {height_m} meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nList\u003cElementId\u003e tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds().ToList();"}
{"prompt":"Locate all vertical structures surpassing {height_m} meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nList\u003cElementId\u003e tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds().ToList();"}
{"prompt":"Find all walls taller than {height_m} meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nList\u003cElementId\u003e tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds().ToList();"}
{"prompt":"Dado un muro seleccionado, encuentra todas las tuberías que lo atraviesan.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\n\nList\u003cElementId\u003e intersectingPipes = new List\u003cElementId\u003e();\nif (wallRef != null)\n{\n    Element wall = doc.GetElement(wallRef);\n    if (wall != null)\n    {\n        ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n        intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds().ToList();\n    }\n}"}
{"prompt":"Given a selected wall, find all pipes passing through it.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\n\nList\u003cElementId\u003e intersectingPipes = new List\u003cElementId\u003e();\nif (wallRef != null)\n{\n    Element wall = doc.GetElement(wallRef);\n    if (wall != null)\n    {\n        ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n        intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds().ToList();\n    }\n}"}
{"prompt":"Modifica el tipo de muro de un muro existente a uno que contenga \u0027{type_name_substring}\u0027.","completion":"Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(x =\u003e x.Name.Contains(\"{type_name_substring}\"));\n\nif (wallToChange != null \u0026\u0026 newType != null)\n{\n    wallToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Update the existing wall to incorporate \u0027{type_name_substring}\u0027. ","completion":"Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(x =\u003e x.Name.Contains(\"{type_name_substring}\"));\n\nif (wallToChange != null \u0026\u0026 newType != null)\n{\n    wallToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Change the existing wall\u0027s type to include \u0027{type_name_substring}\u0027. ","completion":"Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(x =\u003e x.Name.Contains(\"{type_name_substring}\"));\n\nif (wallToChange != null \u0026\u0026 newType != null)\n{\n    wallToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Adjust the existing wall type to include \u0027{type_name_substring}\u0027.","completion":"Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(x =\u003e x.Name.Contains(\"{type_name_substring}\"));\n\nif (wallToChange != null \u0026\u0026 newType != null)\n{\n    wallToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Modify the existing wall\u0027s wall type to incorporate \u0027{type_name_substring}\u0027.","completion":"Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(x =\u003e x.Name.Contains(\"{type_name_substring}\"));\n\nif (wallToChange != null \u0026\u0026 newType != null)\n{\n    wallToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Change the wall type of an existing wall to one containing \u0027{type_name_substring}\u0027.","completion":"Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(x =\u003e x.Name.Contains(\"{type_name_substring}\"));\n\nif (wallToChange != null \u0026\u0026 newType != null)\n{\n    wallToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Update the wall type of the existing wall to include \u0027{type_name_substring}\u0027.","completion":"Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(x =\u003e x.Name.Contains(\"{type_name_substring}\"));\n\nif (wallToChange != null \u0026\u0026 newType != null)\n{\n    wallToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Adjust the wall type of the current wall to incorporate \u0027{type_name_substring}\u0027.","completion":"Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(x =\u003e x.Name.Contains(\"{type_name_substring}\"));\n\nif (wallToChange != null \u0026\u0026 newType != null)\n{\n    wallToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Obtén una lista de todas las advertencias del proyecto.","completion":"IList\u003cFailureMessage\u003e warnings = doc.GetWarnings();\nList\u003cstring\u003e warningDescriptions = warnings.Select(w =\u003e w.GetDescriptionText()).ToList();"}
{"prompt":"Get a list of all project warnings.","completion":"IList\u003cFailureMessage\u003e warnings = doc.GetWarnings();\nList\u003cstring\u003e warningDescriptions = warnings.Select(w =\u003e w.GetDescriptionText()).ToList();"}
{"prompt":"Desune la geometría de dos elementos seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer elemento\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo elemento\");\n\nif (ref1 != null \u0026\u0026 ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null \u0026\u0026 e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}
{"prompt":"Unjoin the geometry of two selected elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first element\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second element\");\n\nif (ref1 != null \u0026\u0026 ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null \u0026\u0026 e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}
{"prompt":"Generate a new horizontal reference plane named \u0027{plane_name}\u0027 within the family editor.","completion":"XYZ start = new XYZ(UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0, 0);\nXYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0);\nXYZ normal = XYZ.BasisY;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = \"{plane_name}\";\n    }\n}"}
{"prompt":"In the family editor, establish a new horizontal reference plan as \u0027{plane_name}\u0027.","completion":"XYZ start = new XYZ(UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0, 0);\nXYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0);\nXYZ normal = XYZ.BasisY;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = \"{plane_name}\";\n    }\n}"}
{"prompt":"Within the family editor, create a new horizontal reference plane named \u0027{plane_name}\u0027.","completion":"XYZ start = new XYZ(UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0, 0);\nXYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0);\nXYZ normal = XYZ.BasisY;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = \"{plane_name}\";\n    }\n}"}
{"prompt":"Dentro del editor de familias, crea un nuevo plano de referencia horizontal llamado \u0027{plane_name}\u0027.","completion":"XYZ start = new XYZ(UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0, 0);\nXYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0);\nXYZ normal = XYZ.BasisY;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = \"{plane_name}\";\n    }\n}"}
{"prompt":"Within the Family Editor, establish a fresh horizontal reference plane, denominated as \u0027{plane_name}\u0027. ","completion":"XYZ start = new XYZ(UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0, 0);\nXYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0);\nXYZ normal = XYZ.BasisY;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = \"{plane_name}\";\n    }\n}"}
{"prompt":"Inside the Family Editor, initiate a new horizontal reference plane, titled \u0027{plane_name}\u0027. ","completion":"XYZ start = new XYZ(UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0, 0);\nXYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0);\nXYZ normal = XYZ.BasisY;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = \"{plane_name}\";\n    }\n}"}
{"prompt":"Inside the family editor, create a new horizontal reference plane named \u0027{plane_name}\u0027.","completion":"XYZ start = new XYZ(UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0, 0);\nXYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0);\nXYZ normal = XYZ.BasisY;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = \"{plane_name}\";\n    }\n}"}
{"prompt":"Within the Family Editor, generate a new horizontal reference plane, christened as \u0027{plane_name}\u0027. ","completion":"XYZ start = new XYZ(UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0, 0);\nXYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0);\nXYZ normal = XYZ.BasisY;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = \"{plane_name}\";\n    }\n}"}
{"prompt":"Alter the chosen slab\u0027s category to \u0027{new_type_name}\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast\u003cFloorType\u003e().FirstOrDefault(ft =\u003e ft.Name == \"{new_type_name}\");\n    \n    if (floorToChange != null \u0026\u0026 newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Cambia el tipo de una losa seleccionada a \u0027{new_type_name}\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast\u003cFloorType\u003e().FirstOrDefault(ft =\u003e ft.Name == \"{new_type_name}\");\n    \n    if (floorToChange != null \u0026\u0026 newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Adjust the type of the selected slab to \u0027{new_type_name}\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast\u003cFloorType\u003e().FirstOrDefault(ft =\u003e ft.Name == \"{new_type_name}\");\n    \n    if (floorToChange != null \u0026\u0026 newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Modify the selected slab\u0027s type to \u0027{new_type_name}\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast\u003cFloorType\u003e().FirstOrDefault(ft =\u003e ft.Name == \"{new_type_name}\");\n    \n    if (floorToChange != null \u0026\u0026 newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Change the type of a selected floor to \u0027{new_type_name}\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast\u003cFloorType\u003e().FirstOrDefault(ft =\u003e ft.Name == \"{new_type_name}\");\n    \n    if (floorToChange != null \u0026\u0026 newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Set the floor type of the selected region to \u0027{new_type_name}\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast\u003cFloorType\u003e().FirstOrDefault(ft =\u003e ft.Name == \"{new_type_name}\");\n    \n    if (floorToChange != null \u0026\u0026 newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Adjust the floor type of the selected area to \u0027{new_type_name}\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast\u003cFloorType\u003e().FirstOrDefault(ft =\u003e ft.Name == \"{new_type_name}\");\n    \n    if (floorToChange != null \u0026\u0026 newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Modify the floor type property of the selected element to \u0027{new_type_name}\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast\u003cFloorType\u003e().FirstOrDefault(ft =\u003e ft.Name == \"{new_type_name}\");\n    \n    if (floorToChange != null \u0026\u0026 newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Comprueba si la vista activa es una vista de plano.","completion":"View activeView = doc.ActiveView;\nbool isPlanView = false;\n\nif (activeView != null)\n{\n    isPlanView = activeView.ViewType == ViewType.FloorPlan \n                 || activeView.ViewType == ViewType.CeilingPlan \n                 || activeView.ViewType == ViewType.AreaPlan \n                 || activeView.ViewType == ViewType.EngineeringPlan;\n}"}
{"prompt":"Check if the active view is a plan view.","completion":"View activeView = doc.ActiveView;\nbool isPlanView = false;\n\nif (activeView != null)\n{\n    isPlanView = activeView.ViewType == ViewType.FloorPlan \n                 || activeView.ViewType == ViewType.CeilingPlan \n                 || activeView.ViewType == ViewType.AreaPlan \n                 || activeView.ViewType == ViewType.EngineeringPlan;\n}"}
{"prompt":"Create a new pipe category called \u0027{pipe_type_name}\u0027, utilizing \u0027{material_name}\u0027 as the material.","completion":"PipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m =\u003e m.Name == \"{material_name}\") as Material;\n\nif (pipeTypeToDuplicate != null \u0026\u0026 material != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(\"{pipe_type_name}\") as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null \u0026\u0026 !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}
{"prompt":"Form a new pipe family named \u0027{pipe_type_name}\u0027, using \u0027{material_name}\u0027 as the specified material.","completion":"PipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m =\u003e m.Name == \"{material_name}\") as Material;\n\nif (pipeTypeToDuplicate != null \u0026\u0026 material != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(\"{pipe_type_name}\") as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null \u0026\u0026 !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}
{"prompt":"Establish a new pipe type named \u0027{pipe_type_name}\u0027 with material \u0027{material_name}\u0027.","completion":"PipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m =\u003e m.Name == \"{material_name}\") as Material;\n\nif (pipeTypeToDuplicate != null \u0026\u0026 material != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(\"{pipe_type_name}\") as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null \u0026\u0026 !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}
{"prompt":"Crea un nuevo tipo de tubería llamado \u0027{pipe_type_name}\u0027 con material \u0027{material_name}\u0027.","completion":"PipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m =\u003e m.Name == \"{material_name}\") as Material;\n\nif (pipeTypeToDuplicate != null \u0026\u0026 material != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(\"{pipe_type_name}\") as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null \u0026\u0026 !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}
{"prompt":"Establish a novel pipe type designated as \u0027{pipe_type_name}\u0027, utilizing \u0027{material_name}\u0027 as its material.","completion":"PipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m =\u003e m.Name == \"{material_name}\") as Material;\n\nif (pipeTypeToDuplicate != null \u0026\u0026 material != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(\"{pipe_type_name}\") as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null \u0026\u0026 !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}
{"prompt":"Create a new pipe type named \u0027{pipe_type_name}\u0027 with \u0027{material_name}\u0027 material.","completion":"PipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m =\u003e m.Name == \"{material_name}\") as Material;\n\nif (pipeTypeToDuplicate != null \u0026\u0026 material != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(\"{pipe_type_name}\") as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null \u0026\u0026 !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}
{"prompt":"Instruct Revit to produce a new pipe type named \u0027{pipe_type_name}\u0027 using \u0027{material_name}\u0027.","completion":"PipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m =\u003e m.Name == \"{material_name}\") as Material;\n\nif (pipeTypeToDuplicate != null \u0026\u0026 material != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(\"{pipe_type_name}\") as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null \u0026\u0026 !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}
{"prompt":"Form a fresh pipe type, \u0027{pipe_type_name}\u0027, with \u0027{material_name}\u0027 as its assigned material.","completion":"PipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m =\u003e m.Name == \"{material_name}\") as Material;\n\nif (pipeTypeToDuplicate != null \u0026\u0026 material != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(\"{pipe_type_name}\") as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null \u0026\u0026 !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}
{"prompt":"Establish a new door type as \u0027{door_type_name}\u0027 and set the \u0027Fire Rating\u0027 to \u0027{fire_rating_value}\u0027.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"{door_type_name}\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"{fire_rating_value}\");\n    }\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado \u0027{door_type_name}\u0027 y asigna \u0027{fire_rating_value}\u0027 al parámetro \u0027Fire Rating\u0027.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"{door_type_name}\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"{fire_rating_value}\");\n    }\n}"}
{"prompt":"Define a new door type as \u0027{door_type_name}\u0027 and specify \u0027{fire_rating_value}\u0027 for the \u0027Fire Rating\u0027.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"{door_type_name}\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"{fire_rating_value}\");\n    }\n}"}
{"prompt":"Create a new door type named \u0027{door_type_name}\u0027. Assign \u0027{fire_rating_value}\u0027 to the \u0027Fire Rating\u0027 parameter.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"{door_type_name}\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"{fire_rating_value}\");\n    }\n}"}
{"prompt":"Generate a novel door type, named \u0027{door_type_name}\u0027, and determine the \u0027Fire Rating\u0027 parameter to \u0027{fire_rating_value}\u0027.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"{door_type_name}\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"{fire_rating_value}\");\n    }\n}"}
{"prompt":"Formulate a new door type, designated as \u0027{door_type_name}\u0027, and establish the \u0027Fire Rating\u0027 parameter to \u0027{fire_rating_value}\u0027.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"{door_type_name}\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"{fire_rating_value}\");\n    }\n}"}
{"prompt":"Create a new door type named \u0027{door_type_name}\u0027 and set the \u0027Fire Rating\u0027 parameter to \u0027{fire_rating_value}\u0027.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"{door_type_name}\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"{fire_rating_value}\");\n    }\n}"}
{"prompt":"Produce a new door type, tagged as \u0027{door_type_name}\u0027, and define the \u0027Fire Rating\u0027 parameter as \u0027{fire_rating_value}\u0027.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"{door_type_name}\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"{fire_rating_value}\");\n    }\n}"}
{"prompt":"Encuentra todos los muros que no están asociados a ningún nivel.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList\u003cElement\u003e unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Find all walls that are not associated with any level.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList\u003cElement\u003e unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Generate a section view between points ({x1},{y1},{z1}) and ({x2},{y2},{z2}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ({x1},{y1},{z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters),{z2});\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Crea una vista de sección entre los puntos ({x1},{y1},{z1}) y ({x2},{y2},{z2}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ({x1},{y1},{z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters),{z2});\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Produce a sectional perspective between coordinates ({x1},{y1},{z1}) and ({x2},{y2},{z2}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ({x1},{y1},{z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters),{z2});\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Create a sectional representation between locations ({x1},{y1},{z1}) and ({x2},{y2},{z2}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ({x1},{y1},{z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters),{z2});\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Establish a sectional view at the designated coordinates ({x1},{y1},{z1}) and ({x2},{y2},{z2}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ({x1},{y1},{z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters),{z2});\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Create a section view between points ({x1},{y1},{z1}) and ({x2},{y2},{z2}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ({x1},{y1},{z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters),{z2});\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Draw a sectional view between the specified locations ({x1},{y1},{z1}) and ({x2},{y2},{z2}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ({x1},{y1},{z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters),{z2});\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Delineate a sectional cut through points ({x1},{y1},{z1}) and ({x2},{y2},{z2}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ({x1},{y1},{z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters),{z2});\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Insulate all hot water pipes with a thickness of {thickness_mm}mm.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast\u003cPipingSystemType\u003e().FirstOrDefault(s =\u003e s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null \u0026\u0026 hotWaterSystem != null)\n{\n    List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().Where(p =\u003e \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null \u0026\u0026 systemParam.HasValue \u0026\u0026 systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Apply thermal insulation of {thickness_mm}mm to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast\u003cPipingSystemType\u003e().FirstOrDefault(s =\u003e s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null \u0026\u0026 hotWaterSystem != null)\n{\n    List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().Where(p =\u003e \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null \u0026\u0026 systemParam.HasValue \u0026\u0026 systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Aplica aislamiento térmico de {thickness_mm}mm a todas las tuberías de agua caliente.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast\u003cPipingSystemType\u003e().FirstOrDefault(s =\u003e s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null \u0026\u0026 hotWaterSystem != null)\n{\n    List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().Where(p =\u003e \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null \u0026\u0026 systemParam.HasValue \u0026\u0026 systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Thickness {thickness_mm}mm thermal insulation should be applied to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast\u003cPipingSystemType\u003e().FirstOrDefault(s =\u003e s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null \u0026\u0026 hotWaterSystem != null)\n{\n    List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().Where(p =\u003e \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null \u0026\u0026 systemParam.HasValue \u0026\u0026 systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Apply a {thickness_mm}mm layer of thermal insulation to all hot water piping.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast\u003cPipingSystemType\u003e().FirstOrDefault(s =\u003e s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null \u0026\u0026 hotWaterSystem != null)\n{\n    List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().Where(p =\u003e \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null \u0026\u0026 systemParam.HasValue \u0026\u0026 systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Ensure that all hot water pipes are thermally insulated with a {thickness_mm}mm thickness.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast\u003cPipingSystemType\u003e().FirstOrDefault(s =\u003e s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null \u0026\u0026 hotWaterSystem != null)\n{\n    List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().Where(p =\u003e \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null \u0026\u0026 systemParam.HasValue \u0026\u0026 systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Apply {thickness_mm}mm thermal insulation to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast\u003cPipingSystemType\u003e().FirstOrDefault(s =\u003e s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null \u0026\u0026 hotWaterSystem != null)\n{\n    List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().Where(p =\u003e \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null \u0026\u0026 systemParam.HasValue \u0026\u0026 systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Insulate all hot water pipes with a {thickness_mm}mm thickness for thermal efficiency.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast\u003cPipingSystemType\u003e().FirstOrDefault(s =\u003e s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null \u0026\u0026 hotWaterSystem != null)\n{\n    List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().Where(p =\u003e \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null \u0026\u0026 systemParam.HasValue \u0026\u0026 systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Obtén una lista de todas las familias de anotación.","completion":"List\u003cFamily\u003e annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast\u003cFamily\u003e().Where(f =\u003e f.FamilyCategory != null \u0026\u0026 f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}
{"prompt":"Get a list of all annotation families.","completion":"List\u003cFamily\u003e annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast\u003cFamily\u003e().Where(f =\u003e f.FamilyCategory != null \u0026\u0026 f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}
{"prompt":"Adjust all window heights to match the countertop height at {sill_height_mm}mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Ajusta todas las ventanas para que tengan la altura del antepecho a {sill_height_mm}mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Set the window heights to correspond with the countertop height at {sill_height_mm}mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Align all window heights with the countertop height at {sill_height_mm}mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Adjust the sill height of all windows to {sill_height_mm} millimeters.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Regulate the height of window sills to {sill_height_mm} millimeters for all windows.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Set the sill height of all windows to {sill_height_mm}mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Establish the sill height for all windows as {sill_height_mm} millimeters.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Find and obtain the IDs of all 3D views with \u0027{prefix}\u0027 as their initial part for export.","completion":"List\u003cElementId\u003e viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast\u003cView3D\u003e().Where(v =\u003e v.Name.StartsWith(\"{prefix}\") \u0026\u0026 !v.IsTemplate).Select(v =\u003e v.Id).ToList();"}
{"prompt":"Retrieve IDs of all 3D views starting with \u0027{prefix}\u0027 for export.","completion":"List\u003cElementId\u003e viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast\u003cView3D\u003e().Where(v =\u003e v.Name.StartsWith(\"{prefix}\") \u0026\u0026 !v.IsTemplate).Select(v =\u003e v.Id).ToList();"}
{"prompt":"Gather 3D view IDs that have \u0027{prefix}\u0027 as their prefix for export.","completion":"List\u003cElementId\u003e viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast\u003cView3D\u003e().Where(v =\u003e v.Name.StartsWith(\"{prefix}\") \u0026\u0026 !v.IsTemplate).Select(v =\u003e v.Id).ToList();"}
{"prompt":"Obtén los IDs de todas las vistas 3D que empiezan con \u0027{prefix}\u0027 para exportación.","completion":"List\u003cElementId\u003e viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast\u003cView3D\u003e().Where(v =\u003e v.Name.StartsWith(\"{prefix}\") \u0026\u0026 !v.IsTemplate).Select(v =\u003e v.Id).ToList();"}
{"prompt":"Retrieve the IDs of all 3D views with prefix \u0027{prefix}\u0027, for successful export.","completion":"List\u003cElementId\u003e viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast\u003cView3D\u003e().Where(v =\u003e v.Name.StartsWith(\"{prefix}\") \u0026\u0026 !v.IsTemplate).Select(v =\u003e v.Id).ToList();"}
{"prompt":"Get the IDs of all 3D views starting with \u0027{prefix}\u0027 for export.","completion":"List\u003cElementId\u003e viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast\u003cView3D\u003e().Where(v =\u003e v.Name.StartsWith(\"{prefix}\") \u0026\u0026 !v.IsTemplate).Select(v =\u003e v.Id).ToList();"}
{"prompt":"Obtain the IDs of all 3D views initiated with \u0027{prefix}\u0027, prior to export.","completion":"List\u003cElementId\u003e viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast\u003cView3D\u003e().Where(v =\u003e v.Name.StartsWith(\"{prefix}\") \u0026\u0026 !v.IsTemplate).Select(v =\u003e v.Id).ToList();"}
{"prompt":"Locate the IDs of all 3D views prefaced with \u0027{prefix}\u0027, for export purposes.","completion":"List\u003cElementId\u003e viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast\u003cView3D\u003e().Where(v =\u003e v.Name.StartsWith(\"{prefix}\") \u0026\u0026 !v.IsTemplate).Select(v =\u003e v.Id).ToList();"}
{"prompt":"Model a structural beam connecting points ({x1},{y1},{z1}) and ({x2},{y2},{z2}) within the {level_name}.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (beamType != null \u0026\u0026 level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ({x1}, {y1}, {z1});\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits({z2}, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Establish a structural beam from ({x1},{y1},{z1}) to ({x2},{y2},{z2}) on the {level_name}, ensuring it is accurately represented within the model.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (beamType != null \u0026\u0026 level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ({x1}, {y1}, {z1});\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits({z2}, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Create a structural beam between coordinates ({x1},{y1},{z1}) and ({x2},{y2},{z2}) on the {level_name} level.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (beamType != null \u0026\u0026 level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ({x1}, {y1}, {z1});\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits({z2}, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Crea una viga estructural entre ({x1},{y1},{z1}) y ({x2},{y2},{z2}) en el {level_name}.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (beamType != null \u0026\u0026 level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ({x1}, {y1}, {z1});\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits({z2}, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Draw a structural beam connecting points ({x1},{y1},{z1}) and ({x2},{y2},{z2}) within the {level_name} level.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (beamType != null \u0026\u0026 level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ({x1}, {y1}, {z1});\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits({z2}, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Establish a structural beam spanning from ({x1},{y1},{z1}) to ({x2},{y2},{z2}) on {level_name}.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (beamType != null \u0026\u0026 level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ({x1}, {y1}, {z1});\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits({z2}, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Model a structural beam on {level_name}, extending from ({x1},{y1},{z1}) to ({x2},{y2},{z2}).","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (beamType != null \u0026\u0026 level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ({x1}, {y1}, {z1});\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits({z2}, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Create a structural beam between ({x1},{y1},{z1}) and ({x2},{y2},{z2}) on {level_name}.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (beamType != null \u0026\u0026 level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ({x1}, {y1}, {z1});\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits({z2}, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Model a level named \u0027{level_name}\u0027 at {elevation_m} meters.","completion":"string levelName = \"{level_name}\";\ndouble elev = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Create and set level \u0027{level_name}\u0027 to {elevation_m} meters.","completion":"string levelName = \"{level_name}\";\ndouble elev = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Establish level \u0027{level_name}\u0027 at {elevation_m} meters.","completion":"string levelName = \"{level_name}\";\ndouble elev = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Crea un nivel \u0027{level_name}\u0027 a {elevation_m}m.","completion":"string levelName = \"{level_name}\";\ndouble elev = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Create a \u0027{level_name}\u0027 level at {elevation_m}m.","completion":"string levelName = \"{level_name}\";\ndouble elev = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Establish a level named \u0027{level_name}\u0027 at {elevation_m} meters.","completion":"string levelName = \"{level_name}\";\ndouble elev = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Produce a level titled \u0027{level_name}\u0027 at {elevation_m} meters elevation.","completion":"string levelName = \"{level_name}\";\ndouble elev = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Generate a level designated as \u0027{level_name}\u0027 at {elevation_m} meters above the ground.","completion":"string levelName = \"{level_name}\";\ndouble elev = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Arrange lighting posts at a spacing of {spacing_m}m throughout a 100m route.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null \u0026\u0026 level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i = 0; i \u003c= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Install lighting columns at regular intervals of {spacing_m}m on a 100m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null \u0026\u0026 level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i = 0; i \u003c= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Coloca postes de iluminación cada {spacing_m}m en un camino de 100m.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null \u0026\u0026 level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i = 0; i \u003c= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Place lighting poles at every {spacing_m}m interval along a 100m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null \u0026\u0026 level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i = 0; i \u003c= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Install lighting poles every {spacing_m} meters along a 100-meter pathway.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null \u0026\u0026 level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i = 0; i \u003c= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Position lighting columns with a spacing of {spacing_m} meters throughout a 100-meter span.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null \u0026\u0026 level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i = 0; i \u003c= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Place lighting posts every {spacing_m}m along a 100m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null \u0026\u0026 level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i = 0; i \u003c= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Arrange lighting fixtures at regular intervals of {spacing_m} meters along a 100-meter long path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null \u0026\u0026 level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i = 0; i \u003c= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create a grid of {rows} rows and {cols} columns with a spacing of {spacing_m} meters between each column.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null \u0026\u0026 level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i=0; i\u003c{rows}; i++)\n    {\n        for(int j=0; j\u003c{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Genera una cuadrícula de columnas {rows}x{cols} con separación de {spacing_m} metros.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null \u0026\u0026 level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i=0; i\u003c{rows}; i++)\n    {\n        for(int j=0; j\u003c{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Generate a grid structure with {rows} rows and {cols} columns, with a spacing of {spacing_m} meters between the columns.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null \u0026\u0026 level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i=0; i\u003c{rows}; i++)\n    {\n        for(int j=0; j\u003c{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Establish a grid of {rows}x{cols} columns with a spacing of {spacing_m} meters.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null \u0026\u0026 level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i=0; i\u003c{rows}; i++)\n    {\n        for(int j=0; j\u003c{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Design a grid of {rows} vertical columns and {cols} horizontal columns, with a spacing of {spacing_m} meters between each column.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null \u0026\u0026 level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i=0; i\u003c{rows}; i++)\n    {\n        for(int j=0; j\u003c{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Establish a column grid with {rows} rows and {cols} columns, spaced {spacing_m} meters apart.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null \u0026\u0026 level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i=0; i\u003c{rows}; i++)\n    {\n        for(int j=0; j\u003c{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Create a layout of {rows}x{cols} columns, with a {spacing_m}-meter intercolumn spacing.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null \u0026\u0026 level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i=0; i\u003c{rows}; i++)\n    {\n        for(int j=0; j\u003c{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Generate a {rows}x{cols} column grid with {spacing_m}-meter spacing.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null \u0026\u0026 level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i=0; i\u003c{rows}; i++)\n    {\n        for(int j=0; j\u003c{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Produce a reflected ceiling plan view for the specified {level_name}.","completion":"string levelName = \"{level_name}\";\nstring viewName = \"Plano de Plafón {level_name}\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == levelName) as Level;\n\nif (vft != null \u0026\u0026 level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Generate a reflected ceiling plan for the {level_name}.","completion":"string levelName = \"{level_name}\";\nstring viewName = \"Plano de Plafón {level_name}\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == levelName) as Level;\n\nif (vft != null \u0026\u0026 level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Create a reflected ceiling plan view for the {level_name}.","completion":"string levelName = \"{level_name}\";\nstring viewName = \"Plano de Plafón {level_name}\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == levelName) as Level;\n\nif (vft != null \u0026\u0026 level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Crea una vista de plano de plafón reflejado para el {level_name}.","completion":"string levelName = \"{level_name}\";\nstring viewName = \"Plano de Plafón {level_name}\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == levelName) as Level;\n\nif (vft != null \u0026\u0026 level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Generate a Reflected Ceiling Plan for {level_name}.","completion":"string levelName = \"{level_name}\";\nstring viewName = \"{level_name} Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == levelName) as Level;\n\nif (vft != null \u0026\u0026 level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Create a Reflected Ceiling Plan view for {level_name}.","completion":"string levelName = \"{level_name}\";\nstring viewName = \"{level_name} Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == levelName) as Level;\n\nif (vft != null \u0026\u0026 level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Produce a Reflected Ceiling Plan view of {level_name}.","completion":"string levelName = \"{level_name}\";\nstring viewName = \"{level_name} Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == levelName) as Level;\n\nif (vft != null \u0026\u0026 level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Establish a Reflected Ceiling Plan for the {level_name} level.","completion":"string levelName = \"{level_name}\";\nstring viewName = \"{level_name} Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == levelName) as Level;\n\nif (vft != null \u0026\u0026 level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Duplicate the existing {level_to_duplicate} level, moving it {offset_m} meters away, and rename it to \u0027{new_level_name}\u0027.","completion":"string newLevelName = \"{new_level_name}\";\nLevel levelToDup = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_to_duplicate}\") as Level;\n\nif (levelToDup != null)\n{\n    double newElevation = levelToDup.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Copy and shift the {level_to_duplicate} {offset_m} meters, and rename the new level as \u0027{new_level_name}\u0027.","completion":"string newLevelName = \"{new_level_name}\";\nLevel levelToDup = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_to_duplicate}\") as Level;\n\nif (levelToDup != null)\n{\n    double newElevation = levelToDup.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Replicate the {level_to_duplicate} with an offset of {offset_m} meters and name it \u0027{new_level_name}\u0027.","completion":"string newLevelName = \"{new_level_name}\";\nLevel levelToDup = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_to_duplicate}\") as Level;\n\nif (levelToDup != null)\n{\n    double newElevation = levelToDup.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Duplica el {level_to_duplicate} con un desfase de {offset_m}m y llámalo \u0027{new_level_name}\u0027.","completion":"string newLevelName = \"{new_level_name}\";\nLevel levelToDup = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_to_duplicate}\") as Level;\n\nif (levelToDup != null)\n{\n    double newElevation = levelToDup.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Duplicate and move {level_to_duplicate} {offset_m} meters away, and name it \u0027{new_level_name}\u0027.","completion":"string newLevelName = \"{new_level_name}\";\nLevel levelToDup = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_to_duplicate}\") as Level;\n\nif (levelToDup != null)\n{\n    double newElevation = levelToDup.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Duplicate {level_to_duplicate} with a {offset_m}m offset and name it \u0027{new_level_name}\u0027.","completion":"string newLevelName = \"{new_level_name}\";\nLevel levelToDup = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_to_duplicate}\") as Level;\n\nif (levelToDup != null)\n{\n    double newElevation = levelToDup.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Replicate {level_to_duplicate} with a {offset_m} meter offset and label it as \u0027{new_level_name}\u0027.","completion":"string newLevelName = \"{new_level_name}\";\nLevel levelToDup = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_to_duplicate}\") as Level;\n\nif (levelToDup != null)\n{\n    double newElevation = levelToDup.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Copy {level_to_duplicate} with an {offset_m} meter displacement and designate it as \u0027{new_level_name}\u0027.","completion":"string newLevelName = \"{new_level_name}\";\nLevel levelToDup = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_to_duplicate}\") as Level;\n\nif (levelToDup != null)\n{\n    double newElevation = levelToDup.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Obtén una lista de los nombres de todos los materiales.","completion":"List\u003cMaterial\u003e materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().ToList();\nList\u003cstring\u003e materialNames = new List\u003cstring\u003e();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}"}
{"prompt":"Get a list of all material names.","completion":"List\u003cMaterial\u003e materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().ToList();\nList\u003cstring\u003e materialNames = new List\u003cstring\u003e();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}"}
{"prompt":"Aísla temporalmente todo el mobiliario en la vista activa.","completion":"ICollection\u003cElementId\u003e furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Temporarily isolate all furniture in the active view.","completion":"ICollection\u003cElementId\u003e furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Establish a sectional outlook between coordinates ({x1},{y1},{z1}) and ({x2},{y2},{z2}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ({x1},{y1},{z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters),{z2});\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Crea una vista de sección entre los puntos ({x1},{y1},{z1}) y ({x2},{y2},{z2}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ({x1},{y1},{z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters),{z2});\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Generate a sectional perspective from points ({x1},{y1},{z1}) to ({x2},{y2},{z2}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ({x1},{y1},{z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters),{z2});\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Create a section view between points ({x1},{y1},{z1}) and ({x2},{y2},{z2}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ({x1},{y1},{z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters),{z2});\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Create a section view between points ({x1},{y1},{z1}) and ({x2},{y2},{z2}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ({x1},{y1},{z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters),{z2});\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Establish a sectional view along the line defined by ({x1},{y1},{z1}) and ({x2},{y2},{z2}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ({x1},{y1},{z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters),{z2});\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Produce a sectional cutthrough between points ({x1},{y1},{z1}) and ({x2},{y2},{z2}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ({x1},{y1},{z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters),{z2});\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Generate a sectional view at coordinates ({x1},{y1},{z1}) and ({x2},{y2},{z2}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ({x1},{y1},{z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters),{z2});\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Insulate all hot water pipes with a thickness of {thickness_mm}mm.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast\u003cPipingSystemType\u003e().FirstOrDefault(s =\u003e s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null \u0026\u0026 hotWaterSystem != null)\n{\n    List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().Where(p =\u003e \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null \u0026\u0026 systemParam.HasValue \u0026\u0026 systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Apply a thermal insulation layer of {thickness_mm}mm to all hot water piping.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast\u003cPipingSystemType\u003e().FirstOrDefault(s =\u003e s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null \u0026\u0026 hotWaterSystem != null)\n{\n    List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().Where(p =\u003e \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null \u0026\u0026 systemParam.HasValue \u0026\u0026 systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Apply thermal insulation of {thickness_mm}mm to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast\u003cPipingSystemType\u003e().FirstOrDefault(s =\u003e s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null \u0026\u0026 hotWaterSystem != null)\n{\n    List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().Where(p =\u003e \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null \u0026\u0026 systemParam.HasValue \u0026\u0026 systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Aplica aislamiento térmico de {thickness_mm}mm a todas las tuberías de agua caliente.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast\u003cPipingSystemType\u003e().FirstOrDefault(s =\u003e s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null \u0026\u0026 hotWaterSystem != null)\n{\n    List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().Where(p =\u003e \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null \u0026\u0026 systemParam.HasValue \u0026\u0026 systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Ensure that all hot water pipes are insulated with a {thickness_mm}mm thickness of thermal material.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast\u003cPipingSystemType\u003e().FirstOrDefault(s =\u003e s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null \u0026\u0026 hotWaterSystem != null)\n{\n    List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().Where(p =\u003e \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null \u0026\u0026 systemParam.HasValue \u0026\u0026 systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Apply a {thickness_mm}mm layer of thermal insulation to all hot water pipe elements.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast\u003cPipingSystemType\u003e().FirstOrDefault(s =\u003e s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null \u0026\u0026 hotWaterSystem != null)\n{\n    List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().Where(p =\u003e \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null \u0026\u0026 systemParam.HasValue \u0026\u0026 systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Apply {thickness_mm}mm thermal insulation to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast\u003cPipingSystemType\u003e().FirstOrDefault(s =\u003e s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null \u0026\u0026 hotWaterSystem != null)\n{\n    List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().Where(p =\u003e \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null \u0026\u0026 systemParam.HasValue \u0026\u0026 systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Insulate the thermal properties of all hot water pipes by applying a {thickness_mm}mm layer of insulation.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast\u003cPipingSystemType\u003e().FirstOrDefault(s =\u003e s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null \u0026\u0026 hotWaterSystem != null)\n{\n    List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().Where(p =\u003e \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null \u0026\u0026 systemParam.HasValue \u0026\u0026 systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Obtén una lista de todas las familias de anotación.","completion":"List\u003cFamily\u003e annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast\u003cFamily\u003e().Where(f =\u003e f.FamilyCategory != null \u0026\u0026 f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}
{"prompt":"Get a list of all annotation families.","completion":"List\u003cFamily\u003e annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast\u003cFamily\u003e().Where(f =\u003e f.FamilyCategory != null \u0026\u0026 f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}
{"prompt":"Set the sill height of all windows to {sill_height_mm}mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Ajusta todas las ventanas para que tengan la altura del antepecho a {sill_height_mm}mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Adjust all windows to have a sill height of {sill_height_mm}mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Align all window sills with the specified height of {sill_height_mm}mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Adjust the sill height of all windows to {sill_height_mm} millimeters.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Set the parameter of all window sills to {sill_height_mm} millimeters.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Set the sill height of all windows to {sill_height_mm}mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Establish the sill height for all windows as {sill_height_mm} millimeters.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Retrieve the IDs of all 3D views starting with \u0027{prefix}\u0027 for export.","completion":"List\u003cElementId\u003e viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast\u003cView3D\u003e().Where(v =\u003e v.Name.StartsWith(\"{prefix}\") \u0026\u0026 !v.IsTemplate).Select(v =\u003e v.Id).ToList();"}
{"prompt":"Obtén los IDs de todas las vistas 3D que empiezan con \u0027{prefix}\u0027 para exportación.","completion":"List\u003cElementId\u003e viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast\u003cView3D\u003e().Where(v =\u003e v.Name.StartsWith(\"{prefix}\") \u0026\u0026 !v.IsTemplate).Select(v =\u003e v.Id).ToList();"}
{"prompt":"Find IDs for 3D views with \u0027{prefix}\u0027 prefix for export purposes.","completion":"List\u003cElementId\u003e viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast\u003cView3D\u003e().Where(v =\u003e v.Name.StartsWith(\"{prefix}\") \u0026\u0026 !v.IsTemplate).Select(v =\u003e v.Id).ToList();"}
{"prompt":"Locate and gather the IDs of 3D views prefixed with \u0027{prefix}\u0027 for export.","completion":"List\u003cElementId\u003e viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast\u003cView3D\u003e().Where(v =\u003e v.Name.StartsWith(\"{prefix}\") \u0026\u0026 !v.IsTemplate).Select(v =\u003e v.Id).ToList();"}
{"prompt":"Get the IDs of all 3D views starting with \u0027{prefix}\u0027 for export.","completion":"List\u003cElementId\u003e viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast\u003cView3D\u003e().Where(v =\u003e v.Name.StartsWith(\"{prefix}\") \u0026\u0026 !v.IsTemplate).Select(v =\u003e v.Id).ToList();"}
{"prompt":"Locate the IDs of all 3D views starting with \u0027{prefix}\u0027 in preparation for export.","completion":"List\u003cElementId\u003e viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast\u003cView3D\u003e().Where(v =\u003e v.Name.StartsWith(\"{prefix}\") \u0026\u0026 !v.IsTemplate).Select(v =\u003e v.Id).ToList();"}
{"prompt":"Obtain the IDs of all 3D views initiating with \u0027{prefix}\u0027, required for export.","completion":"List\u003cElementId\u003e viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast\u003cView3D\u003e().Where(v =\u003e v.Name.StartsWith(\"{prefix}\") \u0026\u0026 !v.IsTemplate).Select(v =\u003e v.Id).ToList();"}
{"prompt":"Retrieve the IDs of all 3D views that commence with \u0027{prefix}\u0027 for export purposes.","completion":"List\u003cElementId\u003e viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast\u003cView3D\u003e().Where(v =\u003e v.Name.StartsWith(\"{prefix}\") \u0026\u0026 !v.IsTemplate).Select(v =\u003e v.Id).ToList();"}
{"prompt":"Draw a structural beam spanning from ({x1},{y1},{z1}) to ({x2},{y2},{z2}) within the {level_name}.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (beamType != null \u0026\u0026 level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ({x1}, {y1}, {z1});\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits({z2}, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Create a structural beam between ({x1},{y1},{z1}) and ({x2},{y2},{z2}) on the {level_name}.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (beamType != null \u0026\u0026 level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ({x1}, {y1}, {z1});\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits({z2}, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Establish a structural beam connecting points ({x1},{y1},{z1}) and ({x2},{y2},{z2}) within the {level_name}.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (beamType != null \u0026\u0026 level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ({x1}, {y1}, {z1});\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits({z2}, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Crea una viga estructural entre ({x1},{y1},{z1}) y ({x2},{y2},{z2}) en el {level_name}.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (beamType != null \u0026\u0026 level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ({x1}, {y1}, {z1});\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits({z2}, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Delineate a structural beam connecting points ({x1},{y1},{z1}) and ({x2},{y2},{z2}) on level {level_name}.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (beamType != null \u0026\u0026 level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ({x1}, {y1}, {z1});\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits({z2}, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Sketch a beam of structural integrity between coordinates ({x1},{y1},{z1}) and ({x2},{y2},{z2}) on {level_name}.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (beamType != null \u0026\u0026 level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ({x1}, {y1}, {z1});\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits({z2}, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Outline a load-bearing beam between positions ({x1},{y1},{z1}) and ({x2},{y2},{z2}) on the specified level {level_name}.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (beamType != null \u0026\u0026 level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ({x1}, {y1}, {z1});\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits({z2}, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Create a structural beam between ({x1},{y1},{z1}) and ({x2},{y2},{z2}) on {level_name}.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (beamType != null \u0026\u0026 level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ({x1}, {y1}, {z1});\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits({z2}, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Create a level \u0027{level_name}\u0027 at {elevation_m} meters.","completion":"string levelName = \"{level_name}\";\ndouble elev = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Set up a level \u0027{level_name}\u0027 at {elevation_m} meters.","completion":"string levelName = \"{level_name}\";\ndouble elev = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Establish a floor plan for level \u0027{level_name}\u0027 at {elevation_m} meters.","completion":"string levelName = \"{level_name}\";\ndouble elev = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Crea un nivel \u0027{level_name}\u0027 a {elevation_m}m.","completion":"string levelName = \"{level_name}\";\ndouble elev = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Create a \u0027{level_name}\u0027 level at {elevation_m}m.","completion":"string levelName = \"{level_name}\";\ndouble elev = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Establish the \u0027{level_name}\u0027 level at {elevation_m} meters.","completion":"string levelName = \"{level_name}\";\ndouble elev = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Define the \u0027{level_name}\u0027 level at an elevation of {elevation_m} meters.","completion":"string levelName = \"{level_name}\";\ndouble elev = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Insert a \u0027{level_name}\u0027 level at the elevation of {elevation_m} meters.","completion":"string levelName = \"{level_name}\";\ndouble elev = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Position lighting posts at every {spacing_m}m interval along a 100m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null \u0026\u0026 level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i = 0; i \u003c= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Coloca postes de iluminación cada {spacing_m}m en un camino de 100m.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null \u0026\u0026 level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i = 0; i \u003c= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Install lighting poles at a spacing of {spacing_m}m throughout a 100m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null \u0026\u0026 level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i = 0; i \u003c= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Arrange lighting columns at regular intervals of {spacing_m}m along a 100m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null \u0026\u0026 level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i = 0; i \u003c= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Establish lighting poles at specified intervals of {spacing_m} meters on a 100-meter length.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null \u0026\u0026 level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i = 0; i \u003c= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Position lighting fixtures at regular intervals of {spacing_m} meters along a 100-meter trajectory.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null \u0026\u0026 level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i = 0; i \u003c= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Arrange lighting columns every {spacing_m} meters throughout a 100-meter course.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null \u0026\u0026 level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i = 0; i \u003c= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Place lighting posts every {spacing_m}m along a 100m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null \u0026\u0026 level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i = 0; i \u003c= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Arrange a grid of columns {rows}x{cols} with a spacing of {spacing_m} meters between them.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null \u0026\u0026 level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i=0; i\u003c{rows}; i++)\n    {\n        for(int j=0; j\u003c{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Genera una cuadrícula de columnas {rows}x{cols} con separación de {spacing_m} metros.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null \u0026\u0026 level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i=0; i\u003c{rows}; i++)\n    {\n        for(int j=0; j\u003c{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Create a grid of columns {rows}x{cols} with a spacing of {spacing_m} meters.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null \u0026\u0026 level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i=0; i\u003c{rows}; i++)\n    {\n        for(int j=0; j\u003c{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Establish a grid of columns {rows}x{cols} with a separation of {spacing_m} meters.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null \u0026\u0026 level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i=0; i\u003c{rows}; i++)\n    {\n        for(int j=0; j\u003c{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Model a {rows}x{cols} column layout incorporating {spacing_m}-meter column spacing.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null \u0026\u0026 level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i=0; i\u003c{rows}; i++)\n    {\n        for(int j=0; j\u003c{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Create a {rows}x{cols} column grid with {spacing_m}-meter column spacing.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null \u0026\u0026 level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i=0; i\u003c{rows}; i++)\n    {\n        for(int j=0; j\u003c{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Generate a {rows}x{cols} column grid with {spacing_m}-meter spacing.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null \u0026\u0026 level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i=0; i\u003c{rows}; i++)\n    {\n        for(int j=0; j\u003c{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Establish a {rows}x{cols} column arrangement featuring {spacing_m}-meter column spacing.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null \u0026\u0026 level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i=0; i\u003c{rows}; i++)\n    {\n        for(int j=0; j\u003c{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Create a reflected ceiling plan for the given level, {level_name}.","completion":"string levelName = \"{level_name}\";\nstring viewName = \"Plano de Plafón {level_name}\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == levelName) as Level;\n\nif (vft != null \u0026\u0026 level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Generate a reflected ceiling plan view for the {level_name}.","completion":"string levelName = \"{level_name}\";\nstring viewName = \"Plano de Plafón {level_name}\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == levelName) as Level;\n\nif (vft != null \u0026\u0026 level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Produce a reflected ceiling plan for the specified {level_name}.","completion":"string levelName = \"{level_name}\";\nstring viewName = \"Plano de Plafón {level_name}\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == levelName) as Level;\n\nif (vft != null \u0026\u0026 level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Crea una vista de plano de plafón reflejado para el {level_name}.","completion":"string levelName = \"{level_name}\";\nstring viewName = \"Plano de Plafón {level_name}\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == levelName) as Level;\n\nif (vft != null \u0026\u0026 level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Generate a Reflected Ceiling Plan for {level_name}.","completion":"string levelName = \"{level_name}\";\nstring viewName = \"{level_name} Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == levelName) as Level;\n\nif (vft != null \u0026\u0026 level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Create a Reflected Ceiling Plan view for {level_name}.","completion":"string levelName = \"{level_name}\";\nstring viewName = \"{level_name} Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == levelName) as Level;\n\nif (vft != null \u0026\u0026 level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Establish a Reflected Ceiling Plan for the designated level, {level_name}.","completion":"string levelName = \"{level_name}\";\nstring viewName = \"{level_name} Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == levelName) as Level;\n\nif (vft != null \u0026\u0026 level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Produce a Reflected Ceiling Plan View for the specified level, {level_name}.","completion":"string levelName = \"{level_name}\";\nstring viewName = \"{level_name} Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == levelName) as Level;\n\nif (vft != null \u0026\u0026 level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Replicate level \u0027{original_level_name}\u0027 with an offset of {offset_m}m and name it \u0027{new_level_name}\u0027.","completion":"Level originalLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{original_level_name}\") as Level;\n\nif (originalLevel != null)\n{\n    double newElevation = originalLevel.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = \"{new_level_name}\";\n    }\n}"}
{"prompt":"Create a duplicate of level \u0027{original_level_name}\u0027 with a displacement of {offset_m}m, and label it \u0027{new_level_name}\u0027.","completion":"Level originalLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{original_level_name}\") as Level;\n\nif (originalLevel != null)\n{\n    double newElevation = originalLevel.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = \"{new_level_name}\";\n    }\n}"}
{"prompt":"Duplica el nivel \u0027{original_level_name}\u0027 con un desfase de {offset_m}m y llámalo \u0027{new_level_name}\u0027.","completion":"Level originalLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{original_level_name}\") as Level;\n\nif (originalLevel != null)\n{\n    double newElevation = originalLevel.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = \"{new_level_name}\";\n    }\n}"}
{"prompt":"Duplicate the existing level \u0027{original_level_name}\u0027 with a displacement of {offset_m}m and rename it to \u0027{new_level_name}\u0027.","completion":"Level originalLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{original_level_name}\") as Level;\n\nif (originalLevel != null)\n{\n    double newElevation = originalLevel.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = \"{new_level_name}\";\n    }\n}"}
{"prompt":"Create a duplicate of level \u0027{original_level_name}\u0027 with a {offset_m} meter vertical separation and rename it to \u0027{new_level_name}\u0027.","completion":"Level originalLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{original_level_name}\") as Level;\n\nif (originalLevel != null)\n{\n    double newElevation = originalLevel.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = \"{new_level_name}\";\n    }\n}"}
{"prompt":"Duplicate level \u0027{original_level_name}\u0027 with a {offset_m}m offset and name it \u0027{new_level_name}\u0027.","completion":"Level originalLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{original_level_name}\") as Level;\n\nif (originalLevel != null)\n{\n    double newElevation = originalLevel.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = \"{new_level_name}\";\n    }\n}"}
{"prompt":"Replicate level \u0027{original_level_name}\u0027 with a {offset_m} meter displacement and designate it as \u0027{new_level_name}\u0027.","completion":"Level originalLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{original_level_name}\") as Level;\n\nif (originalLevel != null)\n{\n    double newElevation = originalLevel.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = \"{new_level_name}\";\n    }\n}"}
{"prompt":"Clone level \u0027{original_level_name}\u0027 and position it {offset_m} meters apart, labeling it as \u0027{new_level_name}\u0027.","completion":"Level originalLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{original_level_name}\") as Level;\n\nif (originalLevel != null)\n{\n    double newElevation = originalLevel.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = \"{new_level_name}\";\n    }\n}"}
{"prompt":"Obtén una lista de los nombres de todos los materiales.","completion":"List\u003cMaterial\u003e materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().ToList();\nList\u003cstring\u003e materialNames = new List\u003cstring\u003e();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}"}
{"prompt":"Get a list of all material names.","completion":"List\u003cMaterial\u003e materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().ToList();\nList\u003cstring\u003e materialNames = new List\u003cstring\u003e();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}"}
{"prompt":"Crea una vista de sección entre los puntos ({x1},{y1},{z1}) y ({x2},{y2},{z2}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ({x1},{y1},{z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters),{z2});\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Create a sectional perspective between the coordinates ({x1},{y1},{z1}) and ({x2},{y2},{z2}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ({x1},{y1},{z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters),{z2});\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Generate a sectional layout between the locations ({x1},{y1},{z1}) and ({x2},{y2},{z2}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ({x1},{y1},{z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters),{z2});\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Establish a section view between the points ({x1},{y1},{z1}) and ({x2},{y2},{z2}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ({x1},{y1},{z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters),{z2});\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Create a section view between points ({x1},{y1},{z1}) and ({x2},{y2},{z2}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ({x1},{y1},{z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters),{z2});\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Create a sectional view along the specified coordinates ({x1},{y1},{z1}) and ({x2},{y2},{z2}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ({x1},{y1},{z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters),{z2});\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Establish a sectional view between the designated locations ({x1},{y1},{z1}) and ({x2},{y2},{z2}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ({x1},{y1},{z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters),{z2});\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Generate a sectional cut-through at the defined points ({x1},{y1},{z1}) and ({x2},{y2},{z2}).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ({x1},{y1},{z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters),{z2});\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Insulate all hot water pipes with a thickness of {thickness_mm}mm.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast\u003cPipingSystemType\u003e().FirstOrDefault(s =\u003e s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null \u0026\u0026 hotWaterSystem != null)\n{\n    List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().Where(p =\u003e \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null \u0026\u0026 systemParam.HasValue \u0026\u0026 systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Thickness insulation of {thickness_mm}mm should be applied to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast\u003cPipingSystemType\u003e().FirstOrDefault(s =\u003e s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null \u0026\u0026 hotWaterSystem != null)\n{\n    List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().Where(p =\u003e \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null \u0026\u0026 systemParam.HasValue \u0026\u0026 systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Apply thermal insulation of {thickness_mm}mm to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast\u003cPipingSystemType\u003e().FirstOrDefault(s =\u003e s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null \u0026\u0026 hotWaterSystem != null)\n{\n    List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().Where(p =\u003e \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null \u0026\u0026 systemParam.HasValue \u0026\u0026 systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Aplica aislamiento térmico de {thickness_mm}mm a todas las tuberías de agua caliente.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast\u003cPipingSystemType\u003e().FirstOrDefault(s =\u003e s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null \u0026\u0026 hotWaterSystem != null)\n{\n    List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().Where(p =\u003e \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null \u0026\u0026 systemParam.HasValue \u0026\u0026 systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Apply a {thickness_mm}mm layer of thermal insulation to all hot water piping.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast\u003cPipingSystemType\u003e().FirstOrDefault(s =\u003e s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null \u0026\u0026 hotWaterSystem != null)\n{\n    List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().Where(p =\u003e \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null \u0026\u0026 systemParam.HasValue \u0026\u0026 systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Apply {thickness_mm}mm thermal insulation to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast\u003cPipingSystemType\u003e().FirstOrDefault(s =\u003e s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null \u0026\u0026 hotWaterSystem != null)\n{\n    List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().Where(p =\u003e \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null \u0026\u0026 systemParam.HasValue \u0026\u0026 systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Ensure thermal insulation of {thickness_mm}mm is applied to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast\u003cPipingSystemType\u003e().FirstOrDefault(s =\u003e s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null \u0026\u0026 hotWaterSystem != null)\n{\n    List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().Where(p =\u003e \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null \u0026\u0026 systemParam.HasValue \u0026\u0026 systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Insulate all hot water pipes with a {thickness_mm}mm thickness for thermal protection.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast\u003cPipingSystemType\u003e().FirstOrDefault(s =\u003e s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null \u0026\u0026 hotWaterSystem != null)\n{\n    List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().Where(p =\u003e \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null \u0026\u0026 systemParam.HasValue \u0026\u0026 systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Obtén una lista de todas las familias de anotación.","completion":"List\u003cFamily\u003e annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast\u003cFamily\u003e().Where(f =\u003e f.FamilyCategory != null \u0026\u0026 f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}
{"prompt":"Get a list of all annotation families.","completion":"List\u003cFamily\u003e annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast\u003cFamily\u003e().Where(f =\u003e f.FamilyCategory != null \u0026\u0026 f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}
{"prompt":"Ajusta todas las ventanas para que tengan la altura del antepecho a {sill_height_mm}mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Set the window heights to match the countertop level at {sill_height_mm}mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Align all window heights with the countertop at {sill_height_mm}mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Adjust all window heights to match the countertop at {sill_height_mm}mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Establish the sill elevation for all windows as {sill_height_mm} millimeters.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Create a uniform sill height for all windows at {sill_height_mm} millimeters.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Set the sill height of all windows to {sill_height_mm}mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Adjust the sill level for all windows to {sill_height_mm} millimeters.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Locate and obtain IDs of 3D views with the prefix \u0027{prefix}\u0027 for export.","completion":"List\u003cElementId\u003e viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast\u003cView3D\u003e().Where(v =\u003e v.Name.StartsWith(\"{prefix}\") \u0026\u0026 !v.IsTemplate).Select(v =\u003e v.Id).ToList();"}
{"prompt":"Retrieve IDs of all 3D views starting with \u0027{prefix}\u0027 for export.","completion":"List\u003cElementId\u003e viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast\u003cView3D\u003e().Where(v =\u003e v.Name.StartsWith(\"{prefix}\") \u0026\u0026 !v.IsTemplate).Select(v =\u003e v.Id).ToList();"}
{"prompt":"Find the IDs of all 3D views prefixed with \u0027{prefix}\u0027 for export purposes.","completion":"List\u003cElementId\u003e viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast\u003cView3D\u003e().Where(v =\u003e v.Name.StartsWith(\"{prefix}\") \u0026\u0026 !v.IsTemplate).Select(v =\u003e v.Id).ToList();"}
{"prompt":"Obtén los IDs de todas las vistas 3D que empiezan con \u0027{prefix}\u0027 para exportación.","completion":"List\u003cElementId\u003e viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast\u003cView3D\u003e().Where(v =\u003e v.Name.StartsWith(\"{prefix}\") \u0026\u0026 !v.IsTemplate).Select(v =\u003e v.Id).ToList();"}
{"prompt":"Retrieve the IDs of all 3D views commencing with \u0027{prefix}\u0027 for export purposes.","completion":"List\u003cElementId\u003e viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast\u003cView3D\u003e().Where(v =\u003e v.Name.StartsWith(\"{prefix}\") \u0026\u0026 !v.IsTemplate).Select(v =\u003e v.Id).ToList();"}
{"prompt":"Get the IDs of all 3D views starting with \u0027{prefix}\u0027 for export.","completion":"List\u003cElementId\u003e viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast\u003cView3D\u003e().Where(v =\u003e v.Name.StartsWith(\"{prefix}\") \u0026\u0026 !v.IsTemplate).Select(v =\u003e v.Id).ToList();"}
{"prompt":"Identify the IDs of all 3D views starting with \u0027{prefix}\u0027 for export, please.","completion":"List\u003cElementId\u003e viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast\u003cView3D\u003e().Where(v =\u003e v.Name.StartsWith(\"{prefix}\") \u0026\u0026 !v.IsTemplate).Select(v =\u003e v.Id).ToList();"}
{"prompt":"Obtain the IDs of all 3D views initiated with \u0027{prefix}\u0027 for export.","completion":"List\u003cElementId\u003e viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast\u003cView3D\u003e().Where(v =\u003e v.Name.StartsWith(\"{prefix}\") \u0026\u0026 !v.IsTemplate).Select(v =\u003e v.Id).ToList();"}
{"prompt":"Model a structural beam spanning from ({x1},{y1},{z1}) to ({x2},{y2},{z2}) on the {level_name}.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (beamType != null \u0026\u0026 level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ({x1}, {y1}, {z1});\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits({z2}, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Construct a structural beam connecting points ({x1},{y1},{z1}) and ({x2},{y2},{z2}) on the {level_name}.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (beamType != null \u0026\u0026 level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ({x1}, {y1}, {z1});\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits({z2}, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Draw a structural beam between coordinates ({x1},{y1},{z1}) and ({x2},{y2},{z2}) on the {level_name}.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (beamType != null \u0026\u0026 level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ({x1}, {y1}, {z1});\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits({z2}, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Crea una viga estructural entre ({x1},{y1},{z1}) y ({x2},{y2},{z2}) en el {level_name}.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (beamType != null \u0026\u0026 level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ({x1}, {y1}, {z1});\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits({z2}, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Delineate a structural beam connecting points ({x1},{y1},{z1}) and ({x2},{y2},{z2}) on the {level_name} level.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (beamType != null \u0026\u0026 level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ({x1}, {y1}, {z1});\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits({z2}, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Draw a beam on the {level_name} level, extending from coordinates ({x1},{y1},{z1}) to ({x2},{y2},{z2}) and designate it as a structural member.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (beamType != null \u0026\u0026 level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ({x1}, {y1}, {z1});\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits({z2}, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Model a beam in the {level_name} level, spanning from ({x1},{y1},{z1}) to ({x2},{y2},{z2}) and specify its structural properties.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (beamType != null \u0026\u0026 level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ({x1}, {y1}, {z1});\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits({z2}, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Create a structural beam between ({x1},{y1},{z1}) and ({x2},{y2},{z2}) on {level_name}.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (beamType != null \u0026\u0026 level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ({x1}, {y1}, {z1});\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits({z2}, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}
{"prompt":"Create a plane \u0027{level_name}\u0027 at {elevation_m} meters elevation.","completion":"string levelName = \"{level_name}\";\ndouble elev = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Generate a floor level \u0027{level_name}\u0027 at {elevation_m} meters above ground.","completion":"string levelName = \"{level_name}\";\ndouble elev = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Establish level \u0027{level_name}\u0027 at {elevation_m} meters.","completion":"string levelName = \"{level_name}\";\ndouble elev = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Crea un nivel \u0027{level_name}\u0027 a {elevation_m}m.","completion":"string levelName = \"{level_name}\";\ndouble elev = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Create a \u0027{level_name}\u0027 level at {elevation_m}m.","completion":"string levelName = \"{level_name}\";\ndouble elev = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Establish a level named \u0027{level_name}\u0027 at {elevation_m} meters.","completion":"string levelName = \"{level_name}\";\ndouble elev = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Insert a level designated as \u0027{level_name}\u0027 at {elevation_m} meters.","completion":"string levelName = \"{level_name}\";\ndouble elev = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Set up a level labeled \u0027{level_name}\u0027 at {elevation_m} meters.","completion":"string levelName = \"{level_name}\";\ndouble elev = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Position lighting poles at regular intervals of {spacing_m}m along a 100m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null \u0026\u0026 level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i = 0; i \u003c= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Coloca postes de iluminación cada {spacing_m}m en un camino de 100m.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null \u0026\u0026 level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i = 0; i \u003c= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Arrange lighting posts every {spacing_m} meters on a 100m roadway.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null \u0026\u0026 level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i = 0; i \u003c= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Insert lighting posts at specified spacing of {spacing_m}m throughout a 100m stretch.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null \u0026\u0026 level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i = 0; i \u003c= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Position lighting fixtures at regular intervals of {spacing_m} meters along a 100-meter trajectory.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null \u0026\u0026 level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i = 0; i \u003c= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Place lighting posts every {spacing_m}m along a 100m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null \u0026\u0026 level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i = 0; i \u003c= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Align light posts with a spacing of {spacing_m} meters on a 100-meter route.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null \u0026\u0026 level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i = 0; i \u003c= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Arrange illumination columns every {spacing_m} meters along a 100-meter course.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null \u0026\u0026 level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i = 0; i \u003c= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create a grid of {rows} x {cols} columns with a spacing of {spacing_m} meters between each.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null \u0026\u0026 level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i=0; i\u003c{rows}; i++)\n    {\n        for(int j=0; j\u003c{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Genera una cuadrícula de columnas {rows}x{cols} con separación de {spacing_m} metros.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null \u0026\u0026 level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i=0; i\u003c{rows}; i++)\n    {\n        for(int j=0; j\u003c{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Generate a {rows} x {cols} column grid with a spacing of {spacing_m} meters between the columns.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null \u0026\u0026 level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i=0; i\u003c{rows}; i++)\n    {\n        for(int j=0; j\u003c{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Establish a grid arrangement of {rows} x {cols} columns, spaced {spacing_m} meters apart.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null \u0026\u0026 level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i=0; i\u003c{rows}; i++)\n    {\n        for(int j=0; j\u003c{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Create a {rows}x{cols} grid of columns, ensuring a {spacing_m}-meter spacing between each column.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null \u0026\u0026 level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i=0; i\u003c{rows}; i++)\n    {\n        for(int j=0; j\u003c{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Form a {rows}x{cols} arrangement of columns, with a {spacing_m}-meter separation between them.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null \u0026\u0026 level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i=0; i\u003c{rows}; i++)\n    {\n        for(int j=0; j\u003c{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Generate a {rows}x{cols} column grid with {spacing_m}-meter spacing.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null \u0026\u0026 level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i=0; i\u003c{rows}; i++)\n    {\n        for(int j=0; j\u003c{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Develop a {rows}x{cols} column grid, maintaining a {spacing_m}-meter interval between columns.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null \u0026\u0026 level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\n    for(int i=0; i\u003c{rows}; i++)\n    {\n        for(int j=0; j\u003c{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Generate a reflected ceiling plan for the {level_name}.","completion":"string levelName = \"{level_name}\";\nstring viewName = \"Plano de Plafón {level_name}\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == levelName) as Level;\n\nif (vft != null \u0026\u0026 level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Create a reflected ceiling plan view for the {level_name}.","completion":"string levelName = \"{level_name}\";\nstring viewName = \"Plano de Plafón {level_name}\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == levelName) as Level;\n\nif (vft != null \u0026\u0026 level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Produce a reflected ceiling plan view on the {level_name}.","completion":"string levelName = \"{level_name}\";\nstring viewName = \"Plano de Plafón {level_name}\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == levelName) as Level;\n\nif (vft != null \u0026\u0026 level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Crea una vista de plano de plafón reflejado para el {level_name}.","completion":"string levelName = \"{level_name}\";\nstring viewName = \"Plano de Plafón {level_name}\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == levelName) as Level;\n\nif (vft != null \u0026\u0026 level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Generate a Reflected Ceiling Plan for {level_name}.","completion":"string levelName = \"{level_name}\";\nstring viewName = \"{level_name} Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == levelName) as Level;\n\nif (vft != null \u0026\u0026 level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Create a Reflected Ceiling Plan view for {level_name}.","completion":"string levelName = \"{level_name}\";\nstring viewName = \"{level_name} Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == levelName) as Level;\n\nif (vft != null \u0026\u0026 level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Establish a Reflected Ceiling Plan for level {level_name}.","completion":"string levelName = \"{level_name}\";\nstring viewName = \"{level_name} Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == levelName) as Level;\n\nif (vft != null \u0026\u0026 level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Produce a Reflected Ceiling Plan view of {level_name}.","completion":"string levelName = \"{level_name}\";\nstring viewName = \"{level_name} Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == levelName) as Level;\n\nif (vft != null \u0026\u0026 level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Copy the specified {level_to_duplicate} level and displace it by {offset_m} meters, renaming it to \u0027{new_level_name}\u0027.","completion":"string newLevelName = \"{new_level_name}\";\nLevel levelToDup = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_to_duplicate}\") as Level;\n\nif (levelToDup != null)\n{\n    double newElevation = levelToDup.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Replicate the {level_to_duplicate} with an offset of {offset_m} meters and name it \u0027{new_level_name}\u0027.","completion":"string newLevelName = \"{new_level_name}\";\nLevel levelToDup = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_to_duplicate}\") as Level;\n\nif (levelToDup != null)\n{\n    double newElevation = levelToDup.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Duplica el {level_to_duplicate} con un desfase de {offset_m}m y llámalo \u0027{new_level_name}\u0027.","completion":"string newLevelName = \"{new_level_name}\";\nLevel levelToDup = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_to_duplicate}\") as Level;\n\nif (levelToDup != null)\n{\n    double newElevation = levelToDup.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Duplicate the existing {level_to_duplicate} level, shifting it by {offset_m} meters, and rename it as \u0027{new_level_name}\u0027.","completion":"string newLevelName = \"{new_level_name}\";\nLevel levelToDup = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_to_duplicate}\") as Level;\n\nif (levelToDup != null)\n{\n    double newElevation = levelToDup.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Duplicate {level_to_duplicate} with a {offset_m}m offset and name it \u0027{new_level_name}\u0027.","completion":"string newLevelName = \"{new_level_name}\";\nLevel levelToDup = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_to_duplicate}\") as Level;\n\nif (levelToDup != null)\n{\n    double newElevation = levelToDup.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Clone {level_to_duplicate} with a {offset_m} meter offset, renaming it to \u0027{new_level_name}\u0027.","completion":"string newLevelName = \"{new_level_name}\";\nLevel levelToDup = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_to_duplicate}\") as Level;\n\nif (levelToDup != null)\n{\n    double newElevation = levelToDup.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Replicate {level_to_duplicate} with a {offset_m} meter offset and designate it as \u0027{new_level_name}\u0027.","completion":"string newLevelName = \"{new_level_name}\";\nLevel levelToDup = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_to_duplicate}\") as Level;\n\nif (levelToDup != null)\n{\n    double newElevation = levelToDup.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Duplicate the specified {level_to_duplicate} level, applying a {offset_m} meter offset, and rename it to \u0027{new_level_name}\u0027.","completion":"string newLevelName = \"{new_level_name}\";\nLevel levelToDup = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_to_duplicate}\") as Level;\n\nif (levelToDup != null)\n{\n    double newElevation = levelToDup.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Obtén una lista de los nombres de todos los materiales.","completion":"List\u003cMaterial\u003e materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().ToList();\nList\u003cstring\u003e materialNames = new List\u003cstring\u003e();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}"}
{"prompt":"Get a list of all material names.","completion":"List\u003cMaterial\u003e materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().ToList();\nList\u003cstring\u003e materialNames = new List\u003cstring\u003e();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}"}
{"prompt":"Aísla temporalmente todo el mobiliario en la vista activa.","completion":"ICollection\u003cElementId\u003e furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Temporarily isolate all furniture in the active view.","completion":"ICollection\u003cElementId\u003e furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Crea un grupo de detalles con los elementos de detalle seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n{\n    List\u003cElementId\u003e detailIds = new List\u003cElementId\u003e();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null \u0026\u0026 elem.Category != null \u0026\u0026 elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count \u003e 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Detalle Típico 1\";\n        }\n    }\n}"}
{"prompt":"Create a detail group with the selected detail items.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n{\n    List\u003cElementId\u003e detailIds = new List\u003cElementId\u003e();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null \u0026\u0026 elem.Category != null \u0026\u0026 elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count \u003e 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Typical Detail 1\";\n        }\n    }\n}"}
{"prompt":"Encuentra todas las vistas de sección en el proyecto.","completion":"List\u003cViewSection\u003e sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast\u003cViewSection\u003e().ToList();"}
{"prompt":"Find all section views in the project.","completion":"List\u003cViewSection\u003e sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast\u003cViewSection\u003e().ToList();"}
{"prompt":"Adjust the name of all families, loaded or not, that contain \u0027{old_name}\u0027 to \u0027{new_name}\u0027.","completion":"List\u003cFamily\u003e familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast\u003cFamily\u003e().Where(f =\u003e f.Name.Contains(\"{old_name}\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"{old_name}\", \"{new_name}\");\n}"}
{"prompt":"Cambia el nombre de todas las familias cargadas que contengan \u0027{old_name}\u0027 a \u0027{new_name}\u0027.","completion":"List\u003cFamily\u003e familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast\u003cFamily\u003e().Where(f =\u003e f.Name.Contains(\"{old_name}\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"{old_name}\", \"{new_name}\");\n}"}
{"prompt":"Rename all loaded families containing \u0027{old_name}\u0027 to \u0027{new_name}\u0027.","completion":"List\u003cFamily\u003e familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast\u003cFamily\u003e().Where(f =\u003e f.Name.Contains(\"{old_name}\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"{old_name}\", \"{new_name}\");\n}"}
{"prompt":"Update the title of all loaded families with \u0027{old_name}\u0027 to \u0027{new_name}\u0027.","completion":"List\u003cFamily\u003e familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast\u003cFamily\u003e().Where(f =\u003e f.Name.Contains(\"{old_name}\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"{old_name}\", \"{new_name}\");\n}"}
{"prompt":"Renumber all loaded families with the former name \u0027{old_name}\u0027 to the new designation \u0027{new_name}\u0027.","completion":"List\u003cFamily\u003e familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast\u003cFamily\u003e().Where(f =\u003e f.Name.Contains(\"{old_name}\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"{old_name}\", \"{new_name}\");\n}"}
{"prompt":"Update the nomenclature of all loaded families from the current \u0027{old_name}\u0027 to the new \u0027{new_name}\u0027.","completion":"List\u003cFamily\u003e familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast\u003cFamily\u003e().Where(f =\u003e f.Name.Contains(\"{old_name}\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"{old_name}\", \"{new_name}\");\n}"}
{"prompt":"Rename all loaded families containing \u0027{old_name}\u0027 to \u0027{new_name}\u0027.","completion":"List\u003cFamily\u003e familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast\u003cFamily\u003e().Where(f =\u003e f.Name.Contains(\"{old_name}\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"{old_name}\", \"{new_name}\");\n}"}
{"prompt":"Rename all loaded families, which currently bear the name \u0027{old_name}\u0027, to \u0027{new_name}\u0027.","completion":"List\u003cFamily\u003e familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast\u003cFamily\u003e().Where(f =\u003e f.Name.Contains(\"{old_name}\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"{old_name}\", \"{new_name}\");\n}"}
{"prompt":"Crea una nueva tabla de planificación para ventanas que incluya Marca de Tipo, Ancho y Alto.","completion":"string scheduleName = \"Tabla de Ventanas\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f =\u003e f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f =\u003e f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f =\u003e f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}
{"prompt":"Create a new window schedule that includes Type Mark, Width, and Height.","completion":"string scheduleName = \"Window Schedule\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f =\u003e f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f =\u003e f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f =\u003e f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}
{"prompt":"Crea un ensamblaje a partir de los elementos seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"Nuevo Ensamblaje\";\n    }\n}"}
{"prompt":"Create an assembly from the selected elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"New Assembly\";\n    }\n}"}
{"prompt":"Insert a reference point at the coordinates ({x1},{y1},{z1}) within the family editor.","completion":"if(doc.IsFamilyDocument)\n{\n    doc.FamilyCreate.NewReferencePoint(new XYZ({x1},{y1},{z1}));\n}"}
{"prompt":"Añade un punto de referencia en las coordenadas ({x1},{y1},{z1}) dentro del editor de familias.","completion":"if(doc.IsFamilyDocument)\n{\n    doc.FamilyCreate.NewReferencePoint(new XYZ({x1},{y1},{z1}));\n}"}
{"prompt":"Add a reference marker at the specified coordinates ({x1},{y1},{z1}) within the family editor.","completion":"if(doc.IsFamilyDocument)\n{\n    doc.FamilyCreate.NewReferencePoint(new XYZ({x1},{y1},{z1}));\n}"}
{"prompt":"Place a coordinate reference at ({x1},{y1},{z1}) within the family editor.","completion":"if(doc.IsFamilyDocument)\n{\n    doc.FamilyCreate.NewReferencePoint(new XYZ({x1},{y1},{z1}));\n}"}
{"prompt":"Establish a reference point at the specified coordinates ({x1},{y1},{z1}) within the family editor.","completion":"if(doc.IsFamilyDocument)\n{\n    doc.FamilyCreate.NewReferencePoint(new XYZ({x1},{y1},{z1}));\n}"}
{"prompt":"Insert a reference point at the given coordinates ({x1},{y1},{z1}) while operating within the family editor.","completion":"if(doc.IsFamilyDocument)\n{\n    doc.FamilyCreate.NewReferencePoint(new XYZ({x1},{y1},{z1}));\n}"}
{"prompt":"Add a reference point at coordinates ({x1},{y1},{z1}) inside the family editor.","completion":"if(doc.IsFamilyDocument)\n{\n    doc.FamilyCreate.NewReferencePoint(new XYZ({x1},{y1},{z1}));\n}"}
{"prompt":"Position a reference point at the designated coordinates ({x1},{y1},{z1}) during the family editor session.","completion":"if(doc.IsFamilyDocument)\n{\n    doc.FamilyCreate.NewReferencePoint(new XYZ({x1},{y1},{z1}));\n}"}
{"prompt":"Crea una vista 3D con la caja de sección activada.","completion":"string viewName = \"Vista 3D con Caja de Sección\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Create a 3D view with the section box enabled.","completion":"string viewName = \"3D View with Section Box\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Insert the CAD file \u0027{file_name}.dwg\u0027 into the present working view.","completion":"string filePath = \"C:/CAD/{file_name}.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Import the CAD file named \u0027{file_name}.dwg\u0027 into the current view.","completion":"string filePath = \"C:/CAD/{file_name}.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Bring in the CAD file \u0027{file_name}.dwg\u0027 to the active view.","completion":"string filePath = \"C:/CAD/{file_name}.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Importa un archivo CAD llamado \u0027{file_name}.dwg\u0027 en la vista actual.","completion":"string filePath = \"C:/CAD/{file_name}.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Load the CAD file \u0027{file_name}.dwg\u0027 into the present viewport.","completion":"string filePath = \"C:/CAD/{file_name}.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Insert the CAD file \u0027{file_name}.dwg\u0027 into the current working space.","completion":"string filePath = \"C:/CAD/{file_name}.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Import the CAD file named \u0027{file_name}.dwg\u0027 into the active view.","completion":"string filePath = \"C:/CAD/{file_name}.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Import a CAD file named \u0027{file_name}.dwg\u0027 into the current view.","completion":"string filePath = \"C:/CAD/{file_name}.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Rename the active view to \u0027{view_name}\u0027.","completion":"string newName = \"{view_name}\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Adjust the name of the active view to \u0027{view_name}\u0027.","completion":"string newName = \"{view_name}\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Modify the title of the active view to \u0027{view_name}\u0027.","completion":"string newName = \"{view_name}\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Cambia el nombre de la vista activa a \u0027{view_name}\u0027.","completion":"string newName = \"{view_name}\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Rename the active view to \u0027{view_name}\u0027.","completion":"string newName = \"{view_name}\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Re-name the active view to \u0027{view_name}\u0027. (Recommended for consistency with other project documentation)","completion":"string newName = \"{view_name}\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Designate the active view as \u0027{view_name}\u0027.","completion":"string newName = \"{view_name}\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Label the current view as \u0027{view_name}\u0027.","completion":"string newName = \"{view_name}\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Crea una vista 3D orientada desde el sureste.","completion":"string viewName = \"Vista 3D Sureste\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}
{"prompt":"Create a 3D view oriented from the southeast.","completion":"string viewName = \"3D View Southeast\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}
{"prompt":"Crea un grupo de detalles con los elementos de detalle seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n{\n    List\u003cElementId\u003e detailIds = new List\u003cElementId\u003e();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null \u0026\u0026 elem.Category != null \u0026\u0026 elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count \u003e 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Detalle Típico 1\";\n        }\n    }\n}"}
{"prompt":"Create a detail group with the selected detail items.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n{\n    List\u003cElementId\u003e detailIds = new List\u003cElementId\u003e();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null \u0026\u0026 elem.Category != null \u0026\u0026 elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count \u003e 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Typical Detail 1\";\n        }\n    }\n}"}
{"prompt":"Encuentra todas las vistas de sección en el proyecto.","completion":"List\u003cViewSection\u003e sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast\u003cViewSection\u003e().ToList();"}
{"prompt":"Find all section views in the project.","completion":"List\u003cViewSection\u003e sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast\u003cViewSection\u003e().ToList();"}
{"prompt":"Rename the family instances with \u0027{old_name}\u0027 to \u0027{new_name}\u0027 in all loaded families.","completion":"List\u003cFamily\u003e familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast\u003cFamily\u003e().Where(f =\u003e f.Name.Contains(\"{old_name}\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"{old_name}\", \"{new_name}\");\n}"}
{"prompt":"Adjust the names of all families loaded with \u0027{old_name}\u0027 to \u0027{new_name}\u0027.","completion":"List\u003cFamily\u003e familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast\u003cFamily\u003e().Where(f =\u003e f.Name.Contains(\"{old_name}\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"{old_name}\", \"{new_name}\");\n}"}
{"prompt":"Cambia el nombre de todas las familias cargadas que contengan \u0027{old_name}\u0027 a \u0027{new_name}\u0027.","completion":"List\u003cFamily\u003e familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast\u003cFamily\u003e().Where(f =\u003e f.Name.Contains(\"{old_name}\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"{old_name}\", \"{new_name}\");\n}"}
{"prompt":"Rename all loaded families containing \u0027{old_name}\u0027 to \u0027{new_name}\u0027.","completion":"List\u003cFamily\u003e familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast\u003cFamily\u003e().Where(f =\u003e f.Name.Contains(\"{old_name}\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"{old_name}\", \"{new_name}\");\n}"}
{"prompt":"Replace the current names of all loaded families that have \u0027{old_name}\u0027 with \u0027{new_name}\u0027.","completion":"List\u003cFamily\u003e familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast\u003cFamily\u003e().Where(f =\u003e f.Name.Contains(\"{old_name}\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"{old_name}\", \"{new_name}\");\n}"}
{"prompt":"Rename all existing families with the label \u0027{old_name}\u0027 to \u0027{new_name}\u0027.","completion":"List\u003cFamily\u003e familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast\u003cFamily\u003e().Where(f =\u003e f.Name.Contains(\"{old_name}\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"{old_name}\", \"{new_name}\");\n}"}
{"prompt":"Rename all loaded families containing \u0027{old_name}\u0027 to \u0027{new_name}\u0027.","completion":"List\u003cFamily\u003e familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast\u003cFamily\u003e().Where(f =\u003e f.Name.Contains(\"{old_name}\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"{old_name}\", \"{new_name}\");\n}"}
{"prompt":"Adjust the nomenclature of all loaded families from \u0027{old_name}\u0027 to \u0027{new_name}\u0027.","completion":"List\u003cFamily\u003e familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast\u003cFamily\u003e().Where(f =\u003e f.Name.Contains(\"{old_name}\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"{old_name}\", \"{new_name}\");\n}"}
{"prompt":"Crea una nueva tabla de planificación para ventanas que incluya Marca de Tipo, Ancho y Alto.","completion":"string scheduleName = \"Tabla de Ventanas\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f =\u003e f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f =\u003e f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f =\u003e f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}
{"prompt":"Create a new window schedule that includes Type Mark, Width, and Height.","completion":"string scheduleName = \"Window Schedule\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f =\u003e f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f =\u003e f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f =\u003e f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}
{"prompt":"Crea un ensamblaje a partir de los elementos seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"Nuevo Ensamblaje\";\n    }\n}"}
{"prompt":"Create an assembly from the selected elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"New Assembly\";\n    }\n}"}
{"prompt":"Insert a reference point at the coordinates ({x1},{y1},{z1}) within the family editor.","completion":"if(doc.IsFamilyDocument)\n{\n    doc.FamilyCreate.NewReferencePoint(new XYZ({x1},{y1},{z1}));\n}"}
{"prompt":"Añade un punto de referencia en las coordenadas ({x1},{y1},{z1}) dentro del editor de familias.","completion":"if(doc.IsFamilyDocument)\n{\n    doc.FamilyCreate.NewReferencePoint(new XYZ({x1},{y1},{z1}));\n}"}
{"prompt":"Establish a reference point at the specified coordinates ({x1},{y1},{z1}) within the family environment.","completion":"if(doc.IsFamilyDocument)\n{\n    doc.FamilyCreate.NewReferencePoint(new XYZ({x1},{y1},{z1}));\n}"}
{"prompt":"Create a reference point at the given coordinates ({x1},{y1},{z1}) within the family editor\u0027s space.","completion":"if(doc.IsFamilyDocument)\n{\n    doc.FamilyCreate.NewReferencePoint(new XYZ({x1},{y1},{z1}));\n}"}
{"prompt":"Establish a reference point at the specified coordinates ({x1},{y1},{z1}) within the family editor.","completion":"if(doc.IsFamilyDocument)\n{\n    doc.FamilyCreate.NewReferencePoint(new XYZ({x1},{y1},{z1}));\n}"}
{"prompt":"Create a reference datum at the designated coordinates ({x1},{y1},{z1}) within the family editor\u0027s environment.","completion":"if(doc.IsFamilyDocument)\n{\n    doc.FamilyCreate.NewReferencePoint(new XYZ({x1},{y1},{z1}));\n}"}
{"prompt":"Insert a reference marker at the given coordinates ({x1},{y1},{z1}) during family creation.","completion":"if(doc.IsFamilyDocument)\n{\n    doc.FamilyCreate.NewReferencePoint(new XYZ({x1},{y1},{z1}));\n}"}
{"prompt":"Add a reference point at coordinates ({x1},{y1},{z1}) inside the family editor.","completion":"if(doc.IsFamilyDocument)\n{\n    doc.FamilyCreate.NewReferencePoint(new XYZ({x1},{y1},{z1}));\n}"}
{"prompt":"Crea una vista 3D con la caja de sección activada.","completion":"string viewName = \"Vista 3D con Caja de Sección\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Create a 3D view with the section box enabled.","completion":"string viewName = \"3D View with Section Box\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Bring in the CAD file \u0027{file_name}.dwg\u0027 to the present working view.","completion":"string filePath = \"C:/CAD/{file_name}.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Import the CAD file named \u0027{file_name}.dwg\u0027 into the current view.","completion":"string filePath = \"C:/CAD/{file_name}.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Load the CAD file \u0027{file_name}.dwg\u0027 into the active view.","completion":"string filePath = \"C:/CAD/{file_name}.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Importa un archivo CAD llamado \u0027{file_name}.dwg\u0027 en la vista actual.","completion":"string filePath = \"C:/CAD/{file_name}.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Bring in the CAD file \u0027{file_name}.dwg\u0027 as the active view.","completion":"string filePath = \"C:/CAD/{file_name}.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Insert the current project\u0027s view with the CAD file \u0027{file_name}.dwg\u0027.","completion":"string filePath = \"C:/CAD/{file_name}.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Import a CAD file named \u0027{file_name}.dwg\u0027 into the current view.","completion":"string filePath = \"C:/CAD/{file_name}.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Import Autocad drawing \u0027{file_name}.dwg\u0027 into the present perspective.","completion":"string filePath = \"C:/CAD/{file_name}.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Rename the active view to \u0027{view_name}\u0027.","completion":"string newName = \"{view_name}\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Modify the name of the active view to \u0027{view_name}\u0027.","completion":"string newName = \"{view_name}\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Update the title of the active view to \u0027{view_name}\u0027.","completion":"string newName = \"{view_name}\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Cambia el nombre de la vista activa a \u0027{view_name}\u0027.","completion":"string newName = \"{view_name}\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Rename the active view to \u0027{view_name}\u0027.","completion":"string newName = \"{view_name}\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Rename the view in focus to \u0027{view_name}\u0027.","completion":"string newName = \"{view_name}\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Label the current view as \u0027{view_name}\u0027.","completion":"string newName = \"{view_name}\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Change the title of the active view to \u0027{view_name}\u0027.","completion":"string newName = \"{view_name}\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Crea una vista 3D orientada desde el sureste.","completion":"string viewName = \"Vista 3D Sureste\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}
{"prompt":"Create a 3D view oriented from the southeast.","completion":"string viewName = \"3D View Southeast\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(v =\u003e v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}
{"prompt":"Encuentra todas las familias de anotación y cuenta cuántas hay.","completion":"List\u003cFamily\u003e annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast\u003cFamily\u003e().Where(f =\u003e f.FamilyCategory != null \u0026\u0026 f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\nint count = annotationFamilies.Count;"}
{"prompt":"Find all annotation families and count how many there are.","completion":"List\u003cFamily\u003e annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast\u003cFamily\u003e().Where(f =\u003e f.FamilyCategory != null \u0026\u0026 f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\nint count = annotationFamilies.Count;"}
{"prompt":"Adjust all windows so that the sill height is {sill_height_m} meters.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_m}, UnitTypeId.Meters);\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Set the height of all windows to {sill_height_m} meters.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_m}, UnitTypeId.Meters);\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Align all window sills at a height of {sill_height_m} meters.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_m}, UnitTypeId.Meters);\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Ajusta todas las ventanas para que la altura del antepecho sea {sill_height_m} metro.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_m}, UnitTypeId.Meters);\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Set the base of all window openings to a height of {sill_height_m} meters.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_m}, UnitTypeId.Meters);\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Set the sill height of all windows to {sill_height_m} meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_m}, UnitTypeId.Meters);\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Adjust the sill height of all windows to {sill_height_m} meters.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_m}, UnitTypeId.Meters);\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Establish the sill elevation of all windows as {sill_height_m} meters.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_m}, UnitTypeId.Meters);\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Define a new door type named \u0027{door_type_name}\u0027 and specify its fire-resistant rating as \u0027{fire_rating}\u0027.","completion":"string newTypeName = \"{door_type_name}\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"{fire_rating}\");\n    }\n}"}
{"prompt":"Create a new door type named \u0027{door_type_name}\u0027 and set its fire resistance to \u0027{fire_rating}\u0027.","completion":"string newTypeName = \"{door_type_name}\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"{fire_rating}\");\n    }\n}"}
{"prompt":"Model a new door type named \u0027{door_type_name}\u0027 with a fire rating of \u0027{fire_rating}\u0027.","completion":"string newTypeName = \"{door_type_name}\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"{fire_rating}\");\n    }\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado \u0027{door_type_name}\u0027 y establece su resistencia al fuego a \u0027{fire_rating}\u0027.","completion":"string newTypeName = \"{door_type_name}\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"{fire_rating}\");\n    }\n}"}
{"prompt":"Delineate a fresh door type labelled \u0027{door_type_name}\u0027 and establish its fire rating as \u0027{fire_rating}\u0027. ","completion":"string newTypeName = \"{door_type_name}\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"{fire_rating}\");\n    }\n}"}
{"prompt":"Formulate a new door type called \u0027{door_type_name}\u0027 and configure its fire resistance to \u0027{fire_rating}\u0027. ","completion":"string newTypeName = \"{door_type_name}\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"{fire_rating}\");\n    }\n}"}
{"prompt":"Establish a novel door type denominated \u0027{door_type_name}\u0027 and assign it a fire rating of \u0027{fire_rating}\u0027. ","completion":"string newTypeName = \"{door_type_name}\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"{fire_rating}\");\n    }\n}"}
{"prompt":"Create a new door type named \u0027{door_type_name}\u0027 and set its fire rating to \u0027{fire_rating}\u0027.","completion":"string newTypeName = \"{door_type_name}\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"{fire_rating}\");\n    }\n}"}
{"prompt":"Duplicate all items from the {source_level} to the {target_level}.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{source_level}\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{target_level}\") as Level;\n\nif (level1 != null \u0026\u0026 level2 != null)\n{\n    ICollection\u003cElementId\u003e elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if (elementsToCopy.Count \u003e 0)\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Replicate all elements from the {source_level} to the {target_level}.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{source_level}\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{target_level}\") as Level;\n\nif (level1 != null \u0026\u0026 level2 != null)\n{\n    ICollection\u003cElementId\u003e elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if (elementsToCopy.Count \u003e 0)\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Transfer all components from the {source_level} to the {target_level}.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{source_level}\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{target_level}\") as Level;\n\nif (level1 != null \u0026\u0026 level2 != null)\n{\n    ICollection\u003cElementId\u003e elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if (elementsToCopy.Count \u003e 0)\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Copia todos los elementos del {source_level} al {target_level}.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{source_level}\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{target_level}\") as Level;\n\nif (level1 != null \u0026\u0026 level2 != null)\n{\n    ICollection\u003cElementId\u003e elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if (elementsToCopy.Count \u003e 0)\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Transfer all entities from {source_level} to {target_level}.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{source_level}\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{target_level}\") as Level;\n\nif (level1 != null \u0026\u0026 level2 != null)\n{\n    ICollection\u003cElementId\u003e elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if (elementsToCopy.Count \u003e 0)\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Duplicate all items from {source_level} to {target_level}.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{source_level}\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{target_level}\") as Level;\n\nif (level1 != null \u0026\u0026 level2 != null)\n{\n    ICollection\u003cElementId\u003e elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if (elementsToCopy.Count \u003e 0)\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Copy all elements from {source_level} to {target_level}.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{source_level}\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{target_level}\") as Level;\n\nif (level1 != null \u0026\u0026 level2 != null)\n{\n    ICollection\u003cElementId\u003e elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if (elementsToCopy.Count \u003e 0)\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Replicate all components from {source_level} to {target_level}.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{source_level}\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{target_level}\") as Level;\n\nif (level1 != null \u0026\u0026 level2 != null)\n{\n    ICollection\u003cElementId\u003e elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if (elementsToCopy.Count \u003e 0)\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Encuentra todos los muros con más de {height_m} metros de altura.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList\u003cElement\u003e tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Identify walls taller than {height_m} meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList\u003cElement\u003e tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Find walls with a height greater than {height_m} meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList\u003cElement\u003e tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Locate all walls exceeding {height_m} meters in height.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList\u003cElement\u003e tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Identify all walls exceeding {height_m} meters in height.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList\u003cElement\u003e tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Locate walls with a height greater than {height_m} meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList\u003cElement\u003e tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Find all walls taller than {height_m} meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList\u003cElement\u003e tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Search for walls that surpass {height_m} meters in their vertical extent.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList\u003cElement\u003e tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Encuentra todos los muros que no tienen nivel base asignado.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList\u003cElement\u003e unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Find all walls that have no base level assigned.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList\u003cElement\u003e unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Establece la visibilidad de la categoría \u0027Mobiliario\u0027 en falso en la vista activa.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nView activeView = doc.ActiveView;\n\nif (furnitureCat != null \u0026\u0026 activeView != null)\n{\n    activeView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Set the visibility of the \u0027Furniture\u0027 category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nView activeView = doc.ActiveView;\n\nif (furnitureCat != null \u0026\u0026 activeView != null)\n{\n    activeView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Genera un reporte con el área de todas las habitaciones del proyecto.","completion":"List\u003cRoom\u003e rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast\u003cRoom\u003e().ToList();"}
{"prompt":"Generate a report with the area of all rooms in the project.","completion":"List\u003cRoom\u003e rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast\u003cRoom\u003e().ToList();"}
{"prompt":"Generate a wall on {level_name} from ({x1},{y1},{z1}) to ({x2},{y2},{z2}) with a height of {height_m} meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null \u0026\u0026 wallType != null)\n{\n    XYZ p1 = new XYZ({x1}, {y1}, {z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), {y2}, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Model a wall within {level_name} at coordinates ({x1},{y1},{z1}) to ({x2},{y2},{z2}) with a height of {height_m} meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null \u0026\u0026 wallType != null)\n{\n    XYZ p1 = new XYZ({x1}, {y1}, {z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), {y2}, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Crea un muro en {level_name} de ({x1},{y1},{z1}) a ({x2},{y2},{z2}) con {height_m}m de alto.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null \u0026\u0026 wallType != null)\n{\n    XYZ p1 = new XYZ({x1}, {y1}, {z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), {y2}, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Create a wall on {level_name} at the specified coordinates ({x1},{y1},{z1}) to ({x2},{y2},{z2}) with a height of {height_m} meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null \u0026\u0026 wallType != null)\n{\n    XYZ p1 = new XYZ({x1}, {y1}, {z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), {y2}, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Delineate a wall on level {level_name} from coordinates ({x1},{y1},{z1}) to ({x2},{y2},{z2}) with a vertical dimension of {height_m} meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null \u0026\u0026 wallType != null)\n{\n    XYZ p1 = new XYZ({x1}, {y1}, {z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), {y2}, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Sketch a partition wall on the {level_name} from the given points ({x1},{y1},{z1}) to ({x2},{y2},{z2}) with a height of {height_m} meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null \u0026\u0026 wallType != null)\n{\n    XYZ p1 = new XYZ({x1}, {y1}, {z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), {y2}, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Model a vertical structure on level {level_name} spanning from ({x1},{y1},{z1}) to ({x2},{y2},{z2}) with a vertical extent of {height_m} meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null \u0026\u0026 wallType != null)\n{\n    XYZ p1 = new XYZ({x1}, {y1}, {z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), {y2}, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Create a wall on {level_name} from ({x1},{y1},{z1}) to ({x2},{y2},{z2}) with a height of {height_m} meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null \u0026\u0026 wallType != null)\n{\n    XYZ p1 = new XYZ({x1}, {y1}, {z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), {y2}, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Modify the wall family for the selected walls to \u0027{wall_type_name}\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.Name == \"{wall_type_name}\");\n\nif (selectedIds.Count \u003e 0 \u0026\u0026 targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n    }\n}"}
{"prompt":"Revise the wall type of the selected walls and set it to \u0027{wall_type_name}\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.Name == \"{wall_type_name}\");\n\nif (selectedIds.Count \u003e 0 \u0026\u0026 targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n    }\n}"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a \u0027{wall_type_name}\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.Name == \"{wall_type_name}\");\n\nif (selectedIds.Count \u003e 0 \u0026\u0026 targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n    }\n}"}
{"prompt":"Update the wall category for the selected walls to \u0027{wall_type_name}\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.Name == \"{wall_type_name}\");\n\nif (selectedIds.Count \u003e 0 \u0026\u0026 targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n    }\n}"}
{"prompt":"Adjust the wall type for all selected walls to \u0027{wall_type_name}\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.Name == \"{wall_type_name}\");\n\nif (selectedIds.Count \u003e 0 \u0026\u0026 targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n    }\n}"}
{"prompt":"Set the wall type of the selected walls to \u0027{wall_type_name}\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.Name == \"{wall_type_name}\");\n\nif (selectedIds.Count \u003e 0 \u0026\u0026 targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n    }\n}"}
{"prompt":"Change the wall type of the selected walls to \u0027{wall_type_name}\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.Name == \"{wall_type_name}\");\n\nif (selectedIds.Count \u003e 0 \u0026\u0026 targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n    }\n}"}
{"prompt":"Update the wall type for the selected walls to \u0027{wall_type_name}\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.Name == \"{wall_type_name}\");\n\nif (selectedIds.Count \u003e 0 \u0026\u0026 targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n    }\n}"}
{"prompt":"Modify the wall type for the selected walls to \u0027{wall_type_name}\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.Name == \"{wall_type_name}\");\n\nif (selectedIds.Count \u003e 0 \u0026\u0026 targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n    }\n}"}
{"prompt":"Transform the selected walls\u0027 wall type to \u0027{wall_type_name}\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.Name == \"{wall_type_name}\");\n\nif (selectedIds.Count \u003e 0 \u0026\u0026 targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n    }\n}"}
{"prompt":"Alter the type of selected walls to \u0027{wall_type_name}\u0027 wall type.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.Name == \"{wall_type_name}\");\n\nif (selectedIds.Count \u003e 0 \u0026\u0026 targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n    }\n}"}
{"prompt":"Model a wall of type \u0027{wall_type_name}\u0027 on the \u0027{level_name}\u0027. Extend from coordinates ({x1},{y1}) to ({x2},{y2}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == \"{wall_type_name}\") as WallType;\nXYZ startPoint = new XYZ({x1}, {y1}, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nif (level != null \u0026\u0026 wallType != null)\n{\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}
{"prompt":"Crea un muro del tipo \u0027{wall_type_name}\u0027 en el \u0027{level_name}\u0027 desde ({x1},{y1}) hasta ({x2},{y2}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == \"{wall_type_name}\") as WallType;\nXYZ startPoint = new XYZ({x1}, {y1}, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nif (level != null \u0026\u0026 wallType != null)\n{\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}
{"prompt":"Create a wall instance of \u0027{wall_type_name}\u0027 on the \u0027{level_name}\u0027. Spanning from coordinates ({x1},{y1}) to ({x2},{y2}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == \"{wall_type_name}\") as WallType;\nXYZ startPoint = new XYZ({x1}, {y1}, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nif (level != null \u0026\u0026 wallType != null)\n{\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}
{"prompt":"Generate a wall element of type \u0027{wall_type_name}\u0027 on the \u0027{level_name}\u0027. Define its extent from coordinates ({x1},{y1}) to ({x2},{y2}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == \"{wall_type_name}\") as WallType;\nXYZ startPoint = new XYZ({x1}, {y1}, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nif (level != null \u0026\u0026 wallType != null)\n{\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}
{"prompt":"Model a \u0027{wall_type_name}\u0027 wall on \u0027{level_name}\u0027 with endpoints at ({x1},{y1}) and ({x2},{y2}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == \"{wall_type_name}\") as WallType;\nXYZ startPoint = new XYZ({x1}, {y1}, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nif (level != null \u0026\u0026 wallType != null)\n{\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}
{"prompt":"Delineate a \u0027{wall_type_name}\u0027 wall on \u0027{level_name}\u0027 from coordinates ({x1},{y1}) to ({x2},{y2}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == \"{wall_type_name}\") as WallType;\nXYZ startPoint = new XYZ({x1}, {y1}, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nif (level != null \u0026\u0026 wallType != null)\n{\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}
{"prompt":"Sketch a \u0027{wall_type_name}\u0027 wall on \u0027{level_name}\u0027, extending from ({x1},{y1}) to ({x2},{y2}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == \"{wall_type_name}\") as WallType;\nXYZ startPoint = new XYZ({x1}, {y1}, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nif (level != null \u0026\u0026 wallType != null)\n{\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}
{"prompt":"Create a \u0027{wall_type_name}\u0027 wall on \u0027{level_name}\u0027 from ({x1},{y1}) to ({x2},{y2}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == \"{wall_type_name}\") as WallType;\nXYZ startPoint = new XYZ({x1}, {y1}, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nif (level != null \u0026\u0026 wallType != null)\n{\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}
{"prompt":"Set up a new floor level \u0027{level_name}\u0027 at an elevation of {elevation_m} meters.","completion":"string levelName = \"{level_name}\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Create a new level named \u0027{level_name}\u0027 at an elevation of {elevation_m} meters.","completion":"string levelName = \"{level_name}\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Establish a new floor level \u0027{level_name}\u0027 at an elevation of {elevation_m} meters.","completion":"string levelName = \"{level_name}\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Crea un nuevo nivel llamado \u0027{level_name}\u0027 a una elevación de {elevation_m} metros.","completion":"string levelName = \"{level_name}\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Create a new level named \u0027{level_name}\u0027 at an elevation of {elevation_m} meters.","completion":"string levelName = \"{level_name}\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Insert a new level labelled \u0027{level_name}\u0027 at a height of {elevation_m} meters.","completion":"string levelName = \"{level_name}\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Establish a fresh level titled \u0027{level_name}\u0027 at an elevation of {elevation_m} meters above the origin.","completion":"string levelName = \"{level_name}\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Model a new level designated \u0027{level_name}\u0027 at an elevation of {elevation_m} meters.","completion":"string levelName = \"{level_name}\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Coloca una instancia de la familia \u0027{family_name}\u0027 en el centro de la habitación \u0027{room_name}\u0027.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r =\u003e r.Name == \"{room_name}\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name == \"{family_name}\") as FamilySymbol;\nif(furnitureSymbol != null \u0026\u0026 !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null \u0026\u0026 furnitureSymbol != null \u0026\u0026 room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Place family \u0027{family_name}\u0027 in the central location of room \u0027{room_name}\u0027.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r =\u003e r.Name == \"{room_name}\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name == \"{family_name}\") as FamilySymbol;\nif(furnitureSymbol != null \u0026\u0026 !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null \u0026\u0026 furnitureSymbol != null \u0026\u0026 room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Position an instance of family \u0027{family_name}\u0027 at the center of room \u0027{room_name}\u0027.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r =\u003e r.Name == \"{room_name}\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name == \"{family_name}\") as FamilySymbol;\nif(furnitureSymbol != null \u0026\u0026 !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null \u0026\u0026 furnitureSymbol != null \u0026\u0026 room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Insert family \u0027{family_name}\u0027 centrally within room \u0027{room_name}\u0027.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r =\u003e r.Name == \"{room_name}\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name == \"{family_name}\") as FamilySymbol;\nif(furnitureSymbol != null \u0026\u0026 !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null \u0026\u0026 furnitureSymbol != null \u0026\u0026 room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Place a \u0027{family_name}\u0027 family unit in the midpoint of the \u0027{room_name}\u0027 room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r =\u003e r.Name == \"{room_name}\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name == \"{family_name}\") as FamilySymbol;\nif(furnitureSymbol != null \u0026\u0026 !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null \u0026\u0026 furnitureSymbol != null \u0026\u0026 room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Place an instance of the \u0027{family_name}\u0027 family in the center of the \u0027{room_name}\u0027 room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r =\u003e r.Name == \"{room_name}\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name == \"{family_name}\") as FamilySymbol;\nif(furnitureSymbol != null \u0026\u0026 !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null \u0026\u0026 furnitureSymbol != null \u0026\u0026 room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Position a \u0027{family_name}\u0027 family member at the center of the \u0027{room_name}\u0027 room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r =\u003e r.Name == \"{room_name}\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name == \"{family_name}\") as FamilySymbol;\nif(furnitureSymbol != null \u0026\u0026 !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null \u0026\u0026 furnitureSymbol != null \u0026\u0026 room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Insert an instance of the \u0027{family_name}\u0027 family in the central location of the \u0027{room_name}\u0027 room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r =\u003e r.Name == \"{room_name}\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name == \"{family_name}\") as FamilySymbol;\nif(furnitureSymbol != null \u0026\u0026 !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null \u0026\u0026 furnitureSymbol != null \u0026\u0026 room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Establish a grid consisting of {num_horizontal} horizontal axes and {num_vertical} vertical axes, spaced {spacing_m} meters apart.","completion":"double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\nint countH = {num_horizontal};\nint countV = {num_vertical};\nfor (int i = 0; i \u003c countH; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((countV - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i \u003c countV; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (countH - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea una rejilla de {num_horizontal} ejes horizontales y {num_vertical} verticales, espaciados {spacing_m} metros.","completion":"double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\nint countH = {num_horizontal};\nint countV = {num_vertical};\nfor (int i = 0; i \u003c countH; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((countV - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i \u003c countV; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (countH - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Set up a grid comprising {num_horizontal} horizontal lines and {num_vertical} vertical lines, separated by {spacing_m} meters.","completion":"double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\nint countH = {num_horizontal};\nint countV = {num_vertical};\nfor (int i = 0; i \u003c countH; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((countV - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i \u003c countV; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (countH - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create a horizontal and vertical grid with {num_horizontal} axes in the horizontal direction and {num_vertical} axes in the vertical direction, with a spacing of {spacing_m} meters.","completion":"double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\nint countH = {num_horizontal};\nint countV = {num_vertical};\nfor (int i = 0; i \u003c countH; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((countV - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i \u003c countV; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (countH - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Delineate a network of {num_horizontal} horizontal and {num_vertical} vertical gridlines, maintaining a distance of {spacing_m} meters between each.","completion":"double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\nint countH = {num_horizontal};\nint countV = {num_vertical};\nfor (int i = 0; i \u003c countH; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((countV - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i \u003c countV; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (countH - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Establish a horizontal grid consisting of {num_horizontal} lines, spaced {spacing_m} meters apart, and a vertical grid comprising {num_vertical} lines, with the same spacing between them.","completion":"double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\nint countH = {num_horizontal};\nint countV = {num_vertical};\nfor (int i = 0; i \u003c countH; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((countV - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i \u003c countV; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (countH - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Arrange a grid pattern with {num_horizontal} horizontal and {num_vertical} vertical gridlines, each spaced apart by {spacing_m} meters.","completion":"double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\nint countH = {num_horizontal};\nint countV = {num_vertical};\nfor (int i = 0; i \u003c countH; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((countV - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i \u003c countV; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (countH - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create a grid of {num_horizontal} horizontal and {num_vertical} vertical grids, spaced {spacing_m} meters apart.","completion":"double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\nint countH = {num_horizontal};\nint countV = {num_vertical};\nfor (int i = 0; i \u003c countH; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((countV - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i \u003c countV; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (countH - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Replicate the wall type \u0027{original_name}\u0027 and rename it \u0027{new_name}\u0027.","completion":"string originalName = \"{original_name}\";\nstring newName = \"{new_name}\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Duplicate the wall type and label it \u0027{new_name}\u0027, previously named \u0027{original_name}\u0027.","completion":"string originalName = \"{original_name}\";\nstring newName = \"{new_name}\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Duplica el tipo de muro \u0027{original_name}\u0027 y nómbralo \u0027{new_name}\u0027.","completion":"string originalName = \"{original_name}\";\nstring newName = \"{new_name}\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Copy the wall type \u0027{original_name}\u0027 and rename it to \u0027{new_name}\u0027.","completion":"string originalName = \"{original_name}\";\nstring newName = \"{new_name}\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Replicate the existing \u0027{original_name}\u0027 wall type and rename it \u0027{new_name}\u0027.","completion":"string originalName = \"{original_name}\";\nstring newName = \"{new_name}\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Create a duplicate of the \u0027{original_name}\u0027 wall type and rename it to \u0027{new_name}\u0027.","completion":"string originalName = \"{original_name}\";\nstring newName = \"{new_name}\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Duplicate the \u0027{original_name}\u0027 wall type and name it \u0027{new_name}\u0027.","completion":"string originalName = \"{original_name}\";\nstring newName = \"{new_name}\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Clone the \u0027{original_name}\u0027 wall type and rename it as \u0027{new_name}\u0027.","completion":"string originalName = \"{original_name}\";\nstring newName = \"{new_name}\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Selecciona todos los muros del \u0027{level_name}\u0027 y cambia su comentario a \u0027{comment}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nif (level != null)\n{\n    List\u003cWall\u003e wallsOnLevel = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w =\u003e w.LevelId == level.Id).Cast\u003cWall\u003e().ToList();\n    foreach(Wall wall in wallsOnLevel)\n    {\n        Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentParam != null \u0026\u0026 !commentParam.IsReadOnly)\n        {\n            commentParam.Set(\"{comment}\");\n        }\n    }\n}"}
{"prompt":"Alter the annotations of the walls belonging to \u0027{level_name}\u0027. Change the text to \u0027{comment}\u0027. ","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nif (level != null)\n{\n    List\u003cWall\u003e wallsOnLevel = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w =\u003e w.LevelId == level.Id).Cast\u003cWall\u003e().ToList();\n    foreach(Wall wall in wallsOnLevel)\n    {\n        Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentParam != null \u0026\u0026 !commentParam.IsReadOnly)\n        {\n            commentParam.Set(\"{comment}\");\n        }\n    }\n}"}
{"prompt":"Modify the comments of all walls in \u0027{level_name}\u0027. Set the new comment as \u0027{comment}\u0027. ","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nif (level != null)\n{\n    List\u003cWall\u003e wallsOnLevel = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w =\u003e w.LevelId == level.Id).Cast\u003cWall\u003e().ToList();\n    foreach(Wall wall in wallsOnLevel)\n    {\n        Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentParam != null \u0026\u0026 !commentParam.IsReadOnly)\n        {\n            commentParam.Set(\"{comment}\");\n        }\n    }\n}"}
{"prompt":"Select all walls within the \u0027{level_name}\u0027 and update their comments to \u0027{comment}\u0027. ","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nif (level != null)\n{\n    List\u003cWall\u003e wallsOnLevel = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w =\u003e w.LevelId == level.Id).Cast\u003cWall\u003e().ToList();\n    foreach(Wall wall in wallsOnLevel)\n    {\n        Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentParam != null \u0026\u0026 !commentParam.IsReadOnly)\n        {\n            commentParam.Set(\"{comment}\");\n        }\n    }\n}"}
{"prompt":"Select all walls on \u0027{level_name}\u0027 and change their comment to \u0027{comment}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nif (level != null)\n{\n    List\u003cWall\u003e wallsOnLevel = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w =\u003e w.LevelId == level.Id).Cast\u003cWall\u003e().ToList();\n    foreach(Wall wall in wallsOnLevel)\n    {\n        Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentParam != null \u0026\u0026 !commentParam.IsReadOnly)\n        {\n            commentParam.Set(\"{comment}\");\n        }\n    }\n}"}
{"prompt":"Highlight and modify the comments of all walls within \u0027{level_name}\u0027. Set them to \u0027{comment}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nif (level != null)\n{\n    List\u003cWall\u003e wallsOnLevel = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w =\u003e w.LevelId == level.Id).Cast\u003cWall\u003e().ToList();\n    foreach(Wall wall in wallsOnLevel)\n    {\n        Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentParam != null \u0026\u0026 !commentParam.IsReadOnly)\n        {\n            commentParam.Set(\"{comment}\");\n        }\n    }\n}"}
{"prompt":"Identify and pick out all walls situated on \u0027{level_name}\u0027 and alter their annotations to \u0027{comment}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nif (level != null)\n{\n    List\u003cWall\u003e wallsOnLevel = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w =\u003e w.LevelId == level.Id).Cast\u003cWall\u003e().ToList();\n    foreach(Wall wall in wallsOnLevel)\n    {\n        Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentParam != null \u0026\u0026 !commentParam.IsReadOnly)\n        {\n            commentParam.Set(\"{comment}\");\n        }\n    }\n}"}
{"prompt":"Tag all walls on \u0027{level_name}\u0027 and revise their remarks to \u0027{comment}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nif (level != null)\n{\n    List\u003cWall\u003e wallsOnLevel = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w =\u003e w.LevelId == level.Id).Cast\u003cWall\u003e().ToList();\n    foreach(Wall wall in wallsOnLevel)\n    {\n        Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentParam != null \u0026\u0026 !commentParam.IsReadOnly)\n        {\n            commentParam.Set(\"{comment}\");\n        }\n    }\n}"}
{"prompt":"Develop a new door type \u0027{door_type_name}\u0027 and specify its fire resistance as \u0027{fire_rating}\u0027.","completion":"string newTypeName = \"{door_type_name}\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = null;\nif (doorTypeToDuplicate != null)\n{\n    newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating}\");\n        }\n    }\n}"}
{"prompt":"Create a new door type named \u0027{door_type_name}\u0027 and set its fire resistance to \u0027{fire_rating}\u0027.","completion":"string newTypeName = \"{door_type_name}\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = null;\nif (doorTypeToDuplicate != null)\n{\n    newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating}\");\n        }\n    }\n}"}
{"prompt":"Formulate a new door type named \u0027{door_type_name}\u0027, with its fire rating set to \u0027{fire_rating}\u0027.","completion":"string newTypeName = \"{door_type_name}\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = null;\nif (doorTypeToDuplicate != null)\n{\n    newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating}\");\n        }\n    }\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado \u0027{door_type_name}\u0027 y establece su resistencia al fuego a \u0027{fire_rating}\u0027.","completion":"string newTypeName = \"{door_type_name}\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = null;\nif (doorTypeToDuplicate != null)\n{\n    newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating}\");\n        }\n    }\n}"}
{"prompt":"Produce a new door type labeled \u0027{door_type_name}\u0027 and establish its fire resistance rating as \u0027{fire_rating}\u0027.","completion":"string newTypeName = \"{door_type_name}\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = null;\nif (doorTypeToDuplicate != null)\n{\n    newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating}\");\n        }\n    }\n}"}
{"prompt":"Fabricate a fresh door type denominated as \u0027{door_type_name}\u0027 and specify its fire rating as \u0027{fire_rating}\u0027.","completion":"string newTypeName = \"{door_type_name}\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = null;\nif (doorTypeToDuplicate != null)\n{\n    newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating}\");\n        }\n    }\n}"}
{"prompt":"Generate a novel door type designated as \u0027{door_type_name}\u0027 and assign it a fire rating of \u0027{fire_rating}\u0027.","completion":"string newTypeName = \"{door_type_name}\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = null;\nif (doorTypeToDuplicate != null)\n{\n    newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating}\");\n        }\n    }\n}"}
{"prompt":"Create a new door type named \u0027{door_type_name}\u0027 and set its fire rating to \u0027{fire_rating}\u0027.","completion":"string newTypeName = \"{door_type_name}\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = null;\nif (doorTypeToDuplicate != null)\n{\n    newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating}\");\n        }\n    }\n}"}
{"prompt":"Duplicate all components from the {source_level} to the {target_level}.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{source_level}\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{target_level}\") as Level;\nif (level1 != null \u0026\u0026 level2 != null)\n{\n    ICollection\u003cElementId\u003e elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(elementsToCopy.Any())\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Replicate all elements from the {source_level} to the {target_level}.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{source_level}\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{target_level}\") as Level;\nif (level1 != null \u0026\u0026 level2 != null)\n{\n    ICollection\u003cElementId\u003e elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(elementsToCopy.Any())\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Copia todos los elementos del {source_level} al {target_level}.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{source_level}\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{target_level}\") as Level;\nif (level1 != null \u0026\u0026 level2 != null)\n{\n    ICollection\u003cElementId\u003e elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(elementsToCopy.Any())\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Transfer all items from the {source_level} to the {target_level}.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{source_level}\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{target_level}\") as Level;\nif (level1 != null \u0026\u0026 level2 != null)\n{\n    ICollection\u003cElementId\u003e elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(elementsToCopy.Any())\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Replicate all items from {source_level} onto {target_level}.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{source_level}\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{target_level}\") as Level;\nif (level1 != null \u0026\u0026 level2 != null)\n{\n    ICollection\u003cElementId\u003e elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(elementsToCopy.Any())\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Transfer all elements from {source_level} to {target_level}.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{source_level}\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{target_level}\") as Level;\nif (level1 != null \u0026\u0026 level2 != null)\n{\n    ICollection\u003cElementId\u003e elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(elementsToCopy.Any())\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Copy all elements from {source_level} to {target_level}.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{source_level}\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{target_level}\") as Level;\nif (level1 != null \u0026\u0026 level2 != null)\n{\n    ICollection\u003cElementId\u003e elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(elementsToCopy.Any())\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Duplicate all components from {source_level} to {target_level}.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{source_level}\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{target_level}\") as Level;\nif (level1 != null \u0026\u0026 level2 != null)\n{\n    ICollection\u003cElementId\u003e elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(elementsToCopy.Any())\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Encuentra todos los muros con más de {height_m} metros de altura.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList\u003cElement\u003e tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Identify walls with a height greater than {height_m} meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList\u003cElement\u003e tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Find walls taller than {height_m} meters in elevation.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList\u003cElement\u003e tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Locate all walls exceeding {height_m} meters in height.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList\u003cElement\u003e tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Identify all walls exceeding {height_m} meters in height.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList\u003cElement\u003e tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Determine walls that surpass {height_m} meters in elevation.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList\u003cElement\u003e tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Locate walls with a height greater than {height_m} meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList\u003cElement\u003e tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Find all walls taller than {height_m} meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList\u003cElement\u003e tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Encuentra todos los muros que no tienen nivel base asignado.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList\u003cElement\u003e unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Find all walls that have no base level assigned.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList\u003cElement\u003e unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Establece la visibilidad de la categoría \u0027Mobiliario\u0027 en falso en la vista activa.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null \u0026\u0026 doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Set the visibility of the \u0027Furniture\u0027 category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null \u0026\u0026 doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Genera un reporte con el área de todas las habitaciones del proyecto.","completion":"List\u003cRoom\u003e rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast\u003cRoom\u003e().ToList();\nList\u003cdouble\u003e roomAreas = new List\u003cdouble\u003e();\nforeach (Room room in rooms)\n{\n    if (room != null \u0026\u0026 room.Area \u003e 0)\n    {\n        roomAreas.Add(UnitUtils.ConvertFromInternalUnits(room.Area, UnitTypeId.SquareMeters));\n    }\n}\n// El orquestador puede ahora usar la lista \u0027roomAreas\u0027 para generar el reporte final."}
{"prompt":"Generate a report with the area of all rooms in the project.","completion":"List\u003cRoom\u003e rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast\u003cRoom\u003e().ToList();\nList\u003cdouble\u003e roomAreas = new List\u003cdouble\u003e();\nforeach (Room room in rooms)\n{\n    if (room != null \u0026\u0026 room.Area \u003e 0)\n    {\n        roomAreas.Add(UnitUtils.ConvertFromInternalUnits(room.Area, UnitTypeId.SquareMeters));\n    }\n}\n// The orchestrator can now use the \u0027roomAreas\u0027 list to generate the final report."}
{"prompt":"Establish a new material, \u0027{material_name}\u0027, with a base color and transparency specified.","completion":"string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Crea un nuevo material llamado \u0027{material_name}\u0027 y asígnale un color base y una transparencia.","completion":"string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Create a new material named \u0027{material_name}\u0027 and assign it a base color and transparency level.","completion":"string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Generate a new material, \u0027{material_name}\u0027, and set its base color and transparency.","completion":"string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Obtén una lista de todas las vistas de planta del proyecto.","completion":"List\u003cViewPlan\u003e planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cViewPlan\u003e().Where(v =\u003e !v.IsTemplate).ToList();"}
{"prompt":"Permite al usuario seleccionar un muro y obtén su ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Crea una nueva tabla de planificación para Pilares Estructurales.","completion":"string scheduleName = \"Tabla de Pilares Estructurales\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Create a new schedule for Structural Columns.","completion":"string scheduleName = \"Structural Column Schedule\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Añade los campos \u0027Nivel\u0027, \u0027Marca\u0027 y \u0027Volumen\u0027 a la tabla de pilares.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast\u003cViewSchedule\u003e().FirstOrDefault(s =\u003e s.Name.Contains(\"Pilares\") || s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f =\u003e f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f =\u003e f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f =\u003e f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Add the \u0027Level\u0027, \u0027Mark\u0027, and \u0027Volume\u0027 fields to the column schedule.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast\u003cViewSchedule\u003e().FirstOrDefault(s =\u003e s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f =\u003e f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f =\u003e f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f =\u003e f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Obtén todas las familias de puertas cargadas en el proyecto.","completion":"List\u003cFamily\u003e doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast\u003cFamily\u003e().Where(f =\u003e f.FamilyCategory != null \u0026\u0026 f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Get all door families loaded in the project.","completion":"List\u003cFamily\u003e doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast\u003cFamily\u003e().Where(f =\u003e f.FamilyCategory != null \u0026\u0026 f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Aplica el estilo visual \u0027Rayos X\u0027 a la vista 3D activa.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null \u0026\u0026 !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe; // Simula el efecto \u0027Rayos X\u0027\n}"}
{"prompt":"Apply the \u0027X-Ray\u0027 visual style to the active 3D view.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null \u0026\u0026 !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe; // Simulates \u0027X-Ray\u0027 effect\n}"}
{"prompt":"Oculta todos los elementos de anotación en la vista activa.","completion":"if (doc.ActiveView != null)\n{\n    List\u003cBuiltInCategory\u003e annotationCategories = new List\u003cBuiltInCategory\u003e\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection\u003cElementId\u003e elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}
{"prompt":"Hide all annotation elements in the active view.","completion":"if (doc.ActiveView != null)\n{\n    List\u003cBuiltInCategory\u003e annotationCategories = new List\u003cBuiltInCategory\u003e\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection\u003cElementId\u003e elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}
{"prompt":"Localiza todos los muros con un parámetro \u0027Marca\u0027 vacío y asigna \u0027{mark_value}\u0027.","completion":"List\u003cWall\u003e walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null \u0026\u0026 !p.IsReadOnly \u0026\u0026 string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"{mark_value}\");\n  }\n}"}
{"prompt":"Find all walls with an empty \u0027Mark\u0027 tag and set \u0027{mark_value}\u0027.","completion":"List\u003cWall\u003e walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null \u0026\u0026 !p.IsReadOnly \u0026\u0026 string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"{mark_value}\");\n  }\n}"}
{"prompt":"Identify all walls with an empty \u0027Mark\u0027 parameter and set \u0027{mark_value}\u0027.","completion":"List\u003cWall\u003e walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null \u0026\u0026 !p.IsReadOnly \u0026\u0026 string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"{mark_value}\");\n  }\n}"}
{"prompt":"Locate all walls with an empty parameter \u0027Mark\u0027 and assign \u0027{mark_value}\u0027.","completion":"List\u003cWall\u003e walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null \u0026\u0026 !p.IsReadOnly \u0026\u0026 string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"{mark_value}\");\n  }\n}"}
{"prompt":"Find all walls with an empty \u0027Mark\u0027 parameter and set it to \u0027{mark_value}\u0027.","completion":"List\u003cWall\u003e walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null \u0026\u0026 !p.IsReadOnly \u0026\u0026 string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"{mark_value}\");\n  }\n}"}
{"prompt":"Locate walls featuring an unassigned \u0027Mark\u0027 parameter and update it to \u0027{mark_value}\u0027.","completion":"List\u003cWall\u003e walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null \u0026\u0026 !p.IsReadOnly \u0026\u0026 string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"{mark_value}\");\n  }\n}"}
{"prompt":"Search for walls lacking a defined \u0027Mark\u0027 parameter and set it to the specified \u0027{mark_value}\u0027.","completion":"List\u003cWall\u003e walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null \u0026\u0026 !p.IsReadOnly \u0026\u0026 string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"{mark_value}\");\n  }\n}"}
{"prompt":"Identify all walls with a void \u0027Mark\u0027 parameter and assign \u0027{mark_value}\u0027 as the new value.","completion":"List\u003cWall\u003e walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null \u0026\u0026 !p.IsReadOnly \u0026\u0026 string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"{mark_value}\");\n  }\n}"}
{"prompt":"Insert a new level named \u0027{new_level_name}\u0027 at mid-height between the {level1_name} and the {level2_name}.","completion":"string newLevelName = \"{new_level_name}\";\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l=\u003el.Name==\"{level1_name}\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l=\u003el.Name==\"{level2_name}\");\nif (lvl1 != null \u0026\u0026 lvl2 != null)\n{\ndouble midElevation = (lvl1.ProjectElevation + lvl2.ProjectElevation) / 2.0;\nLevel newLevel = Level.Create(doc, midElevation);\n    if(newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Crea un nivel intermedio llamado \u0027{new_level_name}\u0027 a mitad de camino entre el {level1_name} y el {level2_name}.","completion":"string newLevelName = \"{new_level_name}\";\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l=\u003el.Name==\"{level1_name}\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l=\u003el.Name==\"{level2_name}\");\nif (lvl1 != null \u0026\u0026 lvl2 != null)\n{\ndouble midElevation = (lvl1.ProjectElevation + lvl2.ProjectElevation) / 2.0;\nLevel newLevel = Level.Create(doc, midElevation);\n    if(newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Create a new level named \u0027{new_level_name}\u0027 halfway between the {level1_name} and the {level2_name}.","completion":"string newLevelName = \"{new_level_name}\";\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l=\u003el.Name==\"{level1_name}\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l=\u003el.Name==\"{level2_name}\");\nif (lvl1 != null \u0026\u0026 lvl2 != null)\n{\ndouble midElevation = (lvl1.ProjectElevation + lvl2.ProjectElevation) / 2.0;\nLevel newLevel = Level.Create(doc, midElevation);\n    if(newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Establish an intermediate level named \u0027{new_level_name}\u0027 equidistant between the {level1_name} and the {level2_name}.","completion":"string newLevelName = \"{new_level_name}\";\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l=\u003el.Name==\"{level1_name}\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l=\u003el.Name==\"{level2_name}\");\nif (lvl1 != null \u0026\u0026 lvl2 != null)\n{\ndouble midElevation = (lvl1.ProjectElevation + lvl2.ProjectElevation) / 2.0;\nLevel newLevel = Level.Create(doc, midElevation);\n    if(newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Create a new material designated as \u0027{material_name}\u0027, and specify a base color and transparency.","completion":"string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Formulate a new material named \u0027{material_name}\u0027 and assign it a base color and transparency level.","completion":"string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Crea un nuevo material llamado \u0027{material_name}\u0027 y asígnale un color base y una transparencia.","completion":"string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Generate a new material named \u0027{material_name}\u0027 and set its base color and transparency properties.","completion":"string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Obtén una lista de todas las vistas de planta del proyecto.","completion":"List\u003cViewPlan\u003e planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cViewPlan\u003e().Where(v =\u003e !v.IsTemplate).ToList();"}
{"prompt":"Permite al usuario seleccionar un muro y obtén su ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Encuentra todas las familias de anotación y cuenta cuántas hay.","completion":"List\u003cFamily\u003e annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast\u003cFamily\u003e().Where(f =\u003e f.FamilyCategory != null \u0026\u0026 f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\nint count = annotationFamilies.Count;"}
{"prompt":"Find all annotation families and count how many there are.","completion":"List\u003cFamily\u003e annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast\u003cFamily\u003e().Where(f =\u003e f.FamilyCategory != null \u0026\u0026 f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\nint count = annotationFamilies.Count;"}
{"prompt":"Encuentra todos los muros que no tienen nivel base asignado.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList\u003cElement\u003e unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Find all walls that have no base level assigned.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList\u003cElement\u003e unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Genera un reporte con el área de todas las habitaciones del proyecto.","completion":"List\u003cRoom\u003e rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast\u003cRoom\u003e().ToList();"}
{"prompt":"Generate a report with the area of all rooms in the project.","completion":"List\u003cRoom\u003e rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast\u003cRoom\u003e().ToList();"}
{"prompt":"Create a wall within {level_name} at coordinates ({x1},{y1},{z1}) to ({x2},{y2},{z2}) with a height of {height_m} meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nif (level1 != null)\n{\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallType != null)\n    {\n        Line wallCurve = Line.CreateBound(new XYZ({x1}, {y1}, {z1}), new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), {y2}, {z2}));\n        double height = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\n        Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n    }\n}"}
{"prompt":"Crea un muro en {level_name} de ({x1},{y1},{z1}) a ({x2},{y2},{z2}) con {height_m}m de alto.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nif (level1 != null)\n{\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallType != null)\n    {\n        Line wallCurve = Line.CreateBound(new XYZ({x1}, {y1}, {z1}), new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), {y2}, {z2}));\n        double height = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\n        Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n    }\n}"}
{"prompt":"Establish a wall on {level_name} at the coordinates ({x1},{y1},{z1}) extending to ({x2},{y2},{z2}) with a height of {height_m} meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nif (level1 != null)\n{\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallType != null)\n    {\n        Line wallCurve = Line.CreateBound(new XYZ({x1}, {y1}, {z1}), new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), {y2}, {z2}));\n        double height = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\n        Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n    }\n}"}
{"prompt":"Delineate a wall on {level_name} at the coordinates ({x1},{y1},{z1}) to ({x2},{y2},{z2}) with a height of {height_m} meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nif (level1 != null)\n{\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallType != null)\n    {\n        Line wallCurve = Line.CreateBound(new XYZ({x1}, {y1}, {z1}), new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), {y2}, {z2}));\n        double height = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\n        Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n    }\n}"}
{"prompt":"Crea un nuevo tipo de muro \u0027{wall_type_name}\u0027 con un grosor de {thickness_cm}cm.","completion":"string newTypeName = \"{wall_type_name}\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits({thickness_cm}*10, UnitTypeId.Millimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Create a new wall type \u0027{wall_type_name}\u0027 with a thickness of {thickness_cm} centimeters.","completion":"string newTypeName = \"{wall_type_name}\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits({thickness_cm}*10, UnitTypeId.Millimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Delineate a new wall type \u0027{wall_type_name}\u0027, characterized by a thickness of {thickness_cm} centimeters.","completion":"string newTypeName = \"{wall_type_name}\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits({thickness_cm}*10, UnitTypeId.Millimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Formulate a new wall type \u0027{wall_type_name}\u0027, specifying a thickness of {thickness_cm} centimeters.","completion":"string newTypeName = \"{wall_type_name}\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits({thickness_cm}*10, UnitTypeId.Millimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Draft a new wall type \u0027{wall_type_name}\u0027, specifying a thickness of {thickness_cm} centimeters.","completion":"string newTypeName = \"{wall_type_name}\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits({thickness_cm}*10, UnitTypeId.Millimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Design a new wall type \u0027{wall_type_name}\u0027, featuring a thickness of {thickness_cm} centimeters.","completion":"string newTypeName = \"{wall_type_name}\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits({thickness_cm}*10, UnitTypeId.Millimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Create a new wall type \u0027{wall_type_name}\u0027 with a thickness of {thickness_cm}cm.","completion":"string newTypeName = \"{wall_type_name}\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits({thickness_cm}*10, UnitTypeId.Millimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Model a new wall type \u0027{wall_type_name}\u0027 with a specified thickness of {thickness_cm} centimeters.","completion":"string newTypeName = \"{wall_type_name}\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits({thickness_cm}*10, UnitTypeId.Millimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Modify the wall type of the selected walls to \u0027{wall_type_name}\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.Name == \"{wall_type_name}\");\nif(targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null)\n        {\n            wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Set the wall type of the selected walls to \u0027{wall_type_name}\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.Name == \"{wall_type_name}\");\nif(targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null)\n        {\n            wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Adjust the type of all selected walls to \u0027{wall_type_name}\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.Name == \"{wall_type_name}\");\nif(targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null)\n        {\n            wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a \u0027{wall_type_name}\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.Name == \"{wall_type_name}\");\nif(targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null)\n        {\n            wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Crea un muro del tipo \u0027{wall_type_name}\u0027 en el \u0027{level_name}\u0027 desde ({x1},{y1}) hasta ({x2},{y2}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == \"{wall_type_name}\") as WallType;\nXYZ startPoint = new XYZ({x1}, {y1}, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nWall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);"}
{"prompt":"Model a wall of type \u0027{wall_type_name}\u0027 on \u0027{level_name}\u0027. Extend from coordinates ({x1},{y1}) to ({x2},{y2}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == \"{wall_type_name}\") as WallType;\nXYZ startPoint = new XYZ({x1}, {y1}, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nWall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);"}
{"prompt":"Create a wall instance of \u0027{wall_type_name}\u0027 on level \u0027{level_name}\u0027. Spanning from points ({x1},{y1}) to ({x2},{y2}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == \"{wall_type_name}\") as WallType;\nXYZ startPoint = new XYZ({x1}, {y1}, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nWall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);"}
{"prompt":"Fabricate a wall of type \u0027{wall_type_name}\u0027 on level \u0027{level_name}\u0027. Define its extent from coordinates ({x1},{y1}) to ({x2},{y2}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == \"{wall_type_name}\") as WallType;\nXYZ startPoint = new XYZ({x1}, {y1}, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nWall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);"}
{"prompt":"Design a \u0027{wall_type_name}\u0027 wall on \u0027{level_name}\u0027, spanning from ({x1},{y1}) to ({x2},{y2}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == \"{wall_type_name}\") as WallType;\nXYZ startPoint = new XYZ({x1}, {y1}, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nWall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);"}
{"prompt":"Draft a \u0027{wall_type_name}\u0027 wall on \u0027{level_name}\u0027, extending from point ({x1},{y1}) to point ({x2},{y2}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == \"{wall_type_name}\") as WallType;\nXYZ startPoint = new XYZ({x1}, {y1}, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nWall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);"}
{"prompt":"Model a \u0027{wall_type_name}\u0027 wall on \u0027{level_name}\u0027 from coordinates ({x1},{y1}) to ({x2},{y2}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == \"{wall_type_name}\") as WallType;\nXYZ startPoint = new XYZ({x1}, {y1}, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nWall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);"}
{"prompt":"Create a \u0027{wall_type_name}\u0027 wall on \u0027{level_name}\u0027 from ({x1},{y1}) to ({x2},{y2}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == \"{wall_type_name}\") as WallType;\nXYZ startPoint = new XYZ({x1}, {y1}, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y2}, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nWall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);"}
{"prompt":"Update the \u0027{parameter_name}\u0027 property of the element \u0027{element_name}\u0027 to \u0027{value}\u0027.","completion":"string levelName = \"{level_name}\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Create a new level named \u0027{level_name}\u0027 at an elevation of {elevation_m} meters.","completion":"string levelName = \"{level_name}\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Model a wall named \u0027{wall_name}\u0027 with a thickness of {thickness_mm} mm and a height of {height_m} meters.","completion":"string levelName = \"{level_name}\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Construct a wall named \u0027{wall_name}\u0027 with a thickness of {thickness_mm} mm and a height of {height_m} meters.","completion":"string levelName = \"{level_name}\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Set the \u0027{parameter_name}\u0027 value for the element \u0027{element_name}\u0027 to \u0027{value}\u0027.","completion":"string levelName = \"{level_name}\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Original instruction: \"Inserta un muro \u0027{wall_name}\u0027 con un grosor de {thickness_mm} mm y una altura de {height_m} metros.","completion":"string levelName = \"{level_name}\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Crea un nuevo nivel llamado \u0027{level_name}\u0027 a una elevación de {elevation_m} metros.","completion":"string levelName = \"{level_name}\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Create a wall named \u0027{wall_name}\u0027 with a thickness of {thickness_mm} mm and a height of {height_m} meters.","completion":"string levelName = \"{level_name}\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Create a beam named \u0027{beam_name}\u0027 with a thickness of {thickness","completion":"string levelName = \"{level_name}\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Draw a beam named \u0027{beam_name}\u0027 with a thickness of {thickness_mm} mm and a length of {length_m} meters.","completion":"string levelName = \"{level_name}\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Original instruction: \"Asigna al elemento \u0027{element_name}\u0027 el parámetro \u0027{parameter_name}\u0027 con el valor \u0027{value}\u0027.","completion":"string levelName = \"{level_name}\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Establish a new floor level \u0027{level_name}\u0027 at an elevation of {elevation_m} meters.","completion":"string levelName = \"{level_name}\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Insert a floor level named \u0027{level_name}\u0027 at an elevation of {elevation_m} meters.","completion":"string levelName = \"{level_name}\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Original instruction: \"Trazar una viga \u0027{beam_name}\u0027 con un grosor de {thickness_mm} mm y una longitud de {length_m} metros.","completion":"string levelName = \"{level_name}\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Model a beam named \u0027{beam_name}\u0027 with a thickness of {thickness_mm} mm and a length of {length_m} meters.","completion":"string levelName = \"{level_name}\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Assign the parameter \u0027{parameter_name}\u0027 to the element \u0027{element_name}\u0027 with the value \u0027{value}\u0027.","completion":"string levelName = \"{level_name}\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Delineate a new level, titled \u0027{level_name}\u0027, at an elevation of {elevation_m} meters.","completion":"string levelName = \"{level_name}\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Create a new level named \u0027{level_name}\u0027 at an elevation of {elevation_m} meters.","completion":"string levelName = \"{level_name}\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Inscribe a new level, labeled \u0027{level_name}\u0027, at an elevation of {elevation_m} meters.","completion":"string levelName = \"{level_name}\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Establish a fresh level, designated as \u0027{level_name}\u0027, at an elevation of {elevation_m} meters.","completion":"string levelName = \"{level_name}\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Place the family \u0027{family_name}\u0027 in the center of room \u0027{room_name}\u0027.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r =\u003e r.Name == \"{room_name}\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name == \"{family_name}\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);"}
{"prompt":"Coloca una instancia de la familia \u0027{family_name}\u0027 en el centro de la habitación \u0027{room_name}\u0027.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r =\u003e r.Name == \"{room_name}\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name == \"{family_name}\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);"}
{"prompt":"Insert the family \u0027{family_name}\u0027 at the central location of room \u0027{room_name}\u0027.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r =\u003e r.Name == \"{room_name}\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name == \"{family_name}\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);"}
{"prompt":"Position an instance of family \u0027{family_name}\u0027 at the center of room \u0027{room_name}\u0027.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r =\u003e r.Name == \"{room_name}\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name == \"{family_name}\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);"}
{"prompt":"Position a \u0027{family_name}\u0027 family member in the center of the \u0027{room_name}\u0027 room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r =\u003e r.Name == \"{room_name}\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name == \"{family_name}\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);"}
{"prompt":"Insert an instance of the \u0027{family_name}\u0027 family at the central point within the \u0027{room_name}\u0027 room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r =\u003e r.Name == \"{room_name}\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name == \"{family_name}\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);"}
{"prompt":"Place an instance of the \u0027{family_name}\u0027 family in the center of the \u0027{room_name}\u0027 room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r =\u003e r.Name == \"{room_name}\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name == \"{family_name}\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);"}
{"prompt":"Place a \u0027{family_name}\u0027 family element at the heart of the \u0027{room_name}\u0027 room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r =\u003e r.Name == \"{room_name}\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s =\u003e s.Name == \"{family_name}\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);"}
{"prompt":"Establish a grid consisting of {num_horizontal} horizontal axes and {num_vertical} vertical axes, spaced {spacing_m} meters apart.","completion":"double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\nint count = {num_horizontal};\nfor (int i = 0; i \u003c count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ(({num_vertical} - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i \u003c {num_vertical}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea una rejilla de {num_horizontal} ejes horizontales y {num_vertical} verticales, espaciados {spacing_m} metros.","completion":"double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\nint count = {num_horizontal};\nfor (int i = 0; i \u003c count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ(({num_vertical} - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i \u003c {num_vertical}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Form a network of {num_horizontal} horizontal lines and {num_vertical} vertical lines, separated by {spacing_m} meters.","completion":"double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\nint count = {num_horizontal};\nfor (int i = 0; i \u003c count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ(({num_vertical} - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i \u003c {num_vertical}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create a lattice with {num_horizontal} horizontal members and {num_vertical} vertical members, spaced {spacing_m} meters apart.","completion":"double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\nint count = {num_horizontal};\nfor (int i = 0; i \u003c count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ(({num_vertical} - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i \u003c {num_vertical}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Set up a grid structure in the model, comprising {num_horizontal} horizontal and {num_vertical} vertical gridlines, each separated by {spacing_m} meters.","completion":"double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\nint count = {num_horizontal};\nfor (int i = 0; i \u003c count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ(({num_vertical} - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i \u003c {num_vertical}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Generate a uniform grid in the model, consisting of {num_horizontal} horizontal and {num_vertical} vertical lines, with a spacing of {spacing_m} meters between each.","completion":"double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\nint count = {num_horizontal};\nfor (int i = 0; i \u003c count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ(({num_vertical} - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i \u003c {num_vertical}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Establish a horizontal grid of {num_horizontal} lines, equally spaced {spacing_m} meters apart, and a vertical grid of {num_vertical} lines, similarly spaced.","completion":"double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\nint count = {num_horizontal};\nfor (int i = 0; i \u003c count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ(({num_vertical} - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i \u003c {num_vertical}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create a grid of {num_horizontal} horizontal and {num_vertical} vertical grids, spaced {spacing_m} meters apart.","completion":"double spacing = UnitUtils.ConvertToInternalUnits({spacing_m}, UnitTypeId.Meters);\nint count = {num_horizontal};\nfor (int i = 0; i \u003c count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ(({num_vertical} - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i \u003c {num_vertical}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create a copy of the wall type \u0027{original_name}\u0027 and rename it to \u0027{new_name}\u0027. ","completion":"string originalName = \"{original_name}\";\nstring newName = \"{new_name}\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Duplicate the wall type and rename it as \u0027{new_name}\u0027, which was previously \u0027{original_name}\u0027. ","completion":"string originalName = \"{original_name}\";\nstring newName = \"{new_name}\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Duplica el tipo de muro \u0027{original_name}\u0027 y nómbralo \u0027{new_name}\u0027.","completion":"string originalName = \"{original_name}\";\nstring newName = \"{new_name}\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Replicate the wall type \u0027{original_name}\u0027 and rename it \u0027{new_name}\u0027. ","completion":"string originalName = \"{original_name}\";\nstring newName = \"{new_name}\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Copy the specified wall type labeled \u0027{original_name}\u0027 and rename it as \u0027{new_name}\u0027.","completion":"string originalName = \"{original_name}\";\nstring newName = \"{new_name}\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Replicate the existing wall type denoted as \u0027{original_name}\u0027 and rename it to \u0027{new_name}\u0027.","completion":"string originalName = \"{original_name}\";\nstring newName = \"{new_name}\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Duplicate the \u0027{original_name}\u0027 wall type and name it \u0027{new_name}\u0027.","completion":"string originalName = \"{original_name}\";\nstring newName = \"{new_name}\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Duplicate the \u0027{original_name}\u0027 wall type and rename it to \u0027{new_name}\u0027 for future identification purposes.","completion":"string originalName = \"{original_name}\";\nstring newName = \"{new_name}\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Establish a wall type named \u0027{wall_type_name}\u0027 with a thickness of {thickness_cm}cm and subsequently create a wall instance using this type.","completion":"string newTypeName = \"{wall_type_name}\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == newTypeName) as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if(newWallType!=null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if(cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits({thickness_cm}/10.0, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nLine wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\nWall.Create(doc, wallCurve, newWallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);"}
{"prompt":"Crea un tipo de muro \u0027{wall_type_name}\u0027 de {thickness_cm}cm y luego crea un muro de ese tipo.","completion":"string newTypeName = \"{wall_type_name}\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == newTypeName) as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if(newWallType!=null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if(cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits({thickness_cm}/10.0, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nLine wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\nWall.Create(doc, wallCurve, newWallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);"}
{"prompt":"Define a wall type named \u0027{wall_type_name}\u0027 with a thickness of {thickness_cm}cm, followed by the creation of a wall instance employing this specific type.","completion":"string newTypeName = \"{wall_type_name}\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == newTypeName) as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if(newWallType!=null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if(cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits({thickness_cm}/10.0, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nLine wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\nWall.Create(doc, wallCurve, newWallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);"}
{"prompt":"Formulate a wall type called \u0027{wall_type_name}\u0027 with a thickness of {thickness_cm}cm and thereafter generate a wall using this defined type.","completion":"string newTypeName = \"{wall_type_name}\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == newTypeName) as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if(newWallType!=null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if(cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits({thickness_cm}/10.0, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nLine wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\nWall.Create(doc, wallCurve, newWallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);"}
{"prompt":"Model a \u0027{wall_type_name}\u0027 wall with a thickness of {thickness_cm} centimeters.","completion":"string newTypeName = \"{wall_type_name}\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == newTypeName) as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if(newWallType!=null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if(cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits({thickness_cm}/10.0, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nLine wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\nWall.Create(doc, wallCurve, newWallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);"}
{"prompt":"Create a {thickness_cm}cm \u0027{wall_type_name}\u0027 type and then create a wall of that type.","completion":"string newTypeName = \"{wall_type_name}\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == newTypeName) as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if(newWallType!=null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if(cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits({thickness_cm}/10.0, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nLine wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\nWall.Create(doc, wallCurve, newWallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);"}
{"prompt":"Produce a \u0027{wall_type_name}\u0027 wall with a thickness of {thickness_cm} centimeters in the model.","completion":"string newTypeName = \"{wall_type_name}\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == newTypeName) as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if(newWallType!=null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if(cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits({thickness_cm}/10.0, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nLine wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\nWall.Create(doc, wallCurve, newWallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);"}
{"prompt":"Draft a \u0027{wall_type_name}\u0027 wall, specifying a thickness of {thickness_cm} centimeters.","completion":"string newTypeName = \"{wall_type_name}\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == newTypeName) as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if(newWallType!=null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if(cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits({thickness_cm}/10.0, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nLine wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\nWall.Create(doc, wallCurve, newWallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);"}
{"prompt":"Selecciona todos los muros del \u0027{level_name}\u0027 y cambia su comentario a \u0027{comment}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nList\u003cWall\u003e wallsOnLevel = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w =\u003e w.LevelId == level.Id).Cast\u003cWall\u003e().ToList();\nforeach(Wall wall in wallsOnLevel)\n{\n    wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(\"{comment}\");\n}"}
{"prompt":"Select all walls within \u0027{level_name}\u0027 and modify their comments to \u0027{comment}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nList\u003cWall\u003e wallsOnLevel = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w =\u003e w.LevelId == level.Id).Cast\u003cWall\u003e().ToList();\nforeach(Wall wall in wallsOnLevel)\n{\n    wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(\"{comment}\");\n}"}
{"prompt":"Change the comments of all walls on \u0027{level_name}\u0027 to \u0027{comment}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nList\u003cWall\u003e wallsOnLevel = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w =\u003e w.LevelId == level.Id).Cast\u003cWall\u003e().ToList();\nforeach(Wall wall in wallsOnLevel)\n{\n    wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(\"{comment}\");\n}"}
{"prompt":"Update the comments of the walls on \u0027{level_name}\u0027 to \u0027{comment}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nList\u003cWall\u003e wallsOnLevel = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w =\u003e w.LevelId == level.Id).Cast\u003cWall\u003e().ToList();\nforeach(Wall wall in wallsOnLevel)\n{\n    wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(\"{comment}\");\n}"}
{"prompt":"Select all walls on \u0027{level_name}\u0027 and change their comment to \u0027{comment}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nList\u003cWall\u003e wallsOnLevel = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w =\u003e w.LevelId == level.Id).Cast\u003cWall\u003e().ToList();\nforeach(Wall wall in wallsOnLevel)\n{\n    wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(\"{comment}\");\n}"}
{"prompt":"Identify and tag all walls associated with \u0027{level_name}\u0027 and update their annotations to \u0027{comment}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nList\u003cWall\u003e wallsOnLevel = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w =\u003e w.LevelId == level.Id).Cast\u003cWall\u003e().ToList();\nforeach(Wall wall in wallsOnLevel)\n{\n    wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(\"{comment}\");\n}"}
{"prompt":"Mark and label all walls on \u0027{level_name}\u0027, then modify their notes to read \u0027{comment}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nList\u003cWall\u003e wallsOnLevel = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w =\u003e w.LevelId == level.Id).Cast\u003cWall\u003e().ToList();\nforeach(Wall wall in wallsOnLevel)\n{\n    wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(\"{comment}\");\n}"}
{"prompt":"Highlight and assign comments to all walls within \u0027{level_name}\u0027, changing the text to \u0027{comment}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nList\u003cWall\u003e wallsOnLevel = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w =\u003e w.LevelId == level.Id).Cast\u003cWall\u003e().ToList();\nforeach(Wall wall in wallsOnLevel)\n{\n    wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(\"{comment}\");\n}"}
{"prompt":"Crea una nueva vista de alzado mirando al sur.","completion":"string viewName = \"Alzado Sur (Nuevo)\";\nViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Elevation);\nElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20, 0), 100);\nView aev = marker.CreateElevation(doc, doc.ActiveView.Id, 0);\naev.Name = viewName;"}
{"prompt":"Create a new elevation view looking south.","completion":"string viewName = \"South Elevation (New)\";\nViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Elevation);\nElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20, 0), 100);\nView aev = marker.CreateElevation(doc, doc.ActiveView.Id, 0);\naev.Name = viewName;"}
{"prompt":"Cambia el tipo de una losa por uno que contenga \u0027{floor_type_name}\u0027.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast\u003cFloorType\u003e().FirstOrDefault(ft =\u003e ft.Name.Contains(\"{floor_type_name}\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Update a slab\u0027s category to include \u0027{floor_type_name}\u0027.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast\u003cFloorType\u003e().FirstOrDefault(ft =\u003e ft.Name.Contains(\"{floor_type_name}\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Modify a slab\u0027s type to one containing \u0027{floor_type_name}\u0027.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast\u003cFloorType\u003e().FirstOrDefault(ft =\u003e ft.Name.Contains(\"{floor_type_name}\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Alter a slab\u0027s material to incorporate \u0027{floor_type_name}\u0027.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast\u003cFloorType\u003e().FirstOrDefault(ft =\u003e ft.Name.Contains(\"{floor_type_name}\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Adjust the floor type to incorporate \u0027{floor_type_name}\u0027.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast\u003cFloorType\u003e().FirstOrDefault(ft =\u003e ft.Name.Contains(\"{floor_type_name}\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Update the floor\u0027s category to \u0027{floor_type_name}\u0027.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast\u003cFloorType\u003e().FirstOrDefault(ft =\u003e ft.Name.Contains(\"{floor_type_name}\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Modify the floor\u0027s type to include \u0027{floor_type_name}\u0027.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast\u003cFloorType\u003e().FirstOrDefault(ft =\u003e ft.Name.Contains(\"{floor_type_name}\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Change the type of a floor to one that contains \u0027{floor_type_name}\u0027.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast\u003cFloorType\u003e().FirstOrDefault(ft =\u003e ft.Name.Contains(\"{floor_type_name}\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Rotate the selected element {angle_degrees} degrees about its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, {angle_degrees} * Math.PI / 180.0);"}
{"prompt":"Turn the chosen element {angle_degrees} degrees on its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, {angle_degrees} * Math.PI / 180.0);"}
{"prompt":"Rotate the selected object {angle_degrees} degrees along its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, {angle_degrees} * Math.PI / 180.0);"}
{"prompt":"Rota un elemento seleccionado {angle_degrees} grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, {angle_degrees} * Math.PI / 180.0);"}
{"prompt":"Adjust the rotation of a designated element to {angle_degrees} degrees on its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, {angle_degrees} * Math.PI / 180.0);"}
{"prompt":"Orientate a chosen element by {angle_degrees} degrees along its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, {angle_degrees} * Math.PI / 180.0);"}
{"prompt":"Turn a selected component {angle_degrees} degrees about its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, {angle_degrees} * Math.PI / 180.0);"}
{"prompt":"Rotate a selected element {angle_degrees} degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, {angle_degrees} * Math.PI / 180.0);"}
{"prompt":"Exporta una lista de todas las advertencias del proyecto a un archivo de texto en el escritorio.","completion":"string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nstring filePath = System.IO.Path.Combine(desktopPath, \"RevitWarnings.txt\");\nIList\u003cFailureMessage\u003e warnings = doc.GetWarnings();\nList\u003cstring\u003e warningDescriptions = warnings.Select(w =\u003e w.GetDescriptionText()).ToList();\nSystem.IO.File.WriteAllLines(filePath, warningDescriptions);"}
{"prompt":"Export a list of all project warnings to a text file on the desktop.","completion":"string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nstring filePath = System.IO.Path.Combine(desktopPath, \"RevitWarnings.txt\");\nIList\u003cFailureMessage\u003e warnings = doc.GetWarnings();\nList\u003cstring\u003e warningDescriptions = warnings.Select(w =\u003e w.GetDescriptionText()).ToList();\nSystem.IO.File.WriteAllLines(filePath, warningDescriptions);"}
{"prompt":"Crea una nueva tabla de planificación para Pilares Estructurales.","completion":"string scheduleName = \"Tabla de Pilares Estructurales\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Create a new schedule for Structural Columns.","completion":"string scheduleName = \"Structural Column Schedule\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Añade los campos \u0027Nivel\u0027, \u0027Marca\u0027 y \u0027Volumen\u0027 a la tabla de pilares.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast\u003cViewSchedule\u003e().FirstOrDefault(s =\u003e s.Name.Contains(\"Pilares\") || s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f =\u003e f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f =\u003e f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f =\u003e f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Add the \u0027Level\u0027, \u0027Mark\u0027, and \u0027Volume\u0027 fields to the column schedule.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast\u003cViewSchedule\u003e().FirstOrDefault(s =\u003e s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f =\u003e f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f =\u003e f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f =\u003e f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Obtén todas las familias de puertas cargadas en el proyecto.","completion":"List\u003cFamily\u003e doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast\u003cFamily\u003e().Where(f =\u003e f.FamilyCategory != null \u0026\u0026 f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Get all door families loaded in the project.","completion":"List\u003cFamily\u003e doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast\u003cFamily\u003e().Where(f =\u003e f.FamilyCategory != null \u0026\u0026 f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Aplica el estilo visual \u0027Rayos X\u0027 a la vista 3D activa.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null \u0026\u0026 !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe;\n}"}
{"prompt":"Apply the \u0027X-Ray\u0027 visual style to the active 3D view.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null \u0026\u0026 !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe;\n}"}
{"prompt":"Oculta todos los elementos de anotación en la vista activa.","completion":"if (doc.ActiveView != null)\n{\n    List\u003cBuiltInCategory\u003e annotationCategories = new List\u003cBuiltInCategory\u003e\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection\u003cElementId\u003e elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}
{"prompt":"Hide all annotation elements in the active view.","completion":"if (doc.ActiveView != null)\n{\n    List\u003cBuiltInCategory\u003e annotationCategories = new List\u003cBuiltInCategory\u003e\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection\u003cElementId\u003e elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}
{"prompt":"Localiza todos los muros con un parámetro \u0027Marca\u0027 vacío y asigna \u0027{mark_value}\u0027.","completion":"List\u003cWall\u003e walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null \u0026\u0026 !p.IsReadOnly \u0026\u0026 string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"{mark_value}\");\n  }\n}"}
{"prompt":"Identify all walls with a vacant \u0027Marker\u0027 property and assign \u0027{mark_value}\u0027.","completion":"List\u003cWall\u003e walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null \u0026\u0026 !p.IsReadOnly \u0026\u0026 string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"{mark_value}\");\n  }\n}"}
{"prompt":"Find all walls having an empty \u0027Marker\u0027 tag and input \u0027{mark_value}\u0027.","completion":"List\u003cWall\u003e walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null \u0026\u0026 !p.IsReadOnly \u0026\u0026 string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"{mark_value}\");\n  }\n}"}
{"prompt":"Locate all walls with an empty \u0027Marker\u0027 parameter and set \u0027{mark_value}\u0027.","completion":"List\u003cWall\u003e walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null \u0026\u0026 !p.IsReadOnly \u0026\u0026 string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"{mark_value}\");\n  }\n}"}
{"prompt":"Identify walls devoid of a \u0027Mark\u0027 parameter value and establish \u0027{mark_value}\u0027 for them.","completion":"List\u003cWall\u003e walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null \u0026\u0026 !p.IsReadOnly \u0026\u0026 string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"{mark_value}\");\n  }\n}"}
{"prompt":"Find all walls with an empty \u0027Mark\u0027 parameter and set it to \u0027{mark_value}\u0027.","completion":"List\u003cWall\u003e walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null \u0026\u0026 !p.IsReadOnly \u0026\u0026 string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"{mark_value}\");\n  }\n}"}
{"prompt":"Search for walls lacking a specified \u0027Mark\u0027 parameter and set it to \u0027{mark_value}\u0027.","completion":"List\u003cWall\u003e walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null \u0026\u0026 !p.IsReadOnly \u0026\u0026 string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"{mark_value}\");\n  }\n}"}
{"prompt":"Locate walls featuring a blank \u0027Mark\u0027 attribute and assign \u0027{mark_value}\u0027 to them.","completion":"List\u003cWall\u003e walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null \u0026\u0026 !p.IsReadOnly \u0026\u0026 string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"{mark_value}\");\n  }\n}"}
{"prompt":"Position a new level called \u0027{new_level_name}\u0027 at the midpoint between the {level1_name} and the {level2_name}.","completion":"string newLevelName = \"{new_level_name}\";\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l=\u003el.Name==\"{level1_name}\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l=\u003el.Name==\"{level2_name}\");\nif (lvl1 != null \u0026\u0026 lvl2 != null)\n{\ndouble midElevation = (lvl1.ProjectElevation + lvl2.ProjectElevation) / 2.0;\nLevel newLevel = Level.Create(doc, midElevation);\n    if(newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Crea un nivel intermedio llamado \u0027{new_level_name}\u0027 a mitad de camino entre el {level1_name} y el {level2_name}.","completion":"string newLevelName = \"{new_level_name}\";\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l=\u003el.Name==\"{level1_name}\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l=\u003el.Name==\"{level2_name}\");\nif (lvl1 != null \u0026\u0026 lvl2 != null)\n{\ndouble midElevation = (lvl1.ProjectElevation + lvl2.ProjectElevation) / 2.0;\nLevel newLevel = Level.Create(doc, midElevation);\n    if(newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Create a level named \u0027{new_level_name}\u0027 midway between the {level1_name} and the {level2_name}.","completion":"string newLevelName = \"{new_level_name}\";\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l=\u003el.Name==\"{level1_name}\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l=\u003el.Name==\"{level2_name}\");\nif (lvl1 != null \u0026\u0026 lvl2 != null)\n{\ndouble midElevation = (lvl1.ProjectElevation + lvl2.ProjectElevation) / 2.0;\nLevel newLevel = Level.Create(doc, midElevation);\n    if(newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Insert an intermediate level labeled \u0027{new_level_name}\u0027 equidistant between the {level1_name} and the {level2_name}.","completion":"string newLevelName = \"{new_level_name}\";\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l=\u003el.Name==\"{level1_name}\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l=\u003el.Name==\"{level2_name}\");\nif (lvl1 != null \u0026\u0026 lvl2 != null)\n{\ndouble midElevation = (lvl1.ProjectElevation + lvl2.ProjectElevation) / 2.0;\nLevel newLevel = Level.Create(doc, midElevation);\n    if(newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Crea un nuevo material llamado \u0027{material_name}\u0027 y asígnale un color base y una transparencia.","completion":"string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Generate a new material called \u0027{material_name}\u0027 and set its base color and transparency.","completion":"string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Create a new material named \u0027{material_name}\u0027 and assign it a base color and transparency level.","completion":"string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Produce a new material named \u0027{material_name}\u0027 and define its base color and transparency.","completion":"string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Obtén una lista de todas las vistas de planta del proyecto.","completion":"List\u003cViewPlan\u003e planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cViewPlan\u003e().Where(v =\u003e !v.IsTemplate).ToList();"}
{"prompt":"Permite al usuario seleccionar un muro y obtén su ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Model a wall on {level_name} running from ({x1},{y1},{z1}) to ({x2},{y2},{z2}) with a height of {height_m} meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(level1 != null \u0026\u0026 wallType != null)\n{\n    XYZ p1 = new XYZ({x1}, {y1}, {z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), {y2}, {z2});\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Draw a wall on {level_name} extending from ({x1},{y1},{z1}) to ({x2},{y2},{z2}) with a height of {height_m} meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(level1 != null \u0026\u0026 wallType != null)\n{\n    XYZ p1 = new XYZ({x1}, {y1}, {z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), {y2}, {z2});\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Create a wall on {level_name} spanning from ({x1},{y1},{z1}) to ({x2},{y2},{z2}) with a height of {height_m} meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(level1 != null \u0026\u0026 wallType != null)\n{\n    XYZ p1 = new XYZ({x1}, {y1}, {z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), {y2}, {z2});\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Crea un muro en {level_name} que vaya de ({x1},{y1},{z1}) a ({x2},{y2},{z2}) con una altura de {height_m} metros.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(level1 != null \u0026\u0026 wallType != null)\n{\n    XYZ p1 = new XYZ({x1}, {y1}, {z1});\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({x2}, UnitTypeId.Meters), {y2}, {z2});\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Obtén el elemento anfitrión de la primera ventana que encuentres.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}
{"prompt":"Une la geometría de una columna y un suelo que se cruzan.","completion":"Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\nif (column != null \u0026\u0026 floor != null)\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}
{"prompt":"Form a new wall type named \u0027{wall_type_name}\u0027, with a thickness of {thickness_cm} centimeters.","completion":"string newTypeName = \"{wall_type_name}\";\nWallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(wallTypeToDuplicate != null)\n{\n    WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n            cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits({thickness_cm}/100.0, UnitTypeId.Meters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Establish a new wall type named \u0027{wall_type_name}\u0027, with a thickness of {thickness_cm} centimeters.","completion":"string newTypeName = \"{wall_type_name}\";\nWallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(wallTypeToDuplicate != null)\n{\n    WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n            cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits({thickness_cm}/100.0, UnitTypeId.Meters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Crea un nuevo tipo de muro de {thickness_cm}cm llamado \u0027{wall_type_name}\u0027.","completion":"string newTypeName = \"{wall_type_name}\";\nWallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(wallTypeToDuplicate != null)\n{\n    WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n            cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits({thickness_cm}/100.0, UnitTypeId.Meters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Create a new wall type called \u0027{wall_type_name}\u0027, having a thickness of {thickness_cm} centimeters.","completion":"string newTypeName = \"{wall_type_name}\";\nWallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(wallTypeToDuplicate != null)\n{\n    WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n            cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits({thickness_cm}/100.0, UnitTypeId.Meters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Exporta el documento a un archivo IFC con la versión IFC4x3.","completion":"string folderPath = \"C:/RevitExports/\";\nstring fileName = doc.Title + \"_IFC4x3.ifc\";\nif(System.IO.Directory.Exists(folderPath))\n{\n    IFCExportOptions options = new IFCExportOptions();\n    options.FileVersion = IFCVersion.IFC4x3;\n    doc.Export(folderPath, fileName, options);\n}"}
{"prompt":"Refresh the Revit connection \u0027{link_name}\u0027.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast\u003cRevitLinkType\u003e().FirstOrDefault(lt =\u003e lt.Name == \"{link_name}\");\nif(linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Reestablish the Revit link \u0027{link_name}\u0027.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast\u003cRevitLinkType\u003e().FirstOrDefault(lt =\u003e lt.Name == \"{link_name}\");\nif(linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Regenerate the Revit bond \u0027{link_name}\u0027.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast\u003cRevitLinkType\u003e().FirstOrDefault(lt =\u003e lt.Name == \"{link_name}\");\nif(linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Recarga el vínculo de Revit \u0027{link_name}\u0027.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast\u003cRevitLinkType\u003e().FirstOrDefault(lt =\u003e lt.Name == \"{link_name}\");\nif(linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Modela una bandeja de cables entre dos puntos.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(trayType != null \u0026\u0026 level != null)\n{\n    XYZ start = new XYZ(0,10,3);\n    XYZ end = new XYZ(15,10,3);\n    CableTray.Create(doc, trayType.Id, start, end, level.Id);\n}"}
{"prompt":"Añada una nueva referencia de nivel llamada \u0027{level_name}\u0027 a una altura de {elevation_m} metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nnewLevel.Name = \"{level_name}\";"}
{"prompt":"Cree una nueva altura de nivel con nombre \u0027{level_name}\u0027 a una elevación de {elevation_m} metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nnewLevel.Name = \"{level_name}\";"}
{"prompt":"Crea una nueva cota de nivel llamada \u0027{level_name}\u0027 a una elevación de {elevation_m} metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nnewLevel.Name = \"{level_name}\";"}
{"prompt":"Establezca una nueva referencia de nivel denominada \u0027{level_name}\u0027 a una altura de {elevation_m} metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits({elevation_m}, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nnewLevel.Name = \"{level_name}\";"}
{"prompt":"Update the material parameter of all walls with \u0027{material_name}\u0027. ","completion":"Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\")) as Material;\nif(material != null)\n{\n    var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null \u0026\u0026 !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}
{"prompt":"Set the material parameter of all walls to \u0027{material_name}\u0027. ","completion":"Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\")) as Material;\nif(material != null)\n{\n    var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null \u0026\u0026 !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}
{"prompt":"Assign \u0027{material_name}\u0027 to the material parameter of all walls.","completion":"Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\")) as Material;\nif(material != null)\n{\n    var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null \u0026\u0026 !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}
{"prompt":"Rellena el parámetro de material de todos los muros con \u0027{material_name}\u0027.","completion":"Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\")) as Material;\nif(material != null)\n{\n    var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null \u0026\u0026 !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}
{"prompt":"Genera un equipo eléctrico en X={x1},Y={y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(level != null \u0026\u0026 panelSymbol != null)\n{\n    if(!panelSymbol.IsActive) panelSymbol.Activate();\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Create an electrical equipment at X={x1}, Y={y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(level != null \u0026\u0026 panelSymbol != null)\n{\n    if(!panelSymbol.IsActive) panelSymbol.Activate();\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Place electrical equipment at coordinates X={x1}, Y={y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(level != null \u0026\u0026 panelSymbol != null)\n{\n    if(!panelSymbol.IsActive) panelSymbol.Activate();\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Establish the location of electrical equipment as X={x1}, Y={y1}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(level != null \u0026\u0026 panelSymbol != null)\n{\n    if(!panelSymbol.IsActive) panelSymbol.Activate();\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits({x1}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y1}, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Crea un codo en T entre dos tuberías que se intersecan.","completion":"// No se proporciona código para esta función específica debido a la necesidad de selección interactiva y manejo de casos complejos.\n// Este escenario involucra la selección de elementos específicos y el uso de métodos de creación que dependen de la geometría existente."}
{"prompt":"Añade una etiqueta a la columna más cercana al origen.","completion":"View activeView = doc.ActiveView;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().OrderBy(c =\u003e {\n    LocationPoint lp = c.Location as LocationPoint;\n    return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n}).FirstOrDefault();\n\nif (activeView != null \u0026\u0026 column != null)\n{\n    LocationPoint loc = column.Location as LocationPoint;\n    if (loc != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n    }\n}"}
{"prompt":"Add a tag to the column closest to the origin.","completion":"View activeView = doc.ActiveView;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().OrderBy(c =\u003e {\n    LocationPoint lp = c.Location as LocationPoint;\n    return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n}).FirstOrDefault();\n\nif (activeView != null \u0026\u0026 column != null)\n{\n    LocationPoint loc = column.Location as LocationPoint;\n    if (loc != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n    }\n}"}
{"prompt":"Model a staircase connecting {level1_name} and {level2_name}.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level1_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level2_name}\");\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    // TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    // Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Crea una escalera entre {level1_name} y {level2_name}.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level1_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level2_name}\");\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    // TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    // Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Develop a stairway linking {level1_name} and {level2_name}.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level1_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level2_name}\");\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    // TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    // Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Design a stair between {level1_name} and {level2_name}.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level1_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level2_name}\");\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    // TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    // Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Delineate a stairway connecting {level1_name} and {level2_name}.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level1_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level2_name}\");\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    // TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    // Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Model a stair between levels {level1_name} and {level2_name}.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level1_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level2_name}\");\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    // TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    // Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Create a stair between {level1_name} and {level2_name}.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level1_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level2_name}\");\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    // TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    // Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Design a staircase linking {level1_name} with {level2_name}.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level1_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level2_name}\");\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    // TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    // Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Añade una etiqueta a la columna más cercana al origen.","completion":"View activeView = doc.ActiveView;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().OrderBy(c =\u003e {\n    LocationPoint lp = c.Location as LocationPoint;\n    return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n}).FirstOrDefault();\n\nif (activeView != null \u0026\u0026 column != null)\n{\n    LocationPoint loc = column.Location as LocationPoint;\n    if (loc != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n    }\n}"}
{"prompt":"Add a tag to the column closest to the origin.","completion":"View activeView = doc.ActiveView;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().OrderBy(c =\u003e {\n    LocationPoint lp = c.Location as LocationPoint;\n    return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n}).FirstOrDefault();\n\nif (activeView != null \u0026\u0026 column != null)\n{\n    LocationPoint loc = column.Location as LocationPoint;\n    if (loc != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n    }\n}"}
{"prompt":"Generate a stair connecting {level1_name} with {level2_name}.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level1_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level2_name}\");\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    // TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    // Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Crea una escalera entre {level1_name} y {level2_name}.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level1_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level2_name}\");\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    // TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    // Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Create a stair between {level1_name} and {level2_name}.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level1_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level2_name}\");\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    // TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    // Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Construct a stairway from {level1_name} to {level2_name}.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level1_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level2_name}\");\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    // TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    // Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Delineate a staircase connecting {level1_name} and {level2_name}.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level1_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level2_name}\");\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    // TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    // Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Fashion a set of steps spanning from {level1_name} to {level2_name}.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level1_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level2_name}\");\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    // TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    // Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Create a stair between {level1_name} and {level2_name}.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level1_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level2_name}\");\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    // TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    // Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Model a stairway linking {level1_name} with {level2_name}.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level1_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level2_name}\");\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    // TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    // Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Importa una topografía desde un archivo CSV.","completion":"// CSV file reading is not directly supported by a single API call.\n// You would typically read the file line by line, parse the XYZ coordinates,\n// and then use the TopographySurface.Create method with a list of points.\n// As a placeholder, here\u0027s how to create a simple topography from a list of points:\nIList\u003cXYZ\u003e points = new List\u003cXYZ\u003e();\npoints.Add(new XYZ(0, 0, 0));\npoints.Add(new XYZ(10, 0, 0));\npoints.Add(new XYZ(0, 10, 0));\npoints.Add(new XYZ(10, 10, 5));\nTopographySurface.Create(doc, points);"}
{"prompt":"Import a topography from a CSV file.","completion":"// CSV file reading is not directly supported by a single API call.\n// You would typically read the file line by line, parse the XYZ coordinates,\n// and then use the TopographySurface.Create method with a list of points.\n// As a placeholder, here\u0027s how to create a simple topography from a list of points:\nIList\u003cXYZ\u003e points = new List\u003cXYZ\u003e();\npoints.Add(new XYZ(0, 0, 0));\npoints.Add(new XYZ(10, 0, 0));\npoints.Add(new XYZ(0, 10, 0));\npoints.Add(new XYZ(10, 10, 5));\nTopographySurface.Create(doc, points);"}
{"prompt":"Pinta la cara interior de los muros exteriores con \u0027{material_name}\u0027.","completion":"Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().FirstOrDefault(m =\u003e m.Name == \"{material_name}\");\nvar exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast\u003cWall\u003e().Where(w =\u003e w.WallType.Function == WallFunction.Exterior).ToList();\n\nif (paintMaterial != null)\n{\n    foreach (Wall w in exteriorWalls)\n    {\n        IList\u003cReference\u003e interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n        if(interiorFaceRefs.Count \u003e 0)\n        {\n            Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n            if (interiorFace != null)\n            {\n                doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n            }\n        }\n    }\n}"}
{"prompt":"Set the interior faces of exterior walls to \u0027{material_name}\u0027.","completion":"Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().FirstOrDefault(m =\u003e m.Name == \"{material_name}\");\nvar exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast\u003cWall\u003e().Where(w =\u003e w.WallType.Function == WallFunction.Exterior).ToList();\n\nif (paintMaterial != null)\n{\n    foreach (Wall w in exteriorWalls)\n    {\n        IList\u003cReference\u003e interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n        if(interiorFaceRefs.Count \u003e 0)\n        {\n            Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n            if (interiorFace != null)\n            {\n                doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n            }\n        }\n    }\n}"}
{"prompt":"Coat the interior faces of exterior walls with \u0027{material_name}\u0027.","completion":"Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().FirstOrDefault(m =\u003e m.Name == \"{material_name}\");\nvar exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast\u003cWall\u003e().Where(w =\u003e w.WallType.Function == WallFunction.Exterior).ToList();\n\nif (paintMaterial != null)\n{\n    foreach (Wall w in exteriorWalls)\n    {\n        IList\u003cReference\u003e interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n        if(interiorFaceRefs.Count \u003e 0)\n        {\n            Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n            if (interiorFace != null)\n            {\n                doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n            }\n        }\n    }\n}"}
{"prompt":"Apply \u0027{material_name}\u0027 to the interior faces of the exterior walls.","completion":"Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().FirstOrDefault(m =\u003e m.Name == \"{material_name}\");\nvar exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast\u003cWall\u003e().Where(w =\u003e w.WallType.Function == WallFunction.Exterior).ToList();\n\nif (paintMaterial != null)\n{\n    foreach (Wall w in exteriorWalls)\n    {\n        IList\u003cReference\u003e interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n        if(interiorFaceRefs.Count \u003e 0)\n        {\n            Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n            if (interiorFace != null)\n            {\n                doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n            }\n        }\n    }\n}"}
{"prompt":"Paint the interior face of exterior walls with \u0027{material_name}\u0027.","completion":"Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().FirstOrDefault(m =\u003e m.Name == \"{material_name}\");\nvar exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast\u003cWall\u003e().Where(w =\u003e w.WallType.Function == WallFunction.Exterior).ToList();\n\nif (paintMaterial != null)\n{\n    foreach (Wall w in exteriorWalls)\n    {\n        IList\u003cReference\u003e interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n        if(interiorFaceRefs.Count \u003e 0)\n        {\n            Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n            if (interiorFace != null)\n            {\n                doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n            }\n        }\n    }\n}"}
{"prompt":"Interior face of exterior walls should be painted with \u0027{material_name}\u0027. Apply accordingly.","completion":"Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().FirstOrDefault(m =\u003e m.Name == \"{material_name}\");\nvar exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast\u003cWall\u003e().Where(w =\u003e w.WallType.Function == WallFunction.Exterior).ToList();\n\nif (paintMaterial != null)\n{\n    foreach (Wall w in exteriorWalls)\n    {\n        IList\u003cReference\u003e interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n        if(interiorFaceRefs.Count \u003e 0)\n        {\n            Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n            if (interiorFace != null)\n            {\n                doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n            }\n        }\n    }\n}"}
{"prompt":"Apply \u0027{material_name}\u0027 to the interior surface of exterior walls.","completion":"Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().FirstOrDefault(m =\u003e m.Name == \"{material_name}\");\nvar exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast\u003cWall\u003e().Where(w =\u003e w.WallType.Function == WallFunction.Exterior).ToList();\n\nif (paintMaterial != null)\n{\n    foreach (Wall w in exteriorWalls)\n    {\n        IList\u003cReference\u003e interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n        if(interiorFaceRefs.Count \u003e 0)\n        {\n            Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n            if (interiorFace != null)\n            {\n                doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n            }\n        }\n    }\n}"}
{"prompt":"Coat the internal aspect of exterior walls using \u0027{material_name}\u0027.","completion":"Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().FirstOrDefault(m =\u003e m.Name == \"{material_name}\");\nvar exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast\u003cWall\u003e().Where(w =\u003e w.WallType.Function == WallFunction.Exterior).ToList();\n\nif (paintMaterial != null)\n{\n    foreach (Wall w in exteriorWalls)\n    {\n        IList\u003cReference\u003e interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n        if(interiorFaceRefs.Count \u003e 0)\n        {\n            Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n            if (interiorFace != null)\n            {\n                doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n            }\n        }\n    }\n}"}
{"prompt":"Find the wall by identifying the \u0027{mark_value}\u0027 in its Mark parameter.","completion":"string markValue = \"{mark_value}\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue);\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().WherePasses(filter).FirstOrDefault() as Wall;"}
{"prompt":"Seek out the wall by examining its Mark parameter for the \u0027{mark_value}\u0027.","completion":"string markValue = \"{mark_value}\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue);\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().WherePasses(filter).FirstOrDefault() as Wall;"}
{"prompt":"Locate a wall by searching for the value \u0027{mark_value}\u0027 within its Mark parameter.","completion":"string markValue = \"{mark_value}\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue);\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().WherePasses(filter).FirstOrDefault() as Wall;"}
{"prompt":"Encuentra un muro buscando el valor \u0027{mark_value}\u0027 en su parámetro de Marca.","completion":"string markValue = \"{mark_value}\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue);\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().WherePasses(filter).FirstOrDefault() as Wall;"}
{"prompt":"Seek a wall by checking its Mark parameter for the defined value \u0027{mark_value}\u0027.","completion":"string markValue = \"{mark_value}\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue);\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().WherePasses(filter).FirstOrDefault() as Wall;"}
{"prompt":"Find a wall by searching for the value \u0027{mark_value}\u0027 in its Mark parameter.","completion":"string markValue = \"{mark_value}\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue);\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().WherePasses(filter).FirstOrDefault() as Wall;"}
{"prompt":"Locate a wall by querying its Mark parameter for the specified value \u0027{mark_value}\u0027.","completion":"string markValue = \"{mark_value}\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue);\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().WherePasses(filter).FirstOrDefault() as Wall;"}
{"prompt":"Identify a wall by examining its Mark parameter for the designated value \u0027{mark_value}\u0027.","completion":"string markValue = \"{mark_value}\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue);\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().WherePasses(filter).FirstOrDefault() as Wall;"}
{"prompt":"Place an elbow fitting of {angle_degrees} degrees between two piping segments.","completion":"List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().Where(p =\u003e p.ConnectorManager != null \u0026\u0026 p.ConnectorManager.UnusedConnectors.Size \u003e 0).Take(2).ToList();\n\nif (pipes.Count \u003e= 2)\n{\n    Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast\u003cConnector\u003e().FirstOrDefault();\n    Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast\u003cConnector\u003e().FirstOrDefault();\n    \n    if (c1 != null \u0026\u0026 c2 != null)\n    {\n        doc.Create.NewElbowFitting(c1, c2);\n    }\n}"}
{"prompt":"Añade un codo de {angle_degrees} grados entre dos tuberías.","completion":"List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().Where(p =\u003e p.ConnectorManager != null \u0026\u0026 p.ConnectorManager.UnusedConnectors.Size \u003e 0).Take(2).ToList();\n\nif (pipes.Count \u003e= 2)\n{\n    Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast\u003cConnector\u003e().FirstOrDefault();\n    Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast\u003cConnector\u003e().FirstOrDefault();\n    \n    if (c1 != null \u0026\u0026 c2 != null)\n    {\n        doc.Create.NewElbowFitting(c1, c2);\n    }\n}"}
{"prompt":"Add an elbow joint of {angle_degrees} degrees between two pipes.","completion":"List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().Where(p =\u003e p.ConnectorManager != null \u0026\u0026 p.ConnectorManager.UnusedConnectors.Size \u003e 0).Take(2).ToList();\n\nif (pipes.Count \u003e= 2)\n{\n    Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast\u003cConnector\u003e().FirstOrDefault();\n    Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast\u003cConnector\u003e().FirstOrDefault();\n    \n    if (c1 != null \u0026\u0026 c2 != null)\n    {\n        doc.Create.NewElbowFitting(c1, c2);\n    }\n}"}
{"prompt":"Insert an elbow bend of {angle_degrees} degrees between two pipes.","completion":"List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().Where(p =\u003e p.ConnectorManager != null \u0026\u0026 p.ConnectorManager.UnusedConnectors.Size \u003e 0).Take(2).ToList();\n\nif (pipes.Count \u003e= 2)\n{\n    Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast\u003cConnector\u003e().FirstOrDefault();\n    Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast\u003cConnector\u003e().FirstOrDefault();\n    \n    if (c1 != null \u0026\u0026 c2 != null)\n    {\n        doc.Create.NewElbowFitting(c1, c2);\n    }\n}"}
{"prompt":"Insert an elbow joint with a specified angle of {angle_degrees} degrees between two pipes.","completion":"List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().Where(p =\u003e p.ConnectorManager != null \u0026\u0026 p.ConnectorManager.UnusedConnectors.Size \u003e 0).Take(2).ToList();\n\nif (pipes.Count \u003e= 2)\n{\n    Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast\u003cConnector\u003e().FirstOrDefault();\n    Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast\u003cConnector\u003e().FirstOrDefault();\n    \n    if (c1 != null \u0026\u0026 c2 != null)\n    {\n        doc.Create.NewElbowFitting(c1, c2);\n    }\n}"}
{"prompt":"Create a bend connection between two pipes with a defined angle of {angle_degrees} degrees.","completion":"List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().Where(p =\u003e p.ConnectorManager != null \u0026\u0026 p.ConnectorManager.UnusedConnectors.Size \u003e 0).Take(2).ToList();\n\nif (pipes.Count \u003e= 2)\n{\n    Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast\u003cConnector\u003e().FirstOrDefault();\n    Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast\u003cConnector\u003e().FirstOrDefault();\n    \n    if (c1 != null \u0026\u0026 c2 != null)\n    {\n        doc.Create.NewElbowFitting(c1, c2);\n    }\n}"}
{"prompt":"Add a {angle_degrees}-degree elbow between two pipes.","completion":"List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().Where(p =\u003e p.ConnectorManager != null \u0026\u0026 p.ConnectorManager.UnusedConnectors.Size \u003e 0).Take(2).ToList();\n\nif (pipes.Count \u003e= 2)\n{\n    Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast\u003cConnector\u003e().FirstOrDefault();\n    Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast\u003cConnector\u003e().FirstOrDefault();\n    \n    if (c1 != null \u0026\u0026 c2 != null)\n    {\n        doc.Create.NewElbowFitting(c1, c2);\n    }\n}"}
{"prompt":"Establish a pipe elbow with a specified angular degree of {angle_degrees} between two pipes.","completion":"List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().Where(p =\u003e p.ConnectorManager != null \u0026\u0026 p.ConnectorManager.UnusedConnectors.Size \u003e 0).Take(2).ToList();\n\nif (pipes.Count \u003e= 2)\n{\n    Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast\u003cConnector\u003e().FirstOrDefault();\n    Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast\u003cConnector\u003e().FirstOrDefault();\n    \n    if (c1 != null \u0026\u0026 c2 != null)\n    {\n        doc.Create.NewElbowFitting(c1, c2);\n    }\n}"}
{"prompt":"Crea un filtro de vista para ocultar muros demolidos.","completion":"Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast\u003cPhase\u003e().FirstOrDefault(p =\u003e p.Name.Contains(\"Demolished\") || p.Name.Contains(\"Demolición\"));\nView activeView = doc.ActiveView;\n\nif (demolishedPhase != null \u0026\u0026 activeView != null)\n{\n    ElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\n    FilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\n    ElementFilter filter = new ElementParameterFilter(rule);\n    ICollection\u003cElementId\u003e categories = new List\u003cElementId\u003e{{ new ElementId(BuiltInCategory.OST_Walls) }};\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Filtro Demolición\", categories, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}
{"prompt":"Acquire the MEP space linked to room \u0027{room_name}\u0027.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast\u003cRoom\u003e().FirstOrDefault(r =\u003e r.Name == \"{room_name}\");\nList\u003cSpace\u003e spaces = new List\u003cSpace\u003e();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast\u003cSpace\u003e().Where(s =\u003e s.Room != null \u0026\u0026 s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Gather the MEP area pertaining to room \u0027{room_name}\u0027.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast\u003cRoom\u003e().FirstOrDefault(r =\u003e r.Name == \"{room_name}\");\nList\u003cSpace\u003e spaces = new List\u003cSpace\u003e();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast\u003cSpace\u003e().Where(s =\u003e s.Room != null \u0026\u0026 s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Retrieve the associated MEP space for room \u0027{room_name}\u0027.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast\u003cRoom\u003e().FirstOrDefault(r =\u003e r.Name == \"{room_name}\");\nList\u003cSpace\u003e spaces = new List\u003cSpace\u003e();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast\u003cSpace\u003e().Where(s =\u003e s.Room != null \u0026\u0026 s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Obtén el espacio MEP asociado a la habitación \u0027{room_name}\u0027.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast\u003cRoom\u003e().FirstOrDefault(r =\u003e r.Name == \"{room_name}\");\nList\u003cSpace\u003e spaces = new List\u003cSpace\u003e();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast\u003cSpace\u003e().Where(s =\u003e s.Room != null \u0026\u0026 s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Find the MEP space that is associated with the room \u0027{room_name}\u0027.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast\u003cRoom\u003e().FirstOrDefault(r =\u003e r.Name == \"{room_name}\");\nList\u003cSpace\u003e spaces = new List\u003cSpace\u003e();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast\u003cSpace\u003e().Where(s =\u003e s.Room != null \u0026\u0026 s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Obtain the MEP area that corresponds to the room \u0027{room_name}\u0027.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast\u003cRoom\u003e().FirstOrDefault(r =\u003e r.Name == \"{room_name}\");\nList\u003cSpace\u003e spaces = new List\u003cSpace\u003e();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast\u003cSpace\u003e().Where(s =\u003e s.Room != null \u0026\u0026 s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Retrieve the Mechanical, Electrical, and Plumbing (MEP) space linked to the room \u0027{room_name}\u0027.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast\u003cRoom\u003e().FirstOrDefault(r =\u003e r.Name == \"{room_name}\");\nList\u003cSpace\u003e spaces = new List\u003cSpace\u003e();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast\u003cSpace\u003e().Where(s =\u003e s.Room != null \u0026\u0026 s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Get the MEP space associated with the room \u0027{room_name}\u0027.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast\u003cRoom\u003e().FirstOrDefault(r =\u003e r.Name == \"{room_name}\");\nList\u003cSpace\u003e spaces = new List\u003cSpace\u003e();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast\u003cSpace\u003e().Where(s =\u003e s.Room != null \u0026\u0026 s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Crea un SketchPlane en el {level_name}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n\nif (level != null)\n{\n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, new XYZ(0, 0, level.Elevation));\n    SketchPlane skp = SketchPlane.Create(doc, plane);\n}"}
{"prompt":"Establish a SketchPlane on the {level_name}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n\nif (level != null)\n{\n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, new XYZ(0, 0, level.Elevation));\n    SketchPlane skp = SketchPlane.Create(doc, plane);\n}"}
{"prompt":"Create a new SketchPlane for the {level_name}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n\nif (level != null)\n{\n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, new XYZ(0, 0, level.Elevation));\n    SketchPlane skp = SketchPlane.Create(doc, plane);\n}"}
{"prompt":"Set up a SketchPlane in the {level_name}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n\nif (level != null)\n{\n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, new XYZ(0, 0, level.Elevation));\n    SketchPlane skp = SketchPlane.Create(doc, plane);\n}"}
{"prompt":"Establish a SketchPlane on {level_name}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n\nif (level != null)\n{\n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, new XYZ(0, 0, level.Elevation));\n    SketchPlane skp = SketchPlane.Create(doc, plane);\n}"}
{"prompt":"Create a SketchPlane on {level_name}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n\nif (level != null)\n{\n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, new XYZ(0, 0, level.Elevation));\n    SketchPlane skp = SketchPlane.Create(doc, plane);\n}"}
{"prompt":"Create a new SketchPlane at {level_name}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n\nif (level != null)\n{\n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, new XYZ(0, 0, level.Elevation));\n    SketchPlane skp = SketchPlane.Create(doc, plane);\n}"}
{"prompt":"Generate a SketchPlane for {level_name}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n\nif (level != null)\n{\n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, new XYZ(0, 0, level.Elevation));\n    SketchPlane skp = SketchPlane.Create(doc, plane);\n}"}
{"prompt":"Assign all walls to the workset \u0027{workset_name}\u0027.","completion":"if (doc.IsWorkshared)\n{\n    Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w =\u003e w.Name == \"{workset_name}\");\n    if (ws != null)\n    {\n        FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n        foreach (Element e in collector)\n        {\n            Parameter p = e.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n            if (p != null \u0026\u0026 !p.IsReadOnly)\n            {\n                p.Set(ws.Id.IntegerValue);\n            }\n        }\n    }\n}"}
{"prompt":"Reallocate all walls to the \u0027{workset_name}\u0027 workset.","completion":"if (doc.IsWorkshared)\n{\n    Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w =\u003e w.Name == \"{workset_name}\");\n    if (ws != null)\n    {\n        FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n        foreach (Element e in collector)\n        {\n            Parameter p = e.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n            if (p != null \u0026\u0026 !p.IsReadOnly)\n            {\n                p.Set(ws.Id.IntegerValue);\n            }\n        }\n    }\n}"}
{"prompt":"Place all walls within the \u0027{workset_name}\u0027 workset.","completion":"if (doc.IsWorkshared)\n{\n    Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w =\u003e w.Name == \"{workset_name}\");\n    if (ws != null)\n    {\n        FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n        foreach (Element e in collector)\n        {\n            Parameter p = e.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n            if (p != null \u0026\u0026 !p.IsReadOnly)\n            {\n                p.Set(ws.Id.IntegerValue);\n            }\n        }\n    }\n}"}
{"prompt":"Asigna todos los muros al workset \u0027{workset_name}\u0027.","completion":"if (doc.IsWorkshared)\n{\n    Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w =\u003e w.Name == \"{workset_name}\");\n    if (ws != null)\n    {\n        FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n        foreach (Element e in collector)\n        {\n            Parameter p = e.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n            if (p != null \u0026\u0026 !p.IsReadOnly)\n            {\n                p.Set(ws.Id.IntegerValue);\n            }\n        }\n    }\n}"}
{"prompt":"Relocate all walls to the specified workset \u0027{workset_name}\u0027.","completion":"if (doc.IsWorkshared)\n{\n    Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w =\u003e w.Name == \"{workset_name}\");\n    if (ws != null)\n    {\n        FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n        foreach (Element e in collector)\n        {\n            Parameter p = e.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n            if (p != null \u0026\u0026 !p.IsReadOnly)\n            {\n                p.Set(ws.Id.IntegerValue);\n            }\n        }\n    }\n}"}
{"prompt":"Position all walls on the \u0027{workset_name}\u0027 workset.","completion":"if (doc.IsWorkshared)\n{\n    Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w =\u003e w.Name == \"{workset_name}\");\n    if (ws != null)\n    {\n        FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n        foreach (Element e in collector)\n        {\n            Parameter p = e.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n            if (p != null \u0026\u0026 !p.IsReadOnly)\n            {\n                p.Set(ws.Id.IntegerValue);\n            }\n        }\n    }\n}"}
{"prompt":"Move all walls to the designated workset \u0027{workset_name}\u0027.","completion":"if (doc.IsWorkshared)\n{\n    Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w =\u003e w.Name == \"{workset_name}\");\n    if (ws != null)\n    {\n        FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n        foreach (Element e in collector)\n        {\n            Parameter p = e.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n            if (p != null \u0026\u0026 !p.IsReadOnly)\n            {\n                p.Set(ws.Id.IntegerValue);\n            }\n        }\n    }\n}"}
{"prompt":"Transfer all walls to the \u0027{workset_name}\u0027 workset.","completion":"if (doc.IsWorkshared)\n{\n    Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w =\u003e w.Name == \"{workset_name}\");\n    if (ws != null)\n    {\n        FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n        foreach (Element e in collector)\n        {\n            Parameter p = e.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n            if (p != null \u0026\u0026 !p.IsReadOnly)\n            {\n                p.Set(ws.Id.IntegerValue);\n            }\n        }\n    }\n}"}
{"prompt":"Transfer all walls to the designated \u0027{workset_name}\u0027 workset.","completion":"if (doc.IsWorkshared)\n{\n    Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w =\u003e w.Name == \"{workset_name}\");\n    if (ws != null)\n    {\n        FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n        foreach (Element e in collector)\n        {\n            Parameter p = e.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n            if (p != null \u0026\u0026 !p.IsReadOnly)\n            {\n                p.Set(ws.Id.IntegerValue);\n            }\n        }\n    }\n}"}
{"prompt":"Designate all walls to the specified \u0027{workset_name}\u0027 workset.","completion":"if (doc.IsWorkshared)\n{\n    Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w =\u003e w.Name == \"{workset_name}\");\n    if (ws != null)\n    {\n        FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n        foreach (Element e in collector)\n        {\n            Parameter p = e.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n            if (p != null \u0026\u0026 !p.IsReadOnly)\n            {\n                p.Set(ws.Id.IntegerValue);\n            }\n        }\n    }\n}"}
{"prompt":"Label all walls for inclusion in the \u0027{workset_name}\u0027 workset.","completion":"if (doc.IsWorkshared)\n{\n    Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w =\u003e w.Name == \"{workset_name}\");\n    if (ws != null)\n    {\n        FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n        foreach (Element e in collector)\n        {\n            Parameter p = e.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n            if (p != null \u0026\u0026 !p.IsReadOnly)\n            {\n                p.Set(ws.Id.IntegerValue);\n            }\n        }\n    }\n}"}
{"prompt":"Assign all walls to the \u0027{workset_name}\u0027 workset.","completion":"if (doc.IsWorkshared)\n{\n    Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w =\u003e w.Name == \"{workset_name}\");\n    if (ws != null)\n    {\n        FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n        foreach (Element e in collector)\n        {\n            Parameter p = e.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n            if (p != null \u0026\u0026 !p.IsReadOnly)\n            {\n                p.Set(ws.Id.IntegerValue);\n            }\n        }\n    }\n}"}
{"prompt":"Encuentra todas las colisiones entre tuberías y vigas.","completion":"ICollection\u003cElementId\u003e pipeIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WhereElementIsNotElementType().ToElementIds();\nICollection\u003cElementId\u003e beamIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().ToElementIds();\n\nif(pipeIds.Count \u003e 0 \u0026\u0026 beamIds.Count \u003e 0)\n{\n    List\u003cElementFilter\u003e beamFilters = new List\u003cElementFilter\u003e();\n    foreach(ElementId beamId in beamIds)\n    {\n        Element beam = doc.GetElement(beamId);\n        if(beam != null) beamFilters.Add(new ElementIntersectsElementFilter(beam));\n    }\n    LogicalOrFilter clashFilter = new LogicalOrFilter(beamFilters);\n    ICollection\u003cElementId\u003e clashingPipeIds = new FilteredElementCollector(doc, pipeIds).WherePasses(clashFilter).ToElementIds();\n}"}
{"prompt":"Find all clashes between pipes and beams.","completion":"ICollection\u003cElementId\u003e pipeIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WhereElementIsNotElementType().ToElementIds();\nICollection\u003cElementId\u003e beamIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().ToElementIds();\n\nif(pipeIds.Count \u003e 0 \u0026\u0026 beamIds.Count \u003e 0)\n{\n    List\u003cElementFilter\u003e beamFilters = new List\u003cElementFilter\u003e();\n    foreach(ElementId beamId in beamIds)\n    {\n        Element beam = doc.GetElement(beamId);\n        if(beam != null) beamFilters.Add(new ElementIntersectsElementFilter(beam));\n    }\n    LogicalOrFilter clashFilter = new LogicalOrFilter(beamFilters);\n    ICollection\u003cElementId\u003e clashingPipeIds = new FilteredElementCollector(doc, pipeIds).WherePasses(clashFilter).ToElementIds();\n}"}
{"prompt":"Cambia un panel de vidrio de un muro cortina por un panel sólido.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast\u003cWall\u003e().FirstOrDefault(w =\u003e w.WallType.Kind == WallKind.Curtain);\nFamilySymbol solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Family.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_CurtainWallPanels \u0026\u0026 (fs.Name.Contains(\"Solid\") || fs.Name.Contains(\"Sólido\")));\n\nif (curtainWall != null \u0026\u0026 solidPanelType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    if (grid != null)\n    {\n        ElementId panelIdToChange = grid.GetPanelIds().FirstOrDefault();\n        if (panelIdToChange != ElementId.InvalidElementId)\n        {\n            Panel panelToChange = doc.GetElement(panelIdToChange) as Panel;\n            if (panelToChange != null) panelToChange.ChangeTypeId(solidPanelType.Id);\n        }\n    }\n}"}
{"prompt":"Change a glass panel in a curtain wall to a solid panel.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast\u003cWall\u003e().FirstOrDefault(w =\u003e w.WallType.Kind == WallKind.Curtain);\nFamilySymbol solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Family.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_CurtainWallPanels \u0026\u0026 fs.Name.Contains(\"Solid\"));\n\nif (curtainWall != null \u0026\u0026 solidPanelType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    if (grid != null)\n    {\n        ElementId panelIdToChange = grid.GetPanelIds().FirstOrDefault();\n        if (panelIdToChange != ElementId.InvalidElementId)\n        {\n            Panel panelToChange = doc.GetElement(panelIdToChange) as Panel;\n            if (panelToChange != null) panelToChange.ChangeTypeId(solidPanelType.Id);\n        }\n    }\n}"}
{"prompt":"Trace the structural column with tag \u0027{mark_value}\u0027. Retrieve its location.","completion":"string markValue = \"{mark_value}\";\nElement framingElement = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_StructuralFraming)\n    .WhereElementIsNotElementType()\n    .FirstOrDefault(e =\u003e {\n        Parameter p = e.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        return p != null \u0026\u0026 p.AsString() == markValue;\n    });"}
{"prompt":"Locate the structural column element with tag \u0027{mark_value}\u0027.","completion":"string markValue = \"{mark_value}\";\nElement framingElement = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_StructuralFraming)\n    .WhereElementIsNotElementType()\n    .FirstOrDefault(e =\u003e {\n        Parameter p = e.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        return p != null \u0026\u0026 p.AsString() == markValue;\n    });"}
{"prompt":"Find the structural post with tag \u0027{mark_value}\u0027. Identify it in the model.","completion":"string markValue = \"{mark_value}\";\nElement framingElement = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_StructuralFraming)\n    .WhereElementIsNotElementType()\n    .FirstOrDefault(e =\u003e {\n        Parameter p = e.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        return p != null \u0026\u0026 p.AsString() == markValue;\n    });"}
{"prompt":"Encuentra el elemento de pórtico estructural con la marca \u0027{mark_value}\u0027.","completion":"string markValue = \"{mark_value}\";\nElement framingElement = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_StructuralFraming)\n    .WhereElementIsNotElementType()\n    .FirstOrDefault(e =\u003e {\n        Parameter p = e.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        return p != null \u0026\u0026 p.AsString() == markValue;\n    });"}
{"prompt":"Identify the structural framing element denoted by \u0027{mark_value}\u0027.","completion":"string markValue = \"{mark_value}\";\nElement framingElement = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_StructuralFraming)\n    .WhereElementIsNotElementType()\n    .FirstOrDefault(e =\u003e {\n        Parameter p = e.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        return p != null \u0026\u0026 p.AsString() == markValue;\n    });"}
{"prompt":"Locate the structural framing element identified by \u0027{mark_value}\u0027.","completion":"string markValue = \"{mark_value}\";\nElement framingElement = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_StructuralFraming)\n    .WhereElementIsNotElementType()\n    .FirstOrDefault(e =\u003e {\n        Parameter p = e.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        return p != null \u0026\u0026 p.AsString() == markValue;\n    });"}
{"prompt":"Determine the position of the structural framing element tagged \u0027{mark_value}\u0027.","completion":"string markValue = \"{mark_value}\";\nElement framingElement = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_StructuralFraming)\n    .WhereElementIsNotElementType()\n    .FirstOrDefault(e =\u003e {\n        Parameter p = e.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        return p != null \u0026\u0026 p.AsString() == markValue;\n    });"}
{"prompt":"Find the structural framing element with the mark \u0027{mark_value}\u0027.","completion":"string markValue = \"{mark_value}\";\nElement framingElement = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_StructuralFraming)\n    .WhereElementIsNotElementType()\n    .FirstOrDefault(e =\u003e {\n        Parameter p = e.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        return p != null \u0026\u0026 p.AsString() == markValue;\n    });"}
{"prompt":"Reconcile the local model with the central one, appending the comment \u0027{comment}\u0027.","completion":"if (doc.IsWorkshared)\n{\n    TransactWithCentralOptions tco = new TransactWithCentralOptions();\n    SynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\n    swcOpts.Comment = \"{comment}\";\n    swcOpts.SaveLocalAfter = true;\n    doc.SynchronizeWithCentral(tco, swcOpts);\n}"}
{"prompt":"Sync the local model with the central one, including the comment \u0027{comment}\u0027.","completion":"if (doc.IsWorkshared)\n{\n    TransactWithCentralOptions tco = new TransactWithCentralOptions();\n    SynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\n    swcOpts.Comment = \"{comment}\";\n    swcOpts.SaveLocalAfter = true;\n    doc.SynchronizeWithCentral(tco, swcOpts);\n}"}
{"prompt":"Align the local model with the central one, adding the comment \u0027{comment}\u0027.","completion":"if (doc.IsWorkshared)\n{\n    TransactWithCentralOptions tco = new TransactWithCentralOptions();\n    SynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\n    swcOpts.Comment = \"{comment}\";\n    swcOpts.SaveLocalAfter = true;\n    doc.SynchronizeWithCentral(tco, swcOpts);\n}"}
{"prompt":"Sincroniza el modelo local con el central, añadiendo el comentario \u0027{comment}\u0027.","completion":"if (doc.IsWorkshared)\n{\n    TransactWithCentralOptions tco = new TransactWithCentralOptions();\n    SynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\n    swcOpts.Comment = \"{comment}\";\n    swcOpts.SaveLocalAfter = true;\n    doc.SynchronizeWithCentral(tco, swcOpts);\n}"}
{"prompt":"Reconcile the local design with the central model, annotating it with \u0027{comment}\u0027. ","completion":"if (doc.IsWorkshared)\n{\n    TransactWithCentralOptions tco = new TransactWithCentralOptions();\n    SynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\n    swcOpts.Comment = \"{comment}\";\n    swcOpts.SaveLocalAfter = true;\n    doc.SynchronizeWithCentral(tco, swcOpts);\n}"}
{"prompt":"Align the local project with the central model, appending the remark \u0027{comment}\u0027.","completion":"if (doc.IsWorkshared)\n{\n    TransactWithCentralOptions tco = new TransactWithCentralOptions();\n    SynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\n    swcOpts.Comment = \"{comment}\";\n    swcOpts.SaveLocalAfter = true;\n    doc.SynchronizeWithCentral(tco, swcOpts);\n}"}
{"prompt":"Consolidate the local model with the central model, including the comment \u0027{comment}\u0027.","completion":"if (doc.IsWorkshared)\n{\n    TransactWithCentralOptions tco = new TransactWithCentralOptions();\n    SynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\n    swcOpts.Comment = \"{comment}\";\n    swcOpts.SaveLocalAfter = true;\n    doc.SynchronizeWithCentral(tco, swcOpts);\n}"}
{"prompt":"Synchronize the local model with the central model, adding the comment \u0027{comment}\u0027.","completion":"if (doc.IsWorkshared)\n{\n    TransactWithCentralOptions tco = new TransactWithCentralOptions();\n    SynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\n    swcOpts.Comment = \"{comment}\";\n    swcOpts.SaveLocalAfter = true;\n    doc.SynchronizeWithCentral(tco, swcOpts);\n}"}
{"prompt":"Agrupa una tabla de planificación de habitaciones por Nivel.","completion":"using (Transaction t = new Transaction(doc, \"Group Schedule\"))\n{\n    t.Start();\n    ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast\u003cViewSchedule\u003e().FirstOrDefault(vs =\u003e vs.Definition.CategoryId.IntegerValue == (int)BuiltInCategory.OST_Rooms);\n\n    if (schedule != null)\n    {\n        ScheduleDefinition def = schedule.Definition;\n        if (def != null)\n        {\n            SchedulableField schedulableField = def.GetSchedulableFields().FirstOrDefault(f =\u003e f.ParameterId.IntegerValue == (int)BuiltInParameter.ROOM_LEVEL_ID);\n            if (schedulableField != null)\n            {\n                ScheduleField field = def.AddField(schedulableField);\n                ScheduleSortGroupField sortGroupField = new ScheduleSortGroupField(field.FieldId);\n                sortGroupField.ShowHeader = true;\n                def.AddSortGroupField(sortGroupField);\n                def.IsItemized = false;\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Group a room schedule by Level.","completion":"using (Transaction t = new Transaction(doc, \"Group Schedule\"))\n{\n    t.Start();\n    ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast\u003cViewSchedule\u003e().FirstOrDefault(vs =\u003e vs.Definition.CategoryId.IntegerValue == (int)BuiltInCategory.OST_Rooms);\n\n    if (schedule != null)\n    {\n        ScheduleDefinition def = schedule.Definition;\n        if (def != null)\n        {\n            SchedulableField schedulableField = def.GetSchedulableFields().FirstOrDefault(f =\u003e f.ParameterId.IntegerValue == (int)BuiltInParameter.ROOM_LEVEL_ID);\n            if (schedulableField != null)\n            {\n                ScheduleField field = def.AddField(schedulableField);\n                ScheduleSortGroupField sortGroupField = new ScheduleSortGroupField(field.FieldId);\n                sortGroupField.ShowHeader = true;\n                def.AddSortGroupField(sortGroupField);\n                def.IsItemized = false;\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Move all selected elements to the designated workset \u0027{workset_name}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection\u003cElementId\u003e selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws =\u003e ws.Name == \"{workset_name}\");\n        if(workset == null) workset = Workset.Create(doc, \"{workset_name}\");\n\n        if (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0 \u0026\u0026 workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null \u0026\u0026 !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Place all selected elements within the workset \u0027{workset_name}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection\u003cElementId\u003e selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws =\u003e ws.Name == \"{workset_name}\");\n        if(workset == null) workset = Workset.Create(doc, \"{workset_name}\");\n\n        if (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0 \u0026\u0026 workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null \u0026\u0026 !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca todos los elementos seleccionados en el workset \u0027{workset_name}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection\u003cElementId\u003e selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws =\u003e ws.Name == \"{workset_name}\");\n        if(workset == null) workset = Workset.Create(doc, \"{workset_name}\");\n\n        if (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0 \u0026\u0026 workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null \u0026\u0026 !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Transfer all selected elements to the workset \u0027{workset_name}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection\u003cElementId\u003e selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws =\u003e ws.Name == \"{workset_name}\");\n        if(workset == null) workset = Workset.Create(doc, \"{workset_name}\");\n\n        if (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0 \u0026\u0026 workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null \u0026\u0026 !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Transfer all selected components to the designated workset, \u0027{workset_name}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection\u003cElementId\u003e selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws =\u003e ws.Name == \"{workset_name}\");\n        if(workset == null) workset = Workset.Create(doc, \"{workset_name}\");\n\n        if (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0 \u0026\u0026 workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null \u0026\u0026 !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Position all selected components on the designated workset, \u0027{workset_name}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection\u003cElementId\u003e selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws =\u003e ws.Name == \"{workset_name}\");\n        if(workset == null) workset = Workset.Create(doc, \"{workset_name}\");\n\n        if (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0 \u0026\u0026 workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null \u0026\u0026 !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Arrange the chosen elements onto the specified workset, \u0027{workset_name}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection\u003cElementId\u003e selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws =\u003e ws.Name == \"{workset_name}\");\n        if(workset == null) workset = Workset.Create(doc, \"{workset_name}\");\n\n        if (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0 \u0026\u0026 workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null \u0026\u0026 !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Place all selected elements on the \u0027{workset_name}\u0027 workset.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection\u003cElementId\u003e selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws =\u003e ws.Name == \"{workset_name}\");\n        if(workset == null) workset = Workset.Create(doc, \"{workset_name}\");\n\n        if (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0 \u0026\u0026 workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null \u0026\u0026 !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra el host de una luminaria basada en cara.","completion":"FamilyInstance lightFixture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().FirstOrDefault(fi =\u003e fi.HostFace != null);\n\nElement host = null;\nif (lightFixture != null)\n{\n    Reference hostFaceRef = lightFixture.HostFace;\n    if (hostFaceRef != null)\n    {\n        host = doc.GetElement(hostFaceRef.ElementId);\n    }\n}"}
{"prompt":"Find the host of a face-based light fixture.","completion":"FamilyInstance lightFixture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().FirstOrDefault(fi =\u003e fi.HostFace != null);\n\nElement host = null;\nif (lightFixture != null)\n{\n    Reference hostFaceRef = lightFixture.HostFace;\n    if (hostFaceRef != null)\n    {\n        host = doc.GetElement(hostFaceRef.ElementId);\n    }\n}"}
{"prompt":"Replicate all walls from the {source_level} to the {target_level}.","completion":"using (Transaction t = new Transaction(doc, \"Copy Walls\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{source_level}\");\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{target_level}\");\n\n    if (level1 != null \u0026\u0026 level2 != null)\n    {\n        ICollection\u003cElementId\u003e wallsToCopy = new FilteredElementCollector(doc, level1.Id).OfClass(typeof(Wall)).Select(e =\u003e e.Id).ToList();\n        double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n        XYZ translation = new XYZ(0, 0, elevationDiff);\n        if (wallsToCopy.Count \u003e 0)\n        {\n            ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Duplicate all walls from level {source_level} to level {target_level}.","completion":"using (Transaction t = new Transaction(doc, \"Copy Walls\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{source_level}\");\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{target_level}\");\n\n    if (level1 != null \u0026\u0026 level2 != null)\n    {\n        ICollection\u003cElementId\u003e wallsToCopy = new FilteredElementCollector(doc, level1.Id).OfClass(typeof(Wall)).Select(e =\u003e e.Id).ToList();\n        double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n        XYZ translation = new XYZ(0, 0, elevationDiff);\n        if (wallsToCopy.Count \u003e 0)\n        {\n            ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Transfer all wall instances from level {source_level} to level {target_level}.","completion":"using (Transaction t = new Transaction(doc, \"Copy Walls\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{source_level}\");\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{target_level}\");\n\n    if (level1 != null \u0026\u0026 level2 != null)\n    {\n        ICollection\u003cElementId\u003e wallsToCopy = new FilteredElementCollector(doc, level1.Id).OfClass(typeof(Wall)).Select(e =\u003e e.Id).ToList();\n        double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n        XYZ translation = new XYZ(0, 0, elevationDiff);\n        if (wallsToCopy.Count \u003e 0)\n        {\n            ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Copia todos los muros del {source_level} al {target_level}.","completion":"using (Transaction t = new Transaction(doc, \"Copy Walls\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{source_level}\");\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{target_level}\");\n\n    if (level1 != null \u0026\u0026 level2 != null)\n    {\n        ICollection\u003cElementId\u003e wallsToCopy = new FilteredElementCollector(doc, level1.Id).OfClass(typeof(Wall)).Select(e =\u003e e.Id).ToList();\n        double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n        XYZ translation = new XYZ(0, 0, elevationDiff);\n        if (wallsToCopy.Count \u003e 0)\n        {\n            ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Duplicate walls from {source_level} to {target_level}.","completion":"using (Transaction t = new Transaction(doc, \"Copy Walls\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{source_level}\");\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{target_level}\");\n\n    if (level1 != null \u0026\u0026 level2 != null)\n    {\n        ICollection\u003cElementId\u003e wallsToCopy = new FilteredElementCollector(doc, level1.Id).OfClass(typeof(Wall)).Select(e =\u003e e.Id).ToList();\n        double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n        XYZ translation = new XYZ(0, 0, elevationDiff);\n        if (wallsToCopy.Count \u003e 0)\n        {\n            ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Copy all walls from {source_level} to {target_level}.","completion":"using (Transaction t = new Transaction(doc, \"Copy Walls\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{source_level}\");\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{target_level}\");\n\n    if (level1 != null \u0026\u0026 level2 != null)\n    {\n        ICollection\u003cElementId\u003e wallsToCopy = new FilteredElementCollector(doc, level1.Id).OfClass(typeof(Wall)).Select(e =\u003e e.Id).ToList();\n        double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n        XYZ translation = new XYZ(0, 0, elevationDiff);\n        if (wallsToCopy.Count \u003e 0)\n        {\n            ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Transfer all walls from {source_level} to {target_level}.","completion":"using (Transaction t = new Transaction(doc, \"Copy Walls\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{source_level}\");\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{target_level}\");\n\n    if (level1 != null \u0026\u0026 level2 != null)\n    {\n        ICollection\u003cElementId\u003e wallsToCopy = new FilteredElementCollector(doc, level1.Id).OfClass(typeof(Wall)).Select(e =\u003e e.Id).ToList();\n        double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n        XYZ translation = new XYZ(0, 0, elevationDiff);\n        if (wallsToCopy.Count \u003e 0)\n        {\n            ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Replicate all walls from {source_level} to {target_level}.","completion":"using (Transaction t = new Transaction(doc, \"Copy Walls\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{source_level}\");\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{target_level}\");\n\n    if (level1 != null \u0026\u0026 level2 != null)\n    {\n        ICollection\u003cElementId\u003e wallsToCopy = new FilteredElementCollector(doc, level1.Id).OfClass(typeof(Wall)).Select(e =\u003e e.Id).ToList();\n        double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n        XYZ translation = new XYZ(0, 0, elevationDiff);\n        if (wallsToCopy.Count \u003e 0)\n        {\n            ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Dado un muro, obtén los materiales y sus volúmenes.","completion":"UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un muro\");\n\nDictionary\u003cstring, double\u003e materialVolumes = new Dictionary\u003cstring, double\u003e();\nif (pickedRef != null)\n{\n    Wall wall = doc.GetElement(pickedRef) as Wall;\n    if (wall != null)\n    {\n        Parameter areaParam = wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED);\n        if (areaParam != null \u0026\u0026 areaParam.HasValue)\n        {\n            double wallArea = areaParam.AsDouble();\n            WallType wallType = wall.WallType;\n            if (wallType != null)\n            {\n                CompoundStructure cs = wallType.GetCompoundStructure();\n                if (cs != null)\n                {\n                    foreach(CompoundStructureLayer layer in cs.GetLayers())\n                    {\n                        Material material = doc.GetElement(layer.MaterialId) as Material;\n                        if(material != null)\n                        {\n                            double volume = layer.Width * wallArea; \n                            materialVolumes[material.Name] = volume;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Given a wall, get its materials and their volumes.","completion":"UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select a wall\");\n\nDictionary\u003cstring, double\u003e materialVolumes = new Dictionary\u003cstring, double\u003e();\nif (pickedRef != null)\n{\n    Wall wall = doc.GetElement(pickedRef) as Wall;\n    if (wall != null)\n    {\n        Parameter areaParam = wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED);\n        if (areaParam != null \u0026\u0026 areaParam.HasValue)\n        {\n            double wallArea = areaParam.AsDouble();\n            WallType wallType = wall.WallType;\n            if (wallType != null)\n            {\n                CompoundStructure cs = wallType.GetCompoundStructure();\n                if (cs != null)\n                {\n                    foreach(CompoundStructureLayer layer in cs.GetLayers())\n                    {\n                        Material material = doc.GetElement(layer.MaterialId) as Material;\n                        if(material != null)\n                        {\n                            double volume = layer.Width * wallArea;\n                            materialVolumes[material.Name] = volume;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Crea una nueva hoja {sheet_size} y coloca la vista \u0027{view_name}\u0027 en ella.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet\"))\n{\n    t.Start();\n    string sheetNumber = \"A-101\";\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(tb =\u003e tb.Name.Contains(\"{sheet_size}\"));\n    View viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.Name == \"{view_name}\");\n\n    if (titleBlock != null \u0026\u0026 viewToPlace != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            newSheet.Name = \"Planta Arquitectónica - {view_name}\";\n            newSheet.SheetNumber = sheetNumber;\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Produce a new sheet with dimensions {sheet_size} and arrange the view \u0027{view_name}\u0027 on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet\"))\n{\n    t.Start();\n    string sheetNumber = \"A-101\";\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(tb =\u003e tb.Name.Contains(\"{sheet_size}\"));\n    View viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.Name == \"{view_name}\");\n\n    if (titleBlock != null \u0026\u0026 viewToPlace != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            newSheet.Name = \"Planta Arquitectónica - {view_name}\";\n            newSheet.SheetNumber = sheetNumber;\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new sheet of size {sheet_size} and place the view \u0027{view_name}\u0027 on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet\"))\n{\n    t.Start();\n    string sheetNumber = \"A-101\";\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(tb =\u003e tb.Name.Contains(\"{sheet_size}\"));\n    View viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.Name == \"{view_name}\");\n\n    if (titleBlock != null \u0026\u0026 viewToPlace != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            newSheet.Name = \"Planta Arquitectónica - {view_name}\";\n            newSheet.SheetNumber = sheetNumber;\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a new sheet in dimensions {sheet_size} and position the view \u0027{view_name}\u0027 on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet\"))\n{\n    t.Start();\n    string sheetNumber = \"A-101\";\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(tb =\u003e tb.Name.Contains(\"{sheet_size}\"));\n    View viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.Name == \"{view_name}\");\n\n    if (titleBlock != null \u0026\u0026 viewToPlace != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            newSheet.Name = \"Planta Arquitectónica - {view_name}\";\n            newSheet.SheetNumber = sheetNumber;\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Produce a fresh {sheet_size} sheet and affix the \u0027{view_name}\u0027 view to it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet\"))\n{\n    t.Start();\n    string sheetNumber = \"A-101\";\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(tb =\u003e tb.Name.Contains(\"{sheet_size}\"));\n    View viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.Name == \"{view_name}\");\n\n    if (titleBlock != null \u0026\u0026 viewToPlace != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            newSheet.Name = \"Architectural Plan - {view_name}\";\n            newSheet.SheetNumber = sheetNumber;\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new {sheet_size} sheet and place the \u0027{view_name}\u0027 view on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet\"))\n{\n    t.Start();\n    string sheetNumber = \"A-101\";\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(tb =\u003e tb.Name.Contains(\"{sheet_size}\"));\n    View viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.Name == \"{view_name}\");\n\n    if (titleBlock != null \u0026\u0026 viewToPlace != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            newSheet.Name = \"Architectural Plan - {view_name}\";\n            newSheet.SheetNumber = sheetNumber;\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Establish a new {sheet_size} sheet and arrange the \u0027{view_name}\u0027 view upon it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet\"))\n{\n    t.Start();\n    string sheetNumber = \"A-101\";\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(tb =\u003e tb.Name.Contains(\"{sheet_size}\"));\n    View viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.Name == \"{view_name}\");\n\n    if (titleBlock != null \u0026\u0026 viewToPlace != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            newSheet.Name = \"Architectural Plan - {view_name}\";\n            newSheet.SheetNumber = sheetNumber;\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a new {sheet_size} sheet and position the \u0027{view_name}\u0027 view thereon.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet\"))\n{\n    t.Start();\n    string sheetNumber = \"A-101\";\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(tb =\u003e tb.Name.Contains(\"{sheet_size}\"));\n    View viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.Name == \"{view_name}\");\n\n    if (titleBlock != null \u0026\u0026 viewToPlace != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            newSheet.Name = \"Architectural Plan - {view_name}\";\n            newSheet.SheetNumber = sheetNumber;\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Oculta todas las categorías de anotación en la vista activa.","completion":"Categories categories = doc.Settings.Categories;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    foreach(Category cat in categories)\n    {\n        if(cat.CategoryType == CategoryType.Annotation \u0026\u0026 cat.get_AllowsVisibilityControl(activeView))\n        {\n             activeView.SetCategoryHidden(cat.Id, true);\n        }\n    }\n}"}
{"prompt":"Hide all annotation categories in the active view.","completion":"Categories categories = doc.Settings.Categories;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    foreach(Category cat in categories)\n    {\n        if(cat.CategoryType == CategoryType.Annotation \u0026\u0026 cat.get_AllowsVisibilityControl(activeView))\n        {\n             activeView.SetCategoryHidden(cat.Id, true);\n        }\n    }\n}"}
{"prompt":"Encuentra todas las vistas que no tienen una plantilla de vista asignada.","completion":"List\u003cView\u003e viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().Where(v =\u003e v.CanBePrinted \u0026\u0026 !v.IsTemplate \u0026\u0026 v.ViewTemplateId == ElementId.InvalidElementId).ToList();"}
{"prompt":"Find all views that do not have an assigned view template.","completion":"List\u003cView\u003e viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().Where(v =\u003e v.CanBePrinted \u0026\u0026 !v.IsTemplate \u0026\u0026 v.ViewTemplateId == ElementId.InvalidElementId).ToList();"}
{"prompt":"Modify the \u0027Mark\u0027 parameter of the selected elements to \u0027{mark_value}\u0027.","completion":"UIDocument localUidoc = uidoc;\nICollection\u003cElementId\u003e selectedIds = localUidoc.Selection.GetElementIds();\n\nif (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        if (markParam != null \u0026\u0026 !markParam.IsReadOnly) markParam.Set(\"{mark_value}\");\n    }\n}"}
{"prompt":"Set the \u0027Mark\u0027 parameter of all selected elements to \u0027{mark_value}\u0027.","completion":"UIDocument localUidoc = uidoc;\nICollection\u003cElementId\u003e selectedIds = localUidoc.Selection.GetElementIds();\n\nif (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        if (markParam != null \u0026\u0026 !markParam.IsReadOnly) markParam.Set(\"{mark_value}\");\n    }\n}"}
{"prompt":"Establece el parámetro \u0027Marca\u0027 de todos los elementos seleccionados a \u0027{mark_value}\u0027.","completion":"UIDocument localUidoc = uidoc;\nICollection\u003cElementId\u003e selectedIds = localUidoc.Selection.GetElementIds();\n\nif (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        if (markParam != null \u0026\u0026 !markParam.IsReadOnly) markParam.Set(\"{mark_value}\");\n    }\n}"}
{"prompt":"Adjust the \u0027Mark\u0027 parameter for the selected items to \u0027{mark_value}\u0027.","completion":"UIDocument localUidoc = uidoc;\nICollection\u003cElementId\u003e selectedIds = localUidoc.Selection.GetElementIds();\n\nif (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        if (markParam != null \u0026\u0026 !markParam.IsReadOnly) markParam.Set(\"{mark_value}\");\n    }\n}"}
{"prompt":"Set the \u0027Mark\u0027 parameter of all selected elements to \u0027{mark_value}\u0027.","completion":"UIDocument localUidoc = uidoc;\nICollection\u003cElementId\u003e selectedIds = localUidoc.Selection.GetElementIds();\n\nif (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        if (markParam != null \u0026\u0026 !markParam.IsReadOnly) markParam.Set(\"{mark_value}\");\n    }\n}"}
{"prompt":"Assign the \u0027Mark\u0027 property to the selected items as \u0027{mark_value}\u0027.","completion":"UIDocument localUidoc = uidoc;\nICollection\u003cElementId\u003e selectedIds = localUidoc.Selection.GetElementIds();\n\nif (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        if (markParam != null \u0026\u0026 !markParam.IsReadOnly) markParam.Set(\"{mark_value}\");\n    }\n}"}
{"prompt":"Adjust the \u0027Mark\u0027 attribute for all selected components to \u0027{mark_value}\u0027.","completion":"UIDocument localUidoc = uidoc;\nICollection\u003cElementId\u003e selectedIds = localUidoc.Selection.GetElementIds();\n\nif (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        if (markParam != null \u0026\u0026 !markParam.IsReadOnly) markParam.Set(\"{mark_value}\");\n    }\n}"}
{"prompt":"Establish the \u0027Mark\u0027 parameter for selected elements as \u0027{mark_value}\u0027.","completion":"UIDocument localUidoc = uidoc;\nICollection\u003cElementId\u003e selectedIds = localUidoc.Selection.GetElementIds();\n\nif (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        if (markParam != null \u0026\u0026 !markParam.IsReadOnly) markParam.Set(\"{mark_value}\");\n    }\n}"}
{"prompt":"Importa topografía georreferenciada desde un archivo LandXML.","completion":"IList\u003cXYZ\u003e points = new List\u003cXYZ\u003e();\npoints.Add(new XYZ(0, 0, 0));\npoints.Add(new XYZ(50, 0, 5));\npoints.Add(new XYZ(0, 50, 10));\nTopographySurface.Create(doc, points);"}
{"prompt":"Import a georeferenced survey from a LandXML file.","completion":"IList\u003cXYZ\u003e points = new List\u003cXYZ\u003e();\npoints.Add(new XYZ(0, 0, 0));\npoints.Add(new XYZ(50, 0, 5));\npoints.Add(new XYZ(0, 50, 10));\nTopographySurface.Create(doc, points);"}
{"prompt":"Añade un plano de referencia horizontal llamado \u0027{plane_name}\u0027.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    XYZ bubbleEnd = new XYZ(0, 10, 0);\n    XYZ freeEnd = new XYZ(10, 10, 0);\n    XYZ cutVec = XYZ.BasisZ;\n    ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n    if (rp != null)\n    {\n        rp.Name = \"{plane_name}\";\n    }\n}"}
{"prompt":"Insert a horizontal reference plane named \u0027{plane_name}\u0027. ","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    XYZ bubbleEnd = new XYZ(0, 10, 0);\n    XYZ freeEnd = new XYZ(10, 10, 0);\n    XYZ cutVec = XYZ.BasisZ;\n    ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n    if (rp != null)\n    {\n        rp.Name = \"{plane_name}\";\n    }\n}"}
{"prompt":"Create a horizontal reference plane labeled \u0027{plane_name}\u0027. ","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    XYZ bubbleEnd = new XYZ(0, 10, 0);\n    XYZ freeEnd = new XYZ(10, 10, 0);\n    XYZ cutVec = XYZ.BasisZ;\n    ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n    if (rp != null)\n    {\n        rp.Name = \"{plane_name}\";\n    }\n}"}
{"prompt":"Establish a \u0027{plane_name}\u0027 named horizontal reference plane. ","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    XYZ bubbleEnd = new XYZ(0, 10, 0);\n    XYZ freeEnd = new XYZ(10, 10, 0);\n    XYZ cutVec = XYZ.BasisZ;\n    ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n    if (rp != null)\n    {\n        rp.Name = \"{plane_name}\";\n    }\n}"}
{"prompt":"Add a horizontal reference plane named \u0027{plane_name}\u0027.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    XYZ bubbleEnd = new XYZ(0, 10, 0);\n    XYZ freeEnd = new XYZ(10, 10, 0);\n    XYZ cutVec = XYZ.BasisZ;\n    ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n    if (rp != null)\n    {\n        rp.Name = \"{plane_name}\";\n    }\n}"}
{"prompt":"Insert a named horizontal reference plane, labelled \u0027{plane_name}\u0027.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    XYZ bubbleEnd = new XYZ(0, 10, 0);\n    XYZ freeEnd = new XYZ(10, 10, 0);\n    XYZ cutVec = XYZ.BasisZ;\n    ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n    if (rp != null)\n    {\n        rp.Name = \"{plane_name}\";\n    }\n}"}
{"prompt":"Create and name the reference plane horizontally, as \u0027{plane_name}\u0027.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    XYZ bubbleEnd = new XYZ(0, 10, 0);\n    XYZ freeEnd = new XYZ(10, 10, 0);\n    XYZ cutVec = XYZ.BasisZ;\n    ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n    if (rp != null)\n    {\n        rp.Name = \"{plane_name}\";\n    }\n}"}
{"prompt":"Establish a horizontal reference plane, named \u0027{plane_name}\u0027.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    XYZ bubbleEnd = new XYZ(0, 10, 0);\n    XYZ freeEnd = new XYZ(10, 10, 0);\n    XYZ cutVec = XYZ.BasisZ;\n    ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n    if (rp != null)\n    {\n        rp.Name = \"{plane_name}\";\n    }\n}"}
{"prompt":"Etiqueta todas las habitaciones en la vista activa.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    List\u003cRoom\u003e rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast\u003cRoom\u003e().ToList();\n    foreach(Room room in rooms)\n    {\n        LocationPoint loc = room.Location as LocationPoint;\n        if(loc != null)\n        {\n            doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(loc.Point.X, loc.Point.Y), activeView.Id);\n        }\n    }\n}"}
{"prompt":"Tag all rooms with their area.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    List\u003cRoom\u003e rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast\u003cRoom\u003e().ToList();\n    foreach(Room room in rooms)\n    {\n        LocationPoint loc = room.Location as LocationPoint;\n        if(loc != null)\n        {\n            doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(loc.Point.X, loc.Point.Y), activeView.Id);\n        }\n    }\n}"}
{"prompt":"Oculta todas las categorías de anotación en la vista activa.","completion":"using (Transaction t = new Transaction(doc, \"Hide Annotation Categories\"))\n{\n    t.Start();\n    Categories categories = doc.Settings.Categories;\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        foreach(Category cat in categories)\n        {\n            if(cat.CategoryType == CategoryType.Annotation \u0026\u0026 cat.get_AllowsVisibilityControl(activeView))\n            {\n                 activeView.SetCategoryHidden(cat.Id, true);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Hide all annotation categories in the active view.","completion":"using (Transaction t = new Transaction(doc, \"Hide Annotation Categories\"))\n{\n    t.Start();\n    Categories categories = doc.Settings.Categories;\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        foreach(Category cat in categories)\n        {\n            if(cat.CategoryType == CategoryType.Annotation \u0026\u0026 cat.get_AllowsVisibilityControl(activeView))\n            {\n                 activeView.SetCategoryHidden(cat.Id, true);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra todas las vistas que no tienen una plantilla de vista asignada.","completion":"List\u003cView\u003e viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().Where(v =\u003e v.CanBePrinted \u0026\u0026 !v.IsTemplate \u0026\u0026 v.ViewTemplateId.Equals(ElementId.InvalidElementId)).ToList();"}
{"prompt":"Find all views that do not have an assigned view template.","completion":"List\u003cView\u003e viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().Where(v =\u003e v.CanBePrinted \u0026\u0026 !v.IsTemplate \u0026\u0026 v.ViewTemplateId.Equals(ElementId.InvalidElementId)).ToList();"}
{"prompt":"Set the \u0027Mark\u0027 parameter of all selected walls to \u0027{mark_value}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection\u003cElementId\u003e selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null \u0026\u0026 !markParam.IsReadOnly) \n                {\n                    markParam.Set(\"{mark_value}\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Adjust the \u0027Mark\u0027 parameter of the selected walls to \u0027{mark_value}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection\u003cElementId\u003e selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null \u0026\u0026 !markParam.IsReadOnly) \n                {\n                    markParam.Set(\"{mark_value}\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Establece el parámetro \u0027Marca\u0027 de todos los muros seleccionados a \u0027{mark_value}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection\u003cElementId\u003e selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null \u0026\u0026 !markParam.IsReadOnly) \n                {\n                    markParam.Set(\"{mark_value}\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Modify the \u0027Mark\u0027 parameter of the chosen walls to \u0027{mark_value}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection\u003cElementId\u003e selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null \u0026\u0026 !markParam.IsReadOnly) \n                {\n                    markParam.Set(\"{mark_value}\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Set the \u0027Mark\u0027 parameter of all selected walls to \u0027{mark_value}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection\u003cElementId\u003e selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null \u0026\u0026 !markParam.IsReadOnly) \n                {\n                    markParam.Set(\"{mark_value}\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Adjust the \u0027Mark\u0027 attribute of the selected walls to \u0027{mark_value}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection\u003cElementId\u003e selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null \u0026\u0026 !markParam.IsReadOnly) \n                {\n                    markParam.Set(\"{mark_value}\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Assign \u0027{mark_value}\u0027 to the \u0027Mark\u0027 property for all selected walls.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection\u003cElementId\u003e selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null \u0026\u0026 !markParam.IsReadOnly) \n                {\n                    markParam.Set(\"{mark_value}\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Modify the \u0027Mark\u0027 parameter of the chosen walls to match \u0027{mark_value}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection\u003cElementId\u003e selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null \u0026\u0026 selectedIds.Count \u003e 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null \u0026\u0026 !markParam.IsReadOnly) \n                {\n                    markParam.Set(\"{mark_value}\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Importa topografía georreferenciada desde un archivo LandXML.","completion":"// The Revit API in the provided context does not support direct LandXML import.\n// This functionality typically requires additional add-ins like the Site Designer, which are not available here.\n// As a placeholder, this code will show how to create a simple topography surface from a list of points.\nusing(Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    IList\u003cXYZ\u003e points = new List\u003cXYZ\u003e();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(50, 0, 5));\n    points.Add(new XYZ(0, 50, 10));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Import a georeferenced survey from a LandXML file.","completion":"// The Revit API in the provided context does not support direct LandXML import.\n// This functionality typically requires additional add-ins like the Site Designer, which are not available here.\n// As a placeholder, this code will show how to create a simple topography surface from a list of points.\nusing(Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    IList\u003cXYZ\u003e points = new List\u003cXYZ\u003e();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(50, 0, 5));\n    points.Add(new XYZ(0, 50, 10));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Añade un plano de referencia horizontal llamado \u0027{plane_name}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"{plane_name}\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new horizontal reference plane labeled \u0027{plane_name}\u0027. ","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"{plane_name}\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Insert a horizontal reference plane named \u0027{plane_name}\u0027. ","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"{plane_name}\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Establish a horizontal reference plan named \u0027{plane_name}\u0027. ","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"{plane_name}\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Insert a named reference plane in a horizontal position, called \u0027{plane_name}\u0027. ","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"{plane_name}\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Add a horizontal reference plane named \u0027{plane_name}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"{plane_name}\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a horizontal reference plane labeled \u0027{plane_name}\u0027. ","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"{plane_name}\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Establish a horizontal reference plane with the name \u0027{plane_name}\u0027. ","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"{plane_name}\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Etiqueta todas las habitaciones con su área.","completion":"using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List\u003cRoom\u003e rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast\u003cRoom\u003e().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(locPoint.Point.X, locPoint.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Tag all rooms with their area.","completion":"using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List\u003cRoom\u003e rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast\u003cRoom\u003e().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(locPoint.Point.X, locPoint.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca una etiqueta de material en una cara de muro.","completion":"using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Face, \"Selecciona una cara para etiquetar\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Selecciona la ubicación de la etiqueta\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null \u0026\u0026 point != null \u0026\u0026 activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}
{"prompt":"Place a material tag on a wall face.","completion":"using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Face, \"Select a face to tag\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Select the tag location\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null \u0026\u0026 point != null \u0026\u0026 activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra todos los muros con el comentario \u0027{comment}\u0027.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"{comment}\");\nElementFilter filter = new ElementParameterFilter(rule);\nList\u003cElement\u003e wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Find all walls tagged with comment \u0027{comment}\u0027.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"{comment}\");\nElementFilter filter = new ElementParameterFilter(rule);\nList\u003cElement\u003e wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Identify walls having comment \u0027{comment}\u0027.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"{comment}\");\nElementFilter filter = new ElementParameterFilter(rule);\nList\u003cElement\u003e wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Locate all walls with the comment \u0027{comment}\u0027.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"{comment}\");\nElementFilter filter = new ElementParameterFilter(rule);\nList\u003cElement\u003e wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Find all walls with the comment \u0027{comment}\u0027.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"{comment}\");\nElementFilter filter = new ElementParameterFilter(rule);\nList\u003cElement\u003e wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Identify all walls containing the comment \u0027{comment}\u0027.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"{comment}\");\nElementFilter filter = new ElementParameterFilter(rule);\nList\u003cElement\u003e wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Find walls tagged with the remark \u0027{comment}\u0027. Return these walls for review.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"{comment}\");\nElementFilter filter = new ElementParameterFilter(rule);\nList\u003cElement\u003e wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Locate walls annotated with \u0027{comment}\u0027. Retrieve these walls.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"{comment}\");\nElementFilter filter = new ElementParameterFilter(rule);\nList\u003cElement\u003e wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Asigna el material \u0027{material_name}\u0027 a la primera capa de un tipo de muro.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.GetCompoundStructure() != null);\n    Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\"));\n\n    if (wallType != null \u0026\u0026 material != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetMaterialId(0, material.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Assign \u0027{material_name}\u0027 to the first layer of a wall type\u0027s material.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.GetCompoundStructure() != null);\n    Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\"));\n\n    if (wallType != null \u0026\u0026 material != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetMaterialId(0, material.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Set the first layer\u0027s material of a wall type to \u0027{material_name}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.GetCompoundStructure() != null);\n    Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\"));\n\n    if (wallType != null \u0026\u0026 material != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetMaterialId(0, material.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Change the material of the first layer in a wall type to \u0027{material_name}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.GetCompoundStructure() != null);\n    Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\"));\n\n    if (wallType != null \u0026\u0026 material != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetMaterialId(0, material.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Apply the specified \u0027{material_name}\u0027 material to the primary layer within a wall type.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.GetCompoundStructure() != null);\n    Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\"));\n\n    if (wallType != null \u0026\u0026 material != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetMaterialId(0, material.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Designate the \u0027{material_name}\u0027 material to the initial layer of a defined wall type.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.GetCompoundStructure() != null);\n    Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\"));\n\n    if (wallType != null \u0026\u0026 material != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetMaterialId(0, material.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Set the \u0027{material_name}\u0027 material as the base layer for a selected wall type.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.GetCompoundStructure() != null);\n    Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\"));\n\n    if (wallType != null \u0026\u0026 material != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetMaterialId(0, material.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Assign the \u0027{material_name}\u0027 material to the first layer of a wall type.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.GetCompoundStructure() != null);\n    Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\"));\n\n    if (wallType != null \u0026\u0026 material != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetMaterialId(0, material.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca una etiqueta de material en una cara de muro.","completion":"using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Face, \"Selecciona una cara para etiquetar\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Selecciona la ubicación de la etiqueta\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null \u0026\u0026 point != null \u0026\u0026 activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}
{"prompt":"Place a material tag on a wall face.","completion":"using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Face, \"Select a face to tag\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Select the tag location\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null \u0026\u0026 point != null \u0026\u0026 activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra todos los muros con el comentario \u0027{comment}\u0027.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"{comment}\");\nElementFilter filter = new ElementParameterFilter(rule);\nList\u003cElement\u003e wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Find all walls tagged with comment \u0027{comment}\u0027.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"{comment}\");\nElementFilter filter = new ElementParameterFilter(rule);\nList\u003cElement\u003e wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Identify all walls bearing the remark \u0027{comment}\u0027.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"{comment}\");\nElementFilter filter = new ElementParameterFilter(rule);\nList\u003cElement\u003e wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Locate all walls with the comment \u0027{comment}\u0027.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"{comment}\");\nElementFilter filter = new ElementParameterFilter(rule);\nList\u003cElement\u003e wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Find and select walls annotated with \u0027{comment}\u0027.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"{comment}\");\nElementFilter filter = new ElementParameterFilter(rule);\nList\u003cElement\u003e wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Find all walls with the comment \u0027{comment}\u0027.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"{comment}\");\nElementFilter filter = new ElementParameterFilter(rule);\nList\u003cElement\u003e wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Locate all walls that bear the comment \u0027{comment}\u0027.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"{comment}\");\nElementFilter filter = new ElementParameterFilter(rule);\nList\u003cElement\u003e wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Identify walls labeled with comment \u0027{comment}\u0027.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"{comment}\");\nElementFilter filter = new ElementParameterFilter(rule);\nList\u003cElement\u003e wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Asigna el material \u0027{material_name}\u0027 a la primera capa de un tipo de muro.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.GetCompoundStructure() != null);\n    Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\"));\n\n    if (wallType != null \u0026\u0026 material != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetMaterialId(0, material.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Set the material \u0027{material_name}\u0027 for the initial layer of a specified wall.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.GetCompoundStructure() != null);\n    Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\"));\n\n    if (wallType != null \u0026\u0026 material != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetMaterialId(0, material.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Apply the material \u0027{material_name}\u0027 to the first layer in the material configuration of a wall type.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.GetCompoundStructure() != null);\n    Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\"));\n\n    if (wallType != null \u0026\u0026 material != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetMaterialId(0, material.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Assign the material \u0027{material_name}\u0027 to the first layer of a wall type.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.GetCompoundStructure() != null);\n    Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\"));\n\n    if (wallType != null \u0026\u0026 material != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetMaterialId(0, material.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Apply the \u0027{material_name}\u0027 material to the initial layer of a wall template.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.GetCompoundStructure() != null);\n    Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\"));\n\n    if (wallType != null \u0026\u0026 material != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetMaterialId(0, material.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Designate the \u0027{material_name}\u0027 material for the base layer of a wall type.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.GetCompoundStructure() != null);\n    Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\"));\n\n    if (wallType != null \u0026\u0026 material != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetMaterialId(0, material.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Assign the \u0027{material_name}\u0027 material to the first layer of a wall type.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.GetCompoundStructure() != null);\n    Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\"));\n\n    if (wallType != null \u0026\u0026 material != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetMaterialId(0, material.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Set the \u0027{material_name}\u0027 material as the first layer for a wall type.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast\u003cWallType\u003e().FirstOrDefault(wt =\u003e wt.GetCompoundStructure() != null);\n    Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().FirstOrDefault(m =\u003e m.Name.Contains(\"{material_name}\"));\n\n    if (wallType != null \u0026\u0026 material != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetMaterialId(0, material.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Insert a column of type \u0027{column_type_name}\u0027 at each grid crosspoint.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(s =\u003e s.Name == \"{column_type_name}\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.Elevation).FirstOrDefault();\n    List\u003cGrid\u003e grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast\u003cGrid\u003e().ToList();\n    if (columnSymbol != null \u0026\u0026 level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i \u003c grids.Count; i++)\n        {\n            for (int j = i + 1; j \u003c grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null \u0026\u0026 !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Model a column of type \u0027{column_type_name}\u0027 at each grid intersection.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(s =\u003e s.Name == \"{column_type_name}\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.Elevation).FirstOrDefault();\n    List\u003cGrid\u003e grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast\u003cGrid\u003e().ToList();\n    if (columnSymbol != null \u0026\u0026 level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i \u003c grids.Count; i++)\n        {\n            for (int j = i + 1; j \u003c grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null \u0026\u0026 !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a column of type \u0027{column_type_name}\u0027 at each intersection of the grid.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(s =\u003e s.Name == \"{column_type_name}\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.Elevation).FirstOrDefault();\n    List\u003cGrid\u003e grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast\u003cGrid\u003e().ToList();\n    if (columnSymbol != null \u0026\u0026 level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i \u003c grids.Count; i++)\n        {\n            for (int j = i + 1; j \u003c grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null \u0026\u0026 !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un pilar del tipo \u0027{column_type_name}\u0027 en cada intersección de la rejilla.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(s =\u003e s.Name == \"{column_type_name}\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.Elevation).FirstOrDefault();\n    List\u003cGrid\u003e grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast\u003cGrid\u003e().ToList();\n    if (columnSymbol != null \u0026\u0026 level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i \u003c grids.Count; i++)\n        {\n            for (int j = i + 1; j \u003c grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null \u0026\u0026 !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a \u0027{column_type_name}\u0027 column at each grid intersection.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(s =\u003e s.Name == \"{column_type_name}\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.Elevation).FirstOrDefault();\n    List\u003cGrid\u003e grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast\u003cGrid\u003e().ToList();\n    if (columnSymbol != null \u0026\u0026 level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i \u003c grids.Count; i++)\n        {\n            for (int j = i + 1; j \u003c grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null \u0026\u0026 !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Insert \u0027{column_type_name}\u0027 column at every grid intersection point.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(s =\u003e s.Name == \"{column_type_name}\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.Elevation).FirstOrDefault();\n    List\u003cGrid\u003e grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast\u003cGrid\u003e().ToList();\n    if (columnSymbol != null \u0026\u0026 level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i \u003c grids.Count; i++)\n        {\n            for (int j = i + 1; j \u003c grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null \u0026\u0026 !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Establish \u0027{column_type_name}\u0027 column at each grid intersection.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(s =\u003e s.Name == \"{column_type_name}\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.Elevation).FirstOrDefault();\n    List\u003cGrid\u003e grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast\u003cGrid\u003e().ToList();\n    if (columnSymbol != null \u0026\u0026 level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i \u003c grids.Count; i++)\n        {\n            for (int j = i + 1; j \u003c grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null \u0026\u0026 !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Position \u0027{column_type_name}\u0027 column at all grid intersection locations.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(s =\u003e s.Name == \"{column_type_name}\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.Elevation).FirstOrDefault();\n    List\u003cGrid\u003e grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast\u003cGrid\u003e().ToList();\n    if (columnSymbol != null \u0026\u0026 level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i \u003c grids.Count; i++)\n        {\n            for (int j = i + 1; j \u003c grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null \u0026\u0026 !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una nueva hoja {sheet_size} y colócale una leyenda.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(tb =\u003e tb.Name.Contains(\"{sheet_size}\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null \u0026\u0026 legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new sheet with dimensions {sheet_size} and append a legend.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(tb =\u003e tb.Name.Contains(\"{sheet_size}\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null \u0026\u0026 legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a fresh sheet with the dimensions specified as {sheet_size} and place a legend on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(tb =\u003e tb.Name.Contains(\"{sheet_size}\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null \u0026\u0026 legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Establish a new sheet of size {sheet_size} and affix a legend to it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(tb =\u003e tb.Name.Contains(\"{sheet_size}\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null \u0026\u0026 legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new {sheet_size} sheet and place a legend on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(tb =\u003e tb.Name.Contains(\"{sheet_size}\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null \u0026\u0026 legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a fresh {sheet_size} sheet and affix a legend to it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(tb =\u003e tb.Name.Contains(\"{sheet_size}\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null \u0026\u0026 legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Fabricate a new {sheet_size} sheet and inscribe a legend on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(tb =\u003e tb.Name.Contains(\"{sheet_size}\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null \u0026\u0026 legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Produce a new {sheet_size} sheet and position a legend upon it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(tb =\u003e tb.Name.Contains(\"{sheet_size}\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null \u0026\u0026 legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un techo por extrusión con un perfil en arco.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null \u0026\u0026 roofType != null \u0026\u0026 doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Create an extrusion roof with an arc profile.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null \u0026\u0026 roofType != null \u0026\u0026 doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Define a new fire-resistant door type as \u0027{door_type_name}\u0027, rated at \u0027{fire_rating}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"{door_type_name}\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"{fire_rating}\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new door type named \u0027{door_type_name}\u0027 and set its fire resistance to \u0027{fire_rating}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"{door_type_name}\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"{fire_rating}\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Establish a new fire-rated door type as \u0027{door_type_name}\u0027 with a rating of \u0027{fire_rating}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"{door_type_name}\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"{fire_rating}\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado \u0027{door_type_name}\u0027 y establece su resistencia al fuego a \u0027{fire_rating}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"{door_type_name}\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"{fire_rating}\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Develop a novel door typology, designated as \u0027{door_type_name}\u0027, and establish its fire resistance rating as \u0027{fire_rating}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"{door_type_name}\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"{fire_rating}\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Design a fresh door type, labeled \u0027{door_type_name}\u0027, and assign its fire rating as \u0027{fire_rating}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"{door_type_name}\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"{fire_rating}\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Formulate a new door type, christened \u0027{door_type_name}\u0027, and set its fire rating to \u0027{fire_rating}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"{door_type_name}\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"{fire_rating}\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new door type named \u0027{door_type_name}\u0027 and set its fire rating to \u0027{fire_rating}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"{door_type_name}\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"{fire_rating}\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a column of type \u0027{column_type_name}\u0027 at each grid intersection.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(s =\u003e s.Name == \"{column_type_name}\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.Elevation).FirstOrDefault();\n    List\u003cGrid\u003e grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast\u003cGrid\u003e().ToList();\n    if (columnSymbol != null \u0026\u0026 level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i \u003c grids.Count; i++)\n        {\n            for (int j = i + 1; j \u003c grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null \u0026\u0026 !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Position a column of type \u0027{column_type_name}\u0027 at every grid intersection point.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(s =\u003e s.Name == \"{column_type_name}\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.Elevation).FirstOrDefault();\n    List\u003cGrid\u003e grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast\u003cGrid\u003e().ToList();\n    if (columnSymbol != null \u0026\u0026 level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i \u003c grids.Count; i++)\n        {\n            for (int j = i + 1; j \u003c grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null \u0026\u0026 !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a column of specified type \u0027{column_type_name}\u0027 at all grid intersections.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(s =\u003e s.Name == \"{column_type_name}\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.Elevation).FirstOrDefault();\n    List\u003cGrid\u003e grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast\u003cGrid\u003e().ToList();\n    if (columnSymbol != null \u0026\u0026 level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i \u003c grids.Count; i++)\n        {\n            for (int j = i + 1; j \u003c grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null \u0026\u0026 !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un pilar del tipo \u0027{column_type_name}\u0027 en cada intersección de la rejilla.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(s =\u003e s.Name == \"{column_type_name}\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.Elevation).FirstOrDefault();\n    List\u003cGrid\u003e grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast\u003cGrid\u003e().ToList();\n    if (columnSymbol != null \u0026\u0026 level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i \u003c grids.Count; i++)\n        {\n            for (int j = i + 1; j \u003c grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null \u0026\u0026 !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Insert a \u0027{column_type_name}\u0027 column at each intersection of the grid.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(s =\u003e s.Name == \"{column_type_name}\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.Elevation).FirstOrDefault();\n    List\u003cGrid\u003e grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast\u003cGrid\u003e().ToList();\n    if (columnSymbol != null \u0026\u0026 level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i \u003c grids.Count; i++)\n        {\n            for (int j = i + 1; j \u003c grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null \u0026\u0026 !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a \u0027{column_type_name}\u0027 column at each grid intersection.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(s =\u003e s.Name == \"{column_type_name}\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.Elevation).FirstOrDefault();\n    List\u003cGrid\u003e grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast\u003cGrid\u003e().ToList();\n    if (columnSymbol != null \u0026\u0026 level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i \u003c grids.Count; i++)\n        {\n            for (int j = i + 1; j \u003c grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null \u0026\u0026 !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Position a \u0027{column_type_name}\u0027 column at each grid intersection, as defined.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(s =\u003e s.Name == \"{column_type_name}\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.Elevation).FirstOrDefault();\n    List\u003cGrid\u003e grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast\u003cGrid\u003e().ToList();\n    if (columnSymbol != null \u0026\u0026 level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i \u003c grids.Count; i++)\n        {\n            for (int j = i + 1; j \u003c grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null \u0026\u0026 !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Establish a column of type \u0027{column_type_name}\u0027 at every grid intersection point.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(s =\u003e s.Name == \"{column_type_name}\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.Elevation).FirstOrDefault();\n    List\u003cGrid\u003e grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast\u003cGrid\u003e().ToList();\n    if (columnSymbol != null \u0026\u0026 level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i \u003c grids.Count; i++)\n        {\n            for (int j = i + 1; j \u003c grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null \u0026\u0026 !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Define a new door type as \u0027{door_type_name}\u0027 and specify its fire rating as \u0027{fire_rating}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"{door_type_name}\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"{fire_rating}\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new door type named \u0027{door_type_name}\u0027 and set its fire resistance to \u0027{fire_rating}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"{door_type_name}\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"{fire_rating}\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Establish a new door type called \u0027{door_type_name}\u0027 and assign its fire rating to \u0027{fire_rating}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"{door_type_name}\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"{fire_rating}\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado \u0027{door_type_name}\u0027 y establece su resistencia al fuego a \u0027{fire_rating}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"{door_type_name}\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"{fire_rating}\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Formulate a novel door type, denoted as \u0027{door_type_name}\u0027, and assign its fire-resistant classification as \u0027{fire_rating}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"{door_type_name}\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"{fire_rating}\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Draft a new door type, designated as \u0027{door_type_name}\u0027, and establish its fire resistance rating as \u0027{fire_rating}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"{door_type_name}\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"{fire_rating}\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Design a fresh door type, labeled as \u0027{door_type_name}\u0027, and determine its fire-resistive rating to be \u0027{fire_rating}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"{door_type_name}\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"{fire_rating}\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new door type named \u0027{door_type_name}\u0027 and set its fire rating to \u0027{fire_rating}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"{door_type_name}\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"{fire_rating}\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new sheet of size {sheet_size} and place a legend on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(tb =\u003e tb.Name.Contains(\"{sheet_size}\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null \u0026\u0026 legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una nueva hoja {sheet_size} y colócale una leyenda.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(tb =\u003e tb.Name.Contains(\"{sheet_size}\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null \u0026\u0026 legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Produce a new sheet for {sheet_size} and affix a legend to it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(tb =\u003e tb.Name.Contains(\"{sheet_size}\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null \u0026\u0026 legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a sheet with dimensions {sheet_size} and append a legend.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(tb =\u003e tb.Name.Contains(\"{sheet_size}\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null \u0026\u0026 legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a {sheet_size} sheet and inscribe a legend upon it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(tb =\u003e tb.Name.Contains(\"{sheet_size}\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null \u0026\u0026 legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new {sheet_size} sheet and place a legend on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(tb =\u003e tb.Name.Contains(\"{sheet_size}\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null \u0026\u0026 legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Fabricate a new {sheet_size} sheet and position a legend thereon.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(tb =\u003e tb.Name.Contains(\"{sheet_size}\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null \u0026\u0026 legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Produce a new {sheet_size} sheet and affix a legend to it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(tb =\u003e tb.Name.Contains(\"{sheet_size}\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null \u0026\u0026 legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un techo por extrusión con un perfil en arco.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null \u0026\u0026 roofType != null \u0026\u0026 doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Create an extrusion roof with an arc profile.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null \u0026\u0026 roofType != null \u0026\u0026 doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado \u0027{door_type_name}\u0027 y establece su resistencia al fuego a \u0027{fire_rating_value}\u0027.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"{door_type_name}\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if(fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating_value}\");\n        }\n    }\n}"}
{"prompt":"Define a new door type, \u0027{door_type_name}\u0027, and assign it a fire rating of \u0027{fire_rating_value}\u0027.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"{door_type_name}\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if(fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating_value}\");\n        }\n    }\n}"}
{"prompt":"Create a new door type named \u0027{door_type_name}\u0027 and set its fire resistance to \u0027{fire_rating_value}\u0027.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"{door_type_name}\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if(fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating_value}\");\n        }\n    }\n}"}
{"prompt":"Establish a new door type, \u0027{door_type_name}\u0027, with a fire rating of \u0027{fire_rating_value}\u0027.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"{door_type_name}\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if(fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating_value}\");\n        }\n    }\n}"}
{"prompt":"Create a new door type named \u0027{door_type_name}\u0027 and set its fire rating to \u0027{fire_rating_value}\u0027.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"{door_type_name}\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if(fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating_value}\");\n        }\n    }\n}"}
{"prompt":"Generate a novel door type, named \u0027{door_type_name}\u0027, and specify its fire-resistance rating as \u0027{fire_rating_value}\u0027. ","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"{door_type_name}\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if(fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating_value}\");\n        }\n    }\n}"}
{"prompt":"Establish a new door type, designated as \u0027{door_type_name}\u0027, and assign it a fire rating of \u0027{fire_rating_value}\u0027. ","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"{door_type_name}\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if(fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating_value}\");\n        }\n    }\n}"}
{"prompt":"Create a fresh door type, labeled \u0027{door_type_name}\u0027, and set its fire-resistance rating to \u0027{fire_rating_value}\u0027. ","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"{door_type_name}\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if(fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating_value}\");\n        }\n    }\n}"}
{"prompt":"Create a column of type \u0027{column_type_name}\u0027 at each grid intersection.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(s =\u003e s.Name == \"{column_type_name}\");\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.Elevation).FirstOrDefault();\nList\u003cGrid\u003e grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast\u003cGrid\u003e().ToList();\nif (columnSymbol != null \u0026\u0026 level != null)\n{\n    if (!columnSymbol.IsActive) columnSymbol.Activate();\n    for (int i = 0; i \u003c grids.Count; i++)\n    {\n        for (int j = i + 1; j \u003c grids.Count; j++)\n        {\n            IntersectionResultArray results;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                if (results != null \u0026\u0026 !results.IsEmpty)\n                {\n                    foreach (IntersectionResult ir in results)\n                    {\n                        doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Generate column \u0027{column_type_name}\u0027 at every grid cross point.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(s =\u003e s.Name == \"{column_type_name}\");\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.Elevation).FirstOrDefault();\nList\u003cGrid\u003e grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast\u003cGrid\u003e().ToList();\nif (columnSymbol != null \u0026\u0026 level != null)\n{\n    if (!columnSymbol.IsActive) columnSymbol.Activate();\n    for (int i = 0; i \u003c grids.Count; i++)\n    {\n        for (int j = i + 1; j \u003c grids.Count; j++)\n        {\n            IntersectionResultArray results;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                if (results != null \u0026\u0026 !results.IsEmpty)\n                {\n                    foreach (IntersectionResult ir in results)\n                    {\n                        doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Position column \u0027{column_type_name}\u0027 at each grid intersection point.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(s =\u003e s.Name == \"{column_type_name}\");\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.Elevation).FirstOrDefault();\nList\u003cGrid\u003e grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast\u003cGrid\u003e().ToList();\nif (columnSymbol != null \u0026\u0026 level != null)\n{\n    if (!columnSymbol.IsActive) columnSymbol.Activate();\n    for (int i = 0; i \u003c grids.Count; i++)\n    {\n        for (int j = i + 1; j \u003c grids.Count; j++)\n        {\n            IntersectionResultArray results;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                if (results != null \u0026\u0026 !results.IsEmpty)\n                {\n                    foreach (IntersectionResult ir in results)\n                    {\n                        doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Crea un pilar del tipo \u0027{column_type_name}\u0027 en cada intersección de la rejilla.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(s =\u003e s.Name == \"{column_type_name}\");\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.Elevation).FirstOrDefault();\nList\u003cGrid\u003e grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast\u003cGrid\u003e().ToList();\nif (columnSymbol != null \u0026\u0026 level != null)\n{\n    if (!columnSymbol.IsActive) columnSymbol.Activate();\n    for (int i = 0; i \u003c grids.Count; i++)\n    {\n        for (int j = i + 1; j \u003c grids.Count; j++)\n        {\n            IntersectionResultArray results;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                if (results != null \u0026\u0026 !results.IsEmpty)\n                {\n                    foreach (IntersectionResult ir in results)\n                    {\n                        doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Create a \u0027{column_type_name}\u0027 column at each grid intersection.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(s =\u003e s.Name == \"{column_type_name}\");\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.Elevation).FirstOrDefault();\nList\u003cGrid\u003e grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast\u003cGrid\u003e().ToList();\nif (columnSymbol != null \u0026\u0026 level != null)\n{\n    if (!columnSymbol.IsActive) columnSymbol.Activate();\n    for (int i = 0; i \u003c grids.Count; i++)\n    {\n        for (int j = i + 1; j \u003c grids.Count; j++)\n        {\n            IntersectionResultArray results;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                if (results != null \u0026\u0026 !results.IsEmpty)\n                {\n                    foreach (IntersectionResult ir in results)\n                    {\n                        doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Insert a column of \u0027{column_type_name}\u0027 at each intersection of the grid.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(s =\u003e s.Name == \"{column_type_name}\");\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.Elevation).FirstOrDefault();\nList\u003cGrid\u003e grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast\u003cGrid\u003e().ToList();\nif (columnSymbol != null \u0026\u0026 level != null)\n{\n    if (!columnSymbol.IsActive) columnSymbol.Activate();\n    for (int i = 0; i \u003c grids.Count; i++)\n    {\n        for (int j = i + 1; j \u003c grids.Count; j++)\n        {\n            IntersectionResultArray results;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                if (results != null \u0026\u0026 !results.IsEmpty)\n                {\n                    foreach (IntersectionResult ir in results)\n                    {\n                        doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Position a \u0027{column_type_name}\u0027 column at every grid intersection in the model.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(s =\u003e s.Name == \"{column_type_name}\");\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.Elevation).FirstOrDefault();\nList\u003cGrid\u003e grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast\u003cGrid\u003e().ToList();\nif (columnSymbol != null \u0026\u0026 level != null)\n{\n    if (!columnSymbol.IsActive) columnSymbol.Activate();\n    for (int i = 0; i \u003c grids.Count; i++)\n    {\n        for (int j = i + 1; j \u003c grids.Count; j++)\n        {\n            IntersectionResultArray results;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                if (results != null \u0026\u0026 !results.IsEmpty)\n                {\n                    foreach (IntersectionResult ir in results)\n                    {\n                        doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Establish a column of type \u0027{column_type_name}\u0027 at every grid intersection point.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(s =\u003e s.Name == \"{column_type_name}\");\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.Elevation).FirstOrDefault();\nList\u003cGrid\u003e grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast\u003cGrid\u003e().ToList();\nif (columnSymbol != null \u0026\u0026 level != null)\n{\n    if (!columnSymbol.IsActive) columnSymbol.Activate();\n    for (int i = 0; i \u003c grids.Count; i++)\n    {\n        for (int j = i + 1; j \u003c grids.Count; j++)\n        {\n            IntersectionResultArray results;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                if (results != null \u0026\u0026 !results.IsEmpty)\n                {\n                    foreach (IntersectionResult ir in results)\n                    {\n                        doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado \u0027{door_type_name}\u0027 y establece su resistencia al fuego a \u0027{fire_rating_value}\u0027.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"{door_type_name}\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if(fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating_value}\");\n        }\n    }\n}"}
{"prompt":"Create a new door type named \u0027{door_type_name}\u0027. Set its fire resistance to \u0027{fire_rating_value}\u0027.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"{door_type_name}\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if(fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating_value}\");\n        }\n    }\n}"}
{"prompt":"Establish a new door type named \u0027{door_type_name}\u0027. Set its fire rating to \u0027{fire_rating_value}\u0027.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"{door_type_name}\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if(fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating_value}\");\n        }\n    }\n}"}
{"prompt":"Define a new door type as \u0027{door_type_name}\u0027. Establish its fire rating as \u0027{fire_rating_value}\u0027.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"{door_type_name}\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if(fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating_value}\");\n        }\n    }\n}"}
{"prompt":"Create a new door type named \u0027{door_type_name}\u0027 and set its fire rating to \u0027{fire_rating_value}\u0027.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"{door_type_name}\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if(fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating_value}\");\n        }\n    }\n}"}
{"prompt":"Design a fresh door type designated as \u0027{door_type_name}\u0027 and assign its fire rating as \u0027{fire_rating_value}\u0027. ","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"{door_type_name}\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if(fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating_value}\");\n        }\n    }\n}"}
{"prompt":"Develop a novel door type denoted as \u0027{door_type_name}\u0027 and establish its fire rating as \u0027{fire_rating_value}\u0027. ","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"{door_type_name}\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if(fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating_value}\");\n        }\n    }\n}"}
{"prompt":"Formulate a new door type labeled as \u0027{door_type_name}\u0027 and determine its fire rating as \u0027{fire_rating_value}\u0027. ","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"{door_type_name}\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if(fireRatingParam != null \u0026\u0026 !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating_value}\");\n        }\n    }\n}"}
{"prompt":"Generate a new sheet in size {title_block_size} and affix a legend to it.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(tb =\u003e tb.Name.Contains(\"{title_block_size}\"));\nView legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.ViewType == ViewType.Legend);\n\nif (titleBlock != null \u0026\u0026 legendView != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (newSheet != null)\n    {\n        BoundingBoxUV sheetBox = newSheet.Outline;\n        UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n        XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n        Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n    }\n}"}
{"prompt":"Produce a fresh sheet of dimensions {title_block_size} and inscribe a legend on it.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(tb =\u003e tb.Name.Contains(\"{title_block_size}\"));\nView legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.ViewType == ViewType.Legend);\n\nif (titleBlock != null \u0026\u0026 legendView != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (newSheet != null)\n    {\n        BoundingBoxUV sheetBox = newSheet.Outline;\n        UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n        XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n        Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n    }\n}"}
{"prompt":"Crea una nueva hoja {title_block_size} y colócale una leyenda.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(tb =\u003e tb.Name.Contains(\"{title_block_size}\"));\nView legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.ViewType == ViewType.Legend);\n\nif (titleBlock != null \u0026\u0026 legendView != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (newSheet != null)\n    {\n        BoundingBoxUV sheetBox = newSheet.Outline;\n        UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n        XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n        Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n    }\n}"}
{"prompt":"Create a new sheet with dimensions {title_block_size} and place a legend on it.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(tb =\u003e tb.Name.Contains(\"{title_block_size}\"));\nView legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.ViewType == ViewType.Legend);\n\nif (titleBlock != null \u0026\u0026 legendView != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (newSheet != null)\n    {\n        BoundingBoxUV sheetBox = newSheet.Outline;\n        UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n        XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n        Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n    }\n}"}
{"prompt":"Establish a new {title_block_size} sheet and inscribe a legend on it.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(tb =\u003e tb.Name.Contains(\"{title_block_size}\"));\nView legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.ViewType == ViewType.Legend);\n\nif (titleBlock != null \u0026\u0026 legendView != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (newSheet != null)\n    {\n        BoundingBoxUV sheetBox = newSheet.Outline;\n        UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n        XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n        Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n    }\n}"}
{"prompt":"Produce a fresh {title_block_size} sheet and affix a legend to it.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(tb =\u003e tb.Name.Contains(\"{title_block_size}\"));\nView legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.ViewType == ViewType.Legend);\n\nif (titleBlock != null \u0026\u0026 legendView != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (newSheet != null)\n    {\n        BoundingBoxUV sheetBox = newSheet.Outline;\n        UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n        XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n        Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n    }\n}"}
{"prompt":"Generate a new {title_block_size} sheet and position a legend upon it.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(tb =\u003e tb.Name.Contains(\"{title_block_size}\"));\nView legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.ViewType == ViewType.Legend);\n\nif (titleBlock != null \u0026\u0026 legendView != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (newSheet != null)\n    {\n        BoundingBoxUV sheetBox = newSheet.Outline;\n        UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n        XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n        Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n    }\n}"}
{"prompt":"Create a new {title_block_size} sheet and place a legend on it.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(tb =\u003e tb.Name.Contains(\"{title_block_size}\"));\nView legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast\u003cView\u003e().FirstOrDefault(v =\u003e v.ViewType == ViewType.Legend);\n\nif (titleBlock != null \u0026\u0026 legendView != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (newSheet != null)\n    {\n        BoundingBoxUV sheetBox = newSheet.Outline;\n        UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n        XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n        Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n    }\n}"}
{"prompt":"Crea un techo por extrusión con un perfil en arco.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null \u0026\u0026 roofType != null \u0026\u0026 doc.ActiveView != null)\n{\n    CurveArray profile = new CurveArray();\n    profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    if(refPlane != null)\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n}"}
{"prompt":"Create an extrusion roof with an arc profile.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null \u0026\u0026 roofType != null \u0026\u0026 doc.ActiveView != null)\n{\n    CurveArray profile = new CurveArray();\n    profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    if(refPlane != null)\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n}"}
{"prompt":"Pinta la cara interior de los muros exteriores con \u0027{material_name}\u0027.","completion":"using(Transaction t = new Transaction(doc, \"Paint Walls\"))\n{\n    t.Start();\n    Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().FirstOrDefault(m =\u003e m.Name == \"{material_name}\");\n    var exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast\u003cWall\u003e().Where(w =\u003e w.WallType.Function == WallFunction.Exterior).ToList();\n    if(paintMaterial != null)\n    {\n        foreach (Wall w in exteriorWalls)\n        {\n            IList\u003cReference\u003e interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n            if(interiorFaceRefs.Count \u003e 0)\n            {\n                Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n                if (interiorFace != null)\n                {\n                    doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Set the interior faces of exterior walls to \u0027{material_name}\u0027 material.","completion":"using(Transaction t = new Transaction(doc, \"Paint Walls\"))\n{\n    t.Start();\n    Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().FirstOrDefault(m =\u003e m.Name == \"{material_name}\");\n    var exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast\u003cWall\u003e().Where(w =\u003e w.WallType.Function == WallFunction.Exterior).ToList();\n    if(paintMaterial != null)\n    {\n        foreach (Wall w in exteriorWalls)\n        {\n            IList\u003cReference\u003e interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n            if(interiorFaceRefs.Count \u003e 0)\n            {\n                Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n                if (interiorFace != null)\n                {\n                    doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Coat the interior faces of exterior walls with \u0027{material_name}\u0027.","completion":"using(Transaction t = new Transaction(doc, \"Paint Walls\"))\n{\n    t.Start();\n    Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().FirstOrDefault(m =\u003e m.Name == \"{material_name}\");\n    var exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast\u003cWall\u003e().Where(w =\u003e w.WallType.Function == WallFunction.Exterior).ToList();\n    if(paintMaterial != null)\n    {\n        foreach (Wall w in exteriorWalls)\n        {\n            IList\u003cReference\u003e interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n            if(interiorFaceRefs.Count \u003e 0)\n            {\n                Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n                if (interiorFace != null)\n                {\n                    doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Apply \u0027{material_name}\u0027 to the interior faces of exterior walls.","completion":"using(Transaction t = new Transaction(doc, \"Paint Walls\"))\n{\n    t.Start();\n    Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast\u003cMaterial\u003e().FirstOrDefault(m =\u003e m.Name == \"{material_name}\");\n    var exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast\u003cWall\u003e().Where(w =\u003e w.WallType.Function == WallFunction.Exterior).ToList();\n    if(paintMaterial != null)\n    {\n        foreach (Wall w in exteriorWalls)\n        {\n            IList\u003cReference\u003e interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n            if(interiorFaceRefs.Count \u003e 0)\n            {\n                Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n                if (interiorFace != null)\n                {\n                    doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un techo por contorno en el \u0027{level_name}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n    if(roofLevel != null \u0026\u0026 roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20,0,0), new XYZ(20,30,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20,30,0), new XYZ(0,30,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Delineate a roof outline within the \u0027{level_name}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n    if(roofLevel != null \u0026\u0026 roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20,0,0), new XYZ(20,30,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20,30,0), new XYZ(0,30,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Model a roof boundary on the \u0027{level_name}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n    if(roofLevel != null \u0026\u0026 roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20,0,0), new XYZ(20,30,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20,30,0), new XYZ(0,30,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Trace a roof perimeter in the \u0027{level_name}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n    if(roofLevel != null \u0026\u0026 roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20,0,0), new XYZ(20,30,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20,30,0), new XYZ(0,30,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Delineate a roof plan on the \u0027{level_name}\u0027 level.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (roofLevel != null \u0026\u0026 roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 / 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,0,0), new XYZ(20 / 0.3048,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,30 / 0.3048,0), new XYZ(0,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 / 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Create a roof by footprint on the \u0027{level_name}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (roofLevel != null \u0026\u0026 roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 / 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,0,0), new XYZ(20 / 0.3048,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,30 / 0.3048,0), new XYZ(0,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 / 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Model a roof by footprint within the \u0027{level_name}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (roofLevel != null \u0026\u0026 roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 / 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,0,0), new XYZ(20 / 0.3048,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,30 / 0.3048,0), new XYZ(0,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 / 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Sketch a roof outline on the \u0027{level_name}\u0027 level.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (roofLevel != null \u0026\u0026 roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 / 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,0,0), new XYZ(20 / 0.3048,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,30 / 0.3048,0), new XYZ(0,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 / 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Dibuja una región rellena con patrón diagonal.","completion":"using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast\u003cFillPatternElement\u003e().FirstOrDefault(p =\u003e !p.GetFillPattern().IsSolidFill);\n    if (activeView != null \u0026\u0026 fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(new XYZ(0, 0, 0), new XYZ(5, 0, 0)));\n                profile.Append(Line.CreateBound(new XYZ(5, 0, 0), new XYZ(5, 5, 0)));\n                profile.Append(Line.CreateBound(new XYZ(5, 5, 0), new XYZ(0, 5, 0)));\n                profile.Append(Line.CreateBound(new XYZ(0, 5, 0), new XYZ(0, 0, 0)));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List\u003cCurveLoop\u003e { profile });\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Modify the \u0027{parameter_name}\u0027 attribute of all doors on the \u0027{level_name}\u0027, to \u0027{parameter_value}\u0027.","completion":"using(Transaction t = new Transaction(doc, \"Set Door Comments\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n    if(level != null)\n    {\n        List\u003cFamilyInstance\u003e doorsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().Where(fi =\u003e fi.LevelId.Equals(level.Id)).ToList();\n        foreach(FamilyInstance door in doorsOnLevel)\n        {\n            Parameter param = door.LookupParameter(\"{parameter_name}\");\n            if(param != null \u0026\u0026 !param.IsReadOnly)\n            {\n                param.Set(\"{parameter_value}\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Set the \u0027{parameter_name}\u0027 parameter of all doors on the \u0027{level_name}\u0027 to \u0027{parameter_value}\u0027.","completion":"using(Transaction t = new Transaction(doc, \"Set Door Comments\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n    if(level != null)\n    {\n        List\u003cFamilyInstance\u003e doorsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().Where(fi =\u003e fi.LevelId.Equals(level.Id)).ToList();\n        foreach(FamilyInstance door in doorsOnLevel)\n        {\n            Parameter param = door.LookupParameter(\"{parameter_name}\");\n            if(param != null \u0026\u0026 !param.IsReadOnly)\n            {\n                param.Set(\"{parameter_value}\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Establece el parámetro \u0027{parameter_name}\u0027 de todas las puertas del {level_name} a \u0027{parameter_value}\u0027.","completion":"using(Transaction t = new Transaction(doc, \"Set Door Comments\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n    if(level != null)\n    {\n        List\u003cFamilyInstance\u003e doorsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().Where(fi =\u003e fi.LevelId.Equals(level.Id)).ToList();\n        foreach(FamilyInstance door in doorsOnLevel)\n        {\n            Parameter param = door.LookupParameter(\"{parameter_name}\");\n            if(param != null \u0026\u0026 !param.IsReadOnly)\n            {\n                param.Set(\"{parameter_value}\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Adjust the \u0027{parameter_name}\u0027 setting for all doors within the \u0027{level_name}\u0027, to \u0027{parameter_value}\u0027.","completion":"using(Transaction t = new Transaction(doc, \"Set Door Comments\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n    if(level != null)\n    {\n        List\u003cFamilyInstance\u003e doorsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().Where(fi =\u003e fi.LevelId.Equals(level.Id)).ToList();\n        foreach(FamilyInstance door in doorsOnLevel)\n        {\n            Parameter param = door.LookupParameter(\"{parameter_name}\");\n            if(param != null \u0026\u0026 !param.IsReadOnly)\n            {\n                param.Set(\"{parameter_value}\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Acota la longitud de un muro seleccionado por el usuario.","completion":"using (Transaction t = new Transaction(doc, \"Dimension Wall\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference wallRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un muro para acotar\");\n    if(wallRef != null)\n    {\n        Wall wall = doc.GetElement(wallRef) as Wall;\n        if(wall != null)\n        {\n            LocationCurve locCurve = wall.Location as LocationCurve;\n            Curve wallCurve = locCurve != null ? locCurve.Curve : null;\n            if(wallCurve != null \u0026\u0026 wallCurve is Line)\n            {\n                Line wallLine = wallCurve as Line;\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(doc.ActiveView, dimLine, refs);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Inserta una armadura (truss) de {length_m} metros entre dos puntos.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null \u0026\u0026 trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ({length_m} / 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Draw a truss (beam) of {length_m} meters length between two designated points.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null \u0026\u0026 trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ({length_m} / 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Create a truss of {length_m} meters between two specified points.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null \u0026\u0026 trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ({length_m} / 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Insert a truss structure spanning {length_m} meters between defined locations.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null \u0026\u0026 trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ({length_m} / 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Add a {length_m}-meter truss as a connection between the indicated points.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null \u0026\u0026 trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ({length_m} / 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Place a {length_m}-meter truss between the defined points in the model.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null \u0026\u0026 trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ({length_m} / 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Insert a {length_m}-meter truss between two points.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null \u0026\u0026 trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ({length_m} / 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Insert a {length_m}-meter truss at the specified location between the designated points.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null \u0026\u0026 trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ({length_m} / 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Inserta una armadura (truss) de {length_m} metros entre dos puntos.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null \u0026\u0026 trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ({length_m} / 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Place a truss (of specified length {length_m} meters) between two designated points.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null \u0026\u0026 trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ({length_m} / 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Create a truss structure of {length_m} meters between two specified points.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null \u0026\u0026 trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ({length_m} / 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Insert a truss (of length {length_m} meters) between defined locations.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null \u0026\u0026 trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ({length_m} / 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Place a {length_m}-meter truss element between the identified positions.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null \u0026\u0026 trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ({length_m} / 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Establish a {length_m}-meter truss member between the specified locations.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null \u0026\u0026 trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ({length_m} / 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Insert a {length_m}-meter truss between two points.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null \u0026\u0026 trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ({length_m} / 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Introduce a {length_m}-meter truss span between the designated points.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null \u0026\u0026 trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ({length_m} / 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Model a rectangular ventilation duct, with dimensions of {width_mm}x{height_mm} millimeters.","completion":"using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast\u003cDuctType\u003e().FirstOrDefault(d =\u003e d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast\u003cMEPSystemType\u003e().FirstOrDefault(s =\u003e s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null \u0026\u0026 ductType != null \u0026\u0026 systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 / 0.3048);\n        XYZ p2 = new XYZ(10 / 0.3048, 0, 3 / 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null \u0026\u0026 !widthParam.IsReadOnly) widthParam.Set({width_mm} / 304.8);\n            if (heightParam != null \u0026\u0026 !heightParam.IsReadOnly) heightParam.Set({height_mm} / 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Draw a rectangular ventilation conduit, measuring {width_mm}x{height_mm} millimeters.","completion":"using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast\u003cDuctType\u003e().FirstOrDefault(d =\u003e d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast\u003cMEPSystemType\u003e().FirstOrDefault(s =\u003e s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null \u0026\u0026 ductType != null \u0026\u0026 systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 / 0.3048);\n        XYZ p2 = new XYZ(10 / 0.3048, 0, 3 / 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null \u0026\u0026 !widthParam.IsReadOnly) widthParam.Set({width_mm} / 304.8);\n            if (heightParam != null \u0026\u0026 !heightParam.IsReadOnly) heightParam.Set({height_mm} / 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Sketch a rectangular ventilation duct of {width_mm}x{height_mm} millimeters.","completion":"using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast\u003cDuctType\u003e().FirstOrDefault(d =\u003e d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast\u003cMEPSystemType\u003e().FirstOrDefault(s =\u003e s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null \u0026\u0026 ductType != null \u0026\u0026 systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 / 0.3048);\n        XYZ p2 = new XYZ(10 / 0.3048, 0, 3 / 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null \u0026\u0026 !widthParam.IsReadOnly) widthParam.Set({width_mm} / 304.8);\n            if (heightParam != null \u0026\u0026 !heightParam.IsReadOnly) heightParam.Set({height_mm} / 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Dibuja un conducto de ventilación rectangular de {width_mm}x{height_mm} milímetros.","completion":"using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast\u003cDuctType\u003e().FirstOrDefault(d =\u003e d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast\u003cMEPSystemType\u003e().FirstOrDefault(s =\u003e s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null \u0026\u0026 ductType != null \u0026\u0026 systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 / 0.3048);\n        XYZ p2 = new XYZ(10 / 0.3048, 0, 3 / 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null \u0026\u0026 !widthParam.IsReadOnly) widthParam.Set({width_mm} / 304.8);\n            if (heightParam != null \u0026\u0026 !heightParam.IsReadOnly) heightParam.Set({height_mm} / 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Trace a {width_mm} x {height_mm} rectangular ventilation duct in millimeters.","completion":"using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast\u003cDuctType\u003e().FirstOrDefault(d =\u003e d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast\u003cMEPSystemType\u003e().FirstOrDefault(s =\u003e s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null \u0026\u0026 ductType != null \u0026\u0026 systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 / 0.3048);\n        XYZ p2 = new XYZ(10 / 0.3048, 0, 3 / 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null \u0026\u0026 !widthParam.IsReadOnly) widthParam.Set({width_mm} / 304.8);\n            if (heightParam != null \u0026\u0026 !heightParam.IsReadOnly) heightParam.Set({height_mm} / 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Model a millimeter rectangular ventilation duct, measuring {width_mm} x {height_mm}.","completion":"using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast\u003cDuctType\u003e().FirstOrDefault(d =\u003e d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast\u003cMEPSystemType\u003e().FirstOrDefault(s =\u003e s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null \u0026\u0026 ductType != null \u0026\u0026 systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 / 0.3048);\n        XYZ p2 = new XYZ(10 / 0.3048, 0, 3 / 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null \u0026\u0026 !widthParam.IsReadOnly) widthParam.Set({width_mm} / 304.8);\n            if (heightParam != null \u0026\u0026 !heightParam.IsReadOnly) heightParam.Set({height_mm} / 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Draw a {width_mm}x{height_mm} millimeter rectangular ventilation duct.","completion":"using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast\u003cDuctType\u003e().FirstOrDefault(d =\u003e d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast\u003cMEPSystemType\u003e().FirstOrDefault(s =\u003e s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null \u0026\u0026 ductType != null \u0026\u0026 systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 / 0.3048);\n        XYZ p2 = new XYZ(10 / 0.3048, 0, 3 / 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null \u0026\u0026 !widthParam.IsReadOnly) widthParam.Set({width_mm} / 304.8);\n            if (heightParam != null \u0026\u0026 !heightParam.IsReadOnly) heightParam.Set({height_mm} / 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Sketch a millimeter rectangular ventilation duct with dimensions {width_mm} x {height_mm}.","completion":"using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast\u003cDuctType\u003e().FirstOrDefault(d =\u003e d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast\u003cMEPSystemType\u003e().FirstOrDefault(s =\u003e s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null \u0026\u0026 ductType != null \u0026\u0026 systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 / 0.3048);\n        XYZ p2 = new XYZ(10 / 0.3048, 0, 3 / 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null \u0026\u0026 !widthParam.IsReadOnly) widthParam.Set({width_mm} / 304.8);\n            if (heightParam != null \u0026\u0026 !heightParam.IsReadOnly) heightParam.Set({height_mm} / 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Develop a new wall type with a thickness of {thickness_cm}cm, to be named \u0027{wall_type_name}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"{wall_type_name}\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (wallTypeToDuplicate != null)\n    {\n        WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n            cs.SetLayerWidth(coreLayerIndex, {thickness_cm} / 100.0 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Establish a fresh wall type having a thickness of {thickness_cm}cm, which shall be labeled \u0027{wall_type_name}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"{wall_type_name}\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (wallTypeToDuplicate != null)\n    {\n        WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n            cs.SetLayerWidth(coreLayerIndex, {thickness_cm} / 100.0 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Model a new wall type with a thickness of {thickness_cm}cm, designating it as \u0027{wall_type_name}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"{wall_type_name}\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (wallTypeToDuplicate != null)\n    {\n        WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n            cs.SetLayerWidth(coreLayerIndex, {thickness_cm} / 100.0 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new {thickness_cm}cm wall type named \u0027{wall_type_name}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"{wall_type_name}\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (wallTypeToDuplicate != null)\n    {\n        WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n            cs.SetLayerWidth(coreLayerIndex, {thickness_cm} / 100.0 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un techo por contorno en el \u0027{level_name}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n    if(roofLevel != null \u0026\u0026 roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 / 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,0,0), new XYZ(20 / 0.3048,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,30 / 0.3048,0), new XYZ(0,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 / 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Delineate a roof outline within the \u0027{level_name}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n    if(roofLevel != null \u0026\u0026 roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 / 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,0,0), new XYZ(20 / 0.3048,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,30 / 0.3048,0), new XYZ(0,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 / 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Draw a roof perimeter for the \u0027{level_name}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n    if(roofLevel != null \u0026\u0026 roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 / 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,0,0), new XYZ(20 / 0.3048,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,30 / 0.3048,0), new XYZ(0,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 / 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Model a roof boundary on the \u0027{level_name}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n    if(roofLevel != null \u0026\u0026 roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 / 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,0,0), new XYZ(20 / 0.3048,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,30 / 0.3048,0), new XYZ(0,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 / 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a roof model within the footprint of the \u0027{level_name}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (roofLevel != null \u0026\u0026 roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 / 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,0,0), new XYZ(20 / 0.3048,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,30 / 0.3048,0), new XYZ(0,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 / 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Create a roof by footprint on the \u0027{level_name}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (roofLevel != null \u0026\u0026 roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 / 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,0,0), new XYZ(20 / 0.3048,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,30 / 0.3048,0), new XYZ(0,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 / 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Delineate a roof based on the footprint of the \u0027{level_name}\u0027.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (roofLevel != null \u0026\u0026 roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 / 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,0,0), new XYZ(20 / 0.3048,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,30 / 0.3048,0), new XYZ(0,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 / 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Form a roof plan on the \u0027{level_name}\u0027 by tracing its footprint.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (roofLevel != null \u0026\u0026 roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 / 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,0,0), new XYZ(20 / 0.3048,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,30 / 0.3048,0), new XYZ(0,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 / 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Adjust the direction of the project\u0027s north axis by {angle_degrees} degrees.","completion":"using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast\u003cBasePoint\u003e().FirstOrDefault(bp =\u003e !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInRadians = -({angle_degrees} * Math.PI / 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Rotate the project\u0027s north axis {angle_degrees} degrees clockwise.","completion":"using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast\u003cBasePoint\u003e().FirstOrDefault(bp =\u003e !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInRadians = -({angle_degrees} * Math.PI / 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Shift the project\u0027s north axis {angle_degrees} degrees counter-clockwise for right-handed systems.","completion":"using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast\u003cBasePoint\u003e().FirstOrDefault(bp =\u003e !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInRadians = -({angle_degrees} * Math.PI / 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Rota el norte del proyecto {angle_degrees} grados en sentido horario.","completion":"using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast\u003cBasePoint\u003e().FirstOrDefault(bp =\u003e !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInRadians = -({angle_degrees} * Math.PI / 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Rotate project north {angle_degrees} degrees clockwise.","completion":"using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast\u003cBasePoint\u003e().FirstOrDefault(bp =\u003e !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInRadians = -({angle_degrees} * Math.PI / 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Rotate the project\u0027s north axis {angle_degrees} degrees clockwise.","completion":"using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast\u003cBasePoint\u003e().FirstOrDefault(bp =\u003e !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInRadians = -({angle_degrees} * Math.PI / 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Adjust the project orientation by {angle_degrees} degrees clockwise.","completion":"using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast\u003cBasePoint\u003e().FirstOrDefault(bp =\u003e !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInRadians = -({angle_degrees} * Math.PI / 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Alter the project\u0027s azimuth by {angle_degrees} degrees, rotating clockwise.","completion":"using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast\u003cBasePoint\u003e().FirstOrDefault(bp =\u003e !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInRadians = -({angle_degrees} * Math.PI / 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Insert a horizontal grid line at {height_m} meters on a curtain wall at a height.","completion":"using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast\u003cWall\u003e().FirstOrDefault(w =\u003e w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) / 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, {height_m} / 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Añade una línea de rejilla horizontal a un muro cortina a {height_m} metros de altura.","completion":"using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast\u003cWall\u003e().FirstOrDefault(w =\u003e w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) / 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, {height_m} / 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a horizontal grid line on the curtain wall, set at a height of {height_m} meters.","completion":"using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast\u003cWall\u003e().FirstOrDefault(w =\u003e w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) / 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, {height_m} / 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Add a horizontal grid line to the curtain wall at a height of {height_m} meters.","completion":"using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast\u003cWall\u003e().FirstOrDefault(w =\u003e w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) / 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, {height_m} / 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Add a horizontal grid line to a curtain wall at a height of {height_m} meters.","completion":"using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast\u003cWall\u003e().FirstOrDefault(w =\u003e w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) / 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, {height_m} / 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Insert a horizontal grid line on the curtain wall at a specified height of {height_m} meters.","completion":"using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast\u003cWall\u003e().FirstOrDefault(w =\u003e w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) / 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, {height_m} / 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Draw a horizontal grid line on the curtain wall at the designated elevation of {height_m} meters.","completion":"using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast\u003cWall\u003e().FirstOrDefault(w =\u003e w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) / 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, {height_m} / 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Place a horizontal grid line on the curtain wall at the specified level of {height_m} meters.","completion":"using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast\u003cWall\u003e().FirstOrDefault(w =\u003e w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) / 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, {height_m} / 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca una cota de elevación en el {level_name}.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    Level lvl = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n    View activeView = doc.ActiveView;\n\n    if (lvl != null \u0026\u0026 activeView != null)\n    {\n        Reference levelRef = new Reference(lvl);\n        XYZ origin = new XYZ(5/0.3048, 5/0.3048, lvl.Elevation);\n        XYZ leaderEnd = origin + new XYZ(2/0.3048, 2/0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, levelRef, origin, origin, leaderEnd, origin, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Set the elevation level for the {level_name}.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    Level lvl = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n    View activeView = doc.ActiveView;\n\n    if (lvl != null \u0026\u0026 activeView != null)\n    {\n        Reference levelRef = new Reference(lvl);\n        XYZ origin = new XYZ(5/0.3048, 5/0.3048, lvl.Elevation);\n        XYZ leaderEnd = origin + new XYZ(2/0.3048, 2/0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, levelRef, origin, origin, leaderEnd, origin, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Establish an elevation level for the {level_name}.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    Level lvl = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n    View activeView = doc.ActiveView;\n\n    if (lvl != null \u0026\u0026 activeView != null)\n    {\n        Reference levelRef = new Reference(lvl);\n        XYZ origin = new XYZ(5/0.3048, 5/0.3048, lvl.Elevation);\n        XYZ leaderEnd = origin + new XYZ(2/0.3048, 2/0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, levelRef, origin, origin, leaderEnd, origin, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Assign an elevation datum to the {level_name}.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    Level lvl = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n    View activeView = doc.ActiveView;\n\n    if (lvl != null \u0026\u0026 activeView != null)\n    {\n        Reference levelRef = new Reference(lvl);\n        XYZ origin = new XYZ(5/0.3048, 5/0.3048, lvl.Elevation);\n        XYZ leaderEnd = origin + new XYZ(2/0.3048, 2/0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, levelRef, origin, origin, leaderEnd, origin, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Position a spot elevation within level {level_name}.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    Level lvl = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n    View activeView = doc.ActiveView;\n\n    if (lvl != null \u0026\u0026 activeView != null)\n    {\n        Reference levelRef = new Reference(lvl);\n        XYZ origin = new XYZ(5/0.3048, 5/0.3048, lvl.Elevation);\n        XYZ leaderEnd = origin + new XYZ(2/0.3048, 2/0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, levelRef, origin, origin, leaderEnd, origin, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Insert a spot elevation on level {level_name}.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    Level lvl = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n    View activeView = doc.ActiveView;\n\n    if (lvl != null \u0026\u0026 activeView != null)\n    {\n        Reference levelRef = new Reference(lvl);\n        XYZ origin = new XYZ(5/0.3048, 5/0.3048, lvl.Elevation);\n        XYZ leaderEnd = origin + new XYZ(2/0.3048, 2/0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, levelRef, origin, origin, leaderEnd, origin, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Place a spot elevation on {level_name}.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    Level lvl = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n    View activeView = doc.ActiveView;\n\n    if (lvl != null \u0026\u0026 activeView != null)\n    {\n        Reference levelRef = new Reference(lvl);\n        XYZ origin = new XYZ(5/0.3048, 5/0.3048, lvl.Elevation);\n        XYZ leaderEnd = origin + new XYZ(2/0.3048, 2/0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, levelRef, origin, origin, leaderEnd, origin, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Mark a spot elevation on the level {level_name}.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    Level lvl = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n    View activeView = doc.ActiveView;\n\n    if (lvl != null \u0026\u0026 activeView != null)\n    {\n        Reference levelRef = new Reference(lvl);\n        XYZ origin = new XYZ(5/0.3048, 5/0.3048, lvl.Elevation);\n        XYZ leaderEnd = origin + new XYZ(2/0.3048, 2/0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, levelRef, origin, origin, leaderEnd, origin, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Modify the clipping extent of the view to a rectangular area from ({x1},{y1}) to ({x2},{y2}).","completion":"using (Transaction t = new Transaction(doc, \"Adjust Crop Region\"))\n{\n    t.Start();\n    View view = doc.ActiveView;\n\n    if (view != null \u0026\u0026 view.CropBoxActive)\n    {\n        BoundingBoxXYZ cropBox = view.CropBox;\n        if (cropBox != null)\n        {\n            XYZ minPoint = new XYZ({x1} / 0.3048, {y1} / 0.3048, cropBox.Min.Z);\n            XYZ maxPoint = new XYZ({x2} / 0.3048, {y2} / 0.3048, cropBox.Max.Z);\n            cropBox.Min = minPoint;\n            cropBox.Max = maxPoint;\n            view.CropBox = cropBox;\n            view.CropBoxVisible = true;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Ajusta la región de recorte de la vista a un rectángulo de ({x1},{y1}) a ({x2},{y2}).","completion":"using (Transaction t = new Transaction(doc, \"Adjust Crop Region\"))\n{\n    t.Start();\n    View view = doc.ActiveView;\n\n    if (view != null \u0026\u0026 view.CropBoxActive)\n    {\n        BoundingBoxXYZ cropBox = view.CropBox;\n        if (cropBox != null)\n        {\n            XYZ minPoint = new XYZ({x1} / 0.3048, {y1} / 0.3048, cropBox.Min.Z);\n            XYZ maxPoint = new XYZ({x2} / 0.3048, {y2} / 0.3048, cropBox.Max.Z);\n            cropBox.Min = minPoint;\n            cropBox.Max = maxPoint;\n            view.CropBox = cropBox;\n            view.CropBoxVisible = true;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Adjust the clipping region of the view to a rectangular boundary from ({x1},{y1}) to ({x2},{y2}).","completion":"using (Transaction t = new Transaction(doc, \"Adjust Crop Region\"))\n{\n    t.Start();\n    View view = doc.ActiveView;\n\n    if (view != null \u0026\u0026 view.CropBoxActive)\n    {\n        BoundingBoxXYZ cropBox = view.CropBox;\n        if (cropBox != null)\n        {\n            XYZ minPoint = new XYZ({x1} / 0.3048, {y1} / 0.3048, cropBox.Min.Z);\n            XYZ maxPoint = new XYZ({x2} / 0.3048, {y2} / 0.3048, cropBox.Max.Z);\n            cropBox.Min = minPoint;\n            cropBox.Max = maxPoint;\n            view.CropBox = cropBox;\n            view.CropBoxVisible = true;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Set the clipping box of the view to a rectangular range from ({x1},{y1}) to ({x2},{y2}).","completion":"using (Transaction t = new Transaction(doc, \"Adjust Crop Region\"))\n{\n    t.Start();\n    View view = doc.ActiveView;\n\n    if (view != null \u0026\u0026 view.CropBoxActive)\n    {\n        BoundingBoxXYZ cropBox = view.CropBox;\n        if (cropBox != null)\n        {\n            XYZ minPoint = new XYZ({x1} / 0.3048, {y1} / 0.3048, cropBox.Min.Z);\n            XYZ maxPoint = new XYZ({x2} / 0.3048, {y2} / 0.3048, cropBox.Max.Z);\n            cropBox.Min = minPoint;\n            cropBox.Max = maxPoint;\n            view.CropBox = cropBox;\n            view.CropBoxVisible = true;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Configure the view\u0027s crop box as a rectangle, encompassing the area from coordinates ({x1},{y1}) to ({x2},{y2}).","completion":"View view = doc.ActiveView;\n\nif (view != null \u0026\u0026 view.CropBoxActive)\n{\n    BoundingBoxXYZ cropBox = view.CropBox;\n    if (cropBox != null)\n    {\n        XYZ minPoint = new XYZ({x1} / 0.3048, {y1} / 0.3048, cropBox.Min.Z);\n        XYZ maxPoint = new XYZ({x2} / 0.3048, {y2} / 0.3048, cropBox.Max.Z);\n        cropBox.Min = minPoint;\n        cropBox.Max = maxPoint;\n        view.CropBox = cropBox;\n        view.CropBoxVisible = true;\n    }\n}"}
{"prompt":"Set the crop boundary of the view as a rectangle, spanning from coordinates ({x1},{y1}) to ({x2},{y2}).","completion":"View view = doc.ActiveView;\n\nif (view != null \u0026\u0026 view.CropBoxActive)\n{\n    BoundingBoxXYZ cropBox = view.CropBox;\n    if (cropBox != null)\n    {\n        XYZ minPoint = new XYZ({x1} / 0.3048, {y1} / 0.3048, cropBox.Min.Z);\n        XYZ maxPoint = new XYZ({x2} / 0.3048, {y2} / 0.3048, cropBox.Max.Z);\n        cropBox.Min = minPoint;\n        cropBox.Max = maxPoint;\n        view.CropBox = cropBox;\n        view.CropBoxVisible = true;\n    }\n}"}
{"prompt":"Define the view\u0027s cropping region as a rectangular area, extending from points ({x1},{y1}) to ({x2},{y2}).","completion":"View view = doc.ActiveView;\n\nif (view != null \u0026\u0026 view.CropBoxActive)\n{\n    BoundingBoxXYZ cropBox = view.CropBox;\n    if (cropBox != null)\n    {\n        XYZ minPoint = new XYZ({x1} / 0.3048, {y1} / 0.3048, cropBox.Min.Z);\n        XYZ maxPoint = new XYZ({x2} / 0.3048, {y2} / 0.3048, cropBox.Max.Z);\n        cropBox.Min = minPoint;\n        cropBox.Max = maxPoint;\n        view.CropBox = cropBox;\n        view.CropBoxVisible = true;\n    }\n}"}
{"prompt":"Adjust the view\u0027s crop region to a rectangle from ({x1},{y1}) to ({x2},{y2}).","completion":"View view = doc.ActiveView;\n\nif (view != null \u0026\u0026 view.CropBoxActive)\n{\n    BoundingBoxXYZ cropBox = view.CropBox;\n    if (cropBox != null)\n    {\n        XYZ minPoint = new XYZ({x1} / 0.3048, {y1} / 0.3048, cropBox.Min.Z);\n        XYZ maxPoint = new XYZ({x2} / 0.3048, {y2} / 0.3048, cropBox.Max.Z);\n        cropBox.Min = minPoint;\n        cropBox.Max = maxPoint;\n        view.CropBox = cropBox;\n        view.CropBoxVisible = true;\n    }\n}"}
{"prompt":"Create a view filter to hide demolished walls.","completion":"Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast\u003cPhase\u003e().FirstOrDefault(p =\u003e p.Name.Contains(\"Demolished\") || p.Name.Contains(\"Demolición\"));\nView activeView = doc.ActiveView;\n\nif (demolishedPhase != null \u0026\u0026 activeView != null)\n{\n    ElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\n    FilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\n    ElementFilter filter = new ElementParameterFilter(rule);\n    ICollection\u003cElementId\u003e categories = new List\u003cElementId\u003e{ new ElementId(BuiltInCategory.OST_Walls) };\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Demolition Filter\", categories, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}
{"prompt":"Crea una abertura rectangular en un suelo.","completion":"Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\n\nif (floor != null)\n{\n    XYZ p1 = new XYZ(1 / 0.3048, 1 / 0.3048, 0);\n    XYZ p2 = new XYZ(3 / 0.3048, 1 / 0.3048, 0);\n    XYZ p3 = new XYZ(3 / 0.3048, 3 / 0.3048, 0);\n    XYZ p4 = new XYZ(1 / 0.3048, 3 / 0.3048, 0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1, p2));\n    profile.Append(Line.CreateBound(p2, p3));\n    profile.Append(Line.CreateBound(p3, p4));\n    profile.Append(Line.CreateBound(p4, p1));\n    doc.Create.NewOpening(floor, profile, true);\n}"}
{"prompt":"Create a rectangular opening in a floor.","completion":"Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\n\nif (floor != null)\n{\n    XYZ p1 = new XYZ(1 / 0.3048, 1 / 0.3048, 0);\n    XYZ p2 = new XYZ(3 / 0.3048, 1 / 0.3048, 0);\n    XYZ p3 = new XYZ(3 / 0.3048, 3 / 0.3048, 0);\n    XYZ p4 = new XYZ(1 / 0.3048, 3 / 0.3048, 0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1, p2));\n    profile.Append(Line.CreateBound(p2, p3));\n    profile.Append(Line.CreateBound(p3, p4));\n    profile.Append(Line.CreateBound(p4, p1));\n    doc.Create.NewOpening(floor, profile, true);\n}"}
{"prompt":"Crea un techo por extrusión con una pendiente del {slope_percentage}%.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null \u0026\u0026 roofType != null)\n{\n    double run = 10.0;\n    double rise = run * ({slope_percentage} / 100.0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(run / 0.3048, 0, rise / 0.3048)));\n    \n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    \n    if (refPlane != null)\n    {\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, run / 0.3048);\n    }\n}"}
{"prompt":"Generate a sloping roof by extrusion with a slope of {slope_percentage}%.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null \u0026\u0026 roofType != null)\n{\n    double run = 10.0;\n    double rise = run * ({slope_percentage} / 100.0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(run / 0.3048, 0, rise / 0.3048)));\n    \n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    \n    if (refPlane != null)\n    {\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, run / 0.3048);\n    }\n}"}
{"prompt":"Extrude a roof with a pitch of {slope_percentage}%.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null \u0026\u0026 roofType != null)\n{\n    double run = 10.0;\n    double rise = run * ({slope_percentage} / 100.0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(run / 0.3048, 0, rise / 0.3048)));\n    \n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    \n    if (refPlane != null)\n    {\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, run / 0.3048);\n    }\n}"}
{"prompt":"Create a roof with a slope of {slope_percentage}% using extrusion.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null \u0026\u0026 roofType != null)\n{\n    double run = 10.0;\n    double rise = run * ({slope_percentage} / 100.0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(run / 0.3048, 0, rise / 0.3048)));\n    \n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    \n    if (refPlane != null)\n    {\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, run / 0.3048);\n    }\n}"}
{"prompt":"Create an extrusion roof with a {slope_percentage}% slope.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null \u0026\u0026 roofType != null)\n{\n    double run = 10.0;\n    double rise = run * ({slope_percentage} / 100.0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(run / 0.3048, 0, rise / 0.3048)));\n    \n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    \n    if (refPlane != null)\n    {\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, run / 0.3048);\n    }\n}"}
{"prompt":"Draft an extruded roof element featuring a {slope_percentage}% pitch.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null \u0026\u0026 roofType != null)\n{\n    double run = 10.0;\n    double rise = run * ({slope_percentage} / 100.0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(run / 0.3048, 0, rise / 0.3048)));\n    \n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    \n    if (refPlane != null)\n    {\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, run / 0.3048);\n    }\n}"}
{"prompt":"Formulate an extruded roof structure with a {slope_percentage}% incline.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null \u0026\u0026 roofType != null)\n{\n    double run = 10.0;\n    double rise = run * ({slope_percentage} / 100.0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(run / 0.3048, 0, rise / 0.3048)));\n    \n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    \n    if (refPlane != null)\n    {\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, run / 0.3048);\n    }\n}"}
{"prompt":"Generate an extrusion for the roof, inclined at a {slope_percentage}% angle.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null \u0026\u0026 roofType != null)\n{\n    double run = 10.0;\n    double rise = run * ({slope_percentage} / 100.0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(run / 0.3048, 0, rise / 0.3048)));\n    \n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    \n    if (refPlane != null)\n    {\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, run / 0.3048);\n    }\n}"}
{"prompt":"Crea un circuito eléctrico conectando luminarias a un panel.","completion":"FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nList\u003cElementId\u003e fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\nif (panel != null \u0026\u0026 fixtureIds.Count \u003e 0)\n{\n    ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n    if(electricalSystem != null)\n    {\n        electricalSystem.SelectPanel(panel);\n    }\n}"}
{"prompt":"Create an electrical circuit connecting light fixtures to a panel.","completion":"FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nList\u003cElementId\u003e fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\nif (panel != null \u0026\u0026 fixtureIds.Count \u003e 0)\n{\n    ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n    if(electricalSystem != null)\n    {\n        electricalSystem.SelectPanel(panel);\n    }\n}"}
{"prompt":"Obtén las coordenadas del punto base y del punto de reconocimiento.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast\u003cBasePoint\u003e().FirstOrDefault(p =\u003e p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast\u003cBasePoint\u003e().FirstOrDefault(p =\u003e !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}
{"prompt":"Get the coordinates of the project base point and the survey point.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast\u003cBasePoint\u003e().FirstOrDefault(p =\u003e p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast\u003cBasePoint\u003e().FirstOrDefault(p =\u003e !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}
{"prompt":"Model a shaft opening extending from the {bottom_level_name} to the {top_level_name}.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{bottom_level_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{top_level_name}\");\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    XYZ p1 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p2 = new XYZ(8 / 0.3048, 5 / 0.3048,0);\n    XYZ p3 = new XYZ(8 / 0.3048, 8 / 0.3048,0);\n    XYZ p4 = new XYZ(5 / 0.3048, 8 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}
{"prompt":"Insert a shaft opening through the {bottom_level_name} to the {top_level_name}.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{bottom_level_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{top_level_name}\");\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    XYZ p1 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p2 = new XYZ(8 / 0.3048, 5 / 0.3048,0);\n    XYZ p3 = new XYZ(8 / 0.3048, 8 / 0.3048,0);\n    XYZ p4 = new XYZ(5 / 0.3048, 8 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}
{"prompt":"Create a shaft opening that spans from the {bottom_level_name} to the {top_level_name}.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{bottom_level_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{top_level_name}\");\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    XYZ p1 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p2 = new XYZ(8 / 0.3048, 5 / 0.3048,0);\n    XYZ p3 = new XYZ(8 / 0.3048, 8 / 0.3048,0);\n    XYZ p4 = new XYZ(5 / 0.3048, 8 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}
{"prompt":"Crea una apertura de hueco (shaft) que atraviese desde el {bottom_level_name} al {top_level_name}.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{bottom_level_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{top_level_name}\");\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    XYZ p1 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p2 = new XYZ(8 / 0.3048, 5 / 0.3048,0);\n    XYZ p3 = new XYZ(8 / 0.3048, 8 / 0.3048,0);\n    XYZ p4 = new XYZ(5 / 0.3048, 8 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}
{"prompt":"Fabricate a vertical penetration opening extending from {bottom_level_name} to {top_level_name}.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{bottom_level_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{top_level_name}\");\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    XYZ p1 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p2 = new XYZ(8 / 0.3048, 5 / 0.3048,0);\n    XYZ p3 = new XYZ(8 / 0.3048, 8 / 0.3048,0);\n    XYZ p4 = new XYZ(5 / 0.3048, 8 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}
{"prompt":"Establish a penetrating shaft opening between {bottom_level_name} and {top_level_name}.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{bottom_level_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{top_level_name}\");\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    XYZ p1 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p2 = new XYZ(8 / 0.3048, 5 / 0.3048,0);\n    XYZ p3 = new XYZ(8 / 0.3048, 8 / 0.3048,0);\n    XYZ p4 = new XYZ(5 / 0.3048, 8 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}
{"prompt":"Design a vertical shaft opening connecting from {bottom_level_name} to {top_level_name}.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{bottom_level_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{top_level_name}\");\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    XYZ p1 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p2 = new XYZ(8 / 0.3048, 5 / 0.3048,0);\n    XYZ p3 = new XYZ(8 / 0.3048, 8 / 0.3048,0);\n    XYZ p4 = new XYZ(5 / 0.3048, 8 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}
{"prompt":"Create a shaft opening that passes through from {bottom_level_name} to {top_level_name}.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{bottom_level_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{top_level_name}\");\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    XYZ p1 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p2 = new XYZ(8 / 0.3048, 5 / 0.3048,0);\n    XYZ p3 = new XYZ(8 / 0.3048, 8 / 0.3048,0);\n    XYZ p4 = new XYZ(5 / 0.3048, 8 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}
{"prompt":"Coloca una cota de elevación en una cara y un punto de vista dados.","completion":"UIDocument localUidoc = uidoc;\nReference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara superior del suelo\");\n\nView activeView = doc.ActiveView;\n\nif (faceRef != null \u0026\u0026 activeView != null)\n{\n    XYZ pointOnFace = faceRef.GlobalPoint;\n    XYZ leaderEnd = pointOnFace + new XYZ(1 / 0.3048, 1 / 0.3048, 0);\n    doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n}"}
{"prompt":"Place a spot elevation on a given face and view point.","completion":"UIDocument localUidoc = uidoc;\nReference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select the top face of the floor\");\n\nView activeView = doc.ActiveView;\n\nif (faceRef != null \u0026\u0026 activeView != null)\n{\n    XYZ pointOnFace = faceRef.GlobalPoint;\n    XYZ leaderEnd = pointOnFace + new XYZ(1 / 0.3048, 1 / 0.3048, 0);\n    doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n}"}
{"prompt":"Crea una nueva vista de alzado mirando al sur.","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null \u0026\u0026 activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 0);\n        if (aev != null)\n        {\n            aev.Name = \"Alzado Sur\";\n        }\n    }\n}"}
{"prompt":"Create a new elevation view looking south.","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null \u0026\u0026 activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 0);\n        if (aev != null)\n        {\n            aev.Name = \"South Elevation\";\n        }\n    }\n}"}
{"prompt":"Crea una nueva vista de alzado mirando al norte.","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null \u0026\u0026 activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 2);\n        if (aev != null)\n        {\n            aev.Name = \"Alzado Norte\";\n        }\n    }\n}"}
{"prompt":"Create a new elevation view looking north.","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null \u0026\u0026 activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 2);\n        if (aev != null)\n        {\n            aev.Name = \"North Elevation\";\n        }\n    }\n}"}
{"prompt":"Develop a new linear level type, denoted as \u0027{type_name}\u0027, with blue text and dimensions of {text_size_mm} millimeters.","completion":"DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast\u003cDimensionType\u003e().FirstOrDefault(dt =\u003e dt.StyleType == DimensionStyleType.Linear);\n\nif (linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"{type_name}\") as DimensionType;\n    if (newDimType != null)\n    {\n        Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (colorParam != null \u0026\u0026 !colorParam.IsReadOnly) colorParam.Set(255);\n        Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n    }\n}"}
{"prompt":"Crea un nuevo tipo de cota lineal llamado \u0027{type_name}\u0027 con texto azul y tamaño {text_size_mm}mm.","completion":"DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast\u003cDimensionType\u003e().FirstOrDefault(dt =\u003e dt.StyleType == DimensionStyleType.Linear);\n\nif (linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"{type_name}\") as DimensionType;\n    if (newDimType != null)\n    {\n        Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (colorParam != null \u0026\u0026 !colorParam.IsReadOnly) colorParam.Set(255);\n        Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n    }\n}"}
{"prompt":"Create a new linear level type named \u0027{type_name}\u0027 with blue text and size {text_size_mm} millimeters.","completion":"DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast\u003cDimensionType\u003e().FirstOrDefault(dt =\u003e dt.StyleType == DimensionStyleType.Linear);\n\nif (linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"{type_name}\") as DimensionType;\n    if (newDimType != null)\n    {\n        Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (colorParam != null \u0026\u0026 !colorParam.IsReadOnly) colorParam.Set(255);\n        Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n    }\n}"}
{"prompt":"Formulate a new linear level type, named \u0027{type_name}\u0027, with blue text and a size of {text_size_mm} millimeters.","completion":"DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast\u003cDimensionType\u003e().FirstOrDefault(dt =\u003e dt.StyleType == DimensionStyleType.Linear);\n\nif (linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"{type_name}\") as DimensionType;\n    if (newDimType != null)\n    {\n        Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (colorParam != null \u0026\u0026 !colorParam.IsReadOnly) colorParam.Set(255);\n        Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n    }\n}"}
{"prompt":"Formulate a new linear dimension type, labeled \u0027{type_name}\u0027. Adjust the text color to blue and specify the size as {text_size_mm} millimeters.","completion":"DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast\u003cDimensionType\u003e().FirstOrDefault(dt =\u003e dt.StyleType == DimensionStyleType.Linear);\n\nif (linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"{type_name}\") as DimensionType;\n    if (newDimType != null)\n    {\n        Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (colorParam != null \u0026\u0026 !colorParam.IsReadOnly) colorParam.Set(255);\n        Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n    }\n}"}
{"prompt":"Establish a fresh linear dimension type, denoted as \u0027{type_name}\u0027. Configure the text color to be blue and set the size to {text_size_mm} millimeters.","completion":"DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast\u003cDimensionType\u003e().FirstOrDefault(dt =\u003e dt.StyleType == DimensionStyleType.Linear);\n\nif (linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"{type_name}\") as DimensionType;\n    if (newDimType != null)\n    {\n        Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (colorParam != null \u0026\u0026 !colorParam.IsReadOnly) colorParam.Set(255);\n        Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n    }\n}"}
{"prompt":"Create a new linear dimension type named \u0027{type_name}\u0027 with blue text and {text_size_mm}mm size.","completion":"DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast\u003cDimensionType\u003e().FirstOrDefault(dt =\u003e dt.StyleType == DimensionStyleType.Linear);\n\nif (linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"{type_name}\") as DimensionType;\n    if (newDimType != null)\n    {\n        Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (colorParam != null \u0026\u0026 !colorParam.IsReadOnly) colorParam.Set(255);\n        Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n    }\n}"}
{"prompt":"Generate a novel linear dimension type, identified as \u0027{type_name}\u0027. Modify the text color to blue and set the size to {text_size_mm} millimeters.","completion":"DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast\u003cDimensionType\u003e().FirstOrDefault(dt =\u003e dt.StyleType == DimensionStyleType.Linear);\n\nif (linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"{type_name}\") as DimensionType;\n    if (newDimType != null)\n    {\n        Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (colorParam != null \u0026\u0026 !colorParam.IsReadOnly) colorParam.Set(255);\n        Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n    }\n}"}
{"prompt":"Crea una apertura de hueco vertical (shaft) desde el nivel base hasta el nivel más alto.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.ProjectElevation).FirstOrDefault();\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderByDescending(l =\u003e l.ProjectElevation).FirstOrDefault();\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    XYZ p1 = new XYZ(2 / 0.3048, 2 / 0.3048,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 2 / 0.3048,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(2 / 0.3048, 5 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}
{"prompt":"Create a vertical shaft opening from the base level to the top level.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.ProjectElevation).FirstOrDefault();\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderByDescending(l =\u003e l.ProjectElevation).FirstOrDefault();\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    XYZ p1 = new XYZ(2 / 0.3048, 2 / 0.3048,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 2 / 0.3048,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(2 / 0.3048, 5 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}
{"prompt":"Create a new text style of {text_size_mm}mm, color blue.","completion":"string newTypeName = \"{text_size_mm}mm Azul\";\nTextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n        \n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly) lineColorParam.Set(255);\n    }\n}"}
{"prompt":"Crea un nuevo tipo de texto de {text_size_mm}mm de color azul.","completion":"string newTypeName = \"{text_size_mm}mm Azul\";\nTextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n        \n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly) lineColorParam.Set(255);\n    }\n}"}
{"prompt":"Establish a new text type with a size of {text_size_mm}mm and a color of blue.","completion":"string newTypeName = \"{text_size_mm}mm Azul\";\nTextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n        \n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly) lineColorParam.Set(255);\n    }\n}"}
{"prompt":"Formulate a new text style with dimensions {text_size_mm}mm and a color of blue.","completion":"string newTypeName = \"{text_size_mm}mm Azul\";\nTextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n        \n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly) lineColorParam.Set(255);\n    }\n}"}
{"prompt":"Produce a fresh text style with a size of {text_size_mm} millimeters, utilizing a blue color.","completion":"string newTypeName = \"{text_size_mm}mm Blue\";\nTextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n        \n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly) lineColorParam.Set(255);\n    }\n}"}
{"prompt":"Create a new {text_size_mm}mm text type in blue color.","completion":"string newTypeName = \"{text_size_mm}mm Blue\";\nTextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n        \n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly) lineColorParam.Set(255);\n    }\n}"}
{"prompt":"Formulate a new text style, measuring {text_size_mm} millimeters, in a shade of blue.","completion":"string newTypeName = \"{text_size_mm}mm Blue\";\nTextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n        \n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly) lineColorParam.Set(255);\n    }\n}"}
{"prompt":"Establish a novel text type with a dimension of {text_size_mm} millimeters, in a blue hue.","completion":"string newTypeName = \"{text_size_mm}mm Blue\";\nTextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n        \n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly) lineColorParam.Set(255);\n    }\n}"}
{"prompt":"Model a floor plan featuring a circular central void of radius {radius_m} meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    XYZ p1 = new XYZ(-10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p2 = new XYZ(10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p3 = new XYZ(10 / 0.3048, 10 / 0.3048, 0);\n    XYZ p4 = new XYZ(-10 / 0.3048, 10 / 0.3048, 0);\n    CurveLoop outerLoop = new CurveLoop();\n    outerLoop.Append(Line.CreateBound(p1, p2));\n    outerLoop.Append(Line.CreateBound(p2, p3));\n    outerLoop.Append(Line.CreateBound(p3, p4));\n    outerLoop.Append(Line.CreateBound(p4, p1));\n\n    XYZ center = XYZ.Zero;\n    double radius = {radius_m} / 0.3048;\n    CurveLoop innerLoop = new CurveLoop();\n    innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n    innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n    Floor.Create(doc, new List\u003cCurveLoop\u003e { outerLoop, innerLoop }, floorType.Id, level.Id);\n}"}
{"prompt":"Insert a circular central opening of radius {radius_m} meters in the floor plan.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    XYZ p1 = new XYZ(-10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p2 = new XYZ(10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p3 = new XYZ(10 / 0.3048, 10 / 0.3048, 0);\n    XYZ p4 = new XYZ(-10 / 0.3048, 10 / 0.3048, 0);\n    CurveLoop outerLoop = new CurveLoop();\n    outerLoop.Append(Line.CreateBound(p1, p2));\n    outerLoop.Append(Line.CreateBound(p2, p3));\n    outerLoop.Append(Line.CreateBound(p3, p4));\n    outerLoop.Append(Line.CreateBound(p4, p1));\n\n    XYZ center = XYZ.Zero;\n    double radius = {radius_m} / 0.3048;\n    CurveLoop innerLoop = new CurveLoop();\n    innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n    innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n    Floor.Create(doc, new List\u003cCurveLoop\u003e { outerLoop, innerLoop }, floorType.Id, level.Id);\n}"}
{"prompt":"Crea un suelo con un hueco circular de radio {radius_m}m en el centro.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    XYZ p1 = new XYZ(-10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p2 = new XYZ(10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p3 = new XYZ(10 / 0.3048, 10 / 0.3048, 0);\n    XYZ p4 = new XYZ(-10 / 0.3048, 10 / 0.3048, 0);\n    CurveLoop outerLoop = new CurveLoop();\n    outerLoop.Append(Line.CreateBound(p1, p2));\n    outerLoop.Append(Line.CreateBound(p2, p3));\n    outerLoop.Append(Line.CreateBound(p3, p4));\n    outerLoop.Append(Line.CreateBound(p4, p1));\n\n    XYZ center = XYZ.Zero;\n    double radius = {radius_m} / 0.3048;\n    CurveLoop innerLoop = new CurveLoop();\n    innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n    innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n    Floor.Create(doc, new List\u003cCurveLoop\u003e { outerLoop, innerLoop }, floorType.Id, level.Id);\n}"}
{"prompt":"Create a floor plan with a central circular opening of radius {radius_m} meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    XYZ p1 = new XYZ(-10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p2 = new XYZ(10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p3 = new XYZ(10 / 0.3048, 10 / 0.3048, 0);\n    XYZ p4 = new XYZ(-10 / 0.3048, 10 / 0.3048, 0);\n    CurveLoop outerLoop = new CurveLoop();\n    outerLoop.Append(Line.CreateBound(p1, p2));\n    outerLoop.Append(Line.CreateBound(p2, p3));\n    outerLoop.Append(Line.CreateBound(p3, p4));\n    outerLoop.Append(Line.CreateBound(p4, p1));\n\n    XYZ center = XYZ.Zero;\n    double radius = {radius_m} / 0.3048;\n    CurveLoop innerLoop = new CurveLoop();\n    innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n    innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n    Floor.Create(doc, new List\u003cCurveLoop\u003e { outerLoop, innerLoop }, floorType.Id, level.Id);\n}"}
{"prompt":"Produce a floor model incorporating a circular aperture with a radius of {radius_m} meters in its center.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    XYZ p1 = new XYZ(-10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p2 = new XYZ(10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p3 = new XYZ(10 / 0.3048, 10 / 0.3048, 0);\n    XYZ p4 = new XYZ(-10 / 0.3048, 10 / 0.3048, 0);\n    CurveLoop outerLoop = new CurveLoop();\n    outerLoop.Append(Line.CreateBound(p1, p2));\n    outerLoop.Append(Line.CreateBound(p2, p3));\n    outerLoop.Append(Line.CreateBound(p3, p4));\n    outerLoop.Append(Line.CreateBound(p4, p1));\n\n    XYZ center = XYZ.Zero;\n    double radius = {radius_m} / 0.3048;\n    CurveLoop innerLoop = new CurveLoop();\n    innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n    innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n    Floor.Create(doc, new List\u003cCurveLoop\u003e { outerLoop, innerLoop }, floorType.Id, level.Id);\n}"}
{"prompt":"Develop a floor layout including a circular opening of {radius_m} meters in its central position.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    XYZ p1 = new XYZ(-10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p2 = new XYZ(10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p3 = new XYZ(10 / 0.3048, 10 / 0.3048, 0);\n    XYZ p4 = new XYZ(-10 / 0.3048, 10 / 0.3048, 0);\n    CurveLoop outerLoop = new CurveLoop();\n    outerLoop.Append(Line.CreateBound(p1, p2));\n    outerLoop.Append(Line.CreateBound(p2, p3));\n    outerLoop.Append(Line.CreateBound(p3, p4));\n    outerLoop.Append(Line.CreateBound(p4, p1));\n\n    XYZ center = XYZ.Zero;\n    double radius = {radius_m} / 0.3048;\n    CurveLoop innerLoop = new CurveLoop();\n    innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n    innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n    Floor.Create(doc, new List\u003cCurveLoop\u003e { outerLoop, innerLoop }, floorType.Id, level.Id);\n}"}
{"prompt":"Generate a floor plan featuring a central circular void of radius {radius_m} meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    XYZ p1 = new XYZ(-10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p2 = new XYZ(10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p3 = new XYZ(10 / 0.3048, 10 / 0.3048, 0);\n    XYZ p4 = new XYZ(-10 / 0.3048, 10 / 0.3048, 0);\n    CurveLoop outerLoop = new CurveLoop();\n    outerLoop.Append(Line.CreateBound(p1, p2));\n    outerLoop.Append(Line.CreateBound(p2, p3));\n    outerLoop.Append(Line.CreateBound(p3, p4));\n    outerLoop.Append(Line.CreateBound(p4, p1));\n\n    XYZ center = XYZ.Zero;\n    double radius = {radius_m} / 0.3048;\n    CurveLoop innerLoop = new CurveLoop();\n    innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n    innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n    Floor.Create(doc, new List\u003cCurveLoop\u003e { outerLoop, innerLoop }, floorType.Id, level.Id);\n}"}
{"prompt":"Create a floor with a circular hole of radius {radius_m}m in the center.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    XYZ p1 = new XYZ(-10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p2 = new XYZ(10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p3 = new XYZ(10 / 0.3048, 10 / 0.3048, 0);\n    XYZ p4 = new XYZ(-10 / 0.3048, 10 / 0.3048, 0);\n    CurveLoop outerLoop = new CurveLoop();\n    outerLoop.Append(Line.CreateBound(p1, p2));\n    outerLoop.Append(Line.CreateBound(p2, p3));\n    outerLoop.Append(Line.CreateBound(p3, p4));\n    outerLoop.Append(Line.CreateBound(p4, p1));\n\n    XYZ center = XYZ.Zero;\n    double radius = {radius_m} / 0.3048;\n    CurveLoop innerLoop = new CurveLoop();\n    innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n    innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n    Floor.Create(doc, new List\u003cCurveLoop\u003e { outerLoop, innerLoop }, floorType.Id, level.Id);\n}"}
{"prompt":"Crea un techo por extrusión con una pendiente del {slope_percentage}%.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null \u0026\u0026 roofType != null)\n{\n    double run = 10.0;\n    double rise = run * ({slope_percentage} / 100.0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(run / 0.3048, 0, rise / 0.3048)));\n    \n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    \n    if (refPlane != null)\n    {\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, run / 0.3048);\n    }\n}"}
{"prompt":"Create a roof by extrusion with a slope of {slope_percentage}%.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null \u0026\u0026 roofType != null)\n{\n    double run = 10.0;\n    double rise = run * ({slope_percentage} / 100.0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(run / 0.3048, 0, rise / 0.3048)));\n    \n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    \n    if (refPlane != null)\n    {\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, run / 0.3048);\n    }\n}"}
{"prompt":"Construct a sloped roof with a pitch of {slope_percentage}%.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null \u0026\u0026 roofType != null)\n{\n    double run = 10.0;\n    double rise = run * ({slope_percentage} / 100.0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(run / 0.3048, 0, rise / 0.3048)));\n    \n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    \n    if (refPlane != null)\n    {\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, run / 0.3048);\n    }\n}"}
{"prompt":"Generate a pitched roof with a slope of {slope_percentage}%.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null \u0026\u0026 roofType != null)\n{\n    double run = 10.0;\n    double rise = run * ({slope_percentage} / 100.0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(run / 0.3048, 0, rise / 0.3048)));\n    \n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    \n    if (refPlane != null)\n    {\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, run / 0.3048);\n    }\n}"}
{"prompt":"Create an extrusion roof with a {slope_percentage}% slope.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null \u0026\u0026 roofType != null)\n{\n    double run = 10.0;\n    double rise = run * ({slope_percentage} / 100.0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(run / 0.3048, 0, rise / 0.3048)));\n    \n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    \n    if (refPlane != null)\n    {\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, run / 0.3048);\n    }\n}"}
{"prompt":"Develop an extruded roof with a {slope_percentage}% pitch.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null \u0026\u0026 roofType != null)\n{\n    double run = 10.0;\n    double rise = run * ({slope_percentage} / 100.0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(run / 0.3048, 0, rise / 0.3048)));\n    \n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    \n    if (refPlane != null)\n    {\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, run / 0.3048);\n    }\n}"}
{"prompt":"Model an extrusion roof featuring a {slope_percentage}% incline.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null \u0026\u0026 roofType != null)\n{\n    double run = 10.0;\n    double rise = run * ({slope_percentage} / 100.0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(run / 0.3048, 0, rise / 0.3048)));\n    \n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    \n    if (refPlane != null)\n    {\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, run / 0.3048);\n    }\n}"}
{"prompt":"Design an extruded roof boasting a {slope_percentage}% slope.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null \u0026\u0026 roofType != null)\n{\n    double run = 10.0;\n    double rise = run * ({slope_percentage} / 100.0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(run / 0.3048, 0, rise / 0.3048)));\n    \n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    \n    if (refPlane != null)\n    {\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, run / 0.3048);\n    }\n}"}
{"prompt":"Crea un circuito eléctrico conectando luminarias a un panel.","completion":"FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nList\u003cElementId\u003e fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\nif (panel != null \u0026\u0026 fixtureIds.Count \u003e 0)\n{\n    ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n    if(electricalSystem != null)\n    {\n        electricalSystem.SelectPanel(panel);\n    }\n}"}
{"prompt":"Create an electrical circuit connecting light fixtures to a panel.","completion":"FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nList\u003cElementId\u003e fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\nif (panel != null \u0026\u0026 fixtureIds.Count \u003e 0)\n{\n    ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n    if(electricalSystem != null)\n    {\n        electricalSystem.SelectPanel(panel);\n    }\n}"}
{"prompt":"Obtén las coordenadas del punto base y del punto de reconocimiento.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast\u003cBasePoint\u003e().FirstOrDefault(p =\u003e p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast\u003cBasePoint\u003e().FirstOrDefault(p =\u003e !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}
{"prompt":"Get the coordinates of the project base point and the survey point.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast\u003cBasePoint\u003e().FirstOrDefault(p =\u003e p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast\u003cBasePoint\u003e().FirstOrDefault(p =\u003e !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}
{"prompt":"Create a penetration shaft from the {bottom_level_name} to the {top_level_name}.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{bottom_level_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{top_level_name}\");\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    XYZ p1 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p2 = new XYZ(8 / 0.3048, 5 / 0.3048,0);\n    XYZ p3 = new XYZ(8 / 0.3048, 8 / 0.3048,0);\n    XYZ p4 = new XYZ(5 / 0.3048, 8 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}
{"prompt":"Design a vertical opening, extending from the {bottom_level_name} to the {top_level_name}.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{bottom_level_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{top_level_name}\");\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    XYZ p1 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p2 = new XYZ(8 / 0.3048, 5 / 0.3048,0);\n    XYZ p3 = new XYZ(8 / 0.3048, 8 / 0.3048,0);\n    XYZ p4 = new XYZ(5 / 0.3048, 8 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}
{"prompt":"Model a shaft opening that spans from the {bottom_level_name} to the {top_level_name}.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{bottom_level_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{top_level_name}\");\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    XYZ p1 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p2 = new XYZ(8 / 0.3048, 5 / 0.3048,0);\n    XYZ p3 = new XYZ(8 / 0.3048, 8 / 0.3048,0);\n    XYZ p4 = new XYZ(5 / 0.3048, 8 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}
{"prompt":"Crea una apertura de hueco (shaft) que atraviese desde el {bottom_level_name} al {top_level_name}.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{bottom_level_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{top_level_name}\");\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    XYZ p1 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p2 = new XYZ(8 / 0.3048, 5 / 0.3048,0);\n    XYZ p3 = new XYZ(8 / 0.3048, 8 / 0.3048,0);\n    XYZ p4 = new XYZ(5 / 0.3048, 8 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}
{"prompt":"Establish a penetration in the vertical axis, spanning from {bottom_level_name} to {top_level_name}.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{bottom_level_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{top_level_name}\");\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    XYZ p1 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p2 = new XYZ(8 / 0.3048, 5 / 0.3048,0);\n    XYZ p3 = new XYZ(8 / 0.3048, 8 / 0.3048,0);\n    XYZ p4 = new XYZ(5 / 0.3048, 8 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}
{"prompt":"Formulate a vertical aperture extending from {bottom_level_name} to {top_level_name}.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{bottom_level_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{top_level_name}\");\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    XYZ p1 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p2 = new XYZ(8 / 0.3048, 5 / 0.3048,0);\n    XYZ p3 = new XYZ(8 / 0.3048, 8 / 0.3048,0);\n    XYZ p4 = new XYZ(5 / 0.3048, 8 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}
{"prompt":"Delineate a vertical opening connecting {bottom_level_name} to {top_level_name}.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{bottom_level_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{top_level_name}\");\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    XYZ p1 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p2 = new XYZ(8 / 0.3048, 5 / 0.3048,0);\n    XYZ p3 = new XYZ(8 / 0.3048, 8 / 0.3048,0);\n    XYZ p4 = new XYZ(5 / 0.3048, 8 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}
{"prompt":"Create a shaft opening that passes through from {bottom_level_name} to {top_level_name}.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{bottom_level_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{top_level_name}\");\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    XYZ p1 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p2 = new XYZ(8 / 0.3048, 5 / 0.3048,0);\n    XYZ p3 = new XYZ(8 / 0.3048, 8 / 0.3048,0);\n    XYZ p4 = new XYZ(5 / 0.3048, 8 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}
{"prompt":"Add a text tag with \u0027{content}\u0027 and an arrow pointing to a selected object.","completion":"UIDocument localUidoc = uidoc;\nReference target = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para anotar\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (target != null \u0026\u0026 textLocation != null \u0026\u0026 activeView != null \u0026\u0026 defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    opts.HorizontalAlignment = HorizontalTextAlignment.Left;\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{content}\", opts);\n    if (note != null)\n    {\n        Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n        leader.End = target.GlobalPoint;\n    }\n}"}
{"prompt":"Insert a text note containing \u0027{content}\u0027 and a pointing arrow towards a selected element.","completion":"UIDocument localUidoc = uidoc;\nReference target = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para anotar\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (target != null \u0026\u0026 textLocation != null \u0026\u0026 activeView != null \u0026\u0026 defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    opts.HorizontalAlignment = HorizontalTextAlignment.Left;\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{content}\", opts);\n    if (note != null)\n    {\n        Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n        leader.End = target.GlobalPoint;\n    }\n}"}
{"prompt":"Crea una nota de texto con el contenido \u0027{content}\u0027 y una flecha apuntando a un elemento seleccionado.","completion":"UIDocument localUidoc = uidoc;\nReference target = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para anotar\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (target != null \u0026\u0026 textLocation != null \u0026\u0026 activeView != null \u0026\u0026 defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    opts.HorizontalAlignment = HorizontalTextAlignment.Left;\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{content}\", opts);\n    if (note != null)\n    {\n        Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n        leader.End = target.GlobalPoint;\n    }\n}"}
{"prompt":"Create a text note with content \u0027{content}\u0027 and a leader pointing to a selected element.","completion":"UIDocument localUidoc = uidoc;\nReference target = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (target != null \u0026\u0026 textLocation != null \u0026\u0026 activeView != null \u0026\u0026 defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    opts.HorizontalAlignment = HorizontalTextAlignment.Left;\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{content}\", opts);\n    if (note != null)\n    {\n        Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n        leader.End = target.GlobalPoint;\n    }\n}"}
{"prompt":"Generate a text annotation containing \u0027{content}\u0027 and a leader pointing to a designated component within the model.","completion":"UIDocument localUidoc = uidoc;\nReference target = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (target != null \u0026\u0026 textLocation != null \u0026\u0026 activeView != null \u0026\u0026 defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    opts.HorizontalAlignment = HorizontalTextAlignment.Left;\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{content}\", opts);\n    if (note != null)\n    {\n        Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n        leader.End = target.GlobalPoint;\n    }\n}"}
{"prompt":"Add a note to the model with the given text \u0027{content}\u0027 and a leader line that references a selected element.","completion":"UIDocument localUidoc = uidoc;\nReference target = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (target != null \u0026\u0026 textLocation != null \u0026\u0026 activeView != null \u0026\u0026 defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    opts.HorizontalAlignment = HorizontalTextAlignment.Left;\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{content}\", opts);\n    if (note != null)\n    {\n        Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n        leader.End = target.GlobalPoint;\n    }\n}"}
{"prompt":"Insert a text note with specified content \u0027{content}\u0027 and a leader line directed towards a chosen element.","completion":"UIDocument localUidoc = uidoc;\nReference target = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (target != null \u0026\u0026 textLocation != null \u0026\u0026 activeView != null \u0026\u0026 defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    opts.HorizontalAlignment = HorizontalTextAlignment.Left;\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{content}\", opts);\n    if (note != null)\n    {\n        Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n        leader.End = target.GlobalPoint;\n    }\n}"}
{"prompt":"Coloca una cota de elevación en una cara y un punto de vista dados.","completion":"UIDocument localUidoc = uidoc;\nReference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara superior del suelo\");\n\nView activeView = doc.ActiveView;\n\nif (faceRef != null \u0026\u0026 activeView != null)\n{\n    XYZ pointOnFace = faceRef.GlobalPoint;\n    XYZ leaderEnd = pointOnFace + new XYZ(1 / 0.3048, 1 / 0.3048, 0);\n    doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n}"}
{"prompt":"Place a spot elevation on a given face and view point.","completion":"UIDocument localUidoc = uidoc;\nReference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select the top face of the floor\");\n\nView activeView = doc.ActiveView;\n\nif (faceRef != null \u0026\u0026 activeView != null)\n{\n    XYZ pointOnFace = faceRef.GlobalPoint;\n    XYZ leaderEnd = pointOnFace + new XYZ(1 / 0.3048, 1 / 0.3048, 0);\n    doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n}"}
{"prompt":"Establish a new south-facing elevation view, name it \u0027{view_name}\u0027.","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null \u0026\u0026 activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 0);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}
{"prompt":"Generate an elevation looking south and label it \u0027{view_name}\u0027.","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null \u0026\u0026 activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 0);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}
{"prompt":"Generate a south-facing elevation, labeling it as \u0027{view_name}\u0027.","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null \u0026\u0026 activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 0);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}
{"prompt":"Produce a new elevation, oriented southward, with the name \u0027{view_name}\u0027.","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null \u0026\u0026 activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 0);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}
{"prompt":"Produce a new south-facing elevation, label it \u0027{view_name}\u0027.","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null \u0026\u0026 activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 0);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}
{"prompt":"Establish a new elevation view facing south, designate it as \u0027{view_name}\u0027.","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null \u0026\u0026 activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 0);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}
{"prompt":"Create a new elevation view facing south, named \u0027{view_name}\u0027.","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null \u0026\u0026 activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 0);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}
{"prompt":"Create and label a south-facing elevation as \u0027{view_name}\u0027.","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null \u0026\u0026 activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 0);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}
{"prompt":"Crea una nueva vista de alzado mirando al sur con el nombre \"{view_name}\".","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null \u0026\u0026 activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 0);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}
{"prompt":"Form a new elevation looking south, label it \u0027{view_name}\u0027.","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null \u0026\u0026 activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 0);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}
{"prompt":"Form a new elevation view facing south, label it \u0027{view_name}\u0027.","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null \u0026\u0026 activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 0);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}
{"prompt":"Generate a new elevation perspective, oriented towards the south, and label it as \u0027{view_name}\u0027.","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null \u0026\u0026 activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 0);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}
{"prompt":"Create a new elevation view looking south named \"{view_name}\".","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null \u0026\u0026 activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 0);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}
{"prompt":"Establish a new south-facing elevation, and assign it the name \u0027{view_name}\u0027.","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null \u0026\u0026 activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 0);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}
{"prompt":"Produce an additional elevation drawing, facing south, and name it \u0027{view_name}\u0027.","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null \u0026\u0026 activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 0);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}
{"prompt":"Generate a new north-facing elevation with the label \"{view_name}\".","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null \u0026\u0026 activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 2);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}
{"prompt":"Establish a new elevation perspective pointing northward and name it \"{view_name}\".","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null \u0026\u0026 activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 2);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}
{"prompt":"Crea una nueva vista de alzado mirando al norte con el nombre \"{view_name}\".","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null \u0026\u0026 activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 2);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}
{"prompt":"Create a new elevation view facing north with the name \"{view_name}\".","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null \u0026\u0026 activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 2);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}
{"prompt":"Establish a novel elevation perspective, oriented towards the north, and label it \u0027{view_name}\u0027.","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null \u0026\u0026 activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 2);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}
{"prompt":"Produce an elevation drawing facing north, designate it as \u0027{view_name}\u0027.","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null \u0026\u0026 activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 2);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}
{"prompt":"Generate a new north-facing elevation, nomenclature \u0027{view_name}\u0027.","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null \u0026\u0026 activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 2);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}
{"prompt":"Create a new elevation view looking north named \"{view_name}\".","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null \u0026\u0026 activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 2);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}
{"prompt":"Crea un nuevo tipo de cota lineal llamado \u0027{type_name}\u0027 con texto azul y tamaño {text_size_mm}mm.","completion":"DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast\u003cDimensionType\u003e().FirstOrDefault(dt =\u003e dt.StyleType == DimensionStyleType.Linear);\n\nif (linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"{type_name}\") as DimensionType;\n    if (newDimType != null)\n    {\n        Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (colorParam != null \u0026\u0026 !colorParam.IsReadOnly) colorParam.Set(255);\n        Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n    }\n}"}
{"prompt":"Create a new linear level type called \u0027{type_name}\u0027, characterized by blue text and a size of {text_size_mm}mm.","completion":"DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast\u003cDimensionType\u003e().FirstOrDefault(dt =\u003e dt.StyleType == DimensionStyleType.Linear);\n\nif (linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"{type_name}\") as DimensionType;\n    if (newDimType != null)\n    {\n        Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (colorParam != null \u0026\u0026 !colorParam.IsReadOnly) colorParam.Set(255);\n        Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n    }\n}"}
{"prompt":"Establish a new linear level type named \u0027{type_name}\u0027, featuring blue text and {text_size_mm}mm in size.","completion":"DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast\u003cDimensionType\u003e().FirstOrDefault(dt =\u003e dt.StyleType == DimensionStyleType.Linear);\n\nif (linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"{type_name}\") as DimensionType;\n    if (newDimType != null)\n    {\n        Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (colorParam != null \u0026\u0026 !colorParam.IsReadOnly) colorParam.Set(255);\n        Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n    }\n}"}
{"prompt":"Formulate a new linear level type named \u0027{type_name}\u0027, marked by blue text and {text_size_mm}mm in dimension.","completion":"DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast\u003cDimensionType\u003e().FirstOrDefault(dt =\u003e dt.StyleType == DimensionStyleType.Linear);\n\nif (linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"{type_name}\") as DimensionType;\n    if (newDimType != null)\n    {\n        Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (colorParam != null \u0026\u0026 !colorParam.IsReadOnly) colorParam.Set(255);\n        Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n    }\n}"}
{"prompt":"Establish a novel linear dimension type, designated as \u0027{type_name}\u0027. Configure the text color to blue and set the size to {text_size_mm} millimeters.","completion":"DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast\u003cDimensionType\u003e().FirstOrDefault(dt =\u003e dt.StyleType == DimensionStyleType.Linear);\n\nif (linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"{type_name}\") as DimensionType;\n    if (newDimType != null)\n    {\n        Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (colorParam != null \u0026\u0026 !colorParam.IsReadOnly) colorParam.Set(255);\n        Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n    }\n}"}
{"prompt":"Design a new dimension type, labeled as \u0027{type_name}\u0027. Adjust the text color to blue and specify the size as {text_size_mm} millimeters.","completion":"DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast\u003cDimensionType\u003e().FirstOrDefault(dt =\u003e dt.StyleType == DimensionStyleType.Linear);\n\nif (linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"{type_name}\") as DimensionType;\n    if (newDimType != null)\n    {\n        Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (colorParam != null \u0026\u0026 !colorParam.IsReadOnly) colorParam.Set(255);\n        Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n    }\n}"}
{"prompt":"Create a new linear dimension type named \u0027{type_name}\u0027 with blue text and {text_size_mm}mm size.","completion":"DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast\u003cDimensionType\u003e().FirstOrDefault(dt =\u003e dt.StyleType == DimensionStyleType.Linear);\n\nif (linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"{type_name}\") as DimensionType;\n    if (newDimType != null)\n    {\n        Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (colorParam != null \u0026\u0026 !colorParam.IsReadOnly) colorParam.Set(255);\n        Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n    }\n}"}
{"prompt":"Formulate a fresh dimension type, christened as \u0027{type_name}\u0027. Ensure the text hue is blue and the size is set to {text_size_mm} millimeters.","completion":"DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast\u003cDimensionType\u003e().FirstOrDefault(dt =\u003e dt.StyleType == DimensionStyleType.Linear);\n\nif (linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"{type_name}\") as DimensionType;\n    if (newDimType != null)\n    {\n        Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (colorParam != null \u0026\u0026 !colorParam.IsReadOnly) colorParam.Set(255);\n        Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n    }\n}"}
{"prompt":"Crea una apertura de hueco vertical (shaft) desde el nivel base hasta el nivel más alto.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.ProjectElevation).FirstOrDefault();\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderByDescending(l =\u003e l.ProjectElevation).FirstOrDefault();\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    XYZ p1 = new XYZ(2 / 0.3048, 2 / 0.3048,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 2 / 0.3048,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(2 / 0.3048, 5 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}
{"prompt":"Create a vertical shaft opening from the base level to the top level.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.ProjectElevation).FirstOrDefault();\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderByDescending(l =\u003e l.ProjectElevation).FirstOrDefault();\n\nif (bottomLevel != null \u0026\u0026 topLevel != null)\n{\n    XYZ p1 = new XYZ(2 / 0.3048, 2 / 0.3048,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 2 / 0.3048,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(2 / 0.3048, 5 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}
{"prompt":"Find doors on level \u0027{level_name}\u0027 that are instances of family \u0027{family_name}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Encuentra todas las puertas del nivel \u0027{level_name}\u0027 que sean de la familia \u0027{family_name}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Locate all doors on level \u0027{level_name}\u0027 that belong to family \u0027{family_name}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Identify doors from family \u0027{family_name}\u0027 on level \u0027{level_name}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Locate all doors on the level \u0027{level_name}\u0027 that are part of the \u0027{family_name}\u0027 family.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Find all doors on level \u0027{level_name}\u0027 that belong to the \u0027{family_name}\u0027 family.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Identify doors on the \u0027{level_name}\u0027 level that are associated with the \u0027{family_name}\u0027 family.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Determine doors on level \u0027{level_name}\u0027 that fall under the \u0027{family_name}\u0027 family.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Establish a new text style named \u0027{type_name}\u0027 with a size of {text_size_mm}mm in green hue.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nTextNoteType newType = null;\nif (defaultType != null)\n{\n    newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Set up a new text style called \u0027{type_name}\u0027 with a size of {text_size_mm}mm in green shade.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nTextNoteType newType = null;\nif (defaultType != null)\n{\n    newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Crea un nuevo tipo de texto llamado \u0027{type_name}\u0027 de {text_size_mm}mm de color verde.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nTextNoteType newType = null;\nif (defaultType != null)\n{\n    newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Create a new text type named \u0027{type_name}\u0027 with a size of {text_size_mm}mm in green color.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nTextNoteType newType = null;\nif (defaultType != null)\n{\n    newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Create a new {text_size_mm}mm text type named \u0027{type_name}\u0027 in green color.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nTextNoteType newType = null;\nif (defaultType != null)\n{\n    newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Establish a novel text type designated as \u0027{type_name}\u0027, with a size of {text_size_mm} millimeters, in a green color.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nTextNoteType newType = null;\nif (defaultType != null)\n{\n    newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Formulate a fresh text style, named \u0027{type_name}\u0027, featuring a dimension of {text_size_mm} millimeters, and a hue of green.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nTextNoteType newType = null;\nif (defaultType != null)\n{\n    newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Develop a new text format, labeled \u0027{type_name}\u0027, containing a measurement of {text_size_mm} millimeters, and a chromaticity of green.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nTextNoteType newType = null;\nif (defaultType != null)\n{\n    newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Replicate the floor plan view \u0027{view_name}\u0027 and label it as \u0027{template_name}\u0027.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cViewPlan\u003e().FirstOrDefault(v =\u003e v.Name == \"{view_name}\");\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{template_name}\";\n    }\n}"}
{"prompt":"Create a duplicate of the floor plan view \u0027{view_name}\u0027 and rename it to \u0027{template_name}\u0027.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cViewPlan\u003e().FirstOrDefault(v =\u003e v.Name == \"{view_name}\");\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{template_name}\";\n    }\n}"}
{"prompt":"Duplicate and rename the existing floor plan view as \u0027{template_name}\u0027 from \u0027{view_name}\u0027.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cViewPlan\u003e().FirstOrDefault(v =\u003e v.Name == \"{view_name}\");\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{template_name}\";\n    }\n}"}
{"prompt":"Duplica la vista de planta \u0027{view_name}\u0027 y nómbrala \u0027{template_name}\u0027.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cViewPlan\u003e().FirstOrDefault(v =\u003e v.Name == \"{view_name}\");\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{template_name}\";\n    }\n}"}
{"prompt":"Duplicate the existing \u0027{view_name}\u0027 plan view and label it as \u0027{template_name}\u0027.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cViewPlan\u003e().FirstOrDefault(v =\u003e v.Name == \"{view_name}\");\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{template_name}\";\n    }\n}"}
{"prompt":"Replicate the \u0027{view_name}\u0027 plan view and rename it as \u0027{template_name}\u0027.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cViewPlan\u003e().FirstOrDefault(v =\u003e v.Name == \"{view_name}\");\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{template_name}\";\n    }\n}"}
{"prompt":"Duplicate the \u0027{view_name}\u0027 plan view and name it \u0027{template_name}\u0027.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cViewPlan\u003e().FirstOrDefault(v =\u003e v.Name == \"{view_name}\");\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{template_name}\";\n    }\n}"}
{"prompt":"Copy the \u0027{view_name}\u0027 plan view and rename the duplicate \u0027{template_name}\u0027.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cViewPlan\u003e().FirstOrDefault(v =\u003e v.Name == \"{view_name}\");\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{template_name}\";\n    }\n}"}
{"prompt":"Displace the base point of the project {distance_m} meters to the north.","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast\u003cBasePoint\u003e().FirstOrDefault(bp =\u003e !bp.IsShared);\n\nif (projectBasePoint != null)\n{\n    XYZ translation = new XYZ(0, {distance_m} / 0.3048, 0);\n    ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n}"}
{"prompt":"Shift the project\u0027s base point {distance_m} meters northward.","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast\u003cBasePoint\u003e().FirstOrDefault(bp =\u003e !bp.IsShared);\n\nif (projectBasePoint != null)\n{\n    XYZ translation = new XYZ(0, {distance_m} / 0.3048, 0);\n    ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n}"}
{"prompt":"Relocate the base of the project {distance_m} meters northwards.","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast\u003cBasePoint\u003e().FirstOrDefault(bp =\u003e !bp.IsShared);\n\nif (projectBasePoint != null)\n{\n    XYZ translation = new XYZ(0, {distance_m} / 0.3048, 0);\n    ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n}"}
{"prompt":"Mueve el punto base del proyecto {distance_m} metros hacia el norte.","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast\u003cBasePoint\u003e().FirstOrDefault(bp =\u003e !bp.IsShared);\n\nif (projectBasePoint != null)\n{\n    XYZ translation = new XYZ(0, {distance_m} / 0.3048, 0);\n    ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n}"}
{"prompt":"Move the project base point {distance_m} meters to the north.","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast\u003cBasePoint\u003e().FirstOrDefault(bp =\u003e !bp.IsShared);\n\nif (projectBasePoint != null)\n{\n    XYZ translation = new XYZ(0, {distance_m} / 0.3048, 0);\n    ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n}"}
{"prompt":"Shift the project base point {distance_m} meters northward.","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast\u003cBasePoint\u003e().FirstOrDefault(bp =\u003e !bp.IsShared);\n\nif (projectBasePoint != null)\n{\n    XYZ translation = new XYZ(0, {distance_m} / 0.3048, 0);\n    ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n}"}
{"prompt":"Translate the project base point {distance_m} meters north.","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast\u003cBasePoint\u003e().FirstOrDefault(bp =\u003e !bp.IsShared);\n\nif (projectBasePoint != null)\n{\n    XYZ translation = new XYZ(0, {distance_m} / 0.3048, 0);\n    ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n}"}
{"prompt":"Relocate the project base point {distance_m} meters towards the northern direction.","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast\u003cBasePoint\u003e().FirstOrDefault(bp =\u003e !bp.IsShared);\n\nif (projectBasePoint != null)\n{\n    XYZ translation = new XYZ(0, {distance_m} / 0.3048, 0);\n    ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n}"}
{"prompt":"Design a DirectShape with a spherical shape and a radius of {radius_m} meters.","completion":"double radius = {radius_m} / 0.3048;\nList\u003cGeometryObject\u003e solids = new List\u003cGeometryObject\u003e();\nFrame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\nArc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\nLine line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\nCurveLoop profile = CurveLoop.Create(new List\u003cCurve\u003e { arc, line });\nSolid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List\u003cCurveLoop\u003e { profile }, 0, 2 * Math.PI);\nsolids.Add(sphere);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(solids);\n    ds.Name = \"Esfera DirectShape\";\n}"}
{"prompt":"Crea un DirectShape esférico con un radio de {radius_m} metros.","completion":"double radius = {radius_m} / 0.3048;\nList\u003cGeometryObject\u003e solids = new List\u003cGeometryObject\u003e();\nFrame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\nArc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\nLine line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\nCurveLoop profile = CurveLoop.Create(new List\u003cCurve\u003e { arc, line });\nSolid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List\u003cCurveLoop\u003e { profile }, 0, 2 * Math.PI);\nsolids.Add(sphere);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(solids);\n    ds.Name = \"Esfera DirectShape\";\n}"}
{"prompt":"Model a DirectShape sphere with a radius of {radius_m} meters.","completion":"double radius = {radius_m} / 0.3048;\nList\u003cGeometryObject\u003e solids = new List\u003cGeometryObject\u003e();\nFrame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\nArc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\nLine line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\nCurveLoop profile = CurveLoop.Create(new List\u003cCurve\u003e { arc, line });\nSolid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List\u003cCurveLoop\u003e { profile }, 0, 2 * Math.PI);\nsolids.Add(sphere);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(solids);\n    ds.Name = \"Esfera DirectShape\";\n}"}
{"prompt":"Create a DirectShape spherical shape with a radius of {radius_m} meters.","completion":"double radius = {radius_m} / 0.3048;\nList\u003cGeometryObject\u003e solids = new List\u003cGeometryObject\u003e();\nFrame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\nArc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\nLine line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\nCurveLoop profile = CurveLoop.Create(new List\u003cCurve\u003e { arc, line });\nSolid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List\u003cCurveLoop\u003e { profile }, 0, 2 * Math.PI);\nsolids.Add(sphere);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(solids);\n    ds.Name = \"Esfera DirectShape\";\n}"}
{"prompt":"Create a spherical DirectShape with a {radius_m}-meter radius.","completion":"double radius = {radius_m} / 0.3048;\nList\u003cGeometryObject\u003e solids = new List\u003cGeometryObject\u003e();\nFrame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\nArc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\nLine line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\nCurveLoop profile = CurveLoop.Create(new List\u003cCurve\u003e { arc, line });\nSolid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List\u003cCurveLoop\u003e { profile }, 0, 2 * Math.PI);\nsolids.Add(sphere);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(solids);\n    ds.Name = \"Sphere DirectShape\";\n}"}
{"prompt":"Generate a DirectShape sphere with a {radius_m}-meter radius in Revit.","completion":"double radius = {radius_m} / 0.3048;\nList\u003cGeometryObject\u003e solids = new List\u003cGeometryObject\u003e();\nFrame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\nArc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\nLine line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\nCurveLoop profile = CurveLoop.Create(new List\u003cCurve\u003e { arc, line });\nSolid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List\u003cCurveLoop\u003e { profile }, 0, 2 * Math.PI);\nsolids.Add(sphere);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(solids);\n    ds.Name = \"Sphere DirectShape\";\n}"}
{"prompt":"Fabricate a DirectShape sphere with a {radius_m}-meter diameter.","completion":"double radius = {radius_m} / 0.3048;\nList\u003cGeometryObject\u003e solids = new List\u003cGeometryObject\u003e();\nFrame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\nArc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\nLine line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\nCurveLoop profile = CurveLoop.Create(new List\u003cCurve\u003e { arc, line });\nSolid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List\u003cCurveLoop\u003e { profile }, 0, 2 * Math.PI);\nsolids.Add(sphere);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(solids);\n    ds.Name = \"Sphere DirectShape\";\n}"}
{"prompt":"Model a DirectShape sphere with a {radius_m}-meter radius.","completion":"double radius = {radius_m} / 0.3048;\nList\u003cGeometryObject\u003e solids = new List\u003cGeometryObject\u003e();\nFrame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\nArc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\nLine line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\nCurveLoop profile = CurveLoop.Create(new List\u003cCurve\u003e { arc, line });\nSolid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List\u003cCurveLoop\u003e { profile }, 0, 2 * Math.PI);\nsolids.Add(sphere);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(solids);\n    ds.Name = \"Sphere DirectShape\";\n}"}
{"prompt":"Formulate a new text style named \u0027{type_name}\u0027 with a size of {text_size_mm}mm in the color green.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Create a new text style named \u0027{type_name}\u0027 with a size of {text_size_mm}mm in green.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Crea un nuevo tipo de texto llamado \u0027{type_name}\u0027 de {text_size_mm}mm de color verde.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Establish a new text type style called \u0027{type_name}\u0027 with a size of {text_size_mm}mm in green.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Create a new {text_size_mm}mm text type named \u0027{type_name}\u0027 in green color.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Fabricate a new text style named \u0027{type_name}\u0027 with a {text_size_mm}mm size and a green hue.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Establish a fresh text type designated \u0027{type_name}\u0027, of dimension {text_size_mm}mm, in the color green.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Generate a novel text style named \u0027{type_name}\u0027 with a {text_size_mm}mm dimension and a green coloration.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Crea un nuevo tipo de muro \u0027{type_name}\u0027 con un grosor de {thickness_cm}cm.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex \u003e= 0 \u0026\u0026 coreLayerIndex \u003c cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, ({thickness_cm} / 100) / 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Create a new wall type \u0027{type_name}\u0027 with a thickness of {thickness_cm} centimeters.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex \u003e= 0 \u0026\u0026 coreLayerIndex \u003c cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, ({thickness_cm} / 100) / 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Fashion a new wall type \u0027{type_name}\u0027 with a thickness of {thickness_cm} centimeters.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex \u003e= 0 \u0026\u0026 coreLayerIndex \u003c cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, ({thickness_cm} / 100) / 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Establish a new wall type \u0027{type_name}\u0027 with a thickness of {thickness_cm} centimeters.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex \u003e= 0 \u0026\u0026 coreLayerIndex \u003c cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, ({thickness_cm} / 100) / 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Generate a novel wall type \u0027{type_name}\u0027 featuring a thickness of {thickness_cm} centimeters.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex \u003e= 0 \u0026\u0026 coreLayerIndex \u003c cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, ({thickness_cm} / 100) / 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Model a new wall variant named \u0027{type_name}\u0027 with a thickness of {thickness_cm} centimeters.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex \u003e= 0 \u0026\u0026 coreLayerIndex \u003c cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, ({thickness_cm} / 100) / 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Create a new wall type \u0027{type_name}\u0027 with a thickness of {thickness_cm}cm.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex \u003e= 0 \u0026\u0026 coreLayerIndex \u003c cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, ({thickness_cm} / 100) / 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Draft a fresh wall type \u0027{type_name}\u0027, specified with a thickness of {thickness_cm} centimeters.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex \u003e= 0 \u0026\u0026 coreLayerIndex \u003c cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, ({thickness_cm} / 100) / 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Formulate a wall type named \u0027{type_name}\u0027 with a thickness of {thickness_cm}cm and subsequently create a wall instance using this type.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), {thickness_cm} / 100 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}
{"prompt":"Design a wall type \u0027{type_name}\u0027 with a thickness of {thickness_cm}cm and thereafter create a wall using this specific type.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), {thickness_cm} / 100 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}
{"prompt":"Generate a wall type called \u0027{type_name}\u0027 with a thickness of {thickness_cm}cm and subsequently produce a wall using this newly created type.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), {thickness_cm} / 100 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}
{"prompt":"Crea un tipo de muro \u0027{type_name}\u0027 de {thickness_cm}cm y luego crea un muro de ese tipo.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), {thickness_cm} / 100 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}
{"prompt":"Formulate a {type_name} wall type of {thickness_cm}cm and subsequently fabricate a wall using this type.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), {thickness_cm} / 100 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}
{"prompt":"Create a {thickness_cm}cm \u0027{type_name}\u0027 type and then create a wall of that type.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), {thickness_cm} / 100 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}
{"prompt":"Design a {type_name} wall type having a thickness of {thickness_cm}cm, followed by the creation of a wall based on this designed type.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), {thickness_cm} / 100 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}
{"prompt":"Establish a {type_name} wall type with a thickness of {thickness_cm}cm and proceed to construct a wall utilizing this type.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), {thickness_cm} / 100 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}
{"prompt":"Establish a new text style named \u0027{type_name}\u0027, with a size of {text_size_mm}mm and a green color.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Create a new text type called \u0027{type_name}\u0027, having a size of {text_size_mm}mm and a color of green.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Crea un nuevo tipo de texto llamado \u0027{type_name}\u0027 de {text_size_mm}mm de color verde.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Generate a new text style labelled \u0027{type_name}\u0027, with a size of {text_size_mm}mm and a hue of green.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Create a new {text_size_mm}mm text type named \u0027{type_name}\u0027 in green color.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Establish a fresh text style, designated as \u0027{type_name}\u0027, with a dimension of {text_size_mm} millimeters and green color.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Formulate a new text type, labeled \u0027{type_name}\u0027, containing {text_size_mm} millimeters in length and a green hue.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Generate a new text style, denoted as \u0027{type_name}\u0027, featuring {text_size_mm} millimeters in size and a green color.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Modify the countertop height of all windows to {height_m} meters.","completion":"double sillHeight = {height_m} / 0.3048;\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}
{"prompt":"Adjust the countertop height of all windows to {height_m} meter(s).","completion":"double sillHeight = {height_m} / 0.3048;\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}
{"prompt":"Ajusta la altura del antepecho de todas las ventanas a {height_m} metro(s).","completion":"double sillHeight = {height_m} / 0.3048;\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}
{"prompt":"Set the countertop height of all windows to {height_m} meters.","completion":"double sillHeight = {height_m} / 0.3048;\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}
{"prompt":"Adjust the sill height of all windows to {height_m} meter(s).","completion":"double sillHeight = {height_m} / 0.3048;\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}
{"prompt":"Set the sill height of all windows to {height_m} meter(s).","completion":"double sillHeight = {height_m} / 0.3048;\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}
{"prompt":"Establish the sill height for all windows at {height_m} meter(s).","completion":"double sillHeight = {height_m} / 0.3048;\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}
{"prompt":"Set the base height of all windows to {height_m} meter(s).","completion":"double sillHeight = {height_m} / 0.3048;\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}
{"prompt":"Replicate the floor plan view \u0027{view_name}\u0027 and rename it as \u0027{template_name}\u0027.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cViewPlan\u003e().FirstOrDefault(v =\u003e v.Name == \"{view_name}\");\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{template_name}\";\n    }\n}"}
{"prompt":"Copy the floor plan view \u0027{view_name}\u0027 and rename the duplicate as \u0027{template_name}\u0027.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cViewPlan\u003e().FirstOrDefault(v =\u003e v.Name == \"{view_name}\");\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{template_name}\";\n    }\n}"}
{"prompt":"Duplica la vista de planta \u0027{view_name}\u0027 y nómbrala \u0027{template_name}\u0027.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cViewPlan\u003e().FirstOrDefault(v =\u003e v.Name == \"{view_name}\");\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{template_name}\";\n    }\n}"}
{"prompt":"Duplicate the existing floor plan \u0027{view_name}\u0027 and label it as \u0027{template_name}\u0027.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cViewPlan\u003e().FirstOrDefault(v =\u003e v.Name == \"{view_name}\");\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{template_name}\";\n    }\n}"}
{"prompt":"Duplicate the \u0027{view_name}\u0027 layout and rename it to \u0027{template_name}\u0027.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cViewPlan\u003e().FirstOrDefault(v =\u003e v.Name == \"{view_name}\");\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{template_name}\";\n    }\n}"}
{"prompt":"Replicate the \u0027{view_name}\u0027 plan view and rename it as \u0027{template_name}\u0027.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cViewPlan\u003e().FirstOrDefault(v =\u003e v.Name == \"{view_name}\");\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{template_name}\";\n    }\n}"}
{"prompt":"Duplicate the \u0027{view_name}\u0027 plan view and name it \u0027{template_name}\u0027.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cViewPlan\u003e().FirstOrDefault(v =\u003e v.Name == \"{view_name}\");\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{template_name}\";\n    }\n}"}
{"prompt":"Copy the \u0027{view_name}\u0027 plan and rename the duplicate as \u0027{template_name}\u0027.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cViewPlan\u003e().FirstOrDefault(v =\u003e v.Name == \"{view_name}\");\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{template_name}\";\n    }\n}"}
{"prompt":"Shift the project base point {distance_m} meters northward.","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast\u003cBasePoint\u003e().FirstOrDefault(bp =\u003e !bp.IsShared);\n\nif (projectBasePoint != null)\n{\n    XYZ translation = new XYZ(0, {distance_m} / 0.3048, 0);\n    ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n}"}
{"prompt":"Relocate the project base point {distance_m} meters north in the project coordinate system.","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast\u003cBasePoint\u003e().FirstOrDefault(bp =\u003e !bp.IsShared);\n\nif (projectBasePoint != null)\n{\n    XYZ translation = new XYZ(0, {distance_m} / 0.3048, 0);\n    ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n}"}
{"prompt":"Translate the project base point {distance_m} meters north.","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast\u003cBasePoint\u003e().FirstOrDefault(bp =\u003e !bp.IsShared);\n\nif (projectBasePoint != null)\n{\n    XYZ translation = new XYZ(0, {distance_m} / 0.3048, 0);\n    ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n}"}
{"prompt":"Mueve el punto base del proyecto {distance_m} metros hacia el norte.","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast\u003cBasePoint\u003e().FirstOrDefault(bp =\u003e !bp.IsShared);\n\nif (projectBasePoint != null)\n{\n    XYZ translation = new XYZ(0, {distance_m} / 0.3048, 0);\n    ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n}"}
{"prompt":"Move the project base point {distance_m} meters to the north.","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast\u003cBasePoint\u003e().FirstOrDefault(bp =\u003e !bp.IsShared);\n\nif (projectBasePoint != null)\n{\n    XYZ translation = new XYZ(0, {distance_m} / 0.3048, 0);\n    ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n}"}
{"prompt":"Translate the project base point {distance_m} meters north in the model.","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast\u003cBasePoint\u003e().FirstOrDefault(bp =\u003e !bp.IsShared);\n\nif (projectBasePoint != null)\n{\n    XYZ translation = new XYZ(0, {distance_m} / 0.3048, 0);\n    ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n}"}
{"prompt":"Shift the project base point {distance_m} meters northward.","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast\u003cBasePoint\u003e().FirstOrDefault(bp =\u003e !bp.IsShared);\n\nif (projectBasePoint != null)\n{\n    XYZ translation = new XYZ(0, {distance_m} / 0.3048, 0);\n    ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n}"}
{"prompt":"Relocate the project base point {distance_m} meters towards the northern direction.","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast\u003cBasePoint\u003e().FirstOrDefault(bp =\u003e !bp.IsShared);\n\nif (projectBasePoint != null)\n{\n    XYZ translation = new XYZ(0, {distance_m} / 0.3048, 0);\n    ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n}"}
{"prompt":"Create a DirectShape spherical with a radius of {radius_m} meters.","completion":"double radius = {radius_m} / 0.3048;\nList\u003cGeometryObject\u003e solids = new List\u003cGeometryObject\u003e();\nFrame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\nArc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\nLine line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\nCurveLoop profile = CurveLoop.Create(new List\u003cCurve\u003e { arc, line });\nSolid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List\u003cCurveLoop\u003e { profile }, 0, 2 * Math.PI);\nsolids.Add(sphere);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(solids);\n    ds.Name = \"Esfera DirectShape\";\n}"}
{"prompt":"Crea un DirectShape esférico con un radio de {radius_m} metros.","completion":"double radius = {radius_m} / 0.3048;\nList\u003cGeometryObject\u003e solids = new List\u003cGeometryObject\u003e();\nFrame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\nArc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\nLine line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\nCurveLoop profile = CurveLoop.Create(new List\u003cCurve\u003e { arc, line });\nSolid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List\u003cCurveLoop\u003e { profile }, 0, 2 * Math.PI);\nsolids.Add(sphere);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(solids);\n    ds.Name = \"Esfera DirectShape\";\n}"}
{"prompt":"Construct a circular DirectShape with a radius of {radius_m} meters.","completion":"double radius = {radius_m} / 0.3048;\nList\u003cGeometryObject\u003e solids = new List\u003cGeometryObject\u003e();\nFrame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\nArc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\nLine line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\nCurveLoop profile = CurveLoop.Create(new List\u003cCurve\u003e { arc, line });\nSolid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List\u003cCurveLoop\u003e { profile }, 0, 2 * Math.PI);\nsolids.Add(sphere);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(solids);\n    ds.Name = \"Esfera DirectShape\";\n}"}
{"prompt":"Generate a spherical DirectShape with a specified radius of {radius_m} meters.","completion":"double radius = {radius_m} / 0.3048;\nList\u003cGeometryObject\u003e solids = new List\u003cGeometryObject\u003e();\nFrame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\nArc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\nLine line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\nCurveLoop profile = CurveLoop.Create(new List\u003cCurve\u003e { arc, line });\nSolid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List\u003cCurveLoop\u003e { profile }, 0, 2 * Math.PI);\nsolids.Add(sphere);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(solids);\n    ds.Name = \"Esfera DirectShape\";\n}"}
{"prompt":"Create a spherical DirectShape with a {radius_m}-meter radius.","completion":"double radius = {radius_m} / 0.3048;\nList\u003cGeometryObject\u003e solids = new List\u003cGeometryObject\u003e();\nFrame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\nArc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\nLine line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\nCurveLoop profile = CurveLoop.Create(new List\u003cCurve\u003e { arc, line });\nSolid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List\u003cCurveLoop\u003e { profile }, 0, 2 * Math.PI);\nsolids.Add(sphere);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(solids);\n    ds.Name = \"Sphere DirectShape\";\n}"}
{"prompt":"Produce a DirectShape as a sphere, defined by a radius of {radius_m} meters.","completion":"double radius = {radius_m} / 0.3048;\nList\u003cGeometryObject\u003e solids = new List\u003cGeometryObject\u003e();\nFrame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\nArc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\nLine line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\nCurveLoop profile = CurveLoop.Create(new List\u003cCurve\u003e { arc, line });\nSolid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List\u003cCurveLoop\u003e { profile }, 0, 2 * Math.PI);\nsolids.Add(sphere);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(solids);\n    ds.Name = \"Sphere DirectShape\";\n}"}
{"prompt":"Generate a DirectShape in the form of a sphere, with a radius of {radius_m} meters.","completion":"double radius = {radius_m} / 0.3048;\nList\u003cGeometryObject\u003e solids = new List\u003cGeometryObject\u003e();\nFrame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\nArc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\nLine line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\nCurveLoop profile = CurveLoop.Create(new List\u003cCurve\u003e { arc, line });\nSolid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List\u003cCurveLoop\u003e { profile }, 0, 2 * Math.PI);\nsolids.Add(sphere);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(solids);\n    ds.Name = \"Sphere DirectShape\";\n}"}
{"prompt":"Model a spherical DirectShape, with a specified radius of {radius_m} meters.","completion":"double radius = {radius_m} / 0.3048;\nList\u003cGeometryObject\u003e solids = new List\u003cGeometryObject\u003e();\nFrame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\nArc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\nLine line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\nCurveLoop profile = CurveLoop.Create(new List\u003cCurve\u003e { arc, line });\nSolid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List\u003cCurveLoop\u003e { profile }, 0, 2 * Math.PI);\nsolids.Add(sphere);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(solids);\n    ds.Name = \"Sphere DirectShape\";\n}"}
{"prompt":"Form a new text style titled \u0027{type_name}\u0027 with a font size of {text_size_mm}mm in the color green.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Create a new text style named \u0027{type_name}\u0027 with a font size of {text_size_mm}mm in green color.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Crea un nuevo tipo de texto llamado \u0027{type_name}\u0027 de {text_size_mm}mm de color verde.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Establish a new text style called \u0027{type_name}\u0027 with a font size of {text_size_mm}mm in green hue.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Create a new {text_size_mm}mm text type named \u0027{type_name}\u0027 in green color.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Generate a new text format, christened \u0027{type_name}\u0027, consisting of {text_size_mm} mm in the shade of green.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Establish a novel text type designated as \u0027{type_name}\u0027, with a dimension of {text_size_mm} millimeters, in the color green.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Formulate a fresh text style, labeled \u0027{type_name}\u0027, with a measurement of {text_size_mm} mm, in the hue of green.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Crea un nuevo tipo de muro \u0027{type_name}\u0027 con un grosor de {thickness_cm}cm.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex \u003e= 0 \u0026\u0026 coreLayerIndex \u003c cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, ({thickness_cm} / 100) / 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Create a new wall type \u0027{type_name}\u0027 with a thickness of {thickness_cm} centimeters.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex \u003e= 0 \u0026\u0026 coreLayerIndex \u003c cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, ({thickness_cm} / 100) / 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Establish a new wall type \u0027{type_name}\u0027 with a thickness of {thickness_cm} centimeters.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex \u003e= 0 \u0026\u0026 coreLayerIndex \u003c cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, ({thickness_cm} / 100) / 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Define a new wall prototype \u0027{type_name}\u0027 with a thickness of {thickness_cm} centimeters.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex \u003e= 0 \u0026\u0026 coreLayerIndex \u003c cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, ({thickness_cm} / 100) / 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Establish a novel wall typology, \u0027{type_name}\u0027, with a thickness of {thickness_cm} centimeters.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex \u003e= 0 \u0026\u0026 coreLayerIndex \u003c cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, ({thickness_cm} / 100) / 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Delineate a new wall type, \u0027{type_name}\u0027, characterized by a thickness of {thickness_cm} centimeters.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex \u003e= 0 \u0026\u0026 coreLayerIndex \u003c cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, ({thickness_cm} / 100) / 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Formulate a fresh wall type, \u0027{type_name}\u0027, featuring a thickness of {thickness_cm} centimeters.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex \u003e= 0 \u0026\u0026 coreLayerIndex \u003c cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, ({thickness_cm} / 100) / 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Create a new wall type \u0027{type_name}\u0027 with a thickness of {thickness_cm}cm.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex \u003e= 0 \u0026\u0026 coreLayerIndex \u003c cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, ({thickness_cm} / 100) / 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Generate a wall type \u0027{type_name}\u0027 with a thickness of {thickness_cm}cm and subsequently create a wall instance of this type.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), {thickness_cm} / 100 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}
{"prompt":"Formulate a wall type \u0027{type_name}\u0027 having a thickness of {thickness_cm}cm, followed by the creation of a wall using this defined type.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), {thickness_cm} / 100 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}
{"prompt":"Crea un tipo de muro \u0027{type_name}\u0027 de {thickness_cm}cm y luego crea un muro de ese tipo.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), {thickness_cm} / 100 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}
{"prompt":"Create a wall type \u0027{type_name}\u0027 with a thickness of {thickness_cm}cm, and then establish a wall instance using this predefined type.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), {thickness_cm} / 100 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}
{"prompt":"Craft a {type_name} wall type with a thickness of {thickness_cm} centimeters, then proceed to build a wall using this newly fashioned type.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), {thickness_cm} / 100 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}
{"prompt":"Create a {thickness_cm}cm \u0027{type_name}\u0027 type and then create a wall of that type.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), {thickness_cm} / 100 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}
{"prompt":"Develop a {type_name} wall type having a thickness of {thickness_cm} centimeters, followed by the production of a wall using this specified type.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), {thickness_cm} / 100 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}
{"prompt":"Formulate a {type_name} wall type with a thickness of {thickness_cm} centimeters, and subsequently, construct a wall utilizing this newly created type.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), {thickness_cm} / 100 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}
{"prompt":"Create a new text style named \u0027{type_name}\u0027 with a height of {text_size_mm}mm and green color.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Formulate a new text style titled \u0027{type_name}\u0027 with a height of {text_size_mm}mm and a green hue.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Crea un nuevo tipo de texto llamado \u0027{type_name}\u0027 de {text_size_mm}mm de color verde.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Establish a new text style called \u0027{type_name}\u0027 with a height of {text_size_mm}mm and a color of green.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Create a new {text_size_mm}mm text type named \u0027{type_name}\u0027 in green color.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Formulate a new text style, labeled \u0027{type_name}\u0027, featuring a size of {text_size_mm} millimeters and a hue of green.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Establish a fresh text type, designated as \u0027{type_name}\u0027, with a dimension of {text_size_mm} millimeters and green color.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Generate a novel text format, denoted as \u0027{type_name}\u0027, consisting of {text_size_mm} millimeters in width and colored green.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Modify the countertop height of all windows to {height_m} meters.","completion":"double sillHeight = {height_m} / 0.3048;\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}
{"prompt":"Ajusta la altura del antepecho de todas las ventanas a {height_m} metro(s).","completion":"double sillHeight = {height_m} / 0.3048;\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}
{"prompt":"Adjust the countertop height of all windows to {height_m} meters.","completion":"double sillHeight = {height_m} / 0.3048;\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}
{"prompt":"Set the countertop height of all windows to {height_m} meters.","completion":"double sillHeight = {height_m} / 0.3048;\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}
{"prompt":"Adjust the sill height of all windows to {height_m} meter(s).","completion":"double sillHeight = {height_m} / 0.3048;\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}
{"prompt":"Establish the sill height for all windows as {height_m} meter(s).","completion":"double sillHeight = {height_m} / 0.3048;\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}
{"prompt":"Set the sill height of all windows to {height_m} meter(s).","completion":"double sillHeight = {height_m} / 0.3048;\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}
{"prompt":"Fix the sill height of all windows at {height_m} meter(s).","completion":"double sillHeight = {height_m} / 0.3048;\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}
{"prompt":"Create a text note with the given text \u0027{note_text}\u0027, location, and target element.","completion":"UIDocument localUidoc = uidoc;\nReference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (targetRef != null \u0026\u0026 textLocation != null \u0026\u0026 activeView != null \u0026\u0026 defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{note_text}\", opts);\n    if (note != null)\n    {\n        Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n        leader.End = targetRef.GlobalPoint;\n    }\n}"}
{"prompt":"Crea una nota de texto con el texto \u0027{note_text}\u0027, una ubicación y un elemento de destino dados.","completion":"UIDocument localUidoc = uidoc;\nReference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (targetRef != null \u0026\u0026 textLocation != null \u0026\u0026 activeView != null \u0026\u0026 defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{note_text}\", opts);\n    if (note != null)\n    {\n        Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n        leader.End = targetRef.GlobalPoint;\n    }\n}"}
{"prompt":"Add a text note with the specified text \u0027{note_text}\u0027, location, and associated element.","completion":"UIDocument localUidoc = uidoc;\nReference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (targetRef != null \u0026\u0026 textLocation != null \u0026\u0026 activeView != null \u0026\u0026 defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{note_text}\", opts);\n    if (note != null)\n    {\n        Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n        leader.End = targetRef.GlobalPoint;\n    }\n}"}
{"prompt":"Insert a text note with the specified text \u0027{note_text}\u0027, location, and destination element.","completion":"UIDocument localUidoc = uidoc;\nReference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (targetRef != null \u0026\u0026 textLocation != null \u0026\u0026 activeView != null \u0026\u0026 defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{note_text}\", opts);\n    if (note != null)\n    {\n        Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n        leader.End = targetRef.GlobalPoint;\n    }\n}"}
{"prompt":"Create a text note with text \u0027{note_text}\u0027, given location, and target element.","completion":"UIDocument localUidoc = uidoc;\nReference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (targetRef != null \u0026\u0026 textLocation != null \u0026\u0026 activeView != null \u0026\u0026 defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{note_text}\", opts);\n    if (note != null)\n    {\n        Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n        leader.End = targetRef.GlobalPoint;\n    }\n}"}
{"prompt":"Inscribe a text note with the specified text \u0027{note_text}\u0027, at the designated location, and associated with the designated element.","completion":"UIDocument localUidoc = uidoc;\nReference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (targetRef != null \u0026\u0026 textLocation != null \u0026\u0026 activeView != null \u0026\u0026 defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{note_text}\", opts);\n    if (note != null)\n    {\n        Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n        leader.End = targetRef.GlobalPoint;\n    }\n}"}
{"prompt":"Insert a text note with the specified text \u0027{note_text}\u0027, at the designated location, and assigned to the target element.","completion":"UIDocument localUidoc = uidoc;\nReference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (targetRef != null \u0026\u0026 textLocation != null \u0026\u0026 activeView != null \u0026\u0026 defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{note_text}\", opts);\n    if (note != null)\n    {\n        Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n        leader.End = targetRef.GlobalPoint;\n    }\n}"}
{"prompt":"Draft a text annotation containing the given text \u0027{note_text}\u0027, at the specified location, and linked to the target element.","completion":"UIDocument localUidoc = uidoc;\nReference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (targetRef != null \u0026\u0026 textLocation != null \u0026\u0026 activeView != null \u0026\u0026 defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{note_text}\", opts);\n    if (note != null)\n    {\n        Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n        leader.End = targetRef.GlobalPoint;\n    }\n}"}
{"prompt":"Identify doors on level \u0027{level_name}\u0027 which are members of the family \u0027{family_name}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Encuentra todas las puertas del nivel \u0027{level_name}\u0027 que sean de la familia \u0027{family_name}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Find all doors on level \u0027{level_name}\u0027 that belong to the family \u0027{family_name}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Locate doors on level \u0027{level_name}\u0027 that are from the family \u0027{family_name}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Locate doors on level \u0027{level_name}\u0027 that are members of the \u0027{family_name}\u0027 family.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Find all doors on level \u0027{level_name}\u0027 that belong to the \u0027{family_name}\u0027 family.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Determine doors on the \u0027{level_name}\u0027 level that belong to the \u0027{family_name}\u0027 family.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Identify all doors on the \u0027{level_name}\u0027 level that are part of the \u0027{family_name}\u0027 family.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Create a floor plan with a central circular void of radius {radius_m} meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    XYZ p1 = new XYZ(-10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p2 = new XYZ(10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p3 = new XYZ(10 / 0.3048, 10 / 0.3048, 0);\n    XYZ p4 = new XYZ(-10 / 0.3048, 10 / 0.3048, 0);\n    CurveLoop outerLoop = new CurveLoop();\n    outerLoop.Append(Line.CreateBound(p1, p2));\n    outerLoop.Append(Line.CreateBound(p2, p3));\n    outerLoop.Append(Line.CreateBound(p3, p4));\n    outerLoop.Append(Line.CreateBound(p4, p1));\n\n    XYZ center = XYZ.Zero;\n    double radius = {radius_m} / 0.3048;\n    CurveLoop innerLoop = new CurveLoop();\n    innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n    innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n    Floor.Create(doc, new List\u003cCurveLoop\u003e { outerLoop, innerLoop }, floorType.Id, level.Id);\n}"}
{"prompt":"Design a floor plan featuring a central circular cutout with a radius of {radius_m} meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    XYZ p1 = new XYZ(-10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p2 = new XYZ(10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p3 = new XYZ(10 / 0.3048, 10 / 0.3048, 0);\n    XYZ p4 = new XYZ(-10 / 0.3048, 10 / 0.3048, 0);\n    CurveLoop outerLoop = new CurveLoop();\n    outerLoop.Append(Line.CreateBound(p1, p2));\n    outerLoop.Append(Line.CreateBound(p2, p3));\n    outerLoop.Append(Line.CreateBound(p3, p4));\n    outerLoop.Append(Line.CreateBound(p4, p1));\n\n    XYZ center = XYZ.Zero;\n    double radius = {radius_m} / 0.3048;\n    CurveLoop innerLoop = new CurveLoop();\n    innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n    innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n    Floor.Create(doc, new List\u003cCurveLoop\u003e { outerLoop, innerLoop }, floorType.Id, level.Id);\n}"}
{"prompt":"Crea un suelo con un hueco circular de radio {radius_m}m en el centro.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    XYZ p1 = new XYZ(-10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p2 = new XYZ(10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p3 = new XYZ(10 / 0.3048, 10 / 0.3048, 0);\n    XYZ p4 = new XYZ(-10 / 0.3048, 10 / 0.3048, 0);\n    CurveLoop outerLoop = new CurveLoop();\n    outerLoop.Append(Line.CreateBound(p1, p2));\n    outerLoop.Append(Line.CreateBound(p2, p3));\n    outerLoop.Append(Line.CreateBound(p3, p4));\n    outerLoop.Append(Line.CreateBound(p4, p1));\n\n    XYZ center = XYZ.Zero;\n    double radius = {radius_m} / 0.3048;\n    CurveLoop innerLoop = new CurveLoop();\n    innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n    innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n    Floor.Create(doc, new List\u003cCurveLoop\u003e { outerLoop, innerLoop }, floorType.Id, level.Id);\n}"}
{"prompt":"Model a floor with a circular central opening of radius {radius_m} meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    XYZ p1 = new XYZ(-10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p2 = new XYZ(10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p3 = new XYZ(10 / 0.3048, 10 / 0.3048, 0);\n    XYZ p4 = new XYZ(-10 / 0.3048, 10 / 0.3048, 0);\n    CurveLoop outerLoop = new CurveLoop();\n    outerLoop.Append(Line.CreateBound(p1, p2));\n    outerLoop.Append(Line.CreateBound(p2, p3));\n    outerLoop.Append(Line.CreateBound(p3, p4));\n    outerLoop.Append(Line.CreateBound(p4, p1));\n\n    XYZ center = XYZ.Zero;\n    double radius = {radius_m} / 0.3048;\n    CurveLoop innerLoop = new CurveLoop();\n    innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n    innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n    Floor.Create(doc, new List\u003cCurveLoop\u003e { outerLoop, innerLoop }, floorType.Id, level.Id);\n}"}
{"prompt":"Produce a plan for a floor with a circular cutout of {radius_m} meters radius in the center.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    XYZ p1 = new XYZ(-10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p2 = new XYZ(10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p3 = new XYZ(10 / 0.3048, 10 / 0.3048, 0);\n    XYZ p4 = new XYZ(-10 / 0.3048, 10 / 0.3048, 0);\n    CurveLoop outerLoop = new CurveLoop();\n    outerLoop.Append(Line.CreateBound(p1, p2));\n    outerLoop.Append(Line.CreateBound(p2, p3));\n    outerLoop.Append(Line.CreateBound(p3, p4));\n    outerLoop.Append(Line.CreateBound(p4, p1));\n\n    XYZ center = XYZ.Zero;\n    double radius = {radius_m} / 0.3048;\n    CurveLoop innerLoop = new CurveLoop();\n    innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n    innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n    Floor.Create(doc, new List\u003cCurveLoop\u003e { outerLoop, innerLoop }, floorType.Id, level.Id);\n}"}
{"prompt":"Model a circular floor opening of {radius_m} meters radius within the center.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    XYZ p1 = new XYZ(-10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p2 = new XYZ(10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p3 = new XYZ(10 / 0.3048, 10 / 0.3048, 0);\n    XYZ p4 = new XYZ(-10 / 0.3048, 10 / 0.3048, 0);\n    CurveLoop outerLoop = new CurveLoop();\n    outerLoop.Append(Line.CreateBound(p1, p2));\n    outerLoop.Append(Line.CreateBound(p2, p3));\n    outerLoop.Append(Line.CreateBound(p3, p4));\n    outerLoop.Append(Line.CreateBound(p4, p1));\n\n    XYZ center = XYZ.Zero;\n    double radius = {radius_m} / 0.3048;\n    CurveLoop innerLoop = new CurveLoop();\n    innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n    innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n    Floor.Create(doc, new List\u003cCurveLoop\u003e { outerLoop, innerLoop }, floorType.Id, level.Id);\n}"}
{"prompt":"Generate a floor plan featuring a central circular void of {radius_m} meters in diameter.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    XYZ p1 = new XYZ(-10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p2 = new XYZ(10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p3 = new XYZ(10 / 0.3048, 10 / 0.3048, 0);\n    XYZ p4 = new XYZ(-10 / 0.3048, 10 / 0.3048, 0);\n    CurveLoop outerLoop = new CurveLoop();\n    outerLoop.Append(Line.CreateBound(p1, p2));\n    outerLoop.Append(Line.CreateBound(p2, p3));\n    outerLoop.Append(Line.CreateBound(p3, p4));\n    outerLoop.Append(Line.CreateBound(p4, p1));\n\n    XYZ center = XYZ.Zero;\n    double radius = {radius_m} / 0.3048;\n    CurveLoop innerLoop = new CurveLoop();\n    innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n    innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n    Floor.Create(doc, new List\u003cCurveLoop\u003e { outerLoop, innerLoop }, floorType.Id, level.Id);\n}"}
{"prompt":"Create a floor with a circular hole of {radius_m}m radius in the center.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null \u0026\u0026 floorType != null)\n{\n    XYZ p1 = new XYZ(-10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p2 = new XYZ(10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p3 = new XYZ(10 / 0.3048, 10 / 0.3048, 0);\n    XYZ p4 = new XYZ(-10 / 0.3048, 10 / 0.3048, 0);\n    CurveLoop outerLoop = new CurveLoop();\n    outerLoop.Append(Line.CreateBound(p1, p2));\n    outerLoop.Append(Line.CreateBound(p2, p3));\n    outerLoop.Append(Line.CreateBound(p3, p4));\n    outerLoop.Append(Line.CreateBound(p4, p1));\n\n    XYZ center = XYZ.Zero;\n    double radius = {radius_m} / 0.3048;\n    CurveLoop innerLoop = new CurveLoop();\n    innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n    innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n    Floor.Create(doc, new List\u003cCurveLoop\u003e { outerLoop, innerLoop }, floorType.Id, level.Id);\n}"}
{"prompt":"Crea un nuevo tipo de muro \u0027{type_name}\u0027 con un grosor de {thickness_cm}cm.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex \u003e= 0 \u0026\u0026 coreLayerIndex \u003c cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, ({thickness_cm} * 10) / 304.8);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Fabricate a new wall type \u0027{type_name}\u0027, with a thickness of {thickness_cm} centimeters.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex \u003e= 0 \u0026\u0026 coreLayerIndex \u003c cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, ({thickness_cm} * 10) / 304.8);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Create a new wall type \u0027{type_name}\u0027, with a thickness of {thickness_cm} centimeters.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex \u003e= 0 \u0026\u0026 coreLayerIndex \u003c cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, ({thickness_cm} * 10) / 304.8);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Model a new wall type \u0027{type_name}\u0027 with a thickness of {thickness_cm} centimeters.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex \u003e= 0 \u0026\u0026 coreLayerIndex \u003c cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, ({thickness_cm} * 10) / 304.8);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Draft a new wall type \u0027{type_name}\u0027 with a thickness of {thickness_cm} centimeters.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex \u003e= 0 \u0026\u0026 coreLayerIndex \u003c cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, ({thickness_cm} * 10) / 304.8);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Model a wall type \u0027{type_name}\u0027 with a thickness of {thickness_cm} centimeters.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex \u003e= 0 \u0026\u0026 coreLayerIndex \u003c cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, ({thickness_cm} * 10) / 304.8);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Create a new wall type \u0027{type_name}\u0027 with a thickness of {thickness_cm}cm.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex \u003e= 0 \u0026\u0026 coreLayerIndex \u003c cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, ({thickness_cm} * 10) / 304.8);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Design a new wall type \u0027{type_name}\u0027 with a thickness of {thickness_cm} centimeters.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex \u003e= 0 \u0026\u0026 coreLayerIndex \u003c cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, ({thickness_cm} * 10) / 304.8);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}
{"prompt":"Develop a wall type \u0027{type_name}\u0027 with a dimension of {thickness_cm}cm, subsequently construct a wall using this specified type.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), ({thickness_cm} / 100.0) / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}
{"prompt":"Establish a wall type \u0027{type_name}\u0027 with a thickness of {thickness_cm}cm, and subsequently generate a wall using this predefined type.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), ({thickness_cm} / 100.0) / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}
{"prompt":"Crea un tipo de muro \u0027{type_name}\u0027 de {thickness_cm}cm y luego crea un muro de ese tipo.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), ({thickness_cm} / 100.0) / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}
{"prompt":"Formulate a wall type named \u0027{type_name}\u0027 with a thickness of {thickness_cm}cm, followed by creating a wall instance of this defined type.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), ({thickness_cm} / 100.0) / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}
{"prompt":"Generate a \u0027{type_name}\u0027 wall type with a specified thickness of {thickness_cm}cm, followed by the creation of a wall utilizing this newly created type.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), ({thickness_cm} / 100.0) / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}
{"prompt":"Create a {thickness_cm}cm \u0027{type_name}\u0027 type and then create a wall of that type.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), ({thickness_cm} / 100.0) / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}
{"prompt":"Formulate a new \u0027{type_name}\u0027 wall type with a thickness of {thickness_cm}cm, and subsequently construct a wall using this specific type.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), ({thickness_cm} / 100.0) / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}
{"prompt":"Develop a \u0027{type_name}\u0027 wall type with a defined thickness of {thickness_cm}cm, and thereafter, establish a wall utilizing this particular type.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null \u0026\u0026 cs.LayerCount \u003e 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), ({thickness_cm} / 100.0) / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}
{"prompt":"Establish a new text style of {text_size_mm}mm in green color, named \u0027{type_name}\u0027.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Formulate a new text style of {text_size_mm}mm, in the color green, titled \u0027{type_name}\u0027.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Create a new text type style of {text_size_mm}mm, in a green hue, labeled \u0027{type_name}\u0027.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Crea un nuevo tipo de texto de {text_size_mm}mm de color verde llamado \u0027{type_name}\u0027.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Formulate a new text style with a size of {text_size_mm} millimeters, in the color green, and designate it as \u0027{type_name}\u0027.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Generate a new text style with dimensions {text_size_mm} millimeters, in the hue of green, and tag it as \u0027{type_name}\u0027.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Establish a fresh text style measuring {text_size_mm} millimeters, colored green, and label it \u0027{type_name}\u0027.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Create a new {text_size_mm}mm text type in green color named \u0027{type_name}\u0027.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Set the height of all window sills to {height_m} meters.","completion":"double sillHeight = {height_m} / 0.3048;\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}
{"prompt":"Ajusta la altura del antepecho de todas las ventanas a {height_m} metro(s).","completion":"double sillHeight = {height_m} / 0.3048;\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}
{"prompt":"Adjust window sill height to {height_m} meters on all windows.","completion":"double sillHeight = {height_m} / 0.3048;\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}
{"prompt":"Modify the sill height of all windows to {height_m} meters.","completion":"double sillHeight = {height_m} / 0.3048;\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}
{"prompt":"Adjust the sill height of all windows to {height_m} meter(s).","completion":"double sillHeight = {height_m} / 0.3048;\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}
{"prompt":"Establish the sill height for all windows as {height_m} meter(s).","completion":"double sillHeight = {height_m} / 0.3048;\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}
{"prompt":"Set the sill height of all windows to {height_m} meter(s).","completion":"double sillHeight = {height_m} / 0.3048;\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}
{"prompt":"Set the window sill height to {height_m} meter(s) across all windows.","completion":"double sillHeight = {height_m} / 0.3048;\nList\u003cFamilyInstance\u003e windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null \u0026\u0026 !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}
{"prompt":"Crea una dimensión radial para un muro curvo.","completion":"Wall curvedWall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).Cast\u003cWall\u003e().FirstOrDefault(w =\u003e w.Location is LocationCurve \u0026\u0026 (w.Location as LocationCurve).Curve is Arc);\nView activeView = doc.ActiveView;\n\nif (curvedWall != null \u0026\u0026 activeView != null)\n{\n    LocationCurve locCurve = curvedWall.Location as LocationCurve;\n    if (locCurve != null)\n    {\n        Arc arc = locCurve.Curve as Arc;\n        if (arc != null)\n        {\n            ReferenceArray refArray = new ReferenceArray();\n            refArray.Append(arc.Reference);\n            doc.Create.NewDimension(activeView, Line.CreateBound(arc.Center, arc.GetEndPoint(0)), refArray);\n        }\n    }\n}"}
{"prompt":"Create a radial dimension for a curved wall.","completion":"Wall curvedWall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).Cast\u003cWall\u003e().FirstOrDefault(w =\u003e w.Location is LocationCurve \u0026\u0026 (w.Location as LocationCurve).Curve is Arc);\nView activeView = doc.ActiveView;\n\nif (curvedWall != null \u0026\u0026 activeView != null)\n{\n    LocationCurve locCurve = curvedWall.Location as LocationCurve;\n    if (locCurve != null)\n    {\n        Arc arc = locCurve.Curve as Arc;\n        if (arc != null)\n        {\n            ReferenceArray refArray = new ReferenceArray();\n            refArray.Append(arc.Reference);\n            doc.Create.NewDimension(activeView, Line.CreateBound(arc.Center, arc.GetEndPoint(0)), refArray);\n        }\n    }\n}"}
{"prompt":"Crea una nota de texto con el texto \u0027{note_text}\u0027, una ubicación y un elemento de destino dados.","completion":"UIDocument localUidoc = uidoc;\nReference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (targetRef != null \u0026\u0026 textLocation != null \u0026\u0026 activeView != null \u0026\u0026 defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{note_text}\", opts);\n    if (note != null)\n    {\n        note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L).End = targetRef.GlobalPoint;\n    }\n}"}
{"prompt":"Create a text note with the text \u0027{note_text}\u0027, a location, and a target element specified.","completion":"UIDocument localUidoc = uidoc;\nReference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (targetRef != null \u0026\u0026 textLocation != null \u0026\u0026 activeView != null \u0026\u0026 defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{note_text}\", opts);\n    if (note != null)\n    {\n        note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L).End = targetRef.GlobalPoint;\n    }\n}"}
{"prompt":"Place a text note with the content \u0027{note_text}\u0027, at the designated location, and aimed at the selected element.","completion":"UIDocument localUidoc = uidoc;\nReference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (targetRef != null \u0026\u0026 textLocation != null \u0026\u0026 activeView != null \u0026\u0026 defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{note_text}\", opts);\n    if (note != null)\n    {\n        note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L).End = targetRef.GlobalPoint;\n    }\n}"}
{"prompt":"Insert a text note containing \u0027{note_text}\u0027, at the given location, and directed towards a specific element.","completion":"UIDocument localUidoc = uidoc;\nReference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (targetRef != null \u0026\u0026 textLocation != null \u0026\u0026 activeView != null \u0026\u0026 defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{note_text}\", opts);\n    if (note != null)\n    {\n        note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L).End = targetRef.GlobalPoint;\n    }\n}"}
{"prompt":"Create a text note with text \u0027{note_text}\u0027, given location, and target element.","completion":"UIDocument localUidoc = uidoc;\nReference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (targetRef != null \u0026\u0026 textLocation != null \u0026\u0026 activeView != null \u0026\u0026 defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{note_text}\", opts);\n    if (note != null)\n    {\n        note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L).End = targetRef.GlobalPoint;\n    }\n}"}
{"prompt":"Add a text note to the project at the specified location, with the provided text \u0027{note_text}\u0027, and assign it to the target element.","completion":"UIDocument localUidoc = uidoc;\nReference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (targetRef != null \u0026\u0026 textLocation != null \u0026\u0026 activeView != null \u0026\u0026 defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{note_text}\", opts);\n    if (note != null)\n    {\n        note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L).End = targetRef.GlobalPoint;\n    }\n}"}
{"prompt":"Insert a text note with the specified text \u0027{note_text}\u0027, at the designated location, and linked to the selected element.","completion":"UIDocument localUidoc = uidoc;\nReference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (targetRef != null \u0026\u0026 textLocation != null \u0026\u0026 activeView != null \u0026\u0026 defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{note_text}\", opts);\n    if (note != null)\n    {\n        note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L).End = targetRef.GlobalPoint;\n    }\n}"}
{"prompt":"Generate a text annotation containing \u0027{note_text}\u0027, in the predefined location, and associated with the chosen element.","completion":"UIDocument localUidoc = uidoc;\nReference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (targetRef != null \u0026\u0026 textLocation != null \u0026\u0026 activeView != null \u0026\u0026 defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{note_text}\", opts);\n    if (note != null)\n    {\n        note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L).End = targetRef.GlobalPoint;\n    }\n}"}
{"prompt":"Original instruction: \"Establece el grosor de la pared \u0027{wall_name}\u0027 en \u0027{thickness}\u0027. Unidad: \u0027{unit_name}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Adjust the width of door \u0027{door_name}\u0027 to \u0027{width}\u0027, unit \u0027{unit_name}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Set the height of window \u0027{window_name}\u0027 to \u0027{height}\u0027, unit \u0027{unit_name}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Modify the width of door \u0027{door_name}\u0027 to \u0027{width}\u0027, unit \u0027{unit_name}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Original instruction: \"Establece la altura de la ventana \u0027{window_name}\u0027 en \u0027{height}\u0027. Unidad: \u0027{unit_name}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Set the width of door \u0027{door_name}\u0027 to \u0027{width}\u0027, unit \u0027{unit_name}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Original instruction: \"Establece el ancho de la puerta \u0027{door_name}\u0027 en \u0027{width}\u0027. Unidad: \u0027{unit_name}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Modify the height of window \u0027{window_name}\u0027 to \u0027{height}\u0027, unit \u0027{unit_name}\u0027","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Locate all doors on level \u0027{level_name}\u0027 that belong to family \u0027{family_name}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Insert a door into wall \u0027{wall_name}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Modify the thickness of wall \u0027{wall_name}\u0027 to \u0027{thickness}\u0027, unit \u0027{unit_name}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Place a door in wall \u0027{wall_name}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Identify doors on level \u0027{level_name}\u0027 that are of family \u0027{family_name}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Find doors on level \u0027{level_name}\u0027 that are of type \u0027{family_name}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Adjust the height of window \u0027{window_name}\u0027 to \u0027{height}\u0027, unit \u0027{unit_name}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Add a door to wall \u0027{wall_name}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Original instruction: \"Inserta una puerta en la pared \u0027{wall_name}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Adjust the thickness of wall \u0027{wall_name}\u0027 to \u0027{thickness}\u0027, unit \u0027{unit_name}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Encuentra todas las puertas del nivel \u0027{level_name}\u0027 que sean de la familia \u0027{family_name}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Set the thickness of wall \u0027{wall_name}\u0027 to \u0027{thickness}\u0027, unit \u0027{unit_name}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Find all doors on level \u0027{level_name}\u0027 that belong to the \u0027{family_name}\u0027 family.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Locate doors on \u0027{level_name}\u0027 that are associated with the \u0027{family_name}\u0027 family.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Identify all doors on the level \u0027{level_name}\u0027 that are members of the \u0027{family_name}\u0027 family.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Determine doors on level \u0027{level_name}\u0027 that are part of the \u0027{family_name}\u0027 family.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\nList\u003cElement\u003e doors = new List\u003cElement\u003e();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Formulate a new text style of {text_size_mm}mm height in green, titled \u0027{type_name}\u0027.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Establish a new text style of {text_size_mm}mm in green, named \u0027{type_name}\u0027.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Crea un nuevo tipo de texto de {text_size_mm}mm de color verde llamado \u0027{type_name}\u0027.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Create a new text type style with a {text_size_mm}mm height in green, labeled \u0027{type_name}\u0027.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Formulate a new text style possessing a size of {text_size_mm} millimeters, in a hue of green, and title it as \u0027{type_name}\u0027.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Instantiate a novel text style exhibiting a measurement of {text_size_mm} millimeters, tinted green, and dub it \u0027{type_name}\u0027.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Establish a fresh text type with a dimension of {text_size_mm} millimeters, colored green, and label it as \u0027{type_name}\u0027.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Create a new {text_size_mm}mm text type in green color named \u0027{type_name}\u0027.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null \u0026\u0026 !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null \u0026\u0026 !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}
{"prompt":"Conecta dos tuberías con un codo.","completion":"List\u003cPipe\u003e pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast\u003cPipe\u003e().ToList();\nif (pipes.Count \u003e= 2)\n{\n    Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast\u003cConnector\u003e().FirstOrDefault();\n    Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast\u003cConnector\u003e().FirstOrDefault();\n    if (c1 != null \u0026\u0026 c2 != null)\n    {\n        doc.Create.NewElbowFitting(c1, c2);\n    }\n}"}
{"prompt":"Position a sprinkler system at coordinates ({x_m},{y_m},{z_m}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null \u0026\u0026 sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits({x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({z_m}, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Coloca un rociador en las coordenadas ({x_m},{y_m},{z_m}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null \u0026\u0026 sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits({x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({z_m}, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Arrange a sprinkler at the given coordinates ({x_m},{y_m},{z_m}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null \u0026\u0026 sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits({x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({z_m}, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
{"prompt":"Set a sprinkler in the specified coordinates ({x_m},{y_m},{z_m}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null \u0026\u0026 sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits({x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({z_m}, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}
