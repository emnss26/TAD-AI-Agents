{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls taller than 5 meters."}, {"role": "assistant", "content": "double heightThreshold = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo nivel 'Nivel 3' a una elevación de 12 metros."}, {"role": "assistant", "content": "double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 3\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Define un filtro de vista para ocultar las líneas de detalle."}, {"role": "assistant", "content": "string filterName = \"Ocultar Líneas de Detalle\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection<ElementId> catsToHide = new List<ElementId>{new ElementId(BuiltInCategory.OST_Lines)};\n    ElementFilter filter = new ElementCategoryFilter(new ElementId(BuiltInCategory.OST_Lines));\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, filterName, catsToHide, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un techo por contorno en el 'Nivel de Cubierta'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel de Cubierta\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 / 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,0,0), new XYZ(20 / 0.3048,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,30 / 0.3048,0), new XYZ(0,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 / 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dibuja un conducto de ventilación rectangular de 300x200 milímetros."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast<DuctType>().FirstOrDefault(d => d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null && ductType != null && systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 / 0.3048);\n        XYZ p2 = new XYZ(10 / 0.3048, 0, 3 / 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null && !widthParam.IsReadOnly) widthParam.Set(300 / 304.8);\n            if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(200 / 304.8);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a Reflected Ceiling Plan view for Level 1."}, {"role": "assistant", "content": "string levelName = \"Level 1\";\nstring viewName = \"Level 1 Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Comprueba si la vista activa es una vista de plano."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nbool isPlanView = false;\n\nif (activeView != null)\n{\n    isPlanView = activeView.ViewType == ViewType.FloorPlan \n                 || activeView.ViewType == ViewType.CeilingPlan \n                 || activeView.ViewType == ViewType.AreaPlan \n                 || activeView.ViewType == ViewType.EngineeringPlan;\n}\n"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca postes de iluminación cada 10m en un camino de 97m."}, {"role": "assistant", "content": "FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una apertura de hueco (shaft) que atraviese desde el Nivel 1 al Nivel 3."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Shaft Opening\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 3\");\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n        XYZ p2 = new XYZ(8 / 0.3048, 5 / 0.3048,0);\n        XYZ p3 = new XYZ(8 / 0.3048, 8 / 0.3048,0);\n        XYZ p4 = new XYZ(5 / 0.3048, 8 / 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new wall type 'Generic Wall 320mm' with a thickness of 26cm."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Generic Wall 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 / 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un suelo con un contorno de 9 por 9 metros."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate level 1 with a 3m offset and name it 'Mezzanine'."}, {"role": "assistant", "content": "string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a wall on Level 1 from (0,0,0) to (5,0,0) with a height of 5 meters."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    Line wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    double height = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Verifica si una tubería está conectada en ambos extremos."}, {"role": "assistant", "content": "Pipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nbool isFullyConnected = false;\n\nif (pipe != null)\n{\n    isFullyConnected = pipe.ConnectorManager.UnusedConnectors.IsEmpty;\n}\n"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un muro del tipo 'Genérico - 176mm' en el 'Nivel 1' desde (0,0) hasta (9,5)."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Genérico - 200mm\") as WallType;\nXYZ startPoint = new XYZ(0, 0, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nWall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una losa de cimentación estructural de 40cm de espesor."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Foundation Slab\"))\n{\n    t.Start();\n    Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    FloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n    if(slabTypeToDuplicate != null && foundationLevel != null)\n    {\n        string newTypeName = \"Losa Cimentación 40cm\";\n        FloorType newSlabType = slabTypeToDuplicate.Duplicate(newTypeName) as FloorType;\n        if(newSlabType != null)\n        {\n            CompoundStructure cs = newSlabType.GetCompoundStructure();\n            if (cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 400 / 304.8);\n                newSlabType.SetCompoundStructure(cs);\n                XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n                Floor.Create(doc, new List<CurveLoop>{profile}, newSlabType.Id, foundationLevel.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de texto de 5mm de color verde."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 / 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Delete all detail lines in the active view."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Delete Detail Lines\"))\n{\n    t.Start();\n    if (doc.ActiveView != null)\n    {\n        ICollection<ElementId> detailLines = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(DetailCurve)).ToElementIds();\n        if (detailLines.Count > 0)\n        {\n            doc.Delete(detailLines);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an electrical circuit connecting light fixtures to a panel."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Electrical Circuit\"))\n{\n    t.Start();\n    FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n    List<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\n    if (panel != null && fixtureIds.Count > 0)\n    {\n        ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n        if(electricalSystem != null)\n        {\n            electricalSystem.SelectPanel(panel);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a detail group with the selected detail items."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Typical Detail 1\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Adjust the view's crop region to a rectangle from (0,0) to (21,23)."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Adjust Crop Region\"))\n{\n    t.Start();\n    View view = doc.ActiveView;\n\n    if (view != null && view.CropBoxActive)\n    {\n        BoundingBoxXYZ cropBox = view.CropBox;\n        if (cropBox != null)\n        {\n            XYZ minPoint = new XYZ(0, 0, cropBox.Min.Z);\n            XYZ maxPoint = new XYZ(20 / 0.3048, 20 / 0.3048, cropBox.Max.Z);\n            cropBox.Min = minPoint;\n            cropBox.Max = maxPoint;\n            view.CropBox = cropBox;\n            view.CropBoxVisible = true;\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Desune la geometría de dos elementos dados."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer elemento\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo elemento\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una apertura de hueco vertical (shaft) desde el nivel base hasta el nivel más alto."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Shaft\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(2 / 0.3048, 2 / 0.3048,0);\n        XYZ p2 = new XYZ(5 / 0.3048, 2 / 0.3048,0);\n        XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n        XYZ p4 = new XYZ(2 / 0.3048, 5 / 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra un muro buscando el valor 'W-01' en su parámetro de Marca."}, {"role": "assistant", "content": "string markValue = \"W-01\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue);\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().WherePasses(filter).FirstOrDefault() as Wall;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the coordinates of the project base point and the survey point."}, {"role": "assistant", "content": "BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Elimina todos los tipos de muro no utilizados en el proyecto."}, {"role": "assistant", "content": "ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a DirectShape with a 2x2x2 meter box shape."}, {"role": "assistant", "content": "TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"DirectShape Box\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Delete all unused wall types in the project."}, {"role": "assistant", "content": "ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\ndoc.Delete(unusedWallTypes);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Model a ceiling at a height of 3 meters on Level 1."}, {"role": "assistant", "content": "CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (ceilingType != null && level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,0,0)));\n\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista de sección usando una caja de 9x8x4 metros."}, {"role": "assistant", "content": "ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\n\nif (sectionVFT != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(0,0,0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all material names."}, {"role": "assistant", "content": "List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new 5mm text type in green color."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 / 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Unjoin the geometry of two given elements."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first element\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second element\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a curtain wall 6 meters wide and 4 meters high."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Mueve un elemento seleccionado a la posición (6,4)."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para mover\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            XYZ newPosition = new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), lp.Point.Z);\n            lp.Point = newPosition;\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new 5mm text type in green color."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 / 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a structural foundation slab 40cm thick."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Foundation Slab\"))\n{\n    t.Start();\n    Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    FloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n    if(slabTypeToDuplicate != null && foundationLevel != null)\n    {\n        string newTypeName = \"Foundation Slab 40cm\";\n        FloorType newSlabType = slabTypeToDuplicate.Duplicate(newTypeName) as FloorType;\n        if(newSlabType != null)\n        {\n            CompoundStructure cs = newSlabType.GetCompoundStructure();\n            if (cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 400 / 304.8);\n                newSlabType.SetCompoundStructure(cs);\n                XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n                doc.Create.NewFloor(new List<CurveLoop>{profile}, newSlabType, foundationLevel, true);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all doors on Level 2 that belong to the 'Single-Flush' family."}, {"role": "assistant", "content": "Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Single-Flush\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una escalera entre Nivel 1 y Nivel 2."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    // TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    // Stairs creation requires using the StairsEditScope class.\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all walls on Level 1 that are structural."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Insert a window 1m wide and 1m high into a wall."}, {"role": "assistant", "content": "FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    // Duplica el tipo para no modificar el original y asegura un nombre único\n    string newTypeName = $\"Window {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters), UnitTypeId.Meters)}m x {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitTypeId.Meters)}m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    // Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Connect two cable trays with an elbow fitting."}, {"role": "assistant", "content": "List<CableTray> trays = new FilteredElementCollector(doc).OfClass(typeof(CableTray)).Cast<CableTray>().ToList();\n\nif (trays.Count >= 2)\n{\n    Connector c1 = trays[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = trays[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    \n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewUnionFitting(c1, c2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nota de texto con una flecha apuntando a un elemento y una ubicación dadas."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference target = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para anotar\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (target != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        opts.HorizontalAlignment = HorizontalTextAlignment.Left;\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"Revisar este elemento\", opts);\n        if (note != null)\n        {\n            Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n            leader.End = target.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Given a wall, find all pipes passing through it."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\n\nList<ElementId> intersectingPipes = new List<ElementId>();\nif (wallRef != null)\n{\n    Element wall = doc.GetElement(wallRef);\n    if (wall != null)\n    {\n        ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n        intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds().ToList();\n    }\n}\n"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Hide all annotation categories in the active view."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Hide Annotation Categories\"))\n{\n    t.Start();\n    Categories categories = doc.Settings.Categories;\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        foreach(Category cat in categories)\n        {\n            if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n            {\n                 activeView.SetCategoryHidden(cat.Id, true);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Copia todos los elementos del Nivel 1 al Nivel 2."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(elementsToCopy.Any())\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a global length parameter named 'CorridorWidth' with a value of 1m."}, {"role": "assistant", "content": "string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)));\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un muro cortina de 6 metros de ancho y 4 metros de alto."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el tipo de una losa por uno que contenga 'Concreto'."}, {"role": "assistant", "content": "Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concreto\") || ft.Name.Contains(\"Concrete\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de muro 'Muro Genérico 344mm' con un grosor de 27cm."}, {"role": "assistant", "content": "string newTypeName = \"Muro Genérico 300mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(344, UnitTypeId.Millimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Tag all rooms with their area."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint loc = room.Location as LocationPoint;\n            if(loc != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(loc.Point.X, loc.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un suelo con un contorno de 9 por 9 metros."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Model a ceiling at a height of 3 meters on Level 1."}, {"role": "assistant", "content": "CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (ceilingType != null && level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,0,0)));\n\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las vistas de sección en el proyecto."}, {"role": "assistant", "content": "List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Importa topografía georreferenciada desde un archivo LandXML."}, {"role": "assistant", "content": "// The Revit API in the provided context does not support direct LandXML import.\n// This functionality typically requires additional add-ins like the Site Designer, which are not available here.\n// As a placeholder, this code will show how to create a simple topography surface from a list of points.\nusing(Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(50, 0, 5));\n    points.Add(new XYZ(0, 50, 10));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Import a CAD file named 'BasePlan.dwg' into the current view."}, {"role": "assistant", "content": "string filePath = \"C:/CAD/BasePlan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las vistas que no tienen una plantilla de vista asignada."}, {"role": "assistant", "content": "List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all views that do not have an assigned view template."}, {"role": "assistant", "content": "List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId.Equals(ElementId.InvalidElementId)).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo nivel llamado 'Planta Sótano' a una elevación de -4 metros."}, {"role": "assistant", "content": "string levelName = \"Planta Sótano\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Display a dialog box with 'Yes', 'No', and 'Cancel' options."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de cota lineal con texto azul y tamaño 2mm."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Dimension Type\"))\n{\n    t.Start();\n    string newTypeName = \"Cota Azul 2mm\";\n    DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\n    if (linearDimType != null)\n    {\n        DimensionType newDimType = linearDimType.Duplicate(newTypeName) as DimensionType;\n        if (newDimType != null)\n        {\n            Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n            Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(2 / 304.8);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Delete all unused wall types in the project."}, {"role": "assistant", "content": "ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change the type of a floor to one that contains 'Concrete'."}, {"role": "assistant", "content": "Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concrete\"));\n\nif (floorToChange != null && newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate the 'Level 1' view as a dependent view."}, {"role": "assistant", "content": "ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 1\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place a spot elevation on a given face and view point."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select the top face of the floor\");\n\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && activeView != null)\n    {\n        XYZ pointOnFace = faceRef.GlobalPoint;\n        XYZ leaderEnd = pointOnFace + new XYZ(1 / 0.3048, 1 / 0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all material names."}, {"role": "assistant", "content": "List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Copia todos los elementos del Nivel 1 al Nivel 2."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\n\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if (elementsToCopy.Count > 0)\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Ajusta la región de recorte de la vista a un rectángulo de (0,0) a (24,23)."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Adjust Crop Region\"))\n{\n    t.Start();\n    View view = doc.ActiveView;\n\n    if (view != null && view.CropBoxActive)\n    {\n        BoundingBoxXYZ cropBox = view.CropBox;\n        if (cropBox != null)\n        {\n            XYZ minPoint = new XYZ(0, 0, cropBox.Min.Z);\n            XYZ maxPoint = new XYZ(20 / 0.3048, 20 / 0.3048, cropBox.Max.Z);\n            cropBox.Min = minPoint;\n            cropBox.Max = maxPoint;\n            view.CropBox = cropBox;\n            view.CropBoxVisible = true;\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Ajusta todas las ventanas para que la altura del antepecho sea 1 metro."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 / 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Permite al usuario seleccionar un muro y obtén su ElementId."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el nombre de todas las vistas de planta para que empiecen con 'ARQ_'."}, {"role": "assistant", "content": "string prefix = \"ARQ_\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate the 'Generic - 150mm' wall type and name it 'Interior - 15cm Plaster'."}, {"role": "assistant", "content": "string originalName = \"Generic - 150mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un sistema de vigas en un forjado seleccionado."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén la tabla de planificación 'Muros' y exporta sus datos a un archivo CSV."}, {"role": "assistant", "content": "ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s=>s.Name==\"Muros\");\n\nif (schedule != null)\n{\n    string folderPath = \"C:/RevitExports/\";\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(folderPath, \"Muros.csv\", options);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Permite al usuario seleccionar un muro y obtén su ElementId."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Selecciona todos los muros del 'Nivel 2' y cambia su comentario a 'REVISAR AISLAMIENTO'."}, {"role": "assistant", "content": "Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nList<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\nforeach(Wall wall in wallsOnLevel2)\n{\n    wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(\"REVISAR AISLAMIENTO\");\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change the visual style of the active view to 'Hidden Line'."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Move the selected elements 3 meters up."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Oculta todos los elementos de anotación en la vista activa."}, {"role": "assistant", "content": "if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an extrusion roof with an arc profile."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change the type of all 'Fixed' windows to 'Casement'."}, {"role": "assistant", "content": "FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Casement\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Fixed\"));\n\nif (newType != null && oldType != null)\n{\n    List<FamilyInstance> windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Fill the material parameter of all walls with 'Concrete'."}, {"role": "assistant", "content": "Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concrete\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an electrical conduit with a 1-inch diameter."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 / 0.3048);\n        XYZ end = new XYZ(5 / 0.3048, 0, 3 / 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set(1.0 / 12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the system type of a selected pipe."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a pipe\");\n\nPipingSystemType systemType = null;\nif (pickedRef != null)\n{\n    Pipe pipe = doc.GetElement(pickedRef.ElementId) as Pipe;\n    if (pipe != null)\n    {\n        Parameter systemTypeParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        if (systemTypeParam != null && systemTypeParam.HasValue)\n        {\n            systemType = doc.GetElement(systemTypeParam.AsElementId()) as PipingSystemType;\n        }\n    }\n}\n"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls with an empty 'Mark' parameter and set it to 'WM-01'."}, {"role": "assistant", "content": "List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"WM-01\");\n  }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca postes de iluminación cada 9m en un camino de 111m."}, {"role": "assistant", "content": "FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Inserta una ventana de 1 metro de ancho y 1 metros de alto en un muro, creando un nuevo tipo si es necesario."}, {"role": "assistant", "content": "Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    // Duplica el tipo para no modificar el original\n    string newTypeName = $\"Window 1.0m x 1.2m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    // Activa el nuevo tipo si no lo está\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    // Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    if(widthParam != null) widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n    if(heightParam != null) heightParam.Set(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n\n    // Obtén la información necesaria para la inserción\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        // Inserta una instancia del NUEVO tipo\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Alinea las líneas de centro de dos muros seleccionados por el usuario."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer muro (el que se moverá)\");\nReference r2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo muro (el de referencia)\");\n\nif (r1 != null && r2 != null)\n{\n    Wall w1 = doc.GetElement(r1) as Wall;\n    Wall w2 = doc.GetElement(r2) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (w1 != null && w2 != null && activeView != null)\n    {\n        LocationCurve lc1 = w1.Location as LocationCurve;\n        LocationCurve lc2 = w2.Location as LocationCurve;\n        if (lc1 != null && lc2 != null)\n        {\n            doc.Create.NewAlignment(activeView, lc1.Curve.Reference, lc2.Curve.Reference);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca pilares en todos los cruces de la rejilla."}, {"role": "assistant", "content": "FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea 4 ejes en sentido vertical separados 10 metros."}, {"role": "assistant", "content": "double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<4; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all rooms on Level 3."}, {"role": "assistant", "content": "Level level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nList<Element> roomsOnLevel3 = new List<Element>();\n\nif (level3 != null)\n{\n    roomsOnLevel3 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level3.Id).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new door type named 'FR-90 Door' and set its fire rating to '90 min'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"FR-90 Door\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un techo por extrusión con un perfil en arco."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Move the project base point 88 meters to the north."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Move Project Base Point\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        XYZ translation = new XYZ(0, 100 / 0.3048, 0);\n        ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un workset llamado 'Estructura'."}, {"role": "assistant", "content": "string wsName = \"Estructura\";\nWorkset newWorkset = Workset.Create(doc, wsName);\n"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de tubería con material de Cobre."}, {"role": "assistant", "content": "string newTypeName = \"Tubería de Cobre\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial copper = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Copper\") || m.Name.Contains(\"Cobre\")) as Material;\n\nif (pipeTypeToDuplicate != null && copper != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(copper.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplica el nivel 1 con un desfase de 3m y llámalo 'Mezanine'."}, {"role": "assistant", "content": "string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una cota de elevación en una cara y un punto de vista dados."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara superior del suelo\");\n\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && activeView != null)\n    {\n        XYZ pointOnFace = faceRef.GlobalPoint;\n        XYZ leaderEnd = pointOnFace + new XYZ(1 / 0.3048, 1 / 0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un pilar del tipo 'Hormigón-Rectangular 30x60' en cada intersección de la rejilla."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Hormigón-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de puerta llamado 'Puerta RF-90' y establece su resistencia al fuego a '90 min'."}, {"role": "assistant", "content": "string newTypeName = \"Puerta RF-90\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"90 min\");\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Model a railing on an existing staircase."}, {"role": "assistant", "content": "RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Fija el elemento seleccionado para que no se mueva."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\n\nif (selectedId != ElementId.InvalidElementId)\n{\n    Element elementToPin = doc.GetElement(selectedId);\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de puerta llamado 'Puerta RF-82' y establece su resistencia al fuego a '105 min'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Puerta RF-90\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all annotation families."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el tipo de todos los muros seleccionados a 'Muro Exterior'."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior\");\n\nif (selectedIds.Count > 0 && targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rotate project north 28 degrees clockwise."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInDegrees = 30.0;\n        double angleInRadians = -(angleInDegrees * Math.PI / 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Delete all unused wall types in the project."}, {"role": "assistant", "content": "ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a wall on Level 1 from (0,0,0) to (10,0,0) with a height of 4 meters."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Import a CAD file named 'BasePlan.dwg' into the current view."}, {"role": "assistant", "content": "string filePath = \"C:/CAD/BasePlan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new level 'Level 3' at an elevation of 12 meters."}, {"role": "assistant", "content": "double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 3\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Ajusta la región de recorte de la vista a un rectángulo de (0,0) a (20,20)."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Adjust Crop Region\"))\n{\n    t.Start();\n    View view = doc.ActiveView;\n\n    if (view != null && view.CropBoxActive)\n    {\n        BoundingBoxXYZ cropBox = view.CropBox;\n        if (cropBox != null)\n        {\n            XYZ minPoint = new XYZ(0, 0, cropBox.Min.Z);\n            XYZ maxPoint = new XYZ(20 / 0.3048, 20 / 0.3048, cropBox.Max.Z);\n            cropBox.Min = minPoint;\n            cropBox.Max = maxPoint;\n            view.CropBox = cropBox;\n            view.CropBoxVisible = true;\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change the type of all 'Fixed' windows to 'Casement'."}, {"role": "assistant", "content": "FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Casement\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Fixed\"));\n\nif (newType != null && oldType != null)\n{\n    List<FamilyInstance> windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un conducto eléctrico de 1 pulgada de diámetro."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 / 0.3048);\n        XYZ end = new XYZ(5 / 0.3048, 0, 3 / 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set(1.0 / 12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aplica el estilo visual 'Rayos X' a la vista 3D activa."}, {"role": "assistant", "content": "View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe; // Simula el efecto 'Rayos X'\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista 3D por defecto."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el nombre de todas las familias cargadas que contengan 'Métrica' a 'Imperial'."}, {"role": "assistant", "content": "List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Métrica\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"Métrica\", \"Imperial\");\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un muro cortina de 6 metros de ancho y 4 metros de alto."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de puerta llamado 'Puerta RF-81' y establece su resistencia al fuego a '79 min'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Puerta RF-90\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de puerta llamado 'Puerta RF-90' y establece su resistencia al fuego a '90 min'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Puerta RF-90\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade un punto de referencia en las coordenadas (1,2,3) dentro del editor de familias."}, {"role": "assistant", "content": "doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Given a wall, find all pipes passing through it."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\n\nList<ElementId> intersectingPipes = new List<ElementId>();\nif (wallRef != null)\n{\n    Element wall = doc.GetElement(wallRef);\n    if (wall != null)\n    {\n        ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n        intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds().ToList();\n    }\n}\n"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una apertura de hueco (shaft) que atraviese desde el Nivel 1 al Nivel 3."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Shaft Opening\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 3\");\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n        XYZ p2 = new XYZ(8 / 0.3048, 5 / 0.3048,0);\n        XYZ p3 = new XYZ(8 / 0.3048, 8 / 0.3048,0);\n        XYZ p4 = new XYZ(5 / 0.3048, 8 / 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add a 90-degree elbow between two pipes."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Add Elbow\"))\n{\n    t.Start();\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.ConnectorManager != null && p.ConnectorManager.UnusedConnectors.Size > 0).Take(2).ToList();\n\n    if (pipes.Count >= 2)\n    {\n        Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        \n        if (c1 != null && c2 != null)\n        {\n            doc.Create.NewElbowFitting(c1, c2);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las familias y sus tipos."}, {"role": "assistant", "content": "List<string> familyAndTypeNames = new List<string>();\nList<Family> families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().ToList();\nforeach (Family fam in families)\n{\n    familyAndTypeNames.Add($\"Familia: {fam.Name}\");\n    foreach (ElementId symbolId in fam.GetFamilySymbolIds())\n    {\n        FamilySymbol sym = doc.GetElement(symbolId) as FamilySymbol;\n        if (sym != null)\n        {\n            familyAndTypeNames.Add($\"\\tTipo: {sym.Name}\");\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Establece el parámetro 'Comentarios' de todas las puertas del Nivel 1 a 'Clasificación Fuego - 90 min'."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Clasificación Fuego - 90 min\");\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra el host de una luminaria basada en cara."}, {"role": "assistant", "content": "FamilyInstance lightFixture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().Cast<FamilyInstance>().FirstOrDefault(fi => fi.HostFace != null);\n\nElement host = null;\nif (lightFixture != null)\n{\n    Reference hostFaceRef = lightFixture.HostFace;\n    if (hostFaceRef != null)\n    {\n        host = doc.GetElement(hostFaceRef.ElementId);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new level named 'Mezzanine' at 7.5 meters elevation."}, {"role": "assistant", "content": "string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Fill the material parameter of all walls with 'Concrete'."}, {"role": "assistant", "content": "Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concrete\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una cimentación de viga de 8 metros de largo."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, StructuralType.Footing);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Muestra un cuadro de diálogo con las opciones 'Sí', 'No' y 'Cancelar'."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea 10 worksets de arquitectura."}, {"role": "assistant", "content": "List<string> worksetNames = new List<string> { \"TAD_ARQ_MAM\", \"TAD_ARQ_ACA\", \"TAD_ARQ_PLA\", \"TAD_ARQ_PSO\", \"TAD_ARQ_HRE\", \"TAD_ARQ_ALU\", \"TAD_ARQ_CAR\", \"TAD_ARQ_MOB\", \"TAD_ARQ_PLO\", \"TAD_ARQ_EXT\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista de plano de plafón reflejado para el Nivel 1."}, {"role": "assistant", "content": "string levelName = \"Nivel 1\";\nstring viewName = \"Plano de Plafón Nivel 1\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 'Concrete-Rectangular 30x60' column at each grid intersection."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Concrete-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 'Roof Terrace' level at 18m."}, {"role": "assistant", "content": "string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(18, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a spherical DirectShape with a 5-meter radius."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Sphere DirectShape\"))\n{\n    t.Start();\n    double radius = 5 / 0.3048;\n    List<GeometryObject> solids = new List<GeometryObject>();\n    Frame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\n    Arc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\n    Line line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\n    Solid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\n    solids.Add(sphere);\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\n    if (ds != null)\n    {\n        ds.SetShape(solids);\n        ds.Name = \"Sphere DirectShape\";\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera una cuadrícula de columnas 4x5 con separación de 7 metros."}, {"role": "assistant", "content": "FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa."}, {"role": "assistant", "content": "Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplica el nivel 1 con un desfase de 3m y llámalo 'Mezanine'."}, {"role": "assistant", "content": "string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Select all walls on 'Level 2' and change their comment to 'REVIEW INSULATION'."}, {"role": "assistant", "content": "Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nList<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\nforeach(Wall wall in wallsOnLevel2)\n{\n    wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(\"REVIEW INSULATION\");\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the visibility of the 'Furniture' category to false in the active view."}, {"role": "assistant", "content": "Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nView activeView = doc.ActiveView;\n\nif (furnitureCat != null && activeView != null)\n{\n    activeView.SetCategoryHidden(furnitureCat.Id, true);\n}\n"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls that have no base level assigned."}, {"role": "assistant", "content": "ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls taller than 4 meters."}, {"role": "assistant", "content": "double heightThreshold = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a vertical shaft opening from the base level to the top level."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Shaft\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(2 / 0.3048, 2 / 0.3048,0);\n        XYZ p2 = new XYZ(5 / 0.3048, 2 / 0.3048,0);\n        XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n        XYZ p4 = new XYZ(2 / 0.3048, 5 / 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de los nombres de todos los materiales."}, {"role": "assistant", "content": "List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dimension the length of a user-selected wall."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall to dimension\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade un punto de referencia en las coordenadas (1,2,3) dentro del editor de familias."}, {"role": "assistant", "content": "doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las puertas del Nivel 2 que sean de la familia 'Puerta Sencilla'."}, {"role": "assistant", "content": "Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Puerta Sencilla\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a pipe with a 170mm diameter."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(170, UnitTypeId.Millimeters));\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un DirectShape esférico con un radio de 4 metros."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Sphere DirectShape\"))\n{\n    t.Start();\n    double radius = 5 / 0.3048;\n    List<GeometryObject> solids = new List<GeometryObject>();\n    Frame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\n    Arc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\n    Line line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\n    Solid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\n    solids.Add(sphere);\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\n    if (ds != null)\n    {\n        ds.SetShape(solids);\n        ds.Name = \"Esfera DirectShape\";\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las vistas que no tienen una plantilla de vista asignada."}, {"role": "assistant", "content": "List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId.Equals(ElementId.InvalidElementId)).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new schedule for Structural Columns."}, {"role": "assistant", "content": "string scheduleName = \"Structural Column Schedule\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the 'Mark' parameter of all selected walls to 'W-EXT-1'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all annotation families and count how many there are."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\nint count = annotationFamilies.Count;\n"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las familias de anotación y cuenta cuántas hay."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\nint count = annotationFamilies.Count;\n"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a Path of Travel between points (1,1) and (12,12) in the plan view."}, {"role": "assistant", "content": "// PathOfTravel.Create is likely inaccessible in this environment.\n// A comment is left as a placeholder for the intended functionality.\n/*\nusing (Transaction t = new Transaction(doc, \"Create Path of Travel\"))\n{\n    t.Start();\n    ViewPlan viewPlan = doc.ActiveView as ViewPlan;\n\n    if (viewPlan != null && viewPlan.ViewType == ViewType.FloorPlan)\n    {\n        ElementId levelId = viewPlan.get_Parameter(BuiltInParameter.PLAN_VIEW_LEVEL).AsElementId();\n        Level level = doc.GetElement(levelId) as Level;\n        if (level != null)\n        {\n            XYZ startPoint = new XYZ(1 / 0.3048, 1 / 0.3048, level.Elevation);\n            XYZ endPoint = new XYZ(10 / 0.3048, 10 / 0.3048, level.Elevation);\n            // PathOfTravel.Create(viewPlan, startPoint, endPoint);\n        }\n    }\n    t.Commit();\n}\n*/"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rename all plan views to start with 'ARCH_'."}, {"role": "assistant", "content": "string prefix = \"ARCH_\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Align the centerlines of two user-selected walls."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first wall (the one that will move)\");\nReference r2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second wall (the reference)\");\n\nif (r1 != null && r2 != null)\n{\n    Wall w1 = doc.GetElement(r1) as Wall;\n    Wall w2 = doc.GetElement(r2) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (w1 != null && w2 != null && activeView != null)\n    {\n        LocationCurve lc1 = w1.Location as LocationCurve;\n        LocationCurve lc2 = w2.Location as LocationCurve;\n        if (lc1 != null && lc2 != null)\n        {\n            doc.Create.NewAlignment(activeView, lc1.Curve.Reference, lc2.Curve.Reference);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls taller than 3 meters."}, {"role": "assistant", "content": "double heightThreshold = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nList<ElementId> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change the detail level of the active view to 'Medium'."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Medium;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade una línea de rejilla horizontal a un muro cortina a 2 metros de altura."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) / 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, 1.5 / 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Muestra un cuadro de diálogo con las opciones 'Sí', 'No' y 'Cancelar'."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place a piece of furniture at coordinates (2,3)."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), furnitureSymbol, level, StructuralType.NonStructural);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 3D view oriented from the southeast."}, {"role": "assistant", "content": "string viewName = \"3D View Southeast\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo nivel llamado 'Planta Sótano' a una elevación de -5 metros."}, {"role": "assistant", "content": "string levelName = \"Planta Sótano\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una cota de elevación en una cara y un punto de vista dados."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara superior del suelo\");\n\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && activeView != null)\n    {\n        XYZ pointOnFace = faceRef.GlobalPoint;\n        XYZ leaderEnd = pointOnFace + new XYZ(1 / 0.3048, 1 / 0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de puerta llamado 'Puerta RF-87' y establece su resistencia al fuego a '77 min'."}, {"role": "assistant", "content": "string newTypeName = \"Puerta RF-90\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = null;\nif (doorTypeToDuplicate != null)\n{\n    newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"90 min\");\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade un plano de referencia horizontal llamado 'Eje Central A'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"Eje Central A\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las vistas de sección en el proyecto."}, {"role": "assistant", "content": "List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Oculta todas las categorías de anotación en la vista activa."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Hide Annotation Categories\"))\n{\n    t.Start();\n    Categories categories = doc.Settings.Categories;\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        foreach(Category cat in categories)\n        {\n            if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n            {\n                 activeView.SetCategoryHidden(cat.Id, true);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Copy all elements from Level 1 to Level 2."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(elementsToCopy.Any())\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca postes de iluminación cada 10m en un camino de 97m."}, {"role": "assistant", "content": "FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Export a list of all project warnings to a text file on the desktop."}, {"role": "assistant", "content": "string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nstring filePath = System.IO.Path.Combine(desktopPath, \"RevitWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\nSystem.IO.File.WriteAllLines(filePath, warningDescriptions);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rellena el parámetro de material de todos los muros con 'Concreto'."}, {"role": "assistant", "content": "Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concreto\")) as Material;\nif(concreteMaterial != null)\n{\n    var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Copia todos los elementos del Nivel 1 al Nivel 2."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\n\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if (elementsToCopy.Count > 0)\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén todas las familias de puertas cargadas en el proyecto."}, {"role": "assistant", "content": "List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the sill height of all windows to 982mm."}, {"role": "assistant", "content": "double sillHeight = UnitUtils.ConvertToInternalUnits(982, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all door families loaded in the project."}, {"role": "assistant", "content": "List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate the 'Level 2' plan view and make it a view template."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Level 2\");\n    string templateName = \"Level 2 Template\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           // In older APIs, direct conversion to a template may not be available.\n           // A common workaround is to set the IsTemplate property if available and writable, \n           // which is not the case here. This is left as a comment for conceptual understanding.\n           // newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place a piece of furniture at coordinates (2,3)."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), furnitureSymbol, level, StructuralType.NonStructural);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a section view between points (0,0,0) and (10,10,0)."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera un reporte con el área de todas las habitaciones del proyecto."}, {"role": "assistant", "content": "List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nList<double> roomAreas = new List<double>();\nforeach (Room room in rooms)\n{\n    if (room != null && room.Area > 0)\n    {\n        roomAreas.Add(UnitUtils.ConvertFromInternalUnits(room.Area, UnitTypeId.SquareMeters));\n    }\n}\n// El orquestador puede ahora usar la lista 'roomAreas' para generar el reporte final."}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una copia de la vista activa y nómbrala 'Copia de Trabajo'."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"Copia de Trabajo\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Copy all elements from Level 1 to Level 2."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(elementsToCopy.Any())\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new door type named 'FR-98 Door' and set its fire rating to '84 min'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"FR-90 Door\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Activate all family symbols loaded in the project."}, {"role": "assistant", "content": "List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) \n    {\n        sym.Activate();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Ajusta todas las ventanas para que tengan la altura del antepecho a 900mm."}, {"role": "assistant", "content": "double sillHeight = UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Align the centerlines of two user-selected walls."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first wall (the one that will move)\");\nReference r2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second wall (the reference)\");\n\nif (r1 != null && r2 != null)\n{\n    Wall w1 = doc.GetElement(r1) as Wall;\n    Wall w2 = doc.GetElement(r2) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (w1 != null && w2 != null && activeView != null)\n    {\n        LocationCurve lc1 = w1.Location as LocationCurve;\n        LocationCurve lc2 = w2.Location as LocationCurve;\n        if (lc1 != null && lc2 != null)\n        {\n            doc.Create.NewAlignment(activeView, lc1.Curve.Reference, lc2.Curve.Reference);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea columnas en cada intersección de ejes."}, {"role": "assistant", "content": "FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add a horizontal reference plane named 'Centerline A'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"Centerline A\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Activa todos los símbolos de familia cargados en el proyecto."}, {"role": "assistant", "content": "List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) \n    {\n        sym.Activate();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa."}, {"role": "assistant", "content": "Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una dimensión radial para un muro curvo."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Radial Dimension\"))\n{\n    t.Start();\n    Wall curvedWall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.Location is LocationCurve && (w.Location as LocationCurve).Curve is Arc);\n    View activeView = doc.ActiveView;\n\n    if (curvedWall != null && activeView != null)\n    {\n        LocationCurve locCurve = curvedWall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Arc arc = locCurve.Curve as Arc;\n            if (arc != null)\n            {\n                ReferenceArray refArray = new ReferenceArray();\n                refArray.Append(arc.Reference);\n                doc.Create.NewDimension(activeView, Line.CreateBound(arc.Center, arc.GetEndPoint(0)), refArray);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Modela una bandeja de cables entre dos puntos."}, {"role": "assistant", "content": "CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(trayType != null && level != null)\n{\n    XYZ start = new XYZ(0,10,3);\n    XYZ end = new XYZ(15,10,3);\n    CableTray.Create(doc, trayType.Id, start, end, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista 3D orientada desde el sureste."}, {"role": "assistant", "content": "string viewName = \"Vista 3D Sureste\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el tipo de todas las ventanas de 'Fijo' a 'Abatible'."}, {"role": "assistant", "content": "FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Abatible\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Fijo\"));\n\nif (newType != null && oldType != null)\n{\n    List<FamilyInstance> windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all walls from a linked model that intersect with a bounding box."}, {"role": "assistant", "content": "RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\nList<Element> linkedWalls = new List<Element>();\n\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    if (linkDoc != null)\n    {\n        BoundingBoxXYZ bbox = new BoundingBoxXYZ();\n        bbox.Min = new XYZ(0,0,0);\n        bbox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(bbox.Min, bbox.Max));\n        linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToList();\n    }\n}\n"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add mullions to all grid lines of a curtain wall."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Add Mullions\"))\n{\n    t.Start();\n    Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\n    MullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\n\n    if (curtainWall != null && mullionType != null)\n    {\n        CurtainGrid grid = curtainWall.CurtainGrid;\n        if (grid != null)\n        {\n            foreach (ElementId gridLineId in grid.GetVGridLineIds())\n            {\n                CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n                if(line != null) line.AddMullions(mullionType, false);\n            }\n            foreach (ElementId gridLineId in grid.GetUGridLineIds())\n            {\n                CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n                if(line != null) line.AddMullions(mullionType, false);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Export the model to IFC4 format for coordination."}, {"role": "assistant", "content": "string folderPath = \"C:/RevitExports/\";\nstring fileName = doc.Title + \"-Coordination.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4;\ndoc.Export(folderPath, fileName, options);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rellena el parámetro de material de todos los muros con 'Concreto'."}, {"role": "assistant", "content": "Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concreto\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Activate all family symbols loaded in the project."}, {"role": "assistant", "content": "List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) \n    {\n        sym.Activate();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new elevation view looking south."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create South Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 0);\n            if (aev != null)\n            {\n                aev.Name = \"South Elevation\";\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Check if the active view is a plan view."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nbool isPlanView = false;\n\nif (activeView != null)\n{\n    isPlanView = activeView.ViewType == ViewType.FloorPlan \n                 || activeView.ViewType == ViewType.CeilingPlan \n                 || activeView.ViewType == ViewType.AreaPlan \n                 || activeView.ViewType == ViewType.EngineeringPlan;\n}\n"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Sincroniza el modelo local con el central, añadiendo el comentario 'Actualización de diseño'."}, {"role": "assistant", "content": "if (doc.IsWorkshared)\n{\n    TransactWithCentralOptions tco = new TransactWithCentralOptions();\n    SynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\n    swcOpts.Comment = \"Actualización de diseño\";\n    swcOpts.SaveLocalAfter = true;\n    doc.SynchronizeWithCentral(tco, swcOpts);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las familias de anotación y cuenta cuántas hay."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the total number of warnings in the project."}, {"role": "assistant", "content": "int totalWarnings = doc.GetWarnings().Count;\n"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all views that do not have an assigned view template."}, {"role": "assistant", "content": "List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId.Equals(ElementId.InvalidElementId)).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén todos los muros del Nivel 1 que son estructurales."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level1 != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Establece el parámetro 'Comentarios' de todas las puertas del Nivel 1 a 'Clasificación Fuego - 90 min'."}, {"role": "assistant", "content": "using(Transaction t = new Transaction(doc, \"Set Door Comments\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    if(level1 != null)\n    {\n        List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId.Equals(level1.Id)).ToList();\n        foreach(FamilyInstance door in doorsOnLevel1)\n        {\n            Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n            if(commentsParam != null && !commentsParam.IsReadOnly)\n            {\n                commentsParam.Set(\"Clasificación Fuego - 90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Elimina todas las líneas de detalle en la vista activa."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection<ElementId> detailLines = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(DetailLine)).ToElementIds();\n    if (detailLines.Count > 0)\n    {\n        doc.Delete(detailLines);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Check if a pipe is connected at both ends."}, {"role": "assistant", "content": "Pipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nbool isFullyConnected = false;\n\nif (pipe != null)\n{\n    isFullyConnected = pipe.ConnectorManager.UnusedConnectors.IsEmpty;\n}\n"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Paint the interior face of exterior walls with 'White Paint'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Paint Walls\"))\n{\n    t.Start();\n    Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"White Paint\");\n    var exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior).ToList();\n\n    if (paintMaterial != null)\n    {\n        foreach (Wall w in exteriorWalls)\n        {\n            IList<Reference> interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n            if(interiorFaceRefs.Count > 0)\n            {\n                Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n                if (interiorFace != null)\n                {\n                    doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 3D view with the section box enabled."}, {"role": "assistant", "content": "string viewName = \"3D View with Section Box\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de texto de 5mm de color verde."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 / 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add mullions to all grid lines of a curtain wall."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Add Mullions\"))\n{\n    t.Start();\n    Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\n    MullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\n\n    if (curtainWall != null && mullionType != null)\n    {\n        CurtainGrid grid = curtainWall.CurtainGrid;\n        if (grid != null)\n        {\n            foreach (ElementId gridLineId in grid.GetVGridLineIds())\n            {\n                CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n                if(line != null) line.AddMullions(mullionType, false);\n            }\n            foreach (ElementId gridLineId in grid.GetUGridLineIds())\n            {\n                CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n                if(line != null) line.AddMullions(mullionType, false);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the sill height of all windows to 836mm."}, {"role": "assistant", "content": "double sillHeight = UnitUtils.ConvertToInternalUnits(836, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Carga un enlace DWG preservando los colores."}, {"role": "assistant", "content": "string filePath = \"C:/CAD/Planos.dwg\";\nDWGImportOptions opts = new DWGImportOptions();\nopts.ColorMode = ImportColorMode.Preserved;\nElementId linkId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(filePath, opts, activeView, out linkId);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dentro del editor de familias, crea un nuevo plano de referencia horizontal."}, {"role": "assistant", "content": "string rpName = \"Plano Horizontal\";\nXYZ start = new XYZ(UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0, 0);\nXYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0);\nXYZ normal = XYZ.BasisY;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = rpName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all annotation families and count how many there are."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todos los muros con más de 4 metros de altura."}, {"role": "assistant", "content": "double heightThreshold = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un muro del tipo 'Genérico - 200mm' en el 'Nivel 1' desde (0,0) hasta (10,5)."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Genérico - 200mm\") as WallType;\nXYZ startPoint = new XYZ(0, 0, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nif (level != null && wallType != null)\n{\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un techo por extrusión con una pendiente del 8%."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10 / 0.3048, 0, 1 / 0.3048)));\n        \n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        \n        if (refPlane != null)\n        {\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10 / 0.3048);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Conecta dos bandejas de cables con un codo."}, {"role": "assistant", "content": "List<CableTray> trays = new FilteredElementCollector(doc).OfClass(typeof(CableTray)).Cast<CableTray>().ToList();\n\nif (trays.Count >= 2)\n{\n    Connector c1 = trays[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = trays[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    \n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewUnionFitting(c1, c2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new level named 'Basement Floor' at an elevation of -5 meters."}, {"role": "assistant", "content": "string levelName = \"Basement Floor\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Activa todos los FamilySymbol del proyecto."}, {"role": "assistant", "content": "List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (FamilySymbol sym in symbols)\n{\n    if (!sym.IsActive)\n    {\n        sym.Activate();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new elevation view looking south."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create South Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 0);\n            if (aev != null)\n            {\n                aev.Name = \"South Elevation\";\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un DirectShape esférico con un radio de 5 metros."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Sphere DirectShape\"))\n{\n    t.Start();\n    double radius = 5 / 0.3048;\n    List<GeometryObject> solids = new List<GeometryObject>();\n    Frame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\n    Arc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\n    Line line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\n    Solid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\n    solids.Add(sphere);\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\n    if (ds != null)\n    {\n        ds.SetShape(solids);\n        ds.Name = \"Esfera DirectShape\";\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new 5mm text type in green color."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 / 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Exporta el documento a un archivo IFC con la versión IFC4x3."}, {"role": "assistant", "content": "string folderPath = \"C:/RevitExports/\";\nstring fileName = doc.Title + \"_IFC4x3.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4x3;\ndoc.Export(folderPath, fileName, options);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Une la geometría de una columna y un suelo que se cruzan."}, {"role": "assistant", "content": "Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\n\nif (column != null && floor != null)\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todos los muros con el comentario 'Revisar'."}, {"role": "assistant", "content": "ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Revisar\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all material names."}, {"role": "assistant", "content": "List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todos los muros con el comentario 'Revisar'."}, {"role": "assistant", "content": "ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Revisar\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea 3 ejes en sentido vertical separados 12 metros."}, {"role": "assistant", "content": "double separation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nfor(int i=0; i<4; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new A1 sheet and place the 'Ground Floor' view on it."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Sheet\"))\n{\n    t.Start();\n    string sheetNumber = \"A-101\";\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A1\"));\n    View viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<View>().FirstOrDefault(v => v.Name == \"Ground Floor\");\n\n    if (titleBlock != null && viewToPlace != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            newSheet.Name = \"Architectural Plan - Ground Floor\";\n            newSheet.SheetNumber = sheetNumber;\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Permite al usuario seleccionar un muro y obtén su ElementId."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Oculta los elementos seleccionados en la vista activa."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToHide = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToHide.Count > 0)\n{\n    activeView.HideElements(idsToHide);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un workset llamado 'Estructura'."}, {"role": "assistant", "content": "string wsName = \"Estructura\";\nWorkset newWorkset = Workset.Create(doc, wsName);\n"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Conecta dos bandejas de cables con un codo."}, {"role": "assistant", "content": "List<CableTray> trays = new FilteredElementCollector(doc).OfClass(typeof(CableTray)).Cast<CableTray>().ToList();\n\nif (trays.Count >= 2)\n{\n    Connector c1 = trays[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = trays[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    \n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewUnionFitting(c1, c2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Desune la geometría de dos elementos dados."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer elemento\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo elemento\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all annotation families."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Apply a red color to all windows in the active view."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(255, 0, 0));\n    ICollection<ElementId> windows = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().ToElementIds();\n    \n    foreach (ElementId windowId in windows)\n    {\n        activeView.SetElementOverrides(windowId, ogs);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the sill height of all windows to 1 meter."}, {"role": "assistant", "content": "double sillHeight = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls that have no base level assigned."}, {"role": "assistant", "content": "ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las vistas de planta del proyecto."}, {"role": "assistant", "content": "List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place all selected elements on the 'Facade' workset."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Facade\");\n        if(workset == null) workset = Workset.Create(doc, \"Facade\");\n\n        if (selectedIds != null && selectedIds.Count > 0 && workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null && !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place an instance of the 'Office Desk' family in the center of the 'Office 93' room."}, {"role": "assistant", "content": "Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a Reflected Ceiling Plan view for Level 1."}, {"role": "assistant", "content": "string levelName = \"Level 1\";\nstring viewName = \"Level 1 Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Alinea las líneas de centro de dos muros seleccionados por el usuario."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer muro (el que se moverá)\");\nReference r2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo muro (el de referencia)\");\n\nif (r1 != null && r2 != null)\n{\n    Wall w1 = doc.GetElement(r1) as Wall;\n    Wall w2 = doc.GetElement(r2) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (w1 != null && w2 != null && activeView != null)\n    {\n        LocationCurve lc1 = w1.Location as LocationCurve;\n        LocationCurve lc2 = w2.Location as LocationCurve;\n        if (lc1 != null && lc2 != null)\n        {\n            doc.Create.NewAlignment(activeView, lc1.Curve.Reference, lc2.Curve.Reference);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create 7 horizontal grids spaced 9 meters apart."}, {"role": "assistant", "content": "double separation = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}]}