{"prompt":"Create a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Add a horizontal reference plane named 'Centerline A'.","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"Centerline A\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una vista de sección entre los puntos (0,0,0) y (12,10,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Crea una nota de texto con una flecha apuntando a un elemento y una ubicación dadas.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference target = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para anotar\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (target != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        opts.HorizontalAlignment = HorizontalTextAlignment.Left;\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"Revisar este elemento\", opts);\n        if (note != null)\n        {\n            Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n            leader.End = target.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra todas las familias de anotación y cuenta cuántas hay.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\nint count = annotationFamilies.Count;\n"}
{"prompt":"Create 5 vertical grids spaced 8 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\nfor(int i=0; i<4; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea un nuevo tipo de muro de 23cm llamado 'Muro Estructural 29cm'.","completion":"string newTypeName = \"Muro Estructural 25cm\";\nWallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(wallTypeToDuplicate != null)\n{\n    WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n            cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(0.25, UnitTypeId.Meters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Get a list of all family type names from the 'Furniture' category.","completion":"List<Element> furnitureTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().ToList();\nList<string> typeNames = new List<string>();\nforeach(Element type in furnitureTypes)\n{\n    typeNames.Add(type.Name);\n}\n"}
{"prompt":"Dado un muro, encuentra todas las tuberías que lo atraviesan.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\n\nList<ElementId> intersectingPipes = new List<ElementId>();\nif (wallRef != null)\n{\n    Element wall = doc.GetElement(wallRef);\n    if (wall != null)\n    {\n        ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n        intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds().ToList();\n    }\n}\n"}
{"prompt":"Create a section view between points (0,0,0) and (10,10,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Crea una copia de la vista activa y nómbrala 'Copia de Trabajo'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"Copia de Trabajo\";\n    }\n}"}
{"prompt":"Oculta todas las categorías de anotación en la vista activa.","completion":"using (Transaction t = new Transaction(doc, \"Hide Annotation Categories\"))\n{\n    t.Start();\n    Categories categories = doc.Settings.Categories;\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        foreach(Category cat in categories)\n        {\n            if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n            {\n                 activeView.SetCategoryHidden(cat.Id, true);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una nota de texto con un texto, una ubicación y un elemento de destino dados.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"REVISAR CLASH\", opts);\n        if (note != null)\n        {\n            Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n            leader.End = targetRef.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get all walls on Level 1 that are structural.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Dibuja una región rellena con patrón diagonal.","completion":"using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n    if (activeView != null && fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(new XYZ(0, 0, 0), new XYZ(5, 0, 0)));\n                profile.Append(Line.CreateBound(new XYZ(5, 0, 0), new XYZ(5, 5, 0)));\n                profile.Append(Line.CreateBound(new XYZ(5, 5, 0), new XYZ(0, 5, 0)));\n                profile.Append(Line.CreateBound(new XYZ(0, 5, 0), new XYZ(0, 0, 0)));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop> { profile });\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Tag all rooms with their area.","completion":"using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint loc = room.Location as LocationPoint;\n            if(loc != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(loc.Point.X, loc.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén el número total de advertencias en el proyecto.","completion":"int totalWarnings = doc.GetWarnings().Count;\n"}
{"prompt":"Crea un muro en Nivel 1 de (0,0,0) a (5,0,0) con 5m de alto.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level1 != null)\n{\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallType != null)\n    {\n        Line wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n        double height = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n        Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n    }\n}"}
{"prompt":"Create a DirectShape with a 2x2x2 meter box shape.","completion":"TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"DirectShape Box\";\n}"}
{"prompt":"Create a new shared text project parameter named 'Additional Notes' for walls and doors.","completion":"using (Transaction t = new Transaction(doc, \"Create Shared Parameter\"))\n{\n    t.Start();\n    string paramName = \"Additional Notes\";\n    string originalFile = doc.Application.SharedParametersFilename;\n    string tempFile = System.IO.Path.GetTempFileName() + \".txt\";\n    using (System.IO.File.Create(tempFile)) { }\n    doc.Application.SharedParametersFilename = tempFile;\n\n    try\n    {\n        DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n        if (defFile != null)\n        {\n            DefinitionGroup group = defFile.Groups.Create(\"General\");\n            if (group != null)\n            {\n                ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(paramName, ParameterType.Text);\n                Definition definition = group.Definitions.Create(options);\n                if (definition != null)\n                {\n                    CategorySet categories = doc.Application.Create.NewCategorySet();\n                    categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                    categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                    InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                    doc.ParameterBindings.Insert(definition, binding, Autodesk.Revit.DB.BuiltInParameterGroup.PG_DATA);\n                }\n            }\n        }\n    }\n    finally\n    {\n        doc.Application.SharedParametersFilename = originalFile;\n        System.IO.File.Delete(tempFile);\n        t.Commit();\n    }\n}"}
{"prompt":"Crea una columna estructural en la posición X=10, Y=4.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Create a new wall type 'Generic Wall 312mm' with a thickness of 28cm.","completion":"string newTypeName = \"Generic Wall 300mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(312, UnitTypeId.Millimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior\");\n\nif (selectedIds.Count > 0 && targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n    }\n}"}
{"prompt":"Asigna el material 'Acero' a la primera capa de un tipo de muro.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"Steel\") || m.Name.Contains(\"Acero\"));\n\n    if (wallType != null && steel != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, steel.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una vista 3D orientada desde el sureste.","completion":"string viewName = \"Vista 3D Sureste\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}
{"prompt":"Añade un nivel llamado 'Nivel Azotea' a 15.5 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Create a 'Generic - 168mm' wall on 'Level 1' from (0,0) to (10,4).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Generic - 200mm\") as WallType;\nXYZ startPoint = new XYZ(0, 0, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nWall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);"}
{"prompt":"Get the total number of warnings in the project.","completion":"int totalWarnings = doc.GetWarnings().Count;\n"}
{"prompt":"Export the current model to an NWC file.","completion":"string folderPath = \"C:\/exports\/\";\nstring fileName = doc.Title + \".nwc\";\nNavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Vincula un archivo DWG como referencia en la vista activa.","completion":"string filePath = \"C:\/CAD_Files\/Base_Plan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.ColorMode = ImportColorMode.Preserved;\nElementId linkedFileId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(filePath, options, activeView, out linkedFileId);\n}"}
{"prompt":"Group a room schedule by Level.","completion":"using (Transaction t = new Transaction(doc, \"Group Schedule\"))\n{\n    t.Start();\n    ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(vs => vs.Definition.CategoryId.IntegerValue == (int)BuiltInCategory.OST_Rooms);\n\n    if (schedule != null)\n    {\n        ScheduleDefinition def = schedule.Definition;\n        if (def != null)\n        {\n            SchedulableField schedulableField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ROOM_LEVEL_ID);\n            if (schedulableField != null)\n            {\n                ScheduleField field = def.AddField(schedulableField);\n                ScheduleSortGroupField sortGroupField = new ScheduleSortGroupField(field.FieldId);\n                sortGroupField.ShowHeader = true;\n                def.AddSortGroupField(sortGroupField);\n                def.IsItemized = false;\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una rejilla de 6 ejes horizontales y 4 verticales, espaciados 6 metros.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint count = 5;\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((count - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Coloca un mueble en las coordenadas (2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), furnitureSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Create a pipe with a 150mm diameter.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(150, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Create 5 worksets for engineering disciplines.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Create a 3D view with the section box enabled.","completion":"string viewName = \"3D View with Section Box\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Crea columnas en cada intersección de ejes.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Set the visibility of the 'Furniture' category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Create a new elevation view looking north.","completion":"using (Transaction t = new Transaction(doc, \"Create North Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 2);\n            if (aev != null)\n            {\n                aev.Name = \"North Elevation\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new A3 sheet and place a legend on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Find all walls taller than 4 meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Coloca un mueble en las coordenadas (2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), furnitureSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Create a new 4D view oriented from point (9,11,11) looking at the origin.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v=>v.ViewFamily==ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    if (view != null)\n    {\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D vo = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        view.SetOrientation(vo);\n        view.Name = \"View from (10,10,10)\";\n    }\n}"}
{"prompt":"Crea una vista de sección entre los puntos (0,0,0) y (10,10,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Create a new door type named 'FR-85 Door' and set its fire rating to '97 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"FR-90 Door\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new A2 sheet with the number 'A-201'.","completion":"string sheetNumber = \"A-201\";\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"Construction Details\";\n        sheet.SheetNumber = sheetNumber;\n    }\n}"}
{"prompt":"Create a new level named 'Basement Floor' at an elevation of -5 meters.","completion":"string levelName = \"Basement Floor\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Añade una etiqueta a la columna más cercana al origen.","completion":"using (Transaction t = new Transaction(doc, \"Tag Column\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n        LocationPoint lp = c.Location as LocationPoint;\n        return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n    }).FirstOrDefault();\n\n    if (activeView != null && column != null)\n    {\n        LocationPoint loc = column.Location as LocationPoint;\n        if (loc != null)\n        {\n            IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Rename all plan views to start with 'ARCH_'.","completion":"string prefix = \"ARCH_\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Dibuja una región rellena con patrón diagonal.","completion":"using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n\n    if (activeView != null && fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                XYZ p1 = new XYZ(0,0,0);\n                XYZ p2 = new XYZ(5 \/ 0.3048,0,0);\n                XYZ p3 = new XYZ(5 \/ 0.3048,5 \/ 0.3048,0);\n                XYZ p4 = new XYZ(0,5 \/ 0.3048,0);\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(p1,p2));\n                profile.Append(Line.CreateBound(p2,p3));\n                profile.Append(Line.CreateBound(p3,p4));\n                profile.Append(Line.CreateBound(p4,p1));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop>{profile});\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a shaft opening that passes through from Level 1 to Level 3.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft Opening\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 3\");\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p2 = new XYZ(8 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p3 = new XYZ(8 \/ 0.3048, 8 \/ 0.3048,0);\n        XYZ p4 = new XYZ(5 \/ 0.3048, 8 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Acota la longitud de un muro seleccionado por el usuario.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro para acotar\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}
{"prompt":"Crea una nueva vista de alzado mirando al norte.","completion":"using (Transaction t = new Transaction(doc, \"Create North Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 2);\n            if (aev != null)\n            {\n                aev.Name = \"Alzado Norte\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una nueva tabla de planificación para Pilares Estructurales.","completion":"string scheduleName = \"Tabla de Pilares Estructurales\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Create a new A3 sheet and place a legend on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Export all sheets in a set to a single combined PDF.","completion":"ViewSheetSet sheetSet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheetSet)).FirstOrDefault() as ViewSheetSet;\n\nif (sheetSet != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    PDFExportOptions options = new PDFExportOptions();\n    options.Combine = true;\n    options.FileName = sheetSet.Name;\n    List<ElementId> sheetIds = sheetSet.Views.Cast<ViewSheet>().Select(s => s.Id).ToList();\n    doc.Export(folderPath, sheetIds, options);\n}"}
{"prompt":"Create a new 3D view oriented from point (9,9,11) looking at the origin.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v=>v.ViewFamily==ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    if (view != null)\n    {\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D vo = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        view.SetOrientation(vo);\n        view.Name = \"View from (10,10,10)\";\n    }\n}"}
{"prompt":"Create a view filter to hide demolished walls.","completion":"using (Transaction t = new Transaction(doc, \"Create Demolition Filter\"))\n{\n    t.Start();\n    Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p => p.Name.Contains(\"Demolished\") || p.Name.Contains(\"Demolición\"));\n    View activeView = doc.ActiveView;\n\n    if (demolishedPhase != null && activeView != null)\n    {\n        ElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\n        FilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\n        ElementFilter filter = new ElementParameterFilter(rule);\n        ICollection<ElementId> categories = new List<ElementId>{ new ElementId(BuiltInCategory.OST_Walls) };\n        ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Demolition Filter\", categories, filter);\n        \n        if (pfe != null)\n        {\n            activeView.AddFilter(pfe.Id);\n            activeView.SetFilterVisibility(pfe.Id, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Set the sill height of all windows to 900mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Create an electrical conduit with a 1-inch diameter.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ end = new XYZ(5 \/ 0.3048, 0, 3 \/ 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set(1.0\/12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new wall type 'Generic Wall 246mm' with a thickness of 35cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Generic Wall 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Set the sill height of all windows to 1 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Create an MEP space for each room on Level 1.","completion":"using (Transaction t = new Transaction(doc, \"Create MEP Spaces\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n\n    if (level1 != null)\n    {\n        List<Room> roomsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level1.Id)).Cast<Room>().ToList();\n        foreach(Room room in roomsOnLevel1)\n        {\n           \/\/ The direct creation of MEP spaces from rooms might not be available in this specific API version.\n           \/\/ Placeholder comment for the intended logic.\n           \/\/ Space.Create(doc, room, null);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Genera un grupo a partir de la selección actual y muévelo 12 metros a la derecha.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    Group group = doc.Create.NewGroup(selectedIds);\n    if (group != null)\n    {\n        XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters), 0, 0);\n        ElementTransformUtils.MoveElement(doc, group.Id, translation);\n    }\n}"}
{"prompt":"Añade un codo de 72 grados entre dos tuberías.","completion":"using (Transaction t = new Transaction(doc, \"Add Elbow\"))\n{\n    t.Start();\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.ConnectorManager != null && p.ConnectorManager.UnusedConnectors.Size > 0).Take(2).ToList();\n\n    if (pipes.Count >= 2)\n    {\n        Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        \n        if (c1 != null && c2 != null)\n        {\n            doc.Create.NewElbowFitting(c1, c2);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate an electrical panel at X=1,Y=1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && panelSymbol != null)\n{\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Obtén todos los muros de un modelo vinculado que se cruzan con una caja de delimitación.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\nList<Element> linkedWalls = new List<Element>();\n\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    if (linkDoc != null)\n    {\n        BoundingBoxXYZ bbox = new BoundingBoxXYZ();\n        bbox.Min = new XYZ(0,0,0);\n        bbox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(bbox.Min, bbox.Max));\n        linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToList();\n    }\n}\n"}
{"prompt":"Create a floor with a circular hole in the center.","completion":"using (Transaction t = new Transaction(doc, \"Create Floor with Hole\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\n    if (level != null && floorType != null)\n    {\n        XYZ p1 = new XYZ(-10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(-10 \/ 0.3048, 10 \/ 0.3048, 0);\n        CurveLoop outerLoop = new CurveLoop();\n        outerLoop.Append(Line.CreateBound(p1, p2));\n        outerLoop.Append(Line.CreateBound(p2, p3));\n        outerLoop.Append(Line.CreateBound(p3, p4));\n        outerLoop.Append(Line.CreateBound(p4, p1));\n\n        XYZ center = XYZ.Zero;\n        double radius = 2 \/ 0.3048;\n        CurveLoop innerLoop = new CurveLoop();\n        innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n        innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n        Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Genera un reporte con el área de todas las habitaciones del proyecto.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}
{"prompt":"Apply 29mm thermal insulation to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(29, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Encuentra todas las puertas en el Nivel 1 usando un filtro combinado.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nList<Element> doors = new List<Element>();\n\nif (level1 != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    doors = new FilteredElementCollector(doc).WherePasses(combinedFilter).ToList();\n}"}
{"prompt":"Importa un archivo CAD llamado 'BasePlan.dwg' en la vista actual.","completion":"string filePath = \"C:\/CAD\/BasePlan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Crea 7 ejes horizontales separados por 11 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create a structural beam between (0,0,4) and (5,0,3) on Level 2.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters));\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Hide all annotation categories in the active view.","completion":"using (Transaction t = new Transaction(doc, \"Hide Annotation Categories\"))\n{\n    t.Start();\n    Categories categories = doc.Settings.Categories;\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        foreach(Category cat in categories)\n        {\n            if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n            {\n                 activeView.SetCategoryHidden(cat.Id, true);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Cambia el nombre de todas las familias cargadas que contengan 'Métrica' a 'Imperial'.","completion":"List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Métrica\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"Métrica\", \"Imperial\");\n}"}
{"prompt":"Find the structural framing element with the mark 'B-83'.","completion":"string markValue = \"B-101\";\nElement framingElement = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_StructuralFraming)\n    .WhereElementIsNotElementType()\n    .FirstOrDefault(e => {\n        Parameter p = e.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        return p != null && p.AsString() == markValue;\n    });"}
{"prompt":"Create an assembly from the selected elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"New Assembly\";\n    }\n}"}
{"prompt":"Create a Reflected Ceiling Plan view for Level 1.","completion":"string levelName = \"Level 1\";\nstring viewName = \"Level 1 Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Crea un muro en el Nivel 1 que vaya de (0,0,0) a (9,0,0) con una altura de 5 metros.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), 0, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Set the sill height of all windows to 1 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Crea una apertura de hueco vertical (shaft) desde el nivel base hasta el nivel más alto.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(2 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(2 \/ 0.3048, 5 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    TextNoteType newType = null;\n    if (defaultType != null)\n    {\n        newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Inserta una armadura (truss) de 7 metros entre dos puntos.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(6 \/ 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Inside the family editor, create a new horizontal reference plane.","completion":"string rpName = \"Horizontal Plane\";\nXYZ start = new XYZ(UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0, 0);\nXYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0);\nXYZ normal = XYZ.BasisY;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = rpName;\n    }\n}"}
{"prompt":"Crea un nuevo material llamado 'Vidrio Reflectante' y asígnale un color base y una transparencia.","completion":"string materialName = \"Vidrio Reflectante\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Start and commit a transaction for 'Modify Project'.","completion":""}
{"prompt":"Cambia el nivel de detalle de la vista actual a 'Bajo'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Coarse;\n}"}
{"prompt":"Encuentra todas las colisiones entre tuberías y vigas.","completion":"ICollection<ElementId> pipeIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WhereElementIsNotElementType().ToElementIds();\nICollection<ElementId> beamIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().ToElementIds();\n\nif(pipeIds.Count > 0 && beamIds.Count > 0)\n{\n    List<ElementFilter> beamFilters = new List<ElementFilter>();\n    foreach(ElementId beamId in beamIds)\n    {\n        Element beam = doc.GetElement(beamId);\n        if(beam != null) beamFilters.Add(new ElementIntersectsElementFilter(beam));\n    }\n    LogicalOrFilter clashFilter = new LogicalOrFilter(beamFilters);\n    ICollection<ElementId> clashingPipeIds = new FilteredElementCollector(doc, pipeIds).WherePasses(clashFilter).ToElementIds();\n    \/\/ clashingPipeIds contiene los IDs de los elementos en colisión, la selección\/visualización es externa.\n}"}
{"prompt":"Cambia el nombre de la vista activa a 'Vista de Trabajo'.","completion":"string newName = \"Vista de Trabajo\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Duplica la vista de planta 'Nivel 2' y conviértela en una plantilla de vista.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Nivel 2\");\n    string templateName = \"Plantilla Nivel 2\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ In older APIs, direct conversion to a template may not be available.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create an extrusion roof with an arc profile.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Place the 'Level 1' view in the center of the active sheet.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 1\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null && activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) \/ 2, (sheetBox.Min.V + sheetBox.Max.V) \/ 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Crea un nuevo material llamado 'Roble Oscuro' con un patrón de superficie de madera.","completion":"string materialName = \"Roble Oscuro\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Wood\") || p.Name.Contains(\"Madera\")) as FillPatternElement;\n    \n    if (material != null && fillPattern != null)\n    {\n        material.SurfaceForegroundPatternId = fillPattern.Id;\n        material.Color = new Color(139, 69, 19);\n    }\n}"}
{"prompt":"Create a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Place a spot elevation on a given face and view point.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select the top face of the floor\");\n\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && activeView != null)\n    {\n        XYZ pointOnFace = faceRef.GlobalPoint;\n        XYZ leaderEnd = pointOnFace + new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Asigna el material 'Acero' a la primera capa de un tipo de muro.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"Steel\") || m.Name.Contains(\"Acero\"));\n\n    if (wallType != null && steel != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, steel.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un muro del tipo 'Genérico - 208mm' en el 'Nivel 1' desde (0,0) hasta (12,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Genérico - 200mm\") as WallType;\nXYZ startPoint = new XYZ(0, 0, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nif (level != null && wallType != null)\n{\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}
{"prompt":"Get the total number of warnings in the project.","completion":"int totalWarnings = doc.GetWarnings().Count;\n"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 1 a 'Clasificación Fuego - 90 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Clasificación Fuego - 90 min\");\n    }\n}"}
{"prompt":"Establece el parámetro 'Marca' de todos los muros seleccionados a 'M-EXT-1'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"M-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén los IDs de todas las vistas 3D que empiezan con 'Coord' para exportación.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Place a spot elevation on Level 1.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    View activeView = doc.ActiveView;\n\n    if (lvl1 != null && activeView != null)\n    {\n        Reference levelRef = new Reference(lvl1);\n        XYZ origin = new XYZ(5\/0.3048, 5\/0.3048, lvl1.Elevation);\n        XYZ leaderEnd = origin + new XYZ(2\/0.3048, 2\/0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, levelRef, origin, origin, leaderEnd, origin, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de cota lineal con texto azul y tamaño 2mm.","completion":"using (Transaction t = new Transaction(doc, \"Create Dimension Type\"))\n{\n    t.Start();\n    string newTypeName = \"Cota Azul 2mm\";\n    DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\n    if (linearDimType != null)\n    {\n        DimensionType newDimType = linearDimType.Duplicate(newTypeName) as DimensionType;\n        if (newDimType != null)\n        {\n            Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n            Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(2 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new wall type 'Generic Wall 337mm' with a thickness of 24cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Generic Wall 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create an 8-meter long foundation beam.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, StructuralType.Footing);\n}"}
{"prompt":"Crea un circuito eléctrico conectando luminarias a un panel.","completion":"using (Transaction t = new Transaction(doc, \"Create Electrical Circuit\"))\n{\n    t.Start();\n    FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n    List<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\n    if (panel != null && fixtureIds.Count > 0)\n    {\n        ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n        if(electricalSystem != null)\n        {\n            electricalSystem.SelectPanel(panel);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new A1 sheet and place the 'Ground Floor' view on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet\"))\n{\n    t.Start();\n    string sheetNumber = \"A-101\";\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A1\"));\n    View viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<View>().FirstOrDefault(v => v.Name == \"Ground Floor\");\n\n    if (titleBlock != null && viewToPlace != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            newSheet.Name = \"Architectural Plan - Ground Floor\";\n            newSheet.SheetNumber = sheetNumber;\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un circuito eléctrico conectando luminarias a un panel.","completion":"using (Transaction t = new Transaction(doc, \"Create Electrical Circuit\"))\n{\n    t.Start();\n    FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n    List<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\n    if (panel != null && fixtureIds.Count > 0)\n    {\n        ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n        if(electricalSystem != null)\n        {\n            electricalSystem.SelectPanel(panel);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new level named 'Basement Floor' at an elevation of -5 meters.","completion":"string levelName = \"Basement Floor\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Encuentra el host de una luminaria basada en cara.","completion":"FamilyInstance lightFixture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().Cast<FamilyInstance>().FirstOrDefault(fi => fi.HostFace != null);\n\nElement host = null;\nif (lightFixture != null)\n{\n    Reference hostFaceRef = lightFixture.HostFace;\n    if (hostFaceRef != null)\n    {\n        host = doc.GetElement(hostFaceRef.ElementId);\n    }\n}"}
{"prompt":"Create a 'Concrete-Rectangular 30x60' column at each grid intersection.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Concrete-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new Level named 'Level 5' at an elevation of 12 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 4\";\n}"}
{"prompt":"Crea una vista de plano de plafón reflejado para el Nivel 1.","completion":"string levelName = \"Nivel 1\";\nstring viewName = \"Plano de Plafón Nivel 1\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Aplica la plantilla de vista 'Plantilla Arquitectónica' a la vista activa.","completion":"View activeView = doc.ActiveView;\nView viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.IsTemplate && v.Name == \"Plantilla Arquitectónica\");\n\nif (activeView != null && viewTemplate != null)\n{\n    activeView.ViewTemplateId = viewTemplate.Id;\n}"}
{"prompt":"Create a grid of 7 horizontal and 5 vertical grids, spaced 6 meters apart.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\nint count = 5;\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((count - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create a new level named 'Basement Floor' at an elevation of -4.5 meters.","completion":"string levelName = \"Basement Floor\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Change the visual style of the active view to 'Hidden Line'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}
{"prompt":"Set the sill height of all windows to 1 meter.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén la geometría sólida de un elemento seleccionado.","completion":"UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para obtener su geometría\");\nif(pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if(elem != null)\n    {\n        Options opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if(geoElem != null)\n        {\n            List<Solid> solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}
{"prompt":"Añade una etiqueta a la columna más cercana al origen.","completion":"using (Transaction t = new Transaction(doc, \"Tag Column\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n        LocationPoint lp = c.Location as LocationPoint;\n        return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n    }).FirstOrDefault();\n\n    if (activeView != null && column != null)\n    {\n        LocationPoint loc = column.Location as LocationPoint;\n        if (loc != null)\n        {\n            IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca una etiqueta de material en una cara de muro.","completion":"using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona una cara para etiquetar\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Selecciona la ubicación de la etiqueta\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}
{"prompt":"Añade un codo de 90 grados entre dos tuberías.","completion":"using (Transaction t = new Transaction(doc, \"Add Elbow\"))\n{\n    t.Start();\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.ConnectorManager != null && p.ConnectorManager.UnusedConnectors.Size > 0).Take(2).ToList();\n\n    if (pipes.Count >= 2)\n    {\n        Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        \n        if (c1 != null && c2 != null)\n        {\n            doc.Create.NewElbowFitting(c1, c2);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get the total length of all walls in the project.","completion":"double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}
{"prompt":"Find all walls with the comment 'Review'.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Review\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Crea 12 ejes horizontales separados por 10 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Join the geometry of an intersecting column and floor.","completion":"Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\n\nif (column != null && floor != null)\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}
{"prompt":"Abre una familia, añade un parámetro de tipo 'Código de Material' y guárdala.","completion":""}
{"prompt":"Create a new wall type 'Generic Wall 241mm' with a thickness of 25cm.","completion":"string newTypeName = \"Generic Wall 300mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(241, UnitTypeId.Millimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Create a new linear dimension type with blue text and 2mm size.","completion":"using (Transaction t = new Transaction(doc, \"Create Dimension Type\"))\n{\n    t.Start();\n    string newTypeName = \"Blue Dimension 2mm\";\n    DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\n    if (linearDimType != null)\n    {\n        DimensionType newDimType = linearDimType.Duplicate(newTypeName) as DimensionType;\n        if (newDimType != null)\n        {\n            Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n            Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(2 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un techo por extrusión con un perfil en arco.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Create a grid of 6 horizontal and 5 vertical grids, spaced 6 meters apart.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint count = 5;\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((count - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Permite al usuario seleccionar un muro y obtén su ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Create 4 vertical grids spaced 12 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nfor(int i=0; i<4; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Carga un enlace DWG preservando los colores.","completion":"string filePath = \"C:\/CAD\/Planos.dwg\";\nDWGImportOptions opts = new DWGImportOptions();\nopts.ColorMode = ImportColorMode.Preserved;\nElementId linkId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(filePath, opts, activeView, out linkId);\n}"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-01'.","completion":"List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"WM-01\");\n  }\n}"}
{"prompt":"Create an MEP space for each room on Level 1.","completion":"using (Transaction t = new Transaction(doc, \"Create MEP Spaces\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n\n    if (level1 != null)\n    {\n        List<Room> roomsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level1.Id)).Cast<Room>().ToList();\n        foreach(Room room in roomsOnLevel1)\n        {\n           \/\/ The direct creation of MEP spaces from rooms might not be available in this specific API version.\n           \/\/ Placeholder comment for the intended logic.\n           \/\/ Space.Create(doc, room, null);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Permite al usuario seleccionar un muro y obtén su ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Aísla temporalmente todo el mobiliario en la vista activa.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Duplicate level 1 with a 3m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Obtén el elemento anfitrión de la primera ventana que encuentres.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}
{"prompt":"Paint the interior face of exterior walls with 'White Paint'.","completion":"using (Transaction t = new Transaction(doc, \"Paint Walls\"))\n{\n    t.Start();\n    Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"White Paint\");\n    var exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior).ToList();\n\n    if (paintMaterial != null)\n    {\n        foreach (Wall w in exteriorWalls)\n        {\n            IList<Reference> interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n            if(interiorFaceRefs.Count > 0)\n            {\n                Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n                if (interiorFace != null)\n                {\n                    doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea 10 worksets de arquitectura.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_MAM\", \"TAD_ARQ_ACA\", \"TAD_ARQ_PLA\", \"TAD_ARQ_PSO\", \"TAD_ARQ_HRE\", \"TAD_ARQ_ALU\", \"TAD_ARQ_CAR\", \"TAD_ARQ_MOB\", \"TAD_ARQ_PLO\", \"TAD_ARQ_EXT\" };\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}"}
{"prompt":"Set the 'Mark' parameter of all selected walls to 'W-EXT-1'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Duplica la vista 'Nivel 1' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 1\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Hide all annotation categories in the active view.","completion":"using (Transaction t = new Transaction(doc, \"Hide Annotation Categories\"))\n{\n    t.Start();\n    Categories categories = doc.Settings.Categories;\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        foreach(Category cat in categories)\n        {\n            if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n            {\n                 activeView.SetCategoryHidden(cat.Id, true);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Aplica aislamiento térmico de 25mm a todas las tuberías de agua caliente.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Cambia el tipo de todas las ventanas de 'Fijo' a 'Abatible'.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Abatible\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Fijo\"));\n\nif (newType != null && oldType != null)\n{\n    List<FamilyInstance> windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Crea una escalera entre Nivel 1 y Nivel 2.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    \/\/ TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    \/\/ Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Create a 'Roof Terrace' level at 15m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"WM-01\");\n  }\n}"}
{"prompt":"Create a new 4mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    TextNoteType newType = null;\n    if (defaultType != null)\n    {\n        newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra todas las vistas de sección en el proyecto.","completion":"List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}
{"prompt":"Modela un barandal en una escalera existente.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca un mueble en las coordenadas (2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), furnitureSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Generate an electrical panel at X=1,Y=1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && panelSymbol != null)\n{\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Obtén el número total de advertencias en el proyecto.","completion":"int totalWarnings = doc.GetWarnings().Count;\n"}
{"prompt":"Create a detail group with the selected detail items.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Typical Detail 1\";\n        }\n    }\n}"}
{"prompt":"Pinta la cara interior de los muros exteriores con 'Pintura Blanca'.","completion":"using(Transaction t = new Transaction(doc, \"Paint Walls\"))\n{\n    t.Start();\n    Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Pintura Blanca\");\n    var exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior).ToList();\n    if(paintMaterial != null)\n    {\n        foreach (Wall w in exteriorWalls)\n        {\n            IList<Reference> interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n            if(interiorFaceRefs.Count > 0)\n            {\n                Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n                if (interiorFace != null)\n                {\n                    doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Rename all loaded families containing 'Metric' to 'Imperial'.","completion":"List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Metric\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"Metric\", \"Imperial\");\n}"}
{"prompt":"Establece el parámetro 'Marca' de todos los muros seleccionados a 'M-EXT-1'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly) \n                {\n                    p.Set(\"M-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una vista de plano de plafón reflejado para el Nivel 1.","completion":"string levelName = \"Nivel 1\";\nstring viewName = \"Plano de Plafón Nivel 1\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Find the host of a face-based light fixture.","completion":"FamilyInstance lightFixture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().Cast<FamilyInstance>().FirstOrDefault(fi => fi.HostFace != null);\n\nElement host = null;\nif (lightFixture != null)\n{\n    Reference hostFaceRef = lightFixture.HostFace;\n    if (hostFaceRef != null)\n    {\n        host = doc.GetElement(hostFaceRef.ElementId);\n    }\n}"}
{"prompt":"Crea una apertura de hueco (shaft) que atraviese desde el Nivel 1 al Nivel 3.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft Opening\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 3\");\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p2 = new XYZ(8 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p3 = new XYZ(8 \/ 0.3048, 8 \/ 0.3048,0);\n        XYZ p4 = new XYZ(5 \/ 0.3048, 8 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Vincula un archivo DWG como referencia en la vista activa.","completion":"string filePath = \"C:\/CAD_Files\/Base_Plan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.ColorMode = ImportColorMode.Preserved;\nElementId linkedFileId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(filePath, options, activeView, out linkedFileId);\n}"}
{"prompt":"Get a list of all annotation families.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Crea una nueva tabla de planificación para ventanas que incluya Marca de Tipo, Ancho y Alto.","completion":"string scheduleName = \"Tabla de Ventanas\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}
{"prompt":"Coloca pilares en todos los cruces de la rejilla.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Get a list of all annotation families.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Crea una nueva hoja A1 usando el primer cajetín disponible.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"A1 - Nueva Hoja\";\n        sheet.SheetNumber = \"A1\";\n    }\n}"}
{"prompt":"Muestra un cuadro de diálogo con las opciones 'Sí', 'No' y 'Cancelar'.","completion":""}
{"prompt":"Generate a report with the area of all rooms in the project.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nList<double> roomAreas = new List<double>();\nforeach (Room room in rooms)\n{\n    if (room != null && room.Area > 0)\n    {\n        roomAreas.Add(UnitUtils.ConvertFromInternalUnits(room.Area, UnitTypeId.SquareMeters));\n    }\n}\n\/\/ The orchestrator can now use the 'roomAreas' list to generate the final report."}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 4' a una elevación de 11 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 4\";\n}"}
{"prompt":"Create an extrusion roof with an arc profile.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Create a stair between Level 1 and Level 2.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    \/\/ TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    \/\/ Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Coloca postes de iluminación cada 10m en un camino de 97m.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 118' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Crea una escalera entre Nivel 1 y Nivel 2.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    \/\/ TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    \/\/ Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Obtén una lista de los nombres de todos los tipos de familia de la categoría 'Mobiliario'.","completion":"List<Element> furnitureTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().ToList();\nList<string> typeNames = new List<string>();\nforeach(Element type in furnitureTypes)\n{\n    typeNames.Add(type.Name);\n}\n"}
{"prompt":"Change the type of all 'Fixed' windows to 'Casement'.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Casement\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Fixed\"));\n\nif (newType != null && oldType != null)\n{\n    List<FamilyInstance> windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Crea una losa de cimentación estructural de 40cm de espesor.","completion":"using (Transaction t = new Transaction(doc, \"Create Foundation Slab\"))\n{\n    t.Start();\n    Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    FloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n    if(slabTypeToDuplicate != null && foundationLevel != null)\n    {\n        string newTypeName = \"Losa Cimentación 40cm\";\n        FloorType newSlabType = slabTypeToDuplicate.Duplicate(newTypeName) as FloorType;\n        if(newSlabType != null)\n        {\n            CompoundStructure cs = newSlabType.GetCompoundStructure();\n            if (cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 400 \/ 304.8);\n                newSlabType.SetCompoundStructure(cs);\n                XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n                Floor.Create(doc, new List<CurveLoop>{profile}, newSlabType.Id, foundationLevel.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new A3 sheet and place a legend on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén una lista de todas las vistas de planta del proyecto.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}
{"prompt":"Inside the family editor, create a vertical reference plane named 'Center Axis'.","completion":"string rpName = \"Center Axis\";\nXYZ start = new XYZ(0, UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0);\nXYZ end = new XYZ(0, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nXYZ normal = XYZ.BasisX;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = rpName;\n    }\n}"}
{"prompt":"Create a beam system on a selected floor slab.","completion":""}
{"prompt":"Ajusta todas las ventanas para que la altura del antepecho sea 1 metro.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Añade montantes a todas las líneas de rejilla de un muro cortina.","completion":"using (Transaction t = new Transaction(doc, \"Add Mullions\"))\n{\n    t.Start();\n    Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\n    MullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\n\n    if (curtainWall != null && mullionType != null)\n    {\n        CurtainGrid grid = curtainWall.CurtainGrid;\n        if (grid != null)\n        {\n            foreach (ElementId gridLineId in grid.GetVGridLineIds())\n            {\n                CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n                if(line != null) grid.AddMullions(line, mullionType);\n            }\n            foreach (ElementId gridLineId in grid.GetUGridLineIds())\n            {\n                CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n                if(line != null) grid.AddMullions(line, mullionType);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Find all annotation families and count how many there are.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\nint count = annotationFamilies.Count;\n"}
{"prompt":"Get the total length of all walls in the project.","completion":"double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}
{"prompt":"Obtén el espacio MEP asociado a la habitación 'Oficina 104'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 101\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Get all rooms on Level 3.","completion":"Level level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nList<Element> roomsOnLevel3 = new List<Element>();\n\nif (level3 != null)\n{\n    roomsOnLevel3 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level3.Id).ToList();\n}"}
{"prompt":"Create an electrical circuit connecting light fixtures to a panel.","completion":"using (Transaction t = new Transaction(doc, \"Create Electrical Circuit\"))\n{\n    t.Start();\n    FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n    List<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\n    if (panel != null && fixtureIds.Count > 0)\n    {\n        ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n        if(electricalSystem != null)\n        {\n            electricalSystem.SelectPanel(panel);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nView activeView = doc.ActiveView;\n\nif (furnitureCat != null && activeView != null)\n{\n    activeView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Crea un muro en Nivel 1 de (0,0,0) a (6,0,0) con 6m de alto.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level1 != null)\n{\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallType != null)\n    {\n        Line wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n        double height = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n        Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n    }\n}"}
{"prompt":"Crea una nueva vista de alzado mirando al norte.","completion":"using (Transaction t = new Transaction(doc, \"Create North Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 2);\n            if (aev != null)\n            {\n                aev.Name = \"Alzado Norte\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Mueve el punto base del proyecto 86 metros hacia el norte.","completion":"using (Transaction t = new Transaction(doc, \"Move Project Base Point\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        XYZ translation = new XYZ(0, 100 \/ 0.3048, 0);\n        ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén una lista de los nombres de todos los materiales.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Delete all unused wall types in the project.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}
{"prompt":"Crea una vista 3D axonométrica orientada al Noroeste.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(-1, 1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(1, -1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = \"Vista 3D Noroeste\";\n    }\n}"}
{"prompt":"Create an extrusion roof with an arc profile.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén todos los muros de un modelo vinculado que se cruzan con una caja de delimitación.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\nList<Element> linkedWalls = new List<Element>();\n\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    if (linkDoc != null)\n    {\n        BoundingBoxXYZ bbox = new BoundingBoxXYZ();\n        bbox.Min = new XYZ(0,0,0);\n        bbox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(bbox.Min, bbox.Max));\n        linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToList();\n    }\n}\n"}
{"prompt":"Rota un elemento seleccionado 89 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 2.0);"}
{"prompt":"Align the face of one wall with the face of another.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Face, \"Select the target face (stationary)\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Face, \"Select the face to move\");\nView activeView = doc.ActiveView;\n\nif (ref1 != null && ref2 != null && activeView != null)\n{\n    doc.Create.NewAlignment(activeView, ref1, ref2);\n}"}
{"prompt":"Create 4 vertical grids spaced 10 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<4; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create a 'Roof Terrace' level at 15m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-90' y establece su resistencia al fuego a '90 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Puerta RF-90\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una región rellena con un patrón de 'Concreto'.","completion":"using (Transaction t = new Transaction(doc, \"Create Filled Region\"))\n{\n    t.Start();\n    FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\") || frt.Name.Contains(\"Concreto\"));\n    View activeView = doc.ActiveView;\n\n    if (regionType != null && activeView != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 0,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(0, 5 \/ 0.3048,0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una cimentación de viga de 9 metros de largo.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, StructuralType.Footing);\n}"}
{"prompt":"Create a wall on Level 1 from (0,0,0) to (10,0,0) with a height of 4 meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Aplica aislamiento térmico de 21mm a todas las tuberías de agua caliente.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(21, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Obtén una lista de los nombres de todos los tipos de familia de la categoría 'Mobiliario'.","completion":"List<Element> furnitureTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().ToList();\nList<string> typeNames = new List<string>();\nforeach(Element type in furnitureTypes)\n{\n    typeNames.Add(type.Name);\n}\n"}
{"prompt":"Get a list of all family type names from the 'Furniture' category.","completion":"List<Element> furnitureTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().ToList();\nList<string> typeNames = new List<string>();\nforeach(Element type in furnitureTypes)\n{\n    typeNames.Add(type.Name);\n}\n"}
{"prompt":"Encuentra todos los muros con el comentario 'Revisar'.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Revisar\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Crea un techo por extrusión con un perfil en arco.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Check if the active view is a plan view.","completion":"View activeView = doc.ActiveView;\nbool isPlanView = false;\n\nif (activeView != null)\n{\n    isPlanView = activeView.ViewType == ViewType.FloorPlan \n                 || activeView.ViewType == ViewType.CeilingPlan \n                 || activeView.ViewType == ViewType.AreaPlan \n                 || activeView.ViewType == ViewType.EngineeringPlan;\n}\n"}
{"prompt":"Encuentra todas las puertas del Nivel 2 que sean de la familia 'Puerta Sencilla'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Puerta Sencilla\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Apply 28mm thermal insulation to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(28, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 150mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 150mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Create 10 architectural worksets.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_WALLS\", \"TAD_ARQ_FINISHES\", \"TAD_ARQ_CEILINGS\", \"TAD_ARQ_FLOORS\", \"TAD_ARQ_RAILINGS\", \"TAD_ARQ_WINDOWS\", \"TAD_ARQ_CARPENTRY\", \"TAD_ARQ_FURNITURE\", \"TAD_ARQ_PLUMBING\", \"TAD_ARQ_EXTERIOR\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Create a new door type named 'FR-85 Door' and set its fire rating to '106 min'.","completion":"string newTypeName = \"FR-90 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"90 min\");\n    }\n}"}
{"prompt":"Duplicate level 1 with a 3m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Check if a pipe is connected at both ends.","completion":"Pipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nbool isFullyConnected = false;\n\nif (pipe != null)\n{\n    isFullyConnected = pipe.ConnectorManager.UnusedConnectors.IsEmpty;\n}\n"}
{"prompt":"Insert a 6-meter truss between two points.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(6 \/ 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén los IDs de todas las vistas 3D que empiezan con 'Coord' para exportación.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Duplica el tipo de muro 'Basic Wall' y renómbralo.","completion":"string typeToDuplicate = \"Basic Wall\";\nstring newTypeName = \"Basic Wall Copy\";\nWallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==typeToDuplicate);\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(newTypeName) as WallType;\n}"}
{"prompt":"Create 4 worksets for engineering disciplines.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Crea una losa de cimentación de 20x15 metros.","completion":"using (Transaction t = new Transaction(doc, \"Create Foundation Slab\"))\n{\n    t.Start();\n    Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    FloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n\n    if (foundationLevel != null && slabType != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(20\/0.3048, 0, 0);\n        XYZ p3 = new XYZ(20\/0.3048, 15\/0.3048, 0);\n        XYZ p4 = new XYZ(0, 15\/0.3048, 0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Export the document to an IFC file with version IFC4x3.","completion":"string folderPath = \"C:\/RevitExports\/\";\nstring fileName = doc.Title + \"_IFC4x3.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4x3;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Find all walls taller than 4 meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Coloca una cámara en la vista activa.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        cameraView.Name = \"Nueva Vista de Cámara\";\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}
{"prompt":"Aplica el estilo visual 'Rayos X' a la vista 3D activa.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe; \/\/ Simula el efecto 'Rayos X'\n}"}
{"prompt":"Genera un reporte con el área de todas las habitaciones del proyecto.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}
{"prompt":"Obtén todos los muros del Nivel 1 que son estructurales.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level1 != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Import a CAD file named 'BasePlan.dwg' into the current view.","completion":"string filePath = \"C:\/CAD\/BasePlan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Get the IDs of all 3D views starting with 'Coord' for export.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Encuentra todos los muros con el comentario 'Revisar'.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Revisar\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Delete all detail lines in the active view.","completion":"using (Transaction t = new Transaction(doc, \"Delete Detail Lines\"))\n{\n    t.Start();\n    if (doc.ActiveView != null)\n    {\n        ICollection<ElementId> detailLines = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(DetailCurve)).ToElementIds();\n        if (detailLines.Count > 0)\n        {\n            doc.Delete(detailLines);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Assign the 'Steel' material to the first layer of a wall type.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"Steel\"));\n\n    if (wallType != null && steel != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, steel.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new A2 sheet and place a legend on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Change the family name of a selected door to 'New_Door'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a door\");\n\nif (pickedRef != null)\n{\n    FamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (door != null && door.Symbol != null)\n    {\n        Family family = door.Symbol.Family;\n        if (family != null)\n        {\n            family.Name = \"New_Door\";\n        }\n    }\n}"}
{"prompt":"Create a wall on Level 1 from (0,0,0) to (10,0,0) with a height of 5 meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Crea un techo por extrusión con un perfil en arco.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén todas las habitaciones en el Nivel 'Planta Baja'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Planta Baja\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nView activeView = doc.ActiveView;\n\nif (furnitureCat != null && activeView != null)\n{\n    activeView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Set the 'Comments' parameter for all doors on Level 1 to 'Fire Rating - 91 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Fire Rating - 90 min\");\n    }\n}"}
{"prompt":"Crea un nivel 'Roof Terrace' a 14m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(14, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Inserta una armadura (truss) de 6 metros entre dos puntos.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(6 \/ 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén una lista de todas las vistas de planta del proyecto.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}
{"prompt":"Cambia el nombre de todas las vistas de planta para que empiecen con 'ARQ_'.","completion":"string prefix = \"ARQ_\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-01'.","completion":"List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"WM-01\");\n  }\n}"}
{"prompt":"Get the IDs of all 3D views starting with 'Coord' for export.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Pin the selected element so it cannot be moved.","completion":"UIDocument uidoc = new UIDocument(doc);\nElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\n\nif (selectedId != ElementId.InvalidElementId)\n{\n    Element elementToPin = doc.GetElement(selectedId);\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}
{"prompt":"Create a grid of 5 horizontal and 5 vertical grids, spaced 7 meters apart.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\nint count = 5;\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((count - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Model a railing on an existing staircase.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Obtén los IDs de todas las vistas 3D que empiezan con 'Coord' para exportación.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Conecta dos bandejas de cables con un codo.","completion":"List<CableTray> trays = new FilteredElementCollector(doc).OfClass(typeof(CableTray)).Cast<CableTray>().ToList();\n\nif (trays.Count >= 2)\n{\n    Connector c1 = trays[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = trays[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    \n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewUnionFitting(c1, c2);\n    }\n}"}
{"prompt":"Exporta cada tabla de planificación a un archivo CSV individual.","completion":"string exportPath = \"C:\/RevitExports\/\";\nList<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => !vs.IsTemplate).ToList();\nViewScheduleExportOptions options = new ViewScheduleExportOptions();\noptions.FieldDelimiter = \",\";\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Export(exportPath, schedule.Name + \".csv\", options);\n}"}
{"prompt":"Crea una nueva hoja A3 y colócale una leyenda.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca pilares en todos los cruces de la rejilla.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Crea una nueva cota de nivel llamada 'Nivel 3' a una elevación de 12 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nnewLevel.Name = \"Nivel 3\";"}
{"prompt":"Crea un DirectShape con forma de caja de 2x2x2 metros.","completion":"TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"Caja DirectShape\";\n}"}
{"prompt":"Create a floor plan view for 'Level 3'.","completion":"string levelName = \"Level 3\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Crea una nueva habitación en el Nivel 1 en el punto (10, 10).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Crea una nueva cota de nivel llamada 'Nivel 2' a una elevación de 12 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nnewLevel.Name = \"Nivel 3\";"}
{"prompt":"Permite al usuario seleccionar un muro y obtén su ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Genera un piso rectangular de 10×8 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Etiqueta todas las habitaciones con su área.","completion":"using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(locPoint.Point.X, locPoint.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una región rellena con un patrón de 'Concreto'.","completion":"using (Transaction t = new Transaction(doc, \"Create Filled Region\"))\n{\n    t.Start();\n    FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\") || frt.Name.Contains(\"Concreto\"));\n    View activeView = doc.ActiveView;\n\n    if (regionType != null && activeView != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 0,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(0, 5 \/ 0.3048,0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n    }\n    t.Commit();\n}"}
{"prompt":"Display a dialog box with 'Yes' and 'No' options.","completion":""}
{"prompt":"Crea un techo por extrusión con un perfil en arco.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Exporta el modelo a formato IFC4 para coordinación.","completion":"string folderPath = \"C:\/RevitExports\/\";\nstring fileName = doc.Title + \"-Coordination.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 344mm' con un grosor de 27cm.","completion":"string newTypeName = \"Muro Genérico 300mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(344, UnitTypeId.Millimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Obtén una lista de todas las familias y sus tipos.","completion":"List<string> familyAndTypeNames = new List<string>();\nList<Family> families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().ToList();\nforeach (Family fam in families)\n{\n    familyAndTypeNames.Add($\"Familia: {fam.Name}\");\n    foreach (ElementId symbolId in fam.GetFamilySymbolIds())\n    {\n        FamilySymbol sym = doc.GetElement(symbolId) as FamilySymbol;\n        if (sym != null)\n        {\n            familyAndTypeNames.Add($\"\\tTipo: {sym.Name}\");\n        }\n    }\n}"}
{"prompt":"Añade un nivel llamado 'Nivel Azotea' a 15 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Create a topography surface from a list of 4 points.","completion":"IList<XYZ> points = new List<XYZ>\n{\n    new XYZ(0, 0, 0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters))\n};\nTopographySurface.Create(doc, points);"}
{"prompt":"Create a new 6mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create 11 architectural worksets.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_WALLS\", \"TAD_ARQ_FINISHES\", \"TAD_ARQ_CEILINGS\", \"TAD_ARQ_FLOORS\", \"TAD_ARQ_RAILINGS\", \"TAD_ARQ_WINDOWS\", \"TAD_ARQ_CARPENTRY\", \"TAD_ARQ_FURNITURE\", \"TAD_ARQ_PLUMBING\", \"TAD_ARQ_EXTERIOR\" };\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}"}
{"prompt":"Apply 25mm thermal insulation to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Add mullions to all grid lines of a curtain wall.","completion":"using (Transaction t = new Transaction(doc, \"Add Mullions\"))\n{\n    t.Start();\n    Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\n    MullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\n\n    if (curtainWall != null && mullionType != null)\n    {\n        CurtainGrid grid = curtainWall.CurtainGrid;\n        if (grid != null)\n        {\n            foreach (ElementId gridLineId in grid.GetVGridLineIds())\n            {\n                CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n                if(line != null) line.AddMullions(mullionType, false);\n            }\n            foreach (ElementId gridLineId in grid.GetUGridLineIds())\n            {\n                CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n                if(line != null) line.AddMullions(mullionType, false);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca una etiqueta de material en una cara de muro.","completion":"using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona una cara para etiquetar\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Selecciona la ubicación de la etiqueta\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}
{"prompt":"Genera un piso rectangular de 10×8 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Cambia el estilo visual de la vista activa a 'Línea Oculta'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}
{"prompt":"Crea un workset llamado 'Estructura'.","completion":"string wsName = \"Estructura\";\nWorkset newWorkset = Workset.Create(doc, wsName);\n"}
{"prompt":"Activate all FamilySymbols in the project.","completion":"List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (FamilySymbol sym in symbols)\n{\n    if (!sym.IsActive)\n    {\n        sym.Activate();\n    }\n}"}
{"prompt":"Define a view filter to hide detail lines.","completion":"string filterName = \"Hide Detail Lines\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection<ElementId> catsToHide = new List<ElementId>{new ElementId(BuiltInCategory.OST_Lines)};\n    ElementFilter filter = new ElementCategoryFilter(new ElementId(BuiltInCategory.OST_Lines));\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, filterName, catsToHide, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}
{"prompt":"Crea un DirectShape con forma de caja de 2x2x2 metros.","completion":"TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"Caja DirectShape\";\n}"}
{"prompt":"Create a 'Generic - 200mm' wall on 'Level 1' from (0,0) to (10,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Generic - 200mm\") as WallType;\nXYZ startPoint = new XYZ(0, 0, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nif (level != null && wallType != null)\n{\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}
{"prompt":"Create a 'Generic - 200mm' wall on 'Level 1' from (0,0) to (10,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Generic - 200mm\") as WallType;\nXYZ startPoint = new XYZ(0, 0, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nWall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);"}
{"prompt":"Create a new material named 'Dark Oak' with a wood surface pattern.","completion":"string materialName = \"Dark Oak\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Wood\") || p.Name.Contains(\"Madera\")) as FillPatternElement;\n    \n    if (material != null && fillPattern != null)\n    {\n        material.SurfaceForegroundPatternId = fillPattern.Id;\n        material.Color = new Color(139, 69, 19);\n    }\n}"}
{"prompt":"Coloca todos los elementos seleccionados en el workset 'Fachada'.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Fachada\");\n        if(workset == null) workset = Workset.Create(doc, \"Fachada\");\n\n        if (selectedIds != null && selectedIds.Count > 0 && workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null && !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get a list of all annotation families.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Generate a 5x5 column grid with 8-meter spacing.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Crea una topografía DirectShape a partir de una lista de puntos.","completion":"List<XYZ> points = new List<XYZ>\n{\n    new XYZ(0,0,0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0)\n};\nTessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[0], points[1], points[2]}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[1], points[3], points[2]}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_Topography));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"Topografía DirectShape\";\n}"}
{"prompt":"Duplica la vista de planta 'Nivel 2' y conviértela en una plantilla de vista.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Nivel 2\");\n    string templateName = \"Plantilla Nivel 2\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ In older APIs, direct conversion to a template may not be available.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a beam system on a selected floor slab.","completion":""}
{"prompt":"Oculta todas las categorías de anotación en la vista activa.","completion":"using (Transaction t = new Transaction(doc, \"Hide Annotation Categories\"))\n{\n    t.Start();\n    Categories categories = doc.Settings.Categories;\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        foreach(Category cat in categories)\n        {\n            if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n            {\n                 activeView.SetCategoryHidden(cat.Id, true);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a Path of Travel between points (1,1) and (12,12) in the plan view.","completion":"\/\/ PathOfTravel.Create is likely inaccessible in this environment.\n\/\/ A comment is left as a placeholder for the intended functionality.\n\/*\nusing (Transaction t = new Transaction(doc, \"Create Path of Travel\"))\n{\n    t.Start();\n    ViewPlan viewPlan = doc.ActiveView as ViewPlan;\n\n    if (viewPlan != null && viewPlan.ViewType == ViewType.FloorPlan)\n    {\n        ElementId levelId = viewPlan.get_Parameter(BuiltInParameter.PLAN_VIEW_LEVEL).AsElementId();\n        Level level = doc.GetElement(levelId) as Level;\n        if (level != null)\n        {\n            XYZ startPoint = new XYZ(1 \/ 0.3048, 1 \/ 0.3048, level.Elevation);\n            XYZ endPoint = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, level.Elevation);\n            \/\/ PathOfTravel.Create(viewPlan, startPoint, endPoint);\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Place lighting posts every 9m along a 105m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Model a railing on an existing staircase.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Cambia el nivel de detalle de la vista actual a 'Bajo'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Coarse;\n}"}
{"prompt":"Find all walls that have no base level assigned.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Duplica el tipo de muro 'Genérico - 144mm' y nómbralo 'Interior - 13cm Yeso'.","completion":"string originalName = \"Genérico - 150mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Crea un nuevo material llamado 'Vidrio Reflectante' y asígnale un color base y una transparencia.","completion":"string materialName = \"Vidrio Reflectante\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Find all walls taller than 3 meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nList<ElementId> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds().ToList();"}
{"prompt":"Create a Reflected Ceiling Plan view for Level 1.","completion":"string levelName = \"Level 1\";\nstring viewName = \"Level 1 Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Assign the 'Steel' material to the first layer of a wall type.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"Steel\"));\n\n    if (wallType != null && steel != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, steel.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Muestra un cuadro de diálogo con opciones 'Sí' y 'No'.","completion":""}
{"prompt":"Añade los campos 'Nivel', 'Marca' y 'Volumen' a la tabla de pilares.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\") || s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-90' y establece su resistencia al fuego a '90 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Puerta RF-90\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una tubería con un diámetro de 175mm.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(175, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Fija el elemento seleccionado para que no se mueva.","completion":"UIDocument uidoc = new UIDocument(doc);\nElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\n\nif (selectedId != ElementId.InvalidElementId)\n{\n    Element elementToPin = doc.GetElement(selectedId);\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}
{"prompt":"Get all subcategories from the Walls category.","completion":"Category wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategoryNameMap subcategories = wallCat.SubCategories;"}
{"prompt":"Coloca postes de iluminación cada 10m en un camino de 113m.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Rename all loaded families containing 'Metric' to 'Imperial'.","completion":"List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Metric\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"Metric\", \"Imperial\");\n}"}
{"prompt":"Crea una vista 4D con la caja de sección activada.","completion":"string viewName = \"Vista 3D con Caja de Sección\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Calcula el área total de todas las habitaciones.","completion":"double totalArea = 0.0;\nList<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nforeach (Room room in rooms)\n{\n    totalArea += room.Area;\n}"}
{"prompt":"Find all annotation families and count how many there are.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\nint count = annotationFamilies.Count;\n"}
{"prompt":"Genera un grupo a partir de la selección actual y muévelo 12 metros a la derecha.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    Group group = doc.Create.NewGroup(selectedIds);\n    if (group != null)\n    {\n        XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters), 0, 0);\n        ElementTransformUtils.MoveElement(doc, group.Id, translation);\n    }\n}"}
{"prompt":"Create a shaft opening that passes through from Level 1 to Level 3.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft Opening\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 3\");\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p2 = new XYZ(8 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p3 = new XYZ(8 \/ 0.3048, 8 \/ 0.3048,0);\n        XYZ p4 = new XYZ(5 \/ 0.3048, 8 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Oculta todas las categorías de anotación en la vista activa.","completion":"using (Transaction t = new Transaction(doc, \"Hide Annotation Categories\"))\n{\n    t.Start();\n    Categories categories = doc.Settings.Categories;\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        foreach(Category cat in categories)\n        {\n            if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n            {\n                 activeView.SetCategoryHidden(cat.Id, true);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create beams between horizontally aligned columns.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Create a floor with a circular hole in the center.","completion":"using (Transaction t = new Transaction(doc, \"Create Floor with Hole\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\n    if (level != null && floorType != null)\n    {\n        XYZ p1 = new XYZ(-10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(-10 \/ 0.3048, 10 \/ 0.3048, 0);\n        CurveLoop outerLoop = new CurveLoop();\n        outerLoop.Append(Line.CreateBound(p1, p2));\n        outerLoop.Append(Line.CreateBound(p2, p3));\n        outerLoop.Append(Line.CreateBound(p3, p4));\n        outerLoop.Append(Line.CreateBound(p4, p1));\n\n        XYZ center = XYZ.Zero;\n        double radius = 2 \/ 0.3048;\n        CurveLoop innerLoop = new CurveLoop();\n        innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n        innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n        Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Export the geometry of a selected element to an SAT file.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to export\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        string folderPath = \"C:\/RevitExports\/\";\n        string fileName = elem.Name + \".sat\";\n        SATExportOptions options = new SATExportOptions();\n        doc.Export(folderPath, fileName, new List<ElementId>{elem.Id}, options);\n    }\n}"}
{"prompt":"Place lighting posts every 11m along a 85m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Crea una apertura de hueco vertical (shaft) desde el nivel base hasta el nivel más alto.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(2 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(2 \/ 0.3048, 5 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Pin the selected element so it cannot be moved.","completion":"UIDocument uidoc = new UIDocument(doc);\nElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\n\nif (selectedId != ElementId.InvalidElementId)\n{\n    Element elementToPin = doc.GetElement(selectedId);\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}
{"prompt":"Añade los campos 'Nivel', 'Marca' y 'Volumen' a la tabla de pilares.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\") || s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Rotate project north 28 degrees clockwise.","completion":"using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInDegrees = 30.0;\n        double angleInRadians = -(angleInDegrees * Math.PI \/ 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Given a wall, get its materials and their volumes.","completion":"UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\n\nDictionary<string, double> materialVolumes = new Dictionary<string, double>();\nif (pickedRef != null)\n{\n    Wall wall = doc.GetElement(pickedRef) as Wall;\n    if (wall != null)\n    {\n        Parameter areaParam = wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED);\n        if (areaParam != null && areaParam.HasValue)\n        {\n            double wallArea = areaParam.AsDouble();\n            WallType wallType = wall.WallType;\n            if (wallType != null)\n            {\n                CompoundStructure cs = wallType.GetCompoundStructure();\n                if (cs != null)\n                {\n                    foreach(CompoundStructureLayer layer in cs.GetLayers())\n                    {\n                        Material material = doc.GetElement(layer.MaterialId) as Material;\n                        if(material != null)\n                        {\n                            double volume = layer.Width * wallArea;\n                            materialVolumes[material.Name] = volume;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Check if a pipe is connected at both ends.","completion":"Pipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nbool isFullyConnected = false;\n\nif (pipe != null)\n{\n    isFullyConnected = pipe.ConnectorManager.UnusedConnectors.IsEmpty;\n}\n"}
{"prompt":"Delete all unused wall types in the project.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}
{"prompt":"Insert a 5-meter truss between two points.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(6 \/ 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Exporta una lista de todas las advertencias del proyecto a un archivo de texto en el escritorio.","completion":"string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nstring filePath = System.IO.Path.Combine(desktopPath, \"RevitWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\nSystem.IO.File.WriteAllLines(filePath, warningDescriptions);"}
{"prompt":"Create a new pipe type named 'Steel Pipe' with 'Steel, Carbon' material.","completion":"string newTypeName = \"Steel Pipe\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Steel, Carbon\") as Material;\n\nif (pipeTypeToDuplicate != null && steel != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(steel.Id);\n    }\n}"}
{"prompt":"Crea una nueva hoja A1 y coloca la vista 'Planta Baja' en ella.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet\"))\n{\n    t.Start();\n    string sheetNumber = \"A-101\";\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A1\"));\n    View viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<View>().FirstOrDefault(v => v.Name == \"Planta Baja\");\n\n    if (titleBlock != null && viewToPlace != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            newSheet.Name = \"Planta Arquitectónica - Planta Baja\";\n            newSheet.SheetNumber = sheetNumber;\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Add a reference point at coordinates (1,2,3) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));"}
{"prompt":"Create a 'Roof Terrace' level at 18m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(18, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Model a ceiling at a height of 2.8 meters on Level 1.","completion":"CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (ceilingType != null && level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,0,0)));\n\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n    }\n}"}
{"prompt":"Añade los campos 'Nivel', 'Marca' y 'Volumen' a la tabla de pilares.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\") || s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Exporta cada tabla de planificación a un archivo CSV individual.","completion":"string exportPath = \"C:\/RevitExports\/\";\nList<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => !vs.IsTemplate).ToList();\nViewScheduleExportOptions options = new ViewScheduleExportOptions();\noptions.FieldDelimiter = \",\";\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Export(exportPath, schedule.Name + \".csv\", options);\n}"}
{"prompt":"Create a Reflected Ceiling Plan view for Level 1.","completion":"string levelName = \"Level 1\";\nstring viewName = \"Level 1 Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Encuentra todas las vistas de sección en el proyecto.","completion":"List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}
{"prompt":"Coloca una cota de elevación en una cara y un punto de vista dados.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara superior del suelo\");\n\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && activeView != null)\n    {\n        XYZ pointOnFace = faceRef.GlobalPoint;\n        XYZ leaderEnd = pointOnFace + new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Get the MEP space associated with the room 'Office 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 101\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Create a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a roof by footprint on the 'Roof Level'.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Roof Level\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 \/ 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 \/ 0.3048,0,0), new XYZ(20 \/ 0.3048,30 \/ 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 \/ 0.3048,30 \/ 0.3048,0), new XYZ(0,30 \/ 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 \/ 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Cambia el estilo visual de la vista activa a 'Línea Oculta'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}
{"prompt":"Create 5 worksets for engineering disciplines.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Crea un nivel 'Roof Terrace' a 15m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Crea un tipo de muro 'Muro-Doble' de 29cm y luego crea un muro de ese tipo.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Muro-Doble\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una nueva hoja A3 y colócale una leyenda.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Find all walls that have no base level assigned.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Encuentra un muro buscando el valor 'W-1' en su parámetro de Marca.","completion":"string markValue = \"W-01\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue);\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().WherePasses(filter).FirstOrDefault() as Wall;"}
{"prompt":"Copia todos los elementos del Nivel 1 al Nivel 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(elementsToCopy.Any())\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Place lighting posts every 9m along a 103m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create a 3D view with the section box enabled.","completion":"string viewName = \"3D View with Section Box\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Duplicate the 'Generic - 143mm' wall type and name it 'Interior - 13cm Plaster'.","completion":"string originalName = \"Generic - 150mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Crea un suelo con un contorno de 11 por 8 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Add a reference point at coordinates (1,2,3) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));"}
{"prompt":"Encuentra todas las puertas del Nivel 2 que sean de la familia 'Puerta Sencilla'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Puerta Sencilla\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Get a list of all plan views in the project.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}
{"prompt":"Create a new door type named 'FR-82 Door' and set its fire rating to '97 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"FR-90 Door\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Import a CAD file named 'BasePlan.dwg' into the current view.","completion":"string filePath = \"C:\/CAD\/BasePlan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Hide all annotation categories in the active view.","completion":"using (Transaction t = new Transaction(doc, \"Hide Annotation Categories\"))\n{\n    t.Start();\n    Categories categories = doc.Settings.Categories;\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        foreach(Category cat in categories)\n        {\n            if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n            {\n                 activeView.SetCategoryHidden(cat.Id, true);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a 30cm 'Double-Wall' type and then create a wall of that type.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Double-Wall\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Dado un muro, encuentra todas las tuberías que lo atraviesan.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\n\nList<ElementId> intersectingPipes = new List<ElementId>();\nif (wallRef != null)\n{\n    Element wall = doc.GetElement(wallRef);\n    if (wall != null)\n    {\n        ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n        intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds().ToList();\n    }\n}\n"}
{"prompt":"Create an extrusion roof with a 9% slope.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10 \/ 0.3048, 0, 1 \/ 0.3048)));\n        \n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        \n        if (refPlane != null)\n        {\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10 \/ 0.3048);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Genera ocho rejillas horizontales con una separación de 9m.","completion":"double separation = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea 11 worksets de arquitectura.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_MAM\", \"TAD_ARQ_ACA\", \"TAD_ARQ_PLA\", \"TAD_ARQ_PSO\", \"TAD_ARQ_HRE\", \"TAD_ARQ_ALU\", \"TAD_ARQ_CAR\", \"TAD_ARQ_MOB\", \"TAD_ARQ_PLO\", \"TAD_ARQ_EXT\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Añade un punto al Path of Travel seleccionado.","completion":"\/\/ PathOfTravel related methods are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint); \n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Duplicate the 'Generic - 150mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 150mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-81' y establece su resistencia al fuego a '79 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Puerta RF-90\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Copy all elements from Level 1 to Level 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(elementsToCopy.Any())\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Muestra un cuadro de diálogo con opciones 'Sí' y 'No'.","completion":""}
{"prompt":"Duplica el nivel 1 con un desfase de 3m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Apply a red color to all windows in the active view.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(255, 0, 0));\n    ICollection<ElementId> windows = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().ToElementIds();\n    \n    foreach (ElementId windowId in windows)\n    {\n        activeView.SetElementOverrides(windowId, ogs);\n    }\n}"}
{"prompt":"Genera ocho rejillas horizontales con una separación de 8m.","completion":"double separation = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea vigas entre las columnas alineadas horizontalmente.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Start and commit a transaction for 'Modify Project'.","completion":""}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 101' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create a new A2 sheet with the number 'A-166'.","completion":"string sheetNumber = \"A-201\";\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"Construction Details\";\n        sheet.SheetNumber = sheetNumber;\n    }\n}"}
{"prompt":"Genera ocho rejillas horizontales con una separación de 10m.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Obtén el elemento anfitrión de la primera ventana que encuentres.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}
{"prompt":"Encuentra todas las puertas del Nivel 2 que sean de la familia 'Puerta Sencilla'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Puerta Sencilla\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Obtén el número total de advertencias en el proyecto.","completion":"int totalWarnings = doc.GetWarnings().Count;\n"}
{"prompt":"Move the project base point 103 meters to the north.","completion":"using (Transaction t = new Transaction(doc, \"Move Project Base Point\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        XYZ translation = new XYZ(0, 100 \/ 0.3048, 0);\n        ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n    }\n    t.Commit();\n}"}
{"prompt":"Pin the selected element so it cannot be moved.","completion":"UIDocument uidoc = new UIDocument(doc);\nElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\n\nif (selectedId != ElementId.InvalidElementId)\n{\n    Element elementToPin = doc.GetElement(selectedId);\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}
{"prompt":"Cambia el nombre de todas las tablas que contienen 'Puertas' por 'Listado de Puertas'.","completion":"List<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"Puertas\")).ToList();\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"Puertas\", \"Listado de Puertas\");\n}"}
{"prompt":"Find all walls taller than 3 meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nList<ElementId> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds().ToList();"}
{"prompt":"Recarga el vínculo de Revit 'Estructura_LINK.rvt'.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"Estructura_LINK.rvt\");\n\nif (linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Encuentra todos los muros que no tienen nivel base asignado.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Generate a report with the area of all rooms in the project.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nList<double> roomAreas = new List<double>();\nforeach (Room room in rooms)\n{\n    if (room != null && room.Area > 0)\n    {\n        roomAreas.Add(UnitUtils.ConvertFromInternalUnits(room.Area, UnitTypeId.SquareMeters));\n    }\n}\n\/\/ The orchestrator can now use the 'roomAreas' list to generate the final report."}
{"prompt":"Pon un pilar estructural en las coordenadas 9,6.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Create a 27cm 'Double-Wall' type and then build a wall of that type.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Double-Wall\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Add a point to the selected Path of Travel.","completion":"\/\/ PathOfTravel related methods like GetPath and Update are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select a Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint);\n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Create a new revision and apply it to the active sheet.","completion":"Revision rev = Revision.Create(doc);\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (rev != null && sheet != null)\n{\n    rev.Description = \"Issued for Construction\";\n    rev.RevisionDate = DateTime.Now.ToString(\"yyyy-MM-dd\");\n    rev.IssuedBy = \"BIM Department\";\n    \n    ICollection<ElementId> revisions = sheet.GetAdditionalRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}
{"prompt":"Crea una nueva vista de alzado mirando al sur.","completion":"using (Transaction t = new Transaction(doc, \"Create South Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 0);\n            if (aev != null)\n            {\n                aev.Name = \"Alzado Sur\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a 30cm 'Double-Wall' type and then create a wall of that type.","completion":"string newTypeName = \"Double-Wall\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == newTypeName) as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if(newWallType!=null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if(cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(0.3, UnitTypeId.Meters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nLine wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\nWall.Create(doc, wallCurve, newWallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);"}
{"prompt":"Create a new elevation view looking north.","completion":"using (Transaction t = new Transaction(doc, \"Create North Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 2);\n            if (aev != null)\n            {\n                aev.Name = \"North Elevation\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a 3D view oriented from the southeast.","completion":"string viewName = \"3D View Southeast\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}
{"prompt":"Crea una vista 3D orientada desde el sureste.","completion":"string viewName = \"Vista 3D Sureste\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}
{"prompt":"Create an extrusion roof with a 9% slope.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10 \/ 0.3048, 0, 1 \/ 0.3048)));\n        \n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        \n        if (refPlane != null)\n        {\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10 \/ 0.3048);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Cambia el nivel de detalle de la vista activa a 'Medio'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Medium;\n}"}
{"prompt":"Create a grid of 5 horizontal and 5 vertical grids, spaced 6 meters apart.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint count = 5;\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((count - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Ajusta todas las ventanas para que la altura del antepecho sea 1 metro.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Duplicate the 'Generic - 144mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 150mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Crea una nueva hoja A1 y coloca la vista 'Planta Baja' en ella.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet\"))\n{\n    t.Start();\n    string sheetNumber = \"A-101\";\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A1\"));\n    View viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<View>().FirstOrDefault(v => v.Name == \"Planta Baja\");\n\n    if (titleBlock != null && viewToPlace != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            newSheet.Name = \"Planta Arquitectónica - Planta Baja\";\n            newSheet.SheetNumber = sheetNumber;\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Place a material tag on a wall face.","completion":"using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select a face to tag\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Select the tag location\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}
{"prompt":"Asigna el material 'Acero' a la primera capa de un tipo de muro.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"Steel\") || m.Name.Contains(\"Acero\"));\n\n    if (wallType != null && steel != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, steel.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Añade un plano de referencia horizontal llamado 'Eje Central A'.","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"Eje Central A\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a 3D view with the section box enabled.","completion":"string viewName = \"3D View with Section Box\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Crea una apertura de hueco vertical (shaft) desde el nivel base hasta el nivel más alto.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(2 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(2 \/ 0.3048, 5 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Rotate the given element 46 degrees about its center.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n            double angle = 45 * Math.PI \/ 180.0;\n            ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n        }\n    }\n}"}
{"prompt":"Crea un nuevo nivel 'Nivel 3' a una elevación de 12 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 3\";\n}"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-1'.","completion":"List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"WM-01\");\n  }\n}"}
{"prompt":"Create beams between horizontally aligned columns.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Obtén una lista de todas las vistas de planta del proyecto.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}
{"prompt":"Create a DirectShape topography from a list of points.","completion":"List<XYZ> points = new List<XYZ>\n{\n    new XYZ(0,0,0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0)\n};\nTessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[0], points[1], points[2]}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[1], points[3], points[2]}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_Topography));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"Topography DirectShape\";\n}"}
{"prompt":"Find all walls that have no base level assigned.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Acota la longitud de un muro seleccionado por el usuario.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro para acotar\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}
{"prompt":"Create a detail group with the selected detail items.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Typical Detail 1\";\n        }\n    }\n}"}
{"prompt":"Obtén todas las habitaciones que están en el Nivel 3.","completion":"Level level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 3\") as Level;\nList<Element> roomsOnLevel3 = new List<Element>();\n\nif (level3 != null)\n{\n    roomsOnLevel3 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level3.Id).ToList();\n}"}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    TextNoteType newType = null;\n    if (defaultType != null)\n    {\n        newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Change the type of a floor to one that contains 'Concrete'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concrete\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Add a 77-degree elbow between two pipes.","completion":"using (Transaction t = new Transaction(doc, \"Add Elbow\"))\n{\n    t.Start();\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.ConnectorManager != null && p.ConnectorManager.UnusedConnectors.Size > 0).Take(2).ToList();\n\n    if (pipes.Count >= 2)\n    {\n        Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        \n        if (c1 != null && c2 != null)\n        {\n            doc.Create.NewElbowFitting(c1, c2);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a 'Concrete-Rectangular 31x70' column at each grid intersection.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Concrete-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra todos los muros que no tienen nivel base asignado.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Dimension the length of a user-selected wall.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall to dimension\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}
{"prompt":"Crea un nuevo material llamado 'Roble Oscuro' con un patrón de superficie de madera.","completion":"string materialName = \"Roble Oscuro\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Wood\") || p.Name.Contains(\"Madera\")) as FillPatternElement;\n    \n    if (material != null && fillPattern != null)\n    {\n        material.SurfaceForegroundPatternId = fillPattern.Id;\n        material.Color = new Color(139, 69, 19);\n    }\n}"}
{"prompt":"Crea un codo en T entre dos tuberías que se intersecan.","completion":"\/\/ No se proporciona código para esta función específica debido a la necesidad de selección interactiva y manejo de casos complejos.\n\/\/ Este escenario involucra la selección de elementos específicos y el uso de métodos de creación que dependen de la geometría existente."}
{"prompt":"Crea un Path of Travel entre los puntos (1,1) y (11,10) en la vista de planta.","completion":"\/\/ PathOfTravel.Create is likely inaccessible in this environment.\n\/\/ A comment is left as a placeholder for the intended functionality.\n\/*\nusing (Transaction t = new Transaction(doc, \"Create Path of Travel\"))\n{\n    t.Start();\n    ViewPlan viewPlan = doc.ActiveView as ViewPlan;\n\n    if (viewPlan != null && viewPlan.ViewType == ViewType.FloorPlan)\n    {\n        ElementId levelId = viewPlan.get_Parameter(BuiltInParameter.PLAN_VIEW_LEVEL).AsElementId();\n        Level level = doc.GetElement(levelId) as Level;\n        if (level != null)\n        {\n            XYZ startPoint = new XYZ(1 \/ 0.3048, 1 \/ 0.3048, level.Elevation);\n            XYZ endPoint = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, level.Elevation);\n            \/\/ PathOfTravel.Create(viewPlan, startPoint, endPoint);\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Crea 8 ejes horizontales separados por 10 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea una nueva tabla de planificación para Pilares Estructurales.","completion":"string scheduleName = \"Tabla de Pilares Estructurales\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Get the system type of a selected pipe.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a pipe\");\n\nPipingSystemType systemType = null;\nif (pickedRef != null)\n{\n    Pipe pipe = doc.GetElement(pickedRef.ElementId) as Pipe;\n    if (pipe != null)\n    {\n        Parameter systemTypeParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        if (systemTypeParam != null && systemTypeParam.HasValue)\n        {\n            systemType = doc.GetElement(systemTypeParam.AsElementId()) as PipingSystemType;\n        }\n    }\n}\n"}
{"prompt":"Añade un punto al Path of Travel seleccionado.","completion":"\/\/ PathOfTravel related methods are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint); \n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Create a structural column at position X=10, Y=5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Create a new 3D view oriented from point (10,10,10) looking at the origin.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v=>v.ViewFamily==ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    if (view != null)\n    {\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D vo = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        view.SetOrientation(vo);\n        view.Name = \"View from (10,10,10)\";\n    }\n}"}
{"prompt":"Create a global length parameter named 'CorridorWidth' with a value of 1m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)));\n}"}
{"prompt":"Recarga el vínculo de Revit 'Estructura_LINK.rvt'.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"Estructura_LINK.rvt\");\nif(linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Inside the family editor, create a new horizontal reference plane.","completion":"string rpName = \"Horizontal Plane\";\nXYZ start = new XYZ(UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0, 0);\nXYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0);\nXYZ normal = XYZ.BasisY;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = rpName;\n    }\n}"}
{"prompt":"Oculta todos los muros que sean más cortos de 2 metros.","completion":"double lengthThreshold = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nList<ElementId> shortWallIds = new List<ElementId>();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    foreach(Wall wall in walls)\n    {\n        Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n        if(lengthParam != null && lengthParam.HasValue && lengthParam.AsDouble() < lengthThreshold)\n        {\n            shortWallIds.Add(wall.Id);\n        }\n    }\n    if (shortWallIds.Count > 0)\n    {\n        activeView.HideElements(shortWallIds);\n    }\n}"}
{"prompt":"Crea 4 ejes en sentido vertical separados 10 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<4; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Añade un plano de referencia horizontal llamado 'Eje Central A'.","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"Eje Central A\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Load a DWG link, preserving its colors.","completion":"string filePath = \"C:\/CAD\/Plans.dwg\";\nDWGImportOptions opts = new DWGImportOptions();\nopts.ColorMode = ImportColorMode.Preserved;\nElementId linkId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(filePath, opts, activeView, out linkId);\n}"}
{"prompt":"Crea un parámetro global de longitud llamado 'AnchoCorredor' con valor de 1m.","completion":"string paramName = \"AnchoCorredor\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)));\n}"}
{"prompt":"Elimina todas las líneas de detalle en la vista activa.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection<ElementId> detailLines = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(DetailLine)).ToElementIds();\n    if (detailLines.Count > 0)\n    {\n        doc.Delete(detailLines);\n    }\n}"}
{"prompt":"Encuentra todos los muros que no tienen nivel base asignado.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Set the visibility of the 'Furniture' category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Rotate a selected element 84 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 2.0);"}
{"prompt":"Obtén una lista de todas las vistas de planta del proyecto.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}
{"prompt":"Generate a report with the area of all rooms in the project.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}
{"prompt":"Copy all elements from Level 1 to Level 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(elementsToCopy.Any())\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Crea un DirectShape esférico con un radio de 6 metros.","completion":"using (Transaction t = new Transaction(doc, \"Create Sphere DirectShape\"))\n{\n    t.Start();\n    double radius = 5 \/ 0.3048;\n    List<GeometryObject> solids = new List<GeometryObject>();\n    Frame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\n    Arc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\n    Line line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\n    Solid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\n    solids.Add(sphere);\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\n    if (ds != null)\n    {\n        ds.SetShape(solids);\n        ds.Name = \"Esfera DirectShape\";\n    }\n    t.Commit();\n}"}
{"prompt":"Une la geometría de una columna y un suelo que se cruzan.","completion":"Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\n\nif (column != null && floor != null)\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}
{"prompt":"Add a tag to the column closest to the origin.","completion":"using (Transaction t = new Transaction(doc, \"Tag Column\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n        LocationPoint lp = c.Location as LocationPoint;\n        return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n    }).FirstOrDefault();\n\n    if (activeView != null && column != null)\n    {\n        LocationPoint loc = column.Location as LocationPoint;\n        if (loc != null)\n        {\n            IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca una cota de elevación en el Nivel 1.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    View activeView = doc.ActiveView;\n\n    if (lvl1 != null && activeView != null)\n    {\n        Reference levelRef = new Reference(lvl1);\n        XYZ origin = new XYZ(5\/0.3048, 5\/0.3048, lvl1.Elevation);\n        XYZ leaderEnd = origin + new XYZ(2\/0.3048, 2\/0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, levelRef, origin, origin, leaderEnd, origin, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Get the IDs of all 3D views starting with 'Coord' for export.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Mueve un muro 5 metros a la derecha.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (wall != null)\n{\n    XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    ElementTransformUtils.MoveElement(doc, wall.Id, translation);\n}"}
{"prompt":"Create a new elevation view looking south.","completion":"string viewName = \"South Elevation (New)\";\nViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20, 0), 100);\nView aev = marker.CreateElevation(doc, doc.ActiveView.Id, 0);\naev.Name = viewName;"}
{"prompt":"Create a shaft opening that passes through from Level 1 to Level 3.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft Opening\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 3\");\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p2 = new XYZ(8 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p3 = new XYZ(8 \/ 0.3048, 8 \/ 0.3048,0);\n        XYZ p4 = new XYZ(5 \/ 0.3048, 8 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Get the solid geometry of a selected element.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to get its geometry\");\n\nList<Solid> solids = new List<Solid>();\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        Options opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if (geoElem != null)\n        {\n            solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}
{"prompt":"Set the 'Comments' parameter for all doors on Level 1 to 'Fire Rating - 91 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Fire Rating - 90 min\");\n    }\n}"}
{"prompt":"Create a new door type named 'FR-95 Door' and set its fire rating to '96 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"FR-90 Door\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una nueva vista de alzado mirando al sur.","completion":"string viewName = \"Alzado Sur (Nuevo)\";\nViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20, 0), 100);\nView aev = marker.CreateElevation(doc, doc.ActiveView.Id, 0);\naev.Name = viewName;"}
{"prompt":"Encuentra todas las puertas del Nivel 2 que sean de la familia 'Puerta Sencilla'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Puerta Sencilla\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Copia todos los muros del Nivel 1 al Nivel 2.","completion":"using (Transaction t = new Transaction(doc, \"Copy Walls\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\n\n    if (level1 != null && level2 != null)\n    {\n        ICollection<ElementId> wallsToCopy = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(e => (e as Wall) != null && (e as Wall).LevelId.Equals(level1.Id)).Select(e => e.Id).ToList();\n        double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n        XYZ translation = new XYZ(0, 0, elevationDiff);\n        if (wallsToCopy.Count > 0)\n        {\n            ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}
{"prompt":"Create an extrusion roof with a 8% slope.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10 \/ 0.3048, 0, 1 \/ 0.3048)));\n        \n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        \n        if (refPlane != null)\n        {\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10 \/ 0.3048);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Exporta la vista 3D activa a NWC para Navisworks.","completion":"View3D view3d = doc.ActiveView as View3D;\n\nif (view3d != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    string fileName = view3d.Name + \".nwc\";\n    NavisworksExportOptions options = new NavisworksExportOptions();\n    options.ExportScope = NavisworksExportScope.View;\n    options.ViewId = view3d.Id;\n    doc.Export(folderPath, fileName, options);\n}"}
{"prompt":"Crea una vista de sección entre los puntos (0,0,0) y (9,11,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Import a topography from a CSV file.","completion":"using (Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    \/\/ CSV file reading is not directly supported by a single API call.\n    \/\/ You would typically read the file line by line, parse the XYZ coordinates,\n    \/\/ and then use the TopographySurface.Create method with a list of points.\n    \/\/ As a placeholder, here's how to create a simple topography from a list of points:\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(10, 0, 0));\n    points.Add(new XYZ(0, 10, 0));\n    points.Add(new XYZ(10, 10, 5));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Modifica el tipo de muro de un muro existente a uno que contenga 'Aislamiento Térmico'.","completion":"Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(x => x.Name.Contains(\"Aislamiento Térmico\") || x.Name.Contains(\"Insulation\"));\n\nif (wallToChange != null && newType != null)\n{\n    wallToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Create a new schedule for Structural Columns.","completion":"string scheduleName = \"Structural Column Schedule\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Obtén el elemento anfitrión de la primera ventana que encuentres.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}
{"prompt":"Crea una nueva hoja A2 con el número 'A-198'.","completion":"string sheetNumber = \"A-201\";\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"Detalles Constructivos\";\n        sheet.SheetNumber = sheetNumber;\n    }\n}"}
{"prompt":"Obtén todos los muros del Nivel 1 que son estructurales.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level1 != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Place a material tag on a wall face.","completion":"using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select a face to tag\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Select the tag location\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}
{"prompt":"Export a list of all project warnings to a text file on the desktop.","completion":"string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nstring filePath = System.IO.Path.Combine(desktopPath, \"RevitWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\nSystem.IO.File.WriteAllLines(filePath, warningDescriptions);"}
{"prompt":"Crea un nuevo tipo de cota lineal con texto azul y tamaño 2mm.","completion":"using (Transaction t = new Transaction(doc, \"Create Dimension Type\"))\n{\n    t.Start();\n    string newTypeName = \"Cota Azul 2mm\";\n    DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\n    if (linearDimType != null)\n    {\n        DimensionType newDimType = linearDimType.Duplicate(newTypeName) as DimensionType;\n        if (newDimType != null)\n        {\n            Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n            Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(2 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra todos los muros con el comentario 'Revisar'.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Revisar\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Create an 9-meter long foundation beam.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, StructuralType.Footing);\n}"}
{"prompt":"Crea un nuevo parámetro de proyecto compartido de texto llamado 'Notas Adicionales' para muros y puertas.","completion":"using (Transaction t = new Transaction(doc, \"Create Shared Parameter\"))\n{\n    t.Start();\n    string paramName = \"Notas Adicionales\";\n    string originalFile = doc.Application.SharedParametersFilename;\n    string tempFile = System.IO.Path.GetTempFileName() + \".txt\";\n    using (System.IO.File.Create(tempFile)) { }\n    doc.Application.SharedParametersFilename = tempFile;\n\n    try\n    {\n        DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n        if (defFile != null)\n        {\n            DefinitionGroup group = defFile.Groups.Create(\"General\");\n            if (group != null)\n            {\n                ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(paramName, ParameterType.Text);\n                Definition definition = group.Definitions.Create(options);\n                if (definition != null)\n                {\n                    CategorySet categories = doc.Application.Create.NewCategorySet();\n                    categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                    categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                    InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                    doc.ParameterBindings.Insert(definition, binding, Autodesk.Revit.DB.BuiltInParameterGroup.PG_DATA);\n                }\n            }\n        }\n    }\n    finally\n    {\n        doc.Application.SharedParametersFilename = originalFile;\n        System.IO.File.Delete(tempFile);\n        t.Commit();\n    }\n}"}
{"prompt":"Create a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Find out who the owner of a selected element is.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element\");\n\nWorksharingTooltipInfo info = null;\nif (pickedRef != null)\n{\n    info = WorksharingUtils.GetWorksharingTooltipInfo(doc, pickedRef.ElementId);\n}\n"}
{"prompt":"Export the document to an IFC file with version IFC3x3.","completion":"string folderPath = \"C:\/RevitExports\/\";\nstring fileName = doc.Title + \"_IFC4x3.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4x3;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Crea un nuevo material llamado 'Vidrio Reflectante' y asígnale un color base y una transparencia.","completion":"string materialName = \"Vidrio Reflectante\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Obtén los IDs de todas las vistas 3D que empiezan con 'Coord' para exportación.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Create 5 worksets for engineering disciplines.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 4' a una elevación de 12 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 4\";\n}"}
{"prompt":"Place lighting posts every 11m along a 99m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Inserta una armadura (truss) de 5 metros entre dos puntos.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(6 \/ 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Añade un plano de referencia horizontal llamado 'Eje Central A'.","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"Eje Central A\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Añade un plano de referencia horizontal llamado 'Eje Central A'.","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"Eje Central A\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Temporarily isolate all furniture in the active view.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Get all rooms on the 'Ground Floor' Level.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Ground Floor\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Crea una cimentación de viga de 9 metros de largo.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, StructuralType.Footing);\n}"}
{"prompt":"Duplicate the 'Level 2' plan view and make it a view template.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Level 2\");\n    string templateName = \"Level 2 Template\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ Direct conversion to a template may not be available in older APIs.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una vista de sección llamada 'Sección Longitudinal'.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-1, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    \n    if (sectionView != null)\n    {\n        sectionView.Name = \"Sección Longitudinal\";\n    }\n}"}
{"prompt":"Fill the material parameter of all walls with 'Concrete'.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concrete\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Adjust the view's crop region to a rectangle from (0,0) to (21,23).","completion":"using (Transaction t = new Transaction(doc, \"Adjust Crop Region\"))\n{\n    t.Start();\n    View view = doc.ActiveView;\n\n    if (view != null && view.CropBoxActive)\n    {\n        BoundingBoxXYZ cropBox = view.CropBox;\n        if (cropBox != null)\n        {\n            XYZ minPoint = new XYZ(0, 0, cropBox.Min.Z);\n            XYZ maxPoint = new XYZ(20 \/ 0.3048, 20 \/ 0.3048, cropBox.Max.Z);\n            cropBox.Min = minPoint;\n            cropBox.Max = maxPoint;\n            view.CropBox = cropBox;\n            view.CropBoxVisible = true;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Find all walls taller than 3 meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nList<ElementId> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds().ToList();"}
{"prompt":"Aplica aislamiento térmico de 25mm a todas las tuberías de agua caliente.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Elimina todas las líneas de detalle en la vista activa.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection<ElementId> detailLines = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(DetailLine)).ToElementIds();\n    if (detailLines.Count > 0)\n    {\n        doc.Delete(detailLines);\n    }\n}"}
{"prompt":"Ajusta todas las ventanas para que tengan la altura del antepecho a 817mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(817, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Create 5 worksets for engineering disciplines.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Obtén la geometría sólida de un elemento seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para obtener su geometría\");\n\nList<Solid> solids = new List<Solid>();\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        Options opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if (geoElem != null)\n        {\n            solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}
{"prompt":"Exporta el modelo a formato IFC4 para coordinación.","completion":"string folderPath = \"C:\/RevitExports\/\";\nstring fileName = doc.Title + \"-Coordination.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Activate all FamilySymbols in the project.","completion":"List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (FamilySymbol sym in symbols)\n{\n    if (!sym.IsActive)\n    {\n        sym.Activate();\n    }\n}"}
{"prompt":"Crea un techo por contorno en el 'Nivel de Cubierta'.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel de Cubierta\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n    if(roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20,0,0), new XYZ(20,30,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20,30,0), new XYZ(0,30,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Insert a 6-meter truss between two points.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(6 \/ 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 300mm' con un grosor de 30cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Muro Genérico 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un techo por extrusión con una pendiente del 12%.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10 \/ 0.3048, 0, 1 \/ 0.3048)));\n        \n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        \n        if (refPlane != null)\n        {\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10 \/ 0.3048);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una vista 3D con la caja de sección activada.","completion":"string viewName = \"Vista 3D con Caja de Sección\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Create a structural foundation slab 40cm thick.","completion":"using (Transaction t = new Transaction(doc, \"Create Foundation Slab\"))\n{\n    t.Start();\n    Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    FloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n    if(slabTypeToDuplicate != null && foundationLevel != null)\n    {\n        string newTypeName = \"Foundation Slab 40cm\";\n        FloorType newSlabType = slabTypeToDuplicate.Duplicate(newTypeName) as FloorType;\n        if(newSlabType != null)\n        {\n            CompoundStructure cs = newSlabType.GetCompoundStructure();\n            if (cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 400 \/ 304.8);\n                newSlabType.SetCompoundStructure(cs);\n                XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n                doc.Create.NewFloor(new List<CurveLoop>{profile}, newSlabType, foundationLevel, true);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra todos los muros con más de 3 metros de altura.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Modela un plafón a 3 metros de altura en Nivel 1.","completion":"CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (ceilingType != null && level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,0,0)));\n\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    }\n}"}
{"prompt":"Temporarily isolate the Doors category in the active view.","completion":"ElementId doorCategoryId = new ElementId(BuiltInCategory.OST_Doors);\nICollection<ElementId> categoryIds = new List<ElementId> { doorCategoryId };\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateCategoriesTemporary(categoryIds);\n}"}
{"prompt":"Change the type of a selected floor to 'Concrete 15cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 15cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Encuentra todos los muros con más de 4 metros de altura.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Crea una columna estructural en la posición X=10, Y=5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Pinta la cara interior de los muros exteriores con 'Pintura Blanca'.","completion":"using(Transaction t = new Transaction(doc, \"Paint Walls\"))\n{\n    t.Start();\n    Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Pintura Blanca\");\n    var exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior).ToList();\n    if(paintMaterial != null)\n    {\n        foreach (Wall w in exteriorWalls)\n        {\n            IList<Reference> interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n            if(interiorFaceRefs.Count > 0)\n            {\n                Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n                if (interiorFace != null)\n                {\n                    doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un espacio MEP para cada habitación en el Nivel 1.","completion":"using (Transaction t = new Transaction(doc, \"Create MEP Spaces\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n\n    if (level1 != null)\n    {\n        List<Room> roomsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level1.Id)).Cast<Room>().ToList();\n        foreach(Room room in roomsOnLevel1)\n        {\n           \/\/ The direct creation of MEP spaces from rooms might not be available in this specific API version.\n           \/\/ Placeholder comment for the intended logic.\n           \/\/ Space.Create(doc, room, null);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un muro en el Nivel 1 que vaya de (0,0,0) a (10,0,0) con una altura de 4 metros.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Ajusta todas las ventanas para que la altura del antepecho sea 1 metro.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Aísla temporalmente la categoría de Puertas en la vista activa.","completion":"ElementId doorCategoryId = new ElementId(BuiltInCategory.OST_Doors);\nICollection<ElementId> categoryIds = new List<ElementId> { doorCategoryId };\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateCategoriesTemporary(categoryIds);\n}"}
{"prompt":"Crea un nivel 'Roof Terrace' a 15m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Find all annotation families and count how many there are.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-1'.","completion":"List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"WM-01\");\n  }\n}"}
{"prompt":"Create an 8-meter long foundation beam.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, StructuralType.Footing);\n}"}
{"prompt":"Coloca postes de iluminación cada 10m en un camino de 97m.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create a new window schedule that includes Type Mark, Width, and Height.","completion":"string scheduleName = \"Window Schedule\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}
{"prompt":"Calcula la longitud total de todos los ductos de Suministro de Aire.","completion":"List<Duct> ducts = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctCurves).WhereElementIsNotElementType().Cast<Duct>().Where(d => d.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString() == \"SupplyAir\").ToList();\ndouble totalLength = 0.0;\nforeach (Duct d in ducts)\n{\n    totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}"}
{"prompt":"Delete all detail lines in the active view.","completion":"using (Transaction t = new Transaction(doc, \"Delete Detail Lines\"))\n{\n    t.Start();\n    if (doc.ActiveView != null)\n    {\n        ICollection<ElementId> detailLines = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(DetailCurve)).ToElementIds();\n        if (detailLines.Count > 0)\n        {\n            doc.Delete(detailLines);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Recarga el vínculo de Revit 'Estructura_LINK.rvt'.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"Estructura_LINK.rvt\");\n\nif (linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Set the sill height of all windows to 1 meter.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Find all doors on Level 1 using a combined filter.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nList<Element> doors = new List<Element>();\n\nif (level1 != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    doors = new FilteredElementCollector(doc).WherePasses(combinedFilter).ToList();\n}"}
{"prompt":"Selecciona todos los muros del 'Nivel 2' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif (level2 != null)\n{\n    List<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\n    foreach(Wall wall in wallsOnLevel2)\n    {\n        Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentParam != null && !commentParam.IsReadOnly)\n        {\n            commentParam.Set(\"REVISAR AISLAMIENTO\");\n        }\n    }\n}"}
{"prompt":"Reload the Revit link 'Structure_LINK.rvt'.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"Structure_LINK.rvt\");\n\nif (linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Change the type of a selected floor to 'Concrete 18cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 15cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Crea una nueva tabla de planificación para ventanas que incluya Marca de Tipo, Ancho y Alto.","completion":"string scheduleName = \"Tabla de Ventanas\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}
{"prompt":"Create 5 worksets for engineering disciplines.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Add a tag to the column closest to the origin.","completion":"using (Transaction t = new Transaction(doc, \"Tag Column\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n        LocationPoint lp = c.Location as LocationPoint;\n        return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n    }).FirstOrDefault();\n\n    if (activeView != null && column != null)\n    {\n        LocationPoint loc = column.Location as LocationPoint;\n        if (loc != null)\n        {\n            IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Display a dialog box with 'Yes', 'No', and 'Cancel' options.","completion":""}
{"prompt":"Create a spherical DirectShape with a 5-meter radius.","completion":"using (Transaction t = new Transaction(doc, \"Create Sphere DirectShape\"))\n{\n    t.Start();\n    double radius = 5 \/ 0.3048;\n    List<GeometryObject> solids = new List<GeometryObject>();\n    Frame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\n    Arc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\n    Line line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\n    Solid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\n    solids.Add(sphere);\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\n    if (ds != null)\n    {\n        ds.SetShape(solids);\n        ds.Name = \"Sphere DirectShape\";\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una vista 3D con la caja de sección activada.","completion":"string viewName = \"Vista 3D con Caja de Sección\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Obtén los IDs de todas las vistas 3D que empiezan con 'Coord' para exportación.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 4' a una elevación de 12 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 4\";\n}"}
{"prompt":"Create columns at each grid intersection.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Change the family name of a selected door to 'New_Door'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a door\");\n\nif (pickedRef != null)\n{\n    FamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (door != null && door.Symbol != null)\n    {\n        Family family = door.Symbol.Family;\n        if (family != null)\n        {\n            family.Name = \"New_Door\";\n        }\n    }\n}"}
{"prompt":"Add a point to the selected Path of Travel.","completion":"\/\/ PathOfTravel related methods are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select a Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint);\n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Add the 'Level', 'Mark', and 'Volume' fields to the column schedule.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Etiqueta todas las habitaciones con su área.","completion":"using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(locPoint.Point.X, locPoint.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Duplicate level 1 with a 4m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Insert a window 1m wide and 1m high into a wall.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original y asegura un nombre único\n    string newTypeName = $\"Window {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters), UnitTypeId.Meters)}m x {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitTypeId.Meters)}m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create a default 3D view.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n}"}
{"prompt":"Une la geometría de una columna y un suelo que se cruzan.","completion":"Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\nif (column != null && floor != null)\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}
{"prompt":"Rota el elemento dado 42 grados alrededor de su centro.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n            double angle = 45 * Math.PI \/ 180.0;\n            ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n        }\n    }\n}"}
{"prompt":"Aísla temporalmente todo el mobiliario en la vista activa.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Calculate the total length of all Supply Air ducts.","completion":"List<Duct> ducts = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctCurves).WhereElementIsNotElementType().Cast<Duct>().Where(d => d.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString() == \"SupplyAir\").ToList();\ndouble totalLength = 0.0;\nforeach (Duct d in ducts)\n{\n    totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}"}
{"prompt":"Activate all family symbols loaded in the project.","completion":"List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) \n    {\n        sym.Activate();\n    }\n}"}
{"prompt":"Import a CAD file named 'BasePlan.dwg' into the current view.","completion":"string filePath = \"C:\/CAD\/BasePlan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Create a spherical DirectShape with a 5-meter radius.","completion":"using (Transaction t = new Transaction(doc, \"Create Sphere DirectShape\"))\n{\n    t.Start();\n    double radius = 5 \/ 0.3048;\n    List<GeometryObject> solids = new List<GeometryObject>();\n    Frame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\n    Arc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\n    Line line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\n    Solid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\n    solids.Add(sphere);\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\n    if (ds != null)\n    {\n        ds.SetShape(solids);\n        ds.Name = \"Sphere DirectShape\";\n    }\n    t.Commit();\n}"}
{"prompt":"Get the system type of a selected pipe.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a pipe\");\n\nPipingSystemType systemType = null;\nif (pickedRef != null)\n{\n    Pipe pipe = doc.GetElement(pickedRef.ElementId) as Pipe;\n    if (pipe != null)\n    {\n        Parameter systemTypeParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        if (systemTypeParam != null && systemTypeParam.HasValue)\n        {\n            systemType = doc.GetElement(systemTypeParam.AsElementId()) as PipingSystemType;\n        }\n    }\n}\n"}
{"prompt":"Coloca pilares en todos los cruces de la rejilla.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Exporta todas las hojas de un conjunto a un único PDF.","completion":"ViewSheetSet sheetSet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheetSet)).FirstOrDefault() as ViewSheetSet;\n\nif (sheetSet != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    PDFExportOptions options = new PDFExportOptions();\n    options.Combine = true;\n    options.FileName = sheetSet.Name;\n    List<ElementId> sheetIds = sheetSet.Views.Cast<ViewSheet>().Select(s => s.Id).ToList();\n    doc.Export(folderPath, sheetIds, options);\n}"}
{"prompt":"Cambia el nombre de todas las tablas que contienen 'Puertas' por 'Listado de Puertas'.","completion":"List<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"Puertas\")).ToList();\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"Puertas\", \"Listado de Puertas\");\n}"}
{"prompt":"Encuentra un muro buscando el valor 'W-1' en su parámetro de Marca.","completion":"string markValue = \"W-01\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue);\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().WherePasses(filter).FirstOrDefault() as Wall;"}
{"prompt":"Obtén el elemento anfitrión de la primera ventana que encuentres.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}
{"prompt":"Encuentra todas las vistas que no tienen una plantilla de vista asignada.","completion":"List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId.Equals(ElementId.InvalidElementId)).ToList();"}
{"prompt":"Create beams between horizontally aligned columns.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Coloca postes de iluminación cada 11m en un camino de 112m.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Move the project base point 88 meters to the north.","completion":"using (Transaction t = new Transaction(doc, \"Move Project Base Point\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        XYZ translation = new XYZ(0, 100 \/ 0.3048, 0);\n        ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n    }\n    t.Commit();\n}"}
{"prompt":"Place a spot elevation on Level 1.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    View activeView = doc.ActiveView;\n\n    if (lvl1 != null && activeView != null)\n    {\n        Reference levelRef = new Reference(lvl1);\n        XYZ origin = new XYZ(5\/0.3048, 5\/0.3048, lvl1.Elevation);\n        XYZ leaderEnd = origin + new XYZ(2\/0.3048, 2\/0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, levelRef, origin, origin, leaderEnd, origin, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Add the 'Level', 'Mark', and 'Volume' fields to the column schedule.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Aísla temporalmente todo el mobiliario en la vista activa.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Cambia el nombre de la familia de una puerta seleccionada a 'Puerta_Nueva'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una puerta\");\n\nif (pickedRef != null)\n{\n    FamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (door != null && door.Symbol != null)\n    {\n        Family family = door.Symbol.Family;\n        if (family != null)\n        {\n            family.Name = \"Puerta_Nueva\";\n        }\n    }\n}"}
{"prompt":"Align the face of one wall with the face of another.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Face, \"Select the target face (stationary)\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Face, \"Select the face to move\");\nView activeView = doc.ActiveView;\n\nif (ref1 != null && ref2 != null && activeView != null)\n{\n    doc.Create.NewAlignment(activeView, ref1, ref2);\n}"}
{"prompt":"Move a wall 5 meters to the right.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (wall != null)\n{\n    XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    ElementTransformUtils.MoveElement(doc, wall.Id, translation);\n}"}
{"prompt":"Create an electrical circuit connecting light fixtures to a panel.","completion":"using (Transaction t = new Transaction(doc, \"Create Electrical Circuit\"))\n{\n    t.Start();\n    FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n    List<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\n    if (panel != null && fixtureIds.Count > 0)\n    {\n        ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n        if(electricalSystem != null)\n        {\n            electricalSystem.SelectPanel(panel);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Añade los campos 'Nivel', 'Marca' y 'Volumen' a la tabla de pilares.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\") || s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Create a new elevation view looking south.","completion":"using (Transaction t = new Transaction(doc, \"Create South Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 0);\n            if (aev != null)\n            {\n                aev.Name = \"South Elevation\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una vista de plano de plafón reflejado para el Nivel 1.","completion":"string levelName = \"Nivel 1\";\nstring viewName = \"Plano de Plafón Nivel 1\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Oculta todos los elementos de anotación en la vista activa.","completion":"if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-1'.","completion":"List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"WM-01\");\n  }\n}"}
{"prompt":"Crea una vista de sección entre los puntos (0,0,0) y (11,10,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Add reinforcement to a column.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Create a new level named 'Basement Floor' at an elevation of -4.5 meters.","completion":"string levelName = \"Basement Floor\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Model a ceiling at a height of 3 meters on Level 1.","completion":"CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (ceilingType != null && level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,0,0)));\n\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    }\n}"}
{"prompt":"Crea una apertura de hueco vertical (shaft) desde el nivel base hasta el nivel más alto.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(2 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(2 \/ 0.3048, 5 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un DirectShape esférico con un radio de 5 metros.","completion":"using (Transaction t = new Transaction(doc, \"Create Sphere DirectShape\"))\n{\n    t.Start();\n    double radius = 5 \/ 0.3048;\n    List<GeometryObject> solids = new List<GeometryObject>();\n    Frame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\n    Arc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\n    Line line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\n    Solid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\n    solids.Add(sphere);\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\n    if (ds != null)\n    {\n        ds.SetShape(solids);\n        ds.Name = \"Esfera DirectShape\";\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new A1 sheet and place the 'Ground Floor' view on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet\"))\n{\n    t.Start();\n    string sheetNumber = \"A-101\";\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A1\"));\n    View viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<View>().FirstOrDefault(v => v.Name == \"Ground Floor\");\n\n    if (titleBlock != null && viewToPlace != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            newSheet.Name = \"Architectural Plan - Ground Floor\";\n            newSheet.SheetNumber = sheetNumber;\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a 36cm 'Double-Wall' type and then generate a wall of that type.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Double-Wall\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 101' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Genera un grupo a partir de la selección actual y muévelo 10 metros a la derecha.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    Group group = doc.Create.NewGroup(selectedIds);\n    if (group != null)\n    {\n        XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0);\n        ElementTransformUtils.MoveElement(doc, group.Id, translation);\n    }\n}"}
{"prompt":"Create a wall on Level 1 from (0,0,0) to (6,0,0) with a height of 4 meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    Line wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    double height = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Create a new workset named 'Structure'.","completion":"string wsName = \"Structure\";\nWorkset newWorkset = Workset.Create(doc, wsName);\n"}
{"prompt":"Crea una viga estructural entre (0,0,3) y (5,0,3) en el Nivel 2.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Obtén las coordenadas del punto base y del punto de reconocimiento.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}
{"prompt":"Create a new 4mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a pipe with a 120mm diameter.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(120, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Create a new shared text project parameter named 'Additional Notes' for walls and doors.","completion":"using (Transaction t = new Transaction(doc, \"Create Shared Parameter\"))\n{\n    t.Start();\n    string paramName = \"Additional Notes\";\n    string originalFile = doc.Application.SharedParametersFilename;\n    string tempFile = System.IO.Path.GetTempFileName() + \".txt\";\n    using (System.IO.File.Create(tempFile)) { }\n    doc.Application.SharedParametersFilename = tempFile;\n\n    try\n    {\n        DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n        if (defFile != null)\n        {\n            DefinitionGroup group = defFile.Groups.Create(\"General\");\n            if (group != null)\n            {\n                ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(paramName, ParameterType.Text);\n                Definition definition = group.Definitions.Create(options);\n                if (definition != null)\n                {\n                    CategorySet categories = doc.Application.Create.NewCategorySet();\n                    categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                    categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                    InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                    doc.ParameterBindings.Insert(definition, binding, Autodesk.Revit.DB.BuiltInParameterGroup.PG_DATA);\n                }\n            }\n        }\n    }\n    finally\n    {\n        doc.Application.SharedParametersFilename = originalFile;\n        System.IO.File.Delete(tempFile);\n        t.Commit();\n    }\n}"}
{"prompt":"Fija el elemento seleccionado para que no se mueva.","completion":"UIDocument uidoc = new UIDocument(doc);\nElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\n\nif (selectedId != ElementId.InvalidElementId)\n{\n    Element elementToPin = doc.GetElement(selectedId);\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}
{"prompt":"Crea una nueva habitación en el Nivel 1 en el punto (11, 10).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters));\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Create a new A1 sheet using the first available title block.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"A1 - New Sheet\";\n        sheet.SheetNumber = \"A1\";\n    }\n}"}
{"prompt":"Create a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"string newTypeName = \"FR-90 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"90 min\");\n    }\n}"}
{"prompt":"Create a new 6mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Load the 'Table.rfa' family and place it at (4,5,0) on Level 1.","completion":"string familyPath = \"C:\/Common\/Paths\/Table.rfa\";\nFamily tableFamily = null;\nbool familyLoaded = doc.LoadFamily(familyPath, out tableFamily);\n\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (familyLoaded && tableFamily != null && level1 != null)\n{\n    FamilySymbol tableSymbol = doc.GetElement(tableFamily.GetFamilySymbolIds().FirstOrDefault()) as FamilySymbol;\n    if (tableSymbol != null)\n    {\n        if (!tableSymbol.IsActive) tableSymbol.Activate();\n        XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0);\n        doc.Create.NewFamilyInstance(point, tableSymbol, level1, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create a filled region with a 'Concrete' pattern.","completion":"using (Transaction t = new Transaction(doc, \"Create Filled Region\"))\n{\n    t.Start();\n    FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\"));\n    View activeView = doc.ActiveView;\n\n    if (regionType != null && activeView != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 0,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(0, 5 \/ 0.3048,0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n    }\n    t.Commit();\n}"}
{"prompt":"Display a dialog box with 'Yes', 'No', and 'Cancel' options.","completion":""}
{"prompt":"Cambia el nivel de detalle de la vista activa a 'Medio'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Medium;\n}"}
{"prompt":"Hide all walls shorter than 2 meters.","completion":"double lengthThreshold = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nList<ElementId> shortWallIds = new List<ElementId>();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    foreach(Wall wall in walls)\n    {\n        Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n        if(lengthParam != null && lengthParam.HasValue && lengthParam.AsDouble() < lengthThreshold)\n        {\n            shortWallIds.Add(wall.Id);\n        }\n    }\n    if (shortWallIds.Count > 0)\n    {\n        activeView.HideElements(shortWallIds);\n    }\n}"}
{"prompt":"Asigna todos los muros al workset 'Estructura'.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if (doc.IsWorkshared)\n    {\n        Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w => w.Name == \"Estructura\");\n        if (ws != null)\n        {\n            FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n            foreach (Element e in collector)\n            {\n                Parameter p = e.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(ws.Id.IntegerValue);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new door type named 'FR-60 Door' and set the 'Fire Rating' parameter to '60 min'.","completion":"string newTypeName = \"FR-60 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"60 min\");\n    }\n}"}
{"prompt":"Export a list of all project warnings to a text file on the desktop.","completion":"string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nstring filePath = System.IO.Path.Combine(desktopPath, \"RevitWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\nSystem.IO.File.WriteAllLines(filePath, warningDescriptions);"}
{"prompt":"Crea una nueva vista de alzado mirando al sur.","completion":"using (Transaction t = new Transaction(doc, \"Create South Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 0);\n            if (aev != null)\n            {\n                aev.Name = \"Alzado Sur\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new room on Level 1 at point (9, 9).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters));\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Ajusta la región de recorte de la vista a un rectángulo de (0,0) a (19,20).","completion":"using (Transaction t = new Transaction(doc, \"Adjust Crop Region\"))\n{\n    t.Start();\n    View view = doc.ActiveView;\n\n    if (view != null && view.CropBoxActive)\n    {\n        BoundingBoxXYZ cropBox = view.CropBox;\n        if (cropBox != null)\n        {\n            XYZ minPoint = new XYZ(0, 0, cropBox.Min.Z);\n            XYZ maxPoint = new XYZ(20 \/ 0.3048, 20 \/ 0.3048, cropBox.Max.Z);\n            cropBox.Min = minPoint;\n            cropBox.Max = maxPoint;\n            view.CropBox = cropBox;\n            view.CropBoxVisible = true;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Find out who the owner of a selected element is.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element\");\n\nWorksharingTooltipInfo info = null;\nif (pickedRef != null)\n{\n    info = WorksharingUtils.GetWorksharingTooltipInfo(doc, pickedRef.ElementId);\n}\n"}
{"prompt":"Generate a 5x5 column grid with 7-meter spacing.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Link a DWG file as a reference in the active view.","completion":"string filePath = \"C:\/CAD_Files\/Base_Plan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.ColorMode = ImportColorMode.Preserved;\nElementId linkedFileId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(filePath, options, activeView, out linkedFileId);\n}"}
{"prompt":"Create a new shared text project parameter named 'Additional Notes' for walls and doors.","completion":"using (Transaction t = new Transaction(doc, \"Create Shared Parameter\"))\n{\n    t.Start();\n    string paramName = \"Additional Notes\";\n    string originalFile = doc.Application.SharedParametersFilename;\n    string tempFile = System.IO.Path.GetTempFileName() + \".txt\";\n    using (System.IO.File.Create(tempFile)) { }\n    doc.Application.SharedParametersFilename = tempFile;\n\n    try\n    {\n        DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n        if (defFile != null)\n        {\n            DefinitionGroup group = defFile.Groups.Create(\"General\");\n            if (group != null)\n            {\n                ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(paramName, ParameterType.Text);\n                Definition definition = group.Definitions.Create(options);\n                if (definition != null)\n                {\n                    CategorySet categories = doc.Application.Create.NewCategorySet();\n                    categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                    categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                    InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                    doc.ParameterBindings.Insert(definition, binding, Autodesk.Revit.DB.BuiltInParameterGroup.PG_DATA);\n                }\n            }\n        }\n    }\n    finally\n    {\n        doc.Application.SharedParametersFilename = originalFile;\n        System.IO.File.Delete(tempFile);\n        t.Commit();\n    }\n}"}
{"prompt":"Crea una vista 3D con la caja de sección activada.","completion":"string viewName = \"Vista 3D con Caja de Sección\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Create a radial dimension for a curved wall.","completion":"using (Transaction t = new Transaction(doc, \"Create Radial Dimension\"))\n{\n    t.Start();\n    Wall curvedWall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.Location is LocationCurve && (w.Location as LocationCurve).Curve is Arc);\n    View activeView = doc.ActiveView;\n\n    if (curvedWall != null && activeView != null)\n    {\n        LocationCurve locCurve = curvedWall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Arc arc = locCurve.Curve as Arc;\n            if (arc != null)\n            {\n                ReferenceArray refArray = new ReferenceArray();\n                refArray.Append(arc.Reference);\n                doc.Create.NewDimension(activeView, Line.CreateBound(arc.Center, arc.GetEndPoint(0)), refArray);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 93' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Coloca pilares en todos los cruces de la rejilla.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Crea un DirectShape esférico con un radio de 5 metros.","completion":"using (Transaction t = new Transaction(doc, \"Create Sphere DirectShape\"))\n{\n    t.Start();\n    double radius = 5 \/ 0.3048;\n    List<GeometryObject> solids = new List<GeometryObject>();\n    Frame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\n    Arc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\n    Line line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\n    Solid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\n    solids.Add(sphere);\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\n    if (ds != null)\n    {\n        ds.SetShape(solids);\n        ds.Name = \"Esfera DirectShape\";\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo material llamado 'Vidrio Reflectante' y asígnale un color base y una transparencia.","completion":"string materialName = \"Vidrio Reflectante\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Dentro del editor de familias, crea un nuevo plano de referencia horizontal.","completion":"string rpName = \"Plano Horizontal\";\nXYZ start = new XYZ(UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0, 0);\nXYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0);\nXYZ normal = XYZ.BasisY;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = rpName;\n    }\n}"}
{"prompt":"Create a new Ribbon panel named 'My Tools' with a button.","completion":""}
{"prompt":"Fija el elemento seleccionado para que no se mueva.","completion":"UIDocument uidoc = new UIDocument(doc);\nElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\n\nif (selectedId != ElementId.InvalidElementId)\n{\n    Element elementToPin = doc.GetElement(selectedId);\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}
{"prompt":"Crea un tipo de muro 'Muro-Doble' de 32cm y luego crea un muro de ese tipo.","completion":"string newTypeName = \"Muro-Doble\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == newTypeName) as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if(newWallType!=null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if(cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(0.3, UnitTypeId.Meters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nLine wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\nWall.Create(doc, wallCurve, newWallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);"}
{"prompt":"Añade un punto de referencia en las coordenadas (1,2,3) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));"}
{"prompt":"Find all doors on Level 2 that belong to the 'Single-Flush' family.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Single-Flush\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Crea un nuevo tipo de tubería llamado 'Tubería de Acero' con material 'Acero, Carbono'.","completion":"string newTypeName = \"Tubería de Acero\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Acero, Carbono\") as Material;\n\nif (pipeTypeToDuplicate != null && steel != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(steel.Id);\n    }\n}"}
{"prompt":"Find all walls that have no base level assigned.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}
{"prompt":"Pinta la cara interior de los muros exteriores con 'Pintura Blanca'.","completion":"using(Transaction t = new Transaction(doc, \"Paint Walls\"))\n{\n    t.Start();\n    Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Pintura Blanca\");\n    var exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior).ToList();\n    if(paintMaterial != null)\n    {\n        foreach (Wall w in exteriorWalls)\n        {\n            IList<Reference> interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n            if(interiorFaceRefs.Count > 0)\n            {\n                Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n                if (interiorFace != null)\n                {\n                    doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a section view between points (0,0,0) and (10,10,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Obtén todas las instancias de la categoría Mobiliario.","completion":"List<Element> furnitureInstances = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToList();"}
{"prompt":"Hide the selected elements in the active view.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToHide = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToHide.Count > 0)\n{\n    activeView.HideElements(idsToHide);\n}"}
{"prompt":"Genera un reporte con el área de todas las habitaciones del proyecto.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}
{"prompt":"Cambia el nombre de todas las familias cargadas que contengan 'Métrica' a 'Imperial'.","completion":"List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Métrica\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"Métrica\", \"Imperial\");\n}"}
{"prompt":"Obtén el elemento anfitrión de la primera ventana que encuentres.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}
{"prompt":"Create a global length parameter named 'CorridorWidth' with a value of 1m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)));\n}"}
{"prompt":"Oculta todos los elementos de anotación en la vista activa.","completion":"if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}
{"prompt":"Model a railing on an existing staircase.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Hide all walls shorter than 2 meters.","completion":"double lengthThreshold = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nList<ElementId> shortWallIds = new List<ElementId>();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    foreach(Wall wall in walls)\n    {\n        Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n        if(lengthParam != null && lengthParam.HasValue && lengthParam.AsDouble() < lengthThreshold)\n        {\n            shortWallIds.Add(wall.Id);\n        }\n    }\n    if (shortWallIds.Count > 0)\n    {\n        activeView.HideElements(shortWallIds);\n    }\n}"}
{"prompt":"Asigna todos los muros al workset 'Estructura'.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if (doc.IsWorkshared)\n    {\n        Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w => w.Name == \"Estructura\");\n        if (ws != null)\n        {\n            FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n            foreach (Element e in collector)\n            {\n                Parameter p = e.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(ws.Id.IntegerValue);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a Path of Travel between points (1,1) and (10,10) in the plan view.","completion":"\/\/ PathOfTravel.Create is likely inaccessible in this environment.\n\/\/ A comment is left as a placeholder for the intended functionality.\n\/*\nusing (Transaction t = new Transaction(doc, \"Create Path of Travel\"))\n{\n    t.Start();\n    ViewPlan viewPlan = doc.ActiveView as ViewPlan;\n\n    if (viewPlan != null && viewPlan.ViewType == ViewType.FloorPlan)\n    {\n        ElementId levelId = viewPlan.get_Parameter(BuiltInParameter.PLAN_VIEW_LEVEL).AsElementId();\n        Level level = doc.GetElement(levelId) as Level;\n        if (level != null)\n        {\n            XYZ startPoint = new XYZ(1 \/ 0.3048, 1 \/ 0.3048, level.Elevation);\n            XYZ endPoint = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, level.Elevation);\n            \/\/ PathOfTravel.Create(viewPlan, startPoint, endPoint);\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Obtén una lista de todas las vistas de planta del proyecto.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}
{"prompt":"Find all section views in the project.","completion":"List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}
{"prompt":"Get a list of all annotation families.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Importa una topografía desde un archivo CSV.","completion":"using (Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    \/\/ CSV file reading is not directly supported by a single API call.\n    \/\/ You would typically read the file line by line, parse the XYZ coordinates,\n    \/\/ and then use the TopographySurface.Create method with a list of points.\n    \/\/ As a placeholder, here's how to create a simple topography from a list of points:\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(10, 0, 0));\n    points.Add(new XYZ(0, 10, 0));\n    points.Add(new XYZ(10, 10, 5));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Obtén una lista de todas las familias y sus tipos.","completion":"List<string> familyAndTypeNames = new List<string>();\nList<Family> families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().ToList();\nforeach (Family fam in families)\n{\n    familyAndTypeNames.Add($\"Familia: {fam.Name}\");\n    foreach (ElementId symbolId in fam.GetFamilySymbolIds())\n    {\n        FamilySymbol sym = doc.GetElement(symbolId) as FamilySymbol;\n        if (sym != null)\n        {\n            familyAndTypeNames.Add($\"\\tTipo: {sym.Name}\");\n        }\n    }\n}"}
{"prompt":"Add a point to the selected Path of Travel.","completion":"\/\/ PathOfTravel related methods like GetPath and Update are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select a Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint);\n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Create beams between horizontally aligned columns.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Select all walls on 'Level 2' and change their comment to 'REVIEW INSULATION'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif (level2 != null)\n{\n    List<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\n    foreach(Wall wall in wallsOnLevel2)\n    {\n        Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentParam != null && !commentParam.IsReadOnly)\n        {\n            commentParam.Set(\"REVIEW INSULATION\");\n        }\n    }\n}"}
{"prompt":"Get a list of all material names.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Create a new door type named 'FR-89 Door' and set its fire rating to '95 min'.","completion":"string newTypeName = \"FR-90 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = null;\nif (doorTypeToDuplicate != null)\n{\n    newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"90 min\");\n        }\n    }\n}"}
{"prompt":"Create a new A3 sheet and place a legend on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra todas las colisiones entre tuberías y vigas.","completion":"ICollection<ElementId> pipeIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WhereElementIsNotElementType().ToElementIds();\nICollection<ElementId> beamIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().ToElementIds();\n\nif(pipeIds.Count > 0 && beamIds.Count > 0)\n{\n    List<ElementFilter> beamFilters = new List<ElementFilter>();\n    foreach(ElementId beamId in beamIds)\n    {\n        Element beam = doc.GetElement(beamId);\n        if(beam != null) beamFilters.Add(new ElementIntersectsElementFilter(beam));\n    }\n    LogicalOrFilter clashFilter = new LogicalOrFilter(beamFilters);\n    ICollection<ElementId> clashingPipeIds = new FilteredElementCollector(doc, pipeIds).WherePasses(clashFilter).ToElementIds();\n    \/\/ clashingPipeIds contiene los IDs de los elementos en colisión, la selección\/visualización es externa.\n}"}
{"prompt":"Crea un nuevo material llamado 'Vidrio Reflectante' y asígnale un color base.","completion":"string materialName = \"Vidrio Reflectante\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240); \/\/ Un color azulado claro para el vidrio\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Find all walls that have no base level assigned.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Crea una abertura rectangular en un suelo.","completion":"using (Transaction t = new Transaction(doc, \"Create Opening\"))\n{\n    t.Start();\n    Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\n\n    if (floor != null)\n    {\n        XYZ p1 = new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(3 \/ 0.3048, 1 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(3 \/ 0.3048, 3 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(1 \/ 0.3048, 3 \/ 0.3048, 0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1, p2));\n        profile.Append(Line.CreateBound(p2, p3));\n        profile.Append(Line.CreateBound(p3, p4));\n        profile.Append(Line.CreateBound(p4, p1));\n        doc.Create.NewOpening(floor, profile, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Etiqueta todas las habitaciones con su área.","completion":"using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint loc = room.Location as LocationPoint;\n            if(loc != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(loc.Point.X, loc.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Rota el norte del proyecto 34 grados en sentido horario.","completion":"using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInDegrees = 30.0;\n        double angleInRadians = -(angleInDegrees * Math.PI \/ 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Alinea la cara de un muro con la cara de otro.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara de destino (estática)\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara a mover\");\nView activeView = doc.ActiveView;\n\nif (ref1 != null && ref2 != null && activeView != null)\n{\n    doc.Create.NewAlignment(activeView, ref1, ref2);\n}"}
{"prompt":"Obtén una lista de los nombres de todos los materiales.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Crea un muro cortina de 6 metros de ancho y 4 metros de alto.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Assign the 'Steel' material to the first layer of a wall type.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"Steel\"));\n\n    if (wallType != null && steel != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, steel.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a vertical shaft opening from the base level to the top level.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(2 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(2 \/ 0.3048, 5 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Selecciona todos los muros del 'Nivel 2' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nList<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\nforeach(Wall wall in wallsOnLevel2)\n{\n    wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(\"REVISAR AISLAMIENTO\");\n}"}
{"prompt":"Temporarily isolate the Doors category in the active view.","completion":"ElementId doorCategoryId = new ElementId(BuiltInCategory.OST_Doors);\nICollection<ElementId> categoryIds = new List<ElementId> { doorCategoryId };\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateCategoriesTemporary(categoryIds);\n}"}
{"prompt":"Encuentra todas las puertas del Nivel 2 que sean de la familia 'Puerta Sencilla'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Puerta Sencilla\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Create a structural column at position X=12, Y=5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Crea 9 ejes horizontales separados por 10 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea una copia de la vista activa y nómbrala 'Copia de Trabajo'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"Copia de Trabajo\";\n    }\n}"}
{"prompt":"Get a list of all material names.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Create a 34cm 'Double-Wall' type and then generate a wall of that type.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Double-Wall\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new elevation view looking south.","completion":"using (Transaction t = new Transaction(doc, \"Create South Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 0);\n            if (aev != null)\n            {\n                aev.Name = \"South Elevation\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new door type named 'FR-91 Door' and set its fire rating to '86 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"FR-90 Door\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una nota de texto con un texto, una ubicación y un elemento de destino dados.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"REVISAR CLASH\", opts);\n        if (note != null)\n        {\n            note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L).End = targetRef.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Rota el elemento dado 45 grados alrededor de su centro.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n            double angle = 45 * Math.PI \/ 180.0;\n            ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n        }\n    }\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-98' y establece su resistencia al fuego a '98 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Puerta RF-90\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Alinea las líneas de centro de dos muros seleccionados por el usuario.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer muro (el que se moverá)\");\nReference r2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo muro (el de referencia)\");\n\nif (r1 != null && r2 != null)\n{\n    Wall w1 = doc.GetElement(r1) as Wall;\n    Wall w2 = doc.GetElement(r2) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (w1 != null && w2 != null && activeView != null)\n    {\n        LocationCurve lc1 = w1.Location as LocationCurve;\n        LocationCurve lc2 = w2.Location as LocationCurve;\n        if (lc1 != null && lc2 != null)\n        {\n            doc.Create.NewAlignment(activeView, lc1.Curve.Reference, lc2.Curve.Reference);\n        }\n    }\n}"}
{"prompt":"Get all rooms on Level 3.","completion":"Level level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nList<Element> roomsOnLevel3 = new List<Element>();\n\nif (level3 != null)\n{\n    roomsOnLevel3 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level3.Id).ToList();\n}"}
{"prompt":"Crea una vista de sección usando una caja de 10x10x3 metros.","completion":"ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\n\nif (sectionVFT != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(0,0,0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior\");\n\nif (selectedIds.Count > 0 && targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n    }\n}"}
{"prompt":"Genera una cuadrícula de columnas 4x5 con separación de 7 metros.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Calculate the total length of all Supply Air ducts.","completion":"List<Duct> ducts = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctCurves).WhereElementIsNotElementType().Cast<Duct>().Where(d => d.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString() == \"SupplyAir\").ToList();\ndouble totalLength = 0.0;\nforeach (Duct d in ducts)\n{\n    totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}"}
{"prompt":"Create a new room on Level 1 at point (11, 10).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters));\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Check if a pipe is connected at both ends.","completion":"Pipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nbool isFullyConnected = false;\n\nif (pipe != null)\n{\n    isFullyConnected = pipe.ConnectorManager.UnusedConnectors.IsEmpty;\n}\n"}
{"prompt":"Crea un nuevo nivel llamado 'Planta Sótano' a una elevación de -5 metros.","completion":"string levelName = \"Planta Sótano\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Calcula el área total de todas las habitaciones.","completion":"double totalArea = 0.0;\nList<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nforeach (Room room in rooms)\n{\n    totalArea += room.Area;\n}"}
{"prompt":"Create a new door type named 'FR-98 Door' and set its fire rating to '84 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"FR-90 Door\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Import a georeferenced survey from a LandXML file.","completion":"\/\/ The Revit API in the provided context does not support direct LandXML import.\n\/\/ This functionality typically requires additional add-ins like the Site Designer, which are not available here.\n\/\/ As a placeholder, this code will show how to create a simple topography surface from a list of points.\nusing(Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(50, 0, 5));\n    points.Add(new XYZ(0, 50, 10));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Select all walls on 'Level 2' and change their comment to 'REVIEW INSULATION'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif (level2 != null)\n{\n    List<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\n    foreach(Wall wall in wallsOnLevel2)\n    {\n        Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentParam != null && !commentParam.IsReadOnly)\n        {\n            commentParam.Set(\"REVIEW INSULATION\");\n        }\n    }\n}"}
{"prompt":"Duplica el nivel 1 con un desfase de 3m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Create a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"FR-90 Door\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a floor with a circular hole in the center.","completion":"using (Transaction t = new Transaction(doc, \"Create Floor with Hole\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\n    if (level != null && floorType != null)\n    {\n        XYZ p1 = new XYZ(-10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(-10 \/ 0.3048, 10 \/ 0.3048, 0);\n        CurveLoop outerLoop = new CurveLoop();\n        outerLoop.Append(Line.CreateBound(p1, p2));\n        outerLoop.Append(Line.CreateBound(p2, p3));\n        outerLoop.Append(Line.CreateBound(p3, p4));\n        outerLoop.Append(Line.CreateBound(p4, p1));\n\n        XYZ center = XYZ.Zero;\n        double radius = 2 \/ 0.3048;\n        CurveLoop innerLoop = new CurveLoop();\n        innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n        innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n        Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Permite al usuario seleccionar un muro y obtén su ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Create a structural beam between (0,0,3) and (5,0,3) on Level 2.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Muestra un cuadro de diálogo con las opciones 'Sí', 'No' y 'Cancelar'.","completion":""}
{"prompt":"Copia todos los elementos del Nivel 1 al Nivel 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\n\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if (elementsToCopy.Count > 0)\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Crea una región rellena con un patrón de 'Concreto'.","completion":"using (Transaction t = new Transaction(doc, \"Create Filled Region\"))\n{\n    t.Start();\n    FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\") || frt.Name.Contains(\"Concreto\"));\n    View activeView = doc.ActiveView;\n\n    if (regionType != null && activeView != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 0,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(0, 5 \/ 0.3048,0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n    }\n    t.Commit();\n}"}
{"prompt":"Insert a window 1m wide and 1m high into a wall.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original y asegura un nombre único\n    string newTypeName = $\"Window {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters), UnitTypeId.Meters)}m x {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitTypeId.Meters)}m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Set the sill height of all windows to 900mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Find all walls taller than 4 meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Create a new material named 'Reflective Glass' and assign it a base color.","completion":"string materialName = \"Reflective Glass\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240); \/\/ A light bluish color for glass\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Exporta cada tabla de planificación a un archivo CSV individual.","completion":"string exportPath = \"C:\/RevitExports\/\";\nList<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => !vs.IsTemplate).ToList();\nViewScheduleExportOptions options = new ViewScheduleExportOptions();\noptions.FieldDelimiter = \",\";\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Export(exportPath, schedule.Name + \".csv\", options);\n}"}
{"prompt":"Unjoin the geometry of two given elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first element\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second element\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}
{"prompt":"Align the centerlines of two user-selected walls.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first wall (the one that will move)\");\nReference r2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second wall (the reference)\");\n\nif (r1 != null && r2 != null)\n{\n    Wall w1 = doc.GetElement(r1) as Wall;\n    Wall w2 = doc.GetElement(r2) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (w1 != null && w2 != null && activeView != null)\n    {\n        LocationCurve lc1 = w1.Location as LocationCurve;\n        LocationCurve lc2 = w2.Location as LocationCurve;\n        if (lc1 != null && lc2 != null)\n        {\n            doc.Create.NewAlignment(activeView, lc1.Curve.Reference, lc2.Curve.Reference);\n        }\n    }\n}"}
{"prompt":"Etiqueta todas las habitaciones con su área.","completion":"using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint loc = room.Location as LocationPoint;\n            if(loc != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(loc.Point.X, loc.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Crea una nota de texto con una flecha apuntando a un elemento y una ubicación dadas.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference target = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para anotar\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (target != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        opts.HorizontalAlignment = HorizontalTextAlignment.Left;\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"Revisar este elemento\", opts);\n        if (note != null)\n        {\n            Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n            leader.End = target.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea 5 worksets para las disciplinas de ingeniería.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Check if the active view is a plan view.","completion":"View activeView = doc.ActiveView;\nbool isPlanView = false;\n\nif (activeView != null)\n{\n    isPlanView = activeView.ViewType == ViewType.FloorPlan \n                 || activeView.ViewType == ViewType.CeilingPlan \n                 || activeView.ViewType == ViewType.AreaPlan \n                 || activeView.ViewType == ViewType.EngineeringPlan;\n}\n"}
{"prompt":"Activate all family symbols loaded in the project.","completion":"List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) \n    {\n        sym.Activate();\n    }\n}"}
{"prompt":"Crea un sistema de vigas en un forjado seleccionado.","completion":""}
{"prompt":"Crea una nueva tabla de planificación para Pilares Estructurales.","completion":"string scheduleName = \"Tabla de Pilares Estructurales\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Obtén todas las subcategorías de la categoría Muros.","completion":"Category wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategoryNameMap subcategories = wallCat.SubCategories;"}
{"prompt":"Open a family, add a type parameter 'Material Code', and save it.","completion":""}
{"prompt":"Ajusta todas las ventanas para que la altura del antepecho sea 1 metro.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a 5x5 column grid with 8-meter spacing.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Rellena el parámetro de material de todos los muros con 'Concreto'.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concreto\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Find all walls taller than 5 meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Create a shaft opening that passes through from Level 1 to Level 3.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft Opening\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 3\");\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p2 = new XYZ(8 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p3 = new XYZ(8 \/ 0.3048, 8 \/ 0.3048,0);\n        XYZ p4 = new XYZ(5 \/ 0.3048, 8 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new shared text project parameter named 'Additional Notes' for walls and doors.","completion":"using (Transaction t = new Transaction(doc, \"Create Shared Parameter\"))\n{\n    t.Start();\n    string paramName = \"Additional Notes\";\n    string originalFile = doc.Application.SharedParametersFilename;\n    string tempFile = System.IO.Path.GetTempFileName() + \".txt\";\n    using (System.IO.File.Create(tempFile)) { }\n    doc.Application.SharedParametersFilename = tempFile;\n\n    try\n    {\n        DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n        if (defFile != null)\n        {\n            DefinitionGroup group = defFile.Groups.Create(\"General\");\n            if (group != null)\n            {\n                ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(paramName, ParameterType.Text);\n                Definition definition = group.Definitions.Create(options);\n                if (definition != null)\n                {\n                    CategorySet categories = doc.Application.Create.NewCategorySet();\n                    categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                    categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                    InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                    doc.ParameterBindings.Insert(definition, binding, Autodesk.Revit.DB.BuiltInParameterGroup.PG_DATA);\n                }\n            }\n        }\n    }\n    finally\n    {\n        doc.Application.SharedParametersFilename = originalFile;\n        System.IO.File.Delete(tempFile);\n        t.Commit();\n    }\n}"}
{"prompt":"Exporta el modelo a formato IFC5 para coordinación.","completion":"string folderPath = \"C:\/RevitExports\/\";\nstring fileName = doc.Title + \"-Coordination.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Set the sill height of all windows to 787mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(787, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Create a section view named 'Longitudinal Section'.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-1, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    \n    if (sectionView != null)\n    {\n        sectionView.Name = \"Longitudinal Section\";\n    }\n}"}
{"prompt":"Crea una nueva tabla de planificación para ventanas que incluya Marca de Tipo, Ancho y Alto.","completion":"string scheduleName = \"Tabla de Ventanas\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}
{"prompt":"Dibuja una pared de 5m de largo por 3m de altura.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"string newLevelName = \"Mezzanine\";\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Nivel 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Nivel 2\");\nif (lvl1 != null && lvl2 != null)\n{\ndouble midElevation = (lvl1.ProjectElevation + lvl2.ProjectElevation) \/ 2.0;\nLevel newLevel = Level.Create(doc, midElevation);\n    if(newLevel != null)\n    {\nnewLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Crea una superficie topográfica a partir de una lista de 4 puntos.","completion":"IList<XYZ> points = new List<XYZ>\n{\n    new XYZ(0, 0, 0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters))\n};\nTopographySurface.Create(doc, points);"}
{"prompt":"Calcula la longitud total de todos los ductos de Suministro de Aire.","completion":"List<Duct> ducts = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctCurves).WhereElementIsNotElementType().Cast<Duct>().Where(d => d.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString() == \"SupplyAir\").ToList();\ndouble totalLength = 0.0;\nforeach (Duct d in ducts)\n{\n    totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}"}
{"prompt":"Exporta todas las hojas de un conjunto a un único PDF.","completion":"ViewSheetSet sheetSet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheetSet)).FirstOrDefault() as ViewSheetSet;\n\nif (sheetSet != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    PDFExportOptions options = new PDFExportOptions();\n    options.Combine = true;\n    options.FileName = sheetSet.Name;\n    List<ElementId> sheetIds = sheetSet.Views.Cast<ViewSheet>().Select(s => s.Id).ToList();\n    doc.Export(folderPath, sheetIds, options);\n}"}
{"prompt":"Place a piece of furniture at coordinates (2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), furnitureSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Obtén una lista de todas las vistas de planta del proyecto.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}
{"prompt":"Fija el elemento seleccionado para que no se mueva.","completion":"UIDocument uidoc = new UIDocument(doc);\nElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\n\nif (selectedId != ElementId.InvalidElementId)\n{\n    Element elementToPin = doc.GetElement(selectedId);\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}
{"prompt":"Add a point to the selected Path of Travel.","completion":"\/\/ PathOfTravel related methods like GetPath and Update are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select a Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint);\n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Crea un nuevo nivel llamado 'Planta Sótano' a una elevación de -5 metros.","completion":"string levelName = \"Planta Sótano\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Add a horizontal reference plane named 'Centerline A'.","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"Centerline A\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de cota lineal con texto azul y tamaño 2mm.","completion":"using (Transaction t = new Transaction(doc, \"Create Dimension Type\"))\n{\n    t.Start();\n    string newTypeName = \"Cota Azul 2mm\";\n    DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\n    if (linearDimType != null)\n    {\n        DimensionType newDimType = linearDimType.Duplicate(newTypeName) as DimensionType;\n        if (newDimType != null)\n        {\n            Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n            Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(2 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a rectangular opening in a floor.","completion":"using (Transaction t = new Transaction(doc, \"Create Opening\"))\n{\n    t.Start();\n    Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\n\n    if (floor != null)\n    {\n        XYZ p1 = new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(3 \/ 0.3048, 1 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(3 \/ 0.3048, 3 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(1 \/ 0.3048, 3 \/ 0.3048, 0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1, p2));\n        profile.Append(Line.CreateBound(p2, p3));\n        profile.Append(Line.CreateBound(p3, p4));\n        profile.Append(Line.CreateBound(p4, p1));\n        doc.Create.NewOpening(floor, profile, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Find all clashes between pipes and beams.","completion":"ICollection<ElementId> pipeIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WhereElementIsNotElementType().ToElementIds();\nICollection<ElementId> beamIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().ToElementIds();\n\nif(pipeIds.Count > 0 && beamIds.Count > 0)\n{\n    List<ElementFilter> beamFilters = new List<ElementFilter>();\n    foreach(ElementId beamId in beamIds)\n    {\n        Element beam = doc.GetElement(beamId);\n        if(beam != null) beamFilters.Add(new ElementIntersectsElementFilter(beam));\n    }\n    LogicalOrFilter clashFilter = new LogicalOrFilter(beamFilters);\n    ICollection<ElementId> clashingPipeIds = new FilteredElementCollector(doc, pipeIds).WherePasses(clashFilter).ToElementIds();\n    \/\/ clashingPipeIds contains the IDs of clashing elements; selection\/display is external.\n}"}
{"prompt":"Añade refuerzo a una columna.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    \/\/ Para simplificar, asume que la columna tiene una LocationPoint y una Transform válida.\n    \/\/ Para mayor robustez, se podría validar column.Location y column.GetTransform().\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Create a structural beam between (0,0,2) and (4,0,4) on Level 2.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters));\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Crea un nuevo tipo de tubería con material de Cobre.","completion":"string newTypeName = \"Tubería de Cobre\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial copper = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Copper\") || m.Name.Contains(\"Cobre\")) as Material;\n\nif (pipeTypeToDuplicate != null && copper != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(copper.Id);\n    }\n}"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 89'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Create a 25cm 'Double-Wall' type and then build a wall of that type.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Double-Wall\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un filtro de vista para ocultar muros demolidos.","completion":"using (Transaction t = new Transaction(doc, \"Create Demolition Filter\"))\n{\n    t.Start();\n    Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p => p.Name.Contains(\"Demolished\") || p.Name.Contains(\"Demolición\"));\n    View activeView = doc.ActiveView;\n\n    if (demolishedPhase != null && activeView != null)\n    {\n        ElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\n        FilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\n        ElementFilter filter = new ElementParameterFilter(rule);\n        ICollection<ElementId> categories = new List<ElementId>{ new ElementId(BuiltInCategory.OST_Walls) };\n        ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Filtro Demolición\", categories, filter);\n        \n        if (pfe != null)\n        {\n            activeView.AddFilter(pfe.Id);\n            activeView.SetFilterVisibility(pfe.Id, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Select all walls on 'Level 2' and change their comment to 'REVIEW INSULATION'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nList<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\nforeach(Wall wall in wallsOnLevel2)\n{\n    wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(\"REVIEW INSULATION\");\n}"}
{"prompt":"Obtén una lista de todas las advertencias del proyecto.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\n"}
{"prompt":"Crea un espacio MEP para cada habitación en el Nivel 1.","completion":"using (Transaction t = new Transaction(doc, \"Create MEP Spaces\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n\n    if (level1 != null)\n    {\n        List<Room> roomsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level1.Id)).Cast<Room>().ToList();\n        foreach(Room room in roomsOnLevel1)\n        {\n           \/\/ The direct creation of MEP spaces from rooms might not be available in this specific API version.\n           \/\/ Placeholder comment for the intended logic.\n           \/\/ Space.Create(doc, room, null);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new 22cm wall type named 'Structural Wall 28cm'.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Structural Wall 25cm\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (wallTypeToDuplicate != null)\n    {\n        WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n            cs.SetLayerWidth(coreLayerIndex, 0.25 \/ 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Añade montantes a todas las líneas de rejilla de un muro cortina.","completion":"using (Transaction t = new Transaction(doc, \"Add Mullions\"))\n{\n    t.Start();\n    Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\n    MullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\n\n    if (curtainWall != null && mullionType != null)\n    {\n        CurtainGrid grid = curtainWall.CurtainGrid;\n        if (grid != null)\n        {\n            foreach (ElementId gridLineId in grid.GetVGridLineIds())\n            {\n                CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n                if(line != null) line.AddMullions(mullionType, false);\n            }\n            foreach (ElementId gridLineId in grid.GetUGridLineIds())\n            {\n                CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n                if(line != null) line.AddMullions(mullionType, false);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Alinea las líneas de centro de dos muros seleccionados por el usuario.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer muro (el que se moverá)\");\nReference r2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo muro (el de referencia)\");\n\nif (r1 != null && r2 != null)\n{\n    Wall w1 = doc.GetElement(r1) as Wall;\n    Wall w2 = doc.GetElement(r2) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (w1 != null && w2 != null && activeView != null)\n    {\n        LocationCurve lc1 = w1.Location as LocationCurve;\n        LocationCurve lc2 = w2.Location as LocationCurve;\n        if (lc1 != null && lc2 != null)\n        {\n            doc.Create.NewAlignment(activeView, lc1.Curve.Reference, lc2.Curve.Reference);\n        }\n    }\n}"}
{"prompt":"Model a cable tray between two points.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (trayType != null && level != null)\n{\n    XYZ p1 = new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters)); \n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}
{"prompt":"Cambia el nivel de detalle de la vista actual a 'Bajo'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Coarse;\n}"}
{"prompt":"Get all door families loaded in the project.","completion":"List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Encuentra todas las familias de anotación y cuenta cuántas hay.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\nint count = annotationFamilies.Count;\n"}
{"prompt":"Crea una vista 4D orientada desde el sureste.","completion":"string viewName = \"Vista 3D Sureste\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}
{"prompt":"Add a tag to the column closest to the origin.","completion":"using (Transaction t = new Transaction(doc, \"Tag Column\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n        LocationPoint lp = c.Location as LocationPoint;\n        return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n    }).FirstOrDefault();\n\n    if (activeView != null && column != null)\n    {\n        LocationPoint loc = column.Location as LocationPoint;\n        if (loc != null)\n        {\n            IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un workset llamado 'Estructura'.","completion":"string wsName = \"Estructura\";\nWorkset newWorkset = Workset.Create(doc, wsName);\n"}
{"prompt":"Create a new Level named 'Level 4' at an elevation of 12 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 4\";\n}"}
{"prompt":"Verifica si una tubería está conectada en ambos extremos.","completion":"Pipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nbool isFullyConnected = false;\n\nif (pipe != null)\n{\n    isFullyConnected = pipe.ConnectorManager.UnusedConnectors.IsEmpty;\n}\n"}
{"prompt":"Modela una bandeja de cables entre dos puntos.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(trayType != null && level != null)\n{\n    XYZ start = new XYZ(0,10,3);\n    XYZ end = new XYZ(15,10,3);\n    CableTray.Create(doc, trayType.Id, start, end, level.Id);\n}"}
{"prompt":"Find all doors on Level 2 that belong to the 'Single-Flush' family.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Single-Flush\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Export a list of all project warnings to a text file on the desktop.","completion":"string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nstring filePath = System.IO.Path.Combine(desktopPath, \"RevitWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\nSystem.IO.File.WriteAllLines(filePath, warningDescriptions);"}
{"prompt":"Crea un grupo de detalles con los elementos de detalle seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Detalle Típico 1\";\n        }\n    }\n}"}
{"prompt":"Encuentra todas las puertas del Nivel 2 que sean de la familia 'Puerta Sencilla'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Puerta Sencilla\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Crea una nueva hoja A3 y colócale una leyenda.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén una lista de los nombres de todos los materiales.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Define a view filter to hide detail lines.","completion":"string filterName = \"Hide Detail Lines\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection<ElementId> catsToHide = new List<ElementId>{new ElementId(BuiltInCategory.OST_Lines)};\n    ElementFilter filter = new ElementCategoryFilter(new ElementId(BuiltInCategory.OST_Lines));\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, filterName, catsToHide, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}
{"prompt":"Crea un suelo con un hueco circular en el centro.","completion":"using (Transaction t = new Transaction(doc, \"Create Floor with Hole\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\n    if (level != null && floorType != null)\n    {\n        XYZ p1 = new XYZ(-10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(-10 \/ 0.3048, 10 \/ 0.3048, 0);\n        CurveLoop outerLoop = new CurveLoop();\n        outerLoop.Append(Line.CreateBound(p1, p2));\n        outerLoop.Append(Line.CreateBound(p2, p3));\n        outerLoop.Append(Line.CreateBound(p3, p4));\n        outerLoop.Append(Line.CreateBound(p4, p1));\n\n        XYZ center = XYZ.Zero;\n        double radius = 2 \/ 0.3048;\n        CurveLoop innerLoop = new CurveLoop();\n        innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n        innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n        Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un circuito eléctrico conectando luminarias a un panel.","completion":"using (Transaction t = new Transaction(doc, \"Create Electrical Circuit\"))\n{\n    t.Start();\n    FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n    List<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\n    if (panel != null && fixtureIds.Count > 0)\n    {\n        ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n        if(electricalSystem != null)\n        {\n            electricalSystem.SelectPanel(panel);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Exporta el documento a un archivo IFC con la versión IFC4x3.","completion":"string folderPath = \"C:\/RevitExports\/\";\nstring fileName = doc.Title + \"_IFC4x3.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4x3;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Change the detail level of the active view to 'Medium'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Medium;\n}"}
{"prompt":"Crea una nueva vista de alzado mirando al norte.","completion":"using (Transaction t = new Transaction(doc, \"Create North Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 2);\n            if (aev != null)\n            {\n                aev.Name = \"Alzado Norte\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén todas las familias de puertas cargadas en el proyecto.","completion":"List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Load the 'Table.rfa' family and place it at (5,5,0) on Level 1.","completion":"string familyPath = \"C:\/Common\/Paths\/Table.rfa\";\nFamily tableFamily = null;\nbool familyLoaded = doc.LoadFamily(familyPath, out tableFamily);\n\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (familyLoaded && tableFamily != null && level1 != null)\n{\n    FamilySymbol tableSymbol = doc.GetElement(tableFamily.GetFamilySymbolIds().FirstOrDefault()) as FamilySymbol;\n    if (tableSymbol != null)\n    {\n        if (!tableSymbol.IsActive) tableSymbol.Activate();\n        XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\n        doc.Create.NewFamilyInstance(point, tableSymbol, level1, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create beams between horizontally aligned columns.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Añade un punto al Path of Travel seleccionado.","completion":"\/\/ PathOfTravel related methods like GetPath and Update are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint); \n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Place all selected elements on the 'Facade' workset.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Facade\");\n        if(workset == null) workset = Workset.Create(doc, \"Facade\");\n\n        if (selectedIds != null && selectedIds.Count > 0 && workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null && !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca pilares en todos los cruces de la rejilla.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Crea una dimensión radial para un muro curvo.","completion":"using (Transaction t = new Transaction(doc, \"Create Radial Dimension\"))\n{\n    t.Start();\n    Wall curvedWall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.Location is LocationCurve && (w.Location as LocationCurve).Curve is Arc);\n    View activeView = doc.ActiveView;\n\n    if (curvedWall != null && activeView != null)\n    {\n        LocationCurve locCurve = curvedWall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Arc arc = locCurve.Curve as Arc;\n            if (arc != null)\n            {\n                ReferenceArray refArray = new ReferenceArray();\n                refArray.Append(arc.Reference);\n                doc.Create.NewDimension(activeView, Line.CreateBound(arc.Center, arc.GetEndPoint(0)), refArray);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new wall type 'Generic Wall 300mm' with a thickness of 30cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Generic Wall 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Exporta la vista 3D activa a NWC para Navisworks.","completion":"View3D view3d = doc.ActiveView as View3D;\n\nif (view3d != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    string fileName = view3d.Name + \".nwc\";\n    NavisworksExportOptions options = new NavisworksExportOptions();\n    options.ExportScope = NavisworksExportScope.View;\n    options.ViewId = view3d.Id;\n    doc.Export(folderPath, fileName, options);\n}"}
{"prompt":"Create a roof by footprint on the 'Roof Level'.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Roof Level\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 \/ 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 \/ 0.3048,0,0), new XYZ(20 \/ 0.3048,30 \/ 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 \/ 0.3048,30 \/ 0.3048,0), new XYZ(0,30 \/ 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 \/ 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 149mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 150mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Duplica el tipo de muro 'Basic Wall' y renómbralo.","completion":"string typeToDuplicate = \"Basic Wall\";\nstring newTypeName = \"Basic Wall Copy\";\nWallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==typeToDuplicate);\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(newTypeName) as WallType;\n}"}
{"prompt":"Añade el prefijo 'PLANTA-' a todas las vistas de plano.","completion":"string prefix = \"PLANTA-\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if (view != null)\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Get a list of all project warnings.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\n"}
{"prompt":"Create a structural beam between (0,0,3) and (5,0,3) on Level 2.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Create a new elevation view looking north.","completion":"using (Transaction t = new Transaction(doc, \"Create North Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 2);\n            if (aev != null)\n            {\n                aev.Name = \"North Elevation\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Rotate a selected element 90 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 2.0);"}
{"prompt":"Carga la familia 'Mesa.rfa' y colócala en (5,5,0) en el Nivel 1.","completion":"string familyPath = \"C:\/Rutas\/Comunes\/Mesa.rfa\";\nFamily deskFamily = null;\nbool familyLoaded = doc.LoadFamily(familyPath, out deskFamily);\n\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (familyLoaded && deskFamily != null && level1 != null)\n{\n    FamilySymbol deskSymbol = doc.GetElement(deskFamily.GetFamilySymbolIds().FirstOrDefault()) as FamilySymbol;\n    if (deskSymbol != null)\n    {\n        if (!deskSymbol.IsActive) deskSymbol.Activate();\n        XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\n        doc.Create.NewFamilyInstance(point, deskSymbol, level1, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Select all walls on 'Level 2' and change their comment to 'REVIEW INSULATION'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nList<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\nforeach(Wall wall in wallsOnLevel2)\n{\n    wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(\"REVIEW INSULATION\");\n}"}
{"prompt":"Modela un barandal en una escalera existente.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Exporta la geometría de un elemento seleccionado a un archivo SAT.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para exportar\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        string folderPath = \"C:\/RevitExports\/\";\n        string fileName = elem.Name + \".sat\";\n        SATExportOptions options = new SATExportOptions();\n        doc.Export(folderPath, fileName, new List<ElementId>{elem.Id}, options);\n    }\n}"}
{"prompt":"Crea un muro cortina de 6 metros de ancho y 4 metros de alto.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Get the total length of all walls in the project.","completion":"double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}
{"prompt":"Create a new workset named 'Structure'.","completion":"string wsName = \"Structure\";\nWorkset newWorkset = Workset.Create(doc, wsName);\n"}
{"prompt":"Get all instances of the Furniture category.","completion":"List<Element> furnitureInstances = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToList();"}
{"prompt":"Crea un nuevo nivel llamado 'Mezzanine' a 8 metros de elevación.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 357mm' con un grosor de 29cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Muro Genérico 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca postes de iluminación cada 10m en un camino de 100m.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Abre una familia, añade un parámetro de tipo 'Código de Material' y guárdala.","completion":""}
{"prompt":"Crea una tubería con un diámetro de 150mm.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(150, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Get the 'Walls' schedule and export its data to CSV.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s=>s.Name==\"Walls\");\n\nif (schedule != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(folderPath, \"Walls.csv\", options);\n}"}
{"prompt":"Desune la geometría de dos elementos dados.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer elemento\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo elemento\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}
{"prompt":"Rename the active view to 'Working View'.","completion":"string newName = \"Working View\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Modela una bandeja de cables entre dos puntos.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (trayType != null && level != null)\n{\n    XYZ p1 = new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters)); \n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}
{"prompt":"Create a DirectShape topography from a list of points.","completion":"List<XYZ> points = new List<XYZ>\n{\n    new XYZ(0,0,0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0)\n};\nTessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[0], points[1], points[2]}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[1], points[3], points[2]}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_Topography));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"Topography DirectShape\";\n}"}
{"prompt":"Calculate the total length of all Supply Air ducts.","completion":"List<Duct> ducts = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctCurves).WhereElementIsNotElementType().Cast<Duct>().Where(d => d.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString() == \"SupplyAir\").ToList();\ndouble totalLength = 0.0;\nforeach (Duct d in ducts)\n{\n    totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}"}
{"prompt":"Get the solid geometry of a selected element.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to get its geometry\");\n\nList<Solid> solids = new List<Solid>();\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        Options opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if (geoElem != null)\n        {\n            solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}
{"prompt":"Create a 24x17 meter foundation slab.","completion":"using (Transaction t = new Transaction(doc, \"Create Foundation Slab\"))\n{\n    t.Start();\n    Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    FloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n\n    if (foundationLevel != null && slabType != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(20\/0.3048, 0, 0);\n        XYZ p3 = new XYZ(20\/0.3048, 15\/0.3048, 0);\n        XYZ p4 = new XYZ(0, 15\/0.3048, 0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo parámetro de proyecto compartido de texto llamado 'Notas Adicionales' para muros y puertas.","completion":"using (Transaction t = new Transaction(doc, \"Create Shared Parameter\"))\n{\n    t.Start();\n    string paramName = \"Notas Adicionales\";\n    string originalFile = doc.Application.SharedParametersFilename;\n    string tempFile = System.IO.Path.GetTempFileName() + \".txt\";\n    using (System.IO.File.Create(tempFile)) { }\n    doc.Application.SharedParametersFilename = tempFile;\n\n    try\n    {\n        DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n        if (defFile != null)\n        {\n            DefinitionGroup group = defFile.Groups.Create(\"General\");\n            if (group != null)\n            {\n                ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(paramName, ParameterType.Text);\n                Definition definition = group.Definitions.Create(options);\n                if (definition != null)\n                {\n                    CategorySet categories = doc.Application.Create.NewCategorySet();\n                    categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                    categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                    InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                    doc.ParameterBindings.Insert(definition, binding, Autodesk.Revit.DB.BuiltInParameterGroup.PG_DATA);\n                }\n            }\n        }\n    }\n    finally\n    {\n        doc.Application.SharedParametersFilename = originalFile;\n        System.IO.File.Delete(tempFile);\n        t.Commit();\n    }\n}"}
{"prompt":"Crea columnas en cada intersección de ejes.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Aplica la plantilla de vista 'Plantilla Arquitectónica' a la vista activa.","completion":"View activeView = doc.ActiveView;\nView viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.IsTemplate && v.Name == \"Plantilla Arquitectónica\");\n\nif (activeView != null && viewTemplate != null)\n{\n    activeView.ViewTemplateId = viewTemplate.Id;\n}"}
{"prompt":"Crea un tipo de muro 'Muro-Doble' de 30cm y luego crea un muro de ese tipo.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Muro-Doble\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Model a railing on an existing staircase.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Create a new A2 sheet and place a legend on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Add the 'Level', 'Mark', and 'Volume' fields to the column schedule.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Rename all schedules containing 'Doors' to 'Door Schedule'.","completion":"List<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"Doors\")).ToList();\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"Doors\", \"Door Schedule\");\n}"}
{"prompt":"Get the coordinates of the project base point and the survey point.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}
{"prompt":"Crea un tipo de muro 'Muro-Doble' de 33cm y luego crea un muro de ese tipo.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Muro-Doble\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Mueve los elementos seleccionados 3 metros hacia arriba.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Change the wall type of an existing wall to one containing 'Thermal Insulation'.","completion":"Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(x => x.Name.Contains(\"Thermal Insulation\"));\n\nif (wallToChange != null && newType != null)\n{\n    wallToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Genera ocho rejillas horizontales con una separación de 10m.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Exporta una lista de todas las advertencias del proyecto a un archivo de texto en el escritorio.","completion":"string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nstring filePath = System.IO.Path.Combine(desktopPath, \"RevitWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\nSystem.IO.File.WriteAllLines(filePath, warningDescriptions);"}
{"prompt":"Load a DWG link, preserving its colors.","completion":"string filePath = \"C:\/CAD\/Plans.dwg\";\nDWGImportOptions opts = new DWGImportOptions();\nopts.ColorMode = ImportColorMode.Preserved;\nElementId linkId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(filePath, opts, activeView, out linkId);\n}"}
{"prompt":"Create a new level named 'Basement Floor' at an elevation of -5 meters.","completion":"string levelName = \"Basement Floor\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Exporta el modelo actual a un archivo NWC.","completion":"string folderPath = \"C:\/exports\/\";\nstring fileName = doc.Title + \".nwc\";\nNavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Crea una nueva vista 3D orientada desde el punto (8,10,10) mirando hacia el origen.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v=>v.ViewFamily==ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    if (view != null)\n    {\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D vo = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        view.SetOrientation(vo);\n        view.Name = \"Vista desde (10,10,10)\";\n    }\n}"}
{"prompt":"Create a new A3 sheet and place a legend on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una abertura rectangular en un suelo.","completion":"using (Transaction t = new Transaction(doc, \"Create Opening\"))\n{\n    t.Start();\n    Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\n\n    if (floor != null)\n    {\n        XYZ p1 = new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(3 \/ 0.3048, 1 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(3 \/ 0.3048, 3 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(1 \/ 0.3048, 3 \/ 0.3048, 0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1, p2));\n        profile.Append(Line.CreateBound(p2, p3));\n        profile.Append(Line.CreateBound(p3, p4));\n        profile.Append(Line.CreateBound(p4, p1));\n        doc.Create.NewOpening(floor, profile, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una región rellena con un patrón de 'Concreto'.","completion":"using (Transaction t = new Transaction(doc, \"Create Filled Region\"))\n{\n    t.Start();\n    FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\") || frt.Name.Contains(\"Concreto\"));\n    View activeView = doc.ActiveView;\n\n    if (regionType != null && activeView != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 0,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(0, 5 \/ 0.3048,0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n    }\n    t.Commit();\n}"}
{"prompt":"Place a spot elevation on a given face and view point.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select the top face of the floor\");\n\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && activeView != null)\n    {\n        XYZ pointOnFace = faceRef.GlobalPoint;\n        XYZ leaderEnd = pointOnFace + new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Unjoin the geometry of two given elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first element\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second element\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}
{"prompt":"Crea un muro en el Nivel 1 que vaya de (0,0,0) a (10,0,0) con una altura de 4 metros.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Crea una columna estructural en la posición X=8, Y=5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Cambia el estilo visual de la vista activa a 'Línea Oculta'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}
{"prompt":"Create 4 worksets for engineering disciplines.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Activate all family symbols loaded in the project.","completion":"List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) \n    {\n        sym.Activate();\n    }\n}"}
{"prompt":"Crea un suelo con un hueco circular en el centro.","completion":"using (Transaction t = new Transaction(doc, \"Create Floor with Hole\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\n    if (level != null && floorType != null)\n    {\n        XYZ p1 = new XYZ(-10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(-10 \/ 0.3048, 10 \/ 0.3048, 0);\n        CurveLoop outerLoop = new CurveLoop();\n        outerLoop.Append(Line.CreateBound(p1, p2));\n        outerLoop.Append(Line.CreateBound(p2, p3));\n        outerLoop.Append(Line.CreateBound(p3, p4));\n        outerLoop.Append(Line.CreateBound(p4, p1));\n\n        XYZ center = XYZ.Zero;\n        double radius = 2 \/ 0.3048;\n        CurveLoop innerLoop = new CurveLoop();\n        innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n        innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n        Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Add a reference point at coordinates (1,2,3) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));"}
{"prompt":"Create a new level named 'Mezzanine' at 6 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Create a beam system on a selected floor slab.","completion":""}
{"prompt":"Crea un circuito eléctrico conectando luminarias a un panel.","completion":"using (Transaction t = new Transaction(doc, \"Create Electrical Circuit\"))\n{\n    t.Start();\n    FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n    List<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\n    if (panel != null && fixtureIds.Count > 0)\n    {\n        ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n        if(electricalSystem != null)\n        {\n            electricalSystem.SelectPanel(panel);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a door 1m wide and 2m high in the wall.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original y asegura un nombre único\n    string newTypeName = $\"Door {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitTypeId.Meters)}m x {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitTypeId.Meters)}m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-61' y asigna '57 min' al parámetro 'Fire Rating'.","completion":"string newTypeName = \"Puerta RF-60\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"60 min\");\n    }\n}"}
{"prompt":"Encuentra todos los muros con el comentario 'Revisar'.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Revisar\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Copy all elements from Level 1 to Level 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\n\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if (elementsToCopy.Count > 0)\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Find all views that do not have an assigned view template.","completion":"List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId).ToList();"}
{"prompt":"Apply the 'X-Ray' visual style to the active 3D view.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe; \/\/ Simulates 'X-Ray' effect\n}"}
{"prompt":"Hide all annotation categories in the active view.","completion":"using (Transaction t = new Transaction(doc, \"Hide Annotation Categories\"))\n{\n    t.Start();\n    Categories categories = doc.Settings.Categories;\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        foreach(Category cat in categories)\n        {\n            if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n            {\n                 activeView.SetCategoryHidden(cat.Id, true);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Carga la familia 'Mesa.rfa' y colócala en (5,5,0) en el Nivel 1.","completion":"string familyPath = \"C:\/Rutas\/Comunes\/Mesa.rfa\";\nFamily deskFamily = null;\nbool familyLoaded = doc.LoadFamily(familyPath, out deskFamily);\n\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (familyLoaded && deskFamily != null && level1 != null)\n{\n    FamilySymbol deskSymbol = doc.GetElement(deskFamily.GetFamilySymbolIds().FirstOrDefault()) as FamilySymbol;\n    if (deskSymbol != null)\n    {\n        if (!deskSymbol.IsActive) deskSymbol.Activate();\n        XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\n        doc.Create.NewFamilyInstance(point, deskSymbol, level1, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Crea una viga estructural entre (0,0,3) y (6,0,3) en el Nivel 2.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Assign the 'Steel' material to the first layer of a wall type.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"Steel\"));\n\n    if (wallType != null && steel != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, steel.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un conducto eléctrico de 1 pulgada de diámetro.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ end = new XYZ(5 \/ 0.3048, 0, 3 \/ 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set(1.0\/12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de cota lineal con texto azul y tamaño 2mm.","completion":"using (Transaction t = new Transaction(doc, \"Create Dimension Type\"))\n{\n    t.Start();\n    string newTypeName = \"Cota Azul 2mm\";\n    DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\n    if (linearDimType != null)\n    {\n        DimensionType newDimType = linearDimType.Duplicate(newTypeName) as DimensionType;\n        if (newDimType != null)\n        {\n            Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n            Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(2 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a spherical DirectShape with a 5-meter radius.","completion":"using (Transaction t = new Transaction(doc, \"Create Sphere DirectShape\"))\n{\n    t.Start();\n    double radius = 5 \/ 0.3048;\n    List<GeometryObject> solids = new List<GeometryObject>();\n    Frame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\n    Arc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\n    Line line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\n    Solid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\n    solids.Add(sphere);\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\n    if (ds != null)\n    {\n        ds.SetShape(solids);\n        ds.Name = \"Sphere DirectShape\";\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-60' y asigna '60 min' al parámetro 'Fire Rating'.","completion":"string newTypeName = \"Puerta RF-60\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"60 min\");\n    }\n}"}
{"prompt":"Crea un nivel 'Roof Terrace' a 15m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Export all sheets in a set to a single combined PDF.","completion":"ViewSheetSet sheetSet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheetSet)).FirstOrDefault() as ViewSheetSet;\n\nif (sheetSet != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    PDFExportOptions options = new PDFExportOptions();\n    options.Combine = true;\n    options.FileName = sheetSet.Name;\n    List<ElementId> sheetIds = sheetSet.Views.Cast<ViewSheet>().Select(s => s.Id).ToList();\n    doc.Export(folderPath, sheetIds, options);\n}"}
{"prompt":"Crea un espacio MEP para cada habitación en el Nivel 1.","completion":"using (Transaction t = new Transaction(doc, \"Create MEP Spaces\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n\n    if (level1 != null)\n    {\n        List<Room> roomsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level1.Id)).Cast<Room>().ToList();\n        foreach(Room room in roomsOnLevel1)\n        {\n           \/\/ The direct creation of MEP spaces from rooms might not be available in this specific API version.\n           \/\/ Placeholder comment for the intended logic.\n           \/\/ Space.Create(doc, room, null);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Añade un punto al Path of Travel seleccionado.","completion":"\/\/ PathOfTravel related methods like GetPath and Update are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint); \n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Crea un suelo con un hueco circular en el centro.","completion":"using (Transaction t = new Transaction(doc, \"Create Floor with Hole\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\n    if (level != null && floorType != null)\n    {\n        XYZ p1 = new XYZ(-10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(-10 \/ 0.3048, 10 \/ 0.3048, 0);\n        CurveLoop outerLoop = new CurveLoop();\n        outerLoop.Append(Line.CreateBound(p1, p2));\n        outerLoop.Append(Line.CreateBound(p2, p3));\n        outerLoop.Append(Line.CreateBound(p3, p4));\n        outerLoop.Append(Line.CreateBound(p4, p1));\n\n        XYZ center = XYZ.Zero;\n        double radius = 2 \/ 0.3048;\n        CurveLoop innerLoop = new CurveLoop();\n        innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n        innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n        Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén todas las habitaciones en el Nivel 'Planta Baja'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Planta Baja\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Crea una puerta de 0.9m de ancho y 2.1m de alto en el muro.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original y asegura un nombre único\n    string newTypeName = $\"Door {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters), UnitTypeId.Meters)}m x {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(2.1, UnitTypeId.Meters), UnitTypeId.Meters)}m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(2.1, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Rename the active view to 'Working View'.","completion":"string newName = \"Working View\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Generate a rectangular floor of 9x8 meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Get a list of all annotation families.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Create a new 6mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a text note with a leader pointing to a given element and location.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference target = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (target != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        opts.HorizontalAlignment = HorizontalTextAlignment.Left;\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"Review this element\", opts);\n        if (note != null)\n        {\n            Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n            leader.End = target.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Activa todos los símbolos de familia cargados en el proyecto.","completion":"List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) \n    {\n        sym.Activate();\n    }\n}"}
{"prompt":"Add reinforcement to a column.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Crea un DirectShape esférico con un radio de 4 metros.","completion":"using (Transaction t = new Transaction(doc, \"Create Sphere DirectShape\"))\n{\n    t.Start();\n    double radius = 5 \/ 0.3048;\n    List<GeometryObject> solids = new List<GeometryObject>();\n    Frame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\n    Arc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\n    Line line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\n    Solid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\n    solids.Add(sphere);\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\n    if (ds != null)\n    {\n        ds.SetShape(solids);\n        ds.Name = \"Esfera DirectShape\";\n    }\n    t.Commit();\n}"}
{"prompt":"Añade un punto de referencia en las coordenadas (1,2,3) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));"}
{"prompt":"Crea un nuevo panel en la cinta de opciones llamado 'Mis Herramientas' con un botón.","completion":""}
{"prompt":"Create a SketchPlane on Level 2.","completion":"using (Transaction t = new Transaction(doc, \"Create Sketch Plane\"))\n{\n    t.Start();\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\n    if (level2 != null)\n    {\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, new XYZ(0, 0, level2.Elevation));\n        SketchPlane skp = SketchPlane.Create(doc, plane);\n    }\n    t.Commit();\n}"}
{"prompt":"Desune la geometría de dos elementos dados.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer elemento\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo elemento\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}
{"prompt":"Crea un circuito eléctrico conectando luminarias a un panel.","completion":"using (Transaction t = new Transaction(doc, \"Create Electrical Circuit\"))\n{\n    t.Start();\n    FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n    List<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\n    if (panel != null && fixtureIds.Count > 0)\n    {\n        ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n        if(electricalSystem != null)\n        {\n            electricalSystem.SelectPanel(panel);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}
{"prompt":"Calcula la longitud total de todos los ductos de Suministro de Aire.","completion":"List<Duct> ducts = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctCurves).WhereElementIsNotElementType().Cast<Duct>().Where(d => d.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString() == \"SupplyAir\").ToList();\ndouble totalLength = 0.0;\nforeach (Duct d in ducts)\n{\n    totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}"}
{"prompt":"Model a railing on an existing staircase.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Create a 21x13 meter foundation slab.","completion":"using (Transaction t = new Transaction(doc, \"Create Foundation Slab\"))\n{\n    t.Start();\n    Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    FloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n\n    if (foundationLevel != null && slabType != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(20\/0.3048, 0, 0);\n        XYZ p3 = new XYZ(20\/0.3048, 15\/0.3048, 0);\n        XYZ p4 = new XYZ(0, 15\/0.3048, 0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Dado un muro, obtén los materiales y sus volúmenes.","completion":"UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\n\nDictionary<string, double> materialVolumes = new Dictionary<string, double>();\nif (pickedRef != null)\n{\n    Wall wall = doc.GetElement(pickedRef) as Wall;\n    if (wall != null)\n    {\n        Parameter areaParam = wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED);\n        if (areaParam != null && areaParam.HasValue)\n        {\n            double wallArea = areaParam.AsDouble();\n            WallType wallType = wall.WallType;\n            if (wallType != null)\n            {\n                CompoundStructure cs = wallType.GetCompoundStructure();\n                if (cs != null)\n                {\n                    foreach(CompoundStructureLayer layer in cs.GetLayers())\n                    {\n                        Material material = doc.GetElement(layer.MaterialId) as Material;\n                        if(material != null)\n                        {\n                            double volume = layer.Width * wallArea; \n                            materialVolumes[material.Name] = volume;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Create a structural foundation slab 44cm thick.","completion":"using (Transaction t = new Transaction(doc, \"Create Foundation Slab\"))\n{\n    t.Start();\n    Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    FloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n    if(slabTypeToDuplicate != null && foundationLevel != null)\n    {\n        string newTypeName = \"Foundation Slab 40cm\";\n        FloorType newSlabType = slabTypeToDuplicate.Duplicate(newTypeName) as FloorType;\n        if(newSlabType != null)\n        {\n            CompoundStructure cs = newSlabType.GetCompoundStructure();\n            if (cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 400 \/ 304.8);\n                newSlabType.SetCompoundStructure(cs);\n                XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n                Floor.Create(doc, new List<CurveLoop>{profile}, newSlabType.Id, foundationLevel.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Rellena el parámetro de material de todos los muros con 'Concreto'.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concreto\")) as Material;\nif(concreteMaterial != null)\n{\n    var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Encuentra todos los muros con el comentario 'Revisar'.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Revisar\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Duplica el nivel 1 con un desfase de 3m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Create an assembly from the selected elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"New Assembly\";\n    }\n}"}
{"prompt":"Obtén los IDs de todas las vistas 4D que empiezan con 'Coord' para exportación.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Dimension the length of a user-selected wall.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall to dimension\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 1 a 'Clasificación Fuego - 90 min'.","completion":"using(Transaction t = new Transaction(doc, \"Set Door Comments\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    if(level1 != null)\n    {\n        List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId.Equals(level1.Id)).ToList();\n        foreach(FamilyInstance door in doorsOnLevel1)\n        {\n            Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n            if(commentsParam != null && !commentsParam.IsReadOnly)\n            {\n                commentsParam.Set(\"Clasificación Fuego - 90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a section view between points (0,0,0) and (9,12,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Encuentra todas las puertas del Nivel 2 que sean de la familia 'Puerta Sencilla'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Puerta Sencilla\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Create a DirectShape with a 2x2x2 meter box shape.","completion":"TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"DirectShape Box\";\n}"}
{"prompt":"Crea un tipo de muro 'Muro-Doble' de 30cm y luego crea un muro de ese tipo.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Muro-Doble\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a grid of 5 horizontal and 5 vertical grids, spaced 5 meters apart.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\nint count = 5;\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((count - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Modela un plafón a 3 metros de altura en Nivel 1.","completion":"CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (ceilingType != null && level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,0,0)));\n\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    }\n}"}
{"prompt":"Get the coordinates of the project base point and the survey point.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}
{"prompt":"Create an 8-meter long foundation beam.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, StructuralType.Footing);\n}"}
{"prompt":"Add mullions to all grid lines of a curtain wall.","completion":"using (Transaction t = new Transaction(doc, \"Add Mullions\"))\n{\n    t.Start();\n    Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\n    MullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\n\n    if (curtainWall != null && mullionType != null)\n    {\n        CurtainGrid grid = curtainWall.CurtainGrid;\n        if (grid != null)\n        {\n            foreach (ElementId gridLineId in grid.GetVGridLineIds())\n            {\n                CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n                if(line != null) line.AddMullions(mullionType, false);\n            }\n            foreach (ElementId gridLineId in grid.GetUGridLineIds())\n            {\n                CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n                if(line != null) line.AddMullions(mullionType, false);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una nueva hoja A1 usando el primer cajetín disponible.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"A1 - Nueva Hoja\";\n        sheet.SheetNumber = \"A1\";\n    }\n}"}
{"prompt":"Export each schedule to an individual CSV file.","completion":"string exportPath = \"C:\/RevitExports\/\";\nList<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => !vs.IsTemplate).ToList();\nViewScheduleExportOptions options = new ViewScheduleExportOptions();\noptions.FieldDelimiter = \",\";\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Export(exportPath, schedule.Name + \".csv\", options);\n}"}
{"prompt":"Find all walls taller than 4 meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Crea una viga estructural entre (0,0,3) y (5,0,3) en el Nivel 2.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Obtén los IDs de todas las vistas 3D que empiezan con 'Coord' para exportación.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Apply the 'Architectural Template' view template to the active view.","completion":"View activeView = doc.ActiveView;\nView viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.IsTemplate && v.Name == \"Architectural Template\");\n\nif (activeView != null && viewTemplate != null)\n{\n    activeView.ViewTemplateId = viewTemplate.Id;\n}"}
{"prompt":"Import a CAD file named 'BasePlan.dwg' into the current view.","completion":"string filePath = \"C:\/CAD\/BasePlan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Agrupa una tabla de planificación de habitaciones por Nivel.","completion":"using (Transaction t = new Transaction(doc, \"Group Schedule\"))\n{\n    t.Start();\n    ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(vs => vs.Definition.CategoryId.IntegerValue == (int)BuiltInCategory.OST_Rooms);\n\n    if (schedule != null)\n    {\n        ScheduleDefinition def = schedule.Definition;\n        if (def != null)\n        {\n            SchedulableField schedulableField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ROOM_LEVEL_ID);\n            if (schedulableField != null)\n            {\n                ScheduleField field = def.AddField(schedulableField);\n                ScheduleSortGroupField sortGroupField = new ScheduleSortGroupField(field.FieldId);\n                sortGroupField.ShowHeader = true;\n                def.AddSortGroupField(sortGroupField);\n                def.IsItemized = false;\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a structural foundation slab 43cm thick.","completion":"using (Transaction t = new Transaction(doc, \"Create Foundation Slab\"))\n{\n    t.Start();\n    Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    FloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n    if(slabTypeToDuplicate != null && foundationLevel != null)\n    {\n        string newTypeName = \"Foundation Slab 40cm\";\n        FloorType newSlabType = slabTypeToDuplicate.Duplicate(newTypeName) as FloorType;\n        if(newSlabType != null)\n        {\n            CompoundStructure cs = newSlabType.GetCompoundStructure();\n            if (cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 400 \/ 304.8);\n                newSlabType.SetCompoundStructure(cs);\n                XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n                doc.Create.NewFloor(new List<CurveLoop>{profile}, newSlabType, foundationLevel, true);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una rejilla de 4 ejes horizontales y 5 verticales, espaciados 5 metros.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\nint count = 5;\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((count - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Obtén una lista de todas las advertencias del proyecto.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\n"}
{"prompt":"Rename all loaded families containing 'Metric' to 'Imperial'.","completion":"List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Metric\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"Metric\", \"Imperial\");\n}"}
{"prompt":"Unjoin the geometry of two given elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first element\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second element\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}
{"prompt":"Duplicate the 'Level 1' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 1\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Crea una vista de plano de plafón reflejado para el Nivel 1.","completion":"string levelName = \"Nivel 1\";\nstring viewName = \"Plano de Plafón Nivel 1\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Create a section view between points (0,0,0) and (9,10,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Añade refuerzo a una columna.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get the coordinates of the project base point and the survey point.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}
{"prompt":"Añade los campos 'Nivel', 'Marca' y 'Volumen' a la tabla de pilares.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\") || s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Create a 'Concrete-Rectangular 30x60' column at each grid intersection.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Concrete-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Aísla temporalmente todo el mobiliario en la vista activa.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Create 8 horizontal grids spaced 10 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create a vertical shaft opening from the base level to the top level.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(2 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(2 \/ 0.3048, 5 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Get all door families loaded in the project.","completion":"List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Join the geometry of an intersecting column and floor.","completion":"Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\n\nif (column != null && floor != null)\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}
{"prompt":"Genera un reporte con el área de todas las habitaciones del proyecto.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nList<double> roomAreas = new List<double>();\nforeach (Room room in rooms)\n{\n    if (room != null && room.Area > 0)\n    {\n        roomAreas.Add(UnitUtils.ConvertFromInternalUnits(room.Area, UnitTypeId.SquareMeters));\n    }\n}\n\/\/ El orquestador puede ahora usar la lista 'roomAreas' para generar el reporte final."}
{"prompt":"Modela una bandeja de cables entre dos puntos.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (trayType != null && level != null)\n{\n    XYZ p1 = new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters)); \n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}
{"prompt":"Inserta una armadura (truss) de 6 metros entre dos puntos.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(6 \/ 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Exporta el modelo actual a un archivo NWC.","completion":"string folderPath = \"C:\/exports\/\";\nstring fileName = doc.Title + \".nwc\";\nNavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Create a Reflected Ceiling Plan view for Level 1.","completion":"string levelName = \"Level 1\";\nstring viewName = \"Level 1 Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Import a georeferenced survey from a LandXML file.","completion":"\/\/ The Revit API in the provided context does not support direct LandXML import.\n\/\/ This functionality typically requires additional add-ins like the Site Designer, which are not available here.\n\/\/ As a placeholder, this code will show how to create a simple topography surface from a list of points.\nusing(Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(50, 0, 5));\n    points.Add(new XYZ(0, 50, 10));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Ajusta todas las ventanas para que tengan la altura del antepecho a 753mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(753, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Draw a filled region with a diagonal pattern.","completion":"using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n\n    if (activeView != null && fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                XYZ p1 = new XYZ(0,0,0);\n                XYZ p2 = new XYZ(5 \/ 0.3048,0,0);\n                XYZ p3 = new XYZ(5 \/ 0.3048,5 \/ 0.3048,0);\n                XYZ p4 = new XYZ(0,5 \/ 0.3048,0);\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(p1,p2));\n                profile.Append(Line.CreateBound(p2,p3));\n                profile.Append(Line.CreateBound(p3,p4));\n                profile.Append(Line.CreateBound(p4,p1));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop>{profile});\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\ndoc.Delete(unusedWallTypes);"}
{"prompt":"Create a new material named 'Dark Oak' with a wood surface pattern.","completion":"string materialName = \"Dark Oak\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Wood\") || p.Name.Contains(\"Madera\")) as FillPatternElement;\n    \n    if (material != null && fillPattern != null)\n    {\n        material.SurfaceForegroundPatternId = fillPattern.Id;\n        material.Color = new Color(139, 69, 19);\n    }\n}"}
{"prompt":"Coloca una etiqueta de material en una cara de muro.","completion":"using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona una cara para etiquetar\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Selecciona la ubicación de la etiqueta\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}
{"prompt":"Create a stair between Level 1 and Level 2.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    \/\/ TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    \/\/ Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Insert a text note with 'Review' in the current view.","completion":"View activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    XYZ position = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\n    TextNote.Create(doc, activeView.Id, position, \"Review\", defaultTypeId);\n}"}
{"prompt":"Link a DWG file as a reference in the active view.","completion":"string filePath = \"C:\/CAD_Files\/Base_Plan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.ColorMode = ImportColorMode.Preserved;\nElementId linkedFileId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(filePath, options, activeView, out linkedFileId);\n}"}
{"prompt":"Crea un nuevo nivel llamado 'Mezzanine' a 7.5 metros de elevación.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Generate a rectangular floor of 10x8 meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Add mullions to all grid lines of a curtain wall.","completion":"using (Transaction t = new Transaction(doc, \"Add Mullions\"))\n{\n    t.Start();\n    Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\n    MullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\n\n    if (curtainWall != null && mullionType != null)\n    {\n        CurtainGrid grid = curtainWall.CurtainGrid;\n        if (grid != null)\n        {\n            foreach (ElementId gridLineId in grid.GetVGridLineIds())\n            {\n                CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n                if(line != null) line.AddMullions(mullionType, false);\n            }\n            foreach (ElementId gridLineId in grid.GetUGridLineIds())\n            {\n                CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n                if(line != null) line.AddMullions(mullionType, false);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Rota el norte del proyecto 24 grados en sentido horario.","completion":"using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInDegrees = 30.0;\n        double angleInRadians = -(angleInDegrees * Math.PI \/ 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Duplicate level 1 with a 3m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Crea un nuevo tipo de tubería con material de Cobre.","completion":"string newTypeName = \"Tubería de Cobre\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial copper = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Copper\") || m.Name.Contains(\"Cobre\")) as Material;\n\nif (pipeTypeToDuplicate != null && copper != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(copper.Id);\n    }\n}"}
{"prompt":"Find a wall by searching for the value 'W-1' in its Mark parameter.","completion":"string markValue = \"W-01\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue);\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().WherePasses(filter).FirstOrDefault() as Wall;"}
{"prompt":"Cambia el nombre de la vista activa a 'Vista de Trabajo'.","completion":"string newName = \"Vista de Trabajo\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Importa un archivo CAD llamado 'BasePlan.dwg' en la vista actual.","completion":"string filePath = \"C:\/CAD\/BasePlan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Crea una nueva tabla de planificación para Pilares Estructurales.","completion":"string scheduleName = \"Tabla de Pilares Estructurales\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 1 a 'Clasificación Fuego - 88 min'.","completion":"using(Transaction t = new Transaction(doc, \"Set Door Comments\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    if(level1 != null)\n    {\n        List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId.Equals(level1.Id)).ToList();\n        foreach(FamilyInstance door in doorsOnLevel1)\n        {\n            Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n            if(commentsParam != null && !commentsParam.IsReadOnly)\n            {\n                commentsParam.Set(\"Clasificación Fuego - 90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create an extrusion roof with a 10% slope.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10 \/ 0.3048, 0, 1 \/ 0.3048)));\n        \n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        \n        if (refPlane != null)\n        {\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10 \/ 0.3048);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Find all walls that have no base level assigned.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"string newLevelName = \"Mezzanine\";\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Nivel 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Nivel 2\");\nif (lvl1 != null && lvl2 != null)\n{\ndouble midElevation = (lvl1.ProjectElevation + lvl2.ProjectElevation) \/ 2.0;\nLevel newLevel = Level.Create(doc, midElevation);\n    if(newLevel != null)\n    {\nnewLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Crea una vista 3D con la caja de sección activada.","completion":"string viewName = \"Vista 3D con Caja de Sección\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Exporta la vista 3D activa a NWC para Navisworks.","completion":"View3D view3d = doc.ActiveView as View3D;\n\nif (view3d != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    string fileName = view3d.Name + \".nwc\";\n    NavisworksExportOptions options = new NavisworksExportOptions();\n    options.ExportScope = NavisworksExportScope.View;\n    options.ViewId = view3d.Id;\n    doc.Export(folderPath, fileName, options);\n}"}
{"prompt":"Create a new workset named 'Structure'.","completion":"string wsName = \"Structure\";\nWorkset newWorkset = Workset.Create(doc, wsName);\n"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}
{"prompt":"Tag all rooms with their area.","completion":"using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(locPoint.Point.X, locPoint.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén todos los muros de un modelo vinculado que se cruzan con una caja de delimitación.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\nList<Element> linkedWalls = new List<Element>();\n\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    if (linkDoc != null)\n    {\n        BoundingBoxXYZ bbox = new BoundingBoxXYZ();\n        bbox.Min = new XYZ(0,0,0);\n        bbox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(bbox.Min, bbox.Max));\n        linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToList();\n    }\n}\n"}
{"prompt":"Crea una región rellena con un patrón de 'Concreto'.","completion":"using (Transaction t = new Transaction(doc, \"Create Filled Region\"))\n{\n    t.Start();\n    FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\") || frt.Name.Contains(\"Concreto\"));\n    View activeView = doc.ActiveView;\n\n    if (regionType != null && activeView != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 0,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(0, 5 \/ 0.3048,0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n    }\n    t.Commit();\n}"}
{"prompt":"Modela una bandeja de cables entre dos puntos.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(trayType != null && level != null)\n{\n    XYZ start = new XYZ(0,10,3);\n    XYZ end = new XYZ(15,10,3);\n    CableTray.Create(doc, trayType.Id, start, end, level.Id);\n}"}
{"prompt":"Crea una nueva hoja A1 usando el primer cajetín disponible.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"A1 - Nueva Hoja\";\n        sheet.SheetNumber = \"A1\";\n    }\n}"}
{"prompt":"Get all rooms on Level 3.","completion":"Level level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nList<Element> roomsOnLevel3 = new List<Element>();\n\nif (level3 != null)\n{\n    roomsOnLevel3 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level3.Id).ToList();\n}"}
{"prompt":"Crea una tubería con un diámetro de 137mm.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(137, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Cambia el nombre de la vista activa a 'Vista de Trabajo'.","completion":"string newName = \"Vista de Trabajo\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Create a view filter to hide demolished walls.","completion":"using (Transaction t = new Transaction(doc, \"Create Demolition Filter\"))\n{\n    t.Start();\n    Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p => p.Name.Contains(\"Demolished\") || p.Name.Contains(\"Demolición\"));\n    View activeView = doc.ActiveView;\n\n    if (demolishedPhase != null && activeView != null)\n    {\n        ElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\n        FilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\n        ElementFilter filter = new ElementParameterFilter(rule);\n        ICollection<ElementId> categories = new List<ElementId>{ new ElementId(BuiltInCategory.OST_Walls) };\n        ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Demolition Filter\", categories, filter);\n        \n        if (pfe != null)\n        {\n            activeView.AddFilter(pfe.Id);\n            activeView.SetFilterVisibility(pfe.Id, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Importa un archivo CAD llamado 'BasePlan.dwg' en la vista actual.","completion":"string filePath = \"C:\/CAD\/BasePlan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Crea un pilar del tipo 'Hormigón-Rectangular 30x60' en cada intersección de la rejilla.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Hormigón-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Rellena el parámetro de material de todos los muros con 'Concreto'.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concreto\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Crea un sistema de vigas en un forjado seleccionado.","completion":""}
{"prompt":"Create a new pipe type with Copper material.","completion":"string newTypeName = \"Copper Pipe\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial copper = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Copper\")) as Material;\n\nif (pipeTypeToDuplicate != null && copper != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(copper.Id);\n    }\n}"}
{"prompt":"Create 4 worksets for engineering disciplines.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Get the MEP space associated with the room 'Office 88'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 101\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Create a new A1 sheet and place the 'Ground Floor' view on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet\"))\n{\n    t.Start();\n    string sheetNumber = \"A-101\";\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A1\"));\n    View viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<View>().FirstOrDefault(v => v.Name == \"Ground Floor\");\n\n    if (titleBlock != null && viewToPlace != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            newSheet.Name = \"Architectural Plan - Ground Floor\";\n            newSheet.SheetNumber = sheetNumber;\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca una cota de elevación en una cara y un punto de vista dados.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara superior del suelo\");\n\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && activeView != null)\n    {\n        XYZ pointOnFace = faceRef.GlobalPoint;\n        XYZ leaderEnd = pointOnFace + new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea 6 worksets para las disciplinas de ingeniería.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Allow the user to select a wall and get its ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Cambia el nombre de todas las vistas de planta para que empiecen con 'ARQ_'.","completion":"string prefix = \"ARQ_\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Importa topografía georreferenciada desde un archivo LandXML.","completion":"\/\/ The Revit API in the provided context does not support direct LandXML import.\n\/\/ This functionality typically requires additional add-ins like the Site Designer, which are not available here.\n\/\/ As a placeholder, this code will show how to create a simple topography surface from a list of points.\nusing(Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(50, 0, 5));\n    points.Add(new XYZ(0, 50, 10));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Añade una línea de rejilla horizontal a un muro cortina a 2 metros de altura.","completion":"using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) \/ 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, 1.5 \/ 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén todas las habitaciones que están en el Nivel 3.","completion":"Level level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 3\") as Level;\nList<Element> roomsOnLevel3 = new List<Element>();\n\nif (level3 != null)\n{\n    roomsOnLevel3 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level3.Id).ToList();\n}"}
{"prompt":"Obtén una lista de todas las familias de anotación.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Establece el parámetro 'Marca' de todos los muros seleccionados a 'M-EXT-01'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"M-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get the host element of the first window found.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-96' y establece su resistencia al fuego a '100 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Puerta RF-90\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Set the visibility of the 'Furniture' category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Create a new window schedule that includes Type Mark, Width, and Height.","completion":"string scheduleName = \"Window Schedule\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}
{"prompt":"Obtén una lista de todas las familias de anotación.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Create a Reflected Ceiling Plan view for Level 1.","completion":"string levelName = \"Level 1\";\nstring viewName = \"Level 1 Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Create a spherical DirectShape with a 6-meter radius.","completion":"using (Transaction t = new Transaction(doc, \"Create Sphere DirectShape\"))\n{\n    t.Start();\n    double radius = 5 \/ 0.3048;\n    List<GeometryObject> solids = new List<GeometryObject>();\n    Frame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\n    Arc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\n    Line line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\n    Solid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\n    solids.Add(sphere);\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\n    if (ds != null)\n    {\n        ds.SetShape(solids);\n        ds.Name = \"Sphere DirectShape\";\n    }\n    t.Commit();\n}"}
{"prompt":"Mueve el punto base del proyecto 107 metros hacia el norte.","completion":"using (Transaction t = new Transaction(doc, \"Move Project Base Point\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        XYZ translation = new XYZ(0, 100 \/ 0.3048, 0);\n        ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n    }\n    t.Commit();\n}"}
{"prompt":"Place a spot elevation on a given face and view point.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select the top face of the floor\");\n\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && activeView != null)\n    {\n        XYZ pointOnFace = faceRef.GlobalPoint;\n        XYZ leaderEnd = pointOnFace + new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una superficie topográfica a partir de una lista de 4 puntos.","completion":"IList<XYZ> points = new List<XYZ>\n{\n    new XYZ(0, 0, 0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters))\n};\nTopographySurface.Create(doc, points);"}
{"prompt":"Crea un nuevo tipo de texto de 6mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Place a camera in the active view.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        cameraView.Name = \"New Camera View\";\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}
{"prompt":"Crea 5 worksets para las disciplinas de ingeniería.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Obtén la geometría sólida de un elemento seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para obtener su geometría\");\n\nList<Solid> solids = new List<Solid>();\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        Options opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if (geoElem != null)\n        {\n            solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}
{"prompt":"Create columns at each grid intersection.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Crea una vista de sección entre los puntos (0,0,0) y (10,10,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Ajusta todas las ventanas para que tengan la altura del antepecho a 1033mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(1033, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Aplica el estilo visual 'Rayos X' a la vista 3D activa.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe;\n}"}
{"prompt":"Crea un muro cortina de 5 metros de ancho y 4 metros de alto.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Obtén una lista de los nombres de todos los materiales.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Pin the selected element so it cannot be moved.","completion":"UIDocument uidoc = new UIDocument(doc);\nElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\n\nif (selectedId != ElementId.InvalidElementId)\n{\n    Element elementToPin = doc.GetElement(selectedId);\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}
{"prompt":"Pinta la cara interior de los muros exteriores con 'Pintura Blanca'.","completion":"using (Transaction t = new Transaction(doc, \"Paint Walls\"))\n{\n    t.Start();\n    Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Pintura Blanca\");\n    var exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior).ToList();\n\n    if (paintMaterial != null)\n    {\n        foreach (Wall w in exteriorWalls)\n        {\n            IList<Reference> interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n            if(interiorFaceRefs.Count > 0)\n            {\n                Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n                if (interiorFace != null)\n                {\n                    doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Duplicate level 1 with a 3m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Create an extrusion roof with an arc profile.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Insert a text note with 'Review' in the current view.","completion":"View activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    XYZ position = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\n    TextNote.Create(doc, activeView.Id, position, \"Review\", defaultTypeId);\n}"}
{"prompt":"Añade un punto de referencia en las coordenadas (1,2,3) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));"}
{"prompt":"Create a grid of 5 horizontal and 5 vertical grids, spaced 6 meters apart.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint count = 5;\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((count - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create a curtain wall 6 meters wide and 4 meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Ajusta la región de recorte de la vista a un rectángulo de (0,0) a (24,23).","completion":"using (Transaction t = new Transaction(doc, \"Adjust Crop Region\"))\n{\n    t.Start();\n    View view = doc.ActiveView;\n\n    if (view != null && view.CropBoxActive)\n    {\n        BoundingBoxXYZ cropBox = view.CropBox;\n        if (cropBox != null)\n        {\n            XYZ minPoint = new XYZ(0, 0, cropBox.Min.Z);\n            XYZ maxPoint = new XYZ(20 \/ 0.3048, 20 \/ 0.3048, cropBox.Max.Z);\n            cropBox.Min = minPoint;\n            cropBox.Max = maxPoint;\n            view.CropBox = cropBox;\n            view.CropBoxVisible = true;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un techo por extrusión con una pendiente del 12%.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10 \/ 0.3048, 0, 1 \/ 0.3048)));\n        \n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        \n        if (refPlane != null)\n        {\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10 \/ 0.3048);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a SketchPlane on Level 2.","completion":"using (Transaction t = new Transaction(doc, \"Create Sketch Plane\"))\n{\n    t.Start();\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\n    if (level2 != null)\n    {\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, new XYZ(0, 0, level2.Elevation));\n        SketchPlane skp = SketchPlane.Create(doc, plane);\n    }\n    t.Commit();\n}"}
{"prompt":"Draw a 267x179 millimeter rectangular ventilation duct.","completion":"using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast<DuctType>().FirstOrDefault(d => d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null && ductType != null && systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ p2 = new XYZ(10 \/ 0.3048, 0, 3 \/ 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null && !widthParam.IsReadOnly) widthParam.Set(300 \/ 304.8);\n            if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(200 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra todos los muros que no tienen nivel base asignado.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Calculate the total area of all rooms.","completion":"double totalArea = 0.0;\nList<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nforeach (Room room in rooms)\n{\n    totalArea += room.Area;\n}"}
{"prompt":"Crea 9 worksets de arquitectura.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_MAM\", \"TAD_ARQ_ACA\", \"TAD_ARQ_PLA\", \"TAD_ARQ_PSO\", \"TAD_ARQ_HRE\", \"TAD_ARQ_ALU\", \"TAD_ARQ_CAR\", \"TAD_ARQ_MOB\", \"TAD_ARQ_PLO\", \"TAD_ARQ_EXT\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Place the 'Level 1' view in the center of the active sheet.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 1\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null && activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) \/ 2, (sheetBox.Min.V + sheetBox.Max.V) \/ 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 300mm' con un grosor de 30cm.","completion":"string newTypeName = \"Muro Genérico 300mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Create a new door type named 'FR-64 Door' and set the 'Fire Rating' parameter to '54 min'.","completion":"string newTypeName = \"FR-60 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"60 min\");\n    }\n}"}
{"prompt":"Cambia el nombre de todas las tablas que contienen 'Puertas' por 'Listado de Puertas'.","completion":"List<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"Puertas\")).ToList();\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"Puertas\", \"Listado de Puertas\");\n}"}
{"prompt":"Create 8 horizontal grids spaced 10 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Aplica aislamiento térmico de 26mm a todas las tuberías de agua caliente.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(26, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Duplica la vista de planta 'Nivel 2' y conviértela en una plantilla de vista.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Nivel 2\");\n    string templateName = \"Plantilla Nivel 2\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ Direct conversion to a template may not be available in older APIs.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create columns at each grid intersection.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Get a list of all project warnings.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\n"}
{"prompt":"Crea una nueva hoja A3 y colócale una leyenda.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Find all doors on Level 2 that belong to the 'Single-Flush' family.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Single-Flush\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Generate a 4x6 column grid with 9-meter spacing.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Crea un muro en Nivel 1 de (0,0,0) a (5,0,0) con 5m de alto.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    Line wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    double height = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Genera una cuadrícula de columnas 4x5 con separación de 7 metros.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Crea 3 ejes en sentido vertical separados 12 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nfor(int i=0; i<4; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea un muro del tipo 'Genérico - 221mm' en el 'Nivel 1' desde (0,0) hasta (11,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Genérico - 200mm\") as WallType;\nXYZ startPoint = new XYZ(0, 0, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nWall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);"}
{"prompt":"Crea una nueva vista 3D orientada desde el punto (11,8,12) mirando hacia el origen.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v=>v.ViewFamily==ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    if (view != null)\n    {\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D vo = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        view.SetOrientation(vo);\n        view.Name = \"Vista desde (10,10,10)\";\n    }\n}"}
{"prompt":"Oculta los elementos seleccionados en la vista activa.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToHide = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToHide.Count > 0)\n{\n    activeView.HideElements(idsToHide);\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 150mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 150mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-90' y establece su resistencia al fuego a '90 min'.","completion":"string newTypeName = \"Puerta RF-90\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = null;\nif (doorTypeToDuplicate != null)\n{\n    newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"90 min\");\n        }\n    }\n}"}
{"prompt":"Obtén una lista de los nombres de todos los materiales.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Crea un conducto eléctrico de 1 pulgada de diámetro.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ end = new XYZ(5 \/ 0.3048, 0, 3 \/ 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set(1.0 \/ 12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new revision and apply it to the active sheet.","completion":"Revision rev = Revision.Create(doc);\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (rev != null && sheet != null)\n{\n    rev.Description = \"Issued for Construction\";\n    rev.RevisionDate = DateTime.Now.ToString(\"yyyy-MM-dd\");\n    rev.IssuedBy = \"BIM Department\";\n    \n    ICollection<ElementId> revisions = sheet.GetAdditionalRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}
{"prompt":"Create a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una apertura de hueco (shaft) que atraviese desde el Nivel 1 al Nivel 3.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft Opening\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 3\");\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p2 = new XYZ(8 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p3 = new XYZ(8 \/ 0.3048, 8 \/ 0.3048,0);\n        XYZ p4 = new XYZ(5 \/ 0.3048, 8 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un codo en T entre dos tuberías que se intersecan.","completion":"\/\/ No se proporciona código para esta función específica debido a la necesidad de selección interactiva y manejo de casos complejos.\n\/\/ Este escenario involucra la selección de elementos específicos y el uso de métodos de creación que dependen de la geometría existente."}
{"prompt":"Create an assembly from the selected elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"New Assembly\";\n    }\n}"}
{"prompt":"Asigna todos los muros al workset 'Estructura'.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if (doc.IsWorkshared)\n    {\n        Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w => w.Name == \"Estructura\");\n        if (ws != null)\n        {\n            FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n            foreach (Element e in collector)\n            {\n                Parameter p = e.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(ws.Id.IntegerValue);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Find all walls with the comment 'Review'.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Review\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Set the visibility of the 'Furniture' category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nView activeView = doc.ActiveView;\n\nif (furnitureCat != null && activeView != null)\n{\n    activeView.SetCategoryHidden(furnitureCat.Id, true);\n}\n"}
{"prompt":"Set the visibility of the 'Furniture' category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Create a Reflected Ceiling Plan view for Level 1.","completion":"string levelName = \"Level 1\";\nstring viewName = \"Level 1 Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Encuentra todas las puertas del Nivel 2 que sean de la familia 'Puerta Sencilla'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Puerta Sencilla\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Mueve un elemento seleccionado a la posición (6,4).","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para mover\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            XYZ newPosition = new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), lp.Point.Z);\n            lp.Point = newPosition;\n        }\n    }\n}"}
{"prompt":"Aplica la plantilla de vista 'Plantilla Arquitectónica' a la vista activa.","completion":"View activeView = doc.ActiveView;\nView viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.IsTemplate && v.Name == \"Plantilla Arquitectónica\");\n\nif (activeView != null && viewTemplate != null)\n{\n    activeView.ViewTemplateId = viewTemplate.Id;\n}"}
{"prompt":"Coloca postes de iluminación cada 10m en un camino de 100m.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Averigua quién es el propietario de un elemento seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento\");\n\nWorksharingTooltipInfo info = null;\nif (pickedRef != null)\n{\n    info = WorksharingUtils.GetWorksharingTooltipInfo(doc, pickedRef.ElementId);\n}\n"}
{"prompt":"Export all sheets in a set to a single combined PDF.","completion":"ViewSheetSet sheetSet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheetSet)).FirstOrDefault() as ViewSheetSet;\n\nif (sheetSet != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    PDFExportOptions options = new PDFExportOptions();\n    options.Combine = true;\n    options.FileName = sheetSet.Name;\n    List<ElementId> sheetIds = sheetSet.Views.Cast<ViewSheet>().Select(s => s.Id).ToList();\n    doc.Export(folderPath, sheetIds, options);\n}"}
{"prompt":"Une la geometría de una columna y un suelo que se cruzan.","completion":"Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\n\nif (column != null && floor != null)\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}
{"prompt":"Establece el parámetro 'Marca' de todos los muros seleccionados a 'M-EXT-1'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"M-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Rota el norte del proyecto 30 grados en sentido horario.","completion":"using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInDegrees = 30.0;\n        double angleInRadians = -(angleInDegrees * Math.PI \/ 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Genera un reporte con el área de todas las habitaciones del proyecto.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}
{"prompt":"Crea un muro de 5 metros de largo y 2 metros de alto.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Coloca la vista 'Nivel 1' en el centro de la hoja activa.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 1\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null && activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) \/ 2, (sheetBox.Min.V + sheetBox.Max.V) \/ 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Encuentra el elemento de pórtico estructural con la marca 'B-101'.","completion":"string markValue = \"B-101\";\nElement framingElement = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_StructuralFraming)\n    .WhereElementIsNotElementType()\n    .FirstOrDefault(e => {\n        Parameter p = e.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        return p != null && p.AsString() == markValue;\n    });"}
{"prompt":"Create a default 3D view.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n}"}
{"prompt":"Get the IDs of all 3D views starting with 'Coord' for export.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Ajusta todas las ventanas para que tengan la altura del antepecho a 1059mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(1059, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Fill the material parameter of all walls with 'Concrete'.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concrete\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Get all instances of the Furniture category.","completion":"List<Element> furnitureInstances = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToList();"}
{"prompt":"Carga la familia 'Mesa.rfa' y colócala en (4,5,0) en el Nivel 1.","completion":"string familyPath = \"C:\/Rutas\/Comunes\/Mesa.rfa\";\nFamily deskFamily = null;\nbool familyLoaded = doc.LoadFamily(familyPath, out deskFamily);\n\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (familyLoaded && deskFamily != null && level1 != null)\n{\n    FamilySymbol deskSymbol = doc.GetElement(deskFamily.GetFamilySymbolIds().FirstOrDefault()) as FamilySymbol;\n    if (deskSymbol != null)\n    {\n        if (!deskSymbol.IsActive) deskSymbol.Activate();\n        XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0);\n        doc.Create.NewFamilyInstance(point, deskSymbol, level1, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Dentro del editor de familias, crea un plano de referencia vertical llamado 'Eje Central'.","completion":"string rpName = \"Eje Central\";\nXYZ start = new XYZ(0, UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0);\nXYZ end = new XYZ(0, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nXYZ normal = XYZ.BasisX;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = rpName;\n    }\n}"}
{"prompt":"Obtén todos los muros del Nivel 1 que son estructurales.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level1 != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Create a new level 'Level 3' at an elevation of 13 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(13, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 3\";\n}"}
{"prompt":"Place a spot elevation on a given face and view point.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select the top face of the floor\");\n\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && activeView != null)\n    {\n        XYZ pointOnFace = faceRef.GlobalPoint;\n        XYZ leaderEnd = pointOnFace + new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Inicia y confirma una transacción para 'Modificar Proyecto'.","completion":""}
{"prompt":"Oculta todos los elementos de anotación en la vista activa.","completion":"if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}
{"prompt":"Add a reference point at coordinates (1,2,3) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));"}
{"prompt":"Create a 3D view oriented from the southeast.","completion":"string viewName = \"3D View Southeast\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}
{"prompt":"Create a detail group with the selected detail items.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Typical Detail 1\";\n        }\n    }\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-89' y establece su resistencia al fuego a '91 min'.","completion":"string newTypeName = \"Puerta RF-90\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"90 min\");\n    }\n}"}
{"prompt":"Crea un muro en el Nivel 1 que vaya de (0,0,0) a (9,0,0) con una altura de 4 metros.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), 0, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Export each schedule to an individual CSV file.","completion":"string exportPath = \"C:\/RevitExports\/\";\nList<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => !vs.IsTemplate).ToList();\nViewScheduleExportOptions options = new ViewScheduleExportOptions();\noptions.FieldDelimiter = \",\";\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Export(exportPath, schedule.Name + \".csv\", options);\n}"}
{"prompt":"Create a vertical shaft opening from the base level to the top level.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(2 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(2 \/ 0.3048, 5 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Hide all annotation elements in the active view.","completion":"if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}
{"prompt":"Alinea las líneas de centro de dos muros seleccionados por el usuario.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer muro (el que se moverá)\");\nReference r2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo muro (el de referencia)\");\n\nif (r1 != null && r2 != null)\n{\n    Wall w1 = doc.GetElement(r1) as Wall;\n    Wall w2 = doc.GetElement(r2) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (w1 != null && w2 != null && activeView != null)\n    {\n        LocationCurve lc1 = w1.Location as LocationCurve;\n        LocationCurve lc2 = w2.Location as LocationCurve;\n        if (lc1 != null && lc2 != null)\n        {\n            doc.Create.NewAlignment(activeView, lc1.Curve.Reference, lc2.Curve.Reference);\n        }\n    }\n}"}
{"prompt":"Create a new door type named 'FR-52 Door' and set the 'Fire Rating' parameter to '56 min'.","completion":"string newTypeName = \"FR-60 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"60 min\");\n    }\n}"}
{"prompt":"Create a new wall type 'Generic Wall 300mm' with a thickness of 30cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Generic Wall 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca una ventana de 1x1.2 metros en la pared más cercana.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original y asegura un nombre único\n    string newTypeName = $\"Window {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters), UnitTypeId.Meters)}m x {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters), UnitTypeId.Meters)}m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Cambia el tipo de una losa por uno que contenga 'Concreto'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concreto\") || ft.Name.Contains(\"Concrete\"));\n\nif (floorToChange != null && newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Create a vertical shaft opening from the base level to the top level.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(2 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(2 \/ 0.3048, 5 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Temporarily isolate all furniture in the active view.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Create a view filter to hide demolished walls.","completion":"using (Transaction t = new Transaction(doc, \"Create Demolition Filter\"))\n{\n    t.Start();\n    Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p => p.Name.Contains(\"Demolished\") || p.Name.Contains(\"Demolición\"));\n    View activeView = doc.ActiveView;\n\n    if (demolishedPhase != null && activeView != null)\n    {\n        ElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\n        FilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\n        ElementFilter filter = new ElementParameterFilter(rule);\n        ICollection<ElementId> categories = new List<ElementId>{ new ElementId(BuiltInCategory.OST_Walls) };\n        ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Demolition Filter\", categories, filter);\n        \n        if (pfe != null)\n        {\n            activeView.AddFilter(pfe.Id);\n            activeView.SetFilterVisibility(pfe.Id, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un pilar del tipo 'Hormigón-Rectangular 29x71' en cada intersección de la rejilla.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Hormigón-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Change the detail level of the active view to 'Medium'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Medium;\n}"}
{"prompt":"Create an electrical conduit with a 1-inch diameter.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ end = new XYZ(5 \/ 0.3048, 0, 3 \/ 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set(1.0 \/ 12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea vigas entre las columnas alineadas horizontalmente.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Crea una vista de sección entre los puntos (0,0,0) y (8,10,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Selecciona todos los muros del 'Nivel 2' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif (level2 != null)\n{\n    List<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\n    foreach(Wall wall in wallsOnLevel2)\n    {\n        Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentParam != null && !commentParam.IsReadOnly)\n        {\n            commentParam.Set(\"REVISAR AISLAMIENTO\");\n        }\n    }\n}"}
{"prompt":"Crea un grupo de detalles con los elementos de detalle seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Detalle Típico 1\";\n        }\n    }\n}"}
{"prompt":"Crea un suelo con un hueco circular en el centro.","completion":"using (Transaction t = new Transaction(doc, \"Create Floor with Hole\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\n    if (level != null && floorType != null)\n    {\n        XYZ p1 = new XYZ(-10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(-10 \/ 0.3048, 10 \/ 0.3048, 0);\n        CurveLoop outerLoop = new CurveLoop();\n        outerLoop.Append(Line.CreateBound(p1, p2));\n        outerLoop.Append(Line.CreateBound(p2, p3));\n        outerLoop.Append(Line.CreateBound(p3, p4));\n        outerLoop.Append(Line.CreateBound(p4, p1));\n\n        XYZ center = XYZ.Zero;\n        double radius = 2 \/ 0.3048;\n        CurveLoop innerLoop = new CurveLoop();\n        innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n        innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n        Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Acota la longitud de un muro seleccionado por el usuario.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro para acotar\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}
{"prompt":"Recarga el vínculo de Revit 'Estructura_LINK.rvt'.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"Estructura_LINK.rvt\");\n\nif (linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Obtén las coordenadas del punto base y del punto de reconocimiento.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}
{"prompt":"Cambia el tipo de todas las ventanas de 'Fijo' a 'Abatible'.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Abatible\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Fijo\"));\n\nif (newType != null && oldType != null)\n{\n    List<FamilyInstance> windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Find all annotation families and count how many there are.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}
{"prompt":"Apply 26mm thermal insulation to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(26, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Dibuja una región rellena con patrón diagonal.","completion":"using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n    if (activeView != null && fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(new XYZ(0, 0, 0), new XYZ(5, 0, 0)));\n                profile.Append(Line.CreateBound(new XYZ(5, 0, 0), new XYZ(5, 5, 0)));\n                profile.Append(Line.CreateBound(new XYZ(5, 5, 0), new XYZ(0, 5, 0)));\n                profile.Append(Line.CreateBound(new XYZ(0, 5, 0), new XYZ(0, 0, 0)));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop> { profile });\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a group from the current selection and move it 12 meters to the right.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    Group group = doc.Create.NewGroup(selectedIds);\n    if (group != null)\n    {\n        XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters), 0, 0);\n        ElementTransformUtils.MoveElement(doc, group.Id, translation);\n    }\n}"}
{"prompt":"Create 10 architectural worksets.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_WALLS\", \"TAD_ARQ_FINISHES\", \"TAD_ARQ_CEILINGS\", \"TAD_ARQ_FLOORS\", \"TAD_ARQ_RAILINGS\", \"TAD_ARQ_WINDOWS\", \"TAD_ARQ_CARPENTRY\", \"TAD_ARQ_FURNITURE\", \"TAD_ARQ_PLUMBING\", \"TAD_ARQ_EXTERIOR\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Model a cable tray between two points.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (trayType != null && level != null)\n{\n    XYZ p1 = new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters)); \n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}
{"prompt":"Obtén todas las subcategorías de la categoría Muros.","completion":"Category wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategoryNameMap subcategories = wallCat.SubCategories;"}
{"prompt":"Hide all annotation categories in the active view.","completion":"using (Transaction t = new Transaction(doc, \"Hide Annotation Categories\"))\n{\n    t.Start();\n    Categories categories = doc.Settings.Categories;\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        foreach(Category cat in categories)\n        {\n            if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n            {\n                 activeView.SetCategoryHidden(cat.Id, true);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Unjoin the geometry of two given elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first element\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second element\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"string newLevelName = \"Mezzanine\";\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Nivel 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Nivel 2\");\nif (lvl1 != null && lvl2 != null)\n{\ndouble midElevation = (lvl1.ProjectElevation + lvl2.ProjectElevation) \/ 2.0;\nLevel newLevel = Level.Create(doc, midElevation);\n    if(newLevel != null)\n    {\nnewLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Create a structural column at position X=10, Y=5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Create a floor plan view for 'Level 3'.","completion":"string levelName = \"Level 3\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Duplicate the active view and name it 'Working Copy'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"Working Copy\";\n    }\n}"}
{"prompt":"Crea una nota de texto con un texto, una ubicación y un elemento de destino dados.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"REVISAR CLASH\", opts);\n        if (note != null)\n        {\n            note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L).End = targetRef.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Synchronize the local model with the central model, adding the comment 'Design update'.","completion":"if (doc.IsWorkshared)\n{\n    TransactWithCentralOptions tco = new TransactWithCentralOptions();\n    SynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\n    swcOpts.Comment = \"Design update\";\n    swcOpts.SaveLocalAfter = true;\n    doc.SynchronizeWithCentral(tco, swcOpts);\n}"}
{"prompt":"Create a structural beam between (0,0,3) and (5,0,3) on Level 2.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Copia todos los elementos del Nivel 1 al Nivel 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\n\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if (elementsToCopy.Count > 0)\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Cambia un panel de vidrio de un muro cortina por un panel sólido.","completion":"using (Transaction t = new Transaction(doc, \"Change Curtain Panel\"))\n{\n    t.Start();\n    Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\n    FamilySymbol solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_CurtainWallPanels && (fs.Name.Contains(\"Solid\") || fs.Name.Contains(\"Sólido\")));\n\n    if (curtainWall != null && solidPanelType != null)\n    {\n        CurtainGrid grid = curtainWall.CurtainGrid;\n        if (grid != null)\n        {\n            ElementId panelIdToChange = grid.GetPanelIds().FirstOrDefault();\n            if (panelIdToChange != ElementId.InvalidElementId)\n            {\n                Panel panelToChange = doc.GetElement(panelIdToChange) as Panel;\n                if (panelToChange != null) panelToChange.ChangeTypeId(solidPanelType.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Aísla temporalmente los elementos seleccionados en la vista activa.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToIsolate = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToIsolate.Count > 0)\n{\n    activeView.IsolateElementsTemporary(idsToIsolate);\n}"}
{"prompt":"Genera una cuadrícula de columnas 6x5 con separación de 7 metros.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Change a glass panel in a curtain wall to a solid panel.","completion":"using (Transaction t = new Transaction(doc, \"Change Curtain Panel\"))\n{\n    t.Start();\n    Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\n    FamilySymbol solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_CurtainWallPanels && fs.Name.Contains(\"Solid\"));\n\n    if (curtainWall != null && solidPanelType != null)\n    {\n        CurtainGrid grid = curtainWall.CurtainGrid;\n        if (grid != null)\n        {\n            ElementId panelIdToChange = grid.GetPanelIds().FirstOrDefault();\n            if (panelIdToChange != ElementId.InvalidElementId)\n            {\n                Panel panelToChange = doc.GetElement(panelIdToChange) as Panel;\n                if (panelToChange != null) panelToChange.ChangeTypeId(solidPanelType.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un tipo de muro 'Muro-Doble' de 34cm y luego crea un muro de ese tipo.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Muro-Doble\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Duplicate the 'Level 2' plan view and make it a view template.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Level 2\");\n    string templateName = \"Level 2 Template\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ Direct conversion to a template may not be available in older APIs.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nivel 'Roof Terrace' a 17m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(17, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Change the detail level of the current view to 'Coarse'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Coarse;\n}"}
{"prompt":"Create a 'Generic - 209mm' wall on 'Level 1' from (0,0) to (11,6).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Generic - 200mm\") as WallType;\nXYZ startPoint = new XYZ(0, 0, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nif (level != null && wallType != null)\n{\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}
{"prompt":"Create a new shared text project parameter named 'Additional Notes' for walls and doors.","completion":"using (Transaction t = new Transaction(doc, \"Create Shared Parameter\"))\n{\n    t.Start();\n    string paramName = \"Additional Notes\";\n    string originalFile = doc.Application.SharedParametersFilename;\n    string tempFile = System.IO.Path.GetTempFileName() + \".txt\";\n    using (System.IO.File.Create(tempFile)) { }\n    doc.Application.SharedParametersFilename = tempFile;\n\n    try\n    {\n        DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n        if (defFile != null)\n        {\n            DefinitionGroup group = defFile.Groups.Create(\"General\");\n            if (group != null)\n            {\n                ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(paramName, ParameterType.Text);\n                Definition definition = group.Definitions.Create(options);\n                if (definition != null)\n                {\n                    CategorySet categories = doc.Application.Create.NewCategorySet();\n                    categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                    categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                    InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                    doc.ParameterBindings.Insert(definition, binding, Autodesk.Revit.DB.BuiltInParameterGroup.PG_DATA);\n                }\n            }\n        }\n    }\n    finally\n    {\n        doc.Application.SharedParametersFilename = originalFile;\n        System.IO.File.Delete(tempFile);\n        t.Commit();\n    }\n}"}
{"prompt":"Set the 'Mark' parameter of all selected walls to 'W-EXT-01'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una viga estructural entre (0,0,3) y (5,0,3) en el Nivel 2.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Crea un techo por extrusión con un perfil en arco.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new door type named 'FR-106 Door' and set its fire rating to '75 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"FR-90 Door\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new schedule for Structural Columns.","completion":"string scheduleName = \"Structural Column Schedule\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Add a horizontal grid line to a curtain wall at a height of 2 meters.","completion":"using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) \/ 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, 1.5 \/ 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Cambia el nombre de la vista activa a 'Vista de Trabajo'.","completion":"string newName = \"Vista de Trabajo\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Obtén las coordenadas del punto base y del punto de reconocimiento.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}
{"prompt":"Ajusta la región de recorte de la vista a un rectángulo de (0,0) a (20,20).","completion":"using (Transaction t = new Transaction(doc, \"Adjust Crop Region\"))\n{\n    t.Start();\n    View view = doc.ActiveView;\n\n    if (view != null && view.CropBoxActive)\n    {\n        BoundingBoxXYZ cropBox = view.CropBox;\n        if (cropBox != null)\n        {\n            XYZ minPoint = new XYZ(0, 0, cropBox.Min.Z);\n            XYZ maxPoint = new XYZ(20 \/ 0.3048, 20 \/ 0.3048, cropBox.Max.Z);\n            cropBox.Min = minPoint;\n            cropBox.Max = maxPoint;\n            view.CropBox = cropBox;\n            view.CropBoxVisible = true;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Oculta todos los muros que sean más cortos de 2 metros.","completion":"double lengthThreshold = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nList<ElementId> shortWallIds = new List<ElementId>();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    foreach(Wall wall in walls)\n    {\n        Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n        if(lengthParam != null && lengthParam.HasValue && lengthParam.AsDouble() < lengthThreshold)\n        {\n            shortWallIds.Add(wall.Id);\n        }\n    }\n    if (shortWallIds.Count > 0)\n    {\n        activeView.HideElements(shortWallIds);\n    }\n}"}
{"prompt":"Temporarily isolate all furniture in the active view.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Load the 'Table.rfa' family and place it at (6,5,0) on Level 1.","completion":"string familyPath = \"C:\/Common\/Paths\/Table.rfa\";\nFamily tableFamily = null;\nbool familyLoaded = doc.LoadFamily(familyPath, out tableFamily);\n\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (familyLoaded && tableFamily != null && level1 != null)\n{\n    FamilySymbol tableSymbol = doc.GetElement(tableFamily.GetFamilySymbolIds().FirstOrDefault()) as FamilySymbol;\n    if (tableSymbol != null)\n    {\n        if (!tableSymbol.IsActive) tableSymbol.Activate();\n        XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0);\n        doc.Create.NewFamilyInstance(point, tableSymbol, level1, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Coloca una etiqueta de material en una cara de muro.","completion":"using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona una cara para etiquetar\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Selecciona la ubicación de la etiqueta\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}
{"prompt":"Aísla temporalmente la categoría de Puertas en la vista activa.","completion":"ElementId doorCategoryId = new ElementId(BuiltInCategory.OST_Doors);\nICollection<ElementId> categoryIds = new List<ElementId> { doorCategoryId };\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateCategoriesTemporary(categoryIds);\n}"}
{"prompt":"Model a railing on an existing staircase.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior\");\nif(targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null)\n        {\n            wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Place a piece of furniture at coordinates (2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), furnitureSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Crea una losa de cimentación estructural de 40cm de espesor.","completion":"using (Transaction t = new Transaction(doc, \"Create Foundation Slab\"))\n{\n    t.Start();\n    Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    FloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n    if(slabTypeToDuplicate != null && foundationLevel != null)\n    {\n        string newTypeName = \"Losa Cimentación 40cm\";\n        FloorType newSlabType = slabTypeToDuplicate.Duplicate(newTypeName) as FloorType;\n        if(newSlabType != null)\n        {\n            CompoundStructure cs = newSlabType.GetCompoundStructure();\n            if (cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 400 \/ 304.8);\n                newSlabType.SetCompoundStructure(cs);\n                XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n                doc.Create.NewFloor(new List<CurveLoop>{profile}, newSlabType, foundationLevel, true);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Copia todos los muros del Nivel 1 al Nivel 2.","completion":"using (Transaction t = new Transaction(doc, \"Copy Walls\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\n\n    if (level1 != null && level2 != null)\n    {\n        ICollection<ElementId> wallsToCopy = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(e => (e as Wall) != null && (e as Wall).LevelId.Equals(level1.Id)).Select(e => e.Id).ToList();\n        double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n        XYZ translation = new XYZ(0, 0, elevationDiff);\n        if (wallsToCopy.Count > 0)\n        {\n            ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo nivel llamado 'Planta Sótano' a una elevación de -4.5 metros.","completion":"string levelName = \"Planta Sótano\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Obtén la longitud total de todos los muros del proyecto.","completion":"double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 102'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create a stair between Level 1 and Level 2.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    \/\/ TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    \/\/ Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Create a 3D view oriented from the southeast.","completion":"string viewName = \"3D View Southeast\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}
{"prompt":"Get all door families loaded in the project.","completion":"List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Temporarily isolate the selected elements in the active view.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToIsolate = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToIsolate.Count > 0)\n{\n    activeView.IsolateElementsTemporary(idsToIsolate);\n}"}
{"prompt":"Acota la longitud de un muro seleccionado por el usuario.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro para acotar\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}
{"prompt":"Synchronize the local model with the central model, adding the comment 'Design update'.","completion":"if (doc.IsWorkshared)\n{\n    TransactWithCentralOptions tco = new TransactWithCentralOptions();\n    SynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\n    swcOpts.Comment = \"Design update\";\n    swcOpts.SaveLocalAfter = true;\n    doc.SynchronizeWithCentral(tco, swcOpts);\n}"}
{"prompt":"Crea una nota de texto con un texto, una ubicación y un elemento de destino dados.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"REVISAR CLASH\", opts);\n        if (note != null)\n        {\n            Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n            leader.End = targetRef.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un DirectShape con forma de caja de 2x2x2 metros.","completion":"TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"Caja DirectShape\";\n}"}
{"prompt":"Duplicate the 'Level 2' plan view and make it a view template.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Level 2\");\n    string templateName = \"Level 2 Template\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ Direct conversion to a template may not be available in older APIs.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Añade los campos 'Nivel', 'Marca' y 'Volumen' a la tabla de pilares.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\") || s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Cambia el nombre de todas las familias cargadas que contengan 'Métrica' a 'Imperial'.","completion":"List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Métrica\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"Métrica\", \"Imperial\");\n}"}
{"prompt":"Create an extrusion roof with an arc profile.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Create a 'Concrete-Rectangular 30x60' column at each grid intersection.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Concrete-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Set the 'Comments' parameter for all doors on Level 1 to 'Fire Rating - 90 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Fire Rating - 90 min\");\n    }\n}"}
{"prompt":"Cambia el nombre de la familia de una puerta seleccionada a 'Puerta_Nueva'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una puerta\");\n\nif (pickedRef != null)\n{\n    FamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (door != null && door.Symbol != null)\n    {\n        Family family = door.Symbol.Family;\n        if (family != null)\n        {\n            family.Name = \"Puerta_Nueva\";\n        }\n    }\n}"}
{"prompt":"Crea un nuevo nivel llamado 'Planta Sótano' a una elevación de -5 metros.","completion":"string levelName = \"Planta Sótano\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Get all walls on Level 1 that are structural.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Copia todos los elementos del Nivel 1 al Nivel 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\n\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if (elementsToCopy.Count > 0)\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Crea un SketchPlane en el Nivel 2.","completion":"using (Transaction t = new Transaction(doc, \"Create Sketch Plane\"))\n{\n    t.Start();\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\n\n    if (level2 != null)\n    {\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, new XYZ(0, 0, level2.Elevation));\n        SketchPlane skp = SketchPlane.Create(doc, plane);\n    }\n    t.Commit();\n}"}
{"prompt":"Get the system type of a selected pipe.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a pipe\");\n\nPipingSystemType systemType = null;\nif (pickedRef != null)\n{\n    Pipe pipe = doc.GetElement(pickedRef.ElementId) as Pipe;\n    if (pipe != null)\n    {\n        Parameter systemTypeParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        if (systemTypeParam != null && systemTypeParam.HasValue)\n        {\n            systemType = doc.GetElement(systemTypeParam.AsElementId()) as PipingSystemType;\n        }\n    }\n}\n"}
{"prompt":"Encuentra todos los muros que miden más de 3 metros de alto.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nList<ElementId> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds().ToList();"}
{"prompt":"Create an MEP space for each room on Level 1.","completion":"using (Transaction t = new Transaction(doc, \"Create MEP Spaces\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n\n    if (level1 != null)\n    {\n        List<Room> roomsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level1.Id)).Cast<Room>().ToList();\n        foreach(Room room in roomsOnLevel1)\n        {\n           \/\/ The direct creation of MEP spaces from rooms might not be available in this specific API version.\n           \/\/ Placeholder comment for the intended logic.\n           \/\/ Space.Create(doc, room, null);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén una lista de todas las vistas de planta del proyecto.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}
{"prompt":"Import a georeferenced survey from a LandXML file.","completion":"\/\/ The Revit API in the provided context does not support direct LandXML import.\n\/\/ This functionality typically requires additional add-ins like the Site Designer, which are not available here.\n\/\/ As a placeholder, this code will show how to create a simple topography surface from a list of points.\nusing(Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(50, 0, 5));\n    points.Add(new XYZ(0, 50, 10));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Add a horizontal reference plane named 'Centerline A'.","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"Centerline A\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un suelo con un contorno de 9 por 9 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Create a detail group with the selected detail items.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Typical Detail 1\";\n        }\n    }\n}"}
{"prompt":"Create a new 6mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Verifica si una tubería está conectada en ambos extremos.","completion":"Pipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nbool isFullyConnected = false;\n\nif (pipe != null)\n{\n    isFullyConnected = pipe.ConnectorManager.UnusedConnectors.IsEmpty;\n}\n"}
{"prompt":"Oculta todos los muros que sean más cortos de 2 metros.","completion":"double lengthThreshold = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nList<ElementId> shortWallIds = new List<ElementId>();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    foreach(Wall wall in walls)\n    {\n        Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n        if(lengthParam != null && lengthParam.HasValue && lengthParam.AsDouble() < lengthThreshold)\n        {\n            shortWallIds.Add(wall.Id);\n        }\n    }\n    if (shortWallIds.Count > 0)\n    {\n        activeView.HideElements(shortWallIds);\n    }\n}"}
{"prompt":"Add a 79-degree elbow between two pipes.","completion":"using (Transaction t = new Transaction(doc, \"Add Elbow\"))\n{\n    t.Start();\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.ConnectorManager != null && p.ConnectorManager.UnusedConnectors.Size > 0).Take(2).ToList();\n\n    if (pipes.Count >= 2)\n    {\n        Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        \n        if (c1 != null && c2 != null)\n        {\n            doc.Create.NewElbowFitting(c1, c2);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Place a spot elevation on Level 1.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    View activeView = doc.ActiveView;\n\n    if (lvl1 != null && activeView != null)\n    {\n        Reference levelRef = new Reference(lvl1);\n        XYZ origin = new XYZ(5\/0.3048, 5\/0.3048, lvl1.Elevation);\n        XYZ leaderEnd = origin + new XYZ(2\/0.3048, 2\/0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, levelRef, origin, origin, leaderEnd, origin, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una escalera entre Nivel 1 y Nivel 2.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    \/\/ TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    \/\/ Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Inside the family editor, create a vertical reference plane named 'Center Axis'.","completion":"string rpName = \"Center Axis\";\nXYZ start = new XYZ(0, UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0);\nXYZ end = new XYZ(0, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nXYZ normal = XYZ.BasisX;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = rpName;\n    }\n}"}
{"prompt":"Crea un techo por extrusión con una pendiente del 8%.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10 \/ 0.3048, 0, 1 \/ 0.3048)));\n        \n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        \n        if (refPlane != null)\n        {\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10 \/ 0.3048);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get a list of all annotation families.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Create a section view between points (0,0,0) and (12,8,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Place a camera in the active view.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        cameraView.Name = \"New Camera View\";\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"string newLevelName = \"Mezzanine\";\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Nivel 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Nivel 2\");\nif (lvl1 != null && lvl2 != null)\n{\ndouble midElevation = (lvl1.ProjectElevation + lvl2.ProjectElevation) \/ 2.0;\nLevel newLevel = Level.Create(doc, midElevation);\n    if(newLevel != null)\n    {\nnewLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Find the structural framing element with the mark 'B-101'.","completion":"string markValue = \"B-101\";\nElement framingElement = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_StructuralFraming)\n    .WhereElementIsNotElementType()\n    .FirstOrDefault(e => {\n        Parameter p = e.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        return p != null && p.AsString() == markValue;\n    });"}
{"prompt":"Crea un grupo de detalles con los elementos de detalle seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Detalle Típico 1\";\n        }\n    }\n}"}
{"prompt":"Crea 4 ejes en sentido vertical separados 10 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<4; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Get all subcategories from the Walls category.","completion":"Category wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategoryNameMap subcategories = wallCat.SubCategories;"}
{"prompt":"Create a 27cm 'Double-Wall' type and then generate a wall of that type.","completion":"string newTypeName = \"Double-Wall\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == newTypeName) as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if(newWallType!=null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if(cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(0.3, UnitTypeId.Meters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nLine wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\nWall.Create(doc, wallCurve, newWallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);"}
{"prompt":"Pon un pilar estructural en las coordenadas 10,5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Create a 'Generic - 199mm' wall on 'Level 1' from (0,0) to (11,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Generic - 200mm\") as WallType;\nXYZ startPoint = new XYZ(0, 0, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nWall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);"}
{"prompt":"Create 10 architectural worksets.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_WALLS\", \"TAD_ARQ_FINISHES\", \"TAD_ARQ_CEILINGS\", \"TAD_ARQ_FLOORS\", \"TAD_ARQ_RAILINGS\", \"TAD_ARQ_WINDOWS\", \"TAD_ARQ_CARPENTRY\", \"TAD_ARQ_FURNITURE\", \"TAD_ARQ_PLUMBING\", \"TAD_ARQ_EXTERIOR\" };\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}"}
{"prompt":"Crea 5 worksets para las disciplinas de ingeniería.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Crea una nueva tabla de planificación para ventanas que incluya Marca de Tipo, Ancho y Alto.","completion":"string scheduleName = \"Tabla de Ventanas\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}
{"prompt":"Genera una cuadrícula de columnas 4x5 con separación de 9 metros.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Get all walls on Level 1 that are structural.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Crea una nueva hoja A3 y colócale una leyenda.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Establece el parámetro 'Marca' de todos los muros seleccionados a 'M-EXT-1'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly) \n                {\n                    p.Set(\"M-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a curtain wall 6 meters wide and 4 meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Crea una nueva tabla de planificación para ventanas que incluya Marca de Tipo, Ancho y Alto.","completion":"string scheduleName = \"Tabla de Ventanas\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}
{"prompt":"Create a new schedule for Structural Columns.","completion":"string scheduleName = \"Structural Column Schedule\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Crea un codo en T entre dos tuberías que se intersecan.","completion":"\/\/ No se proporciona código para esta función específica debido a la necesidad de selección interactiva y manejo de casos complejos.\n\/\/ Este escenario involucra la selección de elementos específicos y el uso de métodos de creación que dependen de la geometría existente."}
{"prompt":"Assign the 'Steel' material to the first layer of a wall type.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"Steel\"));\n\n    if (wallType != null && steel != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, steel.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Hide all annotation elements in the active view.","completion":"if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}
{"prompt":"Align the face of one wall with the face of another.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Face, \"Select the target face (stationary)\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Face, \"Select the face to move\");\nView activeView = doc.ActiveView;\n\nif (ref1 != null && ref2 != null && activeView != null)\n{\n    doc.Create.NewAlignment(activeView, ref1, ref2);\n}"}
{"prompt":"Create a Reflected Ceiling Plan view for Level 1.","completion":"string levelName = \"Level 1\";\nstring viewName = \"Level 1 Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Crea un pilar del tipo 'Hormigón-Rectangular 34x52' en cada intersección de la rejilla.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Hormigón-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Change the visual style of the active view to 'Hidden Line'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}
{"prompt":"Crea un techo por extrusión con un perfil en arco.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén todos los muros del Nivel 1 que son estructurales.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level1 != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Exporta el documento a un archivo IFC con la versión IFC4x3.","completion":"string folderPath = \"C:\/RevitExports\/\";\nstring fileName = doc.Title + \"_IFC4x3.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4x3;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Encuentra todas las vistas que no tienen una plantilla de vista asignada.","completion":"List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId.Equals(ElementId.InvalidElementId)).ToList();"}
{"prompt":"Genera un equipo eléctrico en X=1,Y=1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && panelSymbol != null)\n{\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Create a section view using a 11x10x3 meter box.","completion":"ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\n\nif (sectionVFT != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(0,0,0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}
{"prompt":"Create a DirectShape topography from a list of points.","completion":"List<XYZ> points = new List<XYZ>\n{\n    new XYZ(0,0,0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0)\n};\nTessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[0], points[1], points[2]}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[1], points[3], points[2]}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_Topography));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"Topography DirectShape\";\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-82' y establece su resistencia al fuego a '105 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Puerta RF-90\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra todas las vistas de sección en el proyecto.","completion":"List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}
{"prompt":"Duplicate level 1 with a 3m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Cambia el tipo de una losa por uno que contenga 'Concreto'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concreto\") || ft.Name.Contains(\"Concrete\"));\n\nif (floorToChange != null && newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Tag all rooms with their area.","completion":"using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(locPoint.Point.X, locPoint.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a floor with a circular hole in the center.","completion":"using (Transaction t = new Transaction(doc, \"Create Floor with Hole\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\n    if (level != null && floorType != null)\n    {\n        XYZ p1 = new XYZ(-10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(-10 \/ 0.3048, 10 \/ 0.3048, 0);\n        CurveLoop outerLoop = new CurveLoop();\n        outerLoop.Append(Line.CreateBound(p1, p2));\n        outerLoop.Append(Line.CreateBound(p2, p3));\n        outerLoop.Append(Line.CreateBound(p3, p4));\n        outerLoop.Append(Line.CreateBound(p4, p1));\n\n        XYZ center = XYZ.Zero;\n        double radius = 2 \/ 0.3048;\n        CurveLoop innerLoop = new CurveLoop();\n        innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n        innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n        Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea columnas en cada intersección de ejes.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Calcula el área total de todas las habitaciones.","completion":"double totalArea = 0.0;\nList<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nforeach (Room room in rooms)\n{\n    totalArea += room.Area;\n}"}
{"prompt":"Create a new window schedule that includes Type Mark, Width, and Height.","completion":"string scheduleName = \"Window Schedule\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}
{"prompt":"Apply the 'X-Ray' visual style to the active 3D view.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe;\n}"}
{"prompt":"Model a cable tray between two points.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (trayType != null && level != null)\n{\n    XYZ p1 = new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters)); \n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}
{"prompt":"Create a new elevation view looking north.","completion":"using (Transaction t = new Transaction(doc, \"Create North Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 2);\n            if (aev != null)\n            {\n                aev.Name = \"North Elevation\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a structural beam between (0,0,3) and (5,0,3) on Level 2.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Añade montantes a todas las líneas de rejilla de un muro cortina.","completion":"using (Transaction t = new Transaction(doc, \"Add Mullions\"))\n{\n    t.Start();\n    Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\n    MullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\n\n    if (curtainWall != null && mullionType != null)\n    {\n        CurtainGrid grid = curtainWall.CurtainGrid;\n        if (grid != null)\n        {\n            foreach (ElementId gridLineId in grid.GetVGridLineIds())\n            {\n                CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n                if(line != null) grid.AddMullions(line, mullionType);\n            }\n            foreach (ElementId gridLineId in grid.GetUGridLineIds())\n            {\n                CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n                if(line != null) grid.AddMullions(line, mullionType);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un ensamblaje a partir de los elementos seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"Nuevo Ensamblaje\";\n    }\n}"}
{"prompt":"Create a section view between points (0,0,0) and (12,10,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Crea un pilar del tipo 'Hormigón-Rectangular 30x60' en cada intersección de la rejilla.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Hormigón-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Set the sill height of all windows to 1 meter.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un pilar del tipo 'Hormigón-Rectangular 25x52' en cada intersección de la rejilla.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Hormigón-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}
{"prompt":"Importa topografía georreferenciada desde un archivo LandXML.","completion":"\/\/ The Revit API in the provided context does not support direct LandXML import.\n\/\/ This functionality typically requires additional add-ins like the Site Designer, which are not available here.\n\/\/ As a placeholder, this code will show how to create a simple topography surface from a list of points.\nusing(Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(50, 0, 5));\n    points.Add(new XYZ(0, 50, 10));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Place a material tag on a wall face.","completion":"using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select a face to tag\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Select the tag location\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}
{"prompt":"Find out who the owner of a selected element is.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element\");\n\nWorksharingTooltipInfo info = null;\nif (pickedRef != null)\n{\n    info = WorksharingUtils.GetWorksharingTooltipInfo(doc, pickedRef.ElementId);\n}\n"}
{"prompt":"Crea una viga estructural entre (0,0,3) y (6,0,3) en el Nivel 2.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Crea un nuevo tipo de tubería con material de Cobre.","completion":"string newTypeName = \"Tubería de Cobre\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial copper = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Copper\") || m.Name.Contains(\"Cobre\")) as Material;\n\nif (pipeTypeToDuplicate != null && copper != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(copper.Id);\n    }\n}"}
{"prompt":"Create a new A3 sheet and place a legend on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra un muro buscando el valor 'W-01' en su parámetro de Marca.","completion":"string markValue = \"W-01\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue);\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().WherePasses(filter).FirstOrDefault() as Wall;"}
{"prompt":"Create a new material named 'Reflective Glass' and assign it a base color.","completion":"string materialName = \"Reflective Glass\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240); \/\/ A light bluish color for glass\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Create a door 0.9m wide and 2.1m high in the wall.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original y asegura un nombre único\n    string newTypeName = $\"Door {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters), UnitTypeId.Meters)}m x {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(2.1, UnitTypeId.Meters), UnitTypeId.Meters)}m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(2.1, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea 5 worksets para las disciplinas de ingeniería.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Create a structural foundation slab 40cm thick.","completion":"using (Transaction t = new Transaction(doc, \"Create Foundation Slab\"))\n{\n    t.Start();\n    Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    FloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n    if(slabTypeToDuplicate != null && foundationLevel != null)\n    {\n        string newTypeName = \"Foundation Slab 40cm\";\n        FloorType newSlabType = slabTypeToDuplicate.Duplicate(newTypeName) as FloorType;\n        if(newSlabType != null)\n        {\n            CompoundStructure cs = newSlabType.GetCompoundStructure();\n            if (cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 400 \/ 304.8);\n                newSlabType.SetCompoundStructure(cs);\n                XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n                Floor.Create(doc, new List<CurveLoop>{profile}, newSlabType.Id, foundationLevel.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Find the host of a face-based light fixture.","completion":"FamilyInstance lightFixture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().Cast<FamilyInstance>().FirstOrDefault(fi => fi.HostFace != null);\n\nElement host = null;\nif (lightFixture != null)\n{\n    Reference hostFaceRef = lightFixture.HostFace;\n    if (hostFaceRef != null)\n    {\n        host = doc.GetElement(hostFaceRef.ElementId);\n    }\n}"}
{"prompt":"Crea un muro cortina de 6 metros de ancho y 4 metros de alto.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Obtén todas las subcategorías de la categoría Puertas.","completion":"Category doorCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors);\nCategoryNameMap subcategories = doorCat.SubCategories;"}
{"prompt":"Añade el prefijo 'PLANTA-' a todas las vistas de plano.","completion":"string prefix = \"PLANTA-\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Dibuja una pared de 5m de largo por 3m de altura.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Crea un nivel 'Roof Terrace' a 18m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(18, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Cambia el tipo de una losa por uno que contenga 'Concreto'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concreto\") || ft.Name.Contains(\"Concrete\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Exporta la geometría de un elemento seleccionado a un archivo SAT.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para exportar\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        string folderPath = \"C:\/RevitExports\/\";\n        string fileName = elem.Name + \".sat\";\n        SATExportOptions options = new SATExportOptions();\n        doc.Export(folderPath, fileName, new List<ElementId>{elem.Id}, options);\n    }\n}"}
{"prompt":"Apply 25mm thermal insulation to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Activa todos los FamilySymbol del proyecto.","completion":"List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (FamilySymbol sym in symbols)\n{\n    if (!sym.IsActive)\n    {\n        sym.Activate();\n    }\n}"}
{"prompt":"Crea vigas entre las columnas alineadas horizontalmente.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Genera ocho rejillas horizontales con una separación de 9m.","completion":"double separation = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Coloca una cámara en la vista activa.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        cameraView.Name = \"Nueva Vista de Cámara\";\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}
{"prompt":"Move a wall 5 meters to the right.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (wall != null)\n{\n    XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    ElementTransformUtils.MoveElement(doc, wall.Id, translation);\n}"}
{"prompt":"Create a new door type named 'FR-88 Door' and set its fire rating to '84 min'.","completion":"string newTypeName = \"FR-90 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = null;\nif (doorTypeToDuplicate != null)\n{\n    newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"90 min\");\n        }\n    }\n}"}
{"prompt":"Get a list of all material names.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 300mm' con un grosor de 30cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Muro Genérico 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nivel 'Roof Terrace' a 15m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Create a new wall type 'Generic Wall 300mm' with a thickness of 30cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Generic Wall 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra todos los muros con más de 3 metros de altura.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Create a new 6mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una escalera entre Nivel 1 y Nivel 2.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    \/\/ TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    \/\/ Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Duplicate the 'Level 2' plan view and make it a view template.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Level 2\");\n    string templateName = \"Level 2 Template\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ In older APIs, direct conversion to a template may not be available.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}
{"prompt":"Find all views that do not have an assigned view template.","completion":"List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId).ToList();"}
{"prompt":"Importa una topografía desde un archivo CSV.","completion":"using (Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    \/\/ CSV file reading is not directly supported by a single API call.\n    \/\/ You would typically read the file line by line, parse the XYZ coordinates,\n    \/\/ and then use the TopographySurface.Create method with a list of points.\n    \/\/ As a placeholder, here's how to create a simple topography from a list of points:\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(10, 0, 0));\n    points.Add(new XYZ(0, 10, 0));\n    points.Add(new XYZ(10, 10, 5));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Encuentra el elemento de pórtico estructural con la marca 'B-83'.","completion":"string markValue = \"B-101\";\nElement framingElement = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_StructuralFraming)\n    .WhereElementIsNotElementType()\n    .FirstOrDefault(e => {\n        Parameter p = e.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        return p != null && p.AsString() == markValue;\n    });"}
{"prompt":"Añade el prefijo 'PLANTA-' a todas las vistas de plano.","completion":"string prefix = \"PLANTA-\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Change the visual style of the active view to 'Hidden Line'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}
{"prompt":"Cambia el tipo de una losa por uno que contenga 'Concreto'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concreto\") || ft.Name.Contains(\"Concrete\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 122mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 150mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}
{"prompt":"Change the wall type of an existing wall to one containing 'Thermal Insulation'.","completion":"Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(x => x.Name.Contains(\"Thermal Insulation\"));\n\nif (wallToChange != null && newType != null)\n{\n    wallToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Añade un plano de referencia horizontal llamado 'Eje Central A'.","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"Eje Central A\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Set the 'Mark' parameter of all selected walls to 'W-EXT-1'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra todos los muros con más de 4 metros de altura.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 5' a una elevación de 14 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(14, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 4\";\n}"}
{"prompt":"Set the sill height of all windows to 1 meter.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get all subcategories from the Doors category.","completion":"Category doorCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors);\nCategoryNameMap subcategories = doorCat.SubCategories;"}
{"prompt":"Encuentra todas las familias de anotación y cuenta cuántas hay.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}
{"prompt":"Create 4 vertical grids spaced 10 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<4; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Oculta todas las categorías de anotación en la vista activa.","completion":"using (Transaction t = new Transaction(doc, \"Hide Annotation Categories\"))\n{\n    t.Start();\n    Categories categories = doc.Settings.Categories;\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        foreach(Category cat in categories)\n        {\n            if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n            {\n                 activeView.SetCategoryHidden(cat.Id, true);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Find all annotation families and count how many there are.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\nint count = annotationFamilies.Count;\n"}
{"prompt":"Exporta el documento a un archivo IFC con la versión IFC3x3.","completion":"string folderPath = \"C:\/RevitExports\/\";\nstring fileName = doc.Title + \"_IFC4x3.ifc\";\nif(System.IO.Directory.Exists(folderPath))\n{\n    IFCExportOptions options = new IFCExportOptions();\n    options.FileVersion = IFCVersion.IFC4x3;\n    doc.Export(folderPath, fileName, options);\n}"}
{"prompt":"Crea un tipo de muro 'Muro-Doble' de 30cm y luego crea un muro de ese tipo.","completion":"string newTypeName = \"Muro-Doble\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == newTypeName) as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if(newWallType!=null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if(cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(0.3, UnitTypeId.Meters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nLine wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\nWall.Create(doc, wallCurve, newWallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);"}
{"prompt":"Create a new window schedule that includes Type Mark, Width, and Height.","completion":"string scheduleName = \"Window Schedule\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}
{"prompt":"Create an 8-meter long foundation beam.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, StructuralType.Footing);\n}"}
{"prompt":"Ajusta todas las ventanas para que la altura del antepecho sea 1 metro.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a section view between points (0,0,0) and (10,10,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Find all views that do not have an assigned view template.","completion":"List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId.Equals(ElementId.InvalidElementId)).ToList();"}
{"prompt":"Duplicate the 'Generic - 150mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 150mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Ajusta todas las ventanas para que tengan la altura del antepecho a 766mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(766, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Create a 3D view with the section box enabled.","completion":"string viewName = \"3D View with Section Box\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Modela una bandeja de cables entre dos puntos.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (trayType != null && level != null)\n{\n    XYZ p1 = new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters)); \n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}
{"prompt":"Crea una nueva revisión y aplícala a la hoja activa.","completion":"Revision rev = Revision.Create(doc);\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (rev != null && sheet != null)\n{\n    rev.Description = \"Emitido para Construcción\";\n    rev.RevisionDate = DateTime.Now.ToString(\"yyyy-MM-dd\");\n    rev.IssuedBy = \"Departamento BIM\";\n    \n    ICollection<ElementId> revisions = sheet.GetAdditionalRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}
{"prompt":"Coloca una ventana de 1x1 metros en la pared más cercana.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original y asegura un nombre único\n    string newTypeName = $\"Window {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters), UnitTypeId.Meters)}m x {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitTypeId.Meters)}m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Generate a 4x5 column grid with 7-meter spacing.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Acota la longitud de un muro seleccionado por el usuario.","completion":"using (Transaction t = new Transaction(doc, \"Dimension Wall\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference wallRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro para acotar\");\n    if(wallRef != null)\n    {\n        Wall wall = doc.GetElement(wallRef) as Wall;\n        if(wall != null)\n        {\n            LocationCurve locCurve = wall.Location as LocationCurve;\n            Curve wallCurve = locCurve != null ? locCurve.Curve : null;\n            if(wallCurve != null && wallCurve is Line)\n            {\n                Line wallLine = wallCurve as Line;\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(doc.ActiveView, dimLine, refs);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new room on Level 1 at point (10, 10).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Exporta todas las hojas de un conjunto a un único PDF.","completion":"ViewSheetSet sheetSet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheetSet)).FirstOrDefault() as ViewSheetSet;\n\nif (sheetSet != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    PDFExportOptions options = new PDFExportOptions();\n    options.Combine = true;\n    options.FileName = sheetSet.Name;\n    List<ElementId> sheetIds = sheetSet.Views.Cast<ViewSheet>().Select(s => s.Id).ToList();\n    doc.Export(folderPath, sheetIds, options);\n}"}
{"prompt":"Place a spot elevation on a given face and view point.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select the top face of the floor\");\n\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && activeView != null)\n    {\n        XYZ pointOnFace = faceRef.GlobalPoint;\n        XYZ leaderEnd = pointOnFace + new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Find all doors on Level 2 that belong to the 'Single-Flush' family.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Single-Flush\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Find all doors on Level 1 using a combined filter.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nList<Element> doors = new List<Element>();\n\nif (level1 != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    doors = new FilteredElementCollector(doc).WherePasses(combinedFilter).ToList();\n}"}
{"prompt":"Generate a rectangular floor of 12x9 meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Cambia el tipo de una losa por uno que contenga 'Concreto'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concreto\") || ft.Name.Contains(\"Concrete\"));\n\nif (floorToChange != null && newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Place lighting posts every 10m along a 100m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Get the MEP space associated with the room 'Office 88'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Office 101\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Place a piece of furniture at coordinates (2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), furnitureSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    TextNoteType newType = null;\n    if (defaultType != null)\n    {\n        newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra todas las vistas de sección en el proyecto.","completion":"List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}
{"prompt":"Rename all plan views to start with 'ARCH_'.","completion":"string prefix = \"ARCH_\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Obtén la tabla de planificación 'Muros' y exporta sus datos a un archivo CSV.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s=>s.Name==\"Muros\");\n\nif (schedule != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(folderPath, \"Muros.csv\", options);\n}"}
{"prompt":"Obtén una lista de todas las familias de anotación.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Given a wall, get its materials and their volumes.","completion":"UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\n\nDictionary<string, double> materialVolumes = new Dictionary<string, double>();\nif (pickedRef != null)\n{\n    Wall wall = doc.GetElement(pickedRef) as Wall;\n    if (wall != null)\n    {\n        Parameter areaParam = wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED);\n        if (areaParam != null && areaParam.HasValue)\n        {\n            double wallArea = areaParam.AsDouble();\n            WallType wallType = wall.WallType;\n            if (wallType != null)\n            {\n                CompoundStructure cs = wallType.GetCompoundStructure();\n                if (cs != null)\n                {\n                    foreach(CompoundStructureLayer layer in cs.GetLayers())\n                    {\n                        Material material = doc.GetElement(layer.MaterialId) as Material;\n                        if(material != null)\n                        {\n                            double volume = layer.Width * wallArea;\n                            materialVolumes[material.Name] = volume;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Create a default 3D view.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n}"}
{"prompt":"Crea un suelo con un contorno de 10 por 8 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Crea una nota de texto con un texto, una ubicación y un elemento de destino dados.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"REVISAR CLASH\", opts);\n        if (note != null)\n        {\n            Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n            leader.End = targetRef.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a structural beam between (0,0,3) and (5,0,3) on Level 2.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Obtén una lista de todas las advertencias del proyecto.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\n"}
{"prompt":"Duplica el nivel 1 con un desfase de 3m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Create a section view between points (0,0,0) and (9,10,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Create a curtain wall 6 meters wide and 4 meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Obtén una lista de todas las vistas de planta del proyecto.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}
{"prompt":"Rotate a selected element 90 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 2.0);"}
{"prompt":"Obtén una lista de todas las familias de anotación.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Encuentra todas las vistas que no tienen una plantilla de vista asignada.","completion":"List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId).ToList();"}
{"prompt":"Coloca una cota de elevación en el Nivel 1.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    View activeView = doc.ActiveView;\n\n    if (lvl1 != null && activeView != null)\n    {\n        Reference levelRef = new Reference(lvl1);\n        XYZ origin = new XYZ(5\/0.3048, 5\/0.3048, lvl1.Elevation);\n        XYZ leaderEnd = origin + new XYZ(2\/0.3048, 2\/0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, levelRef, origin, origin, leaderEnd, origin, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Find all views that do not have an assigned view template.","completion":"List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId).ToList();"}
{"prompt":"Crea un techo por extrusión con una pendiente del 10%.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10 \/ 0.3048, 0, 1 \/ 0.3048)));\n        \n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        \n        if (refPlane != null)\n        {\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10 \/ 0.3048);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Duplicate the 'Level 2' plan view and make it a view template.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Level 2\");\n    string templateName = \"Level 2 Template\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ In older APIs, direct conversion to a template may not be available.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Import a CAD file named 'BasePlan.dwg' into the current view.","completion":"string filePath = \"C:\/CAD\/BasePlan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Add a horizontal grid line to a curtain wall at a height of 2 meters.","completion":"using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) \/ 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, 1.5 \/ 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Set the sill height of all windows to 1 meter.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-87' y establece su resistencia al fuego a '77 min'.","completion":"string newTypeName = \"Puerta RF-90\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = null;\nif (doorTypeToDuplicate != null)\n{\n    newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"90 min\");\n        }\n    }\n}"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-1'.","completion":"List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"WM-01\");\n  }\n}"}
{"prompt":"Create a Path of Travel between points (1,1) and (10,10) in the plan view.","completion":"\/\/ PathOfTravel.Create is likely inaccessible in this environment.\n\/\/ A comment is left as a placeholder for the intended functionality.\n\/*\nusing (Transaction t = new Transaction(doc, \"Create Path of Travel\"))\n{\n    t.Start();\n    ViewPlan viewPlan = doc.ActiveView as ViewPlan;\n\n    if (viewPlan != null && viewPlan.ViewType == ViewType.FloorPlan)\n    {\n        ElementId levelId = viewPlan.get_Parameter(BuiltInParameter.PLAN_VIEW_LEVEL).AsElementId();\n        Level level = doc.GetElement(levelId) as Level;\n        if (level != null)\n        {\n            XYZ startPoint = new XYZ(1 \/ 0.3048, 1 \/ 0.3048, level.Elevation);\n            XYZ endPoint = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, level.Elevation);\n            \/\/ PathOfTravel.Create(viewPlan, startPoint, endPoint);\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Create a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"FR-90 Door\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a text note with a leader pointing to a given element and location.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference target = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (target != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        opts.HorizontalAlignment = HorizontalTextAlignment.Left;\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"Review this element\", opts);\n        if (note != null)\n        {\n            Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n            leader.End = target.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una viga estructural entre (0,0,3) y (6,0,3) en el Nivel 2.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Create a text note with a leader pointing to a given element and location.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference target = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (target != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        opts.HorizontalAlignment = HorizontalTextAlignment.Left;\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"Review this element\", opts);\n        if (note != null)\n        {\n            Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n            leader.End = target.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Export the current 3D view to NWC for Navisworks.","completion":"View3D view3d = doc.ActiveView as View3D;\n\nif (view3d != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    string fileName = view3d.Name + \".nwc\";\n    NavisworksExportOptions options = new NavisworksExportOptions();\n    options.ExportScope = NavisworksExportScope.View;\n    options.ViewId = view3d.Id;\n    doc.Export(folderPath, fileName, options);\n}"}
{"prompt":"Rotate project north 28 degrees clockwise.","completion":"using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInDegrees = 30.0;\n        double angleInRadians = -(angleInDegrees * Math.PI \/ 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una losa de cimentación estructural de 36cm de espesor.","completion":"using (Transaction t = new Transaction(doc, \"Create Foundation Slab\"))\n{\n    t.Start();\n    Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    FloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n    if(slabTypeToDuplicate != null && foundationLevel != null)\n    {\n        string newTypeName = \"Losa Cimentación 40cm\";\n        FloorType newSlabType = slabTypeToDuplicate.Duplicate(newTypeName) as FloorType;\n        if(newSlabType != null)\n        {\n            CompoundStructure cs = newSlabType.GetCompoundStructure();\n            if (cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 400 \/ 304.8);\n                newSlabType.SetCompoundStructure(cs);\n                XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n                Floor.Create(doc, new List<CurveLoop>{profile}, newSlabType.Id, foundationLevel.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-76' y establece su resistencia al fuego a '75 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Puerta RF-90\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Aplica un color rojo a todas las ventanas en la vista activa.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(255, 0, 0));\n    ICollection<ElementId> windows = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().ToElementIds();\n    \n    foreach (ElementId windowId in windows)\n    {\n        activeView.SetElementOverrides(windowId, ogs);\n    }\n}"}
{"prompt":"Selecciona todos los muros del 'Nivel 2' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nList<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\nforeach(Wall wall in wallsOnLevel2)\n{\n    wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(\"REVISAR AISLAMIENTO\");\n}"}
{"prompt":"Create a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    TextNoteType newType = null;\n    if (defaultType != null)\n    {\n        newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new level 'Level 3' at an elevation of 12 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 3\";\n}"}
{"prompt":"Permite al usuario seleccionar un muro y obtén su ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Crea una viga estructural entre (0,0,3) y (5,0,3) en el Nivel 2.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Create a filled region with a 'Concrete' pattern.","completion":"using (Transaction t = new Transaction(doc, \"Create Filled Region\"))\n{\n    t.Start();\n    FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\"));\n    View activeView = doc.ActiveView;\n\n    if (regionType != null && activeView != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 0,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(0, 5 \/ 0.3048,0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n    }\n    t.Commit();\n}"}
{"prompt":"Align the centerlines of two user-selected walls.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first wall (the one that will move)\");\nReference r2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second wall (the reference)\");\n\nif (r1 != null && r2 != null)\n{\n    Wall w1 = doc.GetElement(r1) as Wall;\n    Wall w2 = doc.GetElement(r2) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (w1 != null && w2 != null && activeView != null)\n    {\n        LocationCurve lc1 = w1.Location as LocationCurve;\n        LocationCurve lc2 = w2.Location as LocationCurve;\n        if (lc1 != null && lc2 != null)\n        {\n            doc.Create.NewAlignment(activeView, lc1.Curve.Reference, lc2.Curve.Reference);\n        }\n    }\n}"}
{"prompt":"Ajusta todas las ventanas para que la altura del antepecho sea 1 metro.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un suelo con un hueco circular en el centro.","completion":"using (Transaction t = new Transaction(doc, \"Create Floor with Hole\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\n    if (level != null && floorType != null)\n    {\n        XYZ p1 = new XYZ(-10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(-10 \/ 0.3048, 10 \/ 0.3048, 0);\n        CurveLoop outerLoop = new CurveLoop();\n        outerLoop.Append(Line.CreateBound(p1, p2));\n        outerLoop.Append(Line.CreateBound(p2, p3));\n        outerLoop.Append(Line.CreateBound(p3, p4));\n        outerLoop.Append(Line.CreateBound(p4, p1));\n\n        XYZ center = XYZ.Zero;\n        double radius = 2 \/ 0.3048;\n        CurveLoop innerLoop = new CurveLoop();\n        innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n        innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n        Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea 10 worksets de arquitectura.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_MAM\", \"TAD_ARQ_ACA\", \"TAD_ARQ_PLA\", \"TAD_ARQ_PSO\", \"TAD_ARQ_HRE\", \"TAD_ARQ_ALU\", \"TAD_ARQ_CAR\", \"TAD_ARQ_MOB\", \"TAD_ARQ_PLO\", \"TAD_ARQ_EXT\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Duplica el nivel 1 con un desfase de 3m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Crea una vista 3D axonométrica orientada al Noroeste.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(-1, 1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(1, -1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = \"Vista 3D Noroeste\";\n    }\n}"}
{"prompt":"Get the IDs of all 4D views starting with 'Coord' for export.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Create a group from the current selection and move it 11 meters to the right.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    Group group = doc.Create.NewGroup(selectedIds);\n    if (group != null)\n    {\n        XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters), 0, 0);\n        ElementTransformUtils.MoveElement(doc, group.Id, translation);\n    }\n}"}
{"prompt":"Permite al usuario seleccionar un muro y obtén su ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Crea un espacio MEP para cada habitación en el Nivel 1.","completion":"using (Transaction t = new Transaction(doc, \"Create MEP Spaces\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n\n    if (level1 != null)\n    {\n        List<Room> roomsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level1.Id)).Cast<Room>().ToList();\n        foreach(Room room in roomsOnLevel1)\n        {\n           \/\/ The direct creation of MEP spaces from rooms might not be available in this specific API version.\n           \/\/ Placeholder comment for the intended logic.\n           \/\/ Space.Create(doc, room, null);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una familia 'in-situ' para un mostrador de recepción personalizado usando una extrusión.","completion":""}
{"prompt":"Temporarily isolate all furniture in the active view.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-96' y establece su resistencia al fuego a '85 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Puerta RF-90\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Change the type of a floor to one that contains 'Concrete'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concrete\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Create a filled region with a 'Concrete' pattern.","completion":"using (Transaction t = new Transaction(doc, \"Create Filled Region\"))\n{\n    t.Start();\n    FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\"));\n    View activeView = doc.ActiveView;\n\n    if (regionType != null && activeView != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 0,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(0, 5 \/ 0.3048,0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n    }\n    t.Commit();\n}"}
{"prompt":"Given a wall, find all pipes passing through it.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\n\nList<ElementId> intersectingPipes = new List<ElementId>();\nif (wallRef != null)\n{\n    Element wall = doc.GetElement(wallRef);\n    if (wall != null)\n    {\n        ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n        intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds().ToList();\n    }\n}\n"}
{"prompt":"Get all subcategories from the Doors category.","completion":"Category doorCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors);\nCategoryNameMap subcategories = doorCat.SubCategories;"}
{"prompt":"Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nView activeView = doc.ActiveView;\n\nif (furnitureCat != null && activeView != null)\n{\n    activeView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-96' y establece su resistencia al fuego a '81 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Puerta RF-90\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Duplica el nivel 1 con un desfase de 3m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Place all selected elements on the 'Facade' workset.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Facade\");\n        if(workset == null) workset = Workset.Create(doc, \"Facade\");\n\n        if (selectedIds != null && selectedIds.Count > 0 && workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null && !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Set the sill height of all windows to 1029mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(1029, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Encuentra todos los muros con más de 4 metros de altura.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 279mm' con un grosor de 30cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Muro Genérico 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Dibuja una región rellena con patrón diagonal.","completion":"using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n\n    if (activeView != null && fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                XYZ p1 = new XYZ(0,0,0);\n                XYZ p2 = new XYZ(5 \/ 0.3048,0,0);\n                XYZ p3 = new XYZ(5 \/ 0.3048,5 \/ 0.3048,0);\n                XYZ p4 = new XYZ(0,5 \/ 0.3048,0);\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(p1,p2));\n                profile.Append(Line.CreateBound(p2,p3));\n                profile.Append(Line.CreateBound(p3,p4));\n                profile.Append(Line.CreateBound(p4,p1));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop>{profile});\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Set the sill height of all windows to 1 meter.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Insert a window 1m wide and 1.2m high into a wall.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original y asegura un nombre único\n    string newTypeName = $\"Window {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters), UnitTypeId.Meters)}m x {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters), UnitTypeId.Meters)}m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create a new pipe type named 'Steel Pipe' with 'Steel, Carbon' material.","completion":"string newTypeName = \"Steel Pipe\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Steel, Carbon\") as Material;\n\nif (pipeTypeToDuplicate != null && steel != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(steel.Id);\n    }\n}"}
{"prompt":"Crea un techo por contorno en el 'Nivel de Cubierta'.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel de Cubierta\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n    if(roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20,0,0), new XYZ(20,30,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20,30,0), new XYZ(0,30,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Create a wall on Level 1 from (0,0,0) to (5,0,0) with a height of 5 meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    Line wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    double height = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Get a list of all annotation families.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Crea una vista de sección llamada 'Sección Longitudinal'.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-1, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    \n    if (sectionView != null)\n    {\n        sectionView.Name = \"Sección Longitudinal\";\n    }\n}"}
{"prompt":"Obtén una lista de todas las familias de anotación.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Get all walls from a linked model that intersect with a bounding box.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\nList<Element> linkedWalls = new List<Element>();\n\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    if (linkDoc != null)\n    {\n        BoundingBoxXYZ bbox = new BoundingBoxXYZ();\n        bbox.Min = new XYZ(0,0,0);\n        bbox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(bbox.Min, bbox.Max));\n        linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToList();\n    }\n}\n"}
{"prompt":"Create an in-place family for a custom reception desk using an extrusion.","completion":""}
{"prompt":"Add a tag to the column closest to the origin.","completion":"using (Transaction t = new Transaction(doc, \"Tag Column\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n        LocationPoint lp = c.Location as LocationPoint;\n        return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n    }).FirstOrDefault();\n\n    if (activeView != null && column != null)\n    {\n        LocationPoint loc = column.Location as LocationPoint;\n        if (loc != null)\n        {\n            IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una vista de sección entre los puntos (0,0,0) y (10,10,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Find all section views in the project.","completion":"List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}
{"prompt":"Crea una abertura rectangular en un suelo.","completion":"using (Transaction t = new Transaction(doc, \"Create Opening\"))\n{\n    t.Start();\n    Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\n\n    if (floor != null)\n    {\n        XYZ p1 = new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(3 \/ 0.3048, 1 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(3 \/ 0.3048, 3 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(1 \/ 0.3048, 3 \/ 0.3048, 0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1, p2));\n        profile.Append(Line.CreateBound(p2, p3));\n        profile.Append(Line.CreateBound(p3, p4));\n        profile.Append(Line.CreateBound(p4, p1));\n        doc.Create.NewOpening(floor, profile, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Pon un pilar estructural en las coordenadas 9,4.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Crea una cimentación de viga de 8 metros de largo.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, StructuralType.Footing);\n}"}
{"prompt":"Insert a 5-meter truss between two points.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(6 \/ 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-1'.","completion":"List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"WM-01\");\n  }\n}"}
{"prompt":"Create an electrical circuit connecting light fixtures to a panel.","completion":"using (Transaction t = new Transaction(doc, \"Create Electrical Circuit\"))\n{\n    t.Start();\n    FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n    List<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\n    if (panel != null && fixtureIds.Count > 0)\n    {\n        ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n        if(electricalSystem != null)\n        {\n            electricalSystem.SelectPanel(panel);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Find all doors on Level 2 that belong to the 'Single-Flush' family.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Single-Flush\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Create a new schedule for Structural Columns.","completion":"string scheduleName = \"Structural Column Schedule\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Create a structural column at position X=9, Y=5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Temporarily isolate the selected elements in the active view.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToIsolate = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToIsolate.Count > 0)\n{\n    activeView.IsolateElementsTemporary(idsToIsolate);\n}"}
{"prompt":"Get the total length of all walls in the project.","completion":"double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}
{"prompt":"Apply the 'X-Ray' visual style to the active 3D view.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe; \/\/ Simulates 'X-Ray' effect\n}"}
{"prompt":"Cambia el tipo de una losa seleccionada a 'Concreto 13cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 15cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Obtén todas las familias de puertas cargadas en el proyecto.","completion":"List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Inserta una ventana de 1 metro de ancho y 1 metros de alto en un muro, creando un nuevo tipo si es necesario.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original\n    string newTypeName = $\"Window 1.0m x 1.2m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    \/\/ Activa el nuevo tipo si no lo está\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    if(widthParam != null) widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n    if(heightParam != null) heightParam.Set(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n\n    \/\/ Obtén la información necesaria para la inserción\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        \/\/ Inserta una instancia del NUEVO tipo\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Pinta la cara interior de los muros exteriores con 'Pintura Blanca'.","completion":"using (Transaction t = new Transaction(doc, \"Paint Walls\"))\n{\n    t.Start();\n    Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Pintura Blanca\");\n    var exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior).ToList();\n\n    if (paintMaterial != null)\n    {\n        foreach (Wall w in exteriorWalls)\n        {\n            IList<Reference> interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n            if(interiorFaceRefs.Count > 0)\n            {\n                Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n                if (interiorFace != null)\n                {\n                    doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Move the project base point 100 meters to the north.","completion":"using (Transaction t = new Transaction(doc, \"Move Project Base Point\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        XYZ translation = new XYZ(0, 100 \/ 0.3048, 0);\n        ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una apertura de hueco (shaft) que atraviese desde el Nivel 1 al Nivel 3.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft Opening\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 3\");\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p2 = new XYZ(8 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p3 = new XYZ(8 \/ 0.3048, 8 \/ 0.3048,0);\n        XYZ p4 = new XYZ(5 \/ 0.3048, 8 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra todos los muros que no tienen nivel base asignado.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Hide the selected elements in the active view.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToHide = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToHide.Count > 0)\n{\n    activeView.HideElements(idsToHide);\n}"}
{"prompt":"Crea una vista de planta para el 'Nivel 3'.","completion":"string levelName = \"Nivel 3\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Create a stair between Level 1 and Level 2.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    \/\/ TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    \/\/ Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Get all door families loaded in the project.","completion":"List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Coloca una ventana de 1x1.2 metros en la pared más cercana.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original y asegura un nombre único\n    string newTypeName = $\"Window {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters), UnitTypeId.Meters)}m x {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters), UnitTypeId.Meters)}m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Open a family, add a type parameter 'Material Code', and save it.","completion":""}
{"prompt":"Cambia el nombre de todas las vistas de planta para que empiecen con 'ARQ_'.","completion":"string prefix = \"ARQ_\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Modela una bandeja de cables entre dos puntos.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(trayType != null && level != null)\n{\n    XYZ start = new XYZ(0,10,3);\n    XYZ end = new XYZ(15,10,3);\n    CableTray.Create(doc, trayType.Id, start, end, level.Id);\n}"}
{"prompt":"Crea una nueva tabla de planificación para Pilares Estructurales.","completion":"string scheduleName = \"Tabla de Pilares Estructurales\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Encuentra todas las familias de anotación y cuenta cuántas hay.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\nint count = annotationFamilies.Count;\n"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 265mm' con un grosor de 29cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Muro Genérico 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Insert a window 1m wide and 1m high into a wall.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original y asegura un nombre único\n    string newTypeName = $\"Window {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters), UnitTypeId.Meters)}m x {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitTypeId.Meters)}m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Insert a 6-meter truss between two points.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(6 \/ 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Place a piece of furniture at coordinates (2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), furnitureSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Crea una nueva tabla de planificación para Pilares Estructurales.","completion":"string scheduleName = \"Tabla de Pilares Estructurales\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Find all walls with the comment 'Review'.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Review\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Crea un ensamblaje a partir de los elementos seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"Nuevo Ensamblaje\";\n    }\n}"}
{"prompt":"Crea una apertura de hueco vertical (shaft) desde el nivel base hasta el nivel más alto.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(2 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(2 \/ 0.3048, 5 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 93' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Aísla temporalmente la categoría de Puertas en la vista activa.","completion":"ElementId doorCategoryId = new ElementId(BuiltInCategory.OST_Doors);\nICollection<ElementId> categoryIds = new List<ElementId> { doorCategoryId };\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateCategoriesTemporary(categoryIds);\n}"}
{"prompt":"Crea una topografía DirectShape a partir de una lista de puntos.","completion":"List<XYZ> points = new List<XYZ>\n{\n    new XYZ(0,0,0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0)\n};\nTessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[0], points[1], points[2]}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[1], points[3], points[2]}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_Topography));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"Topografía DirectShape\";\n}"}
{"prompt":"Create a global length parameter named 'CorridorWidth' with a value of 1.2m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters)));\n}"}
{"prompt":"Create a new Level named 'Level 4' at an elevation of 12 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 4\";\n}"}
{"prompt":"Rename the active view to 'Working View'.","completion":"string newName = \"Working View\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Elimina todas las líneas de detalle en la vista activa.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection<ElementId> detailLines = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(DetailLine)).ToElementIds();\n    if (detailLines.Count > 0)\n    {\n        doc.Delete(detailLines);\n    }\n}"}
{"prompt":"Coloca postes de iluminación cada 9m en un camino de 85m.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Duplicate the 'Level 2' plan view and make it a view template.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Level 2\");\n    string templateName = \"Level 2 Template\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ In older APIs, direct conversion to a template may not be available.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Copy all walls from Level 1 to Level 2.","completion":"using (Transaction t = new Transaction(doc, \"Copy Walls\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\n    if (level1 != null && level2 != null)\n    {\n        ICollection<ElementId> wallsToCopy = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(e => (e as Wall) != null && (e as Wall).LevelId.Equals(level1.Id)).Select(e => e.Id).ToList();\n        double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n        XYZ translation = new XYZ(0, 0, elevationDiff);\n        if (wallsToCopy.Count > 0)\n        {\n            ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new wall type 'Generic Wall 316mm' with a thickness of 33cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Generic Wall 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Place lighting posts every 9m along a 83m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Tag all rooms with their area.","completion":"using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint loc = room.Location as LocationPoint;\n            if(loc != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(loc.Point.X, loc.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a section view using a 10x10x3 meter box.","completion":"ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\n\nif (sectionVFT != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(0,0,0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}
{"prompt":"Crea 8 ejes horizontales separados por 10 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Export the model to IFC4 format for coordination.","completion":"string folderPath = \"C:\/RevitExports\/\";\nstring fileName = doc.Title + \"-Coordination.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Get a list of all annotation families.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Aplica el estilo visual 'Rayos X' a la vista 3D activa.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe;\n}"}
{"prompt":"Start and commit a transaction for 'Modify Project'.","completion":""}
{"prompt":"Add the 'Level', 'Mark', and 'Volume' fields to the column schedule.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-1'.","completion":"List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"WM-01\");\n  }\n}"}
{"prompt":"Oculta todos los elementos de anotación en la vista activa.","completion":"if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}
{"prompt":"Crea un workset llamado 'Estructura'.","completion":"string wsName = \"Estructura\";\nWorkset newWorkset = Workset.Create(doc, wsName);\n"}
{"prompt":"Importa un archivo CAD llamado 'BasePlan.dwg' en la vista actual.","completion":"string filePath = \"C:\/CAD\/BasePlan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Inserta una nota de texto con 'Revisar' en la vista actual.","completion":"View activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    XYZ position = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\n    TextNote.Create(doc, activeView.Id, position, \"Revisar\", defaultTypeId);\n}"}
{"prompt":"Coloca la vista 'Nivel 1' en el centro de la hoja activa.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 1\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null && activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) \/ 2, (sheetBox.Min.V + sheetBox.Max.V) \/ 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Crea un DirectShape esférico con un radio de 5 metros.","completion":"using (Transaction t = new Transaction(doc, \"Create Sphere DirectShape\"))\n{\n    t.Start();\n    double radius = 5 \/ 0.3048;\n    List<GeometryObject> solids = new List<GeometryObject>();\n    Frame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\n    Arc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\n    Line line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\n    Solid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\n    solids.Add(sphere);\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\n    if (ds != null)\n    {\n        ds.SetShape(solids);\n        ds.Name = \"Esfera DirectShape\";\n    }\n    t.Commit();\n}"}
{"prompt":"Apply the 'X-Ray' visual style to the active 3D view.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe;\n}"}
{"prompt":"Create a new linear dimension type with blue text and 2mm size.","completion":"using (Transaction t = new Transaction(doc, \"Create Dimension Type\"))\n{\n    t.Start();\n    string newTypeName = \"Blue Dimension 2mm\";\n    DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\n    if (linearDimType != null)\n    {\n        DimensionType newDimType = linearDimType.Duplicate(newTypeName) as DimensionType;\n        if (newDimType != null)\n        {\n            Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n            Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(2 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Hide all walls shorter than 2 meters.","completion":"double lengthThreshold = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nList<ElementId> shortWallIds = new List<ElementId>();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    foreach(Wall wall in walls)\n    {\n        Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n        if(lengthParam != null && lengthParam.HasValue && lengthParam.AsDouble() < lengthThreshold)\n        {\n            shortWallIds.Add(wall.Id);\n        }\n    }\n    if (shortWallIds.Count > 0)\n    {\n        activeView.HideElements(shortWallIds);\n    }\n}"}
{"prompt":"Crea un nuevo tipo de texto de 6mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get a list of all annotation families.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Crea un ensamblaje a partir de los elementos seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"Nuevo Ensamblaje\";\n    }\n}"}
{"prompt":"Oculta todas las categorías de anotación en la vista activa.","completion":"using (Transaction t = new Transaction(doc, \"Hide Annotation Categories\"))\n{\n    t.Start();\n    Categories categories = doc.Settings.Categories;\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        foreach(Category cat in categories)\n        {\n            if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n            {\n                 activeView.SetCategoryHidden(cat.Id, true);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create an axonometric 3D view oriented to the Northwest.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(-1, 1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(1, -1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = \"3D View Northwest\";\n    }\n}"}
{"prompt":"Create an extrusion roof with a 9% slope.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10 \/ 0.3048, 0, 1 \/ 0.3048)));\n        \n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        \n        if (refPlane != null)\n        {\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10 \/ 0.3048);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Genera un piso rectangular de 9×8 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Crea una nueva vista de alzado mirando al norte.","completion":"using (Transaction t = new Transaction(doc, \"Create North Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 2);\n            if (aev != null)\n            {\n                aev.Name = \"Alzado Norte\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new elevation view looking north.","completion":"using (Transaction t = new Transaction(doc, \"Create North Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 2);\n            if (aev != null)\n            {\n                aev.Name = \"North Elevation\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Vincula un archivo DWG como referencia en la vista activa.","completion":"string filePath = \"C:\/CAD_Files\/Base_Plan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.ColorMode = ImportColorMode.Preserved;\nElementId linkedFileId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(filePath, options, activeView, out linkedFileId);\n}"}
{"prompt":"Obtén una lista de los nombres de todos los tipos de familia de la categoría 'Mobiliario'.","completion":"List<Element> furnitureTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().ToList();\nList<string> typeNames = new List<string>();\nforeach(Element type in furnitureTypes)\n{\n    typeNames.Add(type.Name);\n}\n"}
{"prompt":"Change the type of all 'Fixed' windows to 'Casement'.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Casement\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Fixed\"));\n\nif (newType != null && oldType != null)\n{\n    List<FamilyInstance> windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Find all walls that have no base level assigned.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Join the geometry of an intersecting column and floor.","completion":"Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\n\nif (column != null && floor != null)\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}
{"prompt":"Move a selected element to position (4,6).","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to move\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            XYZ newPosition = new XYZ(UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), lp.Point.Z);\n            lp.Point = newPosition;\n        }\n    }\n}"}
{"prompt":"Create a new Level named 'Level 4' at an elevation of 13 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(13, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 4\";\n}"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 1 a 'Clasificación Fuego - 91 min'.","completion":"using(Transaction t = new Transaction(doc, \"Set Door Comments\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    if(level1 != null)\n    {\n        List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId.Equals(level1.Id)).ToList();\n        foreach(FamilyInstance door in doorsOnLevel1)\n        {\n            Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n            if(commentsParam != null && !commentsParam.IsReadOnly)\n            {\n                commentsParam.Set(\"Clasificación Fuego - 90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Find all doors on Level 2 that belong to the 'Single-Flush' family.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Single-Flush\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Coloca una ventana de 1x1 metros en la pared más cercana.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original y asegura un nombre único\n    string newTypeName = $\"Window {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters), UnitTypeId.Meters)}m x {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitTypeId.Meters)}m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create a new 20cm wall type named 'Structural Wall 25cm'.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Structural Wall 25cm\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (wallTypeToDuplicate != null)\n    {\n        WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n            cs.SetLayerWidth(coreLayerIndex, 0.25 \/ 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una rejilla de 5 ejes horizontales y 5 verticales, espaciados 6 metros.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint count = 5;\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((count - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Permite al usuario seleccionar un muro y obtén su ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Encuentra todos los muros con más de 4 metros de altura.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Create an electrical conduit with a 1-inch diameter.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ end = new XYZ(5 \/ 0.3048, 0, 3 \/ 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set(1.0 \/ 12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una nueva vista de alzado mirando al sur.","completion":"using (Transaction t = new Transaction(doc, \"Create South Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 0);\n            if (aev != null)\n            {\n                aev.Name = \"Alzado Sur\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Change the type of a floor to one that contains 'Concrete'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concrete\"));\n\nif (floorToChange != null && newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Encuentra todos los muros que no tienen nivel base asignado.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Crea un SketchPlane en el Nivel 2.","completion":"using (Transaction t = new Transaction(doc, \"Create Sketch Plane\"))\n{\n    t.Start();\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\n\n    if (level2 != null)\n    {\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, new XYZ(0, 0, level2.Elevation));\n        SketchPlane skp = SketchPlane.Create(doc, plane);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de muro de 27cm llamado 'Muro Estructural 25cm'.","completion":"string newTypeName = \"Muro Estructural 25cm\";\nWallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (wallTypeToDuplicate != null)\n{\n    WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n        cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n        cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(0.25, UnitTypeId.Meters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Encuentra todas las colisiones entre tuberías y vigas.","completion":"ICollection<ElementId> pipeIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WhereElementIsNotElementType().ToElementIds();\nICollection<ElementId> beamIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().ToElementIds();\n\nif(pipeIds.Count > 0 && beamIds.Count > 0)\n{\n    List<ElementFilter> beamFilters = new List<ElementFilter>();\n    foreach(ElementId beamId in beamIds)\n    {\n        Element beam = doc.GetElement(beamId);\n        if(beam != null) beamFilters.Add(new ElementIntersectsElementFilter(beam));\n    }\n    LogicalOrFilter clashFilter = new LogicalOrFilter(beamFilters);\n    ICollection<ElementId> clashingPipeIds = new FilteredElementCollector(doc, pipeIds).WherePasses(clashFilter).ToElementIds();\n    \/\/ clashingPipeIds contiene los IDs de los elementos en colisión, la selección\/visualización es externa.\n}"}
{"prompt":"Dibuja un conducto de ventilación rectangular de 351x164 milímetros.","completion":"using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast<DuctType>().FirstOrDefault(d => d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null && ductType != null && systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ p2 = new XYZ(10 \/ 0.3048, 0, 3 \/ 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null && !widthParam.IsReadOnly) widthParam.Set(300 \/ 304.8);\n            if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(200 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una rejilla de 6 ejes horizontales y 5 verticales, espaciados 6 metros.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint count = 5;\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((count - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create 5 worksets for engineering disciplines.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Exporta una lista de todas las advertencias del proyecto a un archivo de texto en el escritorio.","completion":"string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nstring filePath = System.IO.Path.Combine(desktopPath, \"RevitWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\nSystem.IO.File.WriteAllLines(filePath, warningDescriptions);"}
{"prompt":"Find all walls that have no base level assigned.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Obtén las coordenadas del punto base y del punto de reconocimiento.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}
{"prompt":"Crea un techo por extrusión con un perfil en arco.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Cambia el tipo de una losa por uno que contenga 'Concreto'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concreto\") || ft.Name.Contains(\"Concrete\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Crea una losa de cimentación estructural de 46cm de espesor.","completion":"using (Transaction t = new Transaction(doc, \"Create Foundation Slab\"))\n{\n    t.Start();\n    Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    FloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n    if(slabTypeToDuplicate != null && foundationLevel != null)\n    {\n        string newTypeName = \"Losa Cimentación 40cm\";\n        FloorType newSlabType = slabTypeToDuplicate.Duplicate(newTypeName) as FloorType;\n        if(newSlabType != null)\n        {\n            CompoundStructure cs = newSlabType.GetCompoundStructure();\n            if (cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 400 \/ 304.8);\n                newSlabType.SetCompoundStructure(cs);\n                XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n                doc.Create.NewFloor(new List<CurveLoop>{profile}, newSlabType, foundationLevel, true);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get all instances of the Furniture category.","completion":"List<Element> furnitureInstances = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToList();"}
{"prompt":"Duplicate the active view and name it 'Working Copy'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"Working Copy\";\n    }\n}"}
{"prompt":"Encuentra el elemento de pórtico estructural con la marca 'B-93'.","completion":"string markValue = \"B-101\";\nElement framingElement = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_StructuralFraming)\n    .WhereElementIsNotElementType()\n    .FirstOrDefault(e => {\n        Parameter p = e.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        return p != null && p.AsString() == markValue;\n    });"}
{"prompt":"Duplica la vista de planta 'Nivel 2' y conviértela en una plantilla de vista.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Nivel 2\");\n    string templateName = \"Plantilla Nivel 2\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ In older APIs, direct conversion to a template may not be available.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca postes de iluminación cada 9m en un camino de 111m.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Obtén todos los muros del Nivel 1 que son estructurales.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level1 != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Apply 24mm thermal insulation to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(24, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Obtén todas las subcategorías de la categoría Puertas.","completion":"Category doorCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors);\nCategoryNameMap subcategories = doorCat.SubCategories;"}
{"prompt":"Paint the interior face of exterior walls with 'White Paint'.","completion":"using (Transaction t = new Transaction(doc, \"Paint Walls\"))\n{\n    t.Start();\n    Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"White Paint\");\n    var exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior).ToList();\n\n    if (paintMaterial != null)\n    {\n        foreach (Wall w in exteriorWalls)\n        {\n            IList<Reference> interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n            if(interiorFaceRefs.Count > 0)\n            {\n                Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n                if (interiorFace != null)\n                {\n                    doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Añade el prefijo 'PLANTA-' a todas las vistas de plano.","completion":"string prefix = \"PLANTA-\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Generate a report with the area of all rooms in the project.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}
{"prompt":"Create a topography surface from a list of 4 points.","completion":"IList<XYZ> points = new List<XYZ>\n{\n    new XYZ(0, 0, 0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters))\n};\nTopographySurface.Create(doc, points);"}
{"prompt":"Create a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"FR-90 Door\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Insert a window 1m wide and 1.2m high into a wall.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original y asegura un nombre único\n    string newTypeName = $\"Window {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters), UnitTypeId.Meters)}m x {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters), UnitTypeId.Meters)}m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Find all walls that are not associated with any level.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Crea columnas en cada intersección de ejes.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Export the current model to an NWC file.","completion":"string folderPath = \"C:\/exports\/\";\nstring fileName = doc.Title + \".nwc\";\nNavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Añade un plano de referencia horizontal llamado 'Eje Central A'.","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"Eje Central A\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Unjoin the geometry of two given elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first element\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second element\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}
{"prompt":"Crea una vista de sección entre los puntos (0,0,0) y (12,11,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Export the current model to an NWC file.","completion":"string folderPath = \"C:\/exports\/\";\nstring fileName = doc.Title + \".nwc\";\nNavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Open a family, add a type parameter 'Material Code', and save it.","completion":""}
{"prompt":"Move the project base point 100 meters to the north.","completion":"using (Transaction t = new Transaction(doc, \"Move Project Base Point\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        XYZ translation = new XYZ(0, 100 \/ 0.3048, 0);\n        ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n    }\n    t.Commit();\n}"}
{"prompt":"Pon un pilar estructural en las coordenadas 10,5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Create a topography surface from a list of 5 points.","completion":"IList<XYZ> points = new List<XYZ>\n{\n    new XYZ(0, 0, 0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters))\n};\nTopographySurface.Create(doc, points);"}
{"prompt":"Display a dialog box with 'Yes' and 'No' options.","completion":""}
{"prompt":"Import a georeferenced survey from a LandXML file.","completion":"\/\/ The Revit API in the provided context does not support direct LandXML import.\n\/\/ This functionality typically requires additional add-ins like the Site Designer, which are not available here.\n\/\/ As a placeholder, this code will show how to create a simple topography surface from a list of points.\nusing(Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(50, 0, 5));\n    points.Add(new XYZ(0, 50, 10));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Encuentra el host de una luminaria basada en cara.","completion":"FamilyInstance lightFixture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().Cast<FamilyInstance>().FirstOrDefault(fi => fi.HostFace != null);\n\nElement host = null;\nif (lightFixture != null)\n{\n    Reference hostFaceRef = lightFixture.HostFace;\n    if (hostFaceRef != null)\n    {\n        host = doc.GetElement(hostFaceRef.ElementId);\n    }\n}"}
{"prompt":"Obtén la tabla de planificación 'Muros' y exporta sus datos a un archivo CSV.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s=>s.Name==\"Muros\");\n\nif (schedule != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(folderPath, \"Muros.csv\", options);\n}"}
{"prompt":"Pon un pilar estructural en las coordenadas 8,6.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Create an 8-meter long foundation beam.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, StructuralType.Footing);\n}"}
{"prompt":"Get a list of all plan views in the project.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}
{"prompt":"Añade refuerzo a una columna.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Change the type of a floor to one that contains 'Concrete'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concrete\"));\n\nif (floorToChange != null && newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Crea un nuevo tipo de texto de 4mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una losa de cimentación estructural de 40cm de espesor.","completion":"using (Transaction t = new Transaction(doc, \"Create Foundation Slab\"))\n{\n    t.Start();\n    Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    FloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n    if(slabTypeToDuplicate != null && foundationLevel != null)\n    {\n        string newTypeName = \"Losa Cimentación 40cm\";\n        FloorType newSlabType = slabTypeToDuplicate.Duplicate(newTypeName) as FloorType;\n        if(newSlabType != null)\n        {\n            CompoundStructure cs = newSlabType.GetCompoundStructure();\n            if (cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 400 \/ 304.8);\n                newSlabType.SetCompoundStructure(cs);\n                XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n                doc.Create.NewFloor(new List<CurveLoop>{profile}, newSlabType, foundationLevel, true);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo material llamado 'Vidrio Reflectante' y asígnale un color base y una transparencia.","completion":"string materialName = \"Vidrio Reflectante\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Rename all plan views to start with 'ARCH_'.","completion":"string prefix = \"ARCH_\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Set the visibility of the 'Furniture' category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nView activeView = doc.ActiveView;\n\nif (furnitureCat != null && activeView != null)\n{\n    activeView.SetCategoryHidden(furnitureCat.Id, true);\n}\n"}
{"prompt":"Find all walls with the comment 'Review'.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Review\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Obtén todas las familias de puertas cargadas en el proyecto.","completion":"List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Create an extrusion roof with an arc profile.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Place a spot elevation on a given face and view point.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select the top face of the floor\");\n\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && activeView != null)\n    {\n        XYZ pointOnFace = faceRef.GlobalPoint;\n        XYZ leaderEnd = pointOnFace + new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo panel en la cinta de opciones llamado 'Mis Herramientas' con un botón.","completion":""}
{"prompt":"Obtén una lista de todas las advertencias del proyecto.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\n"}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 4' a una elevación de 11 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 4\";\n}"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 293mm' con un grosor de 28cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Muro Genérico 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new A1 sheet using the first available title block.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"A1 - New Sheet\";\n        sheet.SheetNumber = \"A1\";\n    }\n}"}
{"prompt":"Create a 'Roof Terrace' level at 15m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Duplicate the 'Basic Wall' type and rename it.","completion":"string typeToDuplicate = \"Basic Wall\";\nstring newTypeName = \"Basic Wall Copy\";\nWallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==typeToDuplicate);\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(newTypeName) as WallType;\n}"}
{"prompt":"Group a room schedule by Level.","completion":"using (Transaction t = new Transaction(doc, \"Group Schedule\"))\n{\n    t.Start();\n    ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(vs => vs.Definition.CategoryId.IntegerValue == (int)BuiltInCategory.OST_Rooms);\n\n    if (schedule != null)\n    {\n        ScheduleDefinition def = schedule.Definition;\n        if (def != null)\n        {\n            SchedulableField schedulableField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ROOM_LEVEL_ID);\n            if (schedulableField != null)\n            {\n                ScheduleField field = def.AddField(schedulableField);\n                ScheduleSortGroupField sortGroupField = new ScheduleSortGroupField(field.FieldId);\n                sortGroupField.ShowHeader = true;\n                def.AddSortGroupField(sortGroupField);\n                def.IsItemized = false;\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un espacio MEP para cada habitación en el Nivel 1.","completion":"using (Transaction t = new Transaction(doc, \"Create MEP Spaces\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n\n    if (level1 != null)\n    {\n        List<Room> roomsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level1.Id)).Cast<Room>().ToList();\n        foreach(Room room in roomsOnLevel1)\n        {\n           \/\/ The direct creation of MEP spaces from rooms might not be available in this specific API version.\n           \/\/ Placeholder comment for the intended logic.\n           \/\/ Space.Create(doc, room, null);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Rotate the given element 45 degrees about its center.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n            double angle = 45 * Math.PI \/ 180.0;\n            ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n        }\n    }\n}"}
{"prompt":"Create a wall 5 meters long and 3 meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Assign all walls to the 'Structure' workset.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if (doc.IsWorkshared)\n    {\n        Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w => w.Name == \"Structure\");\n        if (ws != null)\n        {\n            FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n            foreach (Element e in collector)\n            {\n                Parameter p = e.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(ws.Id.IntegerValue);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Change the detail level of the current view to 'Coarse'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Coarse;\n}"}
{"prompt":"Crea un muro en Nivel 1 de (0,0,0) a (4,0,0) con 5m de alto.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    Line wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0, 0));\n    double height = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Create a wall 4 meters long and 3 meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Dibuja una región rellena con patrón diagonal.","completion":"using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n    if (activeView != null && fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(new XYZ(0, 0, 0), new XYZ(5, 0, 0)));\n                profile.Append(Line.CreateBound(new XYZ(5, 0, 0), new XYZ(5, 5, 0)));\n                profile.Append(Line.CreateBound(new XYZ(5, 5, 0), new XYZ(0, 5, 0)));\n                profile.Append(Line.CreateBound(new XYZ(0, 5, 0), new XYZ(0, 0, 0)));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop> { profile });\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén una lista de todas las familias de anotación.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Crea una vista de sección usando una caja de 9x8x4 metros.","completion":"ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\n\nif (sectionVFT != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(0,0,0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}
{"prompt":"Fija el elemento seleccionado para que no se mueva.","completion":"UIDocument uidoc = new UIDocument(doc);\nElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\n\nif (selectedId != ElementId.InvalidElementId)\n{\n    Element elementToPin = doc.GetElement(selectedId);\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}
{"prompt":"Aísla temporalmente todo el mobiliario en la vista activa.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Define un filtro de vista para ocultar las líneas de detalle.","completion":"string filterName = \"Ocultar Líneas de Detalle\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection<ElementId> catsToHide = new List<ElementId>{new ElementId(BuiltInCategory.OST_Lines)};\n    ElementFilter filter = new ElementCategoryFilter(new ElementId(BuiltInCategory.OST_Lines));\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, filterName, catsToHide, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}
{"prompt":"Crea un nuevo nivel 'Nivel 3' a una elevación de 13 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(13, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 3\";\n}"}
{"prompt":"Find all walls that are not associated with any level.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Add a 90-degree elbow between two pipes.","completion":"using (Transaction t = new Transaction(doc, \"Add Elbow\"))\n{\n    t.Start();\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.ConnectorManager != null && p.ConnectorManager.UnusedConnectors.Size > 0).Take(2).ToList();\n\n    if (pipes.Count >= 2)\n    {\n        Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        \n        if (c1 != null && c2 != null)\n        {\n            doc.Create.NewElbowFitting(c1, c2);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un grupo de detalles con los elementos de detalle seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Detalle Típico 1\";\n        }\n    }\n}"}
{"prompt":"Crea una nueva hoja A1 y coloca la vista 'Planta Baja' en ella.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet\"))\n{\n    t.Start();\n    string sheetNumber = \"A-101\";\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A1\"));\n    View viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<View>().FirstOrDefault(v => v.Name == \"Planta Baja\");\n\n    if (titleBlock != null && viewToPlace != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            newSheet.Name = \"Planta Arquitectónica - Planta Baja\";\n            newSheet.SheetNumber = sheetNumber;\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Importa una topografía desde un archivo CSV.","completion":"using (Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    \/\/ CSV file reading is not directly supported by a single API call.\n    \/\/ You would typically read the file line by line, parse the XYZ coordinates,\n    \/\/ and then use the TopographySurface.Create method with a list of points.\n    \/\/ As a placeholder, here's how to create a simple topography from a list of points:\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(10, 0, 0));\n    points.Add(new XYZ(0, 10, 0));\n    points.Add(new XYZ(10, 10, 5));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Coloca todos los elementos seleccionados en el workset 'Fachada'.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Fachada\");\n        if(workset == null) workset = Workset.Create(doc, \"Fachada\");\n\n        if (selectedIds != null && selectedIds.Count > 0 && workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null && !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Abre una familia, añade un parámetro de tipo 'Código de Material' y guárdala.","completion":""}
{"prompt":"Crea una rejilla de 7 ejes horizontales y 6 verticales, espaciados 6 metros.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\nint count = 5;\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((count - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea un Path of Travel entre los puntos (1,1) y (10,10) en la vista de planta.","completion":"\/\/ PathOfTravel.Create is likely inaccessible in this environment.\n\/\/ A comment is left as a placeholder for the intended functionality.\n\/*\nusing (Transaction t = new Transaction(doc, \"Create Path of Travel\"))\n{\n    t.Start();\n    ViewPlan viewPlan = doc.ActiveView as ViewPlan;\n\n    if (viewPlan != null && viewPlan.ViewType == ViewType.FloorPlan)\n    {\n        ElementId levelId = viewPlan.get_Parameter(BuiltInParameter.PLAN_VIEW_LEVEL).AsElementId();\n        Level level = doc.GetElement(levelId) as Level;\n        if (level != null)\n        {\n            XYZ startPoint = new XYZ(1 \/ 0.3048, 1 \/ 0.3048, level.Elevation);\n            XYZ endPoint = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, level.Elevation);\n            \/\/ PathOfTravel.Create(viewPlan, startPoint, endPoint);\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Cambia un panel de vidrio de un muro cortina por un panel sólido.","completion":"using (Transaction t = new Transaction(doc, \"Change Curtain Panel\"))\n{\n    t.Start();\n    Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\n    FamilySymbol solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_CurtainWallPanels && (fs.Name.Contains(\"Solid\") || fs.Name.Contains(\"Sólido\")));\n\n    if (curtainWall != null && solidPanelType != null)\n    {\n        CurtainGrid grid = curtainWall.CurtainGrid;\n        if (grid != null)\n        {\n            ElementId panelIdToChange = grid.GetPanelIds().FirstOrDefault();\n            if (panelIdToChange != ElementId.InvalidElementId)\n            {\n                Panel panelToChange = doc.GetElement(panelIdToChange) as Panel;\n                if (panelToChange != null) panelToChange.ChangeTypeId(solidPanelType.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Genera un reporte con el área de todas las habitaciones del proyecto.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}
{"prompt":"Modela un plafón a 2.8 metros de altura en Nivel 1.","completion":"CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (ceilingType != null && level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,0,0)));\n\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n    }\n}"}
{"prompt":"Crea una vista 3D axonométrica orientada al Noroeste.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(-1, 1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(1, -1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = \"Vista 3D Noroeste\";\n    }\n}"}
{"prompt":"Find all walls with the comment 'Review'.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Review\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Draw a filled region with a diagonal pattern.","completion":"using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n\n    if (activeView != null && fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                XYZ p1 = new XYZ(0,0,0);\n                XYZ p2 = new XYZ(5 \/ 0.3048,0,0);\n                XYZ p3 = new XYZ(5 \/ 0.3048,5 \/ 0.3048,0);\n                XYZ p4 = new XYZ(0,5 \/ 0.3048,0);\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(p1,p2));\n                profile.Append(Line.CreateBound(p2,p3));\n                profile.Append(Line.CreateBound(p3,p4));\n                profile.Append(Line.CreateBound(p4,p1));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop>{profile});\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Move the project base point 89 meters to the north.","completion":"using (Transaction t = new Transaction(doc, \"Move Project Base Point\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        XYZ translation = new XYZ(0, 100 \/ 0.3048, 0);\n        ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-90' y establece su resistencia al fuego a '90 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Puerta RF-90\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Align the centerlines of two user-selected walls.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first wall (the one that will move)\");\nReference r2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second wall (the reference)\");\n\nif (r1 != null && r2 != null)\n{\n    Wall w1 = doc.GetElement(r1) as Wall;\n    Wall w2 = doc.GetElement(r2) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (w1 != null && w2 != null && activeView != null)\n    {\n        LocationCurve lc1 = w1.Location as LocationCurve;\n        LocationCurve lc2 = w2.Location as LocationCurve;\n        if (lc1 != null && lc2 != null)\n        {\n            doc.Create.NewAlignment(activeView, lc1.Curve.Reference, lc2.Curve.Reference);\n        }\n    }\n}"}
{"prompt":"Aplica el estilo visual 'Rayos X' a la vista 3D activa.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe; \/\/ Simula el efecto 'Rayos X'\n}"}
{"prompt":"Generate a report with the area of all rooms in the project.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}
{"prompt":"Mueve el punto base del proyecto 100 metros hacia el norte.","completion":"using (Transaction t = new Transaction(doc, \"Move Project Base Point\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        XYZ translation = new XYZ(0, 100 \/ 0.3048, 0);\n        ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n    }\n    t.Commit();\n}"}
{"prompt":"Verifica si una tubería está conectada en ambos extremos.","completion":"Pipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nbool isFullyConnected = false;\n\nif (pipe != null)\n{\n    isFullyConnected = pipe.ConnectorManager.UnusedConnectors.IsEmpty;\n}\n"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior\");\nif(targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null)\n        {\n            wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Cambia el tipo de todas las ventanas de 'Fijo' a 'Abatible'.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Abatible\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Fijo\"));\n\nif (newType != null && oldType != null)\n{\n    List<FamilyInstance> windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Link a DWG file as a reference in the active view.","completion":"string filePath = \"C:\/CAD_Files\/Base_Plan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.ColorMode = ImportColorMode.Preserved;\nElementId linkedFileId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(filePath, options, activeView, out linkedFileId);\n}"}
{"prompt":"Create a 27cm 'Double-Wall' type and then construct a wall of that type.","completion":"string newTypeName = \"Double-Wall\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == newTypeName) as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if(newWallType!=null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if(cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(0.3, UnitTypeId.Meters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nLine wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\nWall.Create(doc, wallCurve, newWallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);"}
{"prompt":"Crea un parámetro global de longitud llamado 'AnchoCorredor' con valor de 1.2m.","completion":"string paramName = \"AnchoCorredor\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters)));\n}"}
{"prompt":"Crea una losa de cimentación estructural de 36cm de espesor.","completion":"using (Transaction t = new Transaction(doc, \"Create Foundation Slab\"))\n{\n    t.Start();\n    Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    FloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n    if(slabTypeToDuplicate != null && foundationLevel != null)\n    {\n        string newTypeName = \"Losa Cimentación 40cm\";\n        FloorType newSlabType = slabTypeToDuplicate.Duplicate(newTypeName) as FloorType;\n        if(newSlabType != null)\n        {\n            CompoundStructure cs = newSlabType.GetCompoundStructure();\n            if (cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 400 \/ 304.8);\n                newSlabType.SetCompoundStructure(cs);\n                XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n                Floor.Create(doc, new List<CurveLoop>{profile}, newSlabType.Id, foundationLevel.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a 'Concrete-Rectangular 35x71' column at each grid intersection.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Concrete-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Reload the Revit link 'Structure_LINK.rvt'.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"Structure_LINK.rvt\");\n\nif (linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Group a room schedule by Level.","completion":"using (Transaction t = new Transaction(doc, \"Group Schedule\"))\n{\n    t.Start();\n    ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(vs => vs.Definition.CategoryId.IntegerValue == (int)BuiltInCategory.OST_Rooms);\n\n    if (schedule != null)\n    {\n        ScheduleDefinition def = schedule.Definition;\n        if (def != null)\n        {\n            SchedulableField schedulableField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ROOM_LEVEL_ID);\n            if (schedulableField != null)\n            {\n                ScheduleField field = def.AddField(schedulableField);\n                ScheduleSortGroupField sortGroupField = new ScheduleSortGroupField(field.FieldId);\n                sortGroupField.ShowHeader = true;\n                def.AddSortGroupField(sortGroupField);\n                def.IsItemized = false;\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Permite al usuario seleccionar un muro y obtén su ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Create a new schedule for Structural Columns.","completion":"string scheduleName = \"Structural Column Schedule\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Add reinforcement to a column.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Import a topography from a CSV file.","completion":"using (Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    \/\/ CSV file reading is not directly supported by a single API call.\n    \/\/ You would typically read the file line by line, parse the XYZ coordinates,\n    \/\/ and then use the TopographySurface.Create method with a list of points.\n    \/\/ As a placeholder, here's how to create a simple topography from a list of points:\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(10, 0, 0));\n    points.Add(new XYZ(0, 10, 0));\n    points.Add(new XYZ(10, 10, 5));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Find all section views in the project.","completion":"List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}
{"prompt":"Obtén la geometría sólida de un elemento seleccionado.","completion":"UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para obtener su geometría\");\nif(pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if(elem != null)\n    {\n        Options opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if(geoElem != null)\n        {\n            List<Solid> solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}
{"prompt":"Genera un equipo eléctrico en X=1,Y=1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(level != null && panelSymbol != null)\n{\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Crea vigas entre las columnas alineadas horizontalmente.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Set the visibility of the 'Furniture' category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Create a radial dimension for a curved wall.","completion":"using (Transaction t = new Transaction(doc, \"Create Radial Dimension\"))\n{\n    t.Start();\n    Wall curvedWall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.Location is LocationCurve && (w.Location as LocationCurve).Curve is Arc);\n    View activeView = doc.ActiveView;\n\n    if (curvedWall != null && activeView != null)\n    {\n        LocationCurve locCurve = curvedWall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Arc arc = locCurve.Curve as Arc;\n            if (arc != null)\n            {\n                ReferenceArray refArray = new ReferenceArray();\n                refArray.Append(arc.Reference);\n                doc.Create.NewDimension(activeView, Line.CreateBound(arc.Center, arc.GetEndPoint(0)), refArray);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Pon un pilar estructural en las coordenadas 10,5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Find all section views in the project.","completion":"List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}
{"prompt":"Draw a 300x200 millimeter rectangular ventilation duct.","completion":"using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast<DuctType>().FirstOrDefault(d => d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null && ductType != null && systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ p2 = new XYZ(10 \/ 0.3048, 0, 3 \/ 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null && !widthParam.IsReadOnly) widthParam.Set(300 \/ 304.8);\n            if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(200 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a rectangular floor of 10x8 meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Crea un nuevo nivel llamado 'Mezzanine' a 9 metros de elevación.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Dado un muro, encuentra todas las tuberías que lo atraviesan.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\n\nList<ElementId> intersectingPipes = new List<ElementId>();\nif (wallRef != null)\n{\n    Element wall = doc.GetElement(wallRef);\n    if (wall != null)\n    {\n        ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n        intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds().ToList();\n    }\n}\n"}
{"prompt":"Create a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Find all annotation families and count how many there are.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 4' a una elevación de 12 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 4\";\n}"}
{"prompt":"Añade un punto de referencia en las coordenadas (1,2,3) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));"}
{"prompt":"Dibuja un conducto de ventilación rectangular de 300x200 milímetros.","completion":"using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast<DuctType>().FirstOrDefault(d => d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null && ductType != null && systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ p2 = new XYZ(10 \/ 0.3048, 0, 3 \/ 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null && !widthParam.IsReadOnly) widthParam.Set(300 \/ 304.8);\n            if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(200 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén la geometría sólida de un elemento seleccionado.","completion":"UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para obtener su geometría\");\nif(pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if(elem != null)\n    {\n        Options opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if(geoElem != null)\n        {\n            List<Solid> solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}
{"prompt":"Inserta una armadura (truss) de 6 metros entre dos puntos.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(6 \/ 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Permite al usuario seleccionar un muro y obtén su ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Create a DirectShape with a 2x2x2 meter box shape.","completion":"TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"DirectShape Box\";\n}"}
{"prompt":"Get the coordinates of the project base point and the survey point.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}
{"prompt":"Create a 30cm 'Double-Wall' type and then create a wall of that type.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Double-Wall\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén el tipo de sistema de una tubería seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una tubería\");\n\nPipingSystemType systemType = null;\nif (pickedRef != null)\n{\n    Pipe pipe = doc.GetElement(pickedRef.ElementId) as Pipe;\n    if (pipe != null)\n    {\n        Parameter systemTypeParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        if (systemTypeParam != null && systemTypeParam.HasValue)\n        {\n            systemType = doc.GetElement(systemTypeParam.AsElementId()) as PipingSystemType;\n        }\n    }\n}\n"}
{"prompt":"Create an electrical circuit connecting light fixtures to a panel.","completion":"using (Transaction t = new Transaction(doc, \"Create Electrical Circuit\"))\n{\n    t.Start();\n    FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n    List<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\n    if (panel != null && fixtureIds.Count > 0)\n    {\n        ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n        if(electricalSystem != null)\n        {\n            electricalSystem.SelectPanel(panel);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a vertical shaft opening from the base level to the top level.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(2 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(2 \/ 0.3048, 5 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Paint the interior face of exterior walls with 'White Paint'.","completion":"using (Transaction t = new Transaction(doc, \"Paint Walls\"))\n{\n    t.Start();\n    Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"White Paint\");\n    var exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior).ToList();\n\n    if (paintMaterial != null)\n    {\n        foreach (Wall w in exteriorWalls)\n        {\n            IList<Reference> interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n            if(interiorFaceRefs.Count > 0)\n            {\n                Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n                if (interiorFace != null)\n                {\n                    doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Cambia el nivel de detalle de la vista activa a 'Medio'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Medium;\n}"}
{"prompt":"Create a new pipe type with Copper material.","completion":"string newTypeName = \"Copper Pipe\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial copper = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Copper\")) as Material;\n\nif (pipeTypeToDuplicate != null && copper != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(copper.Id);\n    }\n}"}
{"prompt":"Find all clashes between pipes and beams.","completion":"ICollection<ElementId> pipeIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WhereElementIsNotElementType().ToElementIds();\nICollection<ElementId> beamIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().ToElementIds();\n\nif(pipeIds.Count > 0 && beamIds.Count > 0)\n{\n    List<ElementFilter> beamFilters = new List<ElementFilter>();\n    foreach(ElementId beamId in beamIds)\n    {\n        Element beam = doc.GetElement(beamId);\n        if(beam != null) beamFilters.Add(new ElementIntersectsElementFilter(beam));\n    }\n    LogicalOrFilter clashFilter = new LogicalOrFilter(beamFilters);\n    ICollection<ElementId> clashingPipeIds = new FilteredElementCollector(doc, pipeIds).WherePasses(clashFilter).ToElementIds();\n    \/\/ clashingPipeIds contains the IDs of clashing elements; selection\/display is external.\n}"}
{"prompt":"Oculta todos los elementos de anotación en la vista activa.","completion":"if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}
{"prompt":"Crea un nivel 'Roof Terrace' a 15m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Create a 'Roof Terrace' level at 18m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(18, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Create an extrusion roof with an arc profile.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Create 10 architectural worksets.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_WALLS\", \"TAD_ARQ_FINISHES\", \"TAD_ARQ_CEILINGS\", \"TAD_ARQ_FLOORS\", \"TAD_ARQ_RAILINGS\", \"TAD_ARQ_WINDOWS\", \"TAD_ARQ_CARPENTRY\", \"TAD_ARQ_FURNITURE\", \"TAD_ARQ_PLUMBING\", \"TAD_ARQ_EXTERIOR\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Crea un conducto eléctrico de 1 pulgada de diámetro.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ end = new XYZ(5 \/ 0.3048, 0, 3 \/ 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set(1.0\/12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Añade el prefijo 'PLANTA-' a todas las vistas de plano.","completion":"string prefix = \"PLANTA-\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if (view != null)\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Create an axonometric 3D view oriented to the Northwest.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(-1, 1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(1, -1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = \"3D View Northwest\";\n    }\n}"}
{"prompt":"Change the detail level of the active view to 'Medium'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Medium;\n}"}
{"prompt":"Crea un nuevo tipo de texto de 3mm de color azul.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"3mm Azul\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(3 \/ 304.8);\n            \n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly) lineColorParam.Set(255);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Rename all loaded families containing 'Metric' to 'Imperial'.","completion":"List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Metric\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"Metric\", \"Imperial\");\n}"}
{"prompt":"Dimension the length of a user-selected wall.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall to dimension\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}
{"prompt":"Genera un piso rectangular de 10×8 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Activate all FamilySymbols in the project.","completion":"List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (FamilySymbol sym in symbols)\n{\n    if (!sym.IsActive)\n    {\n        sym.Activate();\n    }\n}"}
{"prompt":"Load a DWG link, preserving its colors.","completion":"string filePath = \"C:\/CAD\/Plans.dwg\";\nDWGImportOptions opts = new DWGImportOptions();\nopts.ColorMode = ImportColorMode.Preserved;\nElementId linkId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(filePath, opts, activeView, out linkId);\n}"}
{"prompt":"Change the type of a floor to one that contains 'Concrete'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concrete\"));\n\nif (floorToChange != null && newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Create 5 vertical grids spaced 10 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<4; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Obtén una lista de todas las familias y sus tipos.","completion":"List<string> familyAndTypeNames = new List<string>();\nList<Family> families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().ToList();\nforeach (Family fam in families)\n{\n    familyAndTypeNames.Add($\"Familia: {fam.Name}\");\n    foreach (ElementId symbolId in fam.GetFamilySymbolIds())\n    {\n        FamilySymbol sym = doc.GetElement(symbolId) as FamilySymbol;\n        if (sym != null)\n        {\n            familyAndTypeNames.Add($\"\\tTipo: {sym.Name}\");\n        }\n    }\n}"}
{"prompt":"Get the host element of the first window found.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}
{"prompt":"Create a new Ribbon panel named 'My Tools' with a button.","completion":""}
{"prompt":"Tag all rooms with their area.","completion":"using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint loc = room.Location as LocationPoint;\n            if(loc != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(loc.Point.X, loc.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una vista de planta para el 'Nivel 3'.","completion":"string levelName = \"Nivel 3\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Dibuja una pared de 6m de largo por 3m de altura.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Crea una vista 3D orientada desde el sureste.","completion":"string viewName = \"Vista 3D Sureste\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}
{"prompt":"Get a list of all family type names from the 'Furniture' category.","completion":"List<Element> furnitureTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().ToList();\nList<string> typeNames = new List<string>();\nforeach(Element type in furnitureTypes)\n{\n    typeNames.Add(type.Name);\n}\n"}
{"prompt":"Create a Reflected Ceiling Plan view for Level 1.","completion":"string levelName = \"Level 1\";\nstring viewName = \"Level 1 Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Crea una vista 3D por defecto.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n}"}
{"prompt":"Rota un elemento seleccionado 90 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 2.0);"}
{"prompt":"Create 7 horizontal grids spaced 9 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create a 20x15 meter foundation slab.","completion":"using (Transaction t = new Transaction(doc, \"Create Foundation Slab\"))\n{\n    t.Start();\n    Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    FloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n\n    if (foundationLevel != null && slabType != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(20\/0.3048, 0, 0);\n        XYZ p3 = new XYZ(20\/0.3048, 15\/0.3048, 0);\n        XYZ p4 = new XYZ(0, 15\/0.3048, 0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Place a piece of furniture at coordinates (2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), furnitureSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Obtén todas las habitaciones que están en el Nivel 3.","completion":"Level level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 3\") as Level;\nList<Element> roomsOnLevel3 = new List<Element>();\n\nif (level3 != null)\n{\n    roomsOnLevel3 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level3.Id).ToList();\n}"}
{"prompt":"Apply 29mm thermal insulation to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(29, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Generate an electrical panel at X=1,Y=1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && panelSymbol != null)\n{\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Place a piece of furniture at coordinates (2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), furnitureSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Get a list of all material names.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Asigna el material 'Acero' a la primera capa de un tipo de muro.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"Steel\") || m.Name.Contains(\"Acero\"));\n\n    if (wallType != null && steel != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, steel.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new wall type 'Generic Wall 320mm' with a thickness of 26cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Generic Wall 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Mueve los elementos seleccionados 3 metros hacia arriba.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Set the sill height of all windows to 982mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(982, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Encuentra el host de una luminaria basada en cara.","completion":"FamilyInstance lightFixture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().Cast<FamilyInstance>().FirstOrDefault(fi => fi.HostFace != null);\n\nElement host = null;\nif (lightFixture != null)\n{\n    Reference hostFaceRef = lightFixture.HostFace;\n    if (hostFaceRef != null)\n    {\n        host = doc.GetElement(hostFaceRef.ElementId);\n    }\n}"}
{"prompt":"Pinta la cara interior de los muros exteriores con 'Pintura Blanca'.","completion":"using (Transaction t = new Transaction(doc, \"Paint Walls\"))\n{\n    t.Start();\n    Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Pintura Blanca\");\n    var exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior).ToList();\n\n    if (paintMaterial != null)\n    {\n        foreach (Wall w in exteriorWalls)\n        {\n            IList<Reference> interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n            if(interiorFaceRefs.Count > 0)\n            {\n                Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n                if (interiorFace != null)\n                {\n                    doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén las coordenadas del punto base y del punto de reconocimiento.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}
{"prompt":"Export the current 3D view to NWC for Navisworks.","completion":"View3D view3d = doc.ActiveView as View3D;\n\nif (view3d != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    string fileName = view3d.Name + \".nwc\";\n    NavisworksExportOptions options = new NavisworksExportOptions();\n    options.ExportScope = NavisworksExportScope.View;\n    options.ViewId = view3d.Id;\n    doc.Export(folderPath, fileName, options);\n}"}
{"prompt":"Carga un enlace DWG preservando los colores.","completion":"string filePath = \"C:\/CAD\/Planos.dwg\";\nDWGImportOptions opts = new DWGImportOptions();\nopts.ColorMode = ImportColorMode.Preserved;\nElementId linkId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(filePath, opts, activeView, out linkId);\n}"}
{"prompt":"Pin the selected element so it cannot be moved.","completion":"UIDocument uidoc = new UIDocument(doc);\nElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\n\nif (selectedId != ElementId.InvalidElementId)\n{\n    Element elementToPin = doc.GetElement(selectedId);\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}
{"prompt":"Rota el elemento dado 40 grados alrededor de su centro.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n            double angle = 45 * Math.PI \/ 180.0;\n            ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n        }\n    }\n}"}
{"prompt":"Encuentra todos los muros con el comentario 'Revisar'.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Revisar\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Añade montantes a todas las líneas de rejilla de un muro cortina.","completion":"using (Transaction t = new Transaction(doc, \"Add Mullions\"))\n{\n    t.Start();\n    Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\n    MullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\n\n    if (curtainWall != null && mullionType != null)\n    {\n        CurtainGrid grid = curtainWall.CurtainGrid;\n        if (grid != null)\n        {\n            foreach (ElementId gridLineId in grid.GetVGridLineIds())\n            {\n                CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n                if(line != null) line.AddMullions(mullionType, false);\n            }\n            foreach (ElementId gridLineId in grid.GetUGridLineIds())\n            {\n                CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n                if(line != null) line.AddMullions(mullionType, false);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a report with the area of all rooms in the project.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nList<double> roomAreas = new List<double>();\nforeach (Room room in rooms)\n{\n    if (room != null && room.Area > 0)\n    {\n        roomAreas.Add(UnitUtils.ConvertFromInternalUnits(room.Area, UnitTypeId.SquareMeters));\n    }\n}\n\/\/ The orchestrator can now use the 'roomAreas' list to generate the final report."}
{"prompt":"Get a list of all plan views in the project.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}
{"prompt":"Create a new elevation view looking south.","completion":"using (Transaction t = new Transaction(doc, \"Create South Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 0);\n            if (aev != null)\n            {\n                aev.Name = \"South Elevation\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get the solid geometry of a selected element.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to get its geometry\");\n\nList<Solid> solids = new List<Solid>();\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        Options opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if (geoElem != null)\n        {\n            solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}
{"prompt":"Obtén una lista de todas las vistas de planta del proyecto.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}
{"prompt":"Importa topografía georreferenciada desde un archivo LandXML.","completion":"\/\/ The Revit API in the provided context does not support direct LandXML import.\n\/\/ This functionality typically requires additional add-ins like the Site Designer, which are not available here.\n\/\/ As a placeholder, this code will show how to create a simple topography surface from a list of points.\nusing(Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(50, 0, 5));\n    points.Add(new XYZ(0, 50, 10));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Genera un reporte con el área de todas las habitaciones del proyecto.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nList<double> roomAreas = new List<double>();\nforeach (Room room in rooms)\n{\n    if (room != null && room.Area > 0)\n    {\n        roomAreas.Add(UnitUtils.ConvertFromInternalUnits(room.Area, UnitTypeId.SquareMeters));\n    }\n}\n\/\/ El orquestador puede ahora usar la lista 'roomAreas' para generar el reporte final."}
{"prompt":"Aplica aislamiento térmico de 25mm a todas las tuberías de agua caliente.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Create a 'Concrete-Rectangular 29x60' column at each grid intersection.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Concrete-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create columns at each grid intersection.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Asigna el material 'Acero' a la primera capa de un tipo de muro.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"Steel\") || m.Name.Contains(\"Acero\"));\n\n    if (wallType != null && steel != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, steel.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una tubería con un diámetro de 157mm.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(157, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Encuentra todas las puertas en el Nivel 1 usando un filtro combinado.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nList<Element> doors = new List<Element>();\n\nif (level1 != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    doors = new FilteredElementCollector(doc).WherePasses(combinedFilter).ToList();\n}"}
{"prompt":"Añade una etiqueta a la columna más cercana al origen.","completion":"using (Transaction t = new Transaction(doc, \"Tag Column\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n        LocationPoint lp = c.Location as LocationPoint;\n        return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n    }).FirstOrDefault();\n\n    if (activeView != null && column != null)\n    {\n        LocationPoint loc = column.Location as LocationPoint;\n        if (loc != null)\n        {\n            IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca una cota de elevación en una cara y un punto de vista dados.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara superior del suelo\");\n\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && activeView != null)\n    {\n        XYZ pointOnFace = faceRef.GlobalPoint;\n        XYZ leaderEnd = pointOnFace + new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Model a ceiling at a height of 3 meters on Level 1.","completion":"CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (ceilingType != null && level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,0,0)));\n\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    }\n}"}
{"prompt":"Add a tag to the column closest to the origin.","completion":"using (Transaction t = new Transaction(doc, \"Tag Column\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n        LocationPoint lp = c.Location as LocationPoint;\n        return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n    }).FirstOrDefault();\n\n    if (activeView != null && column != null)\n    {\n        LocationPoint loc = column.Location as LocationPoint;\n        if (loc != null)\n        {\n            IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una escalera entre Nivel 1 y Nivel 2.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    \/\/ TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    \/\/ Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Create a section view named 'Longitudinal Section'.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-1, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    \n    if (sectionView != null)\n    {\n        sectionView.Name = \"Longitudinal Section\";\n    }\n}"}
{"prompt":"Find a wall by searching for the value 'W-01' in its Mark parameter.","completion":"string markValue = \"W-01\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue);\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().WherePasses(filter).FirstOrDefault() as Wall;"}
{"prompt":"Crea un muro del tipo 'Genérico - 176mm' en el 'Nivel 1' desde (0,0) hasta (9,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Genérico - 200mm\") as WallType;\nXYZ startPoint = new XYZ(0, 0, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nWall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);"}
{"prompt":"Copia todos los elementos del Nivel 1 al Nivel 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(elementsToCopy.Any())\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Agrupa una tabla de planificación de habitaciones por Nivel.","completion":"using (Transaction t = new Transaction(doc, \"Group Schedule\"))\n{\n    t.Start();\n    ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(vs => vs.Definition.CategoryId.IntegerValue == (int)BuiltInCategory.OST_Rooms);\n\n    if (schedule != null)\n    {\n        ScheduleDefinition def = schedule.Definition;\n        if (def != null)\n        {\n            SchedulableField schedulableField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ROOM_LEVEL_ID);\n            if (schedulableField != null)\n            {\n                ScheduleField field = def.AddField(schedulableField);\n                ScheduleSortGroupField sortGroupField = new ScheduleSortGroupField(field.FieldId);\n                sortGroupField.ShowHeader = true;\n                def.AddSortGroupField(sortGroupField);\n                def.IsItemized = false;\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén una lista de todas las advertencias del proyecto.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\n"}
{"prompt":"Cambia el nombre de la vista activa a 'Vista de Trabajo'.","completion":"string newName = \"Vista de Trabajo\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Create a vertical shaft opening from the base level to the top level.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(2 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(2 \/ 0.3048, 5 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Change the family name of a selected door to 'New_Door'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a door\");\n\nif (pickedRef != null)\n{\n    FamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (door != null && door.Symbol != null)\n    {\n        Family family = door.Symbol.Family;\n        if (family != null)\n        {\n            family.Name = \"New_Door\";\n        }\n    }\n}"}
{"prompt":"Crea una cimentación de viga de 9 metros de largo.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, StructuralType.Footing);\n}"}
{"prompt":"Crea 8 ejes horizontales separados por 10 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Pin the selected element so it cannot be moved.","completion":"UIDocument uidoc = new UIDocument(doc);\nElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\n\nif (selectedId != ElementId.InvalidElementId)\n{\n    Element elementToPin = doc.GetElement(selectedId);\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}
{"prompt":"Modela un barandal en una escalera existente.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Hide all annotation elements in the active view.","completion":"if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}
{"prompt":"Crea 4 ejes en sentido vertical separados 10 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<4; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Define a view filter to hide detail lines.","completion":"string filterName = \"Hide Detail Lines\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection<ElementId> catsToHide = new List<ElementId>{new ElementId(BuiltInCategory.OST_Lines)};\n    ElementFilter filter = new ElementCategoryFilter(new ElementId(BuiltInCategory.OST_Lines));\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, filterName, catsToHide, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}
{"prompt":"Crea vigas entre las columnas alineadas horizontalmente.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Crea un filtro de vista para ocultar muros demolidos.","completion":"using (Transaction t = new Transaction(doc, \"Create Demolition Filter\"))\n{\n    t.Start();\n    Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p => p.Name.Contains(\"Demolished\") || p.Name.Contains(\"Demolición\"));\n    View activeView = doc.ActiveView;\n\n    if (demolishedPhase != null && activeView != null)\n    {\n        ElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\n        FilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\n        ElementFilter filter = new ElementParameterFilter(rule);\n        ICollection<ElementId> categories = new List<ElementId>{ new ElementId(BuiltInCategory.OST_Walls) };\n        ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Filtro Demolición\", categories, filter);\n        \n        if (pfe != null)\n        {\n            activeView.AddFilter(pfe.Id);\n            activeView.SetFilterVisibility(pfe.Id, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a 'Concrete-Rectangular 24x61' column at each grid intersection.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Concrete-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de texto de 3mm de color azul.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"3mm Azul\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(3 \/ 304.8);\n            \n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly) lineColorParam.Set(255);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new linear dimension type with blue text and 2mm size.","completion":"using (Transaction t = new Transaction(doc, \"Create Dimension Type\"))\n{\n    t.Start();\n    string newTypeName = \"Blue Dimension 2mm\";\n    DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\n    if (linearDimType != null)\n    {\n        DimensionType newDimType = linearDimType.Duplicate(newTypeName) as DimensionType;\n        if (newDimType != null)\n        {\n            Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n            Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(2 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}
{"prompt":"Create beams between horizontally aligned columns.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Create a structural column at position X=9, Y=6.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Find all walls that are not associated with any level.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Move the selected elements 2 meters up.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Crea una columna estructural en la posición X=10, Y=5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Crea una puerta de 1m de ancho y 2m de alto en el muro.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original y asegura un nombre único\n    string newTypeName = $\"Door {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitTypeId.Meters)}m x {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitTypeId.Meters)}m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Crea una nueva vista de alzado mirando al sur.","completion":"string viewName = \"Alzado Sur (Nuevo)\";\nViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20, 0), 100);\nView aev = marker.CreateElevation(doc, doc.ActiveView.Id, 0);\naev.Name = viewName;"}
{"prompt":"Crea una apertura de hueco (shaft) que atraviese desde el Nivel 1 al Nivel 3.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft Opening\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 3\");\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p2 = new XYZ(8 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p3 = new XYZ(8 \/ 0.3048, 8 \/ 0.3048,0);\n        XYZ p4 = new XYZ(5 \/ 0.3048, 8 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Cambia el nombre de la familia de una puerta seleccionada a 'Puerta_Nueva'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una puerta\");\n\nif (pickedRef != null)\n{\n    FamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (door != null && door.Symbol != null)\n    {\n        Family family = door.Symbol.Family;\n        if (family != null)\n        {\n            family.Name = \"Puerta_Nueva\";\n        }\n    }\n}"}
{"prompt":"Define un filtro de vista para ocultar las líneas de detalle.","completion":"string filterName = \"Ocultar Líneas de Detalle\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection<ElementId> catsToHide = new List<ElementId>{new ElementId(BuiltInCategory.OST_Lines)};\n    ElementFilter filter = new ElementCategoryFilter(new ElementId(BuiltInCategory.OST_Lines));\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, filterName, catsToHide, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}
{"prompt":"Get the IDs of all 3D views starting with 'Coord' for export.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Crea un SketchPlane en el Nivel 2.","completion":"using (Transaction t = new Transaction(doc, \"Create Sketch Plane\"))\n{\n    t.Start();\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\n\n    if (level2 != null)\n    {\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, new XYZ(0, 0, level2.Elevation));\n        SketchPlane skp = SketchPlane.Create(doc, plane);\n    }\n    t.Commit();\n}"}
{"prompt":"Temporarily isolate all furniture in the active view.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Create a filled region with a 'Concrete' pattern.","completion":"using (Transaction t = new Transaction(doc, \"Create Filled Region\"))\n{\n    t.Start();\n    FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\"));\n    View activeView = doc.ActiveView;\n\n    if (regionType != null && activeView != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 0,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(0, 5 \/ 0.3048,0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n    }\n    t.Commit();\n}"}
{"prompt":"Crea 4 ejes en sentido vertical separados 10 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<4; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Añade un nivel llamado 'Nivel Azotea' a 17 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(17, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel Azotea\";\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\ndoc.Delete(unusedWallTypes);"}
{"prompt":"Duplica la vista 'Nivel 1' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 1\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Assign all walls to the 'Structure' workset.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if (doc.IsWorkshared)\n    {\n        Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w => w.Name == \"Structure\");\n        if (ws != null)\n        {\n            FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n            foreach (Element e in collector)\n            {\n                Parameter p = e.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(ws.Id.IntegerValue);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Dentro del editor de familias, crea un nuevo plano de referencia horizontal.","completion":"string rpName = \"Plano Horizontal\";\nXYZ start = new XYZ(UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0, 0);\nXYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0);\nXYZ normal = XYZ.BasisY;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = rpName;\n    }\n}"}
{"prompt":"Create a 'Generic - 236mm' wall on 'Level 1' from (0,0) to (11,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Generic - 200mm\") as WallType;\nXYZ startPoint = new XYZ(0, 0, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nif (level != null && wallType != null)\n{\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}
{"prompt":"Import a georeferenced survey from a LandXML file.","completion":"\/\/ The Revit API in the provided context does not support direct LandXML import.\n\/\/ This functionality typically requires additional add-ins like the Site Designer, which are not available here.\n\/\/ As a placeholder, this code will show how to create a simple topography surface from a list of points.\nusing(Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(50, 0, 5));\n    points.Add(new XYZ(0, 50, 10));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Modela un barandal en una escalera existente.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Find the structural framing element with the mark 'B-102'.","completion":"string markValue = \"B-101\";\nElement framingElement = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_StructuralFraming)\n    .WhereElementIsNotElementType()\n    .FirstOrDefault(e => {\n        Parameter p = e.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        return p != null && p.AsString() == markValue;\n    });"}
{"prompt":"Encuentra todos los muros que miden más de 2 metros de alto.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nList<ElementId> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds().ToList();"}
{"prompt":"Export the geometry of a selected element to an SAT file.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to export\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        string folderPath = \"C:\/RevitExports\/\";\n        string fileName = elem.Name + \".sat\";\n        SATExportOptions options = new SATExportOptions();\n        doc.Export(folderPath, fileName, new List<ElementId>{elem.Id}, options);\n    }\n}"}
{"prompt":"Place a material tag on a wall face.","completion":"using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select a face to tag\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Select the tag location\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}
{"prompt":"Find all views that do not have an assigned view template.","completion":"List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId.Equals(ElementId.InvalidElementId)).ToList();"}
{"prompt":"Create a new door type named 'FR-94 Door' and set its fire rating to '76 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"FR-90 Door\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca un mueble en las coordenadas (2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), furnitureSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Crea un nuevo material llamado 'Roble Oscuro' con un patrón de superficie de madera.","completion":"string materialName = \"Roble Oscuro\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Wood\") || p.Name.Contains(\"Madera\")) as FillPatternElement;\n    \n    if (material != null && fillPattern != null)\n    {\n        material.SurfaceForegroundPatternId = fillPattern.Id;\n        material.Color = new Color(139, 69, 19);\n    }\n}"}
{"prompt":"Acota la longitud de un muro seleccionado por el usuario.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro para acotar\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}
{"prompt":"Coloca la vista 'Nivel 1' en el centro de la hoja activa.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 1\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null && activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) \/ 2, (sheetBox.Min.V + sheetBox.Max.V) \/ 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Encuentra todas las vistas que no tienen una plantilla de vista asignada.","completion":"List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId).ToList();"}
{"prompt":"Coloca una etiqueta de material en una cara de muro.","completion":"using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona una cara para etiquetar\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Selecciona la ubicación de la etiqueta\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra todas las vistas de sección en el proyecto.","completion":"List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}
{"prompt":"Obtén una lista de todas las familias de anotación.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\ndoc.Delete(unusedWallTypes);"}
{"prompt":"Create a spherical DirectShape with a 5-meter radius.","completion":"using (Transaction t = new Transaction(doc, \"Create Sphere DirectShape\"))\n{\n    t.Start();\n    double radius = 5 \/ 0.3048;\n    List<GeometryObject> solids = new List<GeometryObject>();\n    Frame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\n    Arc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\n    Line line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\n    Solid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\n    solids.Add(sphere);\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\n    if (ds != null)\n    {\n        ds.SetShape(solids);\n        ds.Name = \"Sphere DirectShape\";\n    }\n    t.Commit();\n}"}
{"prompt":"Add a point to the selected Path of Travel.","completion":"\/\/ PathOfTravel related methods are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select a Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint);\n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Coloca una cota de elevación en una cara y un punto de vista dados.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara superior del suelo\");\n\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && activeView != null)\n    {\n        XYZ pointOnFace = faceRef.GlobalPoint;\n        XYZ leaderEnd = pointOnFace + new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una nueva hoja A2 con el número 'A-201'.","completion":"string sheetNumber = \"A-201\";\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"Detalles Constructivos\";\n        sheet.SheetNumber = sheetNumber;\n    }\n}"}
{"prompt":"Dibuja una región rellena con patrón diagonal.","completion":"using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n\n    if (activeView != null && fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                XYZ p1 = new XYZ(0,0,0);\n                XYZ p2 = new XYZ(5 \/ 0.3048,0,0);\n                XYZ p3 = new XYZ(5 \/ 0.3048,5 \/ 0.3048,0);\n                XYZ p4 = new XYZ(0,5 \/ 0.3048,0);\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(p1,p2));\n                profile.Append(Line.CreateBound(p2,p3));\n                profile.Append(Line.CreateBound(p3,p4));\n                profile.Append(Line.CreateBound(p4,p1));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop>{profile});\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a section view between points (0,0,0) and (12,10,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Apply a red color to all windows in the active view.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(255, 0, 0));\n    ICollection<ElementId> windows = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().ToElementIds();\n    \n    foreach (ElementId windowId in windows)\n    {\n        activeView.SetElementOverrides(windowId, ogs);\n    }\n}"}
{"prompt":"Genera un equipo eléctrico en X=1,Y=1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && panelSymbol != null)\n{\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Crea una nueva vista de alzado mirando al sur.","completion":"using (Transaction t = new Transaction(doc, \"Create South Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 0);\n            if (aev != null)\n            {\n                aev.Name = \"Alzado Sur\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de muro de 25cm llamado 'Muro Estructural 25cm'.","completion":"string newTypeName = \"Muro Estructural 25cm\";\nWallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (wallTypeToDuplicate != null)\n{\n    WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n        cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n        cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(0.25, UnitTypeId.Meters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\ndoc.Delete(unusedWallTypes);"}
{"prompt":"Dado un muro, obtén los materiales y sus volúmenes.","completion":"UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\n\nDictionary<string, double> materialVolumes = new Dictionary<string, double>();\nif (pickedRef != null)\n{\n    Wall wall = doc.GetElement(pickedRef) as Wall;\n    if (wall != null)\n    {\n        Parameter areaParam = wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED);\n        if (areaParam != null && areaParam.HasValue)\n        {\n            double wallArea = areaParam.AsDouble();\n            WallType wallType = wall.WallType;\n            if (wallType != null)\n            {\n                CompoundStructure cs = wallType.GetCompoundStructure();\n                if (cs != null)\n                {\n                    foreach(CompoundStructureLayer layer in cs.GetLayers())\n                    {\n                        Material material = doc.GetElement(layer.MaterialId) as Material;\n                        if(material != null)\n                        {\n                            double volume = layer.Width * wallArea; \n                            materialVolumes[material.Name] = volume;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Add reinforcement to a column.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Create a new material named 'Dark Oak' with a wood surface pattern.","completion":"string materialName = \"Dark Oak\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Wood\") || p.Name.Contains(\"Madera\")) as FillPatternElement;\n    \n    if (material != null && fillPattern != null)\n    {\n        material.SurfaceForegroundPatternId = fillPattern.Id;\n        material.Color = new Color(139, 69, 19);\n    }\n}"}
{"prompt":"Obtén una lista de todas las advertencias del proyecto.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\n"}
{"prompt":"Crea un muro en el Nivel 1 que vaya de (0,0,0) a (10,0,0) con una altura de 4 metros.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Create an extrusion roof with a 10% slope.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10 \/ 0.3048, 0, 1 \/ 0.3048)));\n        \n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        \n        if (refPlane != null)\n        {\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10 \/ 0.3048);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un tipo de muro 'Muro-Doble' de 25cm y luego crea un muro de ese tipo.","completion":"string newTypeName = \"Muro-Doble\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == newTypeName) as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if(newWallType!=null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if(cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(0.3, UnitTypeId.Meters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nLine wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\nWall.Create(doc, wallCurve, newWallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);"}
{"prompt":"Añade montantes a todas las líneas de rejilla de un muro cortina.","completion":"using (Transaction t = new Transaction(doc, \"Add Mullions\"))\n{\n    t.Start();\n    Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\n    MullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\n\n    if (curtainWall != null && mullionType != null)\n    {\n        CurtainGrid grid = curtainWall.CurtainGrid;\n        if (grid != null)\n        {\n            foreach (ElementId gridLineId in grid.GetVGridLineIds())\n            {\n                CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n                if(line != null) line.AddMullions(mullionType, false);\n            }\n            foreach (ElementId gridLineId in grid.GetUGridLineIds())\n            {\n                CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n                if(line != null) line.AddMullions(mullionType, false);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a pipe with a 124mm diameter.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(124, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Create a new 3mm text type in blue color.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"3mm Blue\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(3 \/ 304.8);\n            \n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly) lineColorParam.Set(255);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un suelo con un contorno de 10 por 8 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Create an electrical circuit connecting light fixtures to a panel.","completion":"using (Transaction t = new Transaction(doc, \"Create Electrical Circuit\"))\n{\n    t.Start();\n    FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n    List<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\n    if (panel != null && fixtureIds.Count > 0)\n    {\n        ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n        if(electricalSystem != null)\n        {\n            electricalSystem.SelectPanel(panel);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Add a point to the selected Path of Travel.","completion":"\/\/ PathOfTravel related methods are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select a Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint);\n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Duplicate the 'Level 1' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 1\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Apply the 'X-Ray' visual style to the active 3D view.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe; \/\/ Simulates 'X-Ray' effect\n}"}
{"prompt":"Sincroniza el modelo local con el central, añadiendo el comentario 'Actualización de diseño'.","completion":"if (doc.IsWorkshared)\n{\n    TransactWithCentralOptions tco = new TransactWithCentralOptions();\n    SynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\n    swcOpts.Comment = \"Actualización de diseño\";\n    swcOpts.SaveLocalAfter = true;\n    doc.SynchronizeWithCentral(tco, swcOpts);\n}"}
{"prompt":"Crea un nuevo panel en la cinta de opciones llamado 'Mis Herramientas' con un botón.","completion":""}
{"prompt":"Asigna el material 'Acero' a la primera capa de un tipo de muro.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"Steel\") || m.Name.Contains(\"Acero\"));\n\n    if (wallType != null && steel != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, steel.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una nueva vista de alzado mirando al norte.","completion":"using (Transaction t = new Transaction(doc, \"Create North Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 2);\n            if (aev != null)\n            {\n                aev.Name = \"Alzado Norte\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un muro de 5 metros de largo y 3 metros de alto.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Obtén todas las habitaciones en el Nivel 'Planta Baja'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Planta Baja\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Get the IDs of all 3D views starting with 'Coord' for export.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Create a structural beam between (0,0,3) and (5,0,3) on Level 2.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Encuentra todas las vistas que no tienen una plantilla de vista asignada.","completion":"List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId.Equals(ElementId.InvalidElementId)).ToList();"}
{"prompt":"Create a door 1m wide and 2m high in the wall.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original y asegura un nombre único\n    string newTypeName = $\"Door {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitTypeId.Meters)}m x {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitTypeId.Meters)}m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-1'.","completion":"List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"WM-01\");\n  }\n}"}
{"prompt":"Create a 'Concrete-Rectangular 33x54' column at each grid intersection.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Concrete-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get a list of all project warnings.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\n"}
{"prompt":"Acota la longitud de un muro seleccionado por el usuario.","completion":"using (Transaction t = new Transaction(doc, \"Dimension Wall\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference wallRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro para acotar\");\n    if(wallRef != null)\n    {\n        Wall wall = doc.GetElement(wallRef) as Wall;\n        if(wall != null)\n        {\n            LocationCurve locCurve = wall.Location as LocationCurve;\n            Curve wallCurve = locCurve != null ? locCurve.Curve : null;\n            if(wallCurve != null && wallCurve is Line)\n            {\n                Line wallLine = wallCurve as Line;\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(doc.ActiveView, dimLine, refs);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un techo por extrusión con una pendiente del 9%.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10 \/ 0.3048, 0, 1 \/ 0.3048)));\n        \n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        \n        if (refPlane != null)\n        {\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10 \/ 0.3048);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una vista de plano de plafón reflejado para el Nivel 1.","completion":"string levelName = \"Nivel 1\";\nstring viewName = \"Plano de Plafón Nivel 1\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Obtén todas las familias de puertas cargadas en el proyecto.","completion":"List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Crea una nueva revisión y aplícala a la hoja activa.","completion":"Revision rev = Revision.Create(doc);\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (rev != null && sheet != null)\n{\n    rev.Description = \"Emitido para Construcción\";\n    rev.RevisionDate = DateTime.Now.ToString(\"yyyy-MM-dd\");\n    rev.IssuedBy = \"Departamento BIM\";\n    \n    ICollection<ElementId> revisions = sheet.GetAdditionalRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}
{"prompt":"Añade el prefijo 'PLANTA-' a todas las vistas de plano.","completion":"string prefix = \"PLANTA-\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if (view != null)\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Add a horizontal reference plane named 'Centerline A'.","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"Centerline A\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create an extrusion roof with an arc profile.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una topografía DirectShape a partir de una lista de puntos.","completion":"List<XYZ> points = new List<XYZ>\n{\n    new XYZ(0,0,0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0)\n};\nTessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[0], points[1], points[2]}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[1], points[3], points[2]}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_Topography));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"Topografía DirectShape\";\n}"}
{"prompt":"Crea una familia 'in-situ' para un mostrador de recepción personalizado usando una extrusión.","completion":""}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 1 a 'Clasificación Fuego - 102 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Clasificación Fuego - 90 min\");\n    }\n}"}
{"prompt":"Aplica un color rojo a todas las ventanas en la vista activa.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(255, 0, 0));\n    ICollection<ElementId> windows = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().ToElementIds();\n    \n    foreach (ElementId windowId in windows)\n    {\n        activeView.SetElementOverrides(windowId, ogs);\n    }\n}"}
{"prompt":"Crea un techo por extrusión con un perfil en arco.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un conducto eléctrico de 1 pulgada de diámetro.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ end = new XYZ(5 \/ 0.3048, 0, 3 \/ 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set(1.0 \/ 12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca un mueble en las coordenadas (2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), furnitureSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Obtén todas las familias de puertas cargadas en el proyecto.","completion":"List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Crea un tipo de muro 'Muro-Doble' de 26cm y luego crea un muro de ese tipo.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Muro-Doble\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Unjoin the geometry of two given elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first element\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second element\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}
{"prompt":"Create a 'Concrete-Rectangular 33x57' column at each grid intersection.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Concrete-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create an in-place family for a custom reception desk using an extrusion.","completion":""}
{"prompt":"Rename all loaded families containing 'Metric' to 'Imperial'.","completion":"List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Metric\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"Metric\", \"Imperial\");\n}"}
{"prompt":"Create columns at each grid intersection.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Copy all elements from Level 1 to Level 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\n\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if (elementsToCopy.Count > 0)\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Desune la geometría de dos elementos dados.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer elemento\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo elemento\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}
{"prompt":"Duplica la vista de planta 'Nivel 2' y conviértela en una plantilla de vista.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Nivel 2\");\n    string templateName = \"Plantilla Nivel 2\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ Direct conversion to a template may not be available in older APIs.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create columns at each grid intersection.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Crea una vista 3D con la caja de sección activada.","completion":"string viewName = \"Vista 3D con Caja de Sección\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Añade refuerzo a una columna.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Generate a rectangular floor of 11x9 meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Obtén una lista de todas las familias de anotación.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Obtén todas las instancias de la categoría Mobiliario.","completion":"List<Element> furnitureInstances = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToList();"}
{"prompt":"Dado un muro, obtén los materiales y sus volúmenes.","completion":"UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\n\nDictionary<string, double> materialVolumes = new Dictionary<string, double>();\nif (pickedRef != null)\n{\n    Wall wall = doc.GetElement(pickedRef) as Wall;\n    if (wall != null)\n    {\n        Parameter areaParam = wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED);\n        if (areaParam != null && areaParam.HasValue)\n        {\n            double wallArea = areaParam.AsDouble();\n            WallType wallType = wall.WallType;\n            if (wallType != null)\n            {\n                CompoundStructure cs = wallType.GetCompoundStructure();\n                if (cs != null)\n                {\n                    foreach(CompoundStructureLayer layer in cs.GetLayers())\n                    {\n                        Material material = doc.GetElement(layer.MaterialId) as Material;\n                        if(material != null)\n                        {\n                            double volume = layer.Width * wallArea; \n                            materialVolumes[material.Name] = volume;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Crea un Path of Travel entre los puntos (1,1) y (9,10) en la vista de planta.","completion":"\/\/ PathOfTravel.Create is likely inaccessible in this environment.\n\/\/ A comment is left as a placeholder for the intended functionality.\n\/*\nusing (Transaction t = new Transaction(doc, \"Create Path of Travel\"))\n{\n    t.Start();\n    ViewPlan viewPlan = doc.ActiveView as ViewPlan;\n\n    if (viewPlan != null && viewPlan.ViewType == ViewType.FloorPlan)\n    {\n        ElementId levelId = viewPlan.get_Parameter(BuiltInParameter.PLAN_VIEW_LEVEL).AsElementId();\n        Level level = doc.GetElement(levelId) as Level;\n        if (level != null)\n        {\n            XYZ startPoint = new XYZ(1 \/ 0.3048, 1 \/ 0.3048, level.Elevation);\n            XYZ endPoint = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, level.Elevation);\n            \/\/ PathOfTravel.Create(viewPlan, startPoint, endPoint);\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Obtén una lista de los nombres de todos los materiales.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Create a new shared text project parameter named 'Additional Notes' for walls and doors.","completion":"using (Transaction t = new Transaction(doc, \"Create Shared Parameter\"))\n{\n    t.Start();\n    string paramName = \"Additional Notes\";\n    string originalFile = doc.Application.SharedParametersFilename;\n    string tempFile = System.IO.Path.GetTempFileName() + \".txt\";\n    using (System.IO.File.Create(tempFile)) { }\n    doc.Application.SharedParametersFilename = tempFile;\n\n    try\n    {\n        DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n        if (defFile != null)\n        {\n            DefinitionGroup group = defFile.Groups.Create(\"General\");\n            if (group != null)\n            {\n                ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(paramName, ParameterType.Text);\n                Definition definition = group.Definitions.Create(options);\n                if (definition != null)\n                {\n                    CategorySet categories = doc.Application.Create.NewCategorySet();\n                    categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                    categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                    InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                    doc.ParameterBindings.Insert(definition, binding, Autodesk.Revit.DB.BuiltInParameterGroup.PG_DATA);\n                }\n            }\n        }\n    }\n    finally\n    {\n        doc.Application.SharedParametersFilename = originalFile;\n        System.IO.File.Delete(tempFile);\n        t.Commit();\n    }\n}"}
{"prompt":"Coloca una cota de elevación en una cara y un punto de vista dados.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara superior del suelo\");\n\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && activeView != null)\n    {\n        XYZ pointOnFace = faceRef.GlobalPoint;\n        XYZ leaderEnd = pointOnFace + new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Cambia el nombre de la vista activa a 'Vista de Trabajo'.","completion":"string newName = \"Vista de Trabajo\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Create a 2D view with the section box enabled.","completion":"string viewName = \"3D View with Section Box\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Crea una apertura de hueco (shaft) que atraviese desde el Nivel 1 al Nivel 3.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft Opening\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 3\");\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p2 = new XYZ(8 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p3 = new XYZ(8 \/ 0.3048, 8 \/ 0.3048,0);\n        XYZ p4 = new XYZ(5 \/ 0.3048, 8 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un pilar del tipo 'Hormigón-Rectangular 31x60' en cada intersección de la rejilla.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Hormigón-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Inserta una ventana de 1 metro de ancho y 1.2 metros de alto en un muro, creando un nuevo tipo si es necesario.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original\n    string newTypeName = $\"Window 1.0m x 1.2m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    \/\/ Activa el nuevo tipo si no lo está\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    if(widthParam != null) widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n    if(heightParam != null) heightParam.Set(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters));\n\n    \/\/ Obtén la información necesaria para la inserción\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        \/\/ Inserta una instancia del NUEVO tipo\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Duplicate the 'Level 1' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 1\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Oculta todas las categorías de anotación en la vista activa.","completion":"using (Transaction t = new Transaction(doc, \"Hide Annotation Categories\"))\n{\n    t.Start();\n    Categories categories = doc.Settings.Categories;\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        foreach(Category cat in categories)\n        {\n            if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n            {\n                 activeView.SetCategoryHidden(cat.Id, true);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Aísla temporalmente los elementos seleccionados en la vista activa.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToIsolate = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToIsolate.Count > 0)\n{\n    activeView.IsolateElementsTemporary(idsToIsolate);\n}"}
{"prompt":"Exporta el modelo actual a un archivo NWC.","completion":"string folderPath = \"C:\/exports\/\";\nstring fileName = doc.Title + \".nwc\";\nNavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Crea un nuevo tipo de tubería llamado 'Tubería de Acero' con material 'Acero, Carbono'.","completion":"string newTypeName = \"Tubería de Acero\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Acero, Carbono\") as Material;\n\nif (pipeTypeToDuplicate != null && steel != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(steel.Id);\n    }\n}"}
{"prompt":"Get all walls on Level 1 that are structural.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Apply a red color to all windows in the active view.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(255, 0, 0));\n    ICollection<ElementId> windows = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().ToElementIds();\n    \n    foreach (ElementId windowId in windows)\n    {\n        activeView.SetElementOverrides(windowId, ogs);\n    }\n}"}
{"prompt":"Crea una nueva hoja A3 y colócale una leyenda.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Ajusta todas las ventanas para que la altura del antepecho sea 1 metro.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Select all walls on 'Level 2' and change their comment to 'REVIEW INSULATION'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nList<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\nforeach(Wall wall in wallsOnLevel2)\n{\n    wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(\"REVIEW INSULATION\");\n}"}
{"prompt":"Aplica aislamiento térmico de 27mm a todas las tuberías de agua caliente.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(27, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Ajusta todas las ventanas para que tengan la altura del antepecho a 900mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Oculta los elementos seleccionados en la vista activa.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToHide = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToHide.Count > 0)\n{\n    activeView.HideElements(idsToHide);\n}"}
{"prompt":"Set the 'Mark' parameter of all selected walls to 'W-EXT-01'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(\"W-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get all rooms on the 'Ground Floor' Level.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Ground Floor\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Find a wall by searching for the value 'W-1' in its Mark parameter.","completion":"string markValue = \"W-01\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue);\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().WherePasses(filter).FirstOrDefault() as Wall;"}
{"prompt":"Crea un pilar del tipo 'Hormigón-Rectangular 36x62' en cada intersección de la rejilla.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Hormigón-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un grupo de detalles con los elementos de detalle seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Detalle Típico 1\";\n        }\n    }\n}"}
{"prompt":"Find all section views in the project.","completion":"List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}
{"prompt":"Generate a 5x5 column grid with 7-meter spacing.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Duplicate the 'Basic Wall' type and rename it.","completion":"string typeToDuplicate = \"Basic Wall\";\nstring newTypeName = \"Basic Wall Copy\";\nWallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==typeToDuplicate);\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(newTypeName) as WallType;\n}"}
{"prompt":"Create a stair between Level 1 and Level 2.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    \/\/ TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    \/\/ Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Obtén el tipo de sistema de una tubería seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una tubería\");\n\nPipingSystemType systemType = null;\nif (pickedRef != null)\n{\n    Pipe pipe = doc.GetElement(pickedRef.ElementId) as Pipe;\n    if (pipe != null)\n    {\n        Parameter systemTypeParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        if (systemTypeParam != null && systemTypeParam.HasValue)\n        {\n            systemType = doc.GetElement(systemTypeParam.AsElementId()) as PipingSystemType;\n        }\n    }\n}\n"}
{"prompt":"Create a curtain wall 6 meters wide and 4 meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Temporarily isolate the Doors category in the active view.","completion":"ElementId doorCategoryId = new ElementId(BuiltInCategory.OST_Doors);\nICollection<ElementId> categoryIds = new List<ElementId> { doorCategoryId };\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateCategoriesTemporary(categoryIds);\n}"}
{"prompt":"Get all subcategories from the Walls category.","completion":"Category wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategoryNameMap subcategories = wallCat.SubCategories;"}
{"prompt":"Create a new level named 'Mezzanine' at 7 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Importa un archivo CAD llamado 'BasePlan.dwg' en la vista actual.","completion":"string filePath = \"C:\/CAD\/BasePlan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Genera un reporte con el área de todas las habitaciones del proyecto.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}
{"prompt":"Dentro del editor de familias, crea un plano de referencia vertical llamado 'Eje Central'.","completion":"string rpName = \"Eje Central\";\nXYZ start = new XYZ(0, UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0);\nXYZ end = new XYZ(0, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nXYZ normal = XYZ.BasisX;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = rpName;\n    }\n}"}
{"prompt":"Create a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"FR-90 Door\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Añade una línea de rejilla horizontal a un muro cortina a 1 metros de altura.","completion":"using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) \/ 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, 1.5 \/ 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un techo por contorno en el 'Nivel de Cubierta'.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel de Cubierta\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 \/ 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 \/ 0.3048,0,0), new XYZ(20 \/ 0.3048,30 \/ 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 \/ 0.3048,30 \/ 0.3048,0), new XYZ(0,30 \/ 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 \/ 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una rejilla de 5 ejes horizontales y 5 verticales, espaciados 6 metros.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint count = 5;\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((count - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Get a list of all material names.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Create a 'Roof Terrace' level at 13m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(13, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Obtén todas las instancias de la categoría Mobiliario.","completion":"List<Element> furnitureInstances = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToList();"}
{"prompt":"Encuentra todas las puertas en el Nivel 1 usando un filtro combinado.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nList<Element> doors = new List<Element>();\n\nif (level1 != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    doors = new FilteredElementCollector(doc).WherePasses(combinedFilter).ToList();\n}"}
{"prompt":"Crea un nuevo material llamado 'Vidrio Reflectante' y asígnale un color base y una transparencia.","completion":"string materialName = \"Vidrio Reflectante\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Create a text note with given text, location, and target element.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"REVIEW CLASH\", opts);\n        if (note != null)\n        {\n            Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n            leader.End = targetRef.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a section view named 'Longitudinal Section'.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-1, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    \n    if (sectionView != null)\n    {\n        sectionView.Name = \"Longitudinal Section\";\n    }\n}"}
{"prompt":"Duplica el nivel 1 con un desfase de 3m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Rename all schedules containing 'Doors' to 'Door Schedule'.","completion":"List<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"Doors\")).ToList();\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"Doors\", \"Door Schedule\");\n}"}
{"prompt":"Export the geometry of a selected element to an SAT file.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to export\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        string folderPath = \"C:\/RevitExports\/\";\n        string fileName = elem.Name + \".sat\";\n        SATExportOptions options = new SATExportOptions();\n        doc.Export(folderPath, fileName, new List<ElementId>{elem.Id}, options);\n    }\n}"}
{"prompt":"Crea un muro del tipo 'Genérico - 200mm' en el 'Nivel 1' desde (0,0) hasta (10,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Genérico - 200mm\") as WallType;\nXYZ startPoint = new XYZ(0, 0, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nif (level != null && wallType != null)\n{\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}
{"prompt":"Place lighting posts every 10m along a 100m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Duplicate level 1 with a 3m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Activa todos los FamilySymbol del proyecto.","completion":"List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (FamilySymbol sym in symbols)\n{\n    if (!sym.IsActive)\n    {\n        sym.Activate();\n    }\n}"}
{"prompt":"Conecta dos bandejas de cables con un codo.","completion":"List<CableTray> trays = new FilteredElementCollector(doc).OfClass(typeof(CableTray)).Cast<CableTray>().ToList();\n\nif (trays.Count >= 2)\n{\n    Connector c1 = trays[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = trays[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    \n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewUnionFitting(c1, c2);\n    }\n}"}
{"prompt":"Mueve el punto base del proyecto 100 metros hacia el norte.","completion":"using (Transaction t = new Transaction(doc, \"Move Project Base Point\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        XYZ translation = new XYZ(0, 100 \/ 0.3048, 0);\n        ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca una etiqueta de material en una cara de muro.","completion":"using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona una cara para etiquetar\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Selecciona la ubicación de la etiqueta\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un tipo de muro 'Muro-Doble' de 35cm y luego crea un muro de ese tipo.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Muro-Doble\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Copia todos los elementos del Nivel 1 al Nivel 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(elementsToCopy.Any())\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Create a new wall type 'Generic Wall 300mm' with a thickness of 30cm.","completion":"string newTypeName = \"Generic Wall 300mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Crea una nueva hoja A3 y colócale una leyenda.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de cota lineal con texto azul y tamaño 2mm.","completion":"using (Transaction t = new Transaction(doc, \"Create Dimension Type\"))\n{\n    t.Start();\n    string newTypeName = \"Cota Azul 2mm\";\n    DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\n    if (linearDimType != null)\n    {\n        DimensionType newDimType = linearDimType.Duplicate(newTypeName) as DimensionType;\n        if (newDimType != null)\n        {\n            Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n            Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(2 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo nivel llamado 'Planta Sótano' a una elevación de -4 metros.","completion":"string levelName = \"Planta Sótano\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\ndoc.Delete(unusedWallTypes);"}
{"prompt":"Añade un punto de referencia en las coordenadas (1,2,3) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));"}
{"prompt":"Create a 28cm 'Double-Wall' type and then create a wall of that type.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Double-Wall\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Genera un reporte con el área de todas las habitaciones del proyecto.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nList<double> roomAreas = new List<double>();\nforeach (Room room in rooms)\n{\n    if (room != null && room.Area > 0)\n    {\n        roomAreas.Add(UnitUtils.ConvertFromInternalUnits(room.Area, UnitTypeId.SquareMeters));\n    }\n}\n\/\/ El orquestador puede ahora usar la lista 'roomAreas' para generar el reporte final."}
{"prompt":"Aplica el estilo visual 'Rayos X' a la vista 3D activa.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe; \/\/ Simula el efecto 'Rayos X'\n}"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 97'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Crea una apertura de hueco (shaft) que atraviese desde el Nivel 1 al Nivel 3.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft Opening\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 3\");\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p2 = new XYZ(8 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p3 = new XYZ(8 \/ 0.3048, 8 \/ 0.3048,0);\n        XYZ p4 = new XYZ(5 \/ 0.3048, 8 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un ensamblaje a partir de los elementos seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"Nuevo Ensamblaje\";\n    }\n}"}
{"prompt":"Genera un equipo eléctrico en X=1,Y=1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(level != null && panelSymbol != null)\n{\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Create an assembly from the selected elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"New Assembly\";\n    }\n}"}
{"prompt":"Crea un tipo de muro 'Muro-Doble' de 30cm y luego crea un muro de ese tipo.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Muro-Doble\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Find all doors on Level 2 that belong to the 'Single-Flush' family.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Single-Flush\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Cambia el nombre de todas las familias cargadas que contengan 'Métrica' a 'Imperial'.","completion":"List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Métrica\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"Métrica\", \"Imperial\");\n}"}
{"prompt":"Create a new pipe type named 'Steel Pipe' with 'Steel, Carbon' material.","completion":"string newTypeName = \"Steel Pipe\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Steel, Carbon\") as Material;\n\nif (pipeTypeToDuplicate != null && steel != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(steel.Id);\n    }\n}"}
{"prompt":"Crea una puerta de 1m de ancho y 2m de alto en el muro.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original y asegura un nombre único\n    string newTypeName = $\"Door {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitTypeId.Meters)}m x {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitTypeId.Meters)}m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Cambia el nombre de todas las familias cargadas que contengan 'Métrica' a 'Imperial'.","completion":"List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Métrica\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"Métrica\", \"Imperial\");\n}"}
{"prompt":"Given a wall, find all pipes passing through it.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\n\nList<ElementId> intersectingPipes = new List<ElementId>();\nif (wallRef != null)\n{\n    Element wall = doc.GetElement(wallRef);\n    if (wall != null)\n    {\n        ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n        intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds().ToList();\n    }\n}\n"}
{"prompt":"Set the 'Mark' parameter of all selected walls to 'W-EXT-1'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new door type named 'FR-73 Door' and set its fire rating to '73 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"FR-90 Door\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Find all doors on Level 1 using a combined filter.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nList<Element> doors = new List<Element>();\n\nif (level1 != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    doors = new FilteredElementCollector(doc).WherePasses(combinedFilter).ToList();\n}"}
{"prompt":"Crea una apertura de hueco vertical (shaft) desde el nivel base hasta el nivel más alto.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(2 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 2 \/ 0.3048,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(2 \/ 0.3048, 5 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Set the sill height of all windows to 1 meter.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea columnas en cada intersección de ejes.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Crea una columna estructural en la posición X=12, Y=6.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Obtén una lista de los nombres de todos los materiales.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Get the IDs of all 3D views starting with 'Coord' for export.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Set the sill height of all windows to 847mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(847, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Crea una familia 'in-situ' para un mostrador de recepción personalizado usando una extrusión.","completion":""}
{"prompt":"Crea un nuevo material llamado 'Vidrio Reflectante' y asígnale un color base y una transparencia.","completion":"string materialName = \"Vidrio Reflectante\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Create a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"string newTypeName = \"FR-90 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = null;\nif (doorTypeToDuplicate != null)\n{\n    newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"90 min\");\n        }\n    }\n}"}
{"prompt":"Crea un muro en Nivel 1 de (0,0,0) a (6,0,0) con 5m de alto.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level1 != null)\n{\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallType != null)\n    {\n        Line wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n        double height = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n        Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n    }\n}"}
{"prompt":"Crea una vista 3D orientada desde el sureste.","completion":"string viewName = \"Vista 3D Sureste\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}
{"prompt":"Crea una nueva vista 3D orientada desde el punto (10,10,10) mirando hacia el origen.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v=>v.ViewFamily==ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    if (view != null)\n    {\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D vo = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        view.SetOrientation(vo);\n        view.Name = \"Vista desde (10,10,10)\";\n    }\n}"}
{"prompt":"Crea un nuevo parámetro de proyecto compartido de texto llamado 'Notas Adicionales' para muros y puertas.","completion":"using (Transaction t = new Transaction(doc, \"Create Shared Parameter\"))\n{\n    t.Start();\n    string paramName = \"Notas Adicionales\";\n    string originalFile = doc.Application.SharedParametersFilename;\n    string tempFile = System.IO.Path.GetTempFileName() + \".txt\";\n    using (System.IO.File.Create(tempFile)) { }\n    doc.Application.SharedParametersFilename = tempFile;\n\n    try\n    {\n        DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n        if (defFile != null)\n        {\n            DefinitionGroup group = defFile.Groups.Create(\"General\");\n            if (group != null)\n            {\n                ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(paramName, ParameterType.Text);\n                Definition definition = group.Definitions.Create(options);\n                if (definition != null)\n                {\n                    CategorySet categories = doc.Application.Create.NewCategorySet();\n                    categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                    categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                    InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                    doc.ParameterBindings.Insert(definition, binding, Autodesk.Revit.DB.BuiltInParameterGroup.PG_DATA);\n                }\n            }\n        }\n    }\n    finally\n    {\n        doc.Application.SharedParametersFilename = originalFile;\n        System.IO.File.Delete(tempFile);\n        t.Commit();\n    }\n}"}
{"prompt":"Export the current 3D view to NWC for Navisworks.","completion":"View3D view3d = doc.ActiveView as View3D;\n\nif (view3d != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    string fileName = view3d.Name + \".nwc\";\n    NavisworksExportOptions options = new NavisworksExportOptions();\n    options.ExportScope = NavisworksExportScope.View;\n    options.ViewId = view3d.Id;\n    doc.Export(folderPath, fileName, options);\n}"}
{"prompt":"Aplica un color rojo a todas las ventanas en la vista activa.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(255, 0, 0));\n    ICollection<ElementId> windows = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().ToElementIds();\n    \n    foreach (ElementId windowId in windows)\n    {\n        activeView.SetElementOverrides(windowId, ogs);\n    }\n}"}
{"prompt":"Create a structural beam between (0,0,3) and (4,0,3) on Level 2.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Selecciona todos los muros del 'Nivel 2' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif (level2 != null)\n{\n    List<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\n    foreach(Wall wall in wallsOnLevel2)\n    {\n        Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentParam != null && !commentParam.IsReadOnly)\n        {\n            commentParam.Set(\"REVISAR AISLAMIENTO\");\n        }\n    }\n}"}
{"prompt":"Encuentra todos los muros que no están asociados a ningún nivel.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Modifica el tipo de muro de un muro existente a uno que contenga 'Aislamiento Térmico'.","completion":"Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(x => x.Name.Contains(\"Aislamiento Térmico\") || x.Name.Contains(\"Insulation\"));\n\nif (wallToChange != null && newType != null)\n{\n    wallToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Crea un nuevo parámetro de proyecto compartido de texto llamado 'Notas Adicionales' para muros y puertas.","completion":"using (Transaction t = new Transaction(doc, \"Create Shared Parameter\"))\n{\n    t.Start();\n    string paramName = \"Notas Adicionales\";\n    string originalFile = doc.Application.SharedParametersFilename;\n    string tempFile = System.IO.Path.GetTempFileName() + \".txt\";\n    using (System.IO.File.Create(tempFile)) { }\n    doc.Application.SharedParametersFilename = tempFile;\n\n    try\n    {\n        DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n        if (defFile != null)\n        {\n            DefinitionGroup group = defFile.Groups.Create(\"General\");\n            if (group != null)\n            {\n                ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(paramName, ParameterType.Text);\n                Definition definition = group.Definitions.Create(options);\n                if (definition != null)\n                {\n                    CategorySet categories = doc.Application.Create.NewCategorySet();\n                    categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                    categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                    InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                    doc.ParameterBindings.Insert(definition, binding, Autodesk.Revit.DB.BuiltInParameterGroup.PG_DATA);\n                }\n            }\n        }\n    }\n    finally\n    {\n        doc.Application.SharedParametersFilename = originalFile;\n        System.IO.File.Delete(tempFile);\n        t.Commit();\n    }\n}"}
{"prompt":"Inicia y confirma una transacción para 'Modificar Proyecto'.","completion":""}
{"prompt":"Exporta el documento a un archivo IFC con la versión IFC4x3.","completion":"string folderPath = \"C:\/RevitExports\/\";\nstring fileName = doc.Title + \"_IFC4x3.ifc\";\nif(System.IO.Directory.Exists(folderPath))\n{\n    IFCExportOptions options = new IFCExportOptions();\n    options.FileVersion = IFCVersion.IFC4x3;\n    doc.Export(folderPath, fileName, options);\n}"}
{"prompt":"Create a text note with given text, location, and target element.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"REVIEW CLASH\", opts);\n        if (note != null)\n        {\n            note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L).End = targetRef.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new wall type 'Generic Wall 357mm' with a thickness of 25cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Generic Wall 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un techo por extrusión con una pendiente del 10%.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10 \/ 0.3048, 0, 1 \/ 0.3048)));\n        \n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        \n        if (refPlane != null)\n        {\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10 \/ 0.3048);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a text note with given text, location, and target element.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"REVIEW CLASH\", opts);\n        if (note != null)\n        {\n            Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n            leader.End = targetRef.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Display a dialog box with 'Yes' and 'No' options.","completion":""}
{"prompt":"Crea columnas en cada intersección de ejes.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Hide all annotation elements in the active view.","completion":"if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}
{"prompt":"Temporarily isolate all furniture in the active view.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Crea un muro cortina de 6 metros de ancho y 4 metros de alto.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Crea un tipo de muro 'Muro-Doble' de 28cm y luego crea un muro de ese tipo.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Muro-Doble\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Temporarily isolate the selected elements in the active view.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToIsolate = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToIsolate.Count > 0)\n{\n    activeView.IsolateElementsTemporary(idsToIsolate);\n}"}
{"prompt":"Crea una tubería con un diámetro de 150mm.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(150, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Crea 4 ejes en sentido vertical separados 10 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<4; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Import a CAD file named 'BasePlan.dwg' into the current view.","completion":"string filePath = \"C:\/CAD\/BasePlan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Change the type of a selected floor to 'Concrete 17cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 15cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Duplica la vista 'Nivel 1' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 1\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}
{"prompt":"Crea una losa de cimentación de 16x14 metros.","completion":"using (Transaction t = new Transaction(doc, \"Create Foundation Slab\"))\n{\n    t.Start();\n    Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    FloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n\n    if (foundationLevel != null && slabType != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(20\/0.3048, 0, 0);\n        XYZ p3 = new XYZ(20\/0.3048, 15\/0.3048, 0);\n        XYZ p4 = new XYZ(0, 15\/0.3048, 0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new 6mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    TextNoteType newType = null;\n    if (defaultType != null)\n    {\n        newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Ajusta todas las ventanas para que tengan la altura del antepecho a 768mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(768, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Given a wall, get its materials and their volumes.","completion":"UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\n\nDictionary<string, double> materialVolumes = new Dictionary<string, double>();\nif (pickedRef != null)\n{\n    Wall wall = doc.GetElement(pickedRef) as Wall;\n    if (wall != null)\n    {\n        Parameter areaParam = wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED);\n        if (areaParam != null && areaParam.HasValue)\n        {\n            double wallArea = areaParam.AsDouble();\n            WallType wallType = wall.WallType;\n            if (wallType != null)\n            {\n                CompoundStructure cs = wallType.GetCompoundStructure();\n                if (cs != null)\n                {\n                    foreach(CompoundStructureLayer layer in cs.GetLayers())\n                    {\n                        Material material = doc.GetElement(layer.MaterialId) as Material;\n                        if(material != null)\n                        {\n                            double volume = layer.Width * wallArea;\n                            materialVolumes[material.Name] = volume;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Get the total length of all walls in the project.","completion":"double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}
{"prompt":"Set the visibility of the 'Furniture' category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nView activeView = doc.ActiveView;\n\nif (furnitureCat != null && activeView != null)\n{\n    activeView.SetCategoryHidden(furnitureCat.Id, true);\n}\n"}
{"prompt":"Crea una cimentación de viga de 8 metros de largo.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, StructuralType.Footing);\n}"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior\");\n\nif (selectedIds.Count > 0 && targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n    }\n}"}
{"prompt":"Crea un nuevo material llamado 'Vidrio Reflectante' y asígnale un color base.","completion":"string materialName = \"Vidrio Reflectante\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240); \/\/ Un color azulado claro para el vidrio\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Crea un nuevo tipo de muro de 25cm llamado 'Muro Estructural 25cm'.","completion":"string newTypeName = \"Muro Estructural 25cm\";\nWallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(wallTypeToDuplicate != null)\n{\n    WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n            cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(0.25, UnitTypeId.Meters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Duplica el tipo de muro 'Basic Wall' y renómbralo.","completion":"string typeToDuplicate = \"Basic Wall\";\nstring newTypeName = \"Basic Wall Copy\";\nWallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==typeToDuplicate);\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(newTypeName) as WallType;\n}"}
{"prompt":"Crea un conducto eléctrico de 1 pulgada de diámetro.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ end = new XYZ(5 \/ 0.3048, 0, 3 \/ 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set(1.0\/12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Importa topografía georreferenciada desde un archivo LandXML.","completion":"\/\/ The Revit API in the provided context does not support direct LandXML import.\n\/\/ This functionality typically requires additional add-ins like the Site Designer, which are not available here.\n\/\/ As a placeholder, this code will show how to create a simple topography surface from a list of points.\nusing(Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(50, 0, 5));\n    points.Add(new XYZ(0, 50, 10));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Select all walls on 'Level 2' and change their comment to 'REVIEW INSULATION'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif (level2 != null)\n{\n    List<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\n    foreach(Wall wall in wallsOnLevel2)\n    {\n        Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentParam != null && !commentParam.IsReadOnly)\n        {\n            commentParam.Set(\"REVIEW INSULATION\");\n        }\n    }\n}"}
{"prompt":"Crea 9 worksets de arquitectura.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_MAM\", \"TAD_ARQ_ACA\", \"TAD_ARQ_PLA\", \"TAD_ARQ_PSO\", \"TAD_ARQ_HRE\", \"TAD_ARQ_ALU\", \"TAD_ARQ_CAR\", \"TAD_ARQ_MOB\", \"TAD_ARQ_PLO\", \"TAD_ARQ_EXT\" };\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}"}
{"prompt":"Crea un muro en el Nivel 1 que vaya de (0,0,0) a (10,0,0) con una altura de 4 metros.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Crea una vista 3D por defecto.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n}"}
{"prompt":"Create a new linear dimension type with blue text and 2mm size.","completion":"using (Transaction t = new Transaction(doc, \"Create Dimension Type\"))\n{\n    t.Start();\n    string newTypeName = \"Blue Dimension 2mm\";\n    DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\n    if (linearDimType != null)\n    {\n        DimensionType newDimType = linearDimType.Duplicate(newTypeName) as DimensionType;\n        if (newDimType != null)\n        {\n            Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n            Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(2 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Añade un punto de referencia en las coordenadas (1,2,3) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));"}
{"prompt":"Genera un piso rectangular de 9×7 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior\");\nif(targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null)\n        {\n            wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Create a 3D view oriented from the southeast.","completion":"string viewName = \"3D View Southeast\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}
{"prompt":"Create a floor with a circular hole in the center.","completion":"using (Transaction t = new Transaction(doc, \"Create Floor with Hole\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\n    if (level != null && floorType != null)\n    {\n        XYZ p1 = new XYZ(-10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(-10 \/ 0.3048, 10 \/ 0.3048, 0);\n        CurveLoop outerLoop = new CurveLoop();\n        outerLoop.Append(Line.CreateBound(p1, p2));\n        outerLoop.Append(Line.CreateBound(p2, p3));\n        outerLoop.Append(Line.CreateBound(p3, p4));\n        outerLoop.Append(Line.CreateBound(p4, p1));\n\n        XYZ center = XYZ.Zero;\n        double radius = 2 \/ 0.3048;\n        CurveLoop innerLoop = new CurveLoop();\n        innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n        innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n        Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Mueve los elementos seleccionados 3 metros hacia arriba.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Create a 'Roof Terrace' level at 15m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Set the visibility of the 'Furniture' category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Create 3 vertical grids spaced 9 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\nfor(int i=0; i<4; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Coloca una cota de elevación en el Nivel 1.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    View activeView = doc.ActiveView;\n\n    if (lvl1 != null && activeView != null)\n    {\n        Reference levelRef = new Reference(lvl1);\n        XYZ origin = new XYZ(5\/0.3048, 5\/0.3048, lvl1.Elevation);\n        XYZ leaderEnd = origin + new XYZ(2\/0.3048, 2\/0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, levelRef, origin, origin, leaderEnd, origin, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén el elemento anfitrión de la primera ventana que encuentres.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}
{"prompt":"Create a 3D view with the section box enabled.","completion":"string viewName = \"3D View with Section Box\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}
{"prompt":"Crea un muro del tipo 'Genérico - 200mm' en el 'Nivel 1' desde (0,0) hasta (10,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Genérico - 200mm\") as WallType;\nXYZ startPoint = new XYZ(0, 0, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nWall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);"}
{"prompt":"Create an assembly from the selected elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"New Assembly\";\n    }\n}"}
{"prompt":"Rename the active view to 'Working View'.","completion":"string newName = \"Working View\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Crea 5 worksets para las disciplinas de ingeniería.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Move a wall 6 meters to the right.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (wall != null)\n{\n    XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters),0,0);\n    ElementTransformUtils.MoveElement(doc, wall.Id, translation);\n}"}
{"prompt":"Place lighting posts every 10m along a 100m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Set the sill height of all windows to 836mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(836, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Coloca postes de iluminación cada 10m en un camino de 100m.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Apply the 'Architectural Template' view template to the active view.","completion":"View activeView = doc.ActiveView;\nView viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.IsTemplate && v.Name == \"Architectural Template\");\n\nif (activeView != null && viewTemplate != null)\n{\n    activeView.ViewTemplateId = viewTemplate.Id;\n}"}
{"prompt":"Oculta los elementos seleccionados en la vista activa.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToHide = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToHide.Count > 0)\n{\n    activeView.HideElements(idsToHide);\n}"}
{"prompt":"Connect two cable trays with an elbow fitting.","completion":"List<CableTray> trays = new FilteredElementCollector(doc).OfClass(typeof(CableTray)).Cast<CableTray>().ToList();\n\nif (trays.Count >= 2)\n{\n    Connector c1 = trays[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = trays[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    \n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewUnionFitting(c1, c2);\n    }\n}"}
{"prompt":"Etiqueta todas las habitaciones con su área.","completion":"using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint loc = room.Location as LocationPoint;\n            if(loc != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(loc.Point.X, loc.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Genera un equipo eléctrico en X=1,Y=1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && panelSymbol != null)\n{\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Exporta la geometría de un elemento seleccionado a un archivo SAT.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para exportar\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        string folderPath = \"C:\/RevitExports\/\";\n        string fileName = elem.Name + \".sat\";\n        SATExportOptions options = new SATExportOptions();\n        doc.Export(folderPath, fileName, new List<ElementId>{elem.Id}, options);\n    }\n}"}
{"prompt":"Create a structural foundation slab 43cm thick.","completion":"using (Transaction t = new Transaction(doc, \"Create Foundation Slab\"))\n{\n    t.Start();\n    Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    FloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n    if(slabTypeToDuplicate != null && foundationLevel != null)\n    {\n        string newTypeName = \"Foundation Slab 40cm\";\n        FloorType newSlabType = slabTypeToDuplicate.Duplicate(newTypeName) as FloorType;\n        if(newSlabType != null)\n        {\n            CompoundStructure cs = newSlabType.GetCompoundStructure();\n            if (cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 400 \/ 304.8);\n                newSlabType.SetCompoundStructure(cs);\n                XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n                doc.Create.NewFloor(new List<CurveLoop>{profile}, newSlabType, foundationLevel, true);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create an assembly from the selected elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"New Assembly\";\n    }\n}"}
{"prompt":"Get the total length of all walls in the project.","completion":"double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}
{"prompt":"Obtén las coordenadas del punto base y del punto de reconocimiento.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}
{"prompt":"Create a new window schedule that includes Type Mark, Width, and Height.","completion":"string scheduleName = \"Window Schedule\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}
{"prompt":"Crea una nueva vista de alzado mirando al sur.","completion":"using (Transaction t = new Transaction(doc, \"Create South Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 0);\n            if (aev != null)\n            {\n                aev.Name = \"Alzado Sur\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get the IDs of all 3D views starting with 'Coord' for export.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Rename the active view to 'Working View'.","completion":"string newName = \"Working View\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Temporarily isolate all furniture in the active view.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Añade una etiqueta a la columna más cercana al origen.","completion":"using (Transaction t = new Transaction(doc, \"Tag Column\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n        LocationPoint lp = c.Location as LocationPoint;\n        return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n    }).FirstOrDefault();\n\n    if (activeView != null && column != null)\n    {\n        LocationPoint loc = column.Location as LocationPoint;\n        if (loc != null)\n        {\n            IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una cimentación de viga de 8 metros de largo.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, StructuralType.Footing);\n}"}
{"prompt":"Aísla temporalmente todo el mobiliario en la vista activa.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Allow the user to select a wall and get its ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Find all section views in the project.","completion":"List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}
{"prompt":"Rename all loaded families containing 'Metric' to 'Imperial'.","completion":"List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Metric\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"Metric\", \"Imperial\");\n}"}
{"prompt":"Create a new elevation view looking south.","completion":"string viewName = \"South Elevation (New)\";\nViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20, 0), 100);\nView aev = marker.CreateElevation(doc, doc.ActiveView.Id, 0);\naev.Name = viewName;"}
{"prompt":"Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Permite al usuario seleccionar un muro y obtén su ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-54' y asigna '60 min' al parámetro 'Fire Rating'.","completion":"string newTypeName = \"Puerta RF-60\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"60 min\");\n    }\n}"}
{"prompt":"Create a 'Roof Terrace' level at 13m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(13, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Create a Reflected Ceiling Plan view for Level 1.","completion":"string levelName = \"Level 1\";\nstring viewName = \"Level 1 Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 300mm' con un grosor de 30cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Muro Genérico 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un techo por contorno en el 'Nivel de Cubierta'.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel de Cubierta\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 \/ 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 \/ 0.3048,0,0), new XYZ(20 \/ 0.3048,30 \/ 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 \/ 0.3048,30 \/ 0.3048,0), new XYZ(0,30 \/ 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 \/ 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Create a rectangular opening in a floor.","completion":"using (Transaction t = new Transaction(doc, \"Create Opening\"))\n{\n    t.Start();\n    Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\n\n    if (floor != null)\n    {\n        XYZ p1 = new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(3 \/ 0.3048, 1 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(3 \/ 0.3048, 3 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(1 \/ 0.3048, 3 \/ 0.3048, 0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1, p2));\n        profile.Append(Line.CreateBound(p2, p3));\n        profile.Append(Line.CreateBound(p3, p4));\n        profile.Append(Line.CreateBound(p4, p1));\n        doc.Create.NewOpening(floor, profile, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de tubería llamado 'Tubería de Acero' con material 'Acero, Carbono'.","completion":"string newTypeName = \"Tubería de Acero\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Acero, Carbono\") as Material;\n\nif (pipeTypeToDuplicate != null && steel != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(steel.Id);\n    }\n}"}
{"prompt":"Genera un piso rectangular de 10×7 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Create a text note with given text, location, and target element.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"REVIEW CLASH\", opts);\n        if (note != null)\n        {\n            note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L).End = targetRef.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get a list of all project warnings.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\n"}
{"prompt":"Create a new Ribbon panel named 'My Tools' with a button.","completion":""}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Fill the material parameter of all walls with 'Concrete'.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concrete\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Dimension the length of a user-selected wall.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall to dimension\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}
{"prompt":"Insert a text note with 'Review' in the current view.","completion":"View activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    XYZ position = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\n    TextNote.Create(doc, activeView.Id, position, \"Review\", defaultTypeId);\n}"}
{"prompt":"Draw a filled region with a diagonal pattern.","completion":"using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n\n    if (activeView != null && fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                XYZ p1 = new XYZ(0,0,0);\n                XYZ p2 = new XYZ(5 \/ 0.3048,0,0);\n                XYZ p3 = new XYZ(5 \/ 0.3048,5 \/ 0.3048,0);\n                XYZ p4 = new XYZ(0,5 \/ 0.3048,0);\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(p1,p2));\n                profile.Append(Line.CreateBound(p2,p3));\n                profile.Append(Line.CreateBound(p3,p4));\n                profile.Append(Line.CreateBound(p4,p1));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop>{profile});\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Mueve un elemento seleccionado a la posición (5,5).","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para mover\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            XYZ newPosition = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), lp.Point.Z);\n            lp.Point = newPosition;\n        }\n    }\n}"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create a roof by footprint on the 'Roof Level'.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Roof Level\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 \/ 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 \/ 0.3048,0,0), new XYZ(20 \/ 0.3048,30 \/ 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 \/ 0.3048,30 \/ 0.3048,0), new XYZ(0,30 \/ 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 \/ 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Etiqueta todas las habitaciones con su área.","completion":"using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(locPoint.Point.X, locPoint.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un parámetro global de longitud llamado 'AnchoCorredor' con valor de 1m.","completion":"string paramName = \"AnchoCorredor\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)));\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-90' y establece su resistencia al fuego a '90 min'.","completion":"string newTypeName = \"Puerta RF-90\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"90 min\");\n    }\n}"}
{"prompt":"Copy all walls from Level 1 to Level 2.","completion":"using (Transaction t = new Transaction(doc, \"Copy Walls\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\n    if (level1 != null && level2 != null)\n    {\n        ICollection<ElementId> wallsToCopy = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(e => (e as Wall) != null && (e as Wall).LevelId.Equals(level1.Id)).Select(e => e.Id).ToList();\n        double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n        XYZ translation = new XYZ(0, 0, elevationDiff);\n        if (wallsToCopy.Count > 0)\n        {\n            ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Cambia el tipo de una losa seleccionada a 'Concreto 16cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 15cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Crea un nuevo nivel llamado 'Planta Sótano' a una elevación de -4.5 metros.","completion":"string levelName = \"Planta Sótano\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Crea un muro cortina de 6 metros de ancho y 4 metros de alto.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Adjust the view's crop region to a rectangle from (0,0) to (20,20).","completion":"using (Transaction t = new Transaction(doc, \"Adjust Crop Region\"))\n{\n    t.Start();\n    View view = doc.ActiveView;\n\n    if (view != null && view.CropBoxActive)\n    {\n        BoundingBoxXYZ cropBox = view.CropBox;\n        if (cropBox != null)\n        {\n            XYZ minPoint = new XYZ(0, 0, cropBox.Min.Z);\n            XYZ maxPoint = new XYZ(20 \/ 0.3048, 20 \/ 0.3048, cropBox.Max.Z);\n            cropBox.Min = minPoint;\n            cropBox.Max = maxPoint;\n            view.CropBox = cropBox;\n            view.CropBoxVisible = true;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a rectangular opening in a floor.","completion":"using (Transaction t = new Transaction(doc, \"Create Opening\"))\n{\n    t.Start();\n    Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\n\n    if (floor != null)\n    {\n        XYZ p1 = new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(3 \/ 0.3048, 1 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(3 \/ 0.3048, 3 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(1 \/ 0.3048, 3 \/ 0.3048, 0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1, p2));\n        profile.Append(Line.CreateBound(p2, p3));\n        profile.Append(Line.CreateBound(p3, p4));\n        profile.Append(Line.CreateBound(p4, p1));\n        doc.Create.NewOpening(floor, profile, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Get a list of all material names.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Duplicate the 'Generic - 147mm' wall type and name it 'Interior - 13cm Plaster'.","completion":"string originalName = \"Generic - 150mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Genera una cuadrícula de columnas 5x5 con separación de 8 metros.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Importa topografía georreferenciada desde un archivo LandXML.","completion":"\/\/ The Revit API in the provided context does not support direct LandXML import.\n\/\/ This functionality typically requires additional add-ins like the Site Designer, which are not available here.\n\/\/ As a placeholder, this code will show how to create a simple topography surface from a list of points.\nusing(Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(50, 0, 5));\n    points.Add(new XYZ(0, 50, 10));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Get a list of all project warnings.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\n"}
{"prompt":"Obtén todas las subcategorías de la categoría Muros.","completion":"Category wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategoryNameMap subcategories = wallCat.SubCategories;"}
{"prompt":"Export each schedule to an individual CSV file.","completion":"string exportPath = \"C:\/RevitExports\/\";\nList<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => !vs.IsTemplate).ToList();\nViewScheduleExportOptions options = new ViewScheduleExportOptions();\noptions.FieldDelimiter = \",\";\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Export(exportPath, schedule.Name + \".csv\", options);\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}
{"prompt":"Hide all annotation elements in the active view.","completion":"if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}
{"prompt":"Create an in-place family for a custom reception desk using an extrusion.","completion":""}
{"prompt":"Change the type of all 'Fixed' windows to 'Casement'.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Casement\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Fixed\"));\n\nif (newType != null && oldType != null)\n{\n    List<FamilyInstance> windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Añade refuerzo a una columna.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    \/\/ Para simplificar, asume que la columna tiene una LocationPoint y una Transform válida.\n    \/\/ Para mayor robustez, se podría validar column.Location y column.GetTransform().\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Export the model to IFC4 format for coordination.","completion":"string folderPath = \"C:\/RevitExports\/\";\nstring fileName = doc.Title + \"-Coordination.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Create a new schedule for Structural Columns.","completion":"string scheduleName = \"Structural Column Schedule\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Crea una nota de texto con un texto, una ubicación y un elemento de destino dados.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"REVISAR CLASH\", opts);\n        if (note != null)\n        {\n            note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L).End = targetRef.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new Level named 'Level 4' at an elevation of 13 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(13, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 4\";\n}"}
{"prompt":"Rotate project north 30 degrees clockwise.","completion":"using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInDegrees = 30.0;\n        double angleInRadians = -(angleInDegrees * Math.PI \/ 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Hide the selected elements in the active view.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToHide = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToHide.Count > 0)\n{\n    activeView.HideElements(idsToHide);\n}"}
{"prompt":"Add the 'Level', 'Mark', and 'Volume' fields to the column schedule.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Inserta una ventana de 1 metro de ancho y 1 metros de alto en un muro, creando un nuevo tipo si es necesario.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original\n    string newTypeName = $\"Window 1.0m x 1.2m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    \/\/ Activa el nuevo tipo si no lo está\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    if(widthParam != null) widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n    if(heightParam != null) heightParam.Set(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n\n    \/\/ Obtén la información necesaria para la inserción\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        \/\/ Inserta una instancia del NUEVO tipo\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Crea una nueva habitación en el Nivel 1 en el punto (11, 11).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters));\n    Room room = doc.Create.NewRoom(level1, point);\n}"}
{"prompt":"Temporarily isolate all furniture in the active view.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Add a reference point at coordinates (1,2,3) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));"}
{"prompt":"Obtén todos los muros del Nivel 1 que son estructurales.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level1 != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Encuentra todas las puertas del Nivel 2 que sean de la familia 'Puerta Sencilla'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Puerta Sencilla\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una nueva vista de alzado mirando al norte.","completion":"using (Transaction t = new Transaction(doc, \"Create North Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 2);\n            if (aev != null)\n            {\n                aev.Name = \"Alzado Norte\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 139mm' y nómbralo 'Interior - 18cm Yeso'.","completion":"string originalName = \"Genérico - 150mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Crea una región rellena con un patrón de 'Concreto'.","completion":"using (Transaction t = new Transaction(doc, \"Create Filled Region\"))\n{\n    t.Start();\n    FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\") || frt.Name.Contains(\"Concreto\"));\n    View activeView = doc.ActiveView;\n\n    if (regionType != null && activeView != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 0,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(0, 5 \/ 0.3048,0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n    }\n    t.Commit();\n}"}
{"prompt":"Recarga el vínculo de Revit 'Estructura_LINK.rvt'.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"Estructura_LINK.rvt\");\nif(linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Get a list of all project warnings.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\n"}
{"prompt":"Encuentra todos los muros que no están asociados a ningún nivel.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Export the document to an IFC file with version IFC4x3.","completion":"string folderPath = \"C:\/RevitExports\/\";\nstring fileName = doc.Title + \"_IFC4x3.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4x3;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Cambia un panel de vidrio de un muro cortina por un panel sólido.","completion":"using (Transaction t = new Transaction(doc, \"Change Curtain Panel\"))\n{\n    t.Start();\n    Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\n    FamilySymbol solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_CurtainWallPanels && (fs.Name.Contains(\"Solid\") || fs.Name.Contains(\"Sólido\")));\n\n    if (curtainWall != null && solidPanelType != null)\n    {\n        CurtainGrid grid = curtainWall.CurtainGrid;\n        if (grid != null)\n        {\n            ElementId panelIdToChange = grid.GetPanelIds().FirstOrDefault();\n            if (panelIdToChange != ElementId.InvalidElementId)\n            {\n                Panel panelToChange = doc.GetElement(panelIdToChange) as Panel;\n                if (panelToChange != null) panelToChange.ChangeTypeId(solidPanelType.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Duplicate the active view and name it 'Working Copy'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"Working Copy\";\n    }\n}"}
{"prompt":"Create a new material named 'Reflective Glass' and assign it a base color.","completion":"string materialName = \"Reflective Glass\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240); \/\/ A light bluish color for glass\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Create a wall on Level 1 from (0,0,0) to (5,0,0) with a height of 5 meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    Line wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    double height = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Obtén los IDs de todas las vistas 3D que empiezan con 'Coord' para exportación.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Ajusta todas las ventanas para que la altura del antepecho sea 1 metro.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Find all clashes between pipes and beams.","completion":"ICollection<ElementId> pipeIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WhereElementIsNotElementType().ToElementIds();\nICollection<ElementId> beamIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().ToElementIds();\n\nif(pipeIds.Count > 0 && beamIds.Count > 0)\n{\n    List<ElementFilter> beamFilters = new List<ElementFilter>();\n    foreach(ElementId beamId in beamIds)\n    {\n        Element beam = doc.GetElement(beamId);\n        if(beam != null) beamFilters.Add(new ElementIntersectsElementFilter(beam));\n    }\n    LogicalOrFilter clashFilter = new LogicalOrFilter(beamFilters);\n    ICollection<ElementId> clashingPipeIds = new FilteredElementCollector(doc, pipeIds).WherePasses(clashFilter).ToElementIds();\n    \/\/ clashingPipeIds contains the IDs of clashing elements; selection\/display is external.\n}"}
{"prompt":"Change a glass panel in a curtain wall to a solid panel.","completion":"using (Transaction t = new Transaction(doc, \"Change Curtain Panel\"))\n{\n    t.Start();\n    Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\n    FamilySymbol solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_CurtainWallPanels && fs.Name.Contains(\"Solid\"));\n\n    if (curtainWall != null && solidPanelType != null)\n    {\n        CurtainGrid grid = curtainWall.CurtainGrid;\n        if (grid != null)\n        {\n            ElementId panelIdToChange = grid.GetPanelIds().FirstOrDefault();\n            if (panelIdToChange != ElementId.InvalidElementId)\n            {\n                Panel panelToChange = doc.GetElement(panelIdToChange) as Panel;\n                if (panelToChange != null) panelToChange.ChangeTypeId(solidPanelType.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new 25cm wall type named 'Structural Wall 25cm'.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Structural Wall 25cm\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (wallTypeToDuplicate != null)\n    {\n        WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n            cs.SetLayerWidth(coreLayerIndex, 0.25 \/ 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una vista de sección llamada 'Sección Longitudinal'.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-1, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    \n    if (sectionView != null)\n    {\n        sectionView.Name = \"Sección Longitudinal\";\n    }\n}"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 343mm' con un grosor de 26cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Muro Genérico 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Find all walls taller than 4 meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Get all door families loaded in the project.","completion":"List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Create a section view using a 11x8x4 meter box.","completion":"ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\n\nif (sectionVFT != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(0,0,0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}
{"prompt":"Create a detail group with the selected detail items.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Typical Detail 1\";\n        }\n    }\n}"}
{"prompt":"Create a filled region with a 'Concrete' pattern.","completion":"using (Transaction t = new Transaction(doc, \"Create Filled Region\"))\n{\n    t.Start();\n    FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\"));\n    View activeView = doc.ActiveView;\n\n    if (regionType != null && activeView != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 0,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(0, 5 \/ 0.3048,0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a 5x5 column grid with 8-meter spacing.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Assign all walls to the 'Structure' workset.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if (doc.IsWorkshared)\n    {\n        Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w => w.Name == \"Structure\");\n        if (ws != null)\n        {\n            FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n            foreach (Element e in collector)\n            {\n                Parameter p = e.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if (p != null && !p.IsReadOnly)\n                {\n                    p.Set(ws.Id.IntegerValue);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Ajusta todas las ventanas para que tengan la altura del antepecho a 900mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Ajusta todas las ventanas para que tengan la altura del antepecho a 900mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Get the coordinates of the project base point and the survey point.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}
{"prompt":"Crea 5 worksets para las disciplinas de ingeniería.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Une la geometría de una columna y un suelo que se cruzan.","completion":"Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\nif (column != null && floor != null)\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}
{"prompt":"Create a curtain wall 6 meters wide and 4 meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Place the 'Level 1' view in the center of the active sheet.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 1\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null && activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) \/ 2, (sheetBox.Min.V + sheetBox.Max.V) \/ 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Oculta todos los elementos de anotación en la vista activa.","completion":"if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}
{"prompt":"Averigua quién es el propietario de un elemento seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento\");\n\nWorksharingTooltipInfo info = null;\nif (pickedRef != null)\n{\n    info = WorksharingUtils.GetWorksharingTooltipInfo(doc, pickedRef.ElementId);\n}\n"}
{"prompt":"Crea una vista 3D orientada desde el sureste.","completion":"string viewName = \"Vista 3D Sureste\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}
{"prompt":"Encuentra todos los muros que no están asociados a ningún nivel.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Mueve un muro 5 metros a la derecha.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (wall != null)\n{\n    XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    ElementTransformUtils.MoveElement(doc, wall.Id, translation);\n}"}
{"prompt":"Obtén la tabla de planificación 'Muros' y exporta sus datos a un archivo CSV.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s=>s.Name==\"Muros\");\n\nif (schedule != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(folderPath, \"Muros.csv\", options);\n}"}
{"prompt":"Obtén una lista de los nombres de todos los materiales.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Place lighting posts every 10m along a 100m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Crea un nuevo material llamado 'Vidrio Reflectante' y asígnale un color base.","completion":"string materialName = \"Vidrio Reflectante\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240); \/\/ Un color azulado claro para el vidrio\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Calculate the total area of all rooms.","completion":"double totalArea = 0.0;\nList<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nforeach (Room room in rooms)\n{\n    totalArea += room.Area;\n}"}
{"prompt":"Crea una losa de cimentación de 19x14 metros.","completion":"using (Transaction t = new Transaction(doc, \"Create Foundation Slab\"))\n{\n    t.Start();\n    Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    FloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n\n    if (foundationLevel != null && slabType != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(20\/0.3048, 0, 0);\n        XYZ p3 = new XYZ(20\/0.3048, 15\/0.3048, 0);\n        XYZ p4 = new XYZ(0, 15\/0.3048, 0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén una lista de todas las vistas de planta del proyecto.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}
{"prompt":"Set the sill height of all windows to 875mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(875, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Place a material tag on a wall face.","completion":"using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select a face to tag\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Select the tag location\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}
{"prompt":"Temporarily isolate all furniture in the active view.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Create a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Añade refuerzo a una columna.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    \/\/ Para simplificar, asume que la columna tiene una LocationPoint y una Transform válida.\n    \/\/ Para mayor robustez, se podría validar column.Location y column.GetTransform().\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Obtén el tipo de sistema de una tubería seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una tubería\");\n\nPipingSystemType systemType = null;\nif (pickedRef != null)\n{\n    Pipe pipe = doc.GetElement(pickedRef.ElementId) as Pipe;\n    if (pipe != null)\n    {\n        Parameter systemTypeParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        if (systemTypeParam != null && systemTypeParam.HasValue)\n        {\n            systemType = doc.GetElement(systemTypeParam.AsElementId()) as PipingSystemType;\n        }\n    }\n}\n"}
{"prompt":"Move the project base point 106 meters to the north.","completion":"using (Transaction t = new Transaction(doc, \"Move Project Base Point\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        XYZ translation = new XYZ(0, 100 \/ 0.3048, 0);\n        ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-90' y establece su resistencia al fuego a '90 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Puerta RF-90\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea 5 worksets para las disciplinas de ingeniería.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Place all selected elements on the 'Facade' workset.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Facade\");\n        if(workset == null) workset = Workset.Create(doc, \"Facade\");\n\n        if (selectedIds != null && selectedIds.Count > 0 && workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null && !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Modifica el tipo de muro de un muro existente a uno que contenga 'Aislamiento Térmico'.","completion":"Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(x => x.Name.Contains(\"Aislamiento Térmico\") || x.Name.Contains(\"Insulation\"));\n\nif (wallToChange != null && newType != null)\n{\n    wallToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Add reinforcement to a column.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Conecta dos bandejas de cables con un codo.","completion":"List<CableTray> trays = new FilteredElementCollector(doc).OfClass(typeof(CableTray)).Cast<CableTray>().ToList();\n\nif (trays.Count >= 2)\n{\n    Connector c1 = trays[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = trays[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    \n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewUnionFitting(c1, c2);\n    }\n}"}
{"prompt":"Find all doors on Level 2 that belong to the 'Single-Flush' family.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Single-Flush\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Crea una nota de texto con una flecha apuntando a un elemento y una ubicación dadas.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference target = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para anotar\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (target != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        opts.HorizontalAlignment = HorizontalTextAlignment.Left;\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"Revisar este elemento\", opts);\n        if (note != null)\n        {\n            Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n            leader.End = target.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una dimensión radial para un muro curvo.","completion":"using (Transaction t = new Transaction(doc, \"Create Radial Dimension\"))\n{\n    t.Start();\n    Wall curvedWall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.Location is LocationCurve && (w.Location as LocationCurve).Curve is Arc);\n    View activeView = doc.ActiveView;\n\n    if (curvedWall != null && activeView != null)\n    {\n        LocationCurve locCurve = curvedWall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Arc arc = locCurve.Curve as Arc;\n            if (arc != null)\n            {\n                ReferenceArray refArray = new ReferenceArray();\n                refArray.Append(arc.Reference);\n                doc.Create.NewDimension(activeView, Line.CreateBound(arc.Center, arc.GetEndPoint(0)), refArray);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Calculate the total area of all rooms.","completion":"double totalArea = 0.0;\nList<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nforeach (Room room in rooms)\n{\n    totalArea += room.Area;\n}"}
{"prompt":"Create a group from the current selection and move it 10 meters to the right.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    Group group = doc.Create.NewGroup(selectedIds);\n    if (group != null)\n    {\n        XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0);\n        ElementTransformUtils.MoveElement(doc, group.Id, translation);\n    }\n}"}
{"prompt":"Crea un nuevo tipo de muro de 21cm llamado 'Muro Estructural 21cm'.","completion":"string newTypeName = \"Muro Estructural 25cm\";\nWallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (wallTypeToDuplicate != null)\n{\n    WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n        cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n        cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(0.25, UnitTypeId.Meters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Create 7 horizontal grids spaced 9 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Aplica aislamiento térmico de 22mm a todas las tuberías de agua caliente.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(22, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Comprueba si la vista activa es una vista de plano.","completion":"View activeView = doc.ActiveView;\nbool isPlanView = false;\n\nif (activeView != null)\n{\n    isPlanView = activeView.ViewType == ViewType.FloorPlan \n                 || activeView.ViewType == ViewType.CeilingPlan \n                 || activeView.ViewType == ViewType.AreaPlan \n                 || activeView.ViewType == ViewType.EngineeringPlan;\n}\n"}
{"prompt":"Create a new revision and apply it to the active sheet.","completion":"Revision rev = Revision.Create(doc);\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (rev != null && sheet != null)\n{\n    rev.Description = \"Issued for Construction\";\n    rev.RevisionDate = DateTime.Now.ToString(\"yyyy-MM-dd\");\n    rev.IssuedBy = \"BIM Department\";\n    \n    ICollection<ElementId> revisions = sheet.GetAdditionalRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}
{"prompt":"Obtén la longitud total de todos los muros del proyecto.","completion":"double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}
{"prompt":"Generate a 4x4 column grid with 7-meter spacing.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Create a wall 5 meters long and 3 meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Change the type of a floor to one that contains 'Concrete'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concrete\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Apply 25mm thermal insulation to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Display a dialog box with 'Yes', 'No', and 'Cancel' options.","completion":""}
{"prompt":"Get all walls from a linked model that intersect with a bounding box.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\nList<Element> linkedWalls = new List<Element>();\n\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    if (linkDoc != null)\n    {\n        BoundingBoxXYZ bbox = new BoundingBoxXYZ();\n        bbox.Min = new XYZ(0,0,0);\n        bbox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(bbox.Min, bbox.Max));\n        linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToList();\n    }\n}\n"}
{"prompt":"Create a stair between Level 1 and Level 2.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    \/\/ TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    \/\/ Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Aísla temporalmente todo el mobiliario en la vista activa.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Create a new A1 sheet using the first available title block.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"A1 - New Sheet\";\n        sheet.SheetNumber = \"A1\";\n    }\n}"}
{"prompt":"Genera ocho rejillas horizontales con una separación de 9m.","completion":"double separation = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Desune la geometría de dos elementos dados.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer elemento\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo elemento\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}
{"prompt":"Crea una nueva hoja A3 y colócale una leyenda.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Copy all walls from Level 1 to Level 2.","completion":"using (Transaction t = new Transaction(doc, \"Copy Walls\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\n    if (level1 != null && level2 != null)\n    {\n        ICollection<ElementId> wallsToCopy = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(e => (e as Wall) != null && (e as Wall).LevelId.Equals(level1.Id)).Select(e => e.Id).ToList();\n        double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n        XYZ translation = new XYZ(0, 0, elevationDiff);\n        if (wallsToCopy.Count > 0)\n        {\n            ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Change the wall type of an existing wall to one containing 'Thermal Insulation'.","completion":"Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(x => x.Name.Contains(\"Thermal Insulation\"));\n\nif (wallToChange != null && newType != null)\n{\n    wallToChange.ChangeTypeId(newType.Id);\n}"}
{"prompt":"Create a 'Roof Terrace' level at 14m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(14, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Encuentra todas las vistas de sección en el proyecto.","completion":"List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}
{"prompt":"Tag all rooms with their area.","completion":"using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(locPoint.Point.X, locPoint.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Duplicate level 1 with a 3m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Move a selected element to position (5,5).","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to move\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            XYZ newPosition = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), lp.Point.Z);\n            lp.Point = newPosition;\n        }\n    }\n}"}
{"prompt":"Crea una columna estructural en la posición X=8, Y=6.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Desune la geometría de dos elementos dados.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer elemento\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo elemento\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}
{"prompt":"Crea un suelo con un contorno de 9 por 9 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Create an MEP space for each room on Level 1.","completion":"using (Transaction t = new Transaction(doc, \"Create MEP Spaces\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n\n    if (level1 != null)\n    {\n        List<Room> roomsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level1.Id)).Cast<Room>().ToList();\n        foreach(Room room in roomsOnLevel1)\n        {\n           \/\/ The direct creation of MEP spaces from rooms might not be available in this specific API version.\n           \/\/ Placeholder comment for the intended logic.\n           \/\/ Space.Create(doc, room, null);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Carga un enlace DWG preservando los colores.","completion":"string filePath = \"C:\/CAD\/Planos.dwg\";\nDWGImportOptions opts = new DWGImportOptions();\nopts.ColorMode = ImportColorMode.Preserved;\nElementId linkId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(filePath, opts, activeView, out linkId);\n}"}
{"prompt":"Obtén una lista de todas las familias de anotación.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\n"}
{"prompt":"Hide all annotation categories in the active view.","completion":"using (Transaction t = new Transaction(doc, \"Hide Annotation Categories\"))\n{\n    t.Start();\n    Categories categories = doc.Settings.Categories;\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        foreach(Category cat in categories)\n        {\n            if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n            {\n                 activeView.SetCategoryHidden(cat.Id, true);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Importa topografía georreferenciada desde un archivo LandXML.","completion":"\/\/ The Revit API in the provided context does not support direct LandXML import.\n\/\/ This functionality typically requires additional add-ins like the Site Designer, which are not available here.\n\/\/ As a placeholder, this code will show how to create a simple topography surface from a list of points.\nusing(Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(50, 0, 5));\n    points.Add(new XYZ(0, 50, 10));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Create a new level named 'Mezzanine' at 7.5 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Añade una etiqueta a la columna más cercana al origen.","completion":"using (Transaction t = new Transaction(doc, \"Tag Column\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n        LocationPoint lp = c.Location as LocationPoint;\n        return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n    }).FirstOrDefault();\n\n    if (activeView != null && column != null)\n    {\n        LocationPoint loc = column.Location as LocationPoint;\n        if (loc != null)\n        {\n            IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una dimensión radial para un muro curvo.","completion":"using (Transaction t = new Transaction(doc, \"Create Radial Dimension\"))\n{\n    t.Start();\n    Wall curvedWall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.Location is LocationCurve && (w.Location as LocationCurve).Curve is Arc);\n    View activeView = doc.ActiveView;\n\n    if (curvedWall != null && activeView != null)\n    {\n        LocationCurve locCurve = curvedWall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Arc arc = locCurve.Curve as Arc;\n            if (arc != null)\n            {\n                ReferenceArray refArray = new ReferenceArray();\n                refArray.Append(arc.Reference);\n                doc.Create.NewDimension(activeView, Line.CreateBound(arc.Center, arc.GetEndPoint(0)), refArray);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new level 'Level 3' at an elevation of 11 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 3\";\n}"}
{"prompt":"Rename all schedules containing 'Doors' to 'Door Schedule'.","completion":"List<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"Doors\")).ToList();\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"Doors\", \"Door Schedule\");\n}"}
{"prompt":"Encuentra todos los muros que no tienen nivel base asignado.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Create a curtain wall 6 meters wide and 4 meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Recarga el vínculo de Revit 'Estructura_LINK.rvt'.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"Estructura_LINK.rvt\");\nif(linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Crea una vista de planta para el 'Nivel 3'.","completion":"string levelName = \"Nivel 3\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Ajusta todas las ventanas para que la altura del antepecho sea 1 metro.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un muro en Nivel 1 de (0,0,0) a (5,0,0) con 5m de alto.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    Line wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    double height = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Allow the user to select a wall and get its ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Obtén el espacio MEP asociado a la habitación 'Oficina 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 101\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Find the host of a face-based light fixture.","completion":"FamilyInstance lightFixture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().Cast<FamilyInstance>().FirstOrDefault(fi => fi.HostFace != null);\n\nElement host = null;\nif (lightFixture != null)\n{\n    Reference hostFaceRef = lightFixture.HostFace;\n    if (hostFaceRef != null)\n    {\n        host = doc.GetElement(hostFaceRef.ElementId);\n    }\n}"}
{"prompt":"Dibuja un conducto de ventilación rectangular de 347x196 milímetros.","completion":"using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast<DuctType>().FirstOrDefault(d => d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null && ductType != null && systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ p2 = new XYZ(10 \/ 0.3048, 0, 3 \/ 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null && !widthParam.IsReadOnly) widthParam.Set(300 \/ 304.8);\n            if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(200 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Insert a window 1m wide and 1m high into a wall.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original y asegura un nombre único\n    string newTypeName = $\"Window {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters), UnitTypeId.Meters)}m x {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitTypeId.Meters)}m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Añade montantes a todas las líneas de rejilla de un muro cortina.","completion":"using (Transaction t = new Transaction(doc, \"Add Mullions\"))\n{\n    t.Start();\n    Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\n    MullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\n\n    if (curtainWall != null && mullionType != null)\n    {\n        CurtainGrid grid = curtainWall.CurtainGrid;\n        if (grid != null)\n        {\n            foreach (ElementId gridLineId in grid.GetVGridLineIds())\n            {\n                CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n                if(line != null) grid.AddMullions(line, mullionType);\n            }\n            foreach (ElementId gridLineId in grid.GetUGridLineIds())\n            {\n                CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n                if(line != null) grid.AddMullions(line, mullionType);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-88' y establece su resistencia al fuego a '104 min'.","completion":"using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Puerta RF-90\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"90 min\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Aísla temporalmente todo el mobiliario en la vista activa.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Dimension the length of a user-selected wall.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall to dimension\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}
{"prompt":"Duplicate level 1 with a 3m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Aplica aislamiento térmico de 21mm a todas las tuberías de agua caliente.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(21, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Inside the family editor, create a vertical reference plane named 'Center Axis'.","completion":"string rpName = \"Center Axis\";\nXYZ start = new XYZ(0, UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0);\nXYZ end = new XYZ(0, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nXYZ normal = XYZ.BasisX;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = rpName;\n    }\n}"}
{"prompt":"Alinea la cara de un muro con la cara de otro.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara de destino (estática)\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara a mover\");\nView activeView = doc.ActiveView;\n\nif (ref1 != null && ref2 != null && activeView != null)\n{\n    doc.Create.NewAlignment(activeView, ref1, ref2);\n}"}
{"prompt":"Crea vigas entre las columnas alineadas horizontalmente.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Get the host element of the first window found.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}
{"prompt":"Get a list of all material names.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Mueve el punto base del proyecto 96 metros hacia el norte.","completion":"using (Transaction t = new Transaction(doc, \"Move Project Base Point\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        XYZ translation = new XYZ(0, 100 \/ 0.3048, 0);\n        ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n    }\n    t.Commit();\n}"}
{"prompt":"Ajusta todas las ventanas para que la altura del antepecho sea 1 metro.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una vista de sección entre los puntos (0,0,0) y (11,11,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) \/ 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)\/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}
{"prompt":"Create a floor with a circular hole in the center.","completion":"using (Transaction t = new Transaction(doc, \"Create Floor with Hole\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\n    if (level != null && floorType != null)\n    {\n        XYZ p1 = new XYZ(-10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(-10 \/ 0.3048, 10 \/ 0.3048, 0);\n        CurveLoop outerLoop = new CurveLoop();\n        outerLoop.Append(Line.CreateBound(p1, p2));\n        outerLoop.Append(Line.CreateBound(p2, p3));\n        outerLoop.Append(Line.CreateBound(p3, p4));\n        outerLoop.Append(Line.CreateBound(p4, p1));\n\n        XYZ center = XYZ.Zero;\n        double radius = 2 \/ 0.3048;\n        CurveLoop innerLoop = new CurveLoop();\n        innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n        innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n        Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una nueva tabla de planificación para ventanas que incluya Marca de Tipo, Ancho y Alto.","completion":"string scheduleName = \"Tabla de Ventanas\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}
{"prompt":"Coloca una ventana de 1x1 metros en la pared más cercana.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original y asegura un nombre único\n    string newTypeName = $\"Window {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters), UnitTypeId.Meters)}m x {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitTypeId.Meters)}m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Crea un nuevo parámetro de proyecto compartido de texto llamado 'Notas Adicionales' para muros y puertas.","completion":"using (Transaction t = new Transaction(doc, \"Create Shared Parameter\"))\n{\n    t.Start();\n    string paramName = \"Notas Adicionales\";\n    string originalFile = doc.Application.SharedParametersFilename;\n    string tempFile = System.IO.Path.GetTempFileName() + \".txt\";\n    using (System.IO.File.Create(tempFile)) { }\n    doc.Application.SharedParametersFilename = tempFile;\n\n    try\n    {\n        DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n        if (defFile != null)\n        {\n            DefinitionGroup group = defFile.Groups.Create(\"General\");\n            if (group != null)\n            {\n                ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(paramName, ParameterType.Text);\n                Definition definition = group.Definitions.Create(options);\n                if (definition != null)\n                {\n                    CategorySet categories = doc.Application.Create.NewCategorySet();\n                    categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                    categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                    InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                    doc.ParameterBindings.Insert(definition, binding, Autodesk.Revit.DB.BuiltInParameterGroup.PG_DATA);\n                }\n            }\n        }\n    }\n    finally\n    {\n        doc.Application.SharedParametersFilename = originalFile;\n        System.IO.File.Delete(tempFile);\n        t.Commit();\n    }\n}"}
{"prompt":"Crea una vista de sección usando una caja de 10x10x3 metros.","completion":"ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\n\nif (sectionVFT != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(0,0,0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}
{"prompt":"Connect two cable trays with an elbow fitting.","completion":"List<CableTray> trays = new FilteredElementCollector(doc).OfClass(typeof(CableTray)).Cast<CableTray>().ToList();\n\nif (trays.Count >= 2)\n{\n    Connector c1 = trays[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = trays[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    \n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewUnionFitting(c1, c2);\n    }\n}"}
{"prompt":"Crea una nueva vista de alzado mirando al sur.","completion":"using (Transaction t = new Transaction(doc, \"Create South Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 0);\n            if (aev != null)\n            {\n                aev.Name = \"Alzado Sur\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Añade un punto al Path of Travel seleccionado.","completion":"\/\/ PathOfTravel related methods are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint); \n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Find all walls that have no base level assigned.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Generate a 4x4 column grid with 8-meter spacing.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Move the selected elements 3 meters up.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Add reinforcement to a column.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Crea un techo por contorno en el 'Nivel de Cubierta'.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel de Cubierta\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 \/ 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 \/ 0.3048,0,0), new XYZ(20 \/ 0.3048,30 \/ 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 \/ 0.3048,30 \/ 0.3048,0), new XYZ(0,30 \/ 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 \/ 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Synchronize the local model with the central model, adding the comment 'Design update'.","completion":"if (doc.IsWorkshared)\n{\n    TransactWithCentralOptions tco = new TransactWithCentralOptions();\n    SynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\n    swcOpts.Comment = \"Design update\";\n    swcOpts.SaveLocalAfter = true;\n    doc.SynchronizeWithCentral(tco, swcOpts);\n}"}
{"prompt":"Crea un nuevo parámetro de proyecto compartido de texto llamado 'Notas Adicionales' para muros y puertas.","completion":"using (Transaction t = new Transaction(doc, \"Create Shared Parameter\"))\n{\n    t.Start();\n    string paramName = \"Notas Adicionales\";\n    string originalFile = doc.Application.SharedParametersFilename;\n    string tempFile = System.IO.Path.GetTempFileName() + \".txt\";\n    using (System.IO.File.Create(tempFile)) { }\n    doc.Application.SharedParametersFilename = tempFile;\n\n    try\n    {\n        DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n        if (defFile != null)\n        {\n            DefinitionGroup group = defFile.Groups.Create(\"General\");\n            if (group != null)\n            {\n                ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(paramName, ParameterType.Text);\n                Definition definition = group.Definitions.Create(options);\n                if (definition != null)\n                {\n                    CategorySet categories = doc.Application.Create.NewCategorySet();\n                    categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                    categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                    InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                    doc.ParameterBindings.Insert(definition, binding, Autodesk.Revit.DB.BuiltInParameterGroup.PG_DATA);\n                }\n            }\n        }\n    }\n    finally\n    {\n        doc.Application.SharedParametersFilename = originalFile;\n        System.IO.File.Delete(tempFile);\n        t.Commit();\n    }\n}"}
{"prompt":"Añade una línea de rejilla horizontal a un muro cortina a 1.5 metros de altura.","completion":"using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) \/ 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, 1.5 \/ 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una nueva cota de nivel llamada 'Nivel 3' a una elevación de 14 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(14, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nnewLevel.Name = \"Nivel 3\";"}
{"prompt":"Crea una vista de plano de plafón reflejado para el Nivel 1.","completion":"string levelName = \"Nivel 1\";\nstring viewName = \"Plano de Plafón Nivel 1\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Activa todos los FamilySymbol del proyecto.","completion":"List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (FamilySymbol sym in symbols)\n{\n    if (!sym.IsActive)\n    {\n        sym.Activate();\n    }\n}"}
{"prompt":"Genera una cuadrícula de columnas 5x5 con separación de 8 metros.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Create a structural foundation slab 38cm thick.","completion":"using (Transaction t = new Transaction(doc, \"Create Foundation Slab\"))\n{\n    t.Start();\n    Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    FloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n    if(slabTypeToDuplicate != null && foundationLevel != null)\n    {\n        string newTypeName = \"Foundation Slab 40cm\";\n        FloorType newSlabType = slabTypeToDuplicate.Duplicate(newTypeName) as FloorType;\n        if(newSlabType != null)\n        {\n            CompoundStructure cs = newSlabType.GetCompoundStructure();\n            if (cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 400 \/ 304.8);\n                newSlabType.SetCompoundStructure(cs);\n                XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n                Floor.Create(doc, new List<CurveLoop>{profile}, newSlabType.Id, foundationLevel.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get a list of all families and their types.","completion":"List<string> familyAndTypeNames = new List<string>();\nList<Family> families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().ToList();\nforeach (Family fam in families)\n{\n    familyAndTypeNames.Add($\"Family: {fam.Name}\");\n    foreach (ElementId symbolId in fam.GetFamilySymbolIds())\n    {\n        FamilySymbol sym = doc.GetElement(symbolId) as FamilySymbol;\n        if (sym != null)\n        {\n            familyAndTypeNames.Add($\"\\tType: {sym.Name}\");\n        }\n    }\n}"}
{"prompt":"Create a spherical DirectShape with a 5-meter radius.","completion":"using (Transaction t = new Transaction(doc, \"Create Sphere DirectShape\"))\n{\n    t.Start();\n    double radius = 5 \/ 0.3048;\n    List<GeometryObject> solids = new List<GeometryObject>();\n    Frame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\n    Arc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\n    Line line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\n    Solid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\n    solids.Add(sphere);\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\n    if (ds != null)\n    {\n        ds.SetShape(solids);\n        ds.Name = \"Sphere DirectShape\";\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén la longitud total de todos los muros del proyecto.","completion":"double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}
{"prompt":"Crea un grupo de detalles con los elementos de detalle seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Detalle Típico 1\";\n        }\n    }\n}"}
{"prompt":"Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Create a new elevation view looking north.","completion":"using (Transaction t = new Transaction(doc, \"Create North Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 2);\n            if (aev != null)\n            {\n                aev.Name = \"North Elevation\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a report with the area of all rooms in the project.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}
{"prompt":"Create a new 6mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new door type named 'FR-92 Door' and set its fire rating to '92 min'.","completion":"string newTypeName = \"FR-90 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"90 min\");\n    }\n}"}
{"prompt":"Crea un nuevo tipo de texto de 6mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un sistema de vigas en un forjado seleccionado.","completion":""}
{"prompt":"Create 8 horizontal grids spaced 11 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(11, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Añade una etiqueta a la columna más cercana al origen.","completion":"using (Transaction t = new Transaction(doc, \"Tag Column\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n        LocationPoint lp = c.Location as LocationPoint;\n        return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n    }).FirstOrDefault();\n\n    if (activeView != null && column != null)\n    {\n        LocationPoint loc = column.Location as LocationPoint;\n        if (loc != null)\n        {\n            IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Genera una cuadrícula de columnas 6x5 con separación de 7 metros.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Create a 29cm 'Double-Wall' type and then construct a wall of that type.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Double-Wall\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Comprueba si la vista activa es una vista de plano.","completion":"View activeView = doc.ActiveView;\nbool isPlanView = false;\n\nif (activeView != null)\n{\n    isPlanView = activeView.ViewType == ViewType.FloorPlan \n                 || activeView.ViewType == ViewType.CeilingPlan \n                 || activeView.ViewType == ViewType.AreaPlan \n                 || activeView.ViewType == ViewType.EngineeringPlan;\n}\n"}
{"prompt":"Find all walls with the comment 'Review'.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Review\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Establece el parámetro 'Marca' de todos los muros seleccionados a 'M-EXT-01'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter p = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (p != null && !p.IsReadOnly) \n                {\n                    p.Set(\"M-EXT-01\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new 3mm text type in blue color.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"3mm Blue\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(3 \/ 304.8);\n            \n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly) lineColorParam.Set(255);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Modela un barandal en una escalera existente.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Crea un espacio MEP para cada habitación en el Nivel 1.","completion":"using (Transaction t = new Transaction(doc, \"Create MEP Spaces\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n\n    if (level1 != null)\n    {\n        List<Room> roomsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level1.Id)).Cast<Room>().ToList();\n        foreach(Room room in roomsOnLevel1)\n        {\n           \/\/ The direct creation of MEP spaces from rooms might not be available in this specific API version.\n           \/\/ Placeholder comment for the intended logic.\n           \/\/ Space.Create(doc, room, null);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a wall on Level 1 from (0,0,0) to (9,0,0) with a height of 3 meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters), 0, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}
{"prompt":"Coloca un mueble en las coordenadas (2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), furnitureSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Get all walls on Level 1 that are structural.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Get all walls on Level 1 that are structural.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Hide all annotation elements in the active view.","completion":"if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}
{"prompt":"Apply the 'Architectural Template' view template to the active view.","completion":"View activeView = doc.ActiveView;\nView viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.IsTemplate && v.Name == \"Architectural Template\");\n\nif (activeView != null && viewTemplate != null)\n{\n    activeView.ViewTemplateId = viewTemplate.Id;\n}"}
{"prompt":"Create a floor plan view for 'Level 3'.","completion":"string levelName = \"Level 3\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level3 != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Rellena el parámetro de material de todos los muros con 'Concreto'.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concreto\")) as Material;\nif(concreteMaterial != null)\n{\n    var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Adjust the view's crop region to a rectangle from (0,0) to (18,24).","completion":"using (Transaction t = new Transaction(doc, \"Adjust Crop Region\"))\n{\n    t.Start();\n    View view = doc.ActiveView;\n\n    if (view != null && view.CropBoxActive)\n    {\n        BoundingBoxXYZ cropBox = view.CropBox;\n        if (cropBox != null)\n        {\n            XYZ minPoint = new XYZ(0, 0, cropBox.Min.Z);\n            XYZ maxPoint = new XYZ(20 \/ 0.3048, 20 \/ 0.3048, cropBox.Max.Z);\n            cropBox.Min = minPoint;\n            cropBox.Max = maxPoint;\n            view.CropBox = cropBox;\n            view.CropBoxVisible = true;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new 3mm text type in blue color.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"3mm Blue\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(3 \/ 304.8);\n            \n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly) lineColorParam.Set(255);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 1 a 'Clasificación Fuego - 77 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Clasificación Fuego - 90 min\");\n    }\n}"}
{"prompt":"Obtén la longitud total de todos los muros del proyecto.","completion":"double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}
{"prompt":"Create a new elevation view looking south.","completion":"using (Transaction t = new Transaction(doc, \"Create South Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 0);\n            if (aev != null)\n            {\n                aev.Name = \"South Elevation\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de muro de 29cm llamado 'Muro Estructural 28cm'.","completion":"string newTypeName = \"Muro Estructural 25cm\";\nWallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(wallTypeToDuplicate != null)\n{\n    WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n            cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(0.25, UnitTypeId.Meters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Insert a 5-meter truss between two points.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(6 \/ 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Coloca una cámara en la vista activa.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        cameraView.Name = \"Nueva Vista de Cámara\";\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\ndoc.Delete(unusedWallTypes);"}
{"prompt":"Create an electrical conduit with a 1-inch diameter.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ end = new XYZ(5 \/ 0.3048, 0, 3 \/ 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set(1.0 \/ 12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Check if the active view is a plan view.","completion":"View activeView = doc.ActiveView;\nbool isPlanView = false;\n\nif (activeView != null)\n{\n    isPlanView = activeView.ViewType == ViewType.FloorPlan \n                 || activeView.ViewType == ViewType.CeilingPlan \n                 || activeView.ViewType == ViewType.AreaPlan \n                 || activeView.ViewType == ViewType.EngineeringPlan;\n}\n"}
{"prompt":"Crea un nuevo tipo de texto de 6mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Reload the Revit link 'Structure_LINK.rvt'.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"Structure_LINK.rvt\");\n\nif (linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Crea un DirectShape esférico con un radio de 5 metros.","completion":"using (Transaction t = new Transaction(doc, \"Create Sphere DirectShape\"))\n{\n    t.Start();\n    double radius = 5 \/ 0.3048;\n    List<GeometryObject> solids = new List<GeometryObject>();\n    Frame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\n    Arc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\n    Line line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\n    Solid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\n    solids.Add(sphere);\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\n    if (ds != null)\n    {\n        ds.SetShape(solids);\n        ds.Name = \"Esfera DirectShape\";\n    }\n    t.Commit();\n}"}
{"prompt":"Change a glass panel in a curtain wall to a solid panel.","completion":"using (Transaction t = new Transaction(doc, \"Change Curtain Panel\"))\n{\n    t.Start();\n    Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\n    FamilySymbol solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_CurtainWallPanels && fs.Name.Contains(\"Solid\"));\n\n    if (curtainWall != null && solidPanelType != null)\n    {\n        CurtainGrid grid = curtainWall.CurtainGrid;\n        if (grid != null)\n        {\n            ElementId panelIdToChange = grid.GetPanelIds().FirstOrDefault();\n            if (panelIdToChange != ElementId.InvalidElementId)\n            {\n                Panel panelToChange = doc.GetElement(panelIdToChange) as Panel;\n                if (panelToChange != null) panelToChange.ChangeTypeId(solidPanelType.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Rellena el parámetro de material de todos los muros con 'Concreto'.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concreto\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Obtén todas las familias de puertas cargadas en el proyecto.","completion":"List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Permite al usuario seleccionar un muro y obtén su ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Crea un nuevo tipo de texto de 3mm de color azul.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"3mm Azul\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(3 \/ 304.8);\n            \n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly) lineColorParam.Set(255);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un pilar del tipo 'Hormigón-Rectangular 30x66' en cada intersección de la rejilla.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Hormigón-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Agrupa una tabla de planificación de habitaciones por Nivel.","completion":"using (Transaction t = new Transaction(doc, \"Group Schedule\"))\n{\n    t.Start();\n    ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(vs => vs.Definition.CategoryId.IntegerValue == (int)BuiltInCategory.OST_Rooms);\n\n    if (schedule != null)\n    {\n        ScheduleDefinition def = schedule.Definition;\n        if (def != null)\n        {\n            SchedulableField schedulableField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ROOM_LEVEL_ID);\n            if (schedulableField != null)\n            {\n                ScheduleField field = def.AddField(schedulableField);\n                ScheduleSortGroupField sortGroupField = new ScheduleSortGroupField(field.FieldId);\n                sortGroupField.ShowHeader = true;\n                def.AddSortGroupField(sortGroupField);\n                def.IsItemized = false;\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get a list of all families and their types.","completion":"List<string> familyAndTypeNames = new List<string>();\nList<Family> families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().ToList();\nforeach (Family fam in families)\n{\n    familyAndTypeNames.Add($\"Family: {fam.Name}\");\n    foreach (ElementId symbolId in fam.GetFamilySymbolIds())\n    {\n        FamilySymbol sym = doc.GetElement(symbolId) as FamilySymbol;\n        if (sym != null)\n        {\n            familyAndTypeNames.Add($\"\\tType: {sym.Name}\");\n        }\n    }\n}"}
{"prompt":"Create an MEP space for each room on Level 1.","completion":"using (Transaction t = new Transaction(doc, \"Create MEP Spaces\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n\n    if (level1 != null)\n    {\n        List<Room> roomsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level1.Id)).Cast<Room>().ToList();\n        foreach(Room room in roomsOnLevel1)\n        {\n           \/\/ The direct creation of MEP spaces from rooms might not be available in this specific API version.\n           \/\/ Placeholder comment for the intended logic.\n           \/\/ Space.Create(doc, room, null);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create an extrusion roof with an arc profile.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Mueve un muro 4 metros a la derecha.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (wall != null)\n{\n    XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters),0,0);\n    ElementTransformUtils.MoveElement(doc, wall.Id, translation);\n}"}
{"prompt":"Encuentra todas las vistas que no tienen una plantilla de vista asignada.","completion":"List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId).ToList();"}
{"prompt":"Delete all detail lines in the active view.","completion":"using (Transaction t = new Transaction(doc, \"Delete Detail Lines\"))\n{\n    t.Start();\n    if (doc.ActiveView != null)\n    {\n        ICollection<ElementId> detailLines = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(DetailCurve)).ToElementIds();\n        if (detailLines.Count > 0)\n        {\n            doc.Delete(detailLines);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a rectangular floor of 9x7 meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 270mm' con un grosor de 32cm.","completion":"string newTypeName = \"Muro Genérico 300mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(270, UnitTypeId.Millimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}
{"prompt":"Crea un techo por extrusión con un perfil en arco.","completion":"using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 85' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create a radial dimension for a curved wall.","completion":"using (Transaction t = new Transaction(doc, \"Create Radial Dimension\"))\n{\n    t.Start();\n    Wall curvedWall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.Location is LocationCurve && (w.Location as LocationCurve).Curve is Arc);\n    View activeView = doc.ActiveView;\n\n    if (curvedWall != null && activeView != null)\n    {\n        LocationCurve locCurve = curvedWall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Arc arc = locCurve.Curve as Arc;\n            if (arc != null)\n            {\n                ReferenceArray refArray = new ReferenceArray();\n                refArray.Append(arc.Reference);\n                doc.Create.NewDimension(activeView, Line.CreateBound(arc.Center, arc.GetEndPoint(0)), refArray);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Connect two cable trays with an elbow fitting.","completion":"List<CableTray> trays = new FilteredElementCollector(doc).OfClass(typeof(CableTray)).Cast<CableTray>().ToList();\n\nif (trays.Count >= 2)\n{\n    Connector c1 = trays[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = trays[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    \n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewUnionFitting(c1, c2);\n    }\n}"}
{"prompt":"Sincroniza el modelo local con el central, añadiendo el comentario 'Actualización de diseño'.","completion":"if (doc.IsWorkshared)\n{\n    TransactWithCentralOptions tco = new TransactWithCentralOptions();\n    SynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\n    swcOpts.Comment = \"Actualización de diseño\";\n    swcOpts.SaveLocalAfter = true;\n    doc.SynchronizeWithCentral(tco, swcOpts);\n}"}
{"prompt":"Acota la longitud de un muro seleccionado por el usuario.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro para acotar\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}
{"prompt":"Aísla temporalmente todo el mobiliario en la vista activa.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Alinea la cara de un muro con la cara de otro.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara de destino (estática)\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara a mover\");\nView activeView = doc.ActiveView;\n\nif (ref1 != null && ref2 != null && activeView != null)\n{\n    doc.Create.NewAlignment(activeView, ref1, ref2);\n}"}
{"prompt":"Añade un punto al Path of Travel seleccionado.","completion":"\/\/ PathOfTravel related methods like GetPath and Update are likely inaccessible in this environment.\n\/\/ The following code is a placeholder to show the intent.\n\/*\nusing (Transaction t = new Transaction(doc, \"Update Path of Travel\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un Path of Travel\");\n\n    if (pickedRef != null)\n    {\n        PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n        if (pot != null)\n        {\n            IList<XYZ> points = pot.GetPath();\n            if (points != null && points.Count >= 2)\n            {\n                XYZ midPoint = (points[0] + points[1]) \/ 2;\n                points.Insert(1, midPoint); \n                pot.Update(points);\n            }\n        }\n    }\n    t.Commit();\n}\n*\/"}
{"prompt":"Place a material tag on a wall face.","completion":"using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select a face to tag\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Select the tag location\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new Level named 'Level 4' at an elevation of 10 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 4\";\n}"}
{"prompt":"Une la geometría de una columna y un suelo que se cruzan.","completion":"Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\n\nif (column != null && floor != null)\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}
{"prompt":"Create a new A2 sheet with the number 'A-222'.","completion":"string sheetNumber = \"A-201\";\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"Construction Details\";\n        sheet.SheetNumber = sheetNumber;\n    }\n}"}
{"prompt":"Move a selected element to position (4,5).","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to move\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            XYZ newPosition = new XYZ(UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), lp.Point.Z);\n            lp.Point = newPosition;\n        }\n    }\n}"}
{"prompt":"Fija el elemento seleccionado para que no se mueva.","completion":"UIDocument uidoc = new UIDocument(doc);\nElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\n\nif (selectedId != ElementId.InvalidElementId)\n{\n    Element elementToPin = doc.GetElement(selectedId);\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}
{"prompt":"Create a pipe with a 170mm diameter.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(170, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Muestra un cuadro de diálogo con las opciones 'Sí', 'No' y 'Cancelar'.","completion":""}
{"prompt":"Duplica la vista de planta 'Nivel 2' y conviértela en una plantilla de vista.","completion":"using (Transaction t = new Transaction(doc, \"Create View Template\"))\n{\n    t.Start();\n    ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"Nivel 2\");\n    string templateName = \"Plantilla Nivel 2\";\n\n    if (viewToDuplicate != null)\n    {\n        ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n        View newView = doc.GetElement(newViewId) as View;\n        if (newView != null)\n        {\n           \/\/ Direct conversion to a template may not be available in older APIs.\n           \/\/ A common workaround is to set the IsTemplate property if available and writable, \n           \/\/ which is not the case here. This is left as a comment for conceptual understanding.\n           \/\/ newView.IsTemplate = true;\n            newView.Name = templateName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Permite al usuario seleccionar un muro y obtén su ElementId.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}
{"prompt":"Import a topography from a CSV file.","completion":"using (Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    \/\/ CSV file reading is not directly supported by a single API call.\n    \/\/ You would typically read the file line by line, parse the XYZ coordinates,\n    \/\/ and then use the TopographySurface.Create method with a list of points.\n    \/\/ As a placeholder, here's how to create a simple topography from a list of points:\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(10, 0, 0));\n    points.Add(new XYZ(0, 10, 0));\n    points.Add(new XYZ(10, 10, 5));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Rellena el parámetro de material de todos los muros con 'Concreto'.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concreto\")) as Material;\nif(concreteMaterial != null)\n{\n    var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Add a tag to the column closest to the origin.","completion":"using (Transaction t = new Transaction(doc, \"Tag Column\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n        LocationPoint lp = c.Location as LocationPoint;\n        return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n    }).FirstOrDefault();\n\n    if (activeView != null && column != null)\n    {\n        LocationPoint loc = column.Location as LocationPoint;\n        if (loc != null)\n        {\n            IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a 30cm 'Double-Wall' type and then create a wall of that type.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type and Wall\"))\n{\n    t.Start();\n    string newTypeName = \"Double-Wall\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    WallType newWallType = null;\n    if (wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 0.3 \/ 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n    if (newWallType != null)\n    {\n        Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 \/ 0.3048, 0, 0));\n        double height = 3 \/ 0.3048;\n        if (level != null)\n        {\n            Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén la longitud total de todos los muros del proyecto.","completion":"double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}
{"prompt":"Crea un nuevo material llamado 'Vidrio Reflectante' y asígnale un color base y una transparencia.","completion":"string materialName = \"Vidrio Reflectante\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Obtén el espacio MEP asociado a la habitación 'Oficina 103'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"Oficina 101\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}
{"prompt":"Desune la geometría de dos elementos dados.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer elemento\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo elemento\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}
{"prompt":"Create a new elevation view looking south.","completion":"string viewName = \"South Elevation (New)\";\nViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20, 0), 100);\nView aev = marker.CreateElevation(doc, doc.ActiveView.Id, 0);\naev.Name = viewName;"}
{"prompt":"Create a new linear dimension type with blue text and 2mm size.","completion":"using (Transaction t = new Transaction(doc, \"Create Dimension Type\"))\n{\n    t.Start();\n    string newTypeName = \"Blue Dimension 2mm\";\n    DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\n    if (linearDimType != null)\n    {\n        DimensionType newDimType = linearDimType.Duplicate(newTypeName) as DimensionType;\n        if (newDimType != null)\n        {\n            Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n            Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(2 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get a list of all families and their types.","completion":"List<string> familyAndTypeNames = new List<string>();\nList<Family> families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().ToList();\nforeach (Family fam in families)\n{\n    familyAndTypeNames.Add($\"Family: {fam.Name}\");\n    foreach (ElementId symbolId in fam.GetFamilySymbolIds())\n    {\n        FamilySymbol sym = doc.GetElement(symbolId) as FamilySymbol;\n        if (sym != null)\n        {\n            familyAndTypeNames.Add($\"\\tType: {sym.Name}\");\n        }\n    }\n}"}
{"prompt":"Crea un muro de 5 metros de largo y 3 metros de alto.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Coloca una cota de elevación en una cara y un punto de vista dados.","completion":"using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara superior del suelo\");\n\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && activeView != null)\n    {\n        XYZ pointOnFace = faceRef.GlobalPoint;\n        XYZ leaderEnd = pointOnFace + new XYZ(1 \/ 0.3048, 1 \/ 0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n    }\n    t.Commit();\n}"}
{"prompt":"Dentro del editor de familias, crea un plano de referencia vertical llamado 'Eje Central'.","completion":"string rpName = \"Eje Central\";\nXYZ start = new XYZ(0, UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0);\nXYZ end = new XYZ(0, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nXYZ normal = XYZ.BasisX;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = rpName;\n    }\n}"}
{"prompt":"Get all door families loaded in the project.","completion":"List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Ajusta todas las ventanas para que la altura del antepecho sea 1 metro.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Create a new wall type 'Generic Wall 338mm' with a thickness of 34cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Generic Wall 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea 12 worksets de arquitectura.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_MAM\", \"TAD_ARQ_ACA\", \"TAD_ARQ_PLA\", \"TAD_ARQ_PSO\", \"TAD_ARQ_HRE\", \"TAD_ARQ_ALU\", \"TAD_ARQ_CAR\", \"TAD_ARQ_MOB\", \"TAD_ARQ_PLO\", \"TAD_ARQ_EXT\" };\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}"}
{"prompt":"Set the 'Mark' parameter of all selected walls to 'W-EXT-1'.","completion":"using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"W-EXT-01\");\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Duplica el nivel 1 con un desfase de 3m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Crea un suelo con un hueco circular en el centro.","completion":"using (Transaction t = new Transaction(doc, \"Create Floor with Hole\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\n    if (level != null && floorType != null)\n    {\n        XYZ p1 = new XYZ(-10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p2 = new XYZ(10 \/ 0.3048, -10 \/ 0.3048, 0);\n        XYZ p3 = new XYZ(10 \/ 0.3048, 10 \/ 0.3048, 0);\n        XYZ p4 = new XYZ(-10 \/ 0.3048, 10 \/ 0.3048, 0);\n        CurveLoop outerLoop = new CurveLoop();\n        outerLoop.Append(Line.CreateBound(p1, p2));\n        outerLoop.Append(Line.CreateBound(p2, p3));\n        outerLoop.Append(Line.CreateBound(p3, p4));\n        outerLoop.Append(Line.CreateBound(p4, p1));\n\n        XYZ center = XYZ.Zero;\n        double radius = 2 \/ 0.3048;\n        CurveLoop innerLoop = new CurveLoop();\n        innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n        innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n        Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n    }\n    t.Commit();\n}"}
{"prompt":"Add the 'Level', 'Mark', and 'Volume' fields to the column schedule.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Crea un pilar del tipo 'Hormigón-Rectangular 30x60' en cada intersección de la rejilla.","completion":"using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Hormigón-Rectangular 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create an axonometric 3D view oriented to the Northwest.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(-1, 1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(1, -1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = \"3D View Northwest\";\n    }\n}"}
{"prompt":"Get all walls from a linked model that intersect with a bounding box.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\nList<Element> linkedWalls = new List<Element>();\n\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    if (linkDoc != null)\n    {\n        BoundingBoxXYZ bbox = new BoundingBoxXYZ();\n        bbox.Min = new XYZ(0,0,0);\n        bbox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(bbox.Min, bbox.Max));\n        linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToList();\n    }\n}\n"}
{"prompt":"Add a reference point at coordinates (1,2,3) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));"}
{"prompt":"Crea una superficie topográfica a partir de una lista de 4 puntos.","completion":"IList<XYZ> points = new List<XYZ>\n{\n    new XYZ(0, 0, 0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters))\n};\nTopographySurface.Create(doc, points);"}
{"prompt":"Muestra un cuadro de diálogo con opciones 'Sí' y 'No'.","completion":""}
{"prompt":"Obtén una lista de todas las vistas de planta del proyecto.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"WM-01\");\n  }\n}"}
{"prompt":"Aísla temporalmente los elementos seleccionados en la vista activa.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToIsolate = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToIsolate.Count > 0)\n{\n    activeView.IsolateElementsTemporary(idsToIsolate);\n}"}
{"prompt":"Create a 3D view oriented from the southeast.","completion":"string viewName = \"3D View Southeast\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}
{"prompt":"Create a SketchPlane on Level 2.","completion":"using (Transaction t = new Transaction(doc, \"Create Sketch Plane\"))\n{\n    t.Start();\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\n    if (level2 != null)\n    {\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, new XYZ(0, 0, level2.Elevation));\n        SketchPlane skp = SketchPlane.Create(doc, plane);\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén una lista de los nombres de todos los materiales.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Copy all elements from Level 1 to Level 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\n\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if (elementsToCopy.Count > 0)\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Copy all elements from Level 1 to Level 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(elementsToCopy.Any())\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}
{"prompt":"Encuentra todos los muros que no tienen nivel base asignado.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Create a shaft opening that passes through from Level 1 to Level 2.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft Opening\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 3\");\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p2 = new XYZ(8 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p3 = new XYZ(8 \/ 0.3048, 8 \/ 0.3048,0);\n        XYZ p4 = new XYZ(5 \/ 0.3048, 8 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra todas las familias de anotación y cuenta cuántas hay.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}
{"prompt":"Acota la longitud de un muro seleccionado por el usuario.","completion":"using (Transaction t = new Transaction(doc, \"Dimension Wall\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference wallRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro para acotar\");\n    if(wallRef != null)\n    {\n        Wall wall = doc.GetElement(wallRef) as Wall;\n        if(wall != null)\n        {\n            LocationCurve locCurve = wall.Location as LocationCurve;\n            Curve wallCurve = locCurve != null ? locCurve.Curve : null;\n            if(wallCurve != null && wallCurve is Line)\n            {\n                Line wallLine = wallCurve as Line;\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(doc.ActiveView, dimLine, refs);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Generate a report with the area of all rooms in the project.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}
{"prompt":"Obtén una lista de todas las vistas de planta del proyecto.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}
{"prompt":"Crea un muro del tipo 'Genérico - 220mm' en el 'Nivel 1' desde (0,0) hasta (10,4).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Genérico - 200mm\") as WallType;\nXYZ startPoint = new XYZ(0, 0, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nif (level != null && wallType != null)\n{\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}
{"prompt":"Ajusta todas las ventanas para que la altura del antepecho sea 1 metro.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a text note with given text, location, and target element.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"REVIEW CLASH\", opts);\n        if (note != null)\n        {\n            note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L).End = targetRef.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Apply the 'X-Ray' visual style to the active 3D view.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe;\n}"}
{"prompt":"Duplica el nivel 1 con un desfase de 3m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    double newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = levelName;\n    }\n}"}
{"prompt":"Move the selected elements 3 meters up.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Rota un elemento seleccionado 107 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI \/ 2.0);"}
{"prompt":"Copia todos los muros del Nivel 1 al Nivel 2.","completion":"using (Transaction t = new Transaction(doc, \"Copy Walls\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\n\n    if (level1 != null && level2 != null)\n    {\n        ICollection<ElementId> wallsToCopy = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(e => (e as Wall) != null && (e as Wall).LevelId.Equals(level1.Id)).Select(e => e.Id).ToList();\n        double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n        XYZ translation = new XYZ(0, 0, elevationDiff);\n        if (wallsToCopy.Count > 0)\n        {\n            ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una escalera entre Nivel 1 y Nivel 2.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    \/\/ TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    \/\/ Stairs creation requires using the StairsEditScope class.\n}"}
{"prompt":"Crea un ensamblaje a partir de los elementos seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"Nuevo Ensamblaje\";\n    }\n}"}
{"prompt":"Get a list of all material names.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Define un filtro de vista para ocultar las líneas de detalle.","completion":"string filterName = \"Ocultar Líneas de Detalle\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection<ElementId> catsToHide = new List<ElementId>{new ElementId(BuiltInCategory.OST_Lines)};\n    ElementFilter filter = new ElementCategoryFilter(new ElementId(BuiltInCategory.OST_Lines));\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, filterName, catsToHide, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}
{"prompt":"Une la geometría de una columna y un suelo que se cruzan.","completion":"Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\nif (column != null && floor != null)\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}
{"prompt":"Create a text note with given text, location, and target element.","completion":"using (Transaction t = new Transaction(doc, \"Create Text Note\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\n    XYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\n    View activeView = doc.ActiveView;\n    ElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\n    if (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n    {\n        TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n        TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"REVIEW CLASH\", opts);\n        if (note != null)\n        {\n            Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n            leader.End = targetRef.GlobalPoint;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un filtro de vista para ocultar muros demolidos.","completion":"using (Transaction t = new Transaction(doc, \"Create Demolition Filter\"))\n{\n    t.Start();\n    Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p => p.Name.Contains(\"Demolished\") || p.Name.Contains(\"Demolición\"));\n    View activeView = doc.ActiveView;\n\n    if (demolishedPhase != null && activeView != null)\n    {\n        ElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\n        FilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\n        ElementFilter filter = new ElementParameterFilter(rule);\n        ICollection<ElementId> categories = new List<ElementId>{ new ElementId(BuiltInCategory.OST_Walls) };\n        ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Filtro Demolición\", categories, filter);\n        \n        if (pfe != null)\n        {\n            activeView.AddFilter(pfe.Id);\n            activeView.SetFilterVisibility(pfe.Id, false);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Assign the 'Steel' material to the first layer of a wall type.","completion":"using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"Steel\"));\n\n    if (wallType != null && steel != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, steel.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a pipe with a 171mm diameter.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(171, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Crea una viga estructural entre (0,0,3) y (5,0,3) en el Nivel 2.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Get the 'Walls' schedule and export its data to CSV.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s=>s.Name==\"Walls\");\n\nif (schedule != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(folderPath, \"Walls.csv\", options);\n}"}
{"prompt":"Inside the family editor, create a new horizontal reference plane.","completion":"string rpName = \"Horizontal Plane\";\nXYZ start = new XYZ(UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0, 0);\nXYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0);\nXYZ normal = XYZ.BasisY;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = rpName;\n    }\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"string newLevelName = \"Mezzanine\";\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Nivel 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Nivel 2\");\nif (lvl1 != null && lvl2 != null)\n{\ndouble midElevation = (lvl1.ProjectElevation + lvl2.ProjectElevation) \/ 2.0;\nLevel newLevel = Level.Create(doc, midElevation);\n    if(newLevel != null)\n    {\nnewLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Find all views that do not have an assigned view template.","completion":"List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId.Equals(ElementId.InvalidElementId)).ToList();"}
{"prompt":"Genera una cuadrícula de columnas 5x5 con separación de 8 metros.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Modela un barandal en una escalera existente.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Inserta una nota de texto con 'Revisar' en la vista actual.","completion":"View activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    XYZ position = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\n    TextNote.Create(doc, activeView.Id, position, \"Revisar\", defaultTypeId);\n}"}
{"prompt":"Cambia el tipo de una losa seleccionada a 'Concreto 15cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 15cm\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}
{"prompt":"Mueve un elemento seleccionado a la posición (4,5).","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para mover\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            XYZ newPosition = new XYZ(UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), lp.Point.Z);\n            lp.Point = newPosition;\n        }\n    }\n}"}
{"prompt":"Set the sill height of all windows to 1 meter.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nivel 'Roof Terrace' a 17m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(17, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}
{"prompt":"Crea un nuevo material llamado 'Vidrio Reflectante' y asígnale un color base y una transparencia.","completion":"string materialName = \"Vidrio Reflectante\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}
{"prompt":"Crea una vista de plano de plafón reflejado para el Nivel 1.","completion":"string levelName = \"Nivel 1\";\nstring viewName = \"Plano de Plafón Nivel 1\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Duplicate the 'Generic - 160mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 150mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}
{"prompt":"Import a georeferenced survey from a LandXML file.","completion":"\/\/ The Revit API in the provided context does not support direct LandXML import.\n\/\/ This functionality typically requires additional add-ins like the Site Designer, which are not available here.\n\/\/ As a placeholder, this code will show how to create a simple topography surface from a list of points.\nusing(Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(50, 0, 5));\n    points.Add(new XYZ(0, 50, 10));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}
{"prompt":"Create a filled region with a 'Concrete' pattern.","completion":"using (Transaction t = new Transaction(doc, \"Create Filled Region\"))\n{\n    t.Start();\n    FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\"));\n    View activeView = doc.ActiveView;\n\n    if (regionType != null && activeView != null)\n    {\n        XYZ p1 = new XYZ(0,0,0);\n        XYZ p2 = new XYZ(5 \/ 0.3048, 0,0);\n        XYZ p3 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p4 = new XYZ(0, 5 \/ 0.3048,0);\n        CurveLoop profile = new CurveLoop();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n    }\n    t.Commit();\n}"}
{"prompt":"Encuentra todos los muros que miden más de 3 metros de alto.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nList<ElementId> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds().ToList();"}
{"prompt":"Añade un codo de 82 grados entre dos tuberías.","completion":"using (Transaction t = new Transaction(doc, \"Add Elbow\"))\n{\n    t.Start();\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.ConnectorManager != null && p.ConnectorManager.UnusedConnectors.Size > 0).Take(2).ToList();\n\n    if (pipes.Count >= 2)\n    {\n        Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n        \n        if (c1 != null && c2 != null)\n        {\n            doc.Create.NewElbowFitting(c1, c2);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Duplicate the 'Basic Wall' type and rename it.","completion":"string typeToDuplicate = \"Basic Wall\";\nstring newTypeName = \"Basic Wall Copy\";\nWallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==typeToDuplicate);\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(newTypeName) as WallType;\n}"}
{"prompt":"Get all subcategories from the Doors category.","completion":"Category doorCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors);\nCategoryNameMap subcategories = doorCat.SubCategories;"}
{"prompt":"Add a horizontal reference plane named 'Centerline A'.","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"Centerline A\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una tubería con un diámetro de 150mm.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(150, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Create a new linear dimension type with blue text and 2mm size.","completion":"using (Transaction t = new Transaction(doc, \"Create Dimension Type\"))\n{\n    t.Start();\n    string newTypeName = \"Blue Dimension 2mm\";\n    DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\n    if (linearDimType != null)\n    {\n        DimensionType newDimType = linearDimType.Duplicate(newTypeName) as DimensionType;\n        if (newDimType != null)\n        {\n            Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n            Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(2 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Add a horizontal grid line to a curtain wall at a height of 1.5 meters.","completion":"using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) \/ 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, 1.5 \/ 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Find all doors on Level 2 that belong to the 'Single-Flush' family.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nList<Element> doors = new List<Element>();\n\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"Single-Flush\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Sincroniza el modelo local con el central, añadiendo el comentario 'Actualización de diseño'.","completion":"if (doc.IsWorkshared)\n{\n    TransactWithCentralOptions tco = new TransactWithCentralOptions();\n    SynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\n    swcOpts.Comment = \"Actualización de diseño\";\n    swcOpts.SaveLocalAfter = true;\n    doc.SynchronizeWithCentral(tco, swcOpts);\n}"}
{"prompt":"Activa todos los símbolos de familia cargados en el proyecto.","completion":"List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) \n    {\n        sym.Activate();\n    }\n}"}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Export the model to IFC4 format for coordination.","completion":"string folderPath = \"C:\/RevitExports\/\";\nstring fileName = doc.Title + \"-Coordination.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Genera un equipo eléctrico en X=1,Y=1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(level != null && panelSymbol != null)\n{\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Inserta una nota de texto con 'Revisar' en la vista actual.","completion":"View activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    XYZ position = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\n    TextNote.Create(doc, activeView.Id, position, \"Revisar\", defaultTypeId);\n}"}
{"prompt":"Create 10 architectural worksets.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_WALLS\", \"TAD_ARQ_FINISHES\", \"TAD_ARQ_CEILINGS\", \"TAD_ARQ_FLOORS\", \"TAD_ARQ_RAILINGS\", \"TAD_ARQ_WINDOWS\", \"TAD_ARQ_CARPENTRY\", \"TAD_ARQ_FURNITURE\", \"TAD_ARQ_PLUMBING\", \"TAD_ARQ_EXTERIOR\" };\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}"}
{"prompt":"Create a detail group with the selected detail items.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Typical Detail 1\";\n        }\n    }\n}"}
{"prompt":"Encuentra todas las familias de anotación y cuenta cuántas hay.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}
{"prompt":"Crea un techo por contorno en el 'Nivel de Cubierta'.","completion":"using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel de Cubierta\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n    if(roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20,0,0), new XYZ(20,30,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20,30,0), new XYZ(0,30,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén la longitud total de todos los muros del proyecto.","completion":"double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 118'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Coloca pilares en todos los cruces de la rejilla.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            grids[i].Curve.Intersect(grids[j].Curve, out results);\n            if(results != null)\n            {\n                 foreach (IntersectionResult ir in results)\n                 {\n                     doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                 }\n            }\n        }\n    }\n}"}
{"prompt":"Create an electrical conduit with a 1-inch diameter.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ end = new XYZ(5 \/ 0.3048, 0, 3 \/ 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set(1.0\/12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new window schedule that includes Type Mark, Width, and Height.","completion":"string scheduleName = \"Window Schedule\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}
{"prompt":"Exporta el documento a un archivo IFC con la versión IFC4x3.","completion":"string folderPath = \"C:\/RevitExports\/\";\nstring fileName = doc.Title + \"_IFC4x3.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4x3;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Activa todos los símbolos de familia cargados en el proyecto.","completion":"List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) \n    {\n        sym.Activate();\n    }\n}"}
{"prompt":"Create a shaft opening that passes through from Level 1 to Level 3.","completion":"using (Transaction t = new Transaction(doc, \"Create Shaft Opening\"))\n{\n    t.Start();\n    Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    Level topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 3\");\n\n    if (bottomLevel != null && topLevel != null)\n    {\n        XYZ p1 = new XYZ(5 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p2 = new XYZ(8 \/ 0.3048, 5 \/ 0.3048,0);\n        XYZ p3 = new XYZ(8 \/ 0.3048, 8 \/ 0.3048,0);\n        XYZ p4 = new XYZ(5 \/ 0.3048, 8 \/ 0.3048,0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1,p2));\n        profile.Append(Line.CreateBound(p2,p3));\n        profile.Append(Line.CreateBound(p3,p4));\n        profile.Append(Line.CreateBound(p4,p1));\n        doc.Create.NewOpening(bottomLevel, topLevel, profile);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una nueva hoja A2 con el número 'A-226'.","completion":"string sheetNumber = \"A-201\";\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"Detalles Constructivos\";\n        sheet.SheetNumber = sheetNumber;\n    }\n}"}
{"prompt":"Crea un nuevo tipo de cota lineal con texto azul y tamaño 2mm.","completion":"using (Transaction t = new Transaction(doc, \"Create Dimension Type\"))\n{\n    t.Start();\n    string newTypeName = \"Cota Azul 2mm\";\n    DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\n    if (linearDimType != null)\n    {\n        DimensionType newDimType = linearDimType.Duplicate(newTypeName) as DimensionType;\n        if (newDimType != null)\n        {\n            Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n            Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set(2 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get the total number of warnings in the project.","completion":"int totalWarnings = doc.GetWarnings().Count;\n"}
{"prompt":"Aplica aislamiento térmico de 29mm a todas las tuberías de agua caliente.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(29, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Comprueba si la vista activa es una vista de plano.","completion":"View activeView = doc.ActiveView;\nbool isPlanView = false;\n\nif (activeView != null)\n{\n    isPlanView = activeView.ViewType == ViewType.FloorPlan \n                 || activeView.ViewType == ViewType.CeilingPlan \n                 || activeView.ViewType == ViewType.AreaPlan \n                 || activeView.ViewType == ViewType.EngineeringPlan;\n}\n"}
{"prompt":"Crea una vista 3D por defecto.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n}"}
{"prompt":"Set the sill height of all windows to 1 meter.","completion":"using (Transaction t = new Transaction(doc, \"Set Sill Height\"))\n{\n    t.Start();\n    double sillHeight = 1 \/ 0.3048;\n    List<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\n    foreach(FamilyInstance window in windows)\n    {\n        Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n        if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n        {\n            sillHeightParam.Set(sillHeight);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén los IDs de todas las vistas 3D que empiezan con 'Coord' para exportación.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\n"}
{"prompt":"Rename the active view to 'Working View'.","completion":"string newName = \"Working View\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}
{"prompt":"Place a camera in the active view.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        cameraView.Name = \"New Camera View\";\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}
{"prompt":"Given a wall, find all pipes passing through it.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\n\nList<ElementId> intersectingPipes = new List<ElementId>();\nif (wallRef != null)\n{\n    Element wall = doc.GetElement(wallRef);\n    if (wall != null)\n    {\n        ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n        intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds().ToList();\n    }\n}\n"}
{"prompt":"Crea un nuevo tipo de texto de 4mm de color verde.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Verde\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Apply 25mm thermal insulation to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Crea una nueva hoja A3 y colócale una leyenda.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a pipe with a 150mm diameter.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(150, UnitTypeId.Millimeters));\n        }\n    }\n}"}
{"prompt":"Create 7 horizontal grids spaced 9 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Selecciona todos los muros del 'Nivel 2' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nList<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\nforeach(Wall wall in wallsOnLevel2)\n{\n    wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(\"REVISAR AISLAMIENTO\");\n}"}
{"prompt":"Averigua quién es el propietario de un elemento seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento\");\n\nWorksharingTooltipInfo info = null;\nif (pickedRef != null)\n{\n    info = WorksharingUtils.GetWorksharingTooltipInfo(doc, pickedRef.ElementId);\n}\n"}
{"prompt":"Encuentra todos los muros que no tienen nivel base asignado.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Crea una vista de plano de plafón reflejado para el Nivel 1.","completion":"string levelName = \"Nivel 1\";\nstring viewName = \"Plano de Plafón Nivel 1\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Crea una viga estructural entre (0,0,4) y (4,0,3) en el Nivel 2.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters));\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Crea una nueva vista de alzado mirando al sur.","completion":"string viewName = \"Alzado Sur (Nuevo)\";\nViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20, 0), 100);\nView aev = marker.CreateElevation(doc, doc.ActiveView.Id, 0);\naev.Name = viewName;"}
{"prompt":"Create a new A3 sheet and place a legend on it.","completion":"using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"A3\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) \/ 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create a new elevation view looking south.","completion":"using (Transaction t = new Transaction(doc, \"Create South Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 0);\n            if (aev != null)\n            {\n                aev.Name = \"South Elevation\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un suelo con un contorno de 10 por 8 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Obtén todas las subcategorías de la categoría Puertas.","completion":"Category doorCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors);\nCategoryNameMap subcategories = doorCat.SubCategories;"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-1'.","completion":"List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"WM-01\");\n  }\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-104' y establece su resistencia al fuego a '95 min'.","completion":"string newTypeName = \"Puerta RF-90\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = null;\nif (doorTypeToDuplicate != null)\n{\n    newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"90 min\");\n        }\n    }\n}"}
{"prompt":"Get the coordinates of the project base point and the survey point.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}
{"prompt":"Create a new level named 'Basement Floor' at an elevation of -5 meters.","completion":"string levelName = \"Basement Floor\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Inserta una armadura (truss) de 5 metros entre dos puntos.","completion":"using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(6 \/ 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo nivel 'Nivel 3' a una elevación de 14 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(14, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 3\";\n}"}
{"prompt":"Create an electrical conduit with a 1-inch diameter.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ end = new XYZ(5 \/ 0.3048, 0, 3 \/ 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set(1.0\/12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Create an MEP space for each room on Level 1.","completion":"using (Transaction t = new Transaction(doc, \"Create MEP Spaces\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n\n    if (level1 != null)\n    {\n        List<Room> roomsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level1.Id)).Cast<Room>().ToList();\n        foreach(Room room in roomsOnLevel1)\n        {\n           \/\/ The direct creation of MEP spaces from rooms might not be available in this specific API version.\n           \/\/ Placeholder comment for the intended logic.\n           \/\/ Space.Create(doc, room, null);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Obtén la geometría sólida de un elemento seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para obtener su geometría\");\n\nList<Solid> solids = new List<Solid>();\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        Options opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if (geoElem != null)\n        {\n            solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}
{"prompt":"Create a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-77' y establece su resistencia al fuego a '86 min'.","completion":"string newTypeName = \"Puerta RF-90\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"90 min\");\n    }\n}"}
{"prompt":"Crea un circuito eléctrico conectando luminarias a un panel.","completion":"using (Transaction t = new Transaction(doc, \"Create Electrical Circuit\"))\n{\n    t.Start();\n    FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n    List<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\n    if (panel != null && fixtureIds.Count > 0)\n    {\n        ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n        if(electricalSystem != null)\n        {\n            electricalSystem.SelectPanel(panel);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Draw a 347x166 millimeter rectangular ventilation duct.","completion":"using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast<DuctType>().FirstOrDefault(d => d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null && ductType != null && systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ p2 = new XYZ(10 \/ 0.3048, 0, 3 \/ 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null && !widthParam.IsReadOnly) widthParam.Set(300 \/ 304.8);\n            if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(200 \/ 304.8);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Rotate the given element 54 degrees about its center.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n            double angle = 45 * Math.PI \/ 180.0;\n            ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n        }\n    }\n}"}
{"prompt":"Generate a report with the area of all rooms in the project.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}
{"prompt":"Importa un archivo CAD llamado 'BasePlan.dwg' en la vista actual.","completion":"string filePath = \"C:\/CAD\/BasePlan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}
{"prompt":"Add a horizontal reference plane named 'Centerline A'.","completion":"using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"Centerline A\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get the 'Walls' schedule and export its data to CSV.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s=>s.Name==\"Walls\");\n\nif (schedule != null)\n{\n    string folderPath = \"C:\/RevitExports\/\";\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(folderPath, \"Walls.csv\", options);\n}"}
{"prompt":"Dimension the length of a user-selected wall.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall to dimension\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}
{"prompt":"Coloca todos los elementos seleccionados en el workset 'Fachada'.","completion":"using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Fachada\");\n        if(workset == null) workset = Workset.Create(doc, \"Fachada\");\n\n        if (selectedIds != null && selectedIds.Count > 0 && workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null && !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Get a list of all material names.","completion":"List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\n"}
{"prompt":"Crea un conducto eléctrico de 1 pulgada de diámetro.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 \/ 0.3048);\n        XYZ end = new XYZ(5 \/ 0.3048, 0, 3 \/ 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set(1.0 \/ 12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea 5 worksets para las disciplinas de ingeniería.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}
{"prompt":"Inicia y confirma una transacción para 'Modificar Proyecto'.","completion":""}
{"prompt":"Create a new pipe type with Copper material.","completion":"string newTypeName = \"Copper Pipe\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial copper = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Copper\")) as Material;\n\nif (pipeTypeToDuplicate != null && copper != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(copper.Id);\n    }\n}"}
{"prompt":"Mueve el punto base del proyecto 105 metros hacia el norte.","completion":"using (Transaction t = new Transaction(doc, \"Move Project Base Point\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        XYZ translation = new XYZ(0, 100 \/ 0.3048, 0);\n        ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n    }\n    t.Commit();\n}"}
{"prompt":"Create a structural column at position X=10, Y=5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Get all rooms on the 'Ground Floor' Level.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Ground Floor\") as Level;\nList<Element> roomsOnGround = new List<Element>();\n\nif (groundFloor != null)\n{\n    roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Crea un ensamblaje a partir de los elementos seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"Nuevo Ensamblaje\";\n    }\n}"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 344mm' con un grosor de 31cm.","completion":"using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Muro Genérico 300mm\";\n    WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (oldWallType != null)\n    {\n        WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if (cs != null && cs.LayerCount > 0)\n            {\n                int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n                if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n                {\n                    cs.SetLayerWidth(coreLayerIndex, 300 \/ 304.8);\n                    newWallType.SetCompoundStructure(cs);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Genera una cuadrícula de columnas 6x4 con separación de 9 metros.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(9, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Create a 3D view oriented from the southeast.","completion":"string viewName = \"3D View Southeast\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}
{"prompt":"Create a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}
{"prompt":"Create a new 5mm text type in green color.","completion":"using (Transaction t = new Transaction(doc, \"Create Green Text Type\"))\n{\n    t.Start();\n    string newTypeName = \"5mm Green\";\n    TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n    if (defaultType != null)\n    {\n        TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n        if (newType != null)\n        {\n            Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n            if (textSizeParam != null && !textSizeParam.IsReadOnly)\n            {\n                textSizeParam.Set(5 \/ 304.8);\n            }\n            Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n            if (lineColorParam != null && !lineColorParam.IsReadOnly)\n            {\n                 lineColorParam.Set(65280);\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea una nueva revisión y aplícala a la hoja activa.","completion":"Revision rev = Revision.Create(doc);\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (rev != null && sheet != null)\n{\n    rev.Description = \"Emitido para Construcción\";\n    rev.RevisionDate = DateTime.Now.ToString(\"yyyy-MM-dd\");\n    rev.IssuedBy = \"Departamento BIM\";\n    \n    ICollection<ElementId> revisions = sheet.GetAdditionalRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}
{"prompt":"Exporta el documento a un archivo IFC con la versión IFC4x3.","completion":"string folderPath = \"C:\/RevitExports\/\";\nstring fileName = doc.Title + \"_IFC4x3.ifc\";\nif(System.IO.Directory.Exists(folderPath))\n{\n    IFCExportOptions options = new IFCExportOptions();\n    options.FileVersion = IFCVersion.IFC4x3;\n    doc.Export(folderPath, fileName, options);\n}"}
{"prompt":"Coloca una ventana de 1x1 metros en la pared más cercana.","completion":"FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    \/\/ Duplica el tipo para no modificar el original y asegura un nombre único\n    string newTypeName = $\"Window {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters), UnitTypeId.Meters)}m x {UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitTypeId.Meters)}m - {Guid.NewGuid().ToString().Substring(0, 4)}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    \/\/ Establece las dimensiones en el nuevo tipo\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Create an electrical circuit connecting light fixtures to a panel.","completion":"using (Transaction t = new Transaction(doc, \"Create Electrical Circuit\"))\n{\n    t.Start();\n    FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n    List<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\n    if (panel != null && fixtureIds.Count > 0)\n    {\n        ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n        if(electricalSystem != null)\n        {\n            electricalSystem.SelectPanel(panel);\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"string newLevelName = \"Mezzanine\";\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Nivel 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Nivel 2\");\nif (lvl1 != null && lvl2 != null)\n{\ndouble midElevation = (lvl1.ProjectElevation + lvl2.ProjectElevation) \/ 2.0;\nLevel newLevel = Level.Create(doc, midElevation);\n    if(newLevel != null)\n    {\nnewLevel.Name = newLevelName;\n    }\n}"}
{"prompt":"Crea una copia de la vista activa y nómbrala 'Copia de Trabajo'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"Copia de Trabajo\";\n    }\n}"}
{"prompt":"Cambia el nombre de todas las familias cargadas que contengan 'Métrica' a 'Imperial'.","completion":"List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Métrica\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"Métrica\", \"Imperial\");\n}"}
{"prompt":"Change the detail level of the current view to 'Coarse'.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Coarse;\n}"}
{"prompt":"Create a new elevation view looking south.","completion":"using (Transaction t = new Transaction(doc, \"Create South Elevation\"))\n{\n    t.Start();\n    ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\n    View activeView = doc.ActiveView;\n\n    if (elevationVFT != null && activeView != null)\n    {\n        ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 \/ 0.3048, 0), 100);\n        \n        if (marker != null)\n        {\n            View aev = marker.CreateElevation(doc, activeView.Id, 0);\n            if (aev != null)\n            {\n                aev.Name = \"South Elevation\";\n            }\n        }\n    }\n    t.Commit();\n}"}
{"prompt":"Aplica el estilo visual 'Rayos X' a la vista 3D activa.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe;\n}"}
{"prompt":"Set the sill height of all windows to 900mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Crea una vista de plano de plafón reflejado para el Nivel 1.","completion":"string levelName = \"Nivel 1\";\nstring viewName = \"Plano de Plafón Nivel 1\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}
{"prompt":"Set the sill height of all windows to 1 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Dentro del editor de familias, crea un nuevo plano de referencia horizontal.","completion":"string rpName = \"Plano Horizontal\";\nXYZ start = new XYZ(UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0, 0);\nXYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0);\nXYZ normal = XYZ.BasisY;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = rpName;\n    }\n}"}
