{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea vigas entre las columnas alineadas horizontalmente."}, {"role": "assistant", "content": "FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    if(!beamSymbol.IsActive) beamSymbol.Activate();\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new 3D view named '{view_name}' oriented from point ({eye_x_m},{eye_y_m},{eye_z_m}) looking at the origin."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v=>v.ViewFamily==ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    if (view != null)\n    {\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits({eye_x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_z_m}, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D vo = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        view.SetOrientation(vo);\n        view.Name = \"{view_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un pilar del tipo 'W-Wide Flange-Column' en cada intersección de la rejilla."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"W-Wide Flange-Column\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia un panel de vidrio de un muro cortina por un panel sólido."}, {"role": "assistant", "content": "Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\nFamilySymbol solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_CurtainWallPanels && (fs.Name.Contains(\"Solid\") || fs.Name.Contains(\"Sólido\")));\n\nif (curtainWall != null && solidPanelType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    if (grid != null)\n    {\n        ElementId panelIdToChange = grid.GetPanelIds().FirstOrDefault();\n        if (panelIdToChange != ElementId.InvalidElementId)\n        {\n            Panel panelToChange = doc.GetElement(panelIdToChange) as Panel;\n            if (panelToChange != null) panelToChange.ChangeTypeId(solidPanelType.Id);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find the host of a face-based light fixture."}, {"role": "assistant", "content": "FamilyInstance lightFixture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().Cast<FamilyInstance>().FirstOrDefault(fi => fi.HostFace != null);\n\nElement host = null;\nif (lightFixture != null)\n{\n    Reference hostFaceRef = lightFixture.HostFace;\n    if (hostFaceRef != null)\n    {\n        host = doc.GetElement(hostFaceRef.ElementId);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva tabla de planificación para Pilares Estructurales."}, {"role": "assistant", "content": "string scheduleName = \"Tabla de Pilares Estructurales\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dibuja una región rellena con patrón diagonal."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n    if (activeView != null && fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(new XYZ(0, 0, 0), new XYZ(5, 0, 0)));\n                profile.Append(Line.CreateBound(new XYZ(5, 0, 0), new XYZ(5, 5, 0)));\n                profile.Append(Line.CreateBound(new XYZ(5, 5, 0), new XYZ(0, 5, 0)));\n                profile.Append(Line.CreateBound(new XYZ(0, 5, 0), new XYZ(0, 0, 0)));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop> { profile });\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera una cuadrícula de columnas {rows}x{cols} con separación de 10 metros."}, {"role": "assistant", "content": "FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i=0; i<{rows}; i++)\n    {\n        for(int j=0; j<{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Apply {thickness_mm}mm thermal insulation to all hot water pipes."}, {"role": "assistant", "content": "PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aplica el estilo visual 'Rayos X' a la vista 3D activa."}, {"role": "assistant", "content": "View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe; // Simula el efecto 'Rayos X'\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls with an empty 'Mark' parameter and set it to '{mark_value}'."}, {"role": "assistant", "content": "List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"{mark_value}\");\n  }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de puerta llamado 'M_Single-Flush' y establece su resistencia al fuego a '{fire_rating}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"M_Single-Flush\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"{fire_rating}\");\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new sheet with number '{sheet_number}' and name '{sheet_name}'."}, {"role": "assistant", "content": "FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"{sheet_name}\";\n        sheet.SheetNumber = \"{sheet_number}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Ajusta todas las ventanas para que la altura del antepecho sea {sill_height_m} metro."}, {"role": "assistant", "content": "double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_m}, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new door type named 'Puerta 90x210' and set its fire rating to '{fire_rating}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Puerta 90x210\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"{fire_rating}\");\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén el número total de advertencias en el proyecto."}, {"role": "assistant", "content": "int totalWarnings = doc.GetWarnings().Count;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Oculta todos los muros que sean más cortos de 10.2 metros."}, {"role": "assistant", "content": "double lengthThreshold = UnitUtils.ConvertToInternalUnits(10.2, UnitTypeId.Meters);\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nList<ElementId> shortWallIds = new List<ElementId>();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    foreach(Wall wall in walls)\n    {\n        Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n        if(lengthParam != null && lengthParam.HasValue && lengthParam.AsDouble() < lengthThreshold)\n        {\n            shortWallIds.Add(wall.Id);\n        }\n    }\n    if (shortWallIds.Count > 0)\n    {\n        activeView.HideElements(shortWallIds);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all views that do not have an assigned view template."}, {"role": "assistant", "content": "List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId.Equals(ElementId.InvalidElementId)).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place a spot elevation on a given face and view point."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select the top face of the floor\");\n\nView activeView = doc.ActiveView;\n\nif (faceRef != null && activeView != null)\n{\n    XYZ pointOnFace = faceRef.GlobalPoint;\n    XYZ leaderEnd = pointOnFace + new XYZ(1 / 0.3048, 1 / 0.3048, 0);\n    doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new level named 'Planta Baja' at an elevation of 4.0 meters."}, {"role": "assistant", "content": "string levelName = \"Planta Baja\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva hoja con el número '{sheet_number}' y nombre '{sheet_name}'."}, {"role": "assistant", "content": "FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"{sheet_name}\";\n        sheet.SheetNumber = \"{sheet_number}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista 3D axonométrica orientada al Noroeste."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(-1, 1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(1, -1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = \"Vista 3D Noroeste\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add a horizontal reference plane named '{plane_name}'."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    XYZ bubbleEnd = new XYZ(0, 10, 0);\n    XYZ freeEnd = new XYZ(10, 10, 0);\n    XYZ cutVec = XYZ.BasisZ;\n    ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n    if (rp != null)\n    {\n        rp.Name = \"{plane_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todos los muros con más de 2.8 metros de altura."}, {"role": "assistant", "content": "double heightThreshold = UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {sheet_size} sheet and place the '{view_name}' view on it."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Sheet\"))\n{\n    t.Start();\n    string sheetNumber = \"A-101\";\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"{sheet_size}\"));\n    View viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<View>().FirstOrDefault(v => v.Name == \"{view_name}\");\n\n    if (titleBlock != null && viewToPlace != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            newSheet.Name = \"Architectural Plan - {view_name}\";\n            newSheet.SheetNumber = sheetNumber;\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a structural beam between (5,5,3) and (15,5,3) on Level 2."}, {"role": "assistant", "content": "FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(5, 5, 3);\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a structural beam between (0,0,0) and (10,0,0) on Level 1."}, {"role": "assistant", "content": "FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, 0);\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(0, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una cota de elevación en el Azotea."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    Level lvl = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Azotea\");\n    View activeView = doc.ActiveView;\n\n    if (lvl != null && activeView != null)\n    {\n        Reference levelRef = new Reference(lvl);\n        XYZ origin = new XYZ(5/0.3048, 5/0.3048, lvl.Elevation);\n        XYZ leaderEnd = origin + new XYZ(2/0.3048, 2/0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, levelRef, origin, origin, leaderEnd, origin, true);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el nombre de todas las vistas de planta para que empiecen con '{prefix}'."}, {"role": "assistant", "content": "string prefix = \"{prefix}\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Import a georeferenced survey from a LandXML file."}, {"role": "assistant", "content": "IList<XYZ> points = new List<XYZ>();\npoints.Add(new XYZ(0, 0, 0));\npoints.Add(new XYZ(50, 0, 5));\npoints.Add(new XYZ(0, 50, 10));\nTopographySurface.Create(doc, points);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate {level_to_duplicate} with a {offset_m}m offset and name it '{new_level_name}'."}, {"role": "assistant", "content": "string newLevelName = \"{new_level_name}\";\nLevel levelToDup = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{level_to_duplicate}\") as Level;\n\nif (levelToDup != null)\n{\n    double newElevation = levelToDup.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Model a railing on an existing staircase."}, {"role": "assistant", "content": "RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Activate all FamilySymbols in the project."}, {"role": "assistant", "content": "List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (FamilySymbol sym in symbols)\n{\n    if (!sym.IsActive)\n    {\n        sym.Activate();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea {num_grids} ejes horizontales separados por {separation_m} metros."}, {"role": "assistant", "content": "double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i < {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new linear dimension type named '{type_name}' with blue text and {text_size_mm}mm size."}, {"role": "assistant", "content": "DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\nif (linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"{type_name}\") as DimensionType;\n    if (newDimType != null)\n    {\n        Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n        Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nivel intermedio llamado '{new_level_name}' a mitad de camino entre el {level1_name} y el {level2_name}."}, {"role": "assistant", "content": "string newLevelName = \"{new_level_name}\";\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"{level1_name}\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"{level2_name}\");\nif (lvl1 != null && lvl2 != null)\n{\ndouble midElevation = (lvl1.ProjectElevation + lvl2.ProjectElevation) / 2.0;\nLevel newLevel = Level.Create(doc, midElevation);\n    if(newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new shared text project parameter named '{param_name}' for walls and doors."}, {"role": "assistant", "content": "string originalFile = doc.Application.SharedParametersFilename;\nstring tempFile = System.IO.Path.GetTempFileName() + \".txt\";\nusing (System.IO.File.Create(tempFile)) { }\ndoc.Application.SharedParametersFilename = tempFile;\n\ntry\n{\n    DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n    if (defFile != null)\n    {\n        DefinitionGroup group = defFile.Groups.Create(\"General\");\n        if (group != null)\n        {\n            ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(\"{param_name}\", ParameterType.Text);\n            Definition definition = group.Definitions.Create(options);\n            if (definition != null)\n            {\n                CategorySet categories = doc.Application.Create.NewCategorySet();\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                doc.ParameterBindings.Insert(definition, binding, Autodesk.Revit.DB.BuiltInParameterGroup.PG_DATA);\n            }\n        }\n    }\n}\nfinally\n{\n    doc.Application.SharedParametersFilename = originalFile;\n    System.IO.File.Delete(tempFile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Delete all unused wall types in the project."}, {"role": "assistant", "content": "ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Localiza todos los muros con un parámetro 'Marca' vacío y asigna '{mark_value}'."}, {"role": "assistant", "content": "List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"{mark_value}\");\n  }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Asigna el material '{material_name}' a la primera capa de un tipo de muro."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"{material_name}\"));\n\n    if (wallType != null && material != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, material.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Modela una bandeja de cables entre el punto ({p1x_m}, {p1y_m}, {p1z_m}) y ({p2x_m}, {p2y_m}, {p2z_m})."}, {"role": "assistant", "content": "CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (trayType != null && level != null)\n{\n    XYZ p1 = new XYZ(UnitUtils.ConvertToInternalUnits({p1x_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p1y_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p1z_m}, UnitTypeId.Meters)); \n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({p2x_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p2y_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p2z_m}, UnitTypeId.Meters));\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create {num_worksets} worksets for engineering disciplines."}, {"role": "assistant", "content": "List<string> worksetNames = new List<string> {{ \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplica el {level_to_duplicate} con un desfase de {offset_m}m y llámalo '{new_level_name}'."}, {"role": "assistant", "content": "string newLevelName = \"{new_level_name}\";\nLevel levelToDup = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{level_to_duplicate}\") as Level;\n\nif (levelToDup != null)\n{\n    double newElevation = levelToDup.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Copy all elements from {source_level} to {target_level}."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{source_level}\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{target_level}\") as Level;\n\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if (elementsToCopy.Count > 0)\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Apply the 'X-Ray' visual style to the active 3D view."}, {"role": "assistant", "content": "View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an electrical conduit with a {diameter_inch}-inch diameter."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 / 0.3048);\n        XYZ end = new XYZ(5 / 0.3048, 0, 3 / 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set({diameter_inch} / 12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Copia todos los elementos del {source_level} al {target_level}."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{source_level}\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{target_level}\") as Level;\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(elementsToCopy.Any())\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todos los muros que miden más de 2.8 metros de alto."}, {"role": "assistant", "content": "double heightThreshold = UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nList<ElementId> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una región rellena con un patrón de '{pattern_name}'."}, {"role": "assistant", "content": "FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"{pattern_name}\"));\nView activeView = doc.ActiveView;\n\nif (regionType != null && activeView != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 0,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(0, 5 / 0.3048,0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add the 'Level', 'Mark', and 'Volume' fields to the column schedule."}, {"role": "assistant", "content": "ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dibuja una región rellena con patrón diagonal."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nFillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n\nif (activeView != null && fillPattern != null)\n{\n    FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n    if (filledRegionType != null)\n    {\n        FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n        if (newType != null)\n        {\n            newType.ForegroundPatternId = fillPattern.Id;\n            XYZ p1 = new XYZ(0,0,0);\n            XYZ p2 = new XYZ(5 / 0.3048,0,0);\n            XYZ p3 = new XYZ(5 / 0.3048,5 / 0.3048,0);\n            XYZ p4 = new XYZ(0,5 / 0.3048,0);\n            CurveLoop profile = new CurveLoop();\n            profile.Append(Line.CreateBound(p1,p2));\n            profile.Append(Line.CreateBound(p2,p3));\n            profile.Append(Line.CreateBound(p3,p4));\n            profile.Append(Line.CreateBound(p4,p1));\n            FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop>{profile});\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén los IDs de todas las vistas 3D que empiezan con '{prefix}' para exportación."}, {"role": "assistant", "content": "List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"{prefix}\") && !v.IsTemplate).Select(v => v.Id).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Import a topography from a CSV file."}, {"role": "assistant", "content": "// CSV file reading is not directly supported by a single API call.\n// You would typically read the file line by line, parse the XYZ coordinates,\n// and then use the TopographySurface.Create method with a list of points.\n// As a placeholder, here's how to create a simple topography from a list of points:\nIList<XYZ> points = new List<XYZ>();\npoints.Add(new XYZ(0, 0, 0));\npoints.Add(new XYZ(10, 0, 0));\npoints.Add(new XYZ(0, 10, 0));\npoints.Add(new XYZ(10, 10, 5));\nTopographySurface.Create(doc, points);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all section views in the project."}, {"role": "assistant", "content": "List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Importa una topografía desde un archivo CSV."}, {"role": "assistant", "content": "// CSV file reading is not directly supported by a single API call.\n// You would typically read the file line by line, parse the XYZ coordinates,\n// and then use the TopographySurface.Create method with a list of points.\n// As a placeholder, here's how to create a simple topography from a list of points:\nIList<XYZ> points = new List<XYZ>();\npoints.Add(new XYZ(0, 0, 0));\npoints.Add(new XYZ(10, 0, 0));\npoints.Add(new XYZ(0, 10, 0));\npoints.Add(new XYZ(10, 10, 5));\nTopographySurface.Create(doc, points);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate the '{original_type_name}' wall type and name it '{new_type_name}'."}, {"role": "assistant", "content": "WallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"{original_type_name}\");\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(\"{new_type_name}\") as WallType;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rota el norte del proyecto 45 grados en sentido horario."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInRadians = -(45 * Math.PI / 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de los nombres de todos los materiales."}, {"role": "assistant", "content": "List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Model a ceiling at a height of 3.15 meters on Level 1."}, {"role": "assistant", "content": "CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (ceilingType != null && level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,0,0)));\n\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{{profile}}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters));\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una apertura de hueco vertical (shaft) desde el nivel base hasta el nivel más alto."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\nif (bottomLevel != null && topLevel != null)\n{\n    XYZ p1 = new XYZ(2 / 0.3048, 2 / 0.3048,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 2 / 0.3048,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(2 / 0.3048, 5 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Permite al usuario seleccionar un muro y obtén su ElementId."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera un piso rectangular de 12.5×6.2 metros."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(12.5, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(6.2, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> {{ loop }}, floorType.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Oculta todas las categorías de anotación en la vista activa."}, {"role": "assistant", "content": "Categories categories = doc.Settings.Categories;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    foreach(Category cat in categories)\n    {\n        if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n        {\n             activeView.SetCategoryHidden(cat.Id, true);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all subcategories from the {buit_in_category_enum} category."}, {"role": "assistant", "content": "Category targetCategory = doc.Settings.Categories.get_Item(BuiltInCategory.{buit_in_category_enum});\nCategoryNameMap subcategories = targetCategory.SubCategories;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén la geometría sólida de un elemento seleccionado."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para obtener su geometría\");\n\nList<Solid> solids = new List<Solid>();\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        Options opt = new Options() {{ ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine }};\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if (geoElem != null)\n        {\n            solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de texto de {text_size_mm}mm de color verde llamado '{type_name}'."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un muro en Level 1 de (0,0,0) a (10,0,0) con 2.8m de alto."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallType != null)\n    {\n        Line wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0));\n        double height = UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters);\n        Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place lighting posts every 6m along a 100m path."}, {"role": "assistant", "content": "FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Link a DWG file as a reference in the active view."}, {"role": "assistant", "content": "string filePath = \"C:/CAD_Files/Base_Plan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.ColorMode = ImportColorMode.Preserved;\nElementId linkedFileId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(filePath, options, activeView, out linkedFileId);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea columnas en cada intersección de ejes."}, {"role": "assistant", "content": "FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    if(!colSymbol.IsActive) colSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                 if(results != null) {\n                     foreach (IntersectionResult ir in results)\n                     {\n                         doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                     }\n                 }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un Path of Travel entre los puntos ({x1},{y1}) y ({x2},{y2}) en la vista de planta."}, {"role": "assistant", "content": "ViewPlan viewPlan = doc.ActiveView as ViewPlan;\n\nif (viewPlan != null && viewPlan.ViewType == ViewType.FloorPlan)\n{\n    ElementId levelId = viewPlan.get_Parameter(BuiltInParameter.PLAN_VIEW_LEVEL).AsElementId();\n    Level level = doc.GetElement(levelId) as Level;\n    if (level != null)\n    {\n        XYZ startPoint = new XYZ({x1} / 0.3048, {y1} / 0.3048, level.Elevation);\n        XYZ endPoint = new XYZ({x2} / 0.3048, {y2} / 0.3048, level.Elevation);\n        PathOfTravel.Create(viewPlan, startPoint, endPoint);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las familias de anotación."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade un punto de referencia en las coordenadas (7,4,3) dentro del editor de familias."}, {"role": "assistant", "content": "if(doc.IsFamilyDocument)\n{\n    doc.FamilyCreate.NewReferencePoint(new XYZ(7,4,3));\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Ajusta la altura del antepecho de todas las ventanas a 3.0 metro(s)."}, {"role": "assistant", "content": "double sillHeight = 3.0 / 0.3048;\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Importa una topografía desde un archivo CSV."}, {"role": "assistant", "content": "// CSV file reading is not directly supported by a single API call.\n// You would typically read the file line by line, parse the XYZ coordinates,\n// and then use the TopographySurface.Create method with a list of points.\n// As a placeholder, here's how to create a simple topography from a list of points:\nIList<XYZ> points = new List<XYZ>();\npoints.Add(new XYZ(0, 0, 0));\npoints.Add(new XYZ(10, 0, 0));\npoints.Add(new XYZ(0, 10, 0));\npoints.Add(new XYZ(10, 10, 5));\nTopographySurface.Create(doc, points);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de texto de {text_size_mm}mm de color verde llamado '{type_name}'."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dibuja una región rellena con patrón diagonal."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n    if (activeView != null && fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(new XYZ(0, 0, 0), new XYZ(5, 0, 0)));\n                profile.Append(Line.CreateBound(new XYZ(5, 0, 0), new XYZ(5, 5, 0)));\n                profile.Append(Line.CreateBound(new XYZ(5, 5, 0), new XYZ(0, 5, 0)));\n                profile.Append(Line.CreateBound(new XYZ(0, 5, 0), new XYZ(0, 0, 0)));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop> { profile });\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Permite al usuario seleccionar un muro y obtén su ElementId."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea {num_grids} ejes horizontales separados por {separation_m} metros."}, {"role": "assistant", "content": "double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i < {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create columns at each grid intersection."}, {"role": "assistant", "content": "FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    if(!colSymbol.IsActive) colSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                 if(results != null) {\n                     foreach (IntersectionResult ir in results)\n                     {\n                         doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                     }\n                 }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de puerta llamado 'Double-Glass' y establece su resistencia al fuego a '{fire_rating_value}'."}, {"role": "assistant", "content": "FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"Double-Glass\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating_value}\");\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Elimina todos los tipos de muro no utilizados en el proyecto."}, {"role": "assistant", "content": "ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo material llamado '{material_name}' con color ({color_r}, {color_g}, {color_b}) y transparencia de {transparency_percent}%."}, {"role": "assistant", "content": "ElementId materialId = Material.Create(doc, \"{material_name}\");\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color({color_r}, {color_g}, {color_b});\n        material.Transparency = {transparency_percent};\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las advertencias del proyecto."}, {"role": "assistant", "content": "IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva hoja {sheet_size} y colócale una leyenda."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"{sheet_size}\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an axonometric 3D view oriented to the Northwest."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(-1, 1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(1, -1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = \"3D View Northwest\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an MEP space for each room on 'Roof'."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Roof\");\n\nif (level != null)\n{\n    List<Room> roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level.Id)).Cast<Room>().ToList();\n    foreach(Room room in roomsOnLevel)\n    {\n       Space.Create(doc, room, null);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Generate a rectangular floor of 12.5x6.2 meters."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(12.5, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(6.2, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> {{ loop }}, floorType.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de puerta llamado 'Double-Glass' y establece su resistencia al fuego a '{fire_rating_value}'."}, {"role": "assistant", "content": "FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"Double-Glass\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating_value}\");\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new elevation view looking south."}, {"role": "assistant", "content": "ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null && activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 0);\n        if (aev != null)\n        {\n            aev.Name = \"South Elevation\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a default 3D view."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Export the current model to an NWC file."}, {"role": "assistant", "content": "string folderPath = \"C:/exports/\";\nstring fileName = doc.Title + \".nwc\";\nNavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(folderPath, fileName, options);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Modela un barandal en una escalera existente."}, {"role": "assistant", "content": "RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las puertas del nivel 'Roof' que sean de la familia '{family_name}'."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Roof\");\nList<Element> doors = new List<Element>();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a structural column at position X=7, Y=4."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Export the document to '{folder_path}{file_name}' with IFC version {ifc_version_enum}."}, {"role": "assistant", "content": "string folderPath = \"{folder_path}\";\nstring fileName = \"{file_name}\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.{ifc_version_enum};\ndoc.Export(folderPath, fileName, options);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the total length of all walls in the project."}, {"role": "assistant", "content": "double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva revisión con descripción '{description}', emitida por '{issued_by}' en la fecha '{date}' y aplícala a la hoja activa."}, {"role": "assistant", "content": "Revision rev = Revision.Create(doc);\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (rev != null && sheet != null)\n{\n    rev.Description = \"{description}\";\n    rev.RevisionDate = \"{date}\";\n    rev.IssuedBy = \"{issued_by}\";\n    \n    ICollection<ElementId> revisions = sheet.GetAdditionalRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {text_size_mm}mm text type in blue color."}, {"role": "assistant", "content": "string newTypeName = \"{text_size_mm}mm Blue\";\nTextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n        \n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly) lineColorParam.Set(255);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un circuito eléctrico conectando luminarias a un panel."}, {"role": "assistant", "content": "FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nList<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\nif (panel != null && fixtureIds.Count > 0)\n{\n    ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n    if(electricalSystem != null)\n    {\n        electricalSystem.SelectPanel(panel);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las familias de anotación y cuenta cuántas hay."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\nint count = annotationFamilies.Count;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Oculta los elementos seleccionados en la vista activa."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToHide = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToHide.Count > 0)\n{\n    activeView.HideElements(idsToHide);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nivel 'First Floor' a 3.5m."}, {"role": "assistant", "content": "string levelName = \"First Floor\";\ndouble elev = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change the visual style of the active view to 'Hidden Line'."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una cota de elevación en una cara y un punto de vista dados."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara superior del suelo\");\n\nView activeView = doc.ActiveView;\n\nif (faceRef != null && activeView != null)\n{\n    XYZ pointOnFace = faceRef.GlobalPoint;\n    XYZ leaderEnd = pointOnFace + new XYZ(1 / 0.3048, 1 / 0.3048, 0);\n    doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Oculta todos los elementos de anotación en la vista activa."}, {"role": "assistant", "content": "if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rotate project north 30 degrees clockwise."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInRadians = -(30 * Math.PI / 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade una línea de rejilla horizontal a un muro cortina a 3.15 metros de altura."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) / 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, 3.15 / 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un techo por contorno en el 'Nivel 2'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n    if(roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20,0,0), new XYZ(20,30,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20,30,0), new XYZ(0,30,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Exporta el documento a un archivo IFC con la versión IFC4x3."}, {"role": "assistant", "content": "string folderPath = \"C:/RevitExports/\";\nstring fileName = doc.Title + \"_IFC4x3.ifc\";\nif(System.IO.Directory.Exists(folderPath))\n{\n    IFCExportOptions options = new IFCExportOptions();\n    options.FileVersion = IFCVersion.IFC4x3;\n    doc.Export(folderPath, fileName, options);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dado un muro, obtén los materiales y sus volúmenes."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un muro\");\n\nDictionary<string, double> materialVolumes = new Dictionary<string, double>();\nif (pickedRef != null)\n{\n    Wall wall = doc.GetElement(pickedRef) as Wall;\n    if (wall != null)\n    {\n        Parameter areaParam = wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED);\n        if (areaParam != null && areaParam.HasValue)\n        {\n            double wallArea = areaParam.AsDouble();\n            WallType wallType = wall.WallType;\n            if (wallType != null)\n            {\n                CompoundStructure cs = wallType.GetCompoundStructure();\n                if (cs != null)\n                {\n                    foreach(CompoundStructureLayer layer in cs.GetLayers())\n                    {\n                        Material material = doc.GetElement(layer.MaterialId) as Material;\n                        if(material != null)\n                        {\n                            double volume = layer.Width * wallArea; \n                            materialVolumes[material.Name] = volume;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el tipo de una losa por uno que contenga 'Generic 12\"'."}, {"role": "assistant", "content": "Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Generic 12\"\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all instances of the Furniture category."}, {"role": "assistant", "content": "List<Element> furnitureInstances = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade el prefijo '{prefix}' a todas las vistas de plano."}, {"role": "assistant", "content": "string prefix = \"{prefix}\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if (view != null)\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a SketchPlane on Azotea."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Azotea\");\n\nif (level != null)\n{\n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, new XYZ(0, 0, level.Elevation));\n    SketchPlane skp = SketchPlane.Create(doc, plane);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Pon un pilar estructural en las coordenadas 2,3."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una instancia de la familia '{family_name}' en el centro de la habitación '{room_name}'."}, {"role": "assistant", "content": "Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"{room_name}\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"{family_name}\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de tubería con material de {material_name}."}, {"role": "assistant", "content": "string newTypeName = \"Tubería de {material_name}\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"{material_name}\")) as Material;\n\nif (pipeTypeToDuplicate != null && material != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new level 'Level 2' at an elevation of 3.5 meters."}, {"role": "assistant", "content": "double elevation = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 2\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a shaft opening that passes through from {bottom_level_name} to {top_level_name}."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{bottom_level_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{top_level_name}\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    XYZ p1 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p2 = new XYZ(8 / 0.3048, 5 / 0.3048,0);\n    XYZ p3 = new XYZ(8 / 0.3048, 8 / 0.3048,0);\n    XYZ p4 = new XYZ(5 / 0.3048, 8 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Align the centerlines of two user-selected walls."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select the first wall (the one that will move)\");\nReference r2 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select the second wall (the reference)\");\n\nif (r1 != null && r2 != null)\n{\n    Wall w1 = doc.GetElement(r1) as Wall;\n    Wall w2 = doc.GetElement(r2) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (w1 != null && w2 != null && activeView != null)\n    {\n        LocationCurve lc1 = w1.Location as LocationCurve;\n        LocationCurve lc2 = w2.Location as LocationCurve;\n        if (lc1 != null && lc2 != null)\n        {\n            doc.Create.NewAlignment(activeView, lc1.Curve.Reference, lc2.Curve.Reference);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a DirectShape topography from a list of points."}, {"role": "assistant", "content": "List<XYZ> points = new List<XYZ>\n{\n    new XYZ(0,0,0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0)\n};\nTessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[0], points[1], points[2]}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[1], points[3], points[2]}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_Topography));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"Topography DirectShape\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Reload the Revit link '{link_name}'."}, {"role": "assistant", "content": "RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"{link_name}\");\n\nif (linkType != null)\n{\n    linkType.Reload();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplica la vista de planta '{view_name}' y nómbrala '{template_name}'."}, {"role": "assistant", "content": "ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"{view_name}\");\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{template_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un filtro de vista para ocultar muros demolidos."}, {"role": "assistant", "content": "Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p => p.Name.Contains(\"Demolished\") || p.Name.Contains(\"Demolición\"));\nView activeView = doc.ActiveView;\n\nif (demolishedPhase != null && activeView != null)\n{\n    ElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\n    FilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\n    ElementFilter filter = new ElementParameterFilter(rule);\n    ICollection<ElementId> categories = new List<ElementId>{{ new ElementId(BuiltInCategory.OST_Walls) }};\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Filtro Demolición\", categories, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una apertura de hueco vertical (shaft) desde el nivel base hasta el nivel más alto."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\nif (bottomLevel != null && topLevel != null)\n{\n    XYZ p1 = new XYZ(2 / 0.3048, 2 / 0.3048,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 2 / 0.3048,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(2 / 0.3048, 5 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un techo por contorno en el 'Nivel 2'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n    if(roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 / 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,0,0), new XYZ(20 / 0.3048,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,30 / 0.3048,0), new XYZ(0,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 / 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un conducto eléctrico de {diameter_inch} pulgada de diámetro."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 / 0.3048);\n        XYZ end = new XYZ(5 / 0.3048, 0, 3 / 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set({diameter_inch}/12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an 15.0-meter long foundation beam."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(15.0, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Footing);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all doors on level 'Basement' that belong to the '{family_name}' family."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Basement\");\nList<Element> doors = new List<Element>();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una región rellena con un patrón de '{pattern_name}'."}, {"role": "assistant", "content": "FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"{pattern_name}\"));\nView activeView = doc.ActiveView;\n\nif (regionType != null && activeView != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 0,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(0, 5 / 0.3048,0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera una cuadrícula de columnas {rows}x{cols} con separación de 8 metros."}, {"role": "assistant", "content": "FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<{rows}; i++)\n    {\n        for(int j=0; j<{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a global length parameter named '{param_name}' with a value of {value_m}m."}, {"role": "assistant", "content": "GlobalParameter gp = GlobalParameter.Create(doc, \"{param_name}\", SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits({value_m}, UnitTypeId.Meters)));\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a view filter to hide demolished walls."}, {"role": "assistant", "content": "Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p => p.Name.Contains(\"Demolished\") || p.Name.Contains(\"Demolición\"));\nView activeView = doc.ActiveView;\n\nif (demolishedPhase != null && activeView != null)\n{\n    ElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\n    FilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\n    ElementFilter filter = new ElementParameterFilter(rule);\n    ICollection<ElementId> categories = new List<ElementId>{ new ElementId(BuiltInCategory.OST_Walls) };\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Demolition Filter\", categories, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una región rellena con un patrón de '{pattern_name}'."}, {"role": "assistant", "content": "FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"{pattern_name}\"));\nView activeView = doc.ActiveView;\n\nif (regionType != null && activeView != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 0,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(0, 5 / 0.3048,0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change the type of all '{old_type_name}' windows to '{new_type_name}'."}, {"role": "assistant", "content": "FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"{new_type_name}\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"{old_type_name}\"));\n\nif (newType != null && oldType != null)\n{\n    if(!newType.IsActive) newType.Activate();\n    List<FamilyInstance> windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una cámara llamada '{view_name}' en la posición ({eye_x_m}, {eye_y_m}, {eye_z_m})."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        cameraView.Name = \"{view_name}\";\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits({eye_x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_z_m}, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las vistas de planta del proyecto."}, {"role": "assistant", "content": "List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new sheet with number '{sheet_number}' and name '{sheet_name}'."}, {"role": "assistant", "content": "FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"{sheet_name}\";\n        sheet.SheetNumber = \"{sheet_number}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las advertencias del proyecto."}, {"role": "assistant", "content": "IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Calcula la longitud total de todos los ductos de Suministro de Aire."}, {"role": "assistant", "content": "List<Duct> ducts = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctCurves).WhereElementIsNotElementType().Cast<Duct>().Where(d => d.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString() == \"SupplyAir\").ToList();\ndouble totalLength = 0.0;\nforeach (Duct d in ducts)\n{\n    totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add mullions to all grid lines of a curtain wall."}, {"role": "assistant", "content": "Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\n\nif (curtainWall != null && mullionType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    if (grid != null)\n    {\n        foreach (ElementId gridLineId in grid.GetVGridLineIds())\n        {\n            CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n            if(line != null) line.AddMullions(mullionType, false);\n        }\n        foreach (ElementId gridLineId in grid.GetUGridLineIds())\n        {\n            CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n            if(line != null) line.AddMullions(mullionType, false);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Insert a 15.0-meter truss between two points."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(15.0 / 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all subcategories from the Walls category."}, {"role": "assistant", "content": "Category wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategoryNameMap subcategories = wallCat.SubCategories;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new elevation view looking south."}, {"role": "assistant", "content": "ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null && activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 0);\n        if (aev != null)\n        {\n            aev.Name = \"South Elevation\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Activate all family symbols loaded in the project."}, {"role": "assistant", "content": "List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) \n    {\n        sym.Activate();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all walls from a linked model that intersect with a bounding box."}, {"role": "assistant", "content": "RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\nList<Element> linkedWalls = new List<Element>();\n\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    if (linkDoc != null)\n    {\n        BoundingBoxXYZ bbox = new BoundingBoxXYZ();\n        bbox.Min = new XYZ(0,0,0);\n        bbox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(bbox.Min, bbox.Max));\n        linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToList();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el tipo de una losa seleccionada a '{new_type_name}'."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"{new_type_name}\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the visibility of the 'Furniture' category to false in the active view."}, {"role": "assistant", "content": "Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nView activeView = doc.ActiveView;\n\nif (furnitureCat != null && activeView != null)\n{\n    activeView.SetCategoryHidden(furnitureCat.Id, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new door type named 'Double-Glass' and set its fire rating to '{fire_rating_value}'."}, {"role": "assistant", "content": "FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"Double-Glass\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating_value}\");\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 'Pilar 30x60' column at each grid intersection."}, {"role": "assistant", "content": "FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Pilar 30x60\");\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\nif (columnSymbol != null && level != null)\n{\n    if (!columnSymbol.IsActive) columnSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                if (results != null && !results.IsEmpty)\n                {\n                    foreach (IntersectionResult ir in results)\n                    {\n                        doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                    }\n                }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 'Nivel 2' level at 3.5m."}, {"role": "assistant", "content": "string levelName = \"Nivel 2\";\ndouble elev = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a wall on Basement from (5,5,3) to (15,5,3) with a height of 2.8 meters."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Basement\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(5, 5, 3);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters), 5, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new door type named 'Puerta 90x210' and set its fire rating to '{fire_rating}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Puerta 90x210\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"{fire_rating}\");\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Define a view filter named '{filter_name}' to hide detail lines."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection<ElementId> catsToHide = new List<ElementId>{new ElementId(BuiltInCategory.OST_Lines)};\n    ElementFilter filter = new ElementCategoryFilter(new ElementId(BuiltInCategory.OST_Lines));\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"{filter_name}\", catsToHide, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aplica un color rojo a todas las ventanas en la vista activa."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(255, 0, 0));\n    ICollection<ElementId> windows = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().ToElementIds();\n    \n    foreach (ElementId windowId in windows)\n    {\n        activeView.SetElementOverrides(windowId, ogs);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the solid geometry of a selected element."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element to get its geometry\");\n\nList<Solid> solids = new List<Solid>();\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        Options opt = new Options() {{ ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine }};\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if (geoElem != null)\n        {\n            solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all annotation families."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade refuerzo a una columna."}, {"role": "assistant", "content": "RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create {num_worksets} worksets for engineering disciplines."}, {"role": "assistant", "content": "List<string> worksetNames = new List<string> {{ \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rename all plan views to start with '{prefix}'."}, {"role": "assistant", "content": "string prefix = \"{prefix}\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an in-place family for a custom '{item_name}' using an extrusion."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new level named 'Planta Baja' at an elevation of 4.0 meters."}, {"role": "assistant", "content": "string levelName = \"Planta Baja\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rota un elemento seleccionado 30 grados sobre su eje Z."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, 30 * Math.PI / 180.0);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista de plano de plafón reflejado para el L01."}, {"role": "assistant", "content": "string levelName = \"L01\";\nstring viewName = \"Plano de Plafón L01\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 20cm '{type_name}' type and then create a wall of that type."}, {"role": "assistant", "content": "WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 20 / 100 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una familia 'in-situ' para un/a '{item_name}' personalizado usando una extrusión."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Synchronize the local model with the central model, adding the comment '{comment}'."}, {"role": "assistant", "content": "if (doc.IsWorkshared)\n{\n    TransactWithCentralOptions tco = new TransactWithCentralOptions();\n    SynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\n    swcOpts.Comment = \"{comment}\";\n    swcOpts.SaveLocalAfter = true;\n    doc.SynchronizeWithCentral(tco, swcOpts);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Ajusta todas las ventanas para que tengan la altura del antepecho a {sill_height_mm}mm."}, {"role": "assistant", "content": "double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Define un filtro de vista llamado '{filter_name}' para ocultar las líneas de detalle."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection<ElementId> catsToHide = new List<ElementId>{new ElementId(BuiltInCategory.OST_Lines)};\n    ElementFilter filter = new ElementCategoryFilter(new ElementId(BuiltInCategory.OST_Lines));\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"{filter_name}\", catsToHide, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén todas las instancias de la categoría Mobiliario."}, {"role": "assistant", "content": "List<Element> furnitureInstances = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Group a room schedule by Level."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Group Schedule\"))\n{\n    t.Start();\n    ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(vs => vs.Definition.CategoryId.IntegerValue == (int)BuiltInCategory.OST_Rooms);\n\n    if (schedule != null)\n    {\n        ScheduleDefinition def = schedule.Definition;\n        if (def != null)\n        {\n            SchedulableField schedulableField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ROOM_LEVEL_ID);\n            if (schedulableField != null)\n            {\n                ScheduleField field = def.AddField(schedulableField);\n                ScheduleSortGroupField sortGroupField = new ScheduleSortGroupField(field.FieldId);\n                sortGroupField.ShowHeader = true;\n                def.AddSortGroupField(sortGroupField);\n                def.IsItemized = false;\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rotate a selected element 45 degrees around its Z-axis."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, 45 * Math.PI / 180.0);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {text_size_mm}mm text type named '{type_name}' in green color."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nTextNoteType newType = null;\nif (defaultType != null)\n{\n    newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate the '{original_name}' wall type and name it '{new_name}'."}, {"role": "assistant", "content": "string originalName = \"{original_name}\";\nstring newName = \"{new_name}\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add a tag to the column closest to the origin."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n    LocationPoint lp = c.Location as LocationPoint;\n    return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n}).FirstOrDefault();\n\nif (activeView != null && column != null)\n{\n    LocationPoint loc = column.Location as LocationPoint;\n    if (loc != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find a wall by searching for the value '{mark_value}' in its Mark parameter."}, {"role": "assistant", "content": "string markValue = \"{mark_value}\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue);\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().WherePasses(filter).FirstOrDefault() as Wall;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new Level named 'Level 1' at an elevation of 4.0 meters."}, {"role": "assistant", "content": "double elevation = UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 1\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el tipo de una losa por uno que contenga 'Wood Joist 10\"'."}, {"role": "assistant", "content": "Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Wood Joist 10\"\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade refuerzo a una columna."}, {"role": "assistant", "content": "RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca todos los elementos seleccionados en el workset '{workset_name}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"{workset_name}\");\n        if(workset == null) workset = Workset.Create(doc, \"{workset_name}\");\n\n        if (selectedIds != null && selectedIds.Count > 0 && workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null && !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Export all sheets in a set to a single combined PDF."}, {"role": "assistant", "content": "ViewSheetSet sheetSet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheetSet)).FirstOrDefault() as ViewSheetSet;\n\nif (sheetSet != null)\n{\n    string folderPath = \"C:/RevitExports/\";\n    PDFExportOptions options = new PDFExportOptions();\n    options.Combine = true;\n    options.FileName = sheetSet.Name;\n    List<ElementId> sheetIds = sheetSet.Views.Cast<ViewSheet>().Select(s => s.Id).ToList();\n    doc.Export(folderPath, sheetIds, options);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a radial dimension for a curved wall."}, {"role": "assistant", "content": "Wall curvedWall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.Location is LocationCurve && (w.Location as LocationCurve).Curve is Arc);\nView activeView = doc.ActiveView;\n\nif (curvedWall != null && activeView != null)\n{\n    LocationCurve locCurve = curvedWall.Location as LocationCurve;\n    if (locCurve != null)\n    {\n        Arc arc = locCurve.Curve as Arc;\n        if (arc != null)\n        {\n            ReferenceArray refArray = new ReferenceArray();\n            refArray.Append(arc.Reference);\n            doc.Create.NewDimension(activeView, Line.CreateBound(arc.Center, arc.GetEndPoint(0)), refArray);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Establece la visibilidad de la categoría '{category_name}' en falso en la vista activa."}, {"role": "assistant", "content": "Category category = doc.Settings.Categories.get_Item(BuiltInCategory.{category_name});\nif (category != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(category.Id, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Calculate the total length of all Supply Air ducts."}, {"role": "assistant", "content": "List<Duct> ducts = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctCurves).WhereElementIsNotElementType().Cast<Duct>().Where(d => d.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString() == \"SupplyAir\").ToList();\ndouble totalLength = 0.0;\nforeach (Duct d in ducts)\n{\n    totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva revisión con descripción '{description}', emitida por '{issued_by}' en la fecha '{date}' y aplícala a la hoja activa."}, {"role": "assistant", "content": "Revision rev = Revision.Create(doc);\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (rev != null && sheet != null)\n{\n    rev.Description = \"{description}\";\n    rev.RevisionDate = \"{date}\";\n    rev.IssuedBy = \"{issued_by}\";\n    \n    ICollection<ElementId> revisions = sheet.GetAdditionalRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una rejilla de {num_horizontal} ejes horizontales y {num_vertical} verticales, espaciados 6 metros."}, {"role": "assistant", "content": "double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint count = {num_horizontal};\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ(({num_vertical} - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < {num_vertical}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Modela un plafón a 3.15 metros de altura en Azotea."}, {"role": "assistant", "content": "CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Azotea\") as Level;\n\nif (ceilingType != null && level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,0,0)));\n\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{{profile}}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters));\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo parámetro de proyecto compartido de texto llamado '{param_name}' para muros y puertas."}, {"role": "assistant", "content": "string originalFile = doc.Application.SharedParametersFilename;\nstring tempFile = System.IO.Path.GetTempFileName() + \".txt\";\nusing (System.IO.File.Create(tempFile)) { }\ndoc.Application.SharedParametersFilename = tempFile;\n\ntry\n{\n    DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n    if (defFile != null)\n    {\n        DefinitionGroup group = defFile.Groups.Create(\"General\");\n        if (group != null)\n        {\n            ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(\"{param_name}\", ParameterType.Text);\n            Definition definition = group.Definitions.Create(options);\n            if (definition != null)\n            {\n                CategorySet categories = doc.Application.Create.NewCategorySet();\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                doc.ParameterBindings.Insert(definition, binding, Autodesk.Revit.DB.BuiltInParameterGroup.PG_DATA);\n            }\n        }\n    }\n}\nfinally\n{\n    doc.Application.SharedParametersFilename = originalFile;\n    System.IO.File.Delete(tempFile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera un equipo eléctrico en X=7,Y=4."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(level != null && panelSymbol != null)\n{\n    if(!panelSymbol.IsActive) panelSymbol.Activate();\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Display a dialog box with 'Yes', 'No', and 'Cancel' options."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new 3D view named '{view_name}' oriented from point ({eye_x_m},{eye_y_m},{eye_z_m}) looking at the origin."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v=>v.ViewFamily==ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    if (view != null)\n    {\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits({eye_x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_z_m}, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D vo = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        view.SetOrientation(vo);\n        view.Name = \"{view_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rename the active view to '{view_name}'."}, {"role": "assistant", "content": "string newName = \"{view_name}\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el nombre de la vista activa a '{view_name}'."}, {"role": "assistant", "content": "string newName = \"{view_name}\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén la geometría sólida de un elemento seleccionado."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para obtener su geometría\");\nif(pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if(elem != null)\n    {\n        Options opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if(geoElem != null)\n        {\n            List<Solid> solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a structural column at position X=2, Y=3."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Alinea las líneas de centro de dos muros seleccionados por el usuario."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona el primer muro (el que se moverá)\");\nReference r2 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona el segundo muro (el de referencia)\");\n\nif (r1 != null && r2 != null)\n{\n    Wall w1 = doc.GetElement(r1) as Wall;\n    Wall w2 = doc.GetElement(r2) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (w1 != null && w2 != null && activeView != null)\n    {\n        LocationCurve lc1 = w1.Location as LocationCurve;\n        LocationCurve lc2 = w2.Location as LocationCurve;\n        if (lc1 != null && lc2 != null)\n        {\n            doc.Create.NewAlignment(activeView, lc1.Curve.Reference, lc2.Curve.Reference);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Insert a window 1.0m wide and 3.0m high into a wall."}, {"role": "assistant", "content": "FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = $\"Window {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 'Generic - 200mm' wall on 'L01' from (5,5) to (15,5)."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"L01\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Generic - 200mm\") as WallType;\nXYZ startPoint = new XYZ(5, 5, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nWall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a vertical shaft opening from the base level to the top level."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\nif (bottomLevel != null && topLevel != null)\n{\n    XYZ p1 = new XYZ(2 / 0.3048, 2 / 0.3048,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 2 / 0.3048,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(2 / 0.3048, 5 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate the '{view_name}' view as a dependent view."}, {"role": "assistant", "content": "ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"{view_name}\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a DirectShape with a {size_m}x{size_m}x{size_m} meter box shape named '{shape_name}'."}, {"role": "assistant", "content": "TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits({size_m}, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"{shape_name}\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las vistas de sección en el proyecto."}, {"role": "assistant", "content": "List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the visibility of the '{category_name}' category to false in the active view."}, {"role": "assistant", "content": "Category category = doc.Settings.Categories.get_Item(BuiltInCategory.{category_name});\nif (category != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(category.Id, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a section view named '{view_name}'."}, {"role": "assistant", "content": "ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-1, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    \n    if (sectionView != null)\n    {\n        sectionView.Name = \"{view_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una escalera entre {level1_name} y {level2_name}."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{level1_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{level2_name}\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    // TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    // Stairs creation requires using the StairsEditScope class.\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea {num_worksets} worksets de arquitectura."}, {"role": "assistant", "content": "List<string> worksetNames = new List<string> {{ \"TAD_ARQ_MAM\", \"TAD_ARQ_ACA\", \"TAD_ARQ_PLA\", \"TAD_ARQ_PSO\", \"TAD_ARQ_HRE\", \"TAD_ARQ_ALU\", \"TAD_ARQ_CAR\", \"TAD_ARQ_MOB\", \"TAD_ARQ_PLO\", \"TAD_ARQ_EXT\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place lighting posts every 6m along a 100m path."}, {"role": "assistant", "content": "FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Exporta una lista de todas las advertencias del proyecto a un archivo de texto en el escritorio."}, {"role": "assistant", "content": "string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nstring filePath = System.IO.Path.Combine(desktopPath, \"RevitWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\nSystem.IO.File.WriteAllLines(filePath, warningDescriptions);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén todas las familias de puertas cargadas en el proyecto."}, {"role": "assistant", "content": "List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an assembly from the selected elements."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"New Assembly\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the host element of the first window found."}, {"role": "assistant", "content": "FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new door type named 'Puerta 90x210' and set its fire rating to '{fire_rating}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Puerta 90x210\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"{fire_rating}\");\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Model a cable tray between points ({p1x_m}, {p1y_m}, {p1z_m}) and ({p2x_m}, {p2y_m}, {p2z_m})."}, {"role": "assistant", "content": "CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (trayType != null && level != null)\n{\n    XYZ p1 = new XYZ(UnitUtils.ConvertToInternalUnits({p1x_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p1y_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p1z_m}, UnitTypeId.Meters)); \n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({p2x_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p2y_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p2z_m}, UnitTypeId.Meters));\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a beam system on a selected floor slab."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva vista de alzado mirando al sur."}, {"role": "assistant", "content": "string viewName = \"Alzado Sur (Nuevo)\";\nViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20, 0), 100);\nView aev = marker.CreateElevation(doc, doc.ActiveView.Id, 0);\naev.Name = viewName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una cimentación de viga de 7.8 metros de largo."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(7.8, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Footing);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el tipo de todas las ventanas de '{old_type_name}' a '{new_type_name}'."}, {"role": "assistant", "content": "FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"{new_type_name}\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"{old_type_name}\"));\n\nif (newType != null && oldType != null)\n{\n    if(!newType.IsActive) newType.Activate();\n    List<FamilyInstance> windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an assembly from the selected elements."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"New Assembly\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un tipo de muro '{type_name}' de 10cm y luego crea un muro de ese tipo."}, {"role": "assistant", "content": "WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 10 / 100 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un espacio MEP para cada habitación en el nivel 'Level 2'."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\nif (level != null)\n{\n    List<Room> roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level.Id)).Cast<Room>().ToList();\n    foreach(Room room in roomsOnLevel)\n    {\n       Space.Create(doc, room, null);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Move the project base point {distance_m} meters to the north."}, {"role": "assistant", "content": "BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\nif (projectBasePoint != null)\n{\n    XYZ translation = new XYZ(0, {distance_m} / 0.3048, 0);\n    ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una etiqueta de material en una cara de muro."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Face, \"Selecciona una cara para etiquetar\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Selecciona la ubicación de la etiqueta\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls that have no base level assigned."}, {"role": "assistant", "content": "ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva tabla de planificación para ventanas que incluya Marca de Tipo, Ancho y Alto."}, {"role": "assistant", "content": "string scheduleName = \"Tabla de Ventanas\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add a horizontal reference plane named '{plane_name}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"{plane_name}\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Inserta un terminal de aire en el extremo de un conducto."}, {"role": "assistant", "content": "Duct duct = new FilteredElementCollector(doc).OfClass(typeof(Duct)).FirstOrDefault() as Duct;\nFamilySymbol terminalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctTerminal).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (duct != null && terminalSymbol != null)\n{\n    if(!terminalSymbol.IsActive) terminalSymbol.Activate();\n    LocationCurve locCurve = duct.Location as LocationCurve;\n    if (locCurve != null)\n    {\n        Connector endConnector = duct.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault(c => c.Origin.IsAlmostEqualTo(locCurve.Curve.GetEndPoint(1)));\n        if (endConnector != null)\n        {\n            doc.Create.NewFamilyInstance(endConnector.Origin, terminalSymbol, endConnector);\n        }\n    }\n}"}]}