{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find the structural framing element with the mark '{mark_value}'."}, {"role": "assistant", "content": "string markValue = \"{mark_value}\";\nElement framingElement = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_StructuralFraming)\n    .WhereElementIsNotElementType()\n    .FirstOrDefault(e => {\n        Parameter p = e.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        return p != null && p.AsString() == markValue;\n    });"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls with an empty 'Mark' parameter and set it to '{mark_value}'."}, {"role": "assistant", "content": "List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"{mark_value}\");\n  }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea {num_worksets} worksets para las disciplinas de ingeniería."}, {"role": "assistant", "content": "List<string> worksetNames = new List<string> {{ \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {text_size_mm}mm text type in green color named '{type_name}'."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una apertura de hueco vertical (shaft) desde el nivel base hasta el nivel más alto."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\nif (bottomLevel != null && topLevel != null)\n{\n    XYZ p1 = new XYZ(2 / 0.3048, 2 / 0.3048,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 2 / 0.3048,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(2 / 0.3048, 5 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change the wall type of an existing wall to one containing '{type_name_substring}'."}, {"role": "assistant", "content": "Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(x => x.Name.Contains(\"{type_name_substring}\"));\n\nif (wallToChange != null && newType != null)\n{\n    wallToChange.ChangeTypeId(newType.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new revision with description '{description}', issued by '{issued_by}' on '{date}', and apply it to the active sheet."}, {"role": "assistant", "content": "Revision rev = Revision.Create(doc);\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (rev != null && sheet != null)\n{\n    rev.Description = \"{description}\";\n    rev.RevisionDate = \"{date}\";\n    rev.IssuedBy = \"{issued_by}\";\n    \n    ICollection<ElementId> revisions = sheet.GetAdditionalRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {text_size_mm}mm text type in green color named '{type_name}'."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un muro en Planta Baja que vaya de (5,5,3) a (15,5,3) con una altura de 2.8 metros."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Planta Baja\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(5, 5, 3);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters), 5, 3);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new linear dimension type named '{type_name}' with blue text and {text_size_mm}mm size."}, {"role": "assistant", "content": "DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\nif (linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"{type_name}\") as DimensionType;\n    if (newDimType != null)\n    {\n        Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n        Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {title_block_size} sheet and place a legend on it."}, {"role": "assistant", "content": "FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"{title_block_size}\"));\nView legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\nif (titleBlock != null && legendView != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (newSheet != null)\n    {\n        BoundingBoxUV sheetBox = newSheet.Outline;\n        UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n        XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n        Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a structural foundation slab 25cm thick named '{type_name}'."}, {"role": "assistant", "content": "Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nFloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\nif(slabTypeToDuplicate != null && foundationLevel != null)\n{\n    string newTypeName = \"{type_name}\";\n    FloorType newSlabType = slabTypeToDuplicate.Duplicate(newTypeName) as FloorType;\n    if(newSlabType != null)\n    {\n        CompoundStructure cs = newSlabType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), (25 * 10) / 304.8);\n            newSlabType.SetCompoundStructure(cs);\n            XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n            CurveLoop profile = new CurveLoop();\n            profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n            doc.Create.NewFloor(new List<CurveLoop>{profile}, newSlabType, foundationLevel, true);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Hide all annotation categories in the active view."}, {"role": "assistant", "content": "Categories categories = doc.Settings.Categories;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    foreach(Category cat in categories)\n    {\n        if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n        {\n             activeView.SetCategoryHidden(cat.Id, true);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Oculta todos los elementos de anotación en la vista activa."}, {"role": "assistant", "content": "if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un muro en Level 1 de (0,0,0) a (10,0,0) con 2.8m de alto."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de puerta llamado 'M_Single-Flush' y establece su resistencia al fuego a '{fire_rating_value}'."}, {"role": "assistant", "content": "FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"M_Single-Flush\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating_value}\");\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplica el {level_to_duplicate} con un desfase de {offset_m}m y llámalo '{new_level_name}'."}, {"role": "assistant", "content": "string newLevelName = \"{new_level_name}\";\nLevel levelToDup = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{level_to_duplicate}\") as Level;\n\nif (levelToDup != null)\n{\n    double newElevation = levelToDup.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 'Nivel 2' level at 3.5m."}, {"role": "assistant", "content": "string levelName = \"Nivel 2\";\ndouble elev = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea {num_grids} ejes horizontales separados por {separation_m} metros."}, {"role": "assistant", "content": "double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i < {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplica el nivel '{original_level_name}' con un desfase de {offset_m}m y llámalo '{new_level_name}'."}, {"role": "assistant", "content": "Level originalLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{original_level_name}\") as Level;\n\nif (originalLevel != null)\n{\n    double newElevation = originalLevel.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = \"{new_level_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Export each schedule to an individual CSV file."}, {"role": "assistant", "content": "string exportPath = \"C:/RevitExports/\";\nList<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => !vs.IsTemplate).ToList();\nViewScheduleExportOptions options = new ViewScheduleExportOptions();\noptions.FieldDelimiter = \",\";\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Export(exportPath, schedule.Name + \".csv\", options);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aplica el estilo visual 'Rayos X' a la vista 3D activa."}, {"role": "assistant", "content": "View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el nivel de detalle de la vista actual a '{detail_level_enum}'."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.{detail_level_enum};\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Oculta todos los muros que sean más cortos de 10.2 metros."}, {"role": "assistant", "content": "double lengthThreshold = UnitUtils.ConvertToInternalUnits(10.2, UnitTypeId.Meters);\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nList<ElementId> shortWallIds = new List<ElementId>();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    foreach(Wall wall in walls)\n    {\n        Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n        if(lengthParam != null && lengthParam.HasValue && lengthParam.AsDouble() < lengthThreshold)\n        {\n            shortWallIds.Add(wall.Id);\n        }\n    }\n    if (shortWallIds.Count > 0)\n    {\n        activeView.HideElements(shortWallIds);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las puertas del nivel 'Basement' que sean de la familia '{family_name}'."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Basement\");\nList<Element> doors = new List<Element>();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Load a DWG link from '{file_path}', preserving its colors."}, {"role": "assistant", "content": "DWGImportOptions opts = new DWGImportOptions();\nopts.ColorMode = ImportColorMode.Preserved;\nElementId linkId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(\"{file_path}\", opts, activeView, out linkId);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las vistas que no tienen una plantilla de vista asignada."}, {"role": "assistant", "content": "List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId.Equals(ElementId.InvalidElementId)).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add a horizontal reference plane named '{plane_name}'."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    XYZ bubbleEnd = new XYZ(0, 10, 0);\n    XYZ freeEnd = new XYZ(10, 10, 0);\n    XYZ cutVec = XYZ.BasisZ;\n    ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n    if (rp != null)\n    {\n        rp.Name = \"{plane_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nivel intermedio llamado '{new_level_name}' a mitad de camino entre el {level1_name} y el {level2_name}."}, {"role": "assistant", "content": "string newLevelName = \"{new_level_name}\";\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"{level1_name}\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"{level2_name}\");\nif (lvl1 != null && lvl2 != null)\n{\ndouble midElevation = (lvl1.ProjectElevation + lvl2.ProjectElevation) / 2.0;\nLevel newLevel = Level.Create(doc, midElevation);\n    if(newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place a piece of furniture at coordinates (7,4)."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    if(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0), furnitureSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de puerta llamado 'Double-Glass' y establece su resistencia al fuego a '{fire_rating_value}'."}, {"role": "assistant", "content": "FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"Double-Glass\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating_value}\");\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista 3D por defecto."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Mueve el punto base del proyecto {distance_m} metros hacia el norte."}, {"role": "assistant", "content": "BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\nif (projectBasePoint != null)\n{\n    XYZ translation = new XYZ(0, {distance_m} / 0.3048, 0);\n    ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a Reflected Ceiling Plan view for First Floor."}, {"role": "assistant", "content": "string levelName = \"First Floor\";\nstring viewName = \"First Floor Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un techo por extrusión con un perfil en arco."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null && roofType != null && doc.ActiveView != null)\n{\n    CurveArray profile = new CurveArray();\n    profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    if(refPlane != null)\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade un plano de referencia horizontal llamado '{plane_name}'."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    XYZ bubbleEnd = new XYZ(0, 10, 0);\n    XYZ freeEnd = new XYZ(10, 10, 0);\n    XYZ cutVec = XYZ.BasisZ;\n    ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n    if (rp != null)\n    {\n        rp.Name = \"{plane_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aplica un color rojo a todas las ventanas en la vista activa."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(255, 0, 0));\n    ICollection<ElementId> windows = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().ToElementIds();\n    \n    foreach (ElementId windowId in windows)\n    {\n        activeView.SetElementOverrides(windowId, ogs);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a structural column at position X=7, Y=4."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Exporta el modelo a formato IFC4 para coordinación."}, {"role": "assistant", "content": "string folderPath = \"C:/RevitExports/\";\nstring fileName = doc.Title + \"-Coordination.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4;\ndoc.Export(folderPath, fileName, options);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las vistas de sección en el proyecto."}, {"role": "assistant", "content": "List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Pin the selected element so it cannot be moved."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count > 0)\n{\n    Element elementToPin = doc.GetElement(selectedIds.First());\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a structural foundation slab 30cm thick named '{type_name}'."}, {"role": "assistant", "content": "Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nFloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\nif(slabTypeToDuplicate != null && foundationLevel != null)\n{\n    string newTypeName = \"{type_name}\";\n    FloorType newSlabType = slabTypeToDuplicate.Duplicate(newTypeName) as FloorType;\n    if(newSlabType != null)\n    {\n        CompoundStructure cs = newSlabType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), (30 * 10) / 304.8);\n            newSlabType.SetCompoundStructure(cs);\n            XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n            CurveLoop profile = new CurveLoop();\n            profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n            doc.Create.NewFloor(new List<CurveLoop>{profile}, newSlabType, foundationLevel, true);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all material names."}, {"role": "assistant", "content": "List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Modifica el tipo de muro de un muro existente a uno que contenga '{type_name_substring}'."}, {"role": "assistant", "content": "Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(x => x.Name.Contains(\"{type_name_substring}\"));\n\nif (wallToChange != null && newType != null)\n{\n    wallToChange.ChangeTypeId(newType.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Vincula un archivo DWG como referencia en la vista activa."}, {"role": "assistant", "content": "string filePath = \"C:/CAD_Files/Base_Plan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.ColorMode = ImportColorMode.Preserved;\nElementId linkedFileId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(filePath, options, activeView, out linkedFileId);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new level named 'Planta Baja' at an elevation of 4.0 meters."}, {"role": "assistant", "content": "string levelName = \"Planta Baja\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Establece el parámetro 'Comentarios' de todas las puertas del Nivel 2 a 'REVISAR'."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"REVISAR\");\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all annotation families and count how many there are."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\nint count = annotationFamilies.Count;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all walls from a linked model that intersect with a bounding box."}, {"role": "assistant", "content": "RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\nList<Element> linkedWalls = new List<Element>();\n\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    if (linkDoc != null)\n    {\n        BoundingBoxXYZ bbox = new BoundingBoxXYZ();\n        bbox.Min = new XYZ(0,0,0);\n        bbox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(bbox.Min, bbox.Max));\n        linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToList();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Import a topography from a CSV file."}, {"role": "assistant", "content": "// CSV file reading is not directly supported by a single API call.\n// You would typically read the file line by line, parse the XYZ coordinates,\n// and then use the TopographySurface.Create method with a list of points.\n// As a placeholder, here's how to create a simple topography from a list of points:\nIList<XYZ> points = new List<XYZ>();\npoints.Add(new XYZ(0, 0, 0));\npoints.Add(new XYZ(10, 0, 0));\npoints.Add(new XYZ(0, 10, 0));\npoints.Add(new XYZ(10, 10, 5));\nTopographySurface.Create(doc, points);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an electrical circuit connecting light fixtures to a panel."}, {"role": "assistant", "content": "FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nList<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\nif (panel != null && fixtureIds.Count > 0)\n{\n    ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n    if(electricalSystem != null)\n    {\n        electricalSystem.SelectPanel(panel);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva tabla de planificación para ventanas que incluya Marca de Tipo, Ancho y Alto."}, {"role": "assistant", "content": "string scheduleName = \"Tabla de Ventanas\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new schedule for Structural Columns."}, {"role": "assistant", "content": "string scheduleName = \"Structural Column Schedule\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add reinforcement to a column."}, {"role": "assistant", "content": "RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nivel intermedio llamado '{new_level_name}' a mitad de camino entre el {level1_name} y el {level2_name}."}, {"role": "assistant", "content": "string newLevelName = \"{new_level_name}\";\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"{level1_name}\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"{level2_name}\");\nif (lvl1 != null && lvl2 != null)\n{\ndouble midElevation = (lvl1.ProjectElevation + lvl2.ProjectElevation) / 2.0;\nLevel newLevel = Level.Create(doc, midElevation);\n    if(newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new elevation view looking north named \"{view_name}\"."}, {"role": "assistant", "content": "ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null && activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 2);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca un mueble en las coordenadas (7,4)."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    if(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0), furnitureSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todos los muros que no tienen nivel base asignado."}, {"role": "assistant", "content": "ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade el prefijo '{prefix}' a todas las vistas de plano."}, {"role": "assistant", "content": "string prefix = \"{prefix}\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if (view != null)\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Generate a rectangular floor of 12.5x6.2 meters."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(12.5, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(6.2, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> {{ loop }}, floorType.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén el espacio MEP asociado a la habitación '{room_name}'."}, {"role": "assistant", "content": "Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"{room_name}\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all walls on Basement that are structural."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Basement\") as Level;\nif (level != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> {{ levelFilter, categoryFilter, structuralFilter }});\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new linear dimension type named '{type_name}' with blue text and {text_size_mm}mm size."}, {"role": "assistant", "content": "DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\nif (linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"{type_name}\") as DimensionType;\n    if (newDimType != null)\n    {\n        Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n        Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Model a railing on an existing staircase."}, {"role": "assistant", "content": "RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de muro de 10cm llamado 'Muro Básico 15cm'."}, {"role": "assistant", "content": "string newTypeName = \"Muro Básico 15cm\";\nWallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(wallTypeToDuplicate != null)\n{\n    WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n            cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(10/100.0, UnitTypeId.Meters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva cota de nivel llamada 'L01' a una elevación de 4.0 metros."}, {"role": "assistant", "content": "double elevation = UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nnewLevel.Name = \"L01\";"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Ajusta todas las ventanas para que tengan la altura del antepecho a {sill_height_mm}mm."}, {"role": "assistant", "content": "double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Verifica si una tubería está conectada en ambos extremos."}, {"role": "assistant", "content": "Pipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nbool isFullyConnected = false;\n\nif (pipe != null)\n{\n    isFullyConnected = pipe.ConnectorManager.UnusedConnectors.IsEmpty;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {text_size_mm}mm text type in blue color."}, {"role": "assistant", "content": "string newTypeName = \"{text_size_mm}mm Blue\";\nTextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n        \n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly) lineColorParam.Set(255);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el nombre de todas las vistas de planta para que empiecen con '{prefix}'."}, {"role": "assistant", "content": "string prefix = \"{prefix}\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a wall on Basement from (5,5,3) to (15,5,3) with a height of 3.0 meters."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Basement\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(5, 5, 3);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una ventana de 0.9x3.15 metros en la pared más cercana."}, {"role": "assistant", "content": "FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = $\"Window {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo nivel llamado 'Planta Baja' a una elevación de 3.5 metros."}, {"role": "assistant", "content": "string levelName = \"Planta Baja\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add a tag to the column closest to the origin."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n    LocationPoint lp = c.Location as LocationPoint;\n    return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n}).FirstOrDefault();\n\nif (activeView != null && column != null)\n{\n    LocationPoint loc = column.Location as LocationPoint;\n    if (loc != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un workset llamado '{workset_name}'."}, {"role": "assistant", "content": "Workset.Create(doc, \"{workset_name}\");"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el tipo de todos los muros seleccionados a 'Generic - 200mm'."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Generic - 200mm\");\nif(targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null)\n        {\n            wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Desune la geometría de dos elementos dados."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona el primer elemento\");\nReference ref2 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona el segundo elemento\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a filled region with a '{pattern_name}' pattern."}, {"role": "assistant", "content": "FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"{pattern_name}\"));\nView activeView = doc.ActiveView;\n\nif (regionType != null && activeView != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 0,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(0, 5 / 0.3048,0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Copy all elements from {source_level} to {target_level}."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{source_level}\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{target_level}\") as Level;\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(elementsToCopy.Any())\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade una línea de rejilla horizontal a un muro cortina a 3.15 metros de altura."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) / 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, 3.15 / 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a curtain wall 0.9 meters wide and 2.8 meters high."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters), 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Insert a window 1.0m wide and 3.0m high into a wall."}, {"role": "assistant", "content": "FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = $\"Window {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una viga estructural entre (5,5,3) y (15,5,3) en el First Floor."}, {"role": "assistant", "content": "FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"First Floor\") as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(5, 5, 3);\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Move the selected elements {distance_m} meters up."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an assembly from the selected elements."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"New Assembly\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplica la vista de planta '{view_name}' y nómbrala '{template_name}'."}, {"role": "assistant", "content": "ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"{view_name}\");\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{template_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the 'Mark' parameter of all selected walls to '{mark_value}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) \n                {\n                    markParam.Set(\"{mark_value}\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista 3D por defecto."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un DirectShape esférico con un radio de {radius_m} metros."}, {"role": "assistant", "content": "double radius = {radius_m} / 0.3048;\nList<GeometryObject> solids = new List<GeometryObject>();\nFrame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\nArc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\nLine line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\nCurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\nSolid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\nsolids.Add(sphere);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(solids);\n    ds.Name = \"Esfera DirectShape\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Define a view filter named '{filter_name}' to hide detail lines."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection<ElementId> catsToHide = new List<ElementId>{new ElementId(BuiltInCategory.OST_Lines)};\n    ElementFilter filter = new ElementCategoryFilter(new ElementId(BuiltInCategory.OST_Lines));\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"{filter_name}\", catsToHide, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén el elemento anfitrión de la primera ventana que encuentres."}, {"role": "assistant", "content": "FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new door type named 'Puerta 90x210' and set its fire rating to '{fire_rating}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Puerta 90x210\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"{fire_rating}\");\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aplica aislamiento térmico de {thickness_mm}mm a todas las tuberías de agua caliente."}, {"role": "assistant", "content": "PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an MEP space for each room on 'Roof'."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Roof\");\n\nif (level != null)\n{\n    List<Room> roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level.Id)).Cast<Room>().ToList();\n    foreach(Room room in roomsOnLevel)\n    {\n       Space.Create(doc, room, null);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una losa de cimentación estructural de 25cm de espesor llamada '{type_name}'."}, {"role": "assistant", "content": "Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nFloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\nif(slabTypeToDuplicate != null && foundationLevel != null)\n{\n    FloorType newSlabType = slabTypeToDuplicate.Duplicate(\"{type_name}\") as FloorType;\n    if(newSlabType != null)\n    {\n        CompoundStructure cs = newSlabType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), (25 * 10) / 304.8);\n            newSlabType.SetCompoundStructure(cs);\n            XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n            CurveLoop profile = new CurveLoop();\n            profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n            Floor.Create(doc, new List<CurveLoop>{profile}, newSlabType.Id, foundationLevel.Id);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create {num_grids} horizontal grids spaced {separation_m} meters apart."}, {"role": "assistant", "content": "double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i < {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dibuja una región rellena con patrón diagonal."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n    if (activeView != null && fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(new XYZ(0, 0, 0), new XYZ(5, 0, 0)));\n                profile.Append(Line.CreateBound(new XYZ(5, 0, 0), new XYZ(5, 5, 0)));\n                profile.Append(Line.CreateBound(new XYZ(5, 5, 0), new XYZ(0, 5, 0)));\n                profile.Append(Line.CreateBound(new XYZ(0, 5, 0), new XYZ(0, 0, 0)));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop> { profile });\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un muro cortina de 0.9 metros de ancho y 3.15 metros de alto."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters), 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera un equipo eléctrico en X=2,Y=3."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(level != null && panelSymbol != null)\n{\n    if(!panelSymbol.IsActive) panelSymbol.Activate();\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén todos los muros del Nivel 1 que son estructurales."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> {{ levelFilter, categoryFilter, structuralFilter }});\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Apply a red color to all windows in the active view."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(255, 0, 0));\n    ICollection<ElementId> windows = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().ToElementIds();\n    \n    foreach (ElementId windowId in windows)\n    {\n        activeView.SetElementOverrides(windowId, ogs);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Pinta la cara interior de los muros exteriores con '{material_name}'."}, {"role": "assistant", "content": "using(Transaction t = new Transaction(doc, \"Paint Walls\"))\n{\n    t.Start();\n    Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"{material_name}\");\n    var exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior).ToList();\n    if(paintMaterial != null)\n    {\n        foreach (Wall w in exteriorWalls)\n        {\n            IList<Reference> interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n            if(interiorFaceRefs.Count > 0)\n            {\n                Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n                if (interiorFace != null)\n                {\n                    doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una apertura de hueco vertical (shaft) desde el nivel base hasta el nivel más alto."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\nif (bottomLevel != null && topLevel != null)\n{\n    XYZ p1 = new XYZ(2 / 0.3048, 2 / 0.3048,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 2 / 0.3048,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(2 / 0.3048, 5 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rename all plan views to start with '{prefix}'."}, {"role": "assistant", "content": "string prefix = \"{prefix}\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Oculta todos los elementos de anotación en la vista activa."}, {"role": "assistant", "content": "if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Insert a window 1.0m wide and 3.0m high into a wall."}, {"role": "assistant", "content": "FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = $\"Window {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {sheet_size} sheet and place a legend on it."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"{sheet_size}\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Generate a rectangular floor of 12.5x6.2 meters."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(12.5, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(6.2, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> {{ loop }}, floorType.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén la geometría sólida de un elemento seleccionado."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para obtener su geometría\");\n\nList<Solid> solids = new List<Solid>();\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        Options opt = new Options() {{ ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine }};\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if (geoElem != null)\n        {\n            solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a roof by footprint on the 'Azotea'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Azotea\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 / 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,0,0), new XYZ(20 / 0.3048,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,30 / 0.3048,0), new XYZ(0,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 / 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un ensamblaje a partir de los elementos seleccionados."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"Nuevo Ensamblaje\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera un reporte con el área de todas las habitaciones del proyecto."}, {"role": "assistant", "content": "List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate the '{view_name}' plan view and name it '{template_name}'."}, {"role": "assistant", "content": "ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"{view_name}\");\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{template_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Etiqueta todas las habitaciones en la vista activa."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n    foreach(Room room in rooms)\n    {\n        LocationPoint loc = room.Location as LocationPoint;\n        if(loc != null)\n        {\n            doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(loc.Point.X, loc.Point.Y), activeView.Id);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Export a list of all project warnings to a text file on the desktop."}, {"role": "assistant", "content": "string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nstring filePath = System.IO.Path.Combine(desktopPath, \"RevitWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\nSystem.IO.File.WriteAllLines(filePath, warningDescriptions);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an extrusion roof with an arc profile."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null && roofType != null && doc.ActiveView != null)\n{\n    CurveArray profile = new CurveArray();\n    profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    if(refPlane != null)\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un ensamblaje a partir de los elementos seleccionados."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"Nuevo Ensamblaje\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de muro '{type_name}' con un grosor de 25cm."}, {"role": "assistant", "content": "WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, (25 * 10) / 304.8);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the IDs of all 3D views starting with '{prefix}' for export."}, {"role": "assistant", "content": "List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"{prefix}\") && !v.IsTemplate).Select(v => v.Id).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Conecta dos bandejas de cables con un codo."}, {"role": "assistant", "content": "List<CableTray> trays = new FilteredElementCollector(doc).OfClass(typeof(CableTray)).Cast<CableTray>().ToList();\n\nif (trays.Count >= 2)\n{\n    Connector c1 = trays[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = trays[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    \n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewUnionFitting(c1, c2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a floor with a circular hole of radius {radius_m}m in the center."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    XYZ p1 = new XYZ(-10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p2 = new XYZ(10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p3 = new XYZ(10 / 0.3048, 10 / 0.3048, 0);\n    XYZ p4 = new XYZ(-10 / 0.3048, 10 / 0.3048, 0);\n    CurveLoop outerLoop = new CurveLoop();\n    outerLoop.Append(Line.CreateBound(p1, p2));\n    outerLoop.Append(Line.CreateBound(p2, p3));\n    outerLoop.Append(Line.CreateBound(p3, p4));\n    outerLoop.Append(Line.CreateBound(p4, p1));\n\n    XYZ center = XYZ.Zero;\n    double radius = {radius_m} / 0.3048;\n    CurveLoop innerLoop = new CurveLoop();\n    innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n    innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n    Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca postes de iluminación cada 8m en un camino de 100m."}, {"role": "assistant", "content": "FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Selecciona todos los muros del 'Level 2' y cambia su comentario a '{comment}'."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nList<Wall> wallsOnLevel = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level.Id).Cast<Wall>().ToList();\nforeach(Wall wall in wallsOnLevel)\n{\n    wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(\"{comment}\");\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the 'Mark' parameter of all selected walls to '{mark_value}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) \n                {\n                    markParam.Set(\"{mark_value}\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create {num_worksets} architectural worksets."}, {"role": "assistant", "content": "List<string> worksetNames = new List<string> {{ \"TAD_ARQ_WALLS\", \"TAD_ARQ_FINISHES\", \"TAD_ARQ_CEILINGS\", \"TAD_ARQ_FLOORS\", \"TAD_ARQ_RAILINGS\", \"TAD_ARQ_WINDOWS\", \"TAD_ARQ_CARPENTRY\", \"TAD_ARQ_FURNITURE\", \"TAD_ARQ_PLUMBING\", \"TAD_ARQ_EXTERIOR\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Localiza todos los muros con un parámetro 'Marca' vacío y asigna '{mark_value}'."}, {"role": "assistant", "content": "List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"{mark_value}\");\n  }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Establece el parámetro 'Comentarios' de todas las puertas del Nivel 2 a 'REVISAR'."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"REVISAR\");\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un tipo de muro '{type_name}' de 30cm y luego crea un muro de ese tipo."}, {"role": "assistant", "content": "WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 30 / 100 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Given a wall, get its materials and their volumes."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select a wall\");\n\nDictionary<string, double> materialVolumes = new Dictionary<string, double>();\nif (pickedRef != null)\n{\n    Wall wall = doc.GetElement(pickedRef) as Wall;\n    if (wall != null)\n    {\n        Parameter areaParam = wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED);\n        if (areaParam != null && areaParam.HasValue)\n        {\n            double wallArea = areaParam.AsDouble();\n            WallType wallType = wall.WallType;\n            if (wallType != null)\n            {\n                CompoundStructure cs = wallType.GetCompoundStructure();\n                if (cs != null)\n                {\n                    foreach(CompoundStructureLayer layer in cs.GetLayers())\n                    {\n                        Material material = doc.GetElement(layer.MaterialId) as Material;\n                        if(material != null)\n                        {\n                            double volume = layer.Width * wallArea;\n                            materialVolumes[material.Name] = volume;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén los IDs de todas las vistas 3D que empiezan con '{prefix}' para exportación."}, {"role": "assistant", "content": "List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"{prefix}\") && !v.IsTemplate).Select(v => v.Id).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una rejilla de {num_horizontal} ejes horizontales y {num_vertical} verticales, espaciados 8 metros."}, {"role": "assistant", "content": "double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\nint count = {num_horizontal};\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ(({num_vertical} - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < {num_vertical}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Tag all rooms with their area."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(locPoint.Point.X, locPoint.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Fija el elemento seleccionado para que no se mueva."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count > 0)\n{\n    Element elementToPin = doc.GetElement(selectedIds.First());\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Importa topografía georreferenciada desde un archivo LandXML."}, {"role": "assistant", "content": "IList<XYZ> points = new List<XYZ>();\npoints.Add(new XYZ(0, 0, 0));\npoints.Add(new XYZ(50, 0, 5));\npoints.Add(new XYZ(0, 50, 10));\nTopographySurface.Create(doc, points);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las vistas de planta del proyecto."}, {"role": "assistant", "content": "List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a shaft opening that passes through from {bottom_level_name} to {top_level_name}."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{bottom_level_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{top_level_name}\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    XYZ p1 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p2 = new XYZ(8 / 0.3048, 5 / 0.3048,0);\n    XYZ p3 = new XYZ(8 / 0.3048, 8 / 0.3048,0);\n    XYZ p4 = new XYZ(5 / 0.3048, 8 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén el número total de advertencias en el proyecto."}, {"role": "assistant", "content": "int totalWarnings = doc.GetWarnings().Count;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dibuja una región rellena con patrón diagonal."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nFillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n\nif (activeView != null && fillPattern != null)\n{\n    FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n    if (filledRegionType != null)\n    {\n        FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n        if (newType != null)\n        {\n            newType.ForegroundPatternId = fillPattern.Id;\n            XYZ p1 = new XYZ(0,0,0);\n            XYZ p2 = new XYZ(5 / 0.3048,0,0);\n            XYZ p3 = new XYZ(5 / 0.3048,5 / 0.3048,0);\n            XYZ p4 = new XYZ(0,5 / 0.3048,0);\n            CurveLoop profile = new CurveLoop();\n            profile.Append(Line.CreateBound(p1,p2));\n            profile.Append(Line.CreateBound(p2,p3));\n            profile.Append(Line.CreateBound(p3,p4));\n            profile.Append(Line.CreateBound(p4,p1));\n            FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop>{profile});\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un techo por contorno en el 'Nivel 1'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n    if(roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20,0,0), new XYZ(20,30,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20,30,0), new XYZ(0,30,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new window schedule that includes Type Mark, Width, and Height."}, {"role": "assistant", "content": "string scheduleName = \"Window Schedule\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca un mueble en las coordenadas (7,4)."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    if(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0), furnitureSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las colisiones entre tuberías y vigas."}, {"role": "assistant", "content": "ICollection<ElementId> pipeIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WhereElementIsNotElementType().ToElementIds();\nICollection<ElementId> beamIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().ToElementIds();\n\nif(pipeIds.Count > 0 && beamIds.Count > 0)\n{\n    List<ElementFilter> beamFilters = new List<ElementFilter>();\n    foreach(ElementId beamId in beamIds)\n    {\n        Element beam = doc.GetElement(beamId);\n        if(beam != null) beamFilters.Add(new ElementIntersectsElementFilter(beam));\n    }\n    LogicalOrFilter clashFilter = new LogicalOrFilter(beamFilters);\n    ICollection<ElementId> clashingPipeIds = new FilteredElementCollector(doc, pipeIds).WherePasses(clashFilter).ToElementIds();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all instances of the Furniture category."}, {"role": "assistant", "content": "List<Element> furnitureInstances = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Elimina todos los tipos de muro no utilizados en el proyecto."}, {"role": "assistant", "content": "ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\ndoc.Delete(unusedWallTypes);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera un grupo a partir de la selección actual y muévelo {distance_m} metros a la derecha."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    Group group = doc.Create.NewGroup(selectedIds);\n    if (group != null)\n    {\n        XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters), 0, 0);\n        ElementTransformUtils.MoveElement(doc, group.Id, translation);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Elimina todos los tipos de muro no utilizados en el proyecto."}, {"role": "assistant", "content": "ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las puertas del nivel 'Roof' que sean de la familia '{family_name}'."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Roof\");\nList<Element> doors = new List<Element>();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un suelo con un contorno de 12.5 por 6.2 metros."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(12.5, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(6.2, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> {{ loop }}, floorType.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Asigna el material '{material_name}' a la primera capa de un tipo de muro."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"{material_name}\"));\n\n    if (wallType != null && material != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, material.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Inserta una armadura (truss) de 15.0 metros entre dos puntos."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(15.0 / 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea vigas entre las columnas alineadas horizontalmente."}, {"role": "assistant", "content": "FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    if(!beamSymbol.IsActive) beamSymbol.Activate();\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Copy all elements from {source_level} to {target_level}."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{source_level}\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{target_level}\") as Level;\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(elementsToCopy.Any())\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an electrical conduit with a {diameter_inch}-inch diameter."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 / 0.3048);\n        XYZ end = new XYZ(5 / 0.3048, 0, 3 / 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set({diameter_inch} / 12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the sill height of all windows to {sill_height_m} meter."}, {"role": "assistant", "content": "double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_m}, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Conecta dos tuberías con un codo."}, {"role": "assistant", "content": "List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().ToList();\nif (pipes.Count >= 2)\n{\n    Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewElbowFitting(c1, c2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Move the project base point {distance_m} meters to the north."}, {"role": "assistant", "content": "BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\nif (projectBasePoint != null)\n{\n    XYZ translation = new XYZ(0, {distance_m} / 0.3048, 0);\n    ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Import a georeferenced survey from a LandXML file."}, {"role": "assistant", "content": "// The Revit API in the provided context does not support direct LandXML import.\n// This functionality typically requires additional add-ins like the Site Designer, which are not available here.\n// As a placeholder, this code will show how to create a simple topography surface from a list of points.\nusing(Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(50, 0, 5));\n    points.Add(new XYZ(0, 50, 10));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 20cm '{type_name}' type and then create a wall of that type."}, {"role": "assistant", "content": "WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 20 / 100 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Temporarily isolate all furniture in the active view."}, {"role": "assistant", "content": "ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aplica aislamiento térmico de {thickness_mm}mm a todas las tuberías de agua caliente."}, {"role": "assistant", "content": "PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change the visual style of the active view to 'Hidden Line'."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todos los muros que miden más de 3.0 metros de alto."}, {"role": "assistant", "content": "double heightThreshold = UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nList<ElementId> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new shared text project parameter named '{param_name}' for walls and doors."}, {"role": "assistant", "content": "string originalFile = doc.Application.SharedParametersFilename;\nstring tempFile = System.IO.Path.GetTempFileName() + \".txt\";\nusing (System.IO.File.Create(tempFile)) { }\ndoc.Application.SharedParametersFilename = tempFile;\n\ntry\n{\n    DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n    if (defFile != null)\n    {\n        DefinitionGroup group = defFile.Groups.Create(\"General\");\n        if (group != null)\n        {\n            ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(\"{param_name}\", ParameterType.Text);\n            Definition definition = group.Definitions.Create(options);\n            if (definition != null)\n            {\n                CategorySet categories = doc.Application.Create.NewCategorySet();\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                doc.ParameterBindings.Insert(definition, binding, Autodesk.Revit.DB.BuiltInParameterGroup.PG_DATA);\n            }\n        }\n    }\n}\nfinally\n{\n    doc.Application.SharedParametersFilename = originalFile;\n    System.IO.File.Delete(tempFile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Oculta todas las categorías de anotación en la vista activa."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Hide Annotation Categories\"))\n{\n    t.Start();\n    Categories categories = doc.Settings.Categories;\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        foreach(Category cat in categories)\n        {\n            if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n            {\n                 activeView.SetCategoryHidden(cat.Id, true);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Elimina todos los tipos de muro no utilizados en el proyecto."}, {"role": "assistant", "content": "ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade refuerzo a una columna."}, {"role": "assistant", "content": "RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Export the current model to an NWC file."}, {"role": "assistant", "content": "string folderPath = \"C:/exports/\";\nstring fileName = doc.Title + \".nwc\";\nNavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(folderPath, fileName, options);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new sheet number '{sheet_number}' named '{sheet_name}' using the first available title block."}, {"role": "assistant", "content": "FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"{sheet_name}\";\n        sheet.SheetNumber = \"{sheet_number}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Asigna el material '{material_name}' a la primera capa de un tipo de muro."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"{material_name}\"));\n\n    if (wallType != null && material != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, material.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new Level named 'Level 1' at an elevation of 4.0 meters."}, {"role": "assistant", "content": "double elevation = UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 1\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Display a dialog box with 'Yes' and 'No' options."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add a horizontal reference plane named '{plane_name}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"{plane_name}\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de muro '{type_name}' con un grosor de 25cm."}, {"role": "assistant", "content": "WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, (25 / 100) / 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de muro '{type_name}' con un grosor de 15cm."}, {"role": "assistant", "content": "WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, (15 * 10) / 304.8);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las familias de anotación."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add a point to the selected Path of Travel."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select a Path of Travel\");\n\nif (pickedRef != null)\n{\n    PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n    if (pot != null)\n    {\n        IList<XYZ> points = pot.GetPath();\n        if (points != null && points.Count >= 2)\n        {\n            XYZ midPoint = (points[0] + points[1]) / 2;\n            points.Insert(1, midPoint);\n            pot.Update(points);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a wall on Basement from (5,5,3) to (15,5,3) with a height of 3.0 meters."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Basement\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(5, 5, 3);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters), 5, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa."}, {"role": "assistant", "content": "Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new material named '{material_name}' with color ({color_r}, {color_g}, {color_b}) and {transparency_percent}% transparency."}, {"role": "assistant", "content": "ElementId materialId = Material.Create(doc, \"{material_name}\");\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color({color_r}, {color_g}, {color_b});\n        material.Transparency = {transparency_percent};\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Assign the '{material_name}' material to the first layer of a wall type."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"{material_name}\"));\n\n    if (wallType != null && material != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, material.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nivel 'Nivel 1' a -3.0m."}, {"role": "assistant", "content": "string levelName = \"Nivel 1\";\ndouble elev = UnitUtils.ConvertToInternalUnits(-3.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the MEP space associated with the room '{room_name}'."}, {"role": "assistant", "content": "Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"{room_name}\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new elevation view looking north named \"{view_name}\"."}, {"role": "assistant", "content": "ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null && activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 2);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera {num_grids} rejillas horizontales con una separación de {separation_m}m."}, {"role": "assistant", "content": "double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i < {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo material llamado '{material_name}' con un patrón de superficie de madera."}, {"role": "assistant", "content": "string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Wood\") || p.Name.Contains(\"Madera\")) as FillPatternElement;\n    \n    if (material != null && fillPattern != null)\n    {\n        material.SurfaceForegroundPatternId = fillPattern.Id;\n        material.Color = new Color(139, 69, 19);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el nombre de todas las tablas que contienen '{text_to_find}' por '{new_text}'."}, {"role": "assistant", "content": "List<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"{text_to_find}\")).ToList();\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"{text_to_find}\", \"{new_text}\");\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Ajusta la altura del antepecho de todas las ventanas a 2.8 metro(s)."}, {"role": "assistant", "content": "double sillHeight = 2.8 / 0.3048;\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all doors on level 'Basement' that belong to the '{family_name}' family."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Basement\");\nList<Element> doors = new List<Element>();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las puertas en el Nivel 2 usando un filtro combinado."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nList<Element> doors = new List<Element>();\n\nif (level1 != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    doors = new FilteredElementCollector(doc).WherePasses(combinedFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all clashes between pipes and beams."}, {"role": "assistant", "content": "ICollection<ElementId> pipeIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WhereElementIsNotElementType().ToElementIds();\nICollection<ElementId> beamIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().ToElementIds();\n\nif(pipeIds.Count > 0 && beamIds.Count > 0)\n{\n    List<ElementFilter> beamFilters = new List<ElementFilter>();\n    foreach(ElementId beamId in beamIds)\n    {\n        Element beam = doc.GetElement(beamId);\n        if(beam != null) beamFilters.Add(new ElementIntersectsElementFilter(beam));\n    }\n    LogicalOrFilter clashFilter = new LogicalOrFilter(beamFilters);\n    ICollection<ElementId> clashingPipeIds = new FilteredElementCollector(doc, pipeIds).WherePasses(clashFilter).ToElementIds();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Permite al usuario seleccionar un muro y obtén su ElementId."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Pin the selected element so it cannot be moved."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count > 0)\n{\n    Element elementToPin = doc.GetElement(selectedIds.First());\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un codo en T entre dos tuberías que se intersecan."}, {"role": "assistant", "content": "// No se proporciona código para esta función específica debido a la necesidad de selección interactiva y manejo de casos complejos.\n// Este escenario involucra la selección de elementos específicos y el uso de métodos de creación que dependen de la geometría existente."}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Insert a 15.0-meter truss between two points."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(15.0 / 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Apply the '{template_name}' view template to the active view."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nView viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.IsTemplate && v.Name == \"{template_name}\");\n\nif (activeView != null && viewTemplate != null)\n{\n    activeView.ViewTemplateId = viewTemplate.Id;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place lighting posts every 8m along a 100m path."}, {"role": "assistant", "content": "FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén la geometría sólida de un elemento seleccionado."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para obtener su geometría\");\nif(pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if(elem != null)\n    {\n        Options opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if(geoElem != null)\n        {\n            List<Solid> solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a structural beam between (0,0,0) and (10,0,0) on Level 1."}, {"role": "assistant", "content": "FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, 0);\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(0, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista de sección llamada '{view_name}'."}, {"role": "assistant", "content": "ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-1, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    \n    if (sectionView != null)\n    {\n        sectionView.Name = \"{view_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Generate a rectangular floor of 10x8 meters."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> {{ loop }}, floorType.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the visibility of the '{category_name}' category to false in the active view."}, {"role": "assistant", "content": "Category category = doc.Settings.Categories.get_Item(BuiltInCategory.{category_name});\nif (category != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(category.Id, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add the 'Level', 'Mark', and 'Volume' fields to the column schedule."}, {"role": "assistant", "content": "ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add a tag to the column closest to the origin."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n    LocationPoint lp = c.Location as LocationPoint;\n    return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n}).FirstOrDefault();\n\nif (activeView != null && column != null)\n{\n    LocationPoint loc = column.Location as LocationPoint;\n    if (loc != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un techo por extrusión con un perfil en arco."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all door families loaded in the project."}, {"role": "assistant", "content": "List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo nivel llamado 'Level 2' a una elevación de 4.0 metros."}, {"role": "assistant", "content": "string levelName = \"Level 2\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva hoja con el número '{sheet_number}' y nombre '{sheet_name}'."}, {"role": "assistant", "content": "FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"{sheet_name}\";\n        sheet.SheetNumber = \"{sheet_number}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create columns at each grid intersection."}, {"role": "assistant", "content": "FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    if(!colSymbol.IsActive) colSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                 if(results != null) {\n                     foreach (IntersectionResult ir in results)\n                     {\n                         doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                     }\n                 }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Insert a window 1.2m wide and 3.0m high into a wall."}, {"role": "assistant", "content": "FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = $\"Window {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a detail group with the selected detail items."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Typical Detail 1\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place lighting posts every 8m along a 100m path."}, {"role": "assistant", "content": "FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el tipo de una losa seleccionada a '{new_type_name}'."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"{new_type_name}\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un ensamblaje a partir de los elementos seleccionados."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"Nuevo Ensamblaje\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Hide the selected elements in the active view."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToHide = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToHide.Count > 0)\n{\n    activeView.HideElements(idsToHide);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Insert a window 1.0m wide and 3.0m high into a wall."}, {"role": "assistant", "content": "FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = $\"Window {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Oculta los elementos seleccionados en la vista activa."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToHide = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToHide.Count > 0)\n{\n    activeView.HideElements(idsToHide);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a section view using a 1.2x{depth_m}x3.15 meter box."}, {"role": "assistant", "content": "ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\n\nif (sectionVFT != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(0,0,0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({depth_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera una cuadrícula de columnas {rows}x{cols} con separación de 8 metros."}, {"role": "assistant", "content": "FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<{rows}; i++)\n    {\n        for(int j=0; j<{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una copia de la vista activa y nómbrala '{view_name}'."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{view_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Carga la familia '{family_name}.rfa' y colócala en (7,4,3) en el Level 2."}, {"role": "assistant", "content": "string familyPath = \"C:/Rutas/Comunes/{family_name}.rfa\";\nFamily deskFamily = null;\nbool familyLoaded = doc.LoadFamily(familyPath, out deskFamily);\n\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\n\nif (familyLoaded && deskFamily != null && level1 != null)\n{\n    FamilySymbol deskSymbol = doc.GetElement(deskFamily.GetFamilySymbolIds().FirstOrDefault()) as FamilySymbol;\n    if (deskSymbol != null)\n    {\n        if (!deskSymbol.IsActive) deskSymbol.Activate();\n        XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 3);\n        doc.Create.NewFamilyInstance(point, deskSymbol, level1, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Import a CAD file named '{file_name}.dwg' into the current view."}, {"role": "assistant", "content": "string filePath = \"C:/CAD/{file_name}.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Hide all annotation categories in the active view."}, {"role": "assistant", "content": "Categories categories = doc.Settings.Categories;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    foreach(Category cat in categories)\n    {\n        if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n        {\n             activeView.SetCategoryHidden(cat.Id, true);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Carga la familia '{family_name}.rfa' y colócala en (7,4,3) en el Nivel 2."}, {"role": "assistant", "content": "string familyPath = \"C:/Rutas/Comunes/{family_name}.rfa\";\nFamily deskFamily = null;\nbool familyLoaded = doc.LoadFamily(familyPath, out deskFamily);\n\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\n\nif (familyLoaded && deskFamily != null && level1 != null)\n{\n    FamilySymbol deskSymbol = doc.GetElement(deskFamily.GetFamilySymbolIds().FirstOrDefault()) as FamilySymbol;\n    if (deskSymbol != null)\n    {\n        if (!deskSymbol.IsActive) deskSymbol.Activate();\n        XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 3);\n        doc.Create.NewFamilyInstance(point, deskSymbol, level1, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Temporarily isolate the selected elements in the active view."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToIsolate = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToIsolate.Count > 0)\n{\n    activeView.IsolateElementsTemporary(idsToIsolate);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a floor with a circular hole of {radius_m}m radius in the center."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    XYZ p1 = new XYZ(-10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p2 = new XYZ(10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p3 = new XYZ(10 / 0.3048, 10 / 0.3048, 0);\n    XYZ p4 = new XYZ(-10 / 0.3048, 10 / 0.3048, 0);\n    CurveLoop outerLoop = new CurveLoop();\n    outerLoop.Append(Line.CreateBound(p1, p2));\n    outerLoop.Append(Line.CreateBound(p2, p3));\n    outerLoop.Append(Line.CreateBound(p3, p4));\n    outerLoop.Append(Line.CreateBound(p4, p1));\n\n    XYZ center = XYZ.Zero;\n    double radius = {radius_m} / 0.3048;\n    CurveLoop innerLoop = new CurveLoop();\n    innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n    innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n    Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Mueve el punto base del proyecto {distance_m} metros hacia el norte."}, {"role": "assistant", "content": "BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\nif (projectBasePoint != null)\n{\n    XYZ translation = new XYZ(0, {distance_m} / 0.3048, 0);\n    ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls with an empty 'Mark' parameter and set it to '{mark_value}'."}, {"role": "assistant", "content": "List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"{mark_value}\");\n  }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add reinforcement to a column."}, {"role": "assistant", "content": "RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Apply {thickness_mm}mm thermal insulation to all hot water pipes."}, {"role": "assistant", "content": "PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dimension the length of a user-selected wall."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select a wall to dimension\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Select all walls on 'Nivel 1' and change their comment to '{comment}'."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nList<Wall> wallsOnLevel = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level.Id).Cast<Wall>().ToList();\nforeach(Wall wall in wallsOnLevel)\n{\n    wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(\"{comment}\");\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Delete all unused wall types in the project."}, {"role": "assistant", "content": "ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\ndoc.Delete(unusedWallTypes);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Asigna todos los muros al workset '{workset_name}'."}, {"role": "assistant", "content": "if (doc.IsWorkshared)\n{\n    Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w => w.Name == \"{workset_name}\");\n    if (ws != null)\n    {\n        FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n        foreach (Element e in collector)\n        {\n            Parameter p = e.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n            if (p != null && !p.IsReadOnly)\n            {\n                p.Set(ws.Id.IntegerValue);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade montantes a todas las líneas de rejilla de un muro cortina."}, {"role": "assistant", "content": "Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\n\nif (curtainWall != null && mullionType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    if (grid != null)\n    {\n        foreach (ElementId gridLineId in grid.GetVGridLineIds())\n        {\n            CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n            if(line != null) grid.AddMullions(line, mullionType);\n        }\n        foreach (ElementId gridLineId in grid.GetUGridLineIds())\n        {\n            CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n            if(line != null) grid.AddMullions(line, mullionType);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el tipo de todos los muros seleccionados a 'Muro Básico 15cm'."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Básico 15cm\");\n\nif (selectedIds.Count > 0 && targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa."}, {"role": "assistant", "content": "Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nView activeView = doc.ActiveView;\n\nif (furnitureCat != null && activeView != null)\n{\n    activeView.SetCategoryHidden(furnitureCat.Id, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change the type of all '{old_type_name}' windows to '{new_type_name}'."}, {"role": "assistant", "content": "FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"{new_type_name}\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"{old_type_name}\"));\n\nif (newType != null && oldType != null)\n{\n    if(!newType.IsActive) newType.Activate();\n    List<FamilyInstance> windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Permite al usuario seleccionar un muro y obtén su ElementId."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplica el {level_to_duplicate} con un desfase de {offset_m}m y llámalo '{new_level_name}'."}, {"role": "assistant", "content": "string newLevelName = \"{new_level_name}\";\nLevel levelToDup = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{level_to_duplicate}\") as Level;\n\nif (levelToDup != null)\n{\n    double newElevation = levelToDup.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un techo por extrusión con un perfil en arco."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Temporarily isolate the {built_in_category_enum} category in the active view."}, {"role": "assistant", "content": "ElementId categoryId = new ElementId(BuiltInCategory.{built_in_category_enum});\nICollection<ElementId> categoryIds = new List<ElementId> { categoryId };\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateCategoriesTemporary(categoryIds);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Export the geometry of a selected element to an SAT file."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element to export\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        string folderPath = \"C:/RevitExports/\";\n        string fileName = elem.Name + \".sat\";\n        SATExportOptions options = new SATExportOptions();\n        doc.Export(folderPath, fileName, new List<ElementId>{{elem.Id}}, options);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Apply {thickness_mm}mm thermal insulation to all hot water pipes."}, {"role": "assistant", "content": "PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all walls on Level 2 that are structural."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif (level != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> {{ levelFilter, categoryFilter, structuralFilter }});\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the MEP space associated with the room '{room_name}'."}, {"role": "assistant", "content": "Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"{room_name}\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {text_size_mm}mm text type named '{type_name}' in green color."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create {num_grids} horizontal grids spaced {separation_m} meters apart."}, {"role": "assistant", "content": "double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i < {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add a 90-degree elbow between two pipes."}, {"role": "assistant", "content": "List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.ConnectorManager != null && p.ConnectorManager.UnusedConnectors.Size > 0).Take(2).ToList();\n\nif (pipes.Count >= 2)\n{\n    Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    \n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewElbowFitting(c1, c2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Apply the 'X-Ray' visual style to the active 3D view."}, {"role": "assistant", "content": "View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe; // Simulates 'X-Ray' effect\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Select all walls on 'Nivel 1' and change their comment to '{comment}'."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level != null)\n{\n    List<Wall> wallsOnLevel = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level.Id).Cast<Wall>().ToList();\n    foreach(Wall wall in wallsOnLevel)\n    {\n        Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentParam != null && !commentParam.IsReadOnly)\n        {\n            commentParam.Set(\"{comment}\");\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Move the project base point {distance_m} meters to the north."}, {"role": "assistant", "content": "BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\nif (projectBasePoint != null)\n{\n    XYZ translation = new XYZ(0, {distance_m} / 0.3048, 0);\n    ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 'Generic - 200mm' wall on 'L01' from (5,5) to (15,5)."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"L01\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Generic - 200mm\") as WallType;\nXYZ startPoint = new XYZ(5, 5, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nWall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un espacio MEP para cada habitación en el nivel 'Level 2'."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\nif (level != null)\n{\n    List<Room> roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level.Id)).Cast<Room>().ToList();\n    foreach(Room room in roomsOnLevel)\n    {\n       Space.Create(doc, room, null);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una familia 'in-situ' para un/a '{item_name}' personalizado usando una extrusión."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate the '{original_name}' wall type and name it '{new_name}'."}, {"role": "assistant", "content": "string originalName = \"{original_name}\";\nstring newName = \"{new_name}\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Elimina todos los tipos de muro no utilizados en el proyecto."}, {"role": "assistant", "content": "ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find the host of a face-based light fixture."}, {"role": "assistant", "content": "FamilyInstance lightFixture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().Cast<FamilyInstance>().FirstOrDefault(fi => fi.HostFace != null);\n\nElement host = null;\nif (lightFixture != null)\n{\n    Reference hostFaceRef = lightFixture.HostFace;\n    if (hostFaceRef != null)\n    {\n        host = doc.GetElement(hostFaceRef.ElementId);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all annotation families."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un ensamblaje a partir de los elementos seleccionados."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"Nuevo Ensamblaje\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find a wall by searching for the value '{mark_value}' in its Mark parameter."}, {"role": "assistant", "content": "string markValue = \"{mark_value}\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue);\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().WherePasses(filter).FirstOrDefault() as Wall;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the coordinates of the project base point and the survey point."}, {"role": "assistant", "content": "BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dimension the length of a user-selected wall."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select a wall to dimension\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Modela una bandeja de cables entre dos puntos."}, {"role": "assistant", "content": "CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(trayType != null && level != null)\n{\n    XYZ start = new XYZ(0,10,3);\n    XYZ end = new XYZ(15,10,3);\n    CableTray.Create(doc, trayType.Id, start, end, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un techo por extrusión con una pendiente del {slope_percentage}%."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null && roofType != null)\n{\n    double run = 10.0;\n    double rise = run * ({slope_percentage} / 100.0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(run / 0.3048, 0, rise / 0.3048)));\n    \n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    \n    if (refPlane != null)\n    {\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, run / 0.3048);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Carga un enlace DWG desde '{file_path}' preservando los colores."}, {"role": "assistant", "content": "DWGImportOptions opts = new DWGImportOptions();\nopts.ColorMode = ImportColorMode.Preserved;\nElementId linkId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(\"{file_path}\", opts, activeView, out linkId);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Align the face of one wall with the face of another."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Face, \"Select the target face (stationary)\");\nReference ref2 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Face, \"Select the face to move\");\nView activeView = doc.ActiveView;\n\nif (ref1 != null && ref2 != null && activeView != null)\n{\n    doc.Create.NewAlignment(activeView, ref1, ref2);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade una línea de rejilla horizontal a un muro cortina a 3.15 metros de altura."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) / 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, 3.15 / 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una losa de cimentación estructural de 10cm de espesor llamada '{type_name}'."}, {"role": "assistant", "content": "Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nFloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\nif(slabTypeToDuplicate != null && foundationLevel != null)\n{\n    FloorType newSlabType = slabTypeToDuplicate.Duplicate(\"{type_name}\") as FloorType;\n    if(newSlabType != null)\n    {\n        CompoundStructure cs = newSlabType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), (10 * 10) / 304.8);\n            newSlabType.SetCompoundStructure(cs);\n            XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n            CurveLoop profile = new CurveLoop();\n            profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n            Floor.Create(doc, new List<CurveLoop>{profile}, newSlabType.Id, foundationLevel.Id);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an extrusion roof with an arc profile."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place a camera named '{view_name}' at position ({eye_x_m}, {eye_y_m}, {eye_z_m})."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        cameraView.Name = \"{view_name}\";\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits({eye_x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_z_m}, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Temporarily isolate the {built_in_category_enum} category in the active view."}, {"role": "assistant", "content": "ElementId categoryId = new ElementId(BuiltInCategory.{built_in_category_enum});\nICollection<ElementId> categoryIds = new List<ElementId> { categoryId };\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateCategoriesTemporary(categoryIds);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new material named '{material_name}' with a wood surface pattern."}, {"role": "assistant", "content": "string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Wood\") || p.Name.Contains(\"Madera\")) as FillPatternElement;\n    \n    if (material != null && fillPattern != null)\n    {\n        material.SurfaceForegroundPatternId = fillPattern.Id;\n        material.Color = new Color(139, 69, 19);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Inserta un terminal de aire en el extremo de un conducto."}, {"role": "assistant", "content": "Duct duct = new FilteredElementCollector(doc).OfClass(typeof(Duct)).FirstOrDefault() as Duct;\nFamilySymbol terminalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctTerminal).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (duct != null && terminalSymbol != null)\n{\n    if(!terminalSymbol.IsActive) terminalSymbol.Activate();\n    LocationCurve locCurve = duct.Location as LocationCurve;\n    if (locCurve != null)\n    {\n        Connector endConnector = duct.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault(c => c.Origin.IsAlmostEqualTo(locCurve.Curve.GetEndPoint(1)));\n        if (endConnector != null)\n        {\n            doc.Create.NewFamilyInstance(endConnector.Origin, terminalSymbol, endConnector);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Align the centerlines of two user-selected walls."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select the first wall (the one that will move)\");\nReference r2 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select the second wall (the reference)\");\n\nif (r1 != null && r2 != null)\n{\n    Wall w1 = doc.GetElement(r1) as Wall;\n    Wall w2 = doc.GetElement(r2) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (w1 != null && w2 != null && activeView != null)\n    {\n        LocationCurve lc1 = w1.Location as LocationCurve;\n        LocationCurve lc2 = w2.Location as LocationCurve;\n        if (lc1 != null && lc2 != null)\n        {\n            doc.Create.NewAlignment(activeView, lc1.Curve.Reference, lc2.Curve.Reference);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new window schedule that includes Type Mark, Width, and Height."}, {"role": "assistant", "content": "string scheduleName = \"Window Schedule\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all material names."}, {"role": "assistant", "content": "List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all views that do not have an assigned view template."}, {"role": "assistant", "content": "List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId.Equals(ElementId.InvalidElementId)).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén todos los muros de un modelo vinculado que se cruzan con una caja de delimitación."}, {"role": "assistant", "content": "RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\nList<Element> linkedWalls = new List<Element>();\n\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    if (linkDoc != null)\n    {\n        BoundingBoxXYZ bbox = new BoundingBoxXYZ();\n        bbox.Min = new XYZ(0,0,0);\n        bbox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(bbox.Min, bbox.Max));\n        linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToList();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade el prefijo '{prefix}' a todas las vistas de plano."}, {"role": "assistant", "content": "string prefix = \"{prefix}\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new elevation view looking south named \"{view_name}\"."}, {"role": "assistant", "content": "ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null && activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 0);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todos los muros con el comentario '{comment}'."}, {"role": "assistant", "content": "ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"{comment}\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de los nombres de todos los materiales."}, {"role": "assistant", "content": "List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Importa un archivo CAD llamado '{file_name}.dwg' en la vista actual."}, {"role": "assistant", "content": "string filePath = \"C:/CAD/{file_name}.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el nombre de todas las familias cargadas que contengan '{old_name}' a '{new_name}'."}, {"role": "assistant", "content": "List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"{old_name}\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"{old_name}\", \"{new_name}\");\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo Nivel llamado 'Planta Baja' a una elevación de 3.5 metros."}, {"role": "assistant", "content": "double elevation = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Planta Baja\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Load the '{family_name}.rfa' family and place it at (7,4,3) on L01."}, {"role": "assistant", "content": "string familyPath = \"C:/Common/Paths/{family_name}.rfa\";\nFamily tableFamily = null;\nbool familyLoaded = doc.LoadFamily(familyPath, out tableFamily);\n\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"L01\") as Level;\n\nif (familyLoaded && tableFamily != null && level1 != null)\n{\n    FamilySymbol tableSymbol = doc.GetElement(tableFamily.GetFamilySymbolIds().FirstOrDefault()) as FamilySymbol;\n    if (tableSymbol != null)\n    {\n        if (!tableSymbol.IsActive) tableSymbol.Activate();\n        XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 3);\n        doc.Create.NewFamilyInstance(point, tableSymbol, level1, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Allow the user to select a wall with the prompt '{selection_prompt}' and get its ElementId."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"{selection_prompt}\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un muro en Level 1 de (5,5,3) a (15,5,3) con 3.15m de alto."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(5, 5, 3);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters), 5, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an MEP space for each room on 'Roof'."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Roof\");\n\nif (level != null)\n{\n    List<Room> roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level.Id)).Cast<Room>().ToList();\n    foreach(Room room in roomsOnLevel)\n    {\n       Space.Create(doc, room, null);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new 3D view named '{view_name}' oriented from point ({eye_x_m},{eye_y_m},{eye_z_m}) looking at the origin."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v=>v.ViewFamily==ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    if (view != null)\n    {\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits({eye_x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_z_m}, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D vo = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        view.SetOrientation(vo);\n        view.Name = \"{view_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all annotation families and count how many there are."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\nint count = annotationFamilies.Count;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 'Exterior - Brick on Mtl. Stud' wall on 'Basement' from (0,0) to (10,0)."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Basement\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Exterior - Brick on Mtl. Stud\") as WallType;\nXYZ startPoint = new XYZ(0, 0, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(0, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nWall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 3D view with the section box enabled."}, {"role": "assistant", "content": "string viewName = \"3D View with Section Box\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all views that do not have an assigned view template."}, {"role": "assistant", "content": "List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId.Equals(ElementId.InvalidElementId)).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Exporta cada tabla de planificación a un archivo CSV individual."}, {"role": "assistant", "content": "string exportPath = \"C:/RevitExports/\";\nList<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => !vs.IsTemplate).ToList();\nViewScheduleExportOptions options = new ViewScheduleExportOptions();\noptions.FieldDelimiter = \",\";\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Export(exportPath, schedule.Name + \".csv\", options);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all doors on Roof using a combined filter."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Roof\") as Level;\nList<Element> doors = new List<Element>();\n\nif (level1 != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    doors = new FilteredElementCollector(doc).WherePasses(combinedFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Inside the family editor, create a vertical reference plane named '{plane_name}'."}, {"role": "assistant", "content": "string rpName = \"{plane_name}\";\nXYZ start = new XYZ(0, UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0);\nXYZ end = new XYZ(0, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nXYZ normal = XYZ.BasisX;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null && doc.IsFamilyDocument)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = rpName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva revisión con descripción '{description}', emitida por '{issued_by}' en la fecha '{date}' y aplícala a la hoja activa."}, {"role": "assistant", "content": "Revision rev = Revision.Create(doc);\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (rev != null && sheet != null)\n{\n    rev.Description = \"{description}\";\n    rev.RevisionDate = \"{date}\";\n    rev.IssuedBy = \"{issued_by}\";\n    \n    ICollection<ElementId> revisions = sheet.GetAdditionalRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las advertencias del proyecto."}, {"role": "assistant", "content": "IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a default 3D view."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a text note with text '{note_text}', given location, and target element."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{note_text}\", opts);\n    if (note != null)\n    {\n        Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n        leader.End = targetRef.GlobalPoint;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade un plano de referencia horizontal llamado '{plane_name}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"{plane_name}\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Une la geometría de una columna y un suelo que se cruzan."}, {"role": "assistant", "content": "Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\n\nif (column != null && floor != null)\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un espacio MEP para cada habitación en el nivel 'Level 1'."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n\nif (level != null)\n{\n    List<Room> roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level.Id)).Cast<Room>().ToList();\n    foreach(Room room in roomsOnLevel)\n    {\n       Space.Create(doc, room, null);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Elimina todos los tipos de muro no utilizados en el proyecto."}, {"role": "assistant", "content": "ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Temporarily isolate the {built_in_category_enum} category in the active view."}, {"role": "assistant", "content": "ICollection<ElementId> elementIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.{built_in_category_enum}).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(elementIds);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Delete all unused wall types in the project."}, {"role": "assistant", "content": "ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\ndoc.Delete(unusedWallTypes);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new workset named '{workset_name}'."}, {"role": "assistant", "content": "Workset.Create(doc, \"{workset_name}\");"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the 'Comments' parameter for all doors on Level 1 to 'RF-90'."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"RF-90\");\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de puerta llamado 'Puerta 90x210' y asigna '{fire_rating_value}' al parámetro 'Fire Rating'."}, {"role": "assistant", "content": "FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"Puerta 90x210\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"{fire_rating_value}\");\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new revision with description '{description}', issued by '{issued_by}' on '{date}', and apply it to the active sheet."}, {"role": "assistant", "content": "Revision rev = Revision.Create(doc);\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (rev != null && sheet != null)\n{\n    rev.Description = \"{description}\";\n    rev.RevisionDate = \"{date}\";\n    rev.IssuedBy = \"{issued_by}\";\n    \n    ICollection<ElementId> revisions = sheet.GetAdditionalRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todos los muros que no tienen nivel base asignado."}, {"role": "assistant", "content": "ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new door type named 'Double-Glass' and set its fire rating to '{fire_rating_value}'."}, {"role": "assistant", "content": "FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"Double-Glass\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating_value}\");\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new shared text project parameter named '{param_name}' for walls and doors."}, {"role": "assistant", "content": "string originalFile = doc.Application.SharedParametersFilename;\nstring tempFile = System.IO.Path.GetTempFileName() + \".txt\";\nusing (System.IO.File.Create(tempFile)) { }\ndoc.Application.SharedParametersFilename = tempFile;\n\ntry\n{\n    DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n    if (defFile != null)\n    {\n        DefinitionGroup group = defFile.Groups.Create(\"General\");\n        if (group != null)\n        {\n            ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(\"{param_name}\", ParameterType.Text);\n            Definition definition = group.Definitions.Create(options);\n            if (definition != null)\n            {\n                CategorySet categories = doc.Application.Create.NewCategorySet();\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                doc.ParameterBindings.Insert(definition, binding, Autodesk.Revit.DB.BuiltInParameterGroup.PG_DATA);\n            }\n        }\n    }\n}\nfinally\n{\n    doc.Application.SharedParametersFilename = originalFile;\n    System.IO.File.Delete(tempFile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva revisión con descripción '{description}', emitida por '{issued_by}' en la fecha '{date}' y aplícala a la hoja activa."}, {"role": "assistant", "content": "Revision rev = Revision.Create(doc);\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (rev != null && sheet != null)\n{\n    rev.Description = \"{description}\";\n    rev.RevisionDate = \"{date}\";\n    rev.IssuedBy = \"{issued_by}\";\n    \n    ICollection<ElementId> revisions = sheet.GetAdditionalRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las puertas del nivel 'Roof' que sean de la familia '{family_name}'."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Roof\");\nList<Element> doors = new List<Element>();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an electrical circuit connecting light fixtures to a panel."}, {"role": "assistant", "content": "FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nList<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\nif (panel != null && fixtureIds.Count > 0)\n{\n    ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n    if(electricalSystem != null)\n    {\n        electricalSystem.SelectPanel(panel);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista de sección entre los puntos (5,5,3) y (15,5,3)."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(5,5,3);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),3);\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Calculate the total area of all rooms."}, {"role": "assistant", "content": "double totalArea = 0.0;\nList<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nforeach (Room room in rooms)\n{\n    totalArea += room.Area;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade los campos 'Nivel', 'Marca' y 'Volumen' a la tabla de pilares."}, {"role": "assistant", "content": "ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\") || s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una cota de elevación en una cara y un punto de vista dados."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara superior del suelo\");\n\nView activeView = doc.ActiveView;\n\nif (faceRef != null && activeView != null)\n{\n    XYZ pointOnFace = faceRef.GlobalPoint;\n    XYZ leaderEnd = pointOnFace + new XYZ(1 / 0.3048, 1 / 0.3048, 0);\n    doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Establece la visibilidad de la categoría '{category_name}' en falso en la vista activa."}, {"role": "assistant", "content": "Category category = doc.Settings.Categories.get_Item(BuiltInCategory.{category_name});\nif (category != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(category.Id, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add the 'Level', 'Mark', and 'Volume' fields to the column schedule."}, {"role": "assistant", "content": "ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a Reflected Ceiling Plan view for Roof."}, {"role": "assistant", "content": "string levelName = \"Roof\";\nstring viewName = \"Roof Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate {level_to_duplicate} with a {offset_m}m offset and name it '{new_level_name}'."}, {"role": "assistant", "content": "string newLevelName = \"{new_level_name}\";\nLevel levelToDup = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{level_to_duplicate}\") as Level;\n\nif (levelToDup != null)\n{\n    double newElevation = levelToDup.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Inserta una armadura (truss) de 15.0 metros entre dos puntos."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(15.0 / 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Permite al usuario seleccionar un muro y obtén su ElementId."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an electrical circuit connecting light fixtures to a panel."}, {"role": "assistant", "content": "FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nList<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\nif (panel != null && fixtureIds.Count > 0)\n{\n    ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n    if(electricalSystem != null)\n    {\n        electricalSystem.SelectPanel(panel);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Localiza todos los muros con un parámetro 'Marca' vacío y asigna '{mark_value}'."}, {"role": "assistant", "content": "List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"{mark_value}\");\n  }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place a material tag on a wall face."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Face, \"Select a face to tag\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Select the tag location\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a default 3D view."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place a piece of furniture at coordinates (7,4)."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    if(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0), furnitureSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Display a dialog box with 'Yes', 'No', and 'Cancel' options."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca un rociador en las coordenadas ({x_m},{y_m},{z_m})."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits({x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({z_m}, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Establece el parámetro '{parameter_name}' de todas las puertas del Azotea a 'RF-90'."}, {"role": "assistant", "content": "using(Transaction t = new Transaction(doc, \"Set Door Comments\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Azotea\");\n    if(level != null)\n    {\n        List<FamilyInstance> doorsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId.Equals(level.Id)).ToList();\n        foreach(FamilyInstance door in doorsOnLevel)\n        {\n            Parameter param = door.LookupParameter(\"{parameter_name}\");\n            if(param != null && !param.IsReadOnly)\n            {\n                param.Set(\"RF-90\");\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea {num_worksets} worksets de arquitectura."}, {"role": "assistant", "content": "List<string> worksetNames = new List<string> {{ \"TAD_ARQ_MAM\", \"TAD_ARQ_ACA\", \"TAD_ARQ_PLA\", \"TAD_ARQ_PSO\", \"TAD_ARQ_HRE\", \"TAD_ARQ_ALU\", \"TAD_ARQ_CAR\", \"TAD_ARQ_MOB\", \"TAD_ARQ_PLO\", \"TAD_ARQ_EXT\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 'Pilar 30x60' column at each grid intersection."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Pilar 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate {level_to_duplicate} with a {offset_m}m offset and name it '{new_level_name}'."}, {"role": "assistant", "content": "string newLevelName = \"{new_level_name}\";\nLevel levelToDup = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{level_to_duplicate}\") as Level;\n\nif (levelToDup != null)\n{\n    double newElevation = levelToDup.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all door families loaded in the project."}, {"role": "assistant", "content": "List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo parámetro de proyecto compartido de texto llamado '{param_name}' para muros y puertas."}, {"role": "assistant", "content": "string originalFile = doc.Application.SharedParametersFilename;\nstring tempFile = System.IO.Path.GetTempFileName() + \".txt\";\nusing (System.IO.File.Create(tempFile)) { }\ndoc.Application.SharedParametersFilename = tempFile;\n\ntry\n{\n    DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n    if (defFile != null)\n    {\n        DefinitionGroup group = defFile.Groups.Create(\"General\");\n        if (group != null)\n        {\n            ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(\"{param_name}\", ParameterType.Text);\n            Definition definition = group.Definitions.Create(options);\n            if (definition != null)\n            {\n                CategorySet categories = doc.Application.Create.NewCategorySet();\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                doc.ParameterBindings.Insert(definition, binding, Autodesk.Revit.DB.BuiltInParameterGroup.PG_DATA);\n            }\n        }\n    }\n}\nfinally\n{\n    doc.Application.SharedParametersFilename = originalFile;\n    System.IO.File.Delete(tempFile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo panel en la cinta de opciones llamado '{panel_name}' con un botón."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un conducto eléctrico de {diameter_inch} pulgada de diámetro."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 / 0.3048);\n        XYZ end = new XYZ(5 / 0.3048, 0, 3 / 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set({diameter_inch}/12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Export all sheets in a set to a single combined PDF."}, {"role": "assistant", "content": "ViewSheetSet sheetSet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheetSet)).FirstOrDefault() as ViewSheetSet;\n\nif (sheetSet != null)\n{\n    string folderPath = \"C:/RevitExports/\";\n    PDFExportOptions options = new PDFExportOptions();\n    options.Combine = true;\n    options.FileName = sheetSet.Name;\n    List<ElementId> sheetIds = sheetSet.Views.Cast<ViewSheet>().Select(s => s.Id).ToList();\n    doc.Export(folderPath, sheetIds, options);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una columna estructural en la posición X=2, Y=3."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all walls from a linked model that intersect with a bounding box."}, {"role": "assistant", "content": "RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\nList<Element> linkedWalls = new List<Element>();\n\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    if (linkDoc != null)\n    {\n        BoundingBoxXYZ bbox = new BoundingBoxXYZ();\n        bbox.Min = new XYZ(0,0,0);\n        bbox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(bbox.Min, bbox.Max));\n        linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToList();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a global length parameter named '{param_name}' with a value of {value_m}m."}, {"role": "assistant", "content": "GlobalParameter gp = GlobalParameter.Create(doc, \"{param_name}\", SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits({value_m}, UnitTypeId.Meters)));\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un suelo con un hueco circular de radio {radius_m}m en el centro."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    XYZ p1 = new XYZ(-10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p2 = new XYZ(10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p3 = new XYZ(10 / 0.3048, 10 / 0.3048, 0);\n    XYZ p4 = new XYZ(-10 / 0.3048, 10 / 0.3048, 0);\n    CurveLoop outerLoop = new CurveLoop();\n    outerLoop.Append(Line.CreateBound(p1, p2));\n    outerLoop.Append(Line.CreateBound(p2, p3));\n    outerLoop.Append(Line.CreateBound(p3, p4));\n    outerLoop.Append(Line.CreateBound(p4, p1));\n\n    XYZ center = XYZ.Zero;\n    double radius = {radius_m} / 0.3048;\n    CurveLoop innerLoop = new CurveLoop();\n    innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n    innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n    Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new workset named '{workset_name}'."}, {"role": "assistant", "content": "Workset.Create(doc, \"{workset_name}\");"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all plan views in the project."}, {"role": "assistant", "content": "List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Pinta la cara interior de los muros exteriores con '{material_name}'."}, {"role": "assistant", "content": "Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"{material_name}\");\nvar exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior).ToList();\n\nif (paintMaterial != null)\n{\n    foreach (Wall w in exteriorWalls)\n    {\n        IList<Reference> interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n        if(interiorFaceRefs.Count > 0)\n        {\n            Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n            if (interiorFace != null)\n            {\n                doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a group from the current selection and move it {distance_m} meters to the right."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    Group group = doc.Create.NewGroup(selectedIds);\n    if (group != null)\n    {\n        XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters), 0, 0);\n        ElementTransformUtils.MoveElement(doc, group.Id, translation);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todos los muros que miden más de 2.8 metros de alto."}, {"role": "assistant", "content": "double heightThreshold = UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nList<ElementId> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca todos los elementos seleccionados en el workset '{workset_name}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"{workset_name}\");\n        if(workset == null) workset = Workset.Create(doc, \"{workset_name}\");\n\n        if (selectedIds != null && selectedIds.Count > 0 && workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null && !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade refuerzo a una columna."}, {"role": "assistant", "content": "RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo nivel llamado 'Basement' a 3.5 metros de elevación."}, {"role": "assistant", "content": "double elevation = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Basement\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Synchronize the local model with the central model, adding the comment '{comment}'."}, {"role": "assistant", "content": "if (doc.IsWorkshared)\n{\n    TransactWithCentralOptions tco = new TransactWithCentralOptions();\n    SynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\n    swcOpts.Comment = \"{comment}\";\n    swcOpts.SaveLocalAfter = true;\n    doc.SynchronizeWithCentral(tco, swcOpts);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new sheet number '{sheet_number}' named '{sheet_name}' using the first available title block."}, {"role": "assistant", "content": "FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"{sheet_name}\";\n        sheet.SheetNumber = \"{sheet_number}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén el espacio MEP asociado a la habitación '{room_name}'."}, {"role": "assistant", "content": "Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"{room_name}\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un muro de 15.0 metros de largo y 3.0 metros de alto."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(15.0, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters), 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 'Nivel 1' level at 3.5m."}, {"role": "assistant", "content": "string levelName = \"Nivel 1\";\ndouble elev = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all clashes between pipes and beams."}, {"role": "assistant", "content": "ICollection<ElementId> pipeIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WhereElementIsNotElementType().ToElementIds();\nICollection<ElementId> beamIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().ToElementIds();\n\nif(pipeIds.Count > 0 && beamIds.Count > 0)\n{\n    List<ElementFilter> beamFilters = new List<ElementFilter>();\n    foreach(ElementId beamId in beamIds)\n    {\n        Element beam = doc.GetElement(beamId);\n        if(beam != null) beamFilters.Add(new ElementIntersectsElementFilter(beam));\n    }\n    LogicalOrFilter clashFilter = new LogicalOrFilter(beamFilters);\n    ICollection<ElementId> clashingPipeIds = new FilteredElementCollector(doc, pipeIds).WherePasses(clashFilter).ToElementIds();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new elevation view looking south."}, {"role": "assistant", "content": "ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null && activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 0);\n        if (aev != null)\n        {\n            aev.Name = \"South Elevation\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new 25cm wall type named 'Muro Básico 15cm'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Muro Básico 15cm\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (wallTypeToDuplicate != null)\n    {\n        WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n            cs.SetLayerWidth(coreLayerIndex, 25 / 100.0 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Modela una bandeja de cables entre el punto ({p1x_m}, {p1y_m}, {p1z_m}) y ({p2x_m}, {p2y_m}, {p2z_m})."}, {"role": "assistant", "content": "CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (trayType != null && level != null)\n{\n    XYZ p1 = new XYZ(UnitUtils.ConvertToInternalUnits({p1x_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p1y_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p1z_m}, UnitTypeId.Meters)); \n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({p2x_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p2y_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p2z_m}, UnitTypeId.Meters));\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una región rellena con un patrón de '{pattern_name}'."}, {"role": "assistant", "content": "FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"{pattern_name}\"));\nView activeView = doc.ActiveView;\n\nif (regionType != null && activeView != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 0,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(0, 5 / 0.3048,0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una ventana de 0.9x2.8 metros en la pared más cercana."}, {"role": "assistant", "content": "FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = $\"Window {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nota de texto con el texto '{note_text}', una ubicación y un elemento de destino dados."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{note_text}\", opts);\n    if (note != null)\n    {\n        note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L).End = targetRef.GlobalPoint;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una abertura rectangular en un suelo."}, {"role": "assistant", "content": "Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\n\nif (floor != null)\n{\n    XYZ p1 = new XYZ(1 / 0.3048, 1 / 0.3048, 0);\n    XYZ p2 = new XYZ(3 / 0.3048, 1 / 0.3048, 0);\n    XYZ p3 = new XYZ(3 / 0.3048, 3 / 0.3048, 0);\n    XYZ p4 = new XYZ(1 / 0.3048, 3 / 0.3048, 0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1, p2));\n    profile.Append(Line.CreateBound(p2, p3));\n    profile.Append(Line.CreateBound(p3, p4));\n    profile.Append(Line.CreateBound(p4, p1));\n    doc.Create.NewOpening(floor, profile, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo material llamado '{material_name}' con color ({color_r}, {color_g}, {color_b}) y transparencia de {transparency_percent}%."}, {"role": "assistant", "content": "ElementId materialId = Material.Create(doc, \"{material_name}\");\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color({color_r}, {color_g}, {color_b});\n        material.Transparency = {transparency_percent};\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create {num_worksets} worksets for engineering disciplines."}, {"role": "assistant", "content": "List<string> worksetNames = new List<string> {{ \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca pilares en todos los cruces de la rejilla."}, {"role": "assistant", "content": "FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    if(!colSymbol.IsActive) colSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                 if(results != null) {\n                     foreach (IntersectionResult ir in results)\n                     {\n                         doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                     }\n                 }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Generate a report with the area of all rooms in the project."}, {"role": "assistant", "content": "List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dibuja una región rellena con patrón diagonal."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nFillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n\nif (activeView != null && fillPattern != null)\n{\n    FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n    if (filledRegionType != null)\n    {\n        FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n        if (newType != null)\n        {\n            newType.ForegroundPatternId = fillPattern.Id;\n            XYZ p1 = new XYZ(0,0,0);\n            XYZ p2 = new XYZ(5 / 0.3048,0,0);\n            XYZ p3 = new XYZ(5 / 0.3048,5 / 0.3048,0);\n            XYZ p4 = new XYZ(0,5 / 0.3048,0);\n            CurveLoop profile = new CurveLoop();\n            profile.Append(Line.CreateBound(p1,p2));\n            profile.Append(Line.CreateBound(p2,p3));\n            profile.Append(Line.CreateBound(p3,p4));\n            profile.Append(Line.CreateBound(p4,p1));\n            FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop>{profile});\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Averigua quién es el propietario de un elemento seleccionado."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento\");\n\nWorksharingTooltipInfo info = null;\nif (pickedRef != null)\n{\n    info = WorksharingUtils.GetWorksharingTooltipInfo(doc, pickedRef.ElementId);\n}\n"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo material llamado '{material_name}' y asígnale un color base y una transparencia."}, {"role": "assistant", "content": "string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva hoja {sheet_size} y coloca la vista '{view_name}' en ella."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Sheet\"))\n{\n    t.Start();\n    string sheetNumber = \"A-101\";\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"{sheet_size}\"));\n    View viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<View>().FirstOrDefault(v => v.Name == \"{view_name}\");\n\n    if (titleBlock != null && viewToPlace != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            newSheet.Name = \"Planta Arquitectónica - {view_name}\";\n            newSheet.SheetNumber = sheetNumber;\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new door type named 'Double-Glass' and set its fire rating to '{fire_rating}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Double-Glass\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"{fire_rating}\");\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Temporarily isolate the selected elements in the active view."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToIsolate = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToIsolate.Count > 0)\n{\n    activeView.IsolateElementsTemporary(idsToIsolate);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Join the geometry of an intersecting column and floor."}, {"role": "assistant", "content": "Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\n\nif (column != null && floor != null)\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una abertura rectangular en un suelo."}, {"role": "assistant", "content": "Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\n\nif (floor != null)\n{\n    XYZ p1 = new XYZ(1 / 0.3048, 1 / 0.3048, 0);\n    XYZ p2 = new XYZ(3 / 0.3048, 1 / 0.3048, 0);\n    XYZ p3 = new XYZ(3 / 0.3048, 3 / 0.3048, 0);\n    XYZ p4 = new XYZ(1 / 0.3048, 3 / 0.3048, 0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1, p2));\n    profile.Append(Line.CreateBound(p2, p3));\n    profile.Append(Line.CreateBound(p3, p4));\n    profile.Append(Line.CreateBound(p4, p1));\n    doc.Create.NewOpening(floor, profile, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {text_size_mm}mm text type named '{type_name}' in green color."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a rectangular opening in a floor."}, {"role": "assistant", "content": "Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\n\nif (floor != null)\n{\n    XYZ p1 = new XYZ(1 / 0.3048, 1 / 0.3048, 0);\n    XYZ p2 = new XYZ(3 / 0.3048, 1 / 0.3048, 0);\n    XYZ p3 = new XYZ(3 / 0.3048, 3 / 0.3048, 0);\n    XYZ p4 = new XYZ(1 / 0.3048, 3 / 0.3048, 0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1, p2));\n    profile.Append(Line.CreateBound(p2, p3));\n    profile.Append(Line.CreateBound(p3, p4));\n    profile.Append(Line.CreateBound(p4, p1));\n    doc.Create.NewOpening(floor, profile, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el nombre de la vista activa a '{view_name}'."}, {"role": "assistant", "content": "string newName = \"{view_name}\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the '{schedule_name}' schedule and export its data to '{folder_path}{file_name}'."}, {"role": "assistant", "content": "ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s=>s.Name==\"{schedule_name}\");\n\nif (schedule != null)\n{\n    string folderPath = \"{folder_path}\";\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(folderPath, \"{file_name}\", options);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a vertical shaft opening from the base level to the top level."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\nif (bottomLevel != null && topLevel != null)\n{\n    XYZ p1 = new XYZ(2 / 0.3048, 2 / 0.3048,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 2 / 0.3048,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(2 / 0.3048, 5 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un suelo con un hueco circular de radio {radius_m}m en el centro."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    XYZ p1 = new XYZ(-10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p2 = new XYZ(10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p3 = new XYZ(10 / 0.3048, 10 / 0.3048, 0);\n    XYZ p4 = new XYZ(-10 / 0.3048, 10 / 0.3048, 0);\n    CurveLoop outerLoop = new CurveLoop();\n    outerLoop.Append(Line.CreateBound(p1, p2));\n    outerLoop.Append(Line.CreateBound(p2, p3));\n    outerLoop.Append(Line.CreateBound(p3, p4));\n    outerLoop.Append(Line.CreateBound(p4, p1));\n\n    XYZ center = XYZ.Zero;\n    double radius = {radius_m} / 0.3048;\n    CurveLoop innerLoop = new CurveLoop();\n    innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n    innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n    Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add a tag to the column closest to the origin."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n    LocationPoint lp = c.Location as LocationPoint;\n    return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n}).FirstOrDefault();\n\nif (activeView != null && column != null)\n{\n    LocationPoint loc = column.Location as LocationPoint;\n    if (loc != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place lighting posts every 6m along a 100m path."}, {"role": "assistant", "content": "FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a door 1.0m wide and 3.15m high in the wall."}, {"role": "assistant", "content": "Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = $\"Door {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the visibility of the 'Furniture' category to false in the active view."}, {"role": "assistant", "content": "Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a grid of {num_horizontal} horizontal and {num_vertical} vertical grids, spaced 6 meters apart."}, {"role": "assistant", "content": "double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint countH = {num_horizontal};\nint countV = {num_vertical};\nfor (int i = 0; i < countH; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((countV - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < countV; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (countH - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find out who the owner of a selected element is."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element\");\n\nWorksharingTooltipInfo info = null;\nif (pickedRef != null)\n{\n    info = WorksharingUtils.GetWorksharingTooltipInfo(doc, pickedRef.ElementId);\n}\n"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Inside the family editor, create a new horizontal reference plane named '{plane_name}'."}, {"role": "assistant", "content": "XYZ start = new XYZ(UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0, 0);\nXYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0);\nXYZ normal = XYZ.BasisY;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = \"{plane_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {sheet_size} sheet and place a legend on it."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"{sheet_size}\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Modela un plafón a 3.15 metros de altura en el Roof."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Roof\") as Level;\nCeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nif (ceilingType != null && level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0)));\n    profile.Append(Line.CreateBound(new XYZ(10,0,0), new XYZ(10,10,0)));\n    profile.Append(Line.CreateBound(new XYZ(10,10,0), new XYZ(0,10,0)));\n    profile.Append(Line.CreateBound(new XYZ(0,10,0), new XYZ(0,0,0)));\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters));\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera un reporte con el área de todas las habitaciones del proyecto."}, {"role": "assistant", "content": "List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nList<double> roomAreas = new List<double>();\nforeach (Room room in rooms)\n{\n    if (room != null && room.Area > 0)\n    {\n        roomAreas.Add(UnitUtils.ConvertFromInternalUnits(room.Area, UnitTypeId.SquareMeters));\n    }\n}\n// El orquestador puede ahora usar la lista 'roomAreas' para generar el reporte final."}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva vista de alzado mirando al norte."}, {"role": "assistant", "content": "ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null && activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 2);\n        if (aev != null)\n        {\n            aev.Name = \"Alzado Norte\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Temporarily isolate all furniture in the active view."}, {"role": "assistant", "content": "ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Asigna todos los muros al workset '{workset_name}'."}, {"role": "assistant", "content": "if (doc.IsWorkshared)\n{\n    Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w => w.Name == \"{workset_name}\");\n    if (ws != null)\n    {\n        FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n        foreach (Element e in collector)\n        {\n            Parameter p = e.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n            if (p != null && !p.IsReadOnly)\n            {\n                p.Set(ws.Id.IntegerValue);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Exporta la vista 3D activa a NWC para Navisworks."}, {"role": "assistant", "content": "View3D view3d = doc.ActiveView as View3D;\n\nif (view3d != null)\n{\n    string folderPath = \"C:/RevitExports/\";\n    string fileName = view3d.Name + \".nwc\";\n    NavisworksExportOptions options = new NavisworksExportOptions();\n    options.ExportScope = NavisworksExportScope.View;\n    options.ViewId = view3d.Id;\n    doc.Export(folderPath, fileName, options);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Model a railing on an existing staircase."}, {"role": "assistant", "content": "RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rename all plan views to start with '{prefix}'."}, {"role": "assistant", "content": "string prefix = \"{prefix}\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rota el norte del proyecto 45 grados en sentido horario."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInRadians = -(45 * Math.PI / 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Fija el elemento seleccionado para que no se mueva."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count > 0)\n{\n    Element elementToPin = doc.GetElement(selectedIds.First());\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Activate all family symbols loaded in the project."}, {"role": "assistant", "content": "List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) \n    {\n        sym.Activate();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a floor with a circular hole of {radius_m}m radius in the center."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    XYZ p1 = new XYZ(-10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p2 = new XYZ(10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p3 = new XYZ(10 / 0.3048, 10 / 0.3048, 0);\n    XYZ p4 = new XYZ(-10 / 0.3048, 10 / 0.3048, 0);\n    CurveLoop outerLoop = new CurveLoop();\n    outerLoop.Append(Line.CreateBound(p1, p2));\n    outerLoop.Append(Line.CreateBound(p2, p3));\n    outerLoop.Append(Line.CreateBound(p3, p4));\n    outerLoop.Append(Line.CreateBound(p4, p1));\n\n    XYZ center = XYZ.Zero;\n    double radius = {radius_m} / 0.3048;\n    CurveLoop innerLoop = new CurveLoop();\n    innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n    innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n    Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de puerta llamado 'Double-Glass' y establece su resistencia al fuego a '{fire_rating}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Double-Glass\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"{fire_rating}\");\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new wall type '{type_name}' with a thickness of 10cm."}, {"role": "assistant", "content": "WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, (10 / 100) / 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the sill height of all windows to 3.0 meter(s)."}, {"role": "assistant", "content": "double sillHeight = 3.0 / 0.3048;\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva tabla de planificación para ventanas que incluya Marca de Tipo, Ancho y Alto."}, {"role": "assistant", "content": "string scheduleName = \"Tabla de Ventanas\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade una etiqueta a la columna más cercana al origen."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n    LocationPoint lp = c.Location as LocationPoint;\n    return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n}).FirstOrDefault();\n\nif (activeView != null && column != null)\n{\n    LocationPoint loc = column.Location as LocationPoint;\n    if (loc != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un muro de 5.0 metros de largo y 2.8 metros de alto."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(5.0, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters), 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a vertical shaft opening from the base level to the top level."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\nif (bottomLevel != null && topLevel != null)\n{\n    XYZ p1 = new XYZ(2 / 0.3048, 2 / 0.3048,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 2 / 0.3048,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(2 / 0.3048, 5 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una copia de la vista activa y nómbrala '{view_name}'."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{view_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista de sección entre los puntos (5,5,3) y (15,5,3)."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(5,5,3);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),3);\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all rooms on the 'Level 2' Level."}, {"role": "assistant", "content": "Level targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nList<Element> roomsOnLevel = new List<Element>();\n\nif (targetLevel != null)\n{\n    roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == targetLevel.Id).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a stair between {level1_name} and {level2_name}."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{level1_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{level2_name}\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    // TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    // Stairs creation requires using the StairsEditScope class.\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a pipe with a 50mm diameter."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Millimeters));\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate the '{view_name}' plan view and name it '{template_name}'."}, {"role": "assistant", "content": "ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"{view_name}\");\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{template_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un muro cortina de 0.9 metros de ancho y 3.0 metros de alto."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters), 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Load a DWG link from '{file_path}', preserving its colors."}, {"role": "assistant", "content": "DWGImportOptions opts = new DWGImportOptions();\nopts.ColorMode = ImportColorMode.Preserved;\nElementId linkId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(\"{file_path}\", opts, activeView, out linkId);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 'Pilar 30x60' column at each grid intersection."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Pilar 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplica el tipo de muro '{original_name}' y nómbralo '{new_name}'."}, {"role": "assistant", "content": "string originalName = \"{original_name}\";\nstring newName = \"{new_name}\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new wall type 'SW12' with a thickness of 30cm."}, {"role": "assistant", "content": "string newTypeName = \"SW12\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30*10, UnitTypeId.Millimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all families and their types."}, {"role": "assistant", "content": "List<string> familyAndTypeNames = new List<string>();\nList<Family> families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().ToList();\nforeach (Family fam in families)\n{\n    familyAndTypeNames.Add($\"Family: {{fam.Name}}\");\n    foreach (ElementId symbolId in fam.GetFamilySymbolIds())\n    {\n        FamilySymbol sym = doc.GetElement(symbolId) as FamilySymbol;\n        if (sym != null)\n        {\n            familyAndTypeNames.Add($\"\\tType: {{sym.Name}}\");\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the 'Mark' parameter of all selected walls to '{mark_value}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) \n                {\n                    markParam.Set(\"{mark_value}\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Insert a window 1.0m wide and 3.0m high into a wall."}, {"role": "assistant", "content": "FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = $\"Window {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place a material tag on a wall face."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Face, \"Select a face to tag\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Select the tag location\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new door type named 'Double-Glass' and set the 'Fire Rating' parameter to '{fire_rating_value}'."}, {"role": "assistant", "content": "FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"Double-Glass\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"{fire_rating_value}\");\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todos los muros que no están asociados a ningún nivel."}, {"role": "assistant", "content": "ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva hoja {sheet_size} y colócale una leyenda."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"{sheet_size}\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Exporta el documento a la ruta '{folder_path}{file_name}' con la versión IFC {ifc_version_enum}."}, {"role": "assistant", "content": "string folderPath = \"{folder_path}\";\nstring fileName = \"{file_name}\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.{ifc_version_enum};\ndoc.Export(folderPath, fileName, options);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una losa de cimentación estructural de 25cm de espesor."}, {"role": "assistant", "content": "Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\nif (foundationLevel != null && slabType != null)\n{\n    // Assuming the user wants to modify the existing type. For a new type, Duplicate() is needed.\n    CompoundStructure cs = slabType.GetCompoundStructure();\n    if (cs != null && cs.GetFirstCoreLayerIndex() != -1) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Centimeters));\n        slabType.SetCompoundStructure(cs);\n    }\n\n    XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,15,0); XYZ p4 = new XYZ(0,15,0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén las coordenadas del punto base y del punto de reconocimiento."}, {"role": "assistant", "content": "BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all walls on Nivel 1 that are structural."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> {{ levelFilter, categoryFilter, structuralFilter }});\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Agrupa una tabla de planificación de habitaciones por Nivel."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Group Schedule\"))\n{\n    t.Start();\n    ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(vs => vs.Definition.CategoryId.IntegerValue == (int)BuiltInCategory.OST_Rooms);\n\n    if (schedule != null)\n    {\n        ScheduleDefinition def = schedule.Definition;\n        if (def != null)\n        {\n            SchedulableField schedulableField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ROOM_LEVEL_ID);\n            if (schedulableField != null)\n            {\n                ScheduleField field = def.AddField(schedulableField);\n                ScheduleSortGroupField sortGroupField = new ScheduleSortGroupField(field.FieldId);\n                sortGroupField.ShowHeader = true;\n                def.AddSortGroupField(sortGroupField);\n                def.IsItemized = false;\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un muro del tipo 'Exterior - Brick on Mtl. Stud' en el 'L01' desde (5,5) hasta (15,5)."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"L01\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Exterior - Brick on Mtl. Stud\") as WallType;\nXYZ startPoint = new XYZ(5, 5, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nWall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplica el tipo de muro '{original_name}' y nómbralo '{new_name}'."}, {"role": "assistant", "content": "string originalName = \"{original_name}\";\nstring newName = \"{new_name}\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva hoja {sheet_size} y colócale una leyenda."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"{sheet_size}\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un suelo con un contorno de 12.5 por 6.2 metros."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(12.5, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(6.2, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> {{ loop }}, floorType.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo parámetro de proyecto compartido de texto llamado '{param_name}' para muros y puertas."}, {"role": "assistant", "content": "string originalFile = doc.Application.SharedParametersFilename;\nstring tempFile = System.IO.Path.GetTempFileName() + \".txt\";\nusing (System.IO.File.Create(tempFile)) { }\ndoc.Application.SharedParametersFilename = tempFile;\n\ntry\n{\n    DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n    if (defFile != null)\n    {\n        DefinitionGroup group = defFile.Groups.Create(\"General\");\n        if (group != null)\n        {\n            ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(\"{param_name}\", ParameterType.Text);\n            Definition definition = group.Definitions.Create(options);\n            if (definition != null)\n            {\n                CategorySet categories = doc.Application.Create.NewCategorySet();\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                doc.ParameterBindings.Insert(definition, binding, Autodesk.Revit.DB.BuiltInParameterGroup.PG_DATA);\n            }\n        }\n    }\n}\nfinally\n{\n    doc.Application.SharedParametersFilename = originalFile;\n    System.IO.File.Delete(tempFile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new material named '{material_name}' with color ({color_r}, {color_g}, {color_b}) and {transparency_percent}% transparency."}, {"role": "assistant", "content": "ElementId materialId = Material.Create(doc, \"{material_name}\");\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color({color_r}, {color_g}, {color_b});\n        material.Transparency = {transparency_percent};\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un espacio MEP para cada habitación en el nivel 'Level 1'."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n\nif (level != null)\n{\n    List<Room> roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level.Id)).Cast<Room>().ToList();\n    foreach(Room room in roomsOnLevel)\n    {\n       Space.Create(doc, room, null);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rename all loaded families containing '{old_name}' to '{new_name}'."}, {"role": "assistant", "content": "List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"{old_name}\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"{old_name}\", \"{new_name}\");\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Delete all unused wall types in the project."}, {"role": "assistant", "content": "ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Insert a 15.0-meter truss between two points."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(15.0 / 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una rejilla de {num_horizontal} ejes horizontales y {num_vertical} verticales, espaciados 6 metros."}, {"role": "assistant", "content": "double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint countH = {num_horizontal};\nint countV = {num_vertical};\nfor (int i = 0; i < countH; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((countV - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < countV; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (countH - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade un punto al Path of Travel seleccionado."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un Path of Travel\");\n\nif (pickedRef != null)\n{\n    PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n    if (pot != null)\n    {\n        IList<XYZ> points = pot.GetPath();\n        if (points != null && points.Count >= 2)\n        {\n            XYZ midPoint = (points[0] + points[1]) / 2;\n            points.Insert(1, midPoint); \n            pot.Update(points);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add a horizontal grid line to a curtain wall at a height of 3.0 meters."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) / 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, 3.0 / 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Importa un archivo CAD llamado '{file_name}.dwg' en la vista actual."}, {"role": "assistant", "content": "string filePath = \"C:/CAD/{file_name}.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Import a CAD file named '{file_name}.dwg' into the current view."}, {"role": "assistant", "content": "string filePath = \"C:/CAD/{file_name}.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the sill height of all windows to 2.8 meter(s)."}, {"role": "assistant", "content": "double sillHeight = 2.8 / 0.3048;\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Recarga el vínculo de Revit '{link_name}'."}, {"role": "assistant", "content": "RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"{link_name}\");\nif(linkType != null)\n{\n    linkType.Reload();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista de sección usando una caja de 1.2x{depth_m}x3.15 metros."}, {"role": "assistant", "content": "ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\n\nif (sectionVFT != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(0,0,0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({depth_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Generate an electrical panel at X=2,Y=3."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && panelSymbol != null)\n{\n    if(!panelSymbol.IsActive) panelSymbol.Activate();\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca postes de iluminación cada 8m en un camino de 100m."}, {"role": "assistant", "content": "FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place an instance of the '{family_name}' family in the center of the '{room_name}' room."}, {"role": "assistant", "content": "Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"{room_name}\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"{family_name}\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista de planta para el 'Azotea'."}, {"role": "assistant", "content": "string levelName = \"Azotea\";\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Fija el elemento seleccionado para que no se mueva."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count > 0)\n{\n    Element elementToPin = doc.GetElement(selectedIds.First());\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aísla temporalmente todo el mobiliario en la vista activa."}, {"role": "assistant", "content": "ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Define un filtro de vista llamado '{filter_name}' para ocultar las líneas de detalle."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection<ElementId> catsToHide = new List<ElementId>{new ElementId(BuiltInCategory.OST_Lines)};\n    ElementFilter filter = new ElementCategoryFilter(new ElementId(BuiltInCategory.OST_Lines));\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"{filter_name}\", catsToHide, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de los nombres de todos los materiales."}, {"role": "assistant", "content": "List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las vistas de sección en el proyecto."}, {"role": "assistant", "content": "List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las familias de anotación y cuenta cuántas hay."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\nint count = annotationFamilies.Count;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls taller than 3.15 meters."}, {"role": "assistant", "content": "double heightThreshold = UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nList<ElementId> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an MEP space for each room on 'Roof'."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Roof\");\n\nif (level != null)\n{\n    List<Room> roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level.Id)).Cast<Room>().ToList();\n    foreach(Room room in roomsOnLevel)\n    {\n       Space.Create(doc, room, null);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new door type named 'Double-Glass' and set its fire rating to '{fire_rating}'."}, {"role": "assistant", "content": "string newTypeName = \"Double-Glass\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"{fire_rating}\");\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a beam system on a selected floor slab."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create beams between horizontally aligned columns."}, {"role": "assistant", "content": "FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    if(!beamSymbol.IsActive) beamSymbol.Activate();\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea {num_grids} ejes en sentido vertical separados {separation_m} metros."}, {"role": "assistant", "content": "double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i=0; i<{num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una topografía DirectShape a partir de una lista de puntos."}, {"role": "assistant", "content": "List<XYZ> points = new List<XYZ>\n{\n    new XYZ(0,0,0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0)\n};\nTessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[0], points[1], points[2]}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[1], points[3], points[2]}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_Topography));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"Topografía DirectShape\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new wall type 'SW12' with a thickness of 30cm."}, {"role": "assistant", "content": "string newTypeName = \"SW12\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30*10, UnitTypeId.Millimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the visibility of the 'Furniture' category to false in the active view."}, {"role": "assistant", "content": "Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una columna estructural en la posición X=2, Y=3."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the IDs of all 3D views starting with '{prefix}' for export."}, {"role": "assistant", "content": "List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"{prefix}\") && !v.IsTemplate).Select(v => v.Id).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create {num_worksets} worksets for engineering disciplines."}, {"role": "assistant", "content": "List<string> worksetNames = new List<string> {{ \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las familias de anotación y cuenta cuántas hay."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\nint count = annotationFamilies.Count;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las advertencias del proyecto."}, {"role": "assistant", "content": "IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a spherical DirectShape with a {radius_m}-meter radius."}, {"role": "assistant", "content": "double radius = {radius_m} / 0.3048;\nList<GeometryObject> solids = new List<GeometryObject>();\nFrame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\nArc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\nLine line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\nCurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\nSolid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\nsolids.Add(sphere);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(solids);\n    ds.Name = \"Sphere DirectShape\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de muro '{type_name}' con un grosor de 25cm."}, {"role": "assistant", "content": "WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, (25 / 100) / 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls that are not associated with any level."}, {"role": "assistant", "content": "ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca un mueble en las coordenadas (2,3)."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    if(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), furnitureSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the host element of the first window found."}, {"role": "assistant", "content": "FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva vista de alzado mirando al norte con el nombre \"{view_name}\"."}, {"role": "assistant", "content": "ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null && activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 2);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an extrusion roof with an arc profile."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a beam system on a selected floor slab."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Modela un barandal en una escalera existente."}, {"role": "assistant", "content": "RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all subcategories from the Walls category."}, {"role": "assistant", "content": "Category wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategoryNameMap subcategories = wallCat.SubCategories;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade un codo de 30 grados entre dos tuberías."}, {"role": "assistant", "content": "List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.ConnectorManager != null && p.ConnectorManager.UnusedConnectors.Size > 0).Take(2).ToList();\n\nif (pipes.Count >= 2)\n{\n    Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    \n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewElbowFitting(c1, c2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Align the centerlines of two user-selected walls."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select the first wall (the one that will move)\");\nReference r2 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select the second wall (the reference)\");\n\nif (r1 != null && r2 != null)\n{\n    Wall w1 = doc.GetElement(r1) as Wall;\n    Wall w2 = doc.GetElement(r2) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (w1 != null && w2 != null && activeView != null)\n    {\n        LocationCurve lc1 = w1.Location as LocationCurve;\n        LocationCurve lc2 = w2.Location as LocationCurve;\n        if (lc1 != null && lc2 != null)\n        {\n            doc.Create.NewAlignment(activeView, lc1.Curve.Reference, lc2.Curve.Reference);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Assign the '{material_name}' material to the first layer of a wall type."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"{material_name}\"));\n\n    if (wallType != null && material != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, material.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all section views in the project."}, {"role": "assistant", "content": "List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all material names."}, {"role": "assistant", "content": "List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de muro de 10cm llamado 'Muro Básico 15cm'."}, {"role": "assistant", "content": "string newTypeName = \"Muro Básico 15cm\";\nWallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(wallTypeToDuplicate != null)\n{\n    WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n            cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(10/100.0, UnitTypeId.Meters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create beams between horizontally aligned columns."}, {"role": "assistant", "content": "FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    if(!beamSymbol.IsActive) beamSymbol.Activate();\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un espacio MEP para cada habitación en el nivel 'Planta Baja'."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Planta Baja\");\n\nif (level != null)\n{\n    List<Room> roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level.Id)).Cast<Room>().ToList();\n    foreach(Room room in roomsOnLevel)\n    {\n       Space.Create(doc, room, null);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a DirectShape topography from a list of points."}, {"role": "assistant", "content": "List<XYZ> points = new List<XYZ>\n{\n    new XYZ(0,0,0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0)\n};\nTessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[0], points[1], points[2]}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[1], points[3], points[2]}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_Topography));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"Topography DirectShape\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo material llamado '{material_name}' con un patrón de superficie de madera."}, {"role": "assistant", "content": "string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Wood\") || p.Name.Contains(\"Madera\")) as FillPatternElement;\n    \n    if (material != null && fillPattern != null)\n    {\n        material.SurfaceForegroundPatternId = fillPattern.Id;\n        material.Color = new Color(139, 69, 19);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change the wall type of an existing wall to one containing '{type_name_substring}'."}, {"role": "assistant", "content": "Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(x => x.Name.Contains(\"{type_name_substring}\"));\n\nif (wallToChange != null && newType != null)\n{\n    wallToChange.ChangeTypeId(newType.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Given a selected wall, find all pipes passing through it."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\n\nList<ElementId> intersectingPipes = new List<ElementId>();\nif (wallRef != null)\n{\n    Element wall = doc.GetElement(wallRef);\n    if (wall != null)\n    {\n        ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n        intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds().ToList();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén todas las subcategorías de la categoría Muros."}, {"role": "assistant", "content": "Category wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategoryNameMap subcategories = wallCat.SubCategories;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Apply {thickness_mm}mm thermal insulation to all hot water pipes."}, {"role": "assistant", "content": "PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a section view between points (5,5,3) and (15,5,3)."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(5,5,3);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),3);\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aísla temporalmente los elementos seleccionados en la vista activa."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToIsolate = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToIsolate.Count > 0)\n{\n    activeView.IsolateElementsTemporary(idsToIsolate);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Exporta el modelo actual a un archivo NWC."}, {"role": "assistant", "content": "string folderPath = \"C:/exports/\";\nstring fileName = doc.Title + \".nwc\";\nNavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(folderPath, fileName, options);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplica el {level_to_duplicate} con un desfase de {offset_m}m y llámalo '{new_level_name}'."}, {"role": "assistant", "content": "string newLevelName = \"{new_level_name}\";\nLevel levelToDup = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{level_to_duplicate}\") as Level;\n\nif (levelToDup != null)\n{\n    double newElevation = levelToDup.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un sistema de vigas en un forjado seleccionado."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva tabla de planificación para Pilares Estructurales."}, {"role": "assistant", "content": "string scheduleName = \"Tabla de Pilares Estructurales\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add a tag to the column closest to the origin."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n    LocationPoint lp = c.Location as LocationPoint;\n    return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n}).FirstOrDefault();\n\nif (activeView != null && column != null)\n{\n    LocationPoint loc = column.Location as LocationPoint;\n    if (loc != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un tipo de muro '{type_name}' de 30cm y luego crea un muro de ese tipo."}, {"role": "assistant", "content": "WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), (30 / 100.0) / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add a reference point at coordinates (7,4,3) inside the family editor."}, {"role": "assistant", "content": "if(doc.IsFamilyDocument)\n{\n    doc.FamilyCreate.NewReferencePoint(new XYZ(7,4,3));\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera un reporte con el área de todas las habitaciones del proyecto."}, {"role": "assistant", "content": "List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change the type of a floor to one that contains 'Generic 12\"'."}, {"role": "assistant", "content": "Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Generic 12\"\"));\n\nif (floorToChange != null && newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el nivel de detalle de la vista activa a 'Medio'."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Medium;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una columna estructural en la posición X=7, Y=4."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Move a selected element to position (2,3)."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element to move\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            XYZ newPosition = new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), lp.Point.Z);\n            lp.Point = newPosition;\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de puerta llamado 'Double-Glass' y establece su resistencia al fuego a '{fire_rating}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Double-Glass\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"{fire_rating}\");\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place a spot elevation on Nivel 1."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    Level lvl = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    View activeView = doc.ActiveView;\n\n    if (lvl != null && activeView != null)\n    {\n        Reference levelRef = new Reference(lvl);\n        XYZ origin = new XYZ(5/0.3048, 5/0.3048, lvl.Elevation);\n        XYZ leaderEnd = origin + new XYZ(2/0.3048, 2/0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, levelRef, origin, origin, leaderEnd, origin, true);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Conecta dos tuberías con un codo."}, {"role": "assistant", "content": "List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().ToList();\nif (pipes.Count >= 2)\n{\n    Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewElbowFitting(c1, c2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Sincroniza el modelo local con el central, añadiendo el comentario '{comment}'."}, {"role": "assistant", "content": "if (doc.IsWorkshared)\n{\n    TransactWithCentralOptions tco = new TransactWithCentralOptions();\n    SynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\n    swcOpts.Comment = \"{comment}\";\n    swcOpts.SaveLocalAfter = true;\n    doc.SynchronizeWithCentral(tco, swcOpts);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea {num_worksets} worksets de arquitectura."}, {"role": "assistant", "content": "List<string> worksetNames = new List<string> {{ \"TAD_ARQ_MAM\", \"TAD_ARQ_ACA\", \"TAD_ARQ_PLA\", \"TAD_ARQ_PSO\", \"TAD_ARQ_HRE\", \"TAD_ARQ_ALU\", \"TAD_ARQ_CAR\", \"TAD_ARQ_MOB\", \"TAD_ARQ_PLO\", \"TAD_ARQ_EXT\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista de sección llamada '{view_name}'."}, {"role": "assistant", "content": "ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-1, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    \n    if (sectionView != null)\n    {\n        sectionView.Name = \"{view_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén todos los muros de un modelo vinculado que se cruzan con una caja de delimitación."}, {"role": "assistant", "content": "RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\nList<Element> linkedWalls = new List<Element>();\n\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    if (linkDoc != null)\n    {\n        BoundingBoxXYZ bbox = new BoundingBoxXYZ();\n        bbox.Min = new XYZ(0,0,0);\n        bbox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(bbox.Min, bbox.Max));\n        linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToList();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un parámetro global de longitud llamado '{param_name}' con valor de {value_m}m."}, {"role": "assistant", "content": "GlobalParameter gp = GlobalParameter.Create(doc, \"{param_name}\", SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits({value_m}, UnitTypeId.Meters)));\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the IDs of all 3D views starting with '{prefix}' for export."}, {"role": "assistant", "content": "List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"{prefix}\") && !v.IsTemplate).Select(v => v.Id).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a default 3D view."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new elevation view looking south."}, {"role": "assistant", "content": "string viewName = \"South Elevation (New)\";\nViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20, 0), 100);\nView aev = marker.CreateElevation(doc, doc.ActiveView.Id, 0);\naev.Name = viewName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aplica el estilo visual 'Rayos X' a la vista 3D activa."}, {"role": "assistant", "content": "View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe; // Simula el efecto 'Rayos X'\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 3D view oriented from the southeast."}, {"role": "assistant", "content": "string viewName = \"3D View Southeast\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra el elemento de pórtico estructural con la marca '{mark_value}'."}, {"role": "assistant", "content": "string markValue = \"{mark_value}\";\nElement framingElement = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_StructuralFraming)\n    .WhereElementIsNotElementType()\n    .FirstOrDefault(e => {\n        Parameter p = e.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        return p != null && p.AsString() == markValue;\n    });"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de texto llamado '{type_name}' de {text_size_mm}mm de color verde."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Importa una topografía desde un archivo CSV."}, {"role": "assistant", "content": "// CSV file reading is not directly supported by a single API call.\n// You would typically read the file line by line, parse the XYZ coordinates,\n// and then use the TopographySurface.Create method with a list of points.\n// As a placeholder, here's how to create a simple topography from a list of points:\nIList<XYZ> points = new List<XYZ>();\npoints.Add(new XYZ(0, 0, 0));\npoints.Add(new XYZ(10, 0, 0));\npoints.Add(new XYZ(0, 10, 0));\npoints.Add(new XYZ(10, 10, 5));\nTopographySurface.Create(doc, points);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de texto llamado '{type_name}' de {text_size_mm}mm de color verde."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find a wall by searching for the value '{mark_value}' in its Mark parameter."}, {"role": "assistant", "content": "string markValue = \"{mark_value}\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue);\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().WherePasses(filter).FirstOrDefault() as Wall;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new wall type '{type_name}' with a thickness of 10cm."}, {"role": "assistant", "content": "WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, (10 * 10) / 304.8);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Modela un barandal en una escalera existente."}, {"role": "assistant", "content": "RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de texto llamado '{type_name}' de {text_size_mm}mm de color verde."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea vigas entre las columnas alineadas horizontalmente."}, {"role": "assistant", "content": "FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    if(!beamSymbol.IsActive) beamSymbol.Activate();\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén las coordenadas del punto base y del punto de reconocimiento."}, {"role": "assistant", "content": "BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista 3D axonométrica orientada al Noroeste."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(-1, 1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(1, -1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = \"Vista 3D Noroeste\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dentro del editor de familias, crea un nuevo plano de referencia horizontal llamado '{plane_name}'."}, {"role": "assistant", "content": "XYZ start = new XYZ(UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0, 0);\nXYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0);\nXYZ normal = XYZ.BasisY;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = \"{plane_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea {num_grids} ejes en sentido vertical separados {separation_m} metros."}, {"role": "assistant", "content": "double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i=0; i<{num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new door type named 'Puerta 90x210' and set its fire rating to '{fire_rating}'."}, {"role": "assistant", "content": "string newTypeName = \"Puerta 90x210\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"{fire_rating}\");\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un circuito eléctrico conectando luminarias a un panel."}, {"role": "assistant", "content": "FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nList<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\nif (panel != null && fixtureIds.Count > 0)\n{\n    ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n    if(electricalSystem != null)\n    {\n        electricalSystem.SelectPanel(panel);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Recarga el vínculo de Revit '{link_name}'."}, {"role": "assistant", "content": "RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"{link_name}\");\n\nif (linkType != null)\n{\n    linkType.Reload();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplica el nivel '{original_level_name}' con un desfase de {offset_m}m y llámalo '{new_level_name}'."}, {"role": "assistant", "content": "Level originalLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{original_level_name}\") as Level;\n\nif (originalLevel != null)\n{\n    double newElevation = originalLevel.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = \"{new_level_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Export the model to IFC4 format for coordination."}, {"role": "assistant", "content": "string folderPath = \"C:/RevitExports/\";\nstring fileName = doc.Title + \"-Coordination.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4;\ndoc.Export(folderPath, fileName, options);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Mueve un elemento seleccionado a la posición (7,4)."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para mover\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            XYZ newPosition = new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), lp.Point.Z);\n            lp.Point = newPosition;\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place the '{view_name}' view in the center of the active sheet."}, {"role": "assistant", "content": "ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"{view_name}\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null && activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) / 2, (sheetBox.Min.V + sheetBox.Max.V) / 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Fill the material parameter of all walls with '{material_name}'."}, {"role": "assistant", "content": "Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"{material_name}\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade un plano de referencia horizontal llamado '{plane_name}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"{plane_name}\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera {num_grids} rejillas horizontales con una separación de {separation_m}m."}, {"role": "assistant", "content": "double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i < {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Export all sheets in a set to a single combined PDF."}, {"role": "assistant", "content": "ViewSheetSet sheetSet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheetSet)).FirstOrDefault() as ViewSheetSet;\n\nif (sheetSet != null)\n{\n    string folderPath = \"C:/RevitExports/\";\n    PDFExportOptions options = new PDFExportOptions();\n    options.Combine = true;\n    options.FileName = sheetSet.Name;\n    List<ElementId> sheetIds = sheetSet.Views.Cast<ViewSheet>().Select(s => s.Id).ToList();\n    doc.Export(folderPath, sheetIds, options);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de cota lineal llamado '{type_name}' con texto azul y tamaño {text_size_mm}mm."}, {"role": "assistant", "content": "DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\nif (linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"{type_name}\") as DimensionType;\n    if (newDimType != null)\n    {\n        Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n        Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de texto llamado '{type_name}' de {text_size_mm}mm de color verde."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las puertas del nivel 'Roof' que sean de la familia '{family_name}'."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Roof\");\nList<Element> doors = new List<Element>();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Insert a 7.8-meter truss between two points."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(7.8 / 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista de sección entre los puntos (5,5,3) y (15,5,3)."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(5,5,3);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),3);\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las vistas de sección en el proyecto."}, {"role": "assistant", "content": "List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a curtain wall 1.0 meters wide and 2.8 meters high."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters), 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a wall 7.8 meters long and 2.8 meters high."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(7.8, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters), 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {text_size_mm}mm text type named '{type_name}' in green color."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo material llamado '{material_name}' y asígnale un color base y una transparencia."}, {"role": "assistant", "content": "string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo Nivel llamado 'Nivel 2' a una elevación de 3.5 metros."}, {"role": "assistant", "content": "double elevation = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 2\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un tipo de muro '{type_name}' de 15cm y luego crea un muro de ese tipo."}, {"role": "assistant", "content": "WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 15 / 100 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca postes de iluminación cada 10m en un camino de 100m."}, {"role": "assistant", "content": "FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Generate a {rows}x{cols} column grid with 6-meter spacing."}, {"role": "assistant", "content": "FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n    for(int i=0; i<{rows}; i++)\n    {\n        for(int j=0; j<{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the coordinates of the project base point and the survey point."}, {"role": "assistant", "content": "BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera una cuadrícula de columnas {rows}x{cols} con separación de 8 metros."}, {"role": "assistant", "content": "FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<{rows}; i++)\n    {\n        for(int j=0; j<{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de texto de {text_size_mm}mm de color verde llamado '{type_name}'."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén la longitud total de todos los muros del proyecto."}, {"role": "assistant", "content": "double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Mueve un muro {distance_m} metros a la derecha."}, {"role": "assistant", "content": "Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (wall != null)\n{\n    XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters),0,0);\n    ElementTransformUtils.MoveElement(doc, wall.Id, translation);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Recarga el vínculo de Revit '{link_name}'."}, {"role": "assistant", "content": "RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"{link_name}\");\n\nif (linkType != null)\n{\n    linkType.Reload();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade el prefijo '{prefix}' a todas las vistas de plano."}, {"role": "assistant", "content": "string prefix = \"{prefix}\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo Nivel llamado 'Planta Baja' a una elevación de 3.5 metros."}, {"role": "assistant", "content": "double elevation = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Planta Baja\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Hide all walls shorter than 15.0 meters."}, {"role": "assistant", "content": "double lengthThreshold = UnitUtils.ConvertToInternalUnits(15.0, UnitTypeId.Meters);\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nList<ElementId> shortWallIds = new List<ElementId>();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    foreach(Wall wall in walls)\n    {\n        Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n        if(lengthParam != null && lengthParam.HasValue && lengthParam.AsDouble() < lengthThreshold)\n        {\n            shortWallIds.Add(wall.Id);\n        }\n    }\n    if (shortWallIds.Count > 0)\n    {\n        activeView.HideElements(shortWallIds);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un tipo de muro '{type_name}' de 15cm y luego crea un muro de ese tipo."}, {"role": "assistant", "content": "WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), (15 / 100.0) / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Modifica el tipo de muro de un muro existente a uno que contenga '{type_name_substring}'."}, {"role": "assistant", "content": "Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(x => x.Name.Contains(\"{type_name_substring}\"));\n\nif (wallToChange != null && newType != null)\n{\n    wallToChange.ChangeTypeId(newType.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva tabla de planificación para Pilares Estructurales."}, {"role": "assistant", "content": "string scheduleName = \"Tabla de Pilares Estructurales\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create {num_worksets} architectural worksets."}, {"role": "assistant", "content": "List<string> worksetNames = new List<string> {{ \"TAD_ARQ_WALLS\", \"TAD_ARQ_FINISHES\", \"TAD_ARQ_CEILINGS\", \"TAD_ARQ_FLOORS\", \"TAD_ARQ_RAILINGS\", \"TAD_ARQ_WINDOWS\", \"TAD_ARQ_CARPENTRY\", \"TAD_ARQ_FURNITURE\", \"TAD_ARQ_PLUMBING\", \"TAD_ARQ_EXTERIOR\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Desune la geometría de dos elementos dados."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona el primer elemento\");\nReference ref2 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona el segundo elemento\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a Path of Travel between points ({x1},{y1}) and ({x2},{y2}) in the plan view."}, {"role": "assistant", "content": "ViewPlan viewPlan = doc.ActiveView as ViewPlan;\n\nif (viewPlan != null && viewPlan.ViewType == ViewType.FloorPlan)\n{\n    ElementId levelId = viewPlan.get_Parameter(BuiltInParameter.PLAN_VIEW_LEVEL).AsElementId();\n    Level level = doc.GetElement(levelId) as Level;\n    if (level != null)\n    {\n        XYZ startPoint = new XYZ({x1} / 0.3048, {y1} / 0.3048, level.Elevation);\n        XYZ endPoint = new XYZ({x2} / 0.3048, {y2} / 0.3048, level.Elevation);\n        PathOfTravel.Create(viewPlan, startPoint, endPoint);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the total length of all walls in the project."}, {"role": "assistant", "content": "double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Move a selected element to position (2,3)."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element to move\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            XYZ newPosition = new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), lp.Point.Z);\n            lp.Point = newPosition;\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un Path of Travel entre los puntos ({x1},{y1}) y ({x2},{y2}) en la vista de planta."}, {"role": "assistant", "content": "ViewPlan viewPlan = doc.ActiveView as ViewPlan;\n\nif (viewPlan != null && viewPlan.ViewType == ViewType.FloorPlan)\n{\n    ElementId levelId = viewPlan.get_Parameter(BuiltInParameter.PLAN_VIEW_LEVEL).AsElementId();\n    Level level = doc.GetElement(levelId) as Level;\n    if (level != null)\n    {\n        XYZ startPoint = new XYZ({x1} / 0.3048, {y1} / 0.3048, level.Elevation);\n        XYZ endPoint = new XYZ({x2} / 0.3048, {y2} / 0.3048, level.Elevation);\n        PathOfTravel.Create(viewPlan, startPoint, endPoint);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aísla temporalmente todo el mobiliario en la vista activa."}, {"role": "assistant", "content": "ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva tabla de planificación para Pilares Estructurales."}, {"role": "assistant", "content": "string scheduleName = \"Tabla de Pilares Estructurales\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Alinea la cara de un muro con la cara de otro."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Face, \"Selecciona la cara de destino (estática)\");\nReference ref2 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Face, \"Selecciona la cara a mover\");\nView activeView = doc.ActiveView;\n\nif (ref1 != null && ref2 != null && activeView != null)\n{\n    doc.Create.NewAlignment(activeView, ref1, ref2);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una instancia de la familia '{family_name}' en el centro de la habitación '{room_name}'."}, {"role": "assistant", "content": "Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"{room_name}\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"{family_name}\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una tubería con un diámetro de 150mm."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(150, UnitTypeId.Millimeters));\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls that are not associated with any level."}, {"role": "assistant", "content": "ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una puerta de 1.2m de ancho y 3.0m de alto en el muro."}, {"role": "assistant", "content": "Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = $\"Door {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera una cuadrícula de columnas {rows}x{cols} con separación de 10 metros."}, {"role": "assistant", "content": "FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i=0; i<{rows}; i++)\n    {\n        for(int j=0; j<{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Apply the 'X-Ray' visual style to the active 3D view."}, {"role": "assistant", "content": "View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea columnas en cada intersección de ejes."}, {"role": "assistant", "content": "FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    if(!colSymbol.IsActive) colSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                 if(results != null) {\n                     foreach (IntersectionResult ir in results)\n                     {\n                         doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                     }\n                 }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un muro cortina de 0.9 metros de ancho y 3.15 metros de alto."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters), 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un suelo con un hueco circular de radio {radius_m}m en el centro."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    XYZ p1 = new XYZ(-10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p2 = new XYZ(10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p3 = new XYZ(10 / 0.3048, 10 / 0.3048, 0);\n    XYZ p4 = new XYZ(-10 / 0.3048, 10 / 0.3048, 0);\n    CurveLoop outerLoop = new CurveLoop();\n    outerLoop.Append(Line.CreateBound(p1, p2));\n    outerLoop.Append(Line.CreateBound(p2, p3));\n    outerLoop.Append(Line.CreateBound(p3, p4));\n    outerLoop.Append(Line.CreateBound(p4, p1));\n\n    XYZ center = XYZ.Zero;\n    double radius = {radius_m} / 0.3048;\n    CurveLoop innerLoop = new CurveLoop();\n    innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n    innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n    Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una abertura rectangular en un suelo."}, {"role": "assistant", "content": "Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\n\nif (floor != null)\n{\n    XYZ p1 = new XYZ(1 / 0.3048, 1 / 0.3048, 0);\n    XYZ p2 = new XYZ(3 / 0.3048, 1 / 0.3048, 0);\n    XYZ p3 = new XYZ(3 / 0.3048, 3 / 0.3048, 0);\n    XYZ p4 = new XYZ(1 / 0.3048, 3 / 0.3048, 0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1, p2));\n    profile.Append(Line.CreateBound(p2, p3));\n    profile.Append(Line.CreateBound(p3, p4));\n    profile.Append(Line.CreateBound(p4, p1));\n    doc.Create.NewOpening(floor, profile, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una superficie topográfica a partir de una lista de 4 puntos."}, {"role": "assistant", "content": "IList<XYZ> points = new List<XYZ>\n{\n    new XYZ(0, 0, 0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters))\n};\nTopographySurface.Create(doc, points);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las vistas de planta del proyecto."}, {"role": "assistant", "content": "List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén todas las habitaciones en el Nivel 'Roof'."}, {"role": "assistant", "content": "Level targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Roof\") as Level;\nList<Element> roomsOnLevel = new List<Element>();\n\nif (targetLevel != null)\n{\n    roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == targetLevel.Id).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Inserta una armadura (truss) de 5.0 metros entre dos puntos."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(5.0 / 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a SketchPlane on Basement."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Basement\");\n\nif (level != null)\n{\n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, new XYZ(0, 0, level.Elevation));\n    SketchPlane skp = SketchPlane.Create(doc, plane);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the solid geometry of a selected element."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element to get its geometry\");\n\nList<Solid> solids = new List<Solid>();\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        Options opt = new Options() {{ ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine }};\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if (geoElem != null)\n        {\n            solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Model a ceiling at a height of 2.8 meters on Roof."}, {"role": "assistant", "content": "CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Roof\") as Level;\n\nif (ceilingType != null && level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,0,0)));\n\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{{profile}}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva tabla de planificación para ventanas que incluya Marca de Tipo, Ancho y Alto."}, {"role": "assistant", "content": "string scheduleName = \"Tabla de Ventanas\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Alinea las líneas de centro de dos muros seleccionados por el usuario."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona el primer muro (el que se moverá)\");\nReference r2 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona el segundo muro (el de referencia)\");\n\nif (r1 != null && r2 != null)\n{\n    Wall w1 = doc.GetElement(r1) as Wall;\n    Wall w2 = doc.GetElement(r2) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (w1 != null && w2 != null && activeView != null)\n    {\n        LocationCurve lc1 = w1.Location as LocationCurve;\n        LocationCurve lc2 = w2.Location as LocationCurve;\n        if (lc1 != null && lc2 != null)\n        {\n            doc.Create.NewAlignment(activeView, lc1.Curve.Reference, lc2.Curve.Reference);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {text_size_mm}mm text type named '{type_name}' in green color."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Ajusta todas las ventanas para que tengan la altura del antepecho a {sill_height_mm}mm."}, {"role": "assistant", "content": "double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change the type of a floor to one that contains 'Generic 12\"'."}, {"role": "assistant", "content": "Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Generic 12\"\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Export the model to IFC4 format for coordination."}, {"role": "assistant", "content": "string folderPath = \"C:/RevitExports/\";\nstring fileName = doc.Title + \"-Coordination.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4;\ndoc.Export(folderPath, fileName, options);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el tipo de una losa por uno que contenga 'Suelo Hormigón 30cm'."}, {"role": "assistant", "content": "Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Suelo Hormigón 30cm\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all walls on Basement that are structural."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Basement\") as Level;\nif (level != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> {{ levelFilter, categoryFilter, structuralFilter }});\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nota de texto con el contenido '{content}' y una flecha apuntando a un elemento seleccionado."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference target = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para anotar\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (target != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    opts.HorizontalAlignment = HorizontalTextAlignment.Left;\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{content}\", opts);\n    if (note != null)\n    {\n        Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n        leader.End = target.GlobalPoint;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Calcula el área total de todas las habitaciones."}, {"role": "assistant", "content": "double totalArea = 0.0;\nList<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nforeach (Room room in rooms)\n{\n    totalArea += room.Area;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Export the current 3D view to NWC for Navisworks."}, {"role": "assistant", "content": "View3D view3d = doc.ActiveView as View3D;\n\nif (view3d != null)\n{\n    string folderPath = \"C:/RevitExports/\";\n    string fileName = view3d.Name + \".nwc\";\n    NavisworksExportOptions options = new NavisworksExportOptions();\n    options.ExportScope = NavisworksExportScope.View;\n    options.ViewId = view3d.Id;\n    doc.Export(folderPath, fileName, options);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all families and their types."}, {"role": "assistant", "content": "List<string> familyAndTypeNames = new List<string>();\nList<Family> families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().ToList();\nforeach (Family fam in families)\n{\n    familyAndTypeNames.Add($\"Family: {{fam.Name}}\");\n    foreach (ElementId symbolId in fam.GetFamilySymbolIds())\n    {\n        FamilySymbol sym = doc.GetElement(symbolId) as FamilySymbol;\n        if (sym != null)\n        {\n            familyAndTypeNames.Add($\"\\tType: {{sym.Name}}\");\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the visibility of the '{category_name}' category to false in the active view."}, {"role": "assistant", "content": "Category category = doc.Settings.Categories.get_Item(BuiltInCategory.{category_name});\nif (category != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(category.Id, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Copia todos los elementos del {source_level} al {target_level}."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{source_level}\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{target_level}\") as Level;\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(elementsToCopy.Any())\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista de plano de plafón reflejado para el Nivel 2."}, {"role": "assistant", "content": "string levelName = \"Nivel 2\";\nstring viewName = \"Plano de Plafón Nivel 2\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Apply the 'X-Ray' visual style to the active 3D view."}, {"role": "assistant", "content": "View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de los nombres de todos los materiales."}, {"role": "assistant", "content": "List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un DirectShape con forma de caja de {size_m}x{size_m}x{size_m} metros llamado '{shape_name}'."}, {"role": "assistant", "content": "TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits({size_m}, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"{shape_name}\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a filled region with a '{pattern_name}' pattern."}, {"role": "assistant", "content": "FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"{pattern_name}\"));\nView activeView = doc.ActiveView;\n\nif (regionType != null && activeView != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 0,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(0, 5 / 0.3048,0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Assign the '{material_name}' material to the first layer of a wall type."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"{material_name}\"));\n\n    if (wallType != null && material != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, material.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todos los muros con más de 2.8 metros de altura."}, {"role": "assistant", "content": "double heightThreshold = UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todos los muros que no tienen nivel base asignado."}, {"role": "assistant", "content": "ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the sill height of all windows to 3.0 meter(s)."}, {"role": "assistant", "content": "double sillHeight = 3.0 / 0.3048;\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Copia todos los elementos del {source_level} al {target_level}."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{source_level}\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{target_level}\") as Level;\n\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if (elementsToCopy.Count > 0)\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the total number of warnings in the project."}, {"role": "assistant", "content": "int totalWarnings = doc.GetWarnings().Count;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea vigas entre las columnas alineadas horizontalmente."}, {"role": "assistant", "content": "FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    if(!beamSymbol.IsActive) beamSymbol.Activate();\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a global length parameter named '{param_name}' with a value of {value_m}m."}, {"role": "assistant", "content": "GlobalParameter gp = GlobalParameter.Create(doc, \"{param_name}\", SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits({value_m}, UnitTypeId.Meters)));\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén la longitud total de todos los muros del proyecto."}, {"role": "assistant", "content": "double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all subcategories from the {buit_in_category_enum} category."}, {"role": "assistant", "content": "Category targetCategory = doc.Settings.Categories.get_Item(BuiltInCategory.{buit_in_category_enum});\nCategoryNameMap subcategories = targetCategory.SubCategories;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo nivel llamado 'Planta Baja' a una elevación de 3.5 metros."}, {"role": "assistant", "content": "string levelName = \"Planta Baja\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea {num_grids} ejes horizontales separados por {separation_m} metros."}, {"role": "assistant", "content": "double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i < {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Load a DWG link from '{file_path}', preserving its colors."}, {"role": "assistant", "content": "DWGImportOptions opts = new DWGImportOptions();\nopts.ColorMode = ImportColorMode.Preserved;\nElementId linkId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(\"{file_path}\", opts, activeView, out linkId);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a structural foundation slab 25cm thick named '{type_name}'."}, {"role": "assistant", "content": "Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nFloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\nif(slabTypeToDuplicate != null && foundationLevel != null)\n{\n    FloorType newSlabType = slabTypeToDuplicate.Duplicate(\"{type_name}\") as FloorType;\n    if(newSlabType != null)\n    {\n        CompoundStructure cs = newSlabType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), (25 * 10) / 304.8);\n            newSlabType.SetCompoundStructure(cs);\n            XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n            CurveLoop profile = new CurveLoop();\n            profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n            Floor.Create(doc, new List<CurveLoop>{profile}, newSlabType.Id, foundationLevel.Id);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista 3D con la caja de sección activada."}, {"role": "assistant", "content": "string viewName = \"Vista 3D con Caja de Sección\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rellena el parámetro de material de todos los muros con '{material_name}'."}, {"role": "assistant", "content": "Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"{material_name}\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Group a room schedule by Level."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Group Schedule\"))\n{\n    t.Start();\n    ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(vs => vs.Definition.CategoryId.IntegerValue == (int)BuiltInCategory.OST_Rooms);\n\n    if (schedule != null)\n    {\n        ScheduleDefinition def = schedule.Definition;\n        if (def != null)\n        {\n            SchedulableField schedulableField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ROOM_LEVEL_ID);\n            if (schedulableField != null)\n            {\n                ScheduleField field = def.AddField(schedulableField);\n                ScheduleSortGroupField sortGroupField = new ScheduleSortGroupField(field.FieldId);\n                sortGroupField.ShowHeader = true;\n                def.AddSortGroupField(sortGroupField);\n                def.IsItemized = false;\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new door type named 'Double-Glass' and set its fire rating to '{fire_rating_value}'."}, {"role": "assistant", "content": "FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"Double-Glass\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating_value}\");\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo nivel 'L01' a una elevación de -3.0 metros."}, {"role": "assistant", "content": "double elevation = UnitUtils.ConvertToInternalUnits(-3.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"L01\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Copy all elements from {source_level} to {target_level}."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{source_level}\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{target_level}\") as Level;\n\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if (elementsToCopy.Count > 0)\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Muestra un cuadro de diálogo con las opciones 'Sí', 'No' y 'Cancelar'."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a SketchPlane on Azotea."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Azotea\");\n\nif (level != null)\n{\n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, new XYZ(0, 0, level.Elevation));\n    SketchPlane skp = SketchPlane.Create(doc, plane);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un tipo de muro '{type_name}' de 10cm y luego crea un muro de ese tipo."}, {"role": "assistant", "content": "WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), (10 / 100.0) / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Acota la longitud de un muro seleccionado por el usuario."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Dimension Wall\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference wallRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un muro para acotar\");\n    if(wallRef != null)\n    {\n        Wall wall = doc.GetElement(wallRef) as Wall;\n        if(wall != null)\n        {\n            LocationCurve locCurve = wall.Location as LocationCurve;\n            Curve wallCurve = locCurve != null ? locCurve.Curve : null;\n            if(wallCurve != null && wallCurve is Line)\n            {\n                Line wallLine = wallCurve as Line;\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(doc.ActiveView, dimLine, refs);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a section view named '{view_name}'."}, {"role": "assistant", "content": "ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-1, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    \n    if (sectionView != null)\n    {\n        sectionView.Name = \"{view_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a section view named '{view_name}'."}, {"role": "assistant", "content": "ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-1, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    \n    if (sectionView != null)\n    {\n        sectionView.Name = \"{view_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra el elemento de pórtico estructural con la marca '{mark_value}'."}, {"role": "assistant", "content": "string markValue = \"{mark_value}\";\nElement framingElement = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_StructuralFraming)\n    .WhereElementIsNotElementType()\n    .FirstOrDefault(e => {\n        Parameter p = e.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        return p != null && p.AsString() == markValue;\n    });"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una tubería con un diámetro de 80mm."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(80, UnitTypeId.Millimeters));\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un SketchPlane en el L01."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"L01\");\n\nif (level != null)\n{\n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, new XYZ(0, 0, level.Elevation));\n    SketchPlane skp = SketchPlane.Create(doc, plane);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén la geometría sólida de un elemento seleccionado."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para obtener su geometría\");\nif(pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if(elem != null)\n    {\n        Options opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if(geoElem != null)\n        {\n            List<Solid> solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las familias de anotación."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de puerta llamado 'M_Single-Flush' y establece su resistencia al fuego a '{fire_rating}'."}, {"role": "assistant", "content": "string newTypeName = \"M_Single-Flush\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = null;\nif (doorTypeToDuplicate != null)\n{\n    newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating}\");\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create {num_worksets} worksets for engineering disciplines."}, {"role": "assistant", "content": "List<string> worksetNames = new List<string> {{ \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Adjust the view's crop region to a rectangle from ({x1},{y1}) to ({x2},{y2})."}, {"role": "assistant", "content": "View view = doc.ActiveView;\n\nif (view != null && view.CropBoxActive)\n{\n    BoundingBoxXYZ cropBox = view.CropBox;\n    if (cropBox != null)\n    {\n        XYZ minPoint = new XYZ({x1} / 0.3048, {y1} / 0.3048, cropBox.Min.Z);\n        XYZ maxPoint = new XYZ({x2} / 0.3048, {y2} / 0.3048, cropBox.Max.Z);\n        cropBox.Min = minPoint;\n        cropBox.Max = maxPoint;\n        view.CropBox = cropBox;\n        view.CropBoxVisible = true;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de tubería con material de {material_name}."}, {"role": "assistant", "content": "string newTypeName = \"Tubería de {material_name}\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"{material_name}\")) as Material;\n\nif (pipeTypeToDuplicate != null && material != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Move the selected elements {distance_m} meters up."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place an instance of the '{family_name}' family in the center of the '{room_name}' room."}, {"role": "assistant", "content": "Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"{room_name}\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"{family_name}\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all doors on level 'Basement' that belong to the '{family_name}' family."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Basement\");\nList<Element> doors = new List<Element>();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Export the current 3D view to NWC for Navisworks."}, {"role": "assistant", "content": "View3D view3d = doc.ActiveView as View3D;\n\nif (view3d != null)\n{\n    string folderPath = \"C:/RevitExports/\";\n    string fileName = view3d.Name + \".nwc\";\n    NavisworksExportOptions options = new NavisworksExportOptions();\n    options.ExportScope = NavisworksExportScope.View;\n    options.ViewId = view3d.Id;\n    doc.Export(folderPath, fileName, options);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva hoja con el número '{sheet_number}' y nombre '{sheet_name}'."}, {"role": "assistant", "content": "FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"{sheet_name}\";\n        sheet.SheetNumber = \"{sheet_number}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el tipo de todas las ventanas de '{old_type_name}' a '{new_type_name}'."}, {"role": "assistant", "content": "FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"{new_type_name}\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"{old_type_name}\"));\n\nif (newType != null && oldType != null)\n{\n    if(!newType.IsActive) newType.Activate();\n    List<FamilyInstance> windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva vista de alzado mirando al norte con el nombre \"{view_name}\"."}, {"role": "assistant", "content": "ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null && activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 2);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplica el tipo de muro '{original_name}' y nómbralo '{new_name}'."}, {"role": "assistant", "content": "string originalName = \"{original_name}\";\nstring newName = \"{new_name}\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una puerta de 0.9m de ancho y 3.15m de alto en el muro."}, {"role": "assistant", "content": "Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = $\"Door {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera un reporte con el área de todas las habitaciones del proyecto."}, {"role": "assistant", "content": "List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nList<double> roomAreas = new List<double>();\nforeach (Room room in rooms)\n{\n    if (room != null && room.Area > 0)\n    {\n        roomAreas.Add(UnitUtils.ConvertFromInternalUnits(room.Area, UnitTypeId.SquareMeters));\n    }\n}\n// El orquestador puede ahora usar la lista 'roomAreas' para generar el reporte final."}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a wall on Level 2 from (0,0,0) to (10,0,0) with a height of 3.0 meters."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(0, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(0, UnitTypeId.Meters));\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Oculta todas las categorías de anotación en la vista activa."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Hide Annotation Categories\"))\n{\n    t.Start();\n    Categories categories = doc.Settings.Categories;\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        foreach(Category cat in categories)\n        {\n            if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n            {\n                 activeView.SetCategoryHidden(cat.Id, true);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera una cuadrícula de columnas {rows}x{cols} con separación de 8 metros."}, {"role": "assistant", "content": "FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<{rows}; i++)\n    {\n        for(int j=0; j<{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un muro en el Azotea que vaya de (0,0,0) a (10,0,0) con una altura de 2.8 metros."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Azotea\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(0, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(0, UnitTypeId.Meters));\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una cimentación de viga de 7.8 metros de largo."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(7.8, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Footing);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aísla temporalmente la categoría {built_in_category_enum} en la vista activa."}, {"role": "assistant", "content": "ElementId categoryId = new ElementId(BuiltInCategory.{built_in_category_enum});\nICollection<ElementId> categoryIds = new List<ElementId> { categoryId };\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateCategoriesTemporary(categoryIds);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate the '{view_name}' view as a dependent view."}, {"role": "assistant", "content": "ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"{view_name}\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea {num_worksets} worksets para las disciplinas de ingeniería."}, {"role": "assistant", "content": "List<string> worksetNames = new List<string> {{ \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dibuja una región rellena con patrón diagonal."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n    if (activeView != null && fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(new XYZ(0, 0, 0), new XYZ(5, 0, 0)));\n                profile.Append(Line.CreateBound(new XYZ(5, 0, 0), new XYZ(5, 5, 0)));\n                profile.Append(Line.CreateBound(new XYZ(5, 5, 0), new XYZ(0, 5, 0)));\n                profile.Append(Line.CreateBound(new XYZ(0, 5, 0), new XYZ(0, 0, 0)));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop> { profile });\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un tipo de muro 'Generic - 200mm' de 20cm y luego crea un muro de ese tipo."}, {"role": "assistant", "content": "string newTypeName = \"Generic - 200mm\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == newTypeName) as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if(newWallType!=null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if(cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(20/10.0, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nLine wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\nWall.Create(doc, wallCurve, newWallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new door type named 'Puerta 90x210' and set its fire rating to '{fire_rating}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Puerta 90x210\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"{fire_rating}\");\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una instancia de la familia '{family_name}' en el centro de la habitación '{room_name}'."}, {"role": "assistant", "content": "Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"{room_name}\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"{family_name}\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Hide all annotation categories in the active view."}, {"role": "assistant", "content": "Categories categories = doc.Settings.Categories;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    foreach(Category cat in categories)\n    {\n        if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n        {\n             activeView.SetCategoryHidden(cat.Id, true);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Delete all unused wall types in the project."}, {"role": "assistant", "content": "ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Import a topography from a CSV file."}, {"role": "assistant", "content": "// CSV file reading is not directly supported by a single API call.\n// You would typically read the file line by line, parse the XYZ coordinates,\n// and then use the TopographySurface.Create method with a list of points.\n// As a placeholder, here's how to create a simple topography from a list of points:\nIList<XYZ> points = new List<XYZ>();\npoints.Add(new XYZ(0, 0, 0));\npoints.Add(new XYZ(10, 0, 0));\npoints.Add(new XYZ(0, 10, 0));\npoints.Add(new XYZ(10, 10, 5));\nTopographySurface.Create(doc, points);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade un plano de referencia horizontal llamado '{plane_name}'."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    XYZ bubbleEnd = new XYZ(0, 10, 0);\n    XYZ freeEnd = new XYZ(10, 10, 0);\n    XYZ cutVec = XYZ.BasisZ;\n    ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n    if (rp != null)\n    {\n        rp.Name = \"{plane_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a view filter to hide demolished walls."}, {"role": "assistant", "content": "Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p => p.Name.Contains(\"Demolished\") || p.Name.Contains(\"Demolición\"));\nView activeView = doc.ActiveView;\n\nif (demolishedPhase != null && activeView != null)\n{\n    ElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\n    FilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\n    ElementFilter filter = new ElementParameterFilter(rule);\n    ICollection<ElementId> categories = new List<ElementId>{ new ElementId(BuiltInCategory.OST_Walls) };\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Demolition Filter\", categories, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nivel 'Basement' a -3.0m."}, {"role": "assistant", "content": "string levelName = \"Basement\";\ndouble elev = UnitUtils.ConvertToInternalUnits(-3.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de los nombres de todos los materiales."}, {"role": "assistant", "content": "List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aísla temporalmente todo el mobiliario en la vista activa."}, {"role": "assistant", "content": "ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade los campos 'Nivel', 'Marca' y 'Volumen' a la tabla de pilares."}, {"role": "assistant", "content": "ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\") || s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Conecta dos bandejas de cables con un codo."}, {"role": "assistant", "content": "List<CableTray> trays = new FilteredElementCollector(doc).OfClass(typeof(CableTray)).Cast<CableTray>().ToList();\n\nif (trays.Count >= 2)\n{\n    Connector c1 = trays[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = trays[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    \n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewUnionFitting(c1, c2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén todas las subcategorías de la categoría Muros."}, {"role": "assistant", "content": "Category wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategoryNameMap subcategories = wallCat.SubCategories;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the IDs of all 3D views starting with '{prefix}' for export."}, {"role": "assistant", "content": "List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"{prefix}\") && !v.IsTemplate).Select(v => v.Id).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change the detail level of the active view to 'Medium'."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Medium;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Une la geometría de una columna y un suelo que se cruzan."}, {"role": "assistant", "content": "Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\nif (column != null && floor != null)\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todos los muros con más de 2.8 metros de altura."}, {"role": "assistant", "content": "double heightThreshold = UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new elevation view looking south."}, {"role": "assistant", "content": "string viewName = \"South Elevation (New)\";\nViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20, 0), 100);\nView aev = marker.CreateElevation(doc, doc.ActiveView.Id, 0);\naev.Name = viewName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Generate a {rows}x{cols} column grid with 6-meter spacing."}, {"role": "assistant", "content": "FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n    for(int i=0; i<{rows}; i++)\n    {\n        for(int j=0; j<{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una puerta de 0.9m de ancho y 3.0m de alto en el muro."}, {"role": "assistant", "content": "Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = $\"Door {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra un muro buscando el valor '{mark_value}' en su parámetro de Marca."}, {"role": "assistant", "content": "string markValue = \"{mark_value}\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue);\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().WherePasses(filter).FirstOrDefault() as Wall;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una viga estructural entre (5,5,3) y (15,5,3) en el L01."}, {"role": "assistant", "content": "FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"L01\") as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(5, 5, 3);\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una columna estructural en la posición X=7, Y=4."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplica la vista '{view_name}' como una vista dependiente."}, {"role": "assistant", "content": "ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"{view_name}\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una escalera entre {level1_name} y {level2_name}."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{level1_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{level2_name}\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    // TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    // Stairs creation requires using the StairsEditScope class.\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change the family name of a selected door to '{new_family_name}'."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a door\");\n\nif (pickedRef != null)\n{\n    FamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (door != null && door.Symbol != null)\n    {\n        Family family = door.Symbol.Family;\n        if (family != null)\n        {\n            family.Name = \"{new_family_name}\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de tubería llamado 'Acero - Carbono' con material '{material_name}'."}, {"role": "assistant", "content": "PipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"{material_name}\") as Material;\n\nif (pipeTypeToDuplicate != null && material != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(\"Acero - Carbono\") as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un techo por extrusión con un perfil en arco."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null && roofType != null && doc.ActiveView != null)\n{\n    CurveArray profile = new CurveArray();\n    profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    if(refPlane != null)\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Acota la longitud de un muro seleccionado por el usuario."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un muro para acotar\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade refuerzo a una columna."}, {"role": "assistant", "content": "RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all annotation families and count how many there are."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\nint count = annotationFamilies.Count;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Conecta dos bandejas de cables con un codo."}, {"role": "assistant", "content": "List<CableTray> trays = new FilteredElementCollector(doc).OfClass(typeof(CableTray)).Cast<CableTray>().ToList();\n\nif (trays.Count >= 2)\n{\n    Connector c1 = trays[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = trays[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    \n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewUnionFitting(c1, c2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia un panel de vidrio de un muro cortina por un panel sólido."}, {"role": "assistant", "content": "Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\nFamilySymbol solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_CurtainWallPanels && (fs.Name.Contains(\"Solid\") || fs.Name.Contains(\"Sólido\")));\n\nif (curtainWall != null && solidPanelType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    if (grid != null)\n    {\n        ElementId panelIdToChange = grid.GetPanelIds().FirstOrDefault();\n        if (panelIdToChange != ElementId.InvalidElementId)\n        {\n            Panel panelToChange = doc.GetElement(panelIdToChange) as Panel;\n            if (panelToChange != null) panelToChange.ChangeTypeId(solidPanelType.Id);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las vistas que no tienen una plantilla de vista asignada."}, {"role": "assistant", "content": "List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId.Equals(ElementId.InvalidElementId)).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a spherical DirectShape with a {radius_m}-meter radius."}, {"role": "assistant", "content": "double radius = {radius_m} / 0.3048;\nList<GeometryObject> solids = new List<GeometryObject>();\nFrame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\nArc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\nLine line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\nCurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\nSolid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\nsolids.Add(sphere);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(solids);\n    ds.Name = \"Sphere DirectShape\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Oculta todos los elementos de anotación en la vista activa."}, {"role": "assistant", "content": "if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera un equipo eléctrico en X=7,Y=4."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(level != null && panelSymbol != null)\n{\n    if(!panelSymbol.IsActive) panelSymbol.Activate();\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a structural foundation slab 30cm thick named '{type_name}'."}, {"role": "assistant", "content": "Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nFloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\nif(slabTypeToDuplicate != null && foundationLevel != null)\n{\n    FloorType newSlabType = slabTypeToDuplicate.Duplicate(\"{type_name}\") as FloorType;\n    if(newSlabType != null)\n    {\n        CompoundStructure cs = newSlabType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), (30 * 10) / 304.8);\n            newSlabType.SetCompoundStructure(cs);\n            XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n            CurveLoop profile = new CurveLoop();\n            profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n            Floor.Create(doc, new List<CurveLoop>{profile}, newSlabType.Id, foundationLevel.Id);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el nombre de la vista activa a '{view_name}'."}, {"role": "assistant", "content": "string newName = \"{view_name}\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén las coordenadas del punto base y del punto de reconocimiento."}, {"role": "assistant", "content": "BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place a camera named '{view_name}' at position ({eye_x_m}, {eye_y_m}, {eye_z_m})."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        cameraView.Name = \"{view_name}\";\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits({eye_x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_z_m}, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls that have no base level assigned."}, {"role": "assistant", "content": "ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 1.2x3.15 meter foundation slab."}, {"role": "assistant", "content": "Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n\nif (foundationLevel != null && slabType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(1.2/0.3048, 0, 0);\n    XYZ p3 = new XYZ(1.2/0.3048, 3.15/0.3048, 0);\n    XYZ p4 = new XYZ(0, 3.15/0.3048, 0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de puerta llamado 'Double-Glass' y establece su resistencia al fuego a '{fire_rating_value}'."}, {"role": "assistant", "content": "FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"Double-Glass\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating_value}\");\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a section view between points (5,5,3) and (15,5,3)."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(5,5,3);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),3);\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén el elemento anfitrión de la primera ventana que encuentres."}, {"role": "assistant", "content": "FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplica la vista de planta '{view_name}' y nómbrala '{template_name}'."}, {"role": "assistant", "content": "ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"{view_name}\");\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{template_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Tag all rooms with their area."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(locPoint.Point.X, locPoint.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place a material tag on a wall face."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Face, \"Select a face to tag\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Select the tag location\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a structural beam between (5,5,3) and (15,5,3) on Level 2."}, {"role": "assistant", "content": "FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(5, 5, 3);\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las vistas de sección en el proyecto."}, {"role": "assistant", "content": "List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an extrusion roof with a {slope_percentage}% slope."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null && roofType != null)\n{\n    double run = 10.0;\n    double rise = run * ({slope_percentage} / 100.0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(run / 0.3048, 0, rise / 0.3048)));\n    \n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    \n    if (refPlane != null)\n    {\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, run / 0.3048);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una cimentación de viga de 7.8 metros de largo."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(7.8, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Footing);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all doors on level 'Level 1' that belong to the '{family_name}' family."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nList<Element> doors = new List<Element>();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new elevation view looking south."}, {"role": "assistant", "content": "ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null && activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 0);\n        if (aev != null)\n        {\n            aev.Name = \"South Elevation\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de texto llamado '{type_name}' de {text_size_mm}mm de color verde."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nTextNoteType newType = null;\nif (defaultType != null)\n{\n    newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 3D view with the section box enabled."}, {"role": "assistant", "content": "string viewName = \"3D View with Section Box\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera un equipo eléctrico en X=2,Y=3."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && panelSymbol != null)\n{\n    if(!panelSymbol.IsActive) panelSymbol.Activate();\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el tipo de todas las ventanas de '{old_type_name}' a '{new_type_name}'."}, {"role": "assistant", "content": "FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"{new_type_name}\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"{old_type_name}\"));\n\nif (newType != null && oldType != null)\n{\n    if(!newType.IsActive) newType.Activate();\n    List<FamilyInstance> windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén los IDs de todas las vistas 3D que empiezan con '{prefix}' para exportación."}, {"role": "assistant", "content": "List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"{prefix}\") && !v.IsTemplate).Select(v => v.Id).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add reinforcement to a column."}, {"role": "assistant", "content": "RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un suelo con un hueco circular de radio {radius_m}m en el centro."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    XYZ p1 = new XYZ(-10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p2 = new XYZ(10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p3 = new XYZ(10 / 0.3048, 10 / 0.3048, 0);\n    XYZ p4 = new XYZ(-10 / 0.3048, 10 / 0.3048, 0);\n    CurveLoop outerLoop = new CurveLoop();\n    outerLoop.Append(Line.CreateBound(p1, p2));\n    outerLoop.Append(Line.CreateBound(p2, p3));\n    outerLoop.Append(Line.CreateBound(p3, p4));\n    outerLoop.Append(Line.CreateBound(p4, p1));\n\n    XYZ center = XYZ.Zero;\n    double radius = {radius_m} / 0.3048;\n    CurveLoop innerLoop = new CurveLoop();\n    innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n    innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n    Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una superficie topográfica a partir de una lista de 4 puntos."}, {"role": "assistant", "content": "IList<XYZ> points = new List<XYZ>\n{\n    new XYZ(0, 0, 0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters))\n};\nTopographySurface.Create(doc, points);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all walls from a linked model that intersect with a bounding box."}, {"role": "assistant", "content": "RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\nList<Element> linkedWalls = new List<Element>();\n\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    if (linkDoc != null)\n    {\n        BoundingBoxXYZ bbox = new BoundingBoxXYZ();\n        bbox.Min = new XYZ(0,0,0);\n        bbox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(bbox.Min, bbox.Max));\n        linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToList();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista 3D orientada desde el sureste."}, {"role": "assistant", "content": "string viewName = \"Vista 3D Sureste\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de cota lineal llamado '{type_name}' con texto azul y tamaño {text_size_mm}mm."}, {"role": "assistant", "content": "DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\nif (linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"{type_name}\") as DimensionType;\n    if (newDimType != null)\n    {\n        Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n        Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 'Nivel 1' level at 3.5m."}, {"role": "assistant", "content": "string levelName = \"Nivel 1\";\ndouble elev = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un techo por contorno en el 'Nivel 1'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n    if(roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 / 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,0,0), new XYZ(20 / 0.3048,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,30 / 0.3048,0), new XYZ(0,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 / 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una etiqueta de material en una cara de muro."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Face, \"Selecciona una cara para etiquetar\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Selecciona la ubicación de la etiqueta\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de muro '{type_name}' con un grosor de 25cm."}, {"role": "assistant", "content": "WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, (25 / 100) / 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an 5.0-meter long foundation beam."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(5.0, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Footing);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las vistas de sección en el proyecto."}, {"role": "assistant", "content": "List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an electrical conduit with a {diameter_inch}-inch diameter."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 / 0.3048);\n        XYZ end = new XYZ(5 / 0.3048, 0, 3 / 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set({diameter_inch} / 12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create columns at each grid intersection."}, {"role": "assistant", "content": "FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    if(!colSymbol.IsActive) colSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                 if(results != null) {\n                     foreach (IntersectionResult ir in results)\n                     {\n                         doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                     }\n                 }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Carga un enlace DWG desde '{file_path}' preservando los colores."}, {"role": "assistant", "content": "DWGImportOptions opts = new DWGImportOptions();\nopts.ColorMode = ImportColorMode.Preserved;\nElementId linkId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(\"{file_path}\", opts, activeView, out linkId);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Generate a rectangular floor of 12.5x6.2 meters."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(12.5, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(6.2, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> {{ loop }}, floorType.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un techo por extrusión con una pendiente del {slope_percentage}%."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null && roofType != null)\n{\n    double run = 10.0;\n    double rise = run * ({slope_percentage} / 100.0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(run / 0.3048, 0, rise / 0.3048)));\n    \n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    \n    if (refPlane != null)\n    {\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, run / 0.3048);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera un reporte con el área de todas las habitaciones del proyecto."}, {"role": "assistant", "content": "List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nList<double> roomAreas = new List<double>();\nforeach (Room room in rooms)\n{\n    if (room != null && room.Area > 0)\n    {\n        roomAreas.Add(UnitUtils.ConvertFromInternalUnits(room.Area, UnitTypeId.SquareMeters));\n    }\n}\n// El orquestador puede ahora usar la lista 'roomAreas' para generar el reporte final."}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Draw a {width_mm}x{height_mm} millimeter rectangular ventilation duct."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast<DuctType>().FirstOrDefault(d => d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null && ductType != null && systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 / 0.3048);\n        XYZ p2 = new XYZ(10 / 0.3048, 0, 3 / 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null && !widthParam.IsReadOnly) widthParam.Set({width_mm} / 304.8);\n            if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set({height_mm} / 304.8);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén la longitud total de todos los muros del proyecto."}, {"role": "assistant", "content": "double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Calcula el área total de todas las habitaciones."}, {"role": "assistant", "content": "double totalArea = 0.0;\nList<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nforeach (Room room in rooms)\n{\n    totalArea += room.Area;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Export the document to '{folder_path}{file_name}' with IFC version {ifc_version_enum}."}, {"role": "assistant", "content": "string folderPath = \"{folder_path}\";\nstring fileName = \"{file_name}\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.{ifc_version_enum};\ndoc.Export(folderPath, fileName, options);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find a wall by searching for the value '{mark_value}' in its Mark parameter."}, {"role": "assistant", "content": "string markValue = \"{mark_value}\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue);\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().WherePasses(filter).FirstOrDefault() as Wall;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un pilar del tipo 'Pilar 30x60' en cada intersección de la rejilla."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Pilar 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un SketchPlane en el Azotea."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Azotea\");\n\nif (level != null)\n{\n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, new XYZ(0, 0, level.Elevation));\n    SketchPlane skp = SketchPlane.Create(doc, plane);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Modela un plafón a 3.0 metros de altura en Nivel 2."}, {"role": "assistant", "content": "CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\n\nif (ceilingType != null && level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,0,0)));\n\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{{profile}}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters));\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an extrusion roof with a {slope_percentage}% slope."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null && roofType != null)\n{\n    double run = 10.0;\n    double rise = run * ({slope_percentage} / 100.0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(run / 0.3048, 0, rise / 0.3048)));\n    \n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    \n    if (refPlane != null)\n    {\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, run / 0.3048);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 'Nivel 2' level at 3.5m."}, {"role": "assistant", "content": "string levelName = \"Nivel 2\";\ndouble elev = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Asigna el material '{material_name}' a la primera capa de un tipo de muro."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"{material_name}\"));\n\n    if (wallType != null && material != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, material.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all walls on Nivel 1 that are structural."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> {{ levelFilter, categoryFilter, structuralFilter }});\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new revision with description '{description}', issued by '{issued_by}' on '{date}', and apply it to the active sheet."}, {"role": "assistant", "content": "Revision rev = Revision.Create(doc);\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (rev != null && sheet != null)\n{\n    rev.Description = \"{description}\";\n    rev.RevisionDate = \"{date}\";\n    rev.IssuedBy = \"{issued_by}\";\n    \n    ICollection<ElementId> revisions = sheet.GetAdditionalRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create {num_grids} horizontal grids spaced {separation_m} meters apart."}, {"role": "assistant", "content": "double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i < {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Hide all walls shorter than 15.0 meters."}, {"role": "assistant", "content": "double lengthThreshold = UnitUtils.ConvertToInternalUnits(15.0, UnitTypeId.Meters);\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nList<ElementId> shortWallIds = new List<ElementId>();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    foreach(Wall wall in walls)\n    {\n        Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n        if(lengthParam != null && lengthParam.HasValue && lengthParam.AsDouble() < lengthThreshold)\n        {\n            shortWallIds.Add(wall.Id);\n        }\n    }\n    if (shortWallIds.Count > 0)\n    {\n        activeView.HideElements(shortWallIds);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {text_size_mm}mm text type named '{type_name}' in green color."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade un punto de referencia en las coordenadas (7,4,3) dentro del editor de familias."}, {"role": "assistant", "content": "if(doc.IsFamilyDocument)\n{\n    doc.FamilyCreate.NewReferencePoint(new XYZ(7,4,3));\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an axonometric 3D view oriented to the Northwest."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(-1, 1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(1, -1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = \"3D View Northwest\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las familias y sus tipos."}, {"role": "assistant", "content": "List<string> familyAndTypeNames = new List<string>();\nList<Family> families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().ToList();\nforeach (Family fam in families)\n{\n    familyAndTypeNames.Add($\"Familia: {{fam.Name}}\");\n    foreach (ElementId symbolId in fam.GetFamilySymbolIds())\n    {\n        FamilySymbol sym = doc.GetElement(symbolId) as FamilySymbol;\n        if (sym != null)\n        {\n            familyAndTypeNames.Add($\"\\tTipo: {{sym.Name}}\");\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a detail group with the selected detail items."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Typical Detail 1\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new shared text project parameter named '{param_name}' for walls and doors."}, {"role": "assistant", "content": "string originalFile = doc.Application.SharedParametersFilename;\nstring tempFile = System.IO.Path.GetTempFileName() + \".txt\";\nusing (System.IO.File.Create(tempFile)) { }\ndoc.Application.SharedParametersFilename = tempFile;\n\ntry\n{\n    DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n    if (defFile != null)\n    {\n        DefinitionGroup group = defFile.Groups.Create(\"General\");\n        if (group != null)\n        {\n            ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(\"{param_name}\", ParameterType.Text);\n            Definition definition = group.Definitions.Create(options);\n            if (definition != null)\n            {\n                CategorySet categories = doc.Application.Create.NewCategorySet();\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                doc.ParameterBindings.Insert(definition, binding, Autodesk.Revit.DB.BuiltInParameterGroup.PG_DATA);\n            }\n        }\n    }\n}\nfinally\n{\n    doc.Application.SharedParametersFilename = originalFile;\n    System.IO.File.Delete(tempFile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dentro del editor de familias, crea un plano de referencia vertical llamado '{plane_name}'."}, {"role": "assistant", "content": "string rpName = \"{plane_name}\";\nXYZ start = new XYZ(0, UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0);\nXYZ end = new XYZ(0, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nXYZ normal = XYZ.BasisX;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null && doc.IsFamilyDocument)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = rpName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the IDs of all 3D views starting with '{prefix}' for export."}, {"role": "assistant", "content": "List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"{prefix}\") && !v.IsTemplate).Select(v => v.Id).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Modela una bandeja de cables entre dos puntos."}, {"role": "assistant", "content": "CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(trayType != null && level != null)\n{\n    XYZ start = new XYZ(0,10,3);\n    XYZ end = new XYZ(15,10,3);\n    CableTray.Create(doc, trayType.Id, start, end, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {text_size_mm}mm text type named '{type_name}' in green color."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nTextNoteType newType = null;\nif (defaultType != null)\n{\n    newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén los IDs de todas las vistas 3D que empiezan con '{prefix}' para exportación."}, {"role": "assistant", "content": "List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"{prefix}\") && !v.IsTemplate).Select(v => v.Id).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Generate a report with the area of all rooms in the project."}, {"role": "assistant", "content": "List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all family type names from the {built_in_category_enum} category."}, {"role": "assistant", "content": "List<Element> elementTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.{built_in_category_enum}).WhereElementIsElementType().ToList();\nList<string> typeNames = new List<string>();\nforeach(Element type in elementTypes)\n{\n    typeNames.Add(type.Name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un tipo de muro '{type_name}' de 15cm y luego crea un muro de ese tipo."}, {"role": "assistant", "content": "WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 15 / 100 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Delete all unused wall types in the project."}, {"role": "assistant", "content": "ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an electrical conduit with a {diameter_inch}-inch diameter."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 / 0.3048);\n        XYZ end = new XYZ(5 / 0.3048, 0, 3 / 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set({diameter_inch} / 12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Une la geometría de una columna y un suelo que se cruzan."}, {"role": "assistant", "content": "Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\n\nif (column != null && floor != null)\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva vista de alzado mirando al sur."}, {"role": "assistant", "content": "ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null && activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 0);\n        if (aev != null)\n        {\n            aev.Name = \"Alzado Sur\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Insert a window 1.2m wide and 3.0m high into a wall."}, {"role": "assistant", "content": "FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = $\"Window {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the visibility of the '{category_name}' category to false in the active view."}, {"role": "assistant", "content": "Category category = doc.Settings.Categories.get_Item(BuiltInCategory.{category_name});\nif (category != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(category.Id, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Draw a {width_mm}x{height_mm} millimeter rectangular ventilation duct."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast<DuctType>().FirstOrDefault(d => d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null && ductType != null && systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 / 0.3048);\n        XYZ p2 = new XYZ(10 / 0.3048, 0, 3 / 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null && !widthParam.IsReadOnly) widthParam.Set({width_mm} / 304.8);\n            if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set({height_mm} / 304.8);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una cota de elevación en el Azotea."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    Level lvl = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Azotea\");\n    View activeView = doc.ActiveView;\n\n    if (lvl != null && activeView != null)\n    {\n        Reference levelRef = new Reference(lvl);\n        XYZ origin = new XYZ(5/0.3048, 5/0.3048, lvl.Elevation);\n        XYZ leaderEnd = origin + new XYZ(2/0.3048, 2/0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, levelRef, origin, origin, leaderEnd, origin, true);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén la tabla de planificación '{schedule_name}' y exporta sus datos a '{folder_path}{file_name}'."}, {"role": "assistant", "content": "ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s=>s.Name==\"{schedule_name}\");\n\nif (schedule != null)\n{\n    string folderPath = \"{folder_path}\";\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(folderPath, \"{file_name}\", options);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las advertencias del proyecto."}, {"role": "assistant", "content": "IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Modela un plafón a 3.15 metros de altura en el Planta Baja."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Planta Baja\") as Level;\nCeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nif (ceilingType != null && level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0)));\n    profile.Append(Line.CreateBound(new XYZ(10,0,0), new XYZ(10,10,0)));\n    profile.Append(Line.CreateBound(new XYZ(10,10,0), new XYZ(0,10,0)));\n    profile.Append(Line.CreateBound(new XYZ(0,10,0), new XYZ(0,0,0)));\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters));\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista de sección usando una caja de 1.0x{depth_m}x3.15 metros."}, {"role": "assistant", "content": "ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\n\nif (sectionVFT != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(0,0,0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({depth_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca postes de iluminación cada 8m en un camino de 100m."}, {"role": "assistant", "content": "FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Comprueba si la vista activa es una vista de plano."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nbool isPlanView = false;\n\nif (activeView != null)\n{\n    isPlanView = activeView.ViewType == ViewType.FloorPlan \n                 || activeView.ViewType == ViewType.CeilingPlan \n                 || activeView.ViewType == ViewType.AreaPlan \n                 || activeView.ViewType == ViewType.EngineeringPlan;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Exporta el modelo actual a un archivo NWC."}, {"role": "assistant", "content": "string folderPath = \"C:/exports/\";\nstring fileName = doc.Title + \".nwc\";\nNavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(folderPath, fileName, options);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new elevation view looking north named \"{view_name}\"."}, {"role": "assistant", "content": "ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null && activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 2);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rename the active view to '{view_name}'."}, {"role": "assistant", "content": "string newName = \"{view_name}\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Oculta los elementos seleccionados en la vista activa."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToHide = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToHide.Count > 0)\n{\n    activeView.HideElements(idsToHide);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create {num_grids} vertical grids spaced {separation_m} meters apart."}, {"role": "assistant", "content": "double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i=0; i<{num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the total length of all walls in the project."}, {"role": "assistant", "content": "double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all rooms on the 'L01' Level."}, {"role": "assistant", "content": "Level targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"L01\") as Level;\nList<Element> roomsOnLevel = new List<Element>();\n\nif (targetLevel != null)\n{\n    roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == targetLevel.Id).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dibuja una pared de 7.8m de largo por 3.0m de altura."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(7.8, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters), 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista 3D con la caja de sección activada."}, {"role": "assistant", "content": "string viewName = \"Vista 3D con Caja de Sección\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new material named '{material_name}' with a wood surface pattern."}, {"role": "assistant", "content": "string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Wood\") || p.Name.Contains(\"Madera\")) as FillPatternElement;\n    \n    if (material != null && fillPattern != null)\n    {\n        material.SurfaceForegroundPatternId = fillPattern.Id;\n        material.Color = new Color(139, 69, 19);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Elimina todos los tipos de muro no utilizados en el proyecto."}, {"role": "assistant", "content": "ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo Nivel llamado 'Nivel 2' a una elevación de 3.5 metros."}, {"role": "assistant", "content": "double elevation = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 2\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un techo por contorno en el 'Level 1'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n    if(roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20,0,0), new XYZ(20,30,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20,30,0), new XYZ(0,30,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de texto de {text_size_mm}mm de color verde llamado '{type_name}'."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all door families loaded in the project."}, {"role": "assistant", "content": "List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dibuja una región rellena con patrón diagonal."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Draw Filled Region\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n    if (activeView != null && fillPattern != null)\n    {\n        FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n        if (filledRegionType != null)\n        {\n            FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n            if (newType != null)\n            {\n                newType.ForegroundPatternId = fillPattern.Id;\n                CurveLoop profile = new CurveLoop();\n                profile.Append(Line.CreateBound(new XYZ(0, 0, 0), new XYZ(5, 0, 0)));\n                profile.Append(Line.CreateBound(new XYZ(5, 0, 0), new XYZ(5, 5, 0)));\n                profile.Append(Line.CreateBound(new XYZ(5, 5, 0), new XYZ(0, 5, 0)));\n                profile.Append(Line.CreateBound(new XYZ(0, 5, 0), new XYZ(0, 0, 0)));\n                FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop> { profile });\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rota el elemento dado 30 grados alrededor de su centro."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para rotar\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n            double angle = 30 * Math.PI / 180.0;\n            ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a stair between {level1_name} and {level2_name}."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{level1_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{level2_name}\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    // TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    // Stairs creation requires using the StairsEditScope class.\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Abre una familia, añade un parámetro de tipo '{param_name}' y guárdala."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Hide all annotation elements in the active view."}, {"role": "assistant", "content": "if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all project warnings."}, {"role": "assistant", "content": "IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all doors on level 'Level 2' that belong to the '{family_name}' family."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nList<Element> doors = new List<Element>();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una losa de cimentación estructural de 30cm de espesor llamada '{type_name}'."}, {"role": "assistant", "content": "Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nFloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\nif(slabTypeToDuplicate != null && foundationLevel != null)\n{\n    FloorType newSlabType = slabTypeToDuplicate.Duplicate(\"{type_name}\") as FloorType;\n    if(newSlabType != null)\n    {\n        CompoundStructure cs = newSlabType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), (30 * 10) / 304.8);\n            newSlabType.SetCompoundStructure(cs);\n            XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n            CurveLoop profile = new CurveLoop();\n            profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n            Floor.Create(doc, new List<CurveLoop>{profile}, newSlabType.Id, foundationLevel.Id);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Unjoin the geometry of two selected elements."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first element\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second element\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Export a list of all project warnings to a text file on the desktop."}, {"role": "assistant", "content": "string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nstring filePath = System.IO.Path.Combine(desktopPath, \"RevitWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\nSystem.IO.File.WriteAllLines(filePath, warningDescriptions);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de muro 'Muro Básico 15cm' con un grosor de 30cm."}, {"role": "assistant", "content": "string newTypeName = \"Muro Básico 15cm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30*10, UnitTypeId.Millimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 10cm 'Exterior - Brick on Mtl. Stud' type and then create a wall of that type."}, {"role": "assistant", "content": "string newTypeName = \"Exterior - Brick on Mtl. Stud\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == newTypeName) as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if(newWallType!=null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if(cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(10/10.0, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nLine wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\nWall.Create(doc, wallCurve, newWallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create columns at each grid intersection."}, {"role": "assistant", "content": "FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    if(!colSymbol.IsActive) colSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                 if(results != null) {\n                     foreach (IntersectionResult ir in results)\n                     {\n                         doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                     }\n                 }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Acota la longitud de un muro seleccionado por el usuario."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un muro para acotar\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a floor plan view for 'Planta Baja'."}, {"role": "assistant", "content": "string levelName = \"Planta Baja\";\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca pilares en todos los cruces de la rejilla."}, {"role": "assistant", "content": "FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    if(!colSymbol.IsActive) colSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                 if(results != null) {\n                     foreach (IntersectionResult ir in results)\n                     {\n                         doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                     }\n                 }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Import a georeferenced survey from a LandXML file."}, {"role": "assistant", "content": "IList<XYZ> points = new List<XYZ>();\npoints.Add(new XYZ(0, 0, 0));\npoints.Add(new XYZ(50, 0, 5));\npoints.Add(new XYZ(0, 50, 10));\nTopographySurface.Create(doc, points);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate {level_to_duplicate} with a {offset_m}m offset and name it '{new_level_name}'."}, {"role": "assistant", "content": "string newLevelName = \"{new_level_name}\";\nLevel levelToDup = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{level_to_duplicate}\") as Level;\n\nif (levelToDup != null)\n{\n    double newElevation = levelToDup.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place a spot elevation on a given face and view point."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select the top face of the floor\");\n\nView activeView = doc.ActiveView;\n\nif (faceRef != null && activeView != null)\n{\n    XYZ pointOnFace = faceRef.GlobalPoint;\n    XYZ leaderEnd = pointOnFace + new XYZ(1 / 0.3048, 1 / 0.3048, 0);\n    doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all families and their types."}, {"role": "assistant", "content": "List<string> familyAndTypeNames = new List<string>();\nList<Family> families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().ToList();\nforeach (Family fam in families)\n{\n    familyAndTypeNames.Add($\"Family: {{fam.Name}}\");\n    foreach (ElementId symbolId in fam.GetFamilySymbolIds())\n    {\n        FamilySymbol sym = doc.GetElement(symbolId) as FamilySymbol;\n        if (sym != null)\n        {\n            familyAndTypeNames.Add($\"\\tType: {{sym.Name}}\");\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Model a cable tray between points ({p1x_m}, {p1y_m}, {p1z_m}) and ({p2x_m}, {p2y_m}, {p2z_m})."}, {"role": "assistant", "content": "CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (trayType != null && level != null)\n{\n    XYZ p1 = new XYZ(UnitUtils.ConvertToInternalUnits({p1x_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p1y_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p1z_m}, UnitTypeId.Meters)); \n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({p2x_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p2y_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p2z_m}, UnitTypeId.Meters));\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de muro 'SW12' con un grosor de 20cm."}, {"role": "assistant", "content": "string newTypeName = \"SW12\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(20*10, UnitTypeId.Millimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a vertical shaft opening from the base level to the top level."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\nif (bottomLevel != null && topLevel != null)\n{\n    XYZ p1 = new XYZ(2 / 0.3048, 2 / 0.3048,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 2 / 0.3048,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(2 / 0.3048, 5 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all project warnings."}, {"role": "assistant", "content": "IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Draw a filled region with a diagonal pattern."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nFillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n\nif (activeView != null && fillPattern != null)\n{\n    FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n    if (filledRegionType != null)\n    {\n        FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n        if (newType != null)\n        {\n            newType.ForegroundPatternId = fillPattern.Id;\n            XYZ p1 = new XYZ(0,0,0);\n            XYZ p2 = new XYZ(5 / 0.3048,0,0);\n            XYZ p3 = new XYZ(5 / 0.3048,5 / 0.3048,0);\n            XYZ p4 = new XYZ(0,5 / 0.3048,0);\n            CurveLoop profile = new CurveLoop();\n            profile.Append(Line.CreateBound(p1,p2));\n            profile.Append(Line.CreateBound(p2,p3));\n            profile.Append(Line.CreateBound(p3,p4));\n            profile.Append(Line.CreateBound(p4,p1));\n            FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop>{profile});\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una tubería con un diámetro de 80mm."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(80, UnitTypeId.Millimeters));\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new linear dimension type named '{type_name}' with blue text and {text_size_mm}mm size."}, {"role": "assistant", "content": "DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\nif (linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"{type_name}\") as DimensionType;\n    if (newDimType != null)\n    {\n        Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n        Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén las coordenadas del punto base y del punto de reconocimiento."}, {"role": "assistant", "content": "BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {text_size_mm}mm text type named '{type_name}' in green color."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nTextNoteType newType = null;\nif (defaultType != null)\n{\n    newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new elevation view looking south named \"{view_name}\"."}, {"role": "assistant", "content": "ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null && activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 0);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rota el elemento dado 90 grados alrededor de su centro."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para rotar\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n            double angle = 90 * Math.PI / 180.0;\n            ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Start and commit a transaction for '{transaction_name}'."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an extrusion roof with an arc profile."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rotate a selected element 30 degrees around its Z-axis."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, 30 * Math.PI / 180.0);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Check if the active view is a plan view."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nbool isPlanView = false;\n\nif (activeView != null)\n{\n    isPlanView = activeView.ViewType == ViewType.FloorPlan \n                 || activeView.ViewType == ViewType.CeilingPlan \n                 || activeView.ViewType == ViewType.AreaPlan \n                 || activeView.ViewType == ViewType.EngineeringPlan;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rename all loaded families containing '{old_name}' to '{new_name}'."}, {"role": "assistant", "content": "List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"{old_name}\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"{old_name}\", \"{new_name}\");\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new shared text project parameter named '{param_name}' for walls and doors."}, {"role": "assistant", "content": "string originalFile = doc.Application.SharedParametersFilename;\nstring tempFile = System.IO.Path.GetTempFileName() + \".txt\";\nusing (System.IO.File.Create(tempFile)) { }\ndoc.Application.SharedParametersFilename = tempFile;\n\ntry\n{\n    DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n    if (defFile != null)\n    {\n        DefinitionGroup group = defFile.Groups.Create(\"General\");\n        if (group != null)\n        {\n            ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(\"{param_name}\", ParameterType.Text);\n            Definition definition = group.Definitions.Create(options);\n            if (definition != null)\n            {\n                CategorySet categories = doc.Application.Create.NewCategorySet();\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                doc.ParameterBindings.Insert(definition, binding, Autodesk.Revit.DB.BuiltInParameterGroup.PG_DATA);\n            }\n        }\n    }\n}\nfinally\n{\n    doc.Application.SharedParametersFilename = originalFile;\n    System.IO.File.Delete(tempFile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the solid geometry of a selected element."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element to get its geometry\");\n\nList<Solid> solids = new List<Solid>();\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        Options opt = new Options() {{ ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine }};\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if (geoElem != null)\n        {\n            solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 25cm '{type_name}' type and then create a wall of that type."}, {"role": "assistant", "content": "WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 25 / 100 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de puerta llamado 'Double-Glass' y establece su resistencia al fuego a '{fire_rating}'."}, {"role": "assistant", "content": "string newTypeName = \"Double-Glass\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = null;\nif (doorTypeToDuplicate != null)\n{\n    newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating}\");\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 1.0x3.15 meter foundation slab."}, {"role": "assistant", "content": "Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n\nif (foundationLevel != null && slabType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(1.0/0.3048, 0, 0);\n    XYZ p3 = new XYZ(1.0/0.3048, 3.15/0.3048, 0);\n    XYZ p4 = new XYZ(0, 3.15/0.3048, 0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aísla temporalmente la categoría {built_in_category_enum} en la vista activa."}, {"role": "assistant", "content": "ElementId categoryId = new ElementId(BuiltInCategory.{built_in_category_enum});\nICollection<ElementId> categoryIds = new List<ElementId> { categoryId };\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateCategoriesTemporary(categoryIds);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Selecciona todos los muros del 'Nivel 1' y cambia su comentario a '{comment}'."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level != null)\n{\n    List<Wall> wallsOnLevel = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level.Id).Cast<Wall>().ToList();\n    foreach(Wall wall in wallsOnLevel)\n    {\n        Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentParam != null && !commentParam.IsReadOnly)\n        {\n            commentParam.Set(\"{comment}\");\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an in-place family for a custom '{item_name}' using an extrusion."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate the '{original_type_name}' wall type and name it '{new_type_name}'."}, {"role": "assistant", "content": "WallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"{original_type_name}\");\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(\"{new_type_name}\") as WallType;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todos los muros con más de 2.8 metros de altura."}, {"role": "assistant", "content": "double heightThreshold = UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea {num_grids} ejes en sentido vertical separados {separation_m} metros."}, {"role": "assistant", "content": "double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i=0; i<{num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a structural beam between (5,5,3) and (15,5,3) on Level 2."}, {"role": "assistant", "content": "FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(5, 5, 3);\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Copy all walls from {source_level} to {target_level}."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Copy Walls\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{source_level}\");\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{target_level}\");\n\n    if (level1 != null && level2 != null)\n    {\n        ICollection<ElementId> wallsToCopy = new FilteredElementCollector(doc, level1.Id).OfClass(typeof(Wall)).Select(e => e.Id).ToList();\n        double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n        XYZ translation = new XYZ(0, 0, elevationDiff);\n        if (wallsToCopy.Count > 0)\n        {\n            ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade refuerzo a una columna."}, {"role": "assistant", "content": "RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {sheet_size} sheet and place the '{view_name}' view on it."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Sheet\"))\n{\n    t.Start();\n    string sheetNumber = \"A-101\";\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"{sheet_size}\"));\n    View viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<View>().FirstOrDefault(v => v.Name == \"{view_name}\");\n\n    if (titleBlock != null && viewToPlace != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            newSheet.Name = \"Architectural Plan - {view_name}\";\n            newSheet.SheetNumber = sheetNumber;\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un circuito eléctrico conectando luminarias a un panel."}, {"role": "assistant", "content": "FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nList<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\nif (panel != null && fixtureIds.Count > 0)\n{\n    ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n    if(electricalSystem != null)\n    {\n        electricalSystem.SelectPanel(panel);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade los campos 'Nivel', 'Marca' y 'Volumen' a la tabla de pilares."}, {"role": "assistant", "content": "ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\") || s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un DirectShape esférico con un radio de {radius_m} metros."}, {"role": "assistant", "content": "double radius = {radius_m} / 0.3048;\nList<GeometryObject> solids = new List<GeometryObject>();\nFrame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\nArc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\nLine line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\nCurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\nSolid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\nsolids.Add(sphere);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(solids);\n    ds.Name = \"Esfera DirectShape\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva hoja {sheet_size} y colócale una leyenda."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"{sheet_size}\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca pilares en todos los cruces de la rejilla."}, {"role": "assistant", "content": "FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    if(!colSymbol.IsActive) colSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                 if(results != null) {\n                     foreach (IntersectionResult ir in results)\n                     {\n                         doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                     }\n                 }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una viga estructural entre (0,0,0) y (10,0,0) en el Nivel 2."}, {"role": "assistant", "content": "FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, 0);\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(0, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change the type of all '{old_type_name}' windows to '{new_type_name}'."}, {"role": "assistant", "content": "FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"{new_type_name}\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"{old_type_name}\"));\n\nif (newType != null && oldType != null)\n{\n    if(!newType.IsActive) newType.Activate();\n    List<FamilyInstance> windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Temporarily isolate the {built_in_category_enum} category in the active view."}, {"role": "assistant", "content": "ICollection<ElementId> elementIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.{built_in_category_enum}).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(elementIds);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Model a railing on an existing staircase."}, {"role": "assistant", "content": "RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a stair between {level1_name} and {level2_name}."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{level1_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{level2_name}\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    // TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    // Stairs creation requires using the StairsEditScope class.\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todos los muros que no tienen nivel base asignado."}, {"role": "assistant", "content": "ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un conducto eléctrico de {diameter_mm}mm de diámetro entre ({start_x},{start_y},{start_z}) y ({end_x},{end_y},{end_z})."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\nif (level != null && conduitTypeId != ElementId.InvalidElementId)\n{\n    XYZ startPoint = new XYZ({start_x}, {start_y}, {start_z});\n    XYZ endPoint = new XYZ({end_x}, {end_y}, {end_z});\n    Conduit conduit = Conduit.Create(doc, conduitTypeId, startPoint, endPoint, level.Id);\n    if (conduit != null)\n    {\n        Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n        if (diameterParam != null && !diameterParam.IsReadOnly)\n        {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits({diameter_mm}, UnitTypeId.Millimeters));\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva vista de alzado mirando al sur."}, {"role": "assistant", "content": "string viewName = \"Alzado Sur (Nuevo)\";\nViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20, 0), 100);\nView aev = marker.CreateElevation(doc, doc.ActiveView.Id, 0);\naev.Name = viewName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Exporta una lista de todas las advertencias del proyecto a un archivo de texto en el escritorio."}, {"role": "assistant", "content": "string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nstring filePath = System.IO.Path.Combine(desktopPath, \"RevitWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\nSystem.IO.File.WriteAllLines(filePath, warningDescriptions);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the system type of a selected pipe."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select a pipe\");\n\nPipingSystemType systemType = null;\nif (pickedRef != null)\n{\n    Pipe pipe = doc.GetElement(pickedRef.ElementId) as Pipe;\n    if (pipe != null)\n    {\n        Parameter systemTypeParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        if (systemTypeParam != null && systemTypeParam.HasValue)\n        {\n            systemType = doc.GetElement(systemTypeParam.AsElementId()) as PipingSystemType;\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the coordinates of the project base point and the survey point."}, {"role": "assistant", "content": "BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all material names."}, {"role": "assistant", "content": "List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una ventana de 0.9x2.8 metros en la pared más cercana."}, {"role": "assistant", "content": "FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = $\"Window {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una cota de elevación en una cara y un punto de vista dados."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara superior del suelo\");\n\nView activeView = doc.ActiveView;\n\nif (faceRef != null && activeView != null)\n{\n    XYZ pointOnFace = faceRef.GlobalPoint;\n    XYZ leaderEnd = pointOnFace + new XYZ(1 / 0.3048, 1 / 0.3048, 0);\n    doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Apply {thickness_mm}mm thermal insulation to all hot water pipes."}, {"role": "assistant", "content": "PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Inside the family editor, create a new horizontal reference plane named '{plane_name}'."}, {"role": "assistant", "content": "XYZ start = new XYZ(UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0, 0);\nXYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0);\nXYZ normal = XYZ.BasisY;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = \"{plane_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Export the current model to an NWC file."}, {"role": "assistant", "content": "string folderPath = \"C:/exports/\";\nstring fileName = doc.Title + \".nwc\";\nNavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(folderPath, fileName, options);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén todas las familias de puertas cargadas en el proyecto."}, {"role": "assistant", "content": "List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Pinta la cara interior de los muros exteriores con '{material_name}'."}, {"role": "assistant", "content": "using(Transaction t = new Transaction(doc, \"Paint Walls\"))\n{\n    t.Start();\n    Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"{material_name}\");\n    var exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior).ToList();\n    if(paintMaterial != null)\n    {\n        foreach (Wall w in exteriorWalls)\n        {\n            IList<Reference> interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n            if(interiorFaceRefs.Count > 0)\n            {\n                Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n                if (interiorFace != null)\n                {\n                    doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista de sección llamada '{view_name}'."}, {"role": "assistant", "content": "ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-1, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    \n    if (sectionView != null)\n    {\n        sectionView.Name = \"{view_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Generate a rectangular floor of 10x8 meters."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> {{ loop }}, floorType.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create {num_grids} vertical grids spaced {separation_m} meters apart."}, {"role": "assistant", "content": "double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i=0; i<{num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una escalera entre {level1_name} y {level2_name}."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{level1_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{level2_name}\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    // TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    // Stairs creation requires using the StairsEditScope class.\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el nombre de todas las familias cargadas que contengan '{old_name}' a '{new_name}'."}, {"role": "assistant", "content": "List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"{old_name}\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"{old_name}\", \"{new_name}\");\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una tubería con un diámetro de 50mm."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Millimeters));\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista 3D con la caja de sección activada."}, {"role": "assistant", "content": "string viewName = \"Vista 3D con Caja de Sección\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Generate a report with the area of all rooms in the project."}, {"role": "assistant", "content": "List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca un mueble en las coordenadas (2,3)."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    if(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), furnitureSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de muro '{type_name}' con un grosor de 15cm."}, {"role": "assistant", "content": "WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, (15 / 100) / 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new material named '{material_name}' with color ({color_r}, {color_g}, {color_b}) and {transparency_percent}% transparency."}, {"role": "assistant", "content": "ElementId materialId = Material.Create(doc, \"{material_name}\");\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color({color_r}, {color_g}, {color_b});\n        material.Transparency = {transparency_percent};\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 3D view with the section box enabled."}, {"role": "assistant", "content": "string viewName = \"3D View with Section Box\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls with an empty 'Mark' parameter and set it to '{mark_value}'."}, {"role": "assistant", "content": "List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"{mark_value}\");\n  }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un techo por extrusión con un perfil en arco."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Allow the user to select a wall with the prompt '{selection_prompt}' and get its ElementId."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"{selection_prompt}\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new elevation view looking south."}, {"role": "assistant", "content": "string viewName = \"South Elevation (New)\";\nViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20, 0), 100);\nView aev = marker.CreateElevation(doc, doc.ActiveView.Id, 0);\naev.Name = viewName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todos los muros con más de 3.0 metros de altura."}, {"role": "assistant", "content": "double heightThreshold = UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las advertencias del proyecto."}, {"role": "assistant", "content": "IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aplica aislamiento térmico de {thickness_mm}mm a todas las tuberías de agua caliente."}, {"role": "assistant", "content": "PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change the visual style of the active view to 'Hidden Line'."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Link a DWG file as a reference in the active view."}, {"role": "assistant", "content": "string filePath = \"C:/CAD_Files/Base_Plan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.ColorMode = ImportColorMode.Preserved;\nElementId linkedFileId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(filePath, options, activeView, out linkedFileId);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Conecta dos tuberías con un codo."}, {"role": "assistant", "content": "List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().ToList();\nif (pipes.Count >= 2)\n{\n    Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewElbowFitting(c1, c2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un muro del tipo 'SW12' en el 'Nivel 1' desde (5,5) hasta (15,5)."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"SW12\") as WallType;\nXYZ startPoint = new XYZ(5, 5, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nif (level != null && wallType != null)\n{\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Generate a {rows}x{cols} column grid with 6-meter spacing."}, {"role": "assistant", "content": "FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n    for(int i=0; i<{rows}; i++)\n    {\n        for(int j=0; j<{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un pilar del tipo 'Pilar 30x60' en cada intersección de la rejilla."}, {"role": "assistant", "content": "FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Pilar 30x60\");\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\nif (columnSymbol != null && level != null)\n{\n    if (!columnSymbol.IsActive) columnSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                if (results != null && !results.IsEmpty)\n                {\n                    foreach (IntersectionResult ir in results)\n                    {\n                        doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                    }\n                }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade un punto al Path of Travel seleccionado."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un Path of Travel\");\n\nif (pickedRef != null)\n{\n    PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n    if (pot != null)\n    {\n        IList<XYZ> points = pot.GetPath();\n        if (points != null && points.Count >= 2)\n        {\n            XYZ midPoint = (points[0] + points[1]) / 2;\n            points.Insert(1, midPoint); \n            pot.Update(points);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplica el tipo de muro '{original_type_name}' y llámalo '{new_type_name}'."}, {"role": "assistant", "content": "WallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"{original_type_name}\");\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(\"{new_type_name}\") as WallType;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a stair between {level1_name} and {level2_name}."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{level1_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{level2_name}\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    // TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    // Stairs creation requires using the StairsEditScope class.\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Etiqueta todas las habitaciones con su área."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(locPoint.Point.X, locPoint.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a filled region with a '{pattern_name}' pattern."}, {"role": "assistant", "content": "FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"{pattern_name}\"));\nView activeView = doc.ActiveView;\n\nif (regionType != null && activeView != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 0,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(0, 5 / 0.3048,0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo material llamado '{material_name}' con un patrón de superficie de madera."}, {"role": "assistant", "content": "string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Wood\") || p.Name.Contains(\"Madera\")) as FillPatternElement;\n    \n    if (material != null && fillPattern != null)\n    {\n        material.SurfaceForegroundPatternId = fillPattern.Id;\n        material.Color = new Color(139, 69, 19);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {text_size_mm}mm text type in green color named '{type_name}'."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a detail group with the selected detail items."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Typical Detail 1\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén la geometría sólida de un elemento seleccionado."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para obtener su geometría\");\nif(pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if(elem != null)\n    {\n        Options opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if(geoElem != null)\n        {\n            List<Solid> solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Export the document to '{folder_path}{file_name}' with IFC version {ifc_version_enum}."}, {"role": "assistant", "content": "string folderPath = \"{folder_path}\";\nstring fileName = \"{file_name}\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.{ifc_version_enum};\ndoc.Export(folderPath, fileName, options);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Pinta la cara interior de los muros exteriores con '{material_name}'."}, {"role": "assistant", "content": "Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"{material_name}\");\nvar exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior).ToList();\n\nif (paintMaterial != null)\n{\n    foreach (Wall w in exteriorWalls)\n    {\n        IList<Reference> interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n        if(interiorFaceRefs.Count > 0)\n        {\n            Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n            if (interiorFace != null)\n            {\n                doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Given a selected wall, find all pipes passing through it."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\n\nList<ElementId> intersectingPipes = new List<ElementId>();\nif (wallRef != null)\n{\n    Element wall = doc.GetElement(wallRef);\n    if (wall != null)\n    {\n        ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n        intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds().ToList();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Localiza todos los muros con un parámetro 'Marca' vacío y asigna '{mark_value}'."}, {"role": "assistant", "content": "List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"{mark_value}\");\n  }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create {num_worksets} architectural worksets."}, {"role": "assistant", "content": "List<string> worksetNames = new List<string> {{ \"TAD_ARQ_WALLS\", \"TAD_ARQ_FINISHES\", \"TAD_ARQ_CEILINGS\", \"TAD_ARQ_FLOORS\", \"TAD_ARQ_RAILINGS\", \"TAD_ARQ_WINDOWS\", \"TAD_ARQ_CARPENTRY\", \"TAD_ARQ_FURNITURE\", \"TAD_ARQ_PLUMBING\", \"TAD_ARQ_EXTERIOR\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a grid of {num_horizontal} horizontal and {num_vertical} vertical grids, spaced 6 meters apart."}, {"role": "assistant", "content": "double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint count = {num_horizontal};\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ(({num_vertical} - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < {num_vertical}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a pipe with a 50mm diameter."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Millimeters));\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a pipe with a 50mm diameter."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Millimeters));\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an 7.8-meter long foundation beam."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(7.8, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Footing);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Tag all rooms with their area."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n    foreach(Room room in rooms)\n    {\n        LocationPoint loc = room.Location as LocationPoint;\n        if(loc != null)\n        {\n            doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(loc.Point.X, loc.Point.Y), activeView.Id);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea columnas en cada intersección de ejes."}, {"role": "assistant", "content": "FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    if(!colSymbol.IsActive) colSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                 if(results != null) {\n                     foreach (IntersectionResult ir in results)\n                     {\n                         doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                     }\n                 }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aplica aislamiento térmico de {thickness_mm}mm a todas las tuberías de agua caliente."}, {"role": "assistant", "content": "PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplica la vista '{view_name}' como una vista dependiente."}, {"role": "assistant", "content": "ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"{view_name}\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el nombre de la familia de una puerta seleccionada a '{new_family_name}'."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una puerta\");\n\nif (pickedRef != null)\n{\n    FamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (door != null && door.Symbol != null)\n    {\n        Family family = door.Symbol.Family;\n        if (family != null)\n        {\n            family.Name = \"{new_family_name}\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new elevation view looking north."}, {"role": "assistant", "content": "ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null && activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 2);\n        if (aev != null)\n        {\n            aev.Name = \"North Elevation\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find the host of a face-based light fixture."}, {"role": "assistant", "content": "FamilyInstance lightFixture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().Cast<FamilyInstance>().FirstOrDefault(fi => fi.HostFace != null);\n\nElement host = null;\nif (lightFixture != null)\n{\n    Reference hostFaceRef = lightFixture.HostFace;\n    if (hostFaceRef != null)\n    {\n        host = doc.GetElement(hostFaceRef.ElementId);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change a glass panel in a curtain wall to a solid panel."}, {"role": "assistant", "content": "Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\nFamilySymbol solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_CurtainWallPanels && fs.Name.Contains(\"Solid\"));\n\nif (curtainWall != null && solidPanelType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    if (grid != null)\n    {\n        ElementId panelIdToChange = grid.GetPanelIds().FirstOrDefault();\n        if (panelIdToChange != ElementId.InvalidElementId)\n        {\n            Panel panelToChange = doc.GetElement(panelIdToChange) as Panel;\n            if (panelToChange != null) panelToChange.ChangeTypeId(solidPanelType.Id);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Insert a 15.0-meter truss between two points."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(15.0 / 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade un plano de referencia horizontal llamado '{plane_name}'."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    XYZ bubbleEnd = new XYZ(0, 10, 0);\n    XYZ freeEnd = new XYZ(10, 10, 0);\n    XYZ cutVec = XYZ.BasisZ;\n    ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n    if (rp != null)\n    {\n        rp.Name = \"{plane_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un pilar del tipo 'W-Wide Flange-Column' en cada intersección de la rejilla."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"W-Wide Flange-Column\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una rejilla de {num_horizontal} ejes horizontales y {num_vertical} verticales, espaciados 10 metros."}, {"role": "assistant", "content": "double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nint countH = {num_horizontal};\nint countV = {num_vertical};\nfor (int i = 0; i < countH; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((countV - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < countV; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (countH - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Asigna el material '{material_name}' a la primera capa de un tipo de muro."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"{material_name}\"));\n\n    if (wallType != null && material != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, material.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una viga estructural entre (0,0,0) y (10,0,0) en el Nivel 2."}, {"role": "assistant", "content": "FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, 0);\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(0, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una región rellena con un patrón de '{pattern_name}'."}, {"role": "assistant", "content": "FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"{pattern_name}\"));\nView activeView = doc.ActiveView;\n\nif (regionType != null && activeView != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 0,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(0, 5 / 0.3048,0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra el elemento de pórtico estructural con la marca '{mark_value}'."}, {"role": "assistant", "content": "string markValue = \"{mark_value}\";\nElement framingElement = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_StructuralFraming)\n    .WhereElementIsNotElementType()\n    .FirstOrDefault(e => {\n        Parameter p = e.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        return p != null && p.AsString() == markValue;\n    });"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista de plano de plafón reflejado para el L01."}, {"role": "assistant", "content": "string levelName = \"L01\";\nstring viewName = \"Plano de Plafón L01\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Modela un plafón a 3.15 metros de altura en Azotea."}, {"role": "assistant", "content": "CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Azotea\") as Level;\n\nif (ceilingType != null && level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,0,0)));\n\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{{profile}}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters));\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un ensamblaje a partir de los elementos seleccionados."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"Nuevo Ensamblaje\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Ajusta la región de recorte de la vista a un rectángulo de (5,5) a (15,5)."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Adjust Crop Region\"))\n{\n    t.Start();\n    View view = doc.ActiveView;\n\n    if (view != null && view.CropBoxActive)\n    {\n        BoundingBoxXYZ cropBox = view.CropBox;\n        if (cropBox != null)\n        {\n            XYZ minPoint = new XYZ(5 / 0.3048, 5 / 0.3048, cropBox.Min.Z);\n            XYZ maxPoint = new XYZ(15 / 0.3048, 5 / 0.3048, cropBox.Max.Z);\n            cropBox.Min = minPoint;\n            cropBox.Max = maxPoint;\n            view.CropBox = cropBox;\n            view.CropBoxVisible = true;\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Export each schedule to an individual CSV file."}, {"role": "assistant", "content": "string exportPath = \"C:/RevitExports/\";\nList<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => !vs.IsTemplate).ToList();\nViewScheduleExportOptions options = new ViewScheduleExportOptions();\noptions.FieldDelimiter = \",\";\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Export(exportPath, schedule.Name + \".csv\", options);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an MEP space for each room on 'Roof'."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Roof\");\n\nif (level != null)\n{\n    List<Room> roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level.Id)).Cast<Room>().ToList();\n    foreach(Room room in roomsOnLevel)\n    {\n       Space.Create(doc, room, null);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Ajusta todas las ventanas para que tengan la altura del antepecho a {sill_height_mm}mm."}, {"role": "assistant", "content": "double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un codo en T entre dos tuberías que se intersecan."}, {"role": "assistant", "content": "// No se proporciona código para esta función específica debido a la necesidad de selección interactiva y manejo de casos complejos.\n// Este escenario involucra la selección de elementos específicos y el uso de métodos de creación que dependen de la geometría existente."}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva hoja {sheet_size} y colócale una leyenda."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"{sheet_size}\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Asigna el material '{material_name}' a la primera capa de un tipo de muro."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"{material_name}\"));\n\n    if (wallType != null && material != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, material.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new room on Level 2 at point (2, 3)."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Room room = doc.Create.NewRoom(level1, point);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new pipe type with {material_name} material."}, {"role": "assistant", "content": "string newTypeName = \"{material_name} Pipe\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"{material_name}\")) as Material;\n\nif (pipeTypeToDuplicate != null && material != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade montantes a todas las líneas de rejilla de un muro cortina."}, {"role": "assistant", "content": "Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\n\nif (curtainWall != null && mullionType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    if (grid != null)\n    {\n        foreach (ElementId gridLineId in grid.GetVGridLineIds())\n        {\n            CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n            if(line != null) line.AddMullions(mullionType, false);\n        }\n        foreach (ElementId gridLineId in grid.GetUGridLineIds())\n        {\n            CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n            if(line != null) line.AddMullions(mullionType, false);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de puerta llamado 'M_Single-Flush' y establece su resistencia al fuego a '{fire_rating}'."}, {"role": "assistant", "content": "string newTypeName = \"M_Single-Flush\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"{fire_rating}\");\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a spherical DirectShape with a {radius_m}-meter radius."}, {"role": "assistant", "content": "double radius = {radius_m} / 0.3048;\nList<GeometryObject> solids = new List<GeometryObject>();\nFrame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\nArc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\nLine line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\nCurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\nSolid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\nsolids.Add(sphere);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(solids);\n    ds.Name = \"Sphere DirectShape\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a structural beam between (0,0,0) and (10,0,0) on Level 1."}, {"role": "assistant", "content": "FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, 0);\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(0, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place a camera named '{view_name}' at position ({eye_x_m}, {eye_y_m}, {eye_z_m})."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        cameraView.Name = \"{view_name}\";\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits({eye_x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_z_m}, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 'Nivel 1' level at 3.5m."}, {"role": "assistant", "content": "string levelName = \"Nivel 1\";\ndouble elev = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Ajusta la altura del antepecho de todas las ventanas a 3.0 metro(s)."}, {"role": "assistant", "content": "double sillHeight = 3.0 / 0.3048;\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Pon un pilar estructural en las coordenadas 2,3."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new door type named 'Puerta 90x210' and set its fire rating to '{fire_rating}'."}, {"role": "assistant", "content": "string newTypeName = \"Puerta 90x210\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"{fire_rating}\");\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate the '{original_name}' wall type and name it '{new_name}'."}, {"role": "assistant", "content": "string originalName = \"{original_name}\";\nstring newName = \"{new_name}\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Move the project base point {distance_m} meters to the north."}, {"role": "assistant", "content": "BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\nif (projectBasePoint != null)\n{\n    XYZ translation = new XYZ(0, {distance_m} / 0.3048, 0);\n    ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aplica un color rojo a todas las ventanas en la vista activa."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(255, 0, 0));\n    ICollection<ElementId> windows = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().ToElementIds();\n    \n    foreach (ElementId windowId in windows)\n    {\n        activeView.SetElementOverrides(windowId, ogs);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el nombre de todas las tablas que contienen '{text_to_find}' por '{new_text}'."}, {"role": "assistant", "content": "List<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"{text_to_find}\")).ToList();\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"{text_to_find}\", \"{new_text}\");\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new 30cm wall type named 'Exterior - Brick on Mtl. Stud'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"Exterior - Brick on Mtl. Stud\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (wallTypeToDuplicate != null)\n    {\n        WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n            cs.SetLayerWidth(coreLayerIndex, 30 / 100.0 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo nivel llamado 'Planta Baja' a 4.0 metros de elevación."}, {"role": "assistant", "content": "double elevation = UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Planta Baja\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Inside the family editor, create a vertical reference plane named '{plane_name}'."}, {"role": "assistant", "content": "string rpName = \"{plane_name}\";\nXYZ start = new XYZ(0, UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0);\nXYZ end = new XYZ(0, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nXYZ normal = XYZ.BasisX;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null && doc.IsFamilyDocument)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = rpName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Importa topografía georreferenciada desde un archivo LandXML."}, {"role": "assistant", "content": "// The Revit API in the provided context does not support direct LandXML import.\n// This functionality typically requires additional add-ins like the Site Designer, which are not available here.\n// As a placeholder, this code will show how to create a simple topography surface from a list of points.\nusing(Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(50, 0, 5));\n    points.Add(new XYZ(0, 50, 10));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo parámetro de proyecto compartido de texto llamado '{param_name}' para muros y puertas."}, {"role": "assistant", "content": "string originalFile = doc.Application.SharedParametersFilename;\nstring tempFile = System.IO.Path.GetTempFileName() + \".txt\";\nusing (System.IO.File.Create(tempFile)) { }\ndoc.Application.SharedParametersFilename = tempFile;\n\ntry\n{\n    DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n    if (defFile != null)\n    {\n        DefinitionGroup group = defFile.Groups.Create(\"General\");\n        if (group != null)\n        {\n            ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(\"{param_name}\", ParameterType.Text);\n            Definition definition = group.Definitions.Create(options);\n            if (definition != null)\n            {\n                CategorySet categories = doc.Application.Create.NewCategorySet();\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                doc.ParameterBindings.Insert(definition, binding, Autodesk.Revit.DB.BuiltInParameterGroup.PG_DATA);\n            }\n        }\n    }\n}\nfinally\n{\n    doc.Application.SharedParametersFilename = originalFile;\n    System.IO.File.Delete(tempFile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el estilo visual de la vista activa a 'Línea Oculta'."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate the '{original_name}' wall type and name it '{new_name}'."}, {"role": "assistant", "content": "string originalName = \"{original_name}\";\nstring newName = \"{new_name}\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las vistas de planta del proyecto."}, {"role": "assistant", "content": "List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el nombre de la vista activa a '{view_name}'."}, {"role": "assistant", "content": "string newName = \"{view_name}\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create beams between horizontally aligned columns."}, {"role": "assistant", "content": "FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    if(!beamSymbol.IsActive) beamSymbol.Activate();\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new pipe type with {material_name} material."}, {"role": "assistant", "content": "string newTypeName = \"{material_name} Pipe\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"{material_name}\")) as Material;\n\nif (pipeTypeToDuplicate != null && material != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an extrusion roof with a {slope_percentage}% slope."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null && roofType != null)\n{\n    double run = 10.0;\n    double rise = run * ({slope_percentage} / 100.0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(run / 0.3048, 0, rise / 0.3048)));\n    \n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    \n    if (refPlane != null)\n    {\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, run / 0.3048);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new elevation view looking north."}, {"role": "assistant", "content": "ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null && activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 2);\n        if (aev != null)\n        {\n            aev.Name = \"North Elevation\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el nivel de detalle de la vista actual a '{detail_level_enum}'."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.{detail_level_enum};\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Hide all annotation elements in the active view."}, {"role": "assistant", "content": "if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de texto de {text_size_mm}mm de color azul."}, {"role": "assistant", "content": "string newTypeName = \"{text_size_mm}mm Azul\";\nTextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n        \n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly) lineColorParam.Set(255);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Generate a {rows}x{cols} column grid with 6-meter spacing."}, {"role": "assistant", "content": "FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n    for(int i=0; i<{rows}; i++)\n    {\n        for(int j=0; j<{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera un equipo eléctrico en X=7,Y=4."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && panelSymbol != null)\n{\n    if(!panelSymbol.IsActive) panelSymbol.Activate();\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una instancia de la familia '{family_name}' en el centro de la habitación '{room_name}'."}, {"role": "assistant", "content": "Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"{room_name}\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"{family_name}\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add a reference point at coordinates (7,4,3) inside the family editor."}, {"role": "assistant", "content": "if(doc.IsFamilyDocument)\n{\n    doc.FamilyCreate.NewReferencePoint(new XYZ(7,4,3));\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista de sección entre los puntos (0,0,0) y (10,0,0)."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(0, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea {num_worksets} worksets de arquitectura."}, {"role": "assistant", "content": "List<string> worksetNames = new List<string> {{ \"TAD_ARQ_MAM\", \"TAD_ARQ_ACA\", \"TAD_ARQ_PLA\", \"TAD_ARQ_PSO\", \"TAD_ARQ_HRE\", \"TAD_ARQ_ALU\", \"TAD_ARQ_CAR\", \"TAD_ARQ_MOB\", \"TAD_ARQ_PLO\", \"TAD_ARQ_EXT\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 3D view with the section box enabled."}, {"role": "assistant", "content": "string viewName = \"3D View with Section Box\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una etiqueta de material en una cara de muro."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Face, \"Selecciona una cara para etiquetar\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Selecciona la ubicación de la etiqueta\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva hoja {sheet_size} y coloca la vista '{view_name}' en ella."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Sheet\"))\n{\n    t.Start();\n    string sheetNumber = \"A-101\";\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"{sheet_size}\"));\n    View viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<View>().FirstOrDefault(v => v.Name == \"{view_name}\");\n\n    if (titleBlock != null && viewToPlace != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            newSheet.Name = \"Planta Arquitectónica - {view_name}\";\n            newSheet.SheetNumber = sheetNumber;\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Delete all unused wall types in the project."}, {"role": "assistant", "content": "ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\ndoc.Delete(unusedWallTypes);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Importa topografía georreferenciada desde un archivo LandXML."}, {"role": "assistant", "content": "// The Revit API in the provided context does not support direct LandXML import.\n// This functionality typically requires additional add-ins like the Site Designer, which are not available here.\n// As a placeholder, this code will show how to create a simple topography surface from a list of points.\nusing(Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(50, 0, 5));\n    points.Add(new XYZ(0, 50, 10));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una viga estructural entre (5,5,3) y (15,5,3) en el L01."}, {"role": "assistant", "content": "FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"L01\") as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(5, 5, 3);\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el tipo de una losa por uno que contenga 'Generic 12\"'."}, {"role": "assistant", "content": "Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Generic 12\"\"));\n\nif (floorToChange != null && newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Assign all walls to the '{workset_name}' workset."}, {"role": "assistant", "content": "if (doc.IsWorkshared)\n{\n    Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w => w.Name == \"{workset_name}\");\n    if (ws != null)\n    {\n        FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n        foreach (Element e in collector)\n        {\n            Parameter p = e.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n            if (p != null && !p.IsReadOnly)\n            {\n                p.Set(ws.Id.IntegerValue);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un tipo de muro 'Exterior - Brick on Mtl. Stud' de 30cm y luego crea un muro de ese tipo."}, {"role": "assistant", "content": "string newTypeName = \"Exterior - Brick on Mtl. Stud\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == newTypeName) as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if(newWallType!=null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if(cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30/10.0, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nLine wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\nWall.Create(doc, wallCurve, newWallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Pinta la cara interior de los muros exteriores con '{material_name}'."}, {"role": "assistant", "content": "Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"{material_name}\");\nvar exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior).ToList();\n\nif (paintMaterial != null)\n{\n    foreach (Wall w in exteriorWalls)\n    {\n        IList<Reference> interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n        if(interiorFaceRefs.Count > 0)\n        {\n            Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n            if (interiorFace != null)\n            {\n                doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a radial dimension for a curved wall."}, {"role": "assistant", "content": "Wall curvedWall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.Location is LocationCurve && (w.Location as LocationCurve).Curve is Arc);\nView activeView = doc.ActiveView;\n\nif (curvedWall != null && activeView != null)\n{\n    LocationCurve locCurve = curvedWall.Location as LocationCurve;\n    if (locCurve != null)\n    {\n        Arc arc = locCurve.Curve as Arc;\n        if (arc != null)\n        {\n            ReferenceArray refArray = new ReferenceArray();\n            refArray.Append(arc.Reference);\n            doc.Create.NewDimension(activeView, Line.CreateBound(arc.Center, arc.GetEndPoint(0)), refArray);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a filled region with a '{pattern_name}' pattern."}, {"role": "assistant", "content": "FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"{pattern_name}\"));\nView activeView = doc.ActiveView;\n\nif (regionType != null && activeView != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 0,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(0, 5 / 0.3048,0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place a piece of furniture at coordinates (7,4)."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    if(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0), furnitureSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the sill height of all windows to 3.15 meter(s)."}, {"role": "assistant", "content": "double sillHeight = 3.15 / 0.3048;\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo material llamado '{material_name}' y asígnale un color base y una transparencia."}, {"role": "assistant", "content": "string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Apply {thickness_mm}mm thermal insulation to all hot water pipes."}, {"role": "assistant", "content": "PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a filled region with a '{pattern_name}' pattern."}, {"role": "assistant", "content": "FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"{pattern_name}\"));\nView activeView = doc.ActiveView;\n\nif (regionType != null && activeView != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 0,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(0, 5 / 0.3048,0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un tipo de muro '{type_name}' de 10cm y luego crea un muro de ese tipo."}, {"role": "assistant", "content": "WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 10 / 100 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las vistas que no tienen una plantilla de vista asignada."}, {"role": "assistant", "content": "List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Oculta todas las categorías de anotación en la vista activa."}, {"role": "assistant", "content": "Categories categories = doc.Settings.Categories;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    foreach(Category cat in categories)\n    {\n        if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n        {\n             activeView.SetCategoryHidden(cat.Id, true);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new wall type '{type_name}' with a thickness of 10cm."}, {"role": "assistant", "content": "WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, (10 * 10) / 304.8);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Model a ceiling at a height of 2.8 meters on First Floor."}, {"role": "assistant", "content": "CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"First Floor\") as Level;\n\nif (ceilingType != null && level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,0,0)));\n\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{{profile}}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rename the active view to '{view_name}'."}, {"role": "assistant", "content": "string newName = \"{view_name}\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an electrical conduit with a {diameter_inch}-inch diameter."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 / 0.3048);\n        XYZ end = new XYZ(5 / 0.3048, 0, 3 / 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set({diameter_inch}/12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade un punto de referencia en las coordenadas (2,3,0) dentro del editor de familias."}, {"role": "assistant", "content": "if(doc.IsFamilyDocument)\n{\n    doc.FamilyCreate.NewReferencePoint(new XYZ(2,3,0));\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate the '{view_name}' view as a dependent view."}, {"role": "assistant", "content": "ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"{view_name}\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change the type of a floor to one that contains 'Suelo Hormigón 30cm'."}, {"role": "assistant", "content": "Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Suelo Hormigón 30cm\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva tabla de planificación para ventanas que incluya Marca de Tipo, Ancho y Alto."}, {"role": "assistant", "content": "string scheduleName = \"Tabla de Ventanas\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create {num_grids} horizontal grids spaced {separation_m} meters apart."}, {"role": "assistant", "content": "double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i < {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén la geometría sólida de un elemento seleccionado."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para obtener su geometría\");\n\nList<Solid> solids = new List<Solid>();\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        Options opt = new Options() {{ ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine }};\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if (geoElem != null)\n        {\n            solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a door 0.9m wide and 3.15m high in the wall."}, {"role": "assistant", "content": "Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = $\"Door {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rename all loaded families containing '{old_name}' to '{new_name}'."}, {"role": "assistant", "content": "List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"{old_name}\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"{old_name}\", \"{new_name}\");\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Model a railing on an existing staircase."}, {"role": "assistant", "content": "RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Elimina todos los tipos de muro no utilizados en el proyecto."}, {"role": "assistant", "content": "ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\ndoc.Delete(unusedWallTypes);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una etiqueta de material en una cara de muro."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Face, \"Selecciona una cara para etiquetar\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Selecciona la ubicación de la etiqueta\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the '{schedule_name}' schedule and export its data to '{folder_path}{file_name}'."}, {"role": "assistant", "content": "ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s=>s.Name==\"{schedule_name}\");\n\nif (schedule != null)\n{\n    string folderPath = \"{folder_path}\";\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(folderPath, \"{file_name}\", options);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place a spot elevation on Azotea."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    Level lvl = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Azotea\");\n    View activeView = doc.ActiveView;\n\n    if (lvl != null && activeView != null)\n    {\n        Reference levelRef = new Reference(lvl);\n        XYZ origin = new XYZ(5/0.3048, 5/0.3048, lvl.Elevation);\n        XYZ leaderEnd = origin + new XYZ(2/0.3048, 2/0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, levelRef, origin, origin, leaderEnd, origin, true);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un parámetro global de longitud llamado '{param_name}' con valor de {value_m}m."}, {"role": "assistant", "content": "GlobalParameter gp = GlobalParameter.Create(doc, \"{param_name}\", SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits({value_m}, UnitTypeId.Meters)));\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un conducto eléctrico de {diameter_inch} pulgada de diámetro."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 / 0.3048);\n        XYZ end = new XYZ(5 / 0.3048, 0, 3 / 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set({diameter_inch} / 12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dimension the length of a user-selected wall."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select a wall to dimension\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Delete all unused wall types in the project."}, {"role": "assistant", "content": "ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new shared text project parameter named '{param_name}' for walls and doors."}, {"role": "assistant", "content": "string originalFile = doc.Application.SharedParametersFilename;\nstring tempFile = System.IO.Path.GetTempFileName() + \".txt\";\nusing (System.IO.File.Create(tempFile)) { }\ndoc.Application.SharedParametersFilename = tempFile;\n\ntry\n{\n    DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n    if (defFile != null)\n    {\n        DefinitionGroup group = defFile.Groups.Create(\"General\");\n        if (group != null)\n        {\n            ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(\"{param_name}\", ParameterType.Text);\n            Definition definition = group.Definitions.Create(options);\n            if (definition != null)\n            {\n                CategorySet categories = doc.Application.Create.NewCategorySet();\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                doc.ParameterBindings.Insert(definition, binding, Autodesk.Revit.DB.BuiltInParameterGroup.PG_DATA);\n            }\n        }\n    }\n}\nfinally\n{\n    doc.Application.SharedParametersFilename = originalFile;\n    System.IO.File.Delete(tempFile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el nombre de todas las familias cargadas que contengan '{old_name}' a '{new_name}'."}, {"role": "assistant", "content": "List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"{old_name}\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"{old_name}\", \"{new_name}\");\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a Reflected Ceiling Plan view for First Floor."}, {"role": "assistant", "content": "string levelName = \"First Floor\";\nstring viewName = \"First Floor Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Alinea las líneas de centro de dos muros seleccionados por el usuario."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona el primer muro (el que se moverá)\");\nReference r2 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona el segundo muro (el de referencia)\");\n\nif (r1 != null && r2 != null)\n{\n    Wall w1 = doc.GetElement(r1) as Wall;\n    Wall w2 = doc.GetElement(r2) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (w1 != null && w2 != null && activeView != null)\n    {\n        LocationCurve lc1 = w1.Location as LocationCurve;\n        LocationCurve lc2 = w2.Location as LocationCurve;\n        if (lc1 != null && lc2 != null)\n        {\n            doc.Create.NewAlignment(activeView, lc1.Curve.Reference, lc2.Curve.Reference);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva tabla de planificación para Pilares Estructurales."}, {"role": "assistant", "content": "string scheduleName = \"Tabla de Pilares Estructurales\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Generate a report with the area of all rooms in the project."}, {"role": "assistant", "content": "List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén el número total de advertencias en el proyecto."}, {"role": "assistant", "content": "int totalWarnings = doc.GetWarnings().Count;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new door type named 'Puerta 90x210' and set its fire rating to '{fire_rating}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Puerta 90x210\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"{fire_rating}\");\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista de sección usando una caja de 1.0x{depth_m}x3.0 metros."}, {"role": "assistant", "content": "ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\n\nif (sectionVFT != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(0,0,0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({depth_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a grid of {num_horizontal} horizontal and {num_vertical} vertical grids, spaced 8 meters apart."}, {"role": "assistant", "content": "double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\nint countH = {num_horizontal};\nint countV = {num_vertical};\nfor (int i = 0; i < countH; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((countV - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < countV; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (countH - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls with the comment '{comment}'."}, {"role": "assistant", "content": "ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"{comment}\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Temporarily isolate the {built_in_category_enum} category in the active view."}, {"role": "assistant", "content": "ICollection<ElementId> elementIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.{built_in_category_enum}).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(elementIds);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de texto llamado '{type_name}' de {text_size_mm}mm de color verde."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén los IDs de todas las vistas 3D que empiezan con '{prefix}' para exportación."}, {"role": "assistant", "content": "List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"{prefix}\") && !v.IsTemplate).Select(v => v.Id).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todos los muros con el comentario '{comment}'."}, {"role": "assistant", "content": "ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"{comment}\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Ajusta la región de recorte de la vista a un rectángulo de (0,0) a (10,0)."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Adjust Crop Region\"))\n{\n    t.Start();\n    View view = doc.ActiveView;\n\n    if (view != null && view.CropBoxActive)\n    {\n        BoundingBoxXYZ cropBox = view.CropBox;\n        if (cropBox != null)\n        {\n            XYZ minPoint = new XYZ(0 / 0.3048, 0 / 0.3048, cropBox.Min.Z);\n            XYZ maxPoint = new XYZ(10 / 0.3048, 0 / 0.3048, cropBox.Max.Z);\n            cropBox.Min = minPoint;\n            cropBox.Max = maxPoint;\n            view.CropBox = cropBox;\n            view.CropBoxVisible = true;\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the sill height of all windows to 3.15 meter(s)."}, {"role": "assistant", "content": "double sillHeight = 3.15 / 0.3048;\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva vista 3D llamada '{view_name}' orientada desde el punto ({eye_x_m},{eye_y_m},{eye_z_m}) mirando hacia el origen."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v=>v.ViewFamily==ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    if (view != null)\n    {\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits({eye_x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_z_m}, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D vo = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        view.SetOrientation(vo);\n        view.Name = \"{view_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una familia 'in-situ' para un/a '{item_name}' personalizado usando una extrusión."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Modela una bandeja de cables entre el punto ({p1x_m}, {p1y_m}, {p1z_m}) y ({p2x_m}, {p2y_m}, {p2z_m})."}, {"role": "assistant", "content": "CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (trayType != null && level != null)\n{\n    XYZ p1 = new XYZ(UnitUtils.ConvertToInternalUnits({p1x_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p1y_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p1z_m}, UnitTypeId.Meters)); \n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({p2x_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p2y_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p2z_m}, UnitTypeId.Meters));\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Establece el parámetro 'Marca' de todos los elementos seleccionados a '{mark_value}'."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"{mark_value}\");\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Export all sheets in a set to a single combined PDF."}, {"role": "assistant", "content": "ViewSheetSet sheetSet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheetSet)).FirstOrDefault() as ViewSheetSet;\n\nif (sheetSet != null)\n{\n    string folderPath = \"C:/RevitExports/\";\n    PDFExportOptions options = new PDFExportOptions();\n    options.Combine = true;\n    options.FileName = sheetSet.Name;\n    List<ElementId> sheetIds = sheetSet.Views.Cast<ViewSheet>().Select(s => s.Id).ToList();\n    doc.Export(folderPath, sheetIds, options);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Carga un enlace DWG desde '{file_path}' preservando los colores."}, {"role": "assistant", "content": "DWGImportOptions opts = new DWGImportOptions();\nopts.ColorMode = ImportColorMode.Preserved;\nElementId linkId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(\"{file_path}\", opts, activeView, out linkId);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change a glass panel in a curtain wall to a solid panel."}, {"role": "assistant", "content": "Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\nFamilySymbol solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_CurtainWallPanels && fs.Name.Contains(\"Solid\"));\n\nif (curtainWall != null && solidPanelType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    if (grid != null)\n    {\n        ElementId panelIdToChange = grid.GetPanelIds().FirstOrDefault();\n        if (panelIdToChange != ElementId.InvalidElementId)\n        {\n            Panel panelToChange = doc.GetElement(panelIdToChange) as Panel;\n            if (panelToChange != null) panelToChange.ChangeTypeId(solidPanelType.Id);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un espacio MEP para cada habitación en el nivel 'Level 2'."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\nif (level != null)\n{\n    List<Room> roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level.Id)).Cast<Room>().ToList();\n    foreach(Room room in roomsOnLevel)\n    {\n       Space.Create(doc, room, null);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls with an empty 'Mark' parameter and set it to '{mark_value}'."}, {"role": "assistant", "content": "List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"{mark_value}\");\n  }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Exporta el modelo a formato IFC4 para coordinación."}, {"role": "assistant", "content": "string folderPath = \"C:/RevitExports/\";\nstring fileName = doc.Title + \"-Coordination.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4;\ndoc.Export(folderPath, fileName, options);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create beams between horizontally aligned columns."}, {"role": "assistant", "content": "FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    if(!beamSymbol.IsActive) beamSymbol.Activate();\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the host element of the first window found."}, {"role": "assistant", "content": "FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a pipe with a 50mm diameter."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Millimeters));\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera {num_grids} rejillas horizontales con una separación de {separation_m}m."}, {"role": "assistant", "content": "double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i < {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Mueve un elemento seleccionado a la posición (7,4)."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para mover\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            XYZ newPosition = new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), lp.Point.Z);\n            lp.Point = newPosition;\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a text note with content '{content}' and a leader pointing to a selected element."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference target = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (target != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    opts.HorizontalAlignment = HorizontalTextAlignment.Left;\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{content}\", opts);\n    if (note != null)\n    {\n        Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n        leader.End = target.GlobalPoint;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a text note with text '{note_text}', given location, and target element."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{note_text}\", opts);\n    if (note != null)\n    {\n        Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n        leader.End = targetRef.GlobalPoint;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un ensamblaje a partir de los elementos seleccionados."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"Nuevo Ensamblaje\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the sill height of all windows to {sill_height_mm}mm."}, {"role": "assistant", "content": "double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a section view named '{view_name}'."}, {"role": "assistant", "content": "ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-1, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    \n    if (sectionView != null)\n    {\n        sectionView.Name = \"{view_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new level named 'Azotea' at 3.5 meters elevation."}, {"role": "assistant", "content": "double elevation = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Azotea\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un filtro de vista para ocultar muros demolidos."}, {"role": "assistant", "content": "Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p => p.Name.Contains(\"Demolished\") || p.Name.Contains(\"Demolición\"));\nView activeView = doc.ActiveView;\n\nif (demolishedPhase != null && activeView != null)\n{\n    ElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\n    FilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\n    ElementFilter filter = new ElementParameterFilter(rule);\n    ICollection<ElementId> categories = new List<ElementId>{{ new ElementId(BuiltInCategory.OST_Walls) }};\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Filtro Demolición\", categories, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new elevation view looking north."}, {"role": "assistant", "content": "ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null && activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 2);\n        if (aev != null)\n        {\n            aev.Name = \"North Elevation\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all annotation families and count how many there are."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\nint count = annotationFamilies.Count;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade una etiqueta a la columna más cercana al origen."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n    LocationPoint lp = c.Location as LocationPoint;\n    return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n}).FirstOrDefault();\n\nif (activeView != null && column != null)\n{\n    LocationPoint loc = column.Location as LocationPoint;\n    if (loc != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new 3D view named '{view_name}' oriented from point ({eye_x_m},{eye_y_m},{eye_z_m}) looking at the origin."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v=>v.ViewFamily==ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    if (view != null)\n    {\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits({eye_x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_z_m}, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D vo = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        view.SetOrientation(vo);\n        view.Name = \"{view_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén el elemento anfitrión de la primera ventana que encuentres."}, {"role": "assistant", "content": "FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a view filter to hide demolished walls."}, {"role": "assistant", "content": "Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p => p.Name.Contains(\"Demolished\") || p.Name.Contains(\"Demolición\"));\nView activeView = doc.ActiveView;\n\nif (demolishedPhase != null && activeView != null)\n{\n    ElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\n    FilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\n    ElementFilter filter = new ElementParameterFilter(rule);\n    ICollection<ElementId> categories = new List<ElementId>{ new ElementId(BuiltInCategory.OST_Walls) };\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Demolition Filter\", categories, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade un punto al Path of Travel seleccionado."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un Path of Travel\");\n\nif (pickedRef != null)\n{\n    PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n    if (pot != null)\n    {\n        IList<XYZ> points = pot.GetPath();\n        if (points != null && points.Count >= 2)\n        {\n            XYZ midPoint = (points[0] + points[1]) / 2;\n            points.Insert(1, midPoint); \n            pot.Update(points);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Exporta la geometría de un elemento seleccionado a un archivo SAT."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para exportar\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        string folderPath = \"C:/RevitExports/\";\n        string fileName = elem.Name + \".sat\";\n        SATExportOptions options = new SATExportOptions();\n        doc.Export(folderPath, fileName, new List<ElementId>{{elem.Id}}, options);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new level named 'L01' at 4.0 meters elevation."}, {"role": "assistant", "content": "double elevation = UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"L01\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a grid of {num_horizontal} horizontal and {num_vertical} vertical grids, spaced 6 meters apart."}, {"role": "assistant", "content": "double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint countH = {num_horizontal};\nint countV = {num_vertical};\nfor (int i = 0; i < countH; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((countV - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < countV; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (countH - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Ajusta todas las ventanas para que tengan la altura del antepecho a {sill_height_mm}mm."}, {"role": "assistant", "content": "double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a text note with content '{content}' and a leader pointing to a selected element."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference target = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (target != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    opts.HorizontalAlignment = HorizontalTextAlignment.Left;\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{content}\", opts);\n    if (note != null)\n    {\n        Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n        leader.End = target.GlobalPoint;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Assign the '{material_name}' material to the first layer of a wall type."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"{material_name}\"));\n\n    if (wallType != null && material != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, material.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de texto llamado '{type_name}' de {text_size_mm}mm de color verde."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new window schedule that includes Type Mark, Width, and Height."}, {"role": "assistant", "content": "string scheduleName = \"Window Schedule\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate the '{view_name}' plan view and name it '{template_name}'."}, {"role": "assistant", "content": "ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"{view_name}\");\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{template_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate the '{original_name}' wall type and name it '{new_name}'."}, {"role": "assistant", "content": "string originalName = \"{original_name}\";\nstring newName = \"{new_name}\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Recarga el vínculo de Revit '{link_name}'."}, {"role": "assistant", "content": "RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"{link_name}\");\n\nif (linkType != null)\n{\n    linkType.Reload();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea vigas entre las columnas alineadas horizontalmente."}, {"role": "assistant", "content": "FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    if(!beamSymbol.IsActive) beamSymbol.Activate();\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change the type of all '{old_type_name}' windows to '{new_type_name}'."}, {"role": "assistant", "content": "FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"{new_type_name}\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"{old_type_name}\"));\n\nif (newType != null && oldType != null)\n{\n    if(!newType.IsActive) newType.Activate();\n    List<FamilyInstance> windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una losa de cimentación estructural de 20cm de espesor."}, {"role": "assistant", "content": "Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\nif (foundationLevel != null && slabType != null)\n{\n    // Assuming the user wants to modify the existing type. For a new type, Duplicate() is needed.\n    CompoundStructure cs = slabType.GetCompoundStructure();\n    if (cs != null && cs.GetFirstCoreLayerIndex() != -1) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Centimeters));\n        slabType.SetCompoundStructure(cs);\n    }\n\n    XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,15,0); XYZ p4 = new XYZ(0,15,0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change the detail level of the current view to '{detail_level_enum}'."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.{detail_level_enum};\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Export a list of all project warnings to a text file on the desktop."}, {"role": "assistant", "content": "string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nstring filePath = System.IO.Path.Combine(desktopPath, \"RevitWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\nSystem.IO.File.WriteAllLines(filePath, warningDescriptions);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Ajusta todas las ventanas para que la altura del antepecho sea {sill_height_m} metro."}, {"role": "assistant", "content": "double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_m}, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un DirectShape con forma de caja de {size_m}x{size_m}x{size_m} metros llamado '{shape_name}'."}, {"role": "assistant", "content": "TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits({size_m}, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"{shape_name}\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Pon un pilar estructural en las coordenadas 2,3."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea vigas entre las columnas alineadas horizontalmente."}, {"role": "assistant", "content": "FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    if(!beamSymbol.IsActive) beamSymbol.Activate();\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rename all loaded families containing '{old_name}' to '{new_name}'."}, {"role": "assistant", "content": "List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"{old_name}\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"{old_name}\", \"{new_name}\");\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the '{schedule_name}' schedule and export its data to '{folder_path}{file_name}'."}, {"role": "assistant", "content": "ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s=>s.Name==\"{schedule_name}\");\n\nif (schedule != null)\n{\n    string folderPath = \"{folder_path}\";\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(folderPath, \"{file_name}\", options);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un conducto eléctrico de {diameter_inch} pulgada de diámetro."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 / 0.3048);\n        XYZ end = new XYZ(5 / 0.3048, 0, 3 / 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set({diameter_inch} / 12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de puerta llamado 'Double-Glass' y establece su resistencia al fuego a '{fire_rating_value}'."}, {"role": "assistant", "content": "FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"Double-Glass\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating_value}\");\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Hide all annotation categories in the active view."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Hide Annotation Categories\"))\n{\n    t.Start();\n    Categories categories = doc.Settings.Categories;\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        foreach(Category cat in categories)\n        {\n            if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n            {\n                 activeView.SetCategoryHidden(cat.Id, true);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all subcategories from the {buit_in_category_enum} category."}, {"role": "assistant", "content": "Category targetCategory = doc.Settings.Categories.get_Item(BuiltInCategory.{buit_in_category_enum});\nCategoryNameMap subcategories = targetCategory.SubCategories;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {text_size_mm}mm text type named '{type_name}' in green color."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Mueve el punto base del proyecto {distance_m} metros hacia el norte."}, {"role": "assistant", "content": "BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\nif (projectBasePoint != null)\n{\n    XYZ translation = new XYZ(0, {distance_m} / 0.3048, 0);\n    ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera {num_grids} rejillas horizontales con una separación de {separation_m}m."}, {"role": "assistant", "content": "double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i < {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de puerta llamado 'M_Single-Flush' y establece su resistencia al fuego a '{fire_rating}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"M_Single-Flush\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"{fire_rating}\");\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un conducto eléctrico de {diameter_mm}mm de diámetro entre ({start_x},{start_y},{start_z}) y ({end_x},{end_y},{end_z})."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\nif (level != null && conduitTypeId != ElementId.InvalidElementId)\n{\n    XYZ startPoint = new XYZ({start_x}, {start_y}, {start_z});\n    XYZ endPoint = new XYZ({end_x}, {end_y}, {end_z});\n    Conduit conduit = Conduit.Create(doc, conduitTypeId, startPoint, endPoint, level.Id);\n    if (conduit != null)\n    {\n        Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n        if (diameterParam != null && !diameterParam.IsReadOnly)\n        {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits({diameter_mm}, UnitTypeId.Millimeters));\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rename the active view to '{view_name}'."}, {"role": "assistant", "content": "string newName = \"{view_name}\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva cota de nivel llamada 'Nivel 1' a una elevación de 4.0 metros."}, {"role": "assistant", "content": "double elevation = UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nnewLevel.Name = \"Nivel 1\";"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Define un filtro de vista llamado '{filter_name}' para ocultar las líneas de detalle."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection<ElementId> catsToHide = new List<ElementId>{new ElementId(BuiltInCategory.OST_Lines)};\n    ElementFilter filter = new ElementCategoryFilter(new ElementId(BuiltInCategory.OST_Lines));\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"{filter_name}\", catsToHide, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Inserta una armadura (truss) de 7.8 metros entre dos puntos."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(7.8 / 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a curtain wall 1.2 meters wide and 3.15 meters high."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters), 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Pin the selected element so it cannot be moved."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count > 0)\n{\n    Element elementToPin = doc.GetElement(selectedIds.First());\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén todas las familias de puertas cargadas en el proyecto."}, {"role": "assistant", "content": "List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Exporta una lista de todas las advertencias del proyecto a un archivo de texto en el escritorio."}, {"role": "assistant", "content": "string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nstring filePath = System.IO.Path.Combine(desktopPath, \"RevitWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\nSystem.IO.File.WriteAllLines(filePath, warningDescriptions);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las advertencias del proyecto."}, {"role": "assistant", "content": "IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de tubería llamado 'Standard' con material '{material_name}'."}, {"role": "assistant", "content": "PipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"{material_name}\") as Material;\n\nif (pipeTypeToDuplicate != null && material != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(\"Standard\") as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Establece el parámetro 'Marca' de todos los elementos seleccionados a '{mark_value}'."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"{mark_value}\");\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Hide all annotation categories in the active view."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Hide Annotation Categories\"))\n{\n    t.Start();\n    Categories categories = doc.Settings.Categories;\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        foreach(Category cat in categories)\n        {\n            if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n            {\n                 activeView.SetCategoryHidden(cat.Id, true);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade un punto al Path of Travel seleccionado."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un Path of Travel\");\n\nif (pickedRef != null)\n{\n    PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n    if (pot != null)\n    {\n        IList<XYZ> points = pot.GetPath();\n        if (points != null && points.Count >= 2)\n        {\n            XYZ midPoint = (points[0] + points[1]) / 2;\n            points.Insert(1, midPoint); \n            pot.Update(points);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Temporarily isolate all furniture in the active view."}, {"role": "assistant", "content": "ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add a point to the selected Path of Travel."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select a Path of Travel\");\n\nif (pickedRef != null)\n{\n    PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n    if (pot != null)\n    {\n        IList<XYZ> points = pot.GetPath();\n        if (points != null && points.Count >= 2)\n        {\n            XYZ midPoint = (points[0] + points[1]) / 2;\n            points.Insert(1, midPoint);\n            pot.Update(points);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las vistas de planta del proyecto."}, {"role": "assistant", "content": "List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Reload the Revit link '{link_name}'."}, {"role": "assistant", "content": "RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"{link_name}\");\n\nif (linkType != null)\n{\n    linkType.Reload();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nivel 'Basement' a -3.0m."}, {"role": "assistant", "content": "string levelName = \"Basement\";\ndouble elev = UnitUtils.ConvertToInternalUnits(-3.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Importa topografía georreferenciada desde un archivo LandXML."}, {"role": "assistant", "content": "IList<XYZ> points = new List<XYZ>();\npoints.Add(new XYZ(0, 0, 0));\npoints.Add(new XYZ(50, 0, 5));\npoints.Add(new XYZ(0, 50, 10));\nTopographySurface.Create(doc, points);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dimension the length of a user-selected wall."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select a wall to dimension\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén los IDs de todas las vistas 3D que empiezan con '{prefix}' para exportación."}, {"role": "assistant", "content": "List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"{prefix}\") && !v.IsTemplate).Select(v => v.Id).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aísla temporalmente todo el mobiliario en la vista activa."}, {"role": "assistant", "content": "ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una losa de cimentación de 1.2x2.8 metros."}, {"role": "assistant", "content": "Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n\nif (foundationLevel != null && slabType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(1.2/0.3048, 0, 0);\n    XYZ p3 = new XYZ(1.2/0.3048, 2.8/0.3048, 0);\n    XYZ p4 = new XYZ(0, 2.8/0.3048, 0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo nivel llamado 'Nivel 1' a una elevación de 3.5 metros."}, {"role": "assistant", "content": "string levelName = \"Nivel 1\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Exporta la vista 3D activa a NWC para Navisworks."}, {"role": "assistant", "content": "View3D view3d = doc.ActiveView as View3D;\n\nif (view3d != null)\n{\n    string folderPath = \"C:/RevitExports/\";\n    string fileName = view3d.Name + \".nwc\";\n    NavisworksExportOptions options = new NavisworksExportOptions();\n    options.ExportScope = NavisworksExportScope.View;\n    options.ViewId = view3d.Id;\n    doc.Export(folderPath, fileName, options);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rota un elemento seleccionado 45 grados sobre su eje Z."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, 45 * Math.PI / 180.0);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplica el {level_to_duplicate} con un desfase de {offset_m}m y llámalo '{new_level_name}'."}, {"role": "assistant", "content": "string newLevelName = \"{new_level_name}\";\nLevel levelToDup = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{level_to_duplicate}\") as Level;\n\nif (levelToDup != null)\n{\n    double newElevation = levelToDup.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all views that do not have an assigned view template."}, {"role": "assistant", "content": "List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de muro de 25cm llamado 'SW12'."}, {"role": "assistant", "content": "string newTypeName = \"SW12\";\nWallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(wallTypeToDuplicate != null)\n{\n    WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n            cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(25/100.0, UnitTypeId.Meters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rename the active view to '{view_name}'."}, {"role": "assistant", "content": "string newName = \"{view_name}\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Start and commit a transaction for '{transaction_name}'."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un conducto eléctrico de {diameter_mm}mm de diámetro entre ({start_x},{start_y},{start_z}) y ({end_x},{end_y},{end_z})."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\nif (level != null && conduitTypeId != ElementId.InvalidElementId)\n{\n    XYZ startPoint = new XYZ({start_x}, {start_y}, {start_z});\n    XYZ endPoint = new XYZ({end_x}, {end_y}, {end_z});\n    Conduit conduit = Conduit.Create(doc, conduitTypeId, startPoint, endPoint, level.Id);\n    if (conduit != null)\n    {\n        Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n        if (diameterParam != null && !diameterParam.IsReadOnly)\n        {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits({diameter_mm}, UnitTypeId.Millimeters));\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea {num_grids} ejes horizontales separados por {separation_m} metros."}, {"role": "assistant", "content": "double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i < {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Move a wall {distance_m} meters to the right."}, {"role": "assistant", "content": "Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (wall != null)\n{\n    XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters),0,0);\n    ElementTransformUtils.MoveElement(doc, wall.Id, translation);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aplica un color rojo a todas las ventanas en la vista activa."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(255, 0, 0));\n    ICollection<ElementId> windows = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().ToElementIds();\n    \n    foreach (ElementId windowId in windows)\n    {\n        activeView.SetElementOverrides(windowId, ogs);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todos los muros que no están asociados a ningún nivel."}, {"role": "assistant", "content": "ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén los IDs de todas las vistas 3D que empiezan con '{prefix}' para exportación."}, {"role": "assistant", "content": "List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"{prefix}\") && !v.IsTemplate).Select(v => v.Id).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the visibility of the 'Furniture' category to false in the active view."}, {"role": "assistant", "content": "Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nView activeView = doc.ActiveView;\n\nif (furnitureCat != null && activeView != null)\n{\n    activeView.SetCategoryHidden(furnitureCat.Id, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra el host de una luminaria basada en cara."}, {"role": "assistant", "content": "FamilyInstance lightFixture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().Cast<FamilyInstance>().FirstOrDefault(fi => fi.HostFace != null);\n\nElement host = null;\nif (lightFixture != null)\n{\n    Reference hostFaceRef = lightFixture.HostFace;\n    if (hostFaceRef != null)\n    {\n        host = doc.GetElement(hostFaceRef.ElementId);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista de plano de plafón reflejado para el Nivel 2."}, {"role": "assistant", "content": "string levelName = \"Nivel 2\";\nstring viewName = \"Plano de Plafón Nivel 2\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Oculta todos los muros que sean más cortos de 10.2 metros."}, {"role": "assistant", "content": "double lengthThreshold = UnitUtils.ConvertToInternalUnits(10.2, UnitTypeId.Meters);\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nList<ElementId> shortWallIds = new List<ElementId>();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    foreach(Wall wall in walls)\n    {\n        Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n        if(lengthParam != null && lengthParam.HasValue && lengthParam.AsDouble() < lengthThreshold)\n        {\n            shortWallIds.Add(wall.Id);\n        }\n    }\n    if (shortWallIds.Count > 0)\n    {\n        activeView.HideElements(shortWallIds);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva vista de alzado mirando al norte con el nombre \"{view_name}\"."}, {"role": "assistant", "content": "ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null && activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 2);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aplica aislamiento térmico de {thickness_mm}mm a todas las tuberías de agua caliente."}, {"role": "assistant", "content": "PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade montantes a todas las líneas de rejilla de un muro cortina."}, {"role": "assistant", "content": "Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\n\nif (curtainWall != null && mullionType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    if (grid != null)\n    {\n        foreach (ElementId gridLineId in grid.GetVGridLineIds())\n        {\n            CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n            if(line != null) grid.AddMullions(line, mullionType);\n        }\n        foreach (ElementId gridLineId in grid.GetUGridLineIds())\n        {\n            CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n            if(line != null) grid.AddMullions(line, mullionType);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea {num_worksets} worksets para las disciplinas de ingeniería."}, {"role": "assistant", "content": "List<string> worksetNames = new List<string> {{ \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Apply {thickness_mm}mm thermal insulation to all hot water pipes."}, {"role": "assistant", "content": "PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a radial dimension for a curved wall."}, {"role": "assistant", "content": "Wall curvedWall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.Location is LocationCurve && (w.Location as LocationCurve).Curve is Arc);\nView activeView = doc.ActiveView;\n\nif (curvedWall != null && activeView != null)\n{\n    LocationCurve locCurve = curvedWall.Location as LocationCurve;\n    if (locCurve != null)\n    {\n        Arc arc = locCurve.Curve as Arc;\n        if (arc != null)\n        {\n            ReferenceArray refArray = new ReferenceArray();\n            refArray.Append(arc.Reference);\n            doc.Create.NewDimension(activeView, Line.CreateBound(arc.Center, arc.GetEndPoint(0)), refArray);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {text_size_mm}mm text type in green color named '{type_name}'."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Generate a report with the area of all rooms in the project."}, {"role": "assistant", "content": "List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de texto llamado '{type_name}' de {text_size_mm}mm de color verde."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Align the face of one wall with the face of another."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Face, \"Select the target face (stationary)\");\nReference ref2 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Face, \"Select the face to move\");\nView activeView = doc.ActiveView;\n\nif (ref1 != null && ref2 != null && activeView != null)\n{\n    doc.Create.NewAlignment(activeView, ref1, ref2);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nota de texto con el texto '{note_text}', una ubicación y un elemento de destino dados."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{note_text}\", opts);\n    if (note != null)\n    {\n        Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n        leader.End = targetRef.GlobalPoint;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a wall 10.2 meters long and 3.0 meters high."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(10.2, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters), 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Importa topografía georreferenciada desde un archivo LandXML."}, {"role": "assistant", "content": "// The Revit API in the provided context does not support direct LandXML import.\n// This functionality typically requires additional add-ins like the Site Designer, which are not available here.\n// As a placeholder, this code will show how to create a simple topography surface from a list of points.\nusing(Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(50, 0, 5));\n    points.Add(new XYZ(0, 50, 10));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Permite al usuario seleccionar un muro y obtén su ElementId."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista 3D con la caja de sección activada."}, {"role": "assistant", "content": "string viewName = \"Vista 3D con Caja de Sección\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all project warnings."}, {"role": "assistant", "content": "IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Permite al usuario seleccionar un muro con el mensaje '{selection_prompt}' y obtén su ElementId."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"{selection_prompt}\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un techo por contorno en el 'Nivel 2'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n    if(roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20,0,0), new XYZ(20,30,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20,30,0), new XYZ(0,30,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de cota lineal llamado '{type_name}' con texto azul y tamaño {text_size_mm}mm."}, {"role": "assistant", "content": "DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\nif (linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"{type_name}\") as DimensionType;\n    if (newDimType != null)\n    {\n        Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n        Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls that have no base level assigned."}, {"role": "assistant", "content": "ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the coordinates of the project base point and the survey point."}, {"role": "assistant", "content": "BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Join the geometry of an intersecting column and floor."}, {"role": "assistant", "content": "Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\n\nif (column != null && floor != null)\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rename all schedules containing '{text_to_find}' to '{new_text}'."}, {"role": "assistant", "content": "List<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"{text_to_find}\")).ToList();\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"{text_to_find}\", \"{new_text}\");\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rellena el parámetro de material de todos los muros con '{material_name}'."}, {"role": "assistant", "content": "Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"{material_name}\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new schedule for Structural Columns."}, {"role": "assistant", "content": "string scheduleName = \"Structural Column Schedule\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplica la vista de planta '{view_name}' y nómbrala '{template_name}'."}, {"role": "assistant", "content": "ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"{view_name}\");\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{template_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new wall type '{type_name}' with a thickness of 10cm."}, {"role": "assistant", "content": "WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, (10 / 100) / 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aísla temporalmente la categoría {built_in_category_enum} en la vista activa."}, {"role": "assistant", "content": "ICollection<ElementId> elementIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.{built_in_category_enum}).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(elementIds);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create {num_grids} vertical grids spaced {separation_m} meters apart."}, {"role": "assistant", "content": "double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i=0; i<{num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create {num_worksets} worksets for engineering disciplines."}, {"role": "assistant", "content": "List<string> worksetNames = new List<string> {{ \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {sheet_size} sheet and place a legend on it."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"{sheet_size}\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 'W-Wide Flange-Column' column at each grid intersection."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"W-Wide Flange-Column\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nivel intermedio llamado '{new_level_name}' a mitad de camino entre el {level1_name} y el {level2_name}."}, {"role": "assistant", "content": "string newLevelName = \"{new_level_name}\";\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"{level1_name}\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"{level2_name}\");\nif (lvl1 != null && lvl2 != null)\n{\ndouble midElevation = (lvl1.ProjectElevation + lvl2.ProjectElevation) / 2.0;\nLevel newLevel = Level.Create(doc, midElevation);\n    if(newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Oculta todos los elementos de anotación en la vista activa."}, {"role": "assistant", "content": "if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade un punto al Path of Travel seleccionado."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un Path of Travel\");\n\nif (pickedRef != null)\n{\n    PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n    if (pot != null)\n    {\n        IList<XYZ> points = pot.GetPath();\n        if (points != null && points.Count >= 2)\n        {\n            XYZ midPoint = (points[0] + points[1]) / 2;\n            points.Insert(1, midPoint); \n            pot.Update(points);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Synchronize the local model with the central model, adding the comment '{comment}'."}, {"role": "assistant", "content": "if (doc.IsWorkshared)\n{\n    TransactWithCentralOptions tco = new TransactWithCentralOptions();\n    SynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\n    swcOpts.Comment = \"{comment}\";\n    swcOpts.SaveLocalAfter = true;\n    doc.SynchronizeWithCentral(tco, swcOpts);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo nivel 'Nivel 2' a una elevación de 3.5 metros."}, {"role": "assistant", "content": "double elevation = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 2\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 'Nivel 2' level at 3.5m."}, {"role": "assistant", "content": "string levelName = \"Nivel 2\";\ndouble elev = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Pin the selected element so it cannot be moved."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count > 0)\n{\n    Element elementToPin = doc.GetElement(selectedIds.First());\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una rejilla de {num_horizontal} ejes horizontales y {num_vertical} verticales, espaciados 6 metros."}, {"role": "assistant", "content": "double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint count = {num_horizontal};\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ(({num_vertical} - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < {num_vertical}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade una etiqueta a la columna más cercana al origen."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n    LocationPoint lp = c.Location as LocationPoint;\n    return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n}).FirstOrDefault();\n\nif (activeView != null && column != null)\n{\n    LocationPoint loc = column.Location as LocationPoint;\n    if (loc != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un parámetro global de longitud llamado '{param_name}' con valor de {value_m}m."}, {"role": "assistant", "content": "GlobalParameter gp = GlobalParameter.Create(doc, \"{param_name}\", SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits({value_m}, UnitTypeId.Meters)));\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplica el nivel '{original_level_name}' con un desfase de {offset_m}m y llámalo '{new_level_name}'."}, {"role": "assistant", "content": "Level originalLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{original_level_name}\") as Level;\n\nif (originalLevel != null)\n{\n    double newElevation = originalLevel.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = \"{new_level_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las puertas del nivel 'Basement' que sean de la familia '{family_name}'."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Basement\");\nList<Element> doors = new List<Element>();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 'Level 1' level at 3.5m."}, {"role": "assistant", "content": "string levelName = \"Level 1\";\ndouble elev = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una losa de cimentación estructural de 10cm de espesor llamada '{type_name}'."}, {"role": "assistant", "content": "Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nFloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\nif(slabTypeToDuplicate != null && foundationLevel != null)\n{\n    string newTypeName = \"{type_name}\";\n    FloorType newSlabType = slabTypeToDuplicate.Duplicate(newTypeName) as FloorType;\n    if(newSlabType != null)\n    {\n        CompoundStructure cs = newSlabType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), (10 * 10) / 304.8);\n            newSlabType.SetCompoundStructure(cs);\n            XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n            CurveLoop profile = new CurveLoop();\n            profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n            doc.Create.NewFloor(new List<CurveLoop>{profile}, newSlabType, foundationLevel, true);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Averigua quién es el propietario de un elemento seleccionado."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento\");\n\nWorksharingTooltipInfo info = null;\nif (pickedRef != null)\n{\n    info = WorksharingUtils.GetWorksharingTooltipInfo(doc, pickedRef.ElementId);\n}\n"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rename all plan views to start with '{prefix}'."}, {"role": "assistant", "content": "string prefix = \"{prefix}\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las vistas de planta del proyecto."}, {"role": "assistant", "content": "List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an MEP space for each room on 'Roof'."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Roof\");\n\nif (level != null)\n{\n    List<Room> roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level.Id)).Cast<Room>().ToList();\n    foreach(Room room in roomsOnLevel)\n    {\n       Space.Create(doc, room, null);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Copy all elements from {source_level} to {target_level}."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{source_level}\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{target_level}\") as Level;\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(elementsToCopy.Any())\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea columnas en cada intersección de ejes."}, {"role": "assistant", "content": "FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    if(!colSymbol.IsActive) colSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                 if(results != null) {\n                     foreach (IntersectionResult ir in results)\n                     {\n                         doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                     }\n                 }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Mueve el punto base del proyecto {distance_m} metros hacia el norte."}, {"role": "assistant", "content": "BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\nif (projectBasePoint != null)\n{\n    XYZ translation = new XYZ(0, {distance_m} / 0.3048, 0);\n    ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aplica aislamiento térmico de {thickness_mm}mm a todas las tuberías de agua caliente."}, {"role": "assistant", "content": "PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Join the geometry of an intersecting column and floor."}, {"role": "assistant", "content": "Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\n\nif (column != null && floor != null)\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un muro en Level 1 de (0,0,0) a (10,0,0) con 2.8m de alto."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallType != null)\n    {\n        Line wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0));\n        double height = UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters);\n        Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade montantes a todas las líneas de rejilla de un muro cortina."}, {"role": "assistant", "content": "Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\n\nif (curtainWall != null && mullionType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    if (grid != null)\n    {\n        foreach (ElementId gridLineId in grid.GetVGridLineIds())\n        {\n            CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n            if(line != null) line.AddMullions(mullionType, false);\n        }\n        foreach (ElementId gridLineId in grid.GetUGridLineIds())\n        {\n            CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n            if(line != null) line.AddMullions(mullionType, false);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Inserta una ventana de 0.9 metro de ancho y 3.0 metros de alto en un muro, creando un nuevo tipo si es necesario."}, {"role": "assistant", "content": "Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = $\"Window 0.9m x 3.0m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    if(widthParam != null) widthParam.Set(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters));\n\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n    if(heightParam != null) heightParam.Set(UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters));\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find the host of a face-based light fixture."}, {"role": "assistant", "content": "FamilyInstance lightFixture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().Cast<FamilyInstance>().FirstOrDefault(fi => fi.HostFace != null);\n\nElement host = null;\nif (lightFixture != null)\n{\n    Reference hostFaceRef = lightFixture.HostFace;\n    if (hostFaceRef != null)\n    {\n        host = doc.GetElement(hostFaceRef.ElementId);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an electrical circuit connecting light fixtures to a panel."}, {"role": "assistant", "content": "FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nList<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\nif (panel != null && fixtureIds.Count > 0)\n{\n    ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n    if(electricalSystem != null)\n    {\n        electricalSystem.SelectPanel(panel);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a Reflected Ceiling Plan view for First Floor."}, {"role": "assistant", "content": "string levelName = \"First Floor\";\nstring viewName = \"First Floor Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Apply the 'X-Ray' visual style to the active 3D view."}, {"role": "assistant", "content": "View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a section view between points (5,5,3) and (15,5,3)."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(5,5,3);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),3);\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista 3D orientada desde el sureste."}, {"role": "assistant", "content": "string viewName = \"Vista 3D Sureste\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista de plano de plafón reflejado para el Basement."}, {"role": "assistant", "content": "string levelName = \"Basement\";\nstring viewName = \"Plano de Plafón Basement\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las vistas que no tienen una plantilla de vista asignada."}, {"role": "assistant", "content": "List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva vista de alzado mirando al norte."}, {"role": "assistant", "content": "ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null && activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 2);\n        if (aev != null)\n        {\n            aev.Name = \"Alzado Norte\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new wall type '{type_name}' with a thickness of 10cm."}, {"role": "assistant", "content": "WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, (10 / 100) / 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un DirectShape con forma de caja de {size_m}x{size_m}x{size_m} metros llamado '{shape_name}'."}, {"role": "assistant", "content": "TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits({size_m}, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"{shape_name}\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an 7.8-meter long foundation beam."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(7.8, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Footing);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add a 45-degree elbow between two pipes."}, {"role": "assistant", "content": "List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.ConnectorManager != null && p.ConnectorManager.UnusedConnectors.Size > 0).Take(2).ToList();\n\nif (pipes.Count >= 2)\n{\n    Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    \n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewElbowFitting(c1, c2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el estilo visual de la vista activa a 'Línea Oculta'."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nivel 'First Floor' a 3.5m."}, {"role": "assistant", "content": "string levelName = \"First Floor\";\ndouble elev = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a pipe with a 50mm diameter."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Millimeters));\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un muro de 15.0 metros de largo y 2.8 metros de alto."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(15.0, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters), 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva hoja con número '{sheet_number}' y nombre '{sheet_name}' usando el primer cajetín disponible."}, {"role": "assistant", "content": "FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"{sheet_name}\";\n        sheet.SheetNumber = \"{sheet_number}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las puertas en el Level 2 usando un filtro combinado."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nList<Element> doors = new List<Element>();\n\nif (level1 != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    doors = new FilteredElementCollector(doc).WherePasses(combinedFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Generate an electrical panel at X=2,Y=3."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && panelSymbol != null)\n{\n    if(!panelSymbol.IsActive) panelSymbol.Activate();\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nivel intermedio llamado '{new_level_name}' a mitad de camino entre el {level1_name} y el {level2_name}."}, {"role": "assistant", "content": "string newLevelName = \"{new_level_name}\";\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"{level1_name}\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"{level2_name}\");\nif (lvl1 != null && lvl2 != null)\n{\ndouble midElevation = (lvl1.ProjectElevation + lvl2.ProjectElevation) / 2.0;\nLevel newLevel = Level.Create(doc, midElevation);\n    if(newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una topografía DirectShape a partir de una lista de puntos."}, {"role": "assistant", "content": "List<XYZ> points = new List<XYZ>\n{\n    new XYZ(0,0,0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0)\n};\nTessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[0], points[1], points[2]}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[1], points[3], points[2]}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_Topography));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"Topografía DirectShape\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rota el elemento dado 90 grados alrededor de su centro."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para rotar\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n            double angle = 90 * Math.PI / 180.0;\n            ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea vigas entre las columnas alineadas horizontalmente."}, {"role": "assistant", "content": "FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    if(!beamSymbol.IsActive) beamSymbol.Activate();\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén los IDs de todas las vistas 3D que empiezan con '{prefix}' para exportación."}, {"role": "assistant", "content": "List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"{prefix}\") && !v.IsTemplate).Select(v => v.Id).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {text_size_mm}mm text type in green color named '{type_name}'."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Generate a {rows}x{cols} column grid with 6-meter spacing."}, {"role": "assistant", "content": "FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n    for(int i=0; i<{rows}; i++)\n    {\n        for(int j=0; j<{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all door families loaded in the project."}, {"role": "assistant", "content": "List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 'Generic - 200mm' wall on 'First Floor' from (0,0) to (10,0)."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"First Floor\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Generic - 200mm\") as WallType;\nXYZ startPoint = new XYZ(0, 0, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(0, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nif (level != null && wallType != null)\n{\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Modela una bandeja de cables entre el punto ({p1x_m}, {p1y_m}, {p1z_m}) y ({p2x_m}, {p2y_m}, {p2z_m})."}, {"role": "assistant", "content": "CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (trayType != null && level != null)\n{\n    XYZ p1 = new XYZ(UnitUtils.ConvertToInternalUnits({p1x_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p1y_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p1z_m}, UnitTypeId.Meters)); \n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({p2x_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p2y_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p2z_m}, UnitTypeId.Meters));\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera un equipo eléctrico en X=2,Y=3."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(level != null && panelSymbol != null)\n{\n    if(!panelSymbol.IsActive) panelSymbol.Activate();\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera una cuadrícula de columnas {rows}x{cols} con separación de 8 metros."}, {"role": "assistant", "content": "FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<{rows}; i++)\n    {\n        for(int j=0; j<{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Apply {thickness_mm}mm thermal insulation to all hot water pipes."}, {"role": "assistant", "content": "PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new level named 'Level 1' at an elevation of 4.0 meters."}, {"role": "assistant", "content": "string levelName = \"Level 1\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all clashes between pipes and beams."}, {"role": "assistant", "content": "ICollection<ElementId> pipeIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WhereElementIsNotElementType().ToElementIds();\nICollection<ElementId> beamIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().ToElementIds();\n\nif(pipeIds.Count > 0 && beamIds.Count > 0)\n{\n    List<ElementFilter> beamFilters = new List<ElementFilter>();\n    foreach(ElementId beamId in beamIds)\n    {\n        Element beam = doc.GetElement(beamId);\n        if(beam != null) beamFilters.Add(new ElementIntersectsElementFilter(beam));\n    }\n    LogicalOrFilter clashFilter = new LogicalOrFilter(beamFilters);\n    ICollection<ElementId> clashingPipeIds = new FilteredElementCollector(doc, pipeIds).WherePasses(clashFilter).ToElementIds();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Ajusta la altura del antepecho de todas las ventanas a 3.0 metro(s)."}, {"role": "assistant", "content": "double sillHeight = 3.0 / 0.3048;\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dibuja un conducto de ventilación rectangular de {width_mm}x{height_mm} milímetros."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast<DuctType>().FirstOrDefault(d => d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null && ductType != null && systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 / 0.3048);\n        XYZ p2 = new XYZ(10 / 0.3048, 0, 3 / 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null && !widthParam.IsReadOnly) widthParam.Set({width_mm} / 304.8);\n            if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set({height_mm} / 304.8);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {sheet_size} sheet and place a legend on it."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"{sheet_size}\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Activa todos los símbolos de familia cargados en el proyecto."}, {"role": "assistant", "content": "List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) \n    {\n        sym.Activate();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Assign all walls to the '{workset_name}' workset."}, {"role": "assistant", "content": "if (doc.IsWorkshared)\n{\n    Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w => w.Name == \"{workset_name}\");\n    if (ws != null)\n    {\n        FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n        foreach (Element e in collector)\n        {\n            Parameter p = e.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n            if (p != null && !p.IsReadOnly)\n            {\n                p.Set(ws.Id.IntegerValue);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rotate project north 30 degrees clockwise."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInRadians = -(30 * Math.PI / 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Select all walls on 'Nivel 1' and change their comment to '{comment}'."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nList<Wall> wallsOnLevel = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level.Id).Cast<Wall>().ToList();\nforeach(Wall wall in wallsOnLevel)\n{\n    wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(\"{comment}\");\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Copy all elements from {source_level} to {target_level}."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{source_level}\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{target_level}\") as Level;\n\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if (elementsToCopy.Count > 0)\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all door families loaded in the project."}, {"role": "assistant", "content": "List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Temporarily isolate the {built_in_category_enum} category in the active view."}, {"role": "assistant", "content": "ElementId categoryId = new ElementId(BuiltInCategory.{built_in_category_enum});\nICollection<ElementId> categoryIds = new List<ElementId> { categoryId };\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateCategoriesTemporary(categoryIds);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una etiqueta de material en una cara de muro."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Face, \"Selecciona una cara para etiquetar\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Selecciona la ubicación de la etiqueta\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva hoja {sheet_size} y colócale una leyenda."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"{sheet_size}\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {sheet_size} sheet and place a legend on it."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"{sheet_size}\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Allow the user to select a wall with the prompt '{selection_prompt}' and get its ElementId."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"{selection_prompt}\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el nombre de todas las familias cargadas que contengan '{old_name}' a '{new_name}'."}, {"role": "assistant", "content": "List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"{old_name}\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"{old_name}\", \"{new_name}\");\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea {num_worksets} worksets de arquitectura."}, {"role": "assistant", "content": "List<string> worksetNames = new List<string> {{ \"TAD_ARQ_MAM\", \"TAD_ARQ_ACA\", \"TAD_ARQ_PLA\", \"TAD_ARQ_PSO\", \"TAD_ARQ_HRE\", \"TAD_ARQ_ALU\", \"TAD_ARQ_CAR\", \"TAD_ARQ_MOB\", \"TAD_ARQ_PLO\", \"TAD_ARQ_EXT\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las familias de anotación y cuenta cuántas hay."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\nint count = annotationFamilies.Count;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Hide all annotation categories in the active view."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Hide Annotation Categories\"))\n{\n    t.Start();\n    Categories categories = doc.Settings.Categories;\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        foreach(Category cat in categories)\n        {\n            if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n            {\n                 activeView.SetCategoryHidden(cat.Id, true);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dado un muro seleccionado, encuentra todas las tuberías que lo atraviesan."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\n\nList<ElementId> intersectingPipes = new List<ElementId>();\nif (wallRef != null)\n{\n    Element wall = doc.GetElement(wallRef);\n    if (wall != null)\n    {\n        ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n        intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds().ToList();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a door 0.9m wide and 2.8m high in the wall."}, {"role": "assistant", "content": "Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = $\"Door {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Select all walls on 'Nivel 1' and change their comment to '{comment}'."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level != null)\n{\n    List<Wall> wallsOnLevel = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level.Id).Cast<Wall>().ToList();\n    foreach(Wall wall in wallsOnLevel)\n    {\n        Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentParam != null && !commentParam.IsReadOnly)\n        {\n            commentParam.Set(\"{comment}\");\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una instancia de la familia '{family_name}' en el centro de la habitación '{room_name}'."}, {"role": "assistant", "content": "Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"{room_name}\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"{family_name}\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {text_size_mm}mm text type named '{type_name}' in green color."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Mueve los elementos seleccionados {distance_m} metros hacia arriba."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Importa un archivo CAD llamado '{file_name}.dwg' en la vista actual."}, {"role": "assistant", "content": "string filePath = \"C:/CAD/{file_name}.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an electrical conduit with a {diameter_inch}-inch diameter."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 / 0.3048);\n        XYZ end = new XYZ(5 / 0.3048, 0, 3 / 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set({diameter_inch}/12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un muro en Azotea que vaya de (5,5,3) a (15,5,3) con una altura de 3.0 metros."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Azotea\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(5, 5, 3);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters), 5, 3);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a SketchPlane on Level 2."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n\nif (level != null)\n{\n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, new XYZ(0, 0, level.Elevation));\n    SketchPlane skp = SketchPlane.Create(doc, plane);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Acota la longitud de un muro seleccionado por el usuario."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un muro para acotar\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea {num_grids} ejes en sentido vertical separados {separation_m} metros."}, {"role": "assistant", "content": "double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i=0; i<{num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Exporta el modelo a formato IFC4 para coordinación."}, {"role": "assistant", "content": "string folderPath = \"C:/RevitExports/\";\nstring fileName = doc.Title + \"-Coordination.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4;\ndoc.Export(folderPath, fileName, options);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an assembly from the selected elements."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"New Assembly\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista 3D axonométrica orientada al Noroeste."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(-1, 1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(1, -1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = \"Vista 3D Noroeste\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls that have no base level assigned."}, {"role": "assistant", "content": "ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new level named 'Planta Baja' at an elevation of 4.0 meters."}, {"role": "assistant", "content": "string levelName = \"Planta Baja\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las vistas de planta del proyecto."}, {"role": "assistant", "content": "List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change the family name of a selected door to '{new_family_name}'."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a door\");\n\nif (pickedRef != null)\n{\n    FamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (door != null && door.Symbol != null)\n    {\n        Family family = door.Symbol.Family;\n        if (family != null)\n        {\n            family.Name = \"{new_family_name}\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Calculate the total length of all Supply Air ducts."}, {"role": "assistant", "content": "List<Duct> ducts = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctCurves).WhereElementIsNotElementType().Cast<Duct>().Where(d => d.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString() == \"SupplyAir\").ToList();\ndouble totalLength = 0.0;\nforeach (Duct d in ducts)\n{\n    totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un pilar del tipo 'Pilar 30x60' en cada intersección de la rejilla."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Pilar 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Reload the Revit link '{link_name}'."}, {"role": "assistant", "content": "RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"{link_name}\");\n\nif (linkType != null)\n{\n    linkType.Reload();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una viga estructural entre (5,5,3) y (15,5,3) en el First Floor."}, {"role": "assistant", "content": "FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"First Floor\") as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(5, 5, 3);\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de texto llamado '{type_name}' de {text_size_mm}mm de color verde."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nTextNoteType newType = null;\nif (defaultType != null)\n{\n    newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 'Level 1' level at 3.5m."}, {"role": "assistant", "content": "string levelName = \"Level 1\";\ndouble elev = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Permite al usuario seleccionar un muro y obtén su ElementId."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de muro '{type_name}' con un grosor de 15cm."}, {"role": "assistant", "content": "WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, (15 / 100) / 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Reload the Revit link '{link_name}'."}, {"role": "assistant", "content": "RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"{link_name}\");\n\nif (linkType != null)\n{\n    linkType.Reload();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca un rociador en las coordenadas ({x_m},{y_m},{z_m})."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits({x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({z_m}, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un muro del tipo 'Generic - 200mm' en el 'Basement' desde (0,0) hasta (10,0)."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Basement\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Generic - 200mm\") as WallType;\nXYZ startPoint = new XYZ(0, 0, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(0, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nif (level != null && wallType != null)\n{\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a vertical shaft opening from the base level to the top level."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\nif (bottomLevel != null && topLevel != null)\n{\n    XYZ p1 = new XYZ(2 / 0.3048, 2 / 0.3048,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 2 / 0.3048,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(2 / 0.3048, 5 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls that are not associated with any level."}, {"role": "assistant", "content": "ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de los nombres de todos los tipos de familia de la categoría {built_in_category_enum}."}, {"role": "assistant", "content": "List<Element> elementTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.{built_in_category_enum}).WhereElementIsElementType().ToList();\nList<string> typeNames = new List<string>();\nforeach(Element type in elementTypes)\n{\n    typeNames.Add(type.Name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Vincula un archivo DWG como referencia en la vista activa."}, {"role": "assistant", "content": "string filePath = \"C:/CAD_Files/Base_Plan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.ColorMode = ImportColorMode.Preserved;\nElementId linkedFileId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(filePath, options, activeView, out linkedFileId);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls with the comment '{comment}'."}, {"role": "assistant", "content": "ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"{comment}\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all doors on Nivel 1 using a combined filter."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nList<Element> doors = new List<Element>();\n\nif (level1 != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    doors = new FilteredElementCollector(doc).WherePasses(combinedFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca todos los elementos seleccionados en el workset '{workset_name}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"{workset_name}\");\n        if(workset == null) workset = Workset.Create(doc, \"{workset_name}\");\n\n        if (selectedIds != null && selectedIds.Count > 0 && workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null && !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén el número total de advertencias en el proyecto."}, {"role": "assistant", "content": "int totalWarnings = doc.GetWarnings().Count;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Fija el elemento seleccionado para que no se mueva."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count > 0)\n{\n    Element elementToPin = doc.GetElement(selectedIds.First());\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {text_size_mm}mm text type in blue color."}, {"role": "assistant", "content": "string newTypeName = \"{text_size_mm}mm Blue\";\nTextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n        \n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly) lineColorParam.Set(255);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rotate project north 90 degrees clockwise."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInRadians = -(90 * Math.PI / 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera una cuadrícula de columnas {rows}x{cols} con separación de 10 metros."}, {"role": "assistant", "content": "FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i=0; i<{rows}; i++)\n    {\n        for(int j=0; j<{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Calcula la longitud total de todos los ductos de Suministro de Aire."}, {"role": "assistant", "content": "List<Duct> ducts = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctCurves).WhereElementIsNotElementType().Cast<Duct>().Where(d => d.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString() == \"SupplyAir\").ToList();\ndouble totalLength = 0.0;\nforeach (Duct d in ducts)\n{\n    totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Elimina todos los tipos de muro no utilizados en el proyecto."}, {"role": "assistant", "content": "ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\ndoc.Delete(unusedWallTypes);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new room on L01 at point (7, 4)."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"L01\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters));\n    Room room = doc.Create.NewRoom(level1, point);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 'Level 1' level at 3.5m."}, {"role": "assistant", "content": "string levelName = \"Level 1\";\ndouble elev = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén todos los muros del Level 1 que son estructurales."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> {{ levelFilter, categoryFilter, structuralFilter }});\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el tipo de una losa seleccionada a '{new_type_name}'."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"{new_type_name}\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Acota la longitud de un muro seleccionado por el usuario."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un muro para acotar\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva hoja {sheet_size} y colócale una leyenda."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"{sheet_size}\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el nombre de la vista activa a '{view_name}'."}, {"role": "assistant", "content": "string newName = \"{view_name}\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un conducto eléctrico de {diameter_inch} pulgada de diámetro."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 / 0.3048);\n        XYZ end = new XYZ(5 / 0.3048, 0, 3 / 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set({diameter_inch}/12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a spherical DirectShape with a {radius_m}-meter radius."}, {"role": "assistant", "content": "double radius = {radius_m} / 0.3048;\nList<GeometryObject> solids = new List<GeometryObject>();\nFrame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\nArc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\nLine line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\nCurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\nSolid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\nsolids.Add(sphere);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(solids);\n    ds.Name = \"Sphere DirectShape\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las colisiones entre tuberías y vigas."}, {"role": "assistant", "content": "ICollection<ElementId> pipeIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WhereElementIsNotElementType().ToElementIds();\nICollection<ElementId> beamIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().ToElementIds();\n\nif(pipeIds.Count > 0 && beamIds.Count > 0)\n{\n    List<ElementFilter> beamFilters = new List<ElementFilter>();\n    foreach(ElementId beamId in beamIds)\n    {\n        Element beam = doc.GetElement(beamId);\n        if(beam != null) beamFilters.Add(new ElementIntersectsElementFilter(beam));\n    }\n    LogicalOrFilter clashFilter = new LogicalOrFilter(beamFilters);\n    ICollection<ElementId> clashingPipeIds = new FilteredElementCollector(doc, pipeIds).WherePasses(clashFilter).ToElementIds();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find out who the owner of a selected element is."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element\");\n\nWorksharingTooltipInfo info = null;\nif (pickedRef != null)\n{\n    info = WorksharingUtils.GetWorksharingTooltipInfo(doc, pickedRef.ElementId);\n}\n"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Open a family, add a type parameter '{param_name}', and save it."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Inserta una armadura (truss) de 7.8 metros entre dos puntos."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(7.8 / 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Permite al usuario seleccionar un muro y obtén su ElementId."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una cota de elevación en el Basement."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    Level lvl = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Basement\");\n    View activeView = doc.ActiveView;\n\n    if (lvl != null && activeView != null)\n    {\n        Reference levelRef = new Reference(lvl);\n        XYZ origin = new XYZ(5/0.3048, 5/0.3048, lvl.Elevation);\n        XYZ leaderEnd = origin + new XYZ(2/0.3048, 2/0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, levelRef, origin, origin, leaderEnd, origin, true);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una apertura de hueco (shaft) que atraviese desde el {bottom_level_name} al {top_level_name}."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{bottom_level_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{top_level_name}\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    XYZ p1 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p2 = new XYZ(8 / 0.3048, 5 / 0.3048,0);\n    XYZ p3 = new XYZ(8 / 0.3048, 8 / 0.3048,0);\n    XYZ p4 = new XYZ(5 / 0.3048, 8 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Abre una familia, añade un parámetro de tipo '{param_name}' y guárdala."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de texto de {text_size_mm}mm de color verde llamado '{type_name}'."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a section view between points (5,5,3) and (15,5,3)."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(5,5,3);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),3);\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las puertas del nivel 'Nivel 2' que sean de la familia '{family_name}'."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\nList<Element> doors = new List<Element>();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista de plano de plafón reflejado para el Nivel 2."}, {"role": "assistant", "content": "string levelName = \"Nivel 2\";\nstring viewName = \"Plano de Plafón Nivel 2\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una ventana de 0.9x3.15 metros en la pared más cercana."}, {"role": "assistant", "content": "FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = $\"Window {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Calcula la longitud total de todos los ductos de Suministro de Aire."}, {"role": "assistant", "content": "List<Duct> ducts = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctCurves).WhereElementIsNotElementType().Cast<Duct>().Where(d => d.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString() == \"SupplyAir\").ToList();\ndouble totalLength = 0.0;\nforeach (Duct d in ducts)\n{\n    totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all annotation families."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a filled region with a '{pattern_name}' pattern."}, {"role": "assistant", "content": "FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"{pattern_name}\"));\nView activeView = doc.ActiveView;\n\nif (regionType != null && activeView != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 0,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(0, 5 / 0.3048,0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add reinforcement to a column."}, {"role": "assistant", "content": "RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un circuito eléctrico conectando luminarias a un panel."}, {"role": "assistant", "content": "FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nList<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\nif (panel != null && fixtureIds.Count > 0)\n{\n    ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n    if(electricalSystem != null)\n    {\n        electricalSystem.SelectPanel(panel);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Check if the active view is a plan view."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nbool isPlanView = false;\n\nif (activeView != null)\n{\n    isPlanView = activeView.ViewType == ViewType.FloorPlan \n                 || activeView.ViewType == ViewType.CeilingPlan \n                 || activeView.ViewType == ViewType.AreaPlan \n                 || activeView.ViewType == ViewType.EngineeringPlan;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade refuerzo a una columna."}, {"role": "assistant", "content": "RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new door type named 'Double-Glass' and set its fire rating to '{fire_rating_value}'."}, {"role": "assistant", "content": "FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"Double-Glass\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating_value}\");\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Move a wall {distance_m} meters to the right."}, {"role": "assistant", "content": "Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (wall != null)\n{\n    XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters),0,0);\n    ElementTransformUtils.MoveElement(doc, wall.Id, translation);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change the type of a floor to one that contains 'Concrete - 225mm'."}, {"role": "assistant", "content": "Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concrete - 225mm\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new material named '{material_name}' with a wood surface pattern."}, {"role": "assistant", "content": "string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    FillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Wood\") || p.Name.Contains(\"Madera\")) as FillPatternElement;\n    \n    if (material != null && fillPattern != null)\n    {\n        material.SurfaceForegroundPatternId = fillPattern.Id;\n        material.Color = new Color(139, 69, 19);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el tipo de todos los muros seleccionados a 'Generic - 200mm'."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Generic - 200mm\");\n\nif (selectedIds.Count > 0 && targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Define un filtro de vista llamado '{filter_name}' para ocultar las líneas de detalle."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection<ElementId> catsToHide = new List<ElementId>{new ElementId(BuiltInCategory.OST_Lines)};\n    ElementFilter filter = new ElementCategoryFilter(new ElementId(BuiltInCategory.OST_Lines));\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"{filter_name}\", catsToHide, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change the detail level of the active view to 'Medium'."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Medium;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the sill height of all windows to 3.15 meter(s)."}, {"role": "assistant", "content": "double sillHeight = 3.15 / 0.3048;\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change the detail level of the active view to 'Medium'."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Medium;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all rooms on the 'Roof' Level."}, {"role": "assistant", "content": "Level targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Roof\") as Level;\nList<Element> roomsOnLevel = new List<Element>();\n\nif (targetLevel != null)\n{\n    roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == targetLevel.Id).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Inserta una ventana de 0.9 metro de ancho y 2.8 metros de alto en un muro, creando un nuevo tipo si es necesario."}, {"role": "assistant", "content": "Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = $\"Window 0.9m x 2.8m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    if(widthParam != null) widthParam.Set(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters));\n\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n    if(heightParam != null) heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Etiqueta todas las habitaciones en la vista activa."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n    foreach(Room room in rooms)\n    {\n        LocationPoint loc = room.Location as LocationPoint;\n        if(loc != null)\n        {\n            doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(loc.Point.X, loc.Point.Y), activeView.Id);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista 3D por defecto."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplica el {level_to_duplicate} con un desfase de {offset_m}m y llámalo '{new_level_name}'."}, {"role": "assistant", "content": "string newLevelName = \"{new_level_name}\";\nLevel levelToDup = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{level_to_duplicate}\") as Level;\n\nif (levelToDup != null)\n{\n    double newElevation = levelToDup.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Import a CAD file named '{file_name}.dwg' into the current view."}, {"role": "assistant", "content": "string filePath = \"C:/CAD/{file_name}.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de muro '{type_name}' con un grosor de 25cm."}, {"role": "assistant", "content": "WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, (25 / 100) / 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade una etiqueta a la columna más cercana al origen."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n    LocationPoint lp = c.Location as LocationPoint;\n    return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n}).FirstOrDefault();\n\nif (activeView != null && column != null)\n{\n    LocationPoint loc = column.Location as LocationPoint;\n    if (loc != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add a horizontal reference plane named '{plane_name}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"{plane_name}\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una tubería con un diámetro de 50mm."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Millimeters));\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade un nivel llamado 'L01' a 4.0 metros."}, {"role": "assistant", "content": "double elevation = UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"L01\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aplica aislamiento térmico de {thickness_mm}mm a todas las tuberías de agua caliente."}, {"role": "assistant", "content": "PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an assembly from the selected elements."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"New Assembly\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplica la vista de planta '{view_name}' y nómbrala '{template_name}'."}, {"role": "assistant", "content": "ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"{view_name}\");\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{template_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Copia todos los elementos del {source_level} al {target_level}."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{source_level}\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{target_level}\") as Level;\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(elementsToCopy.Any())\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a topography surface from a list of 4 points."}, {"role": "assistant", "content": "IList<XYZ> points = new List<XYZ>\n{\n    new XYZ(0, 0, 0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters))\n};\nTopographySurface.Create(doc, points);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Fill the material parameter of all walls with '{material_name}'."}, {"role": "assistant", "content": "Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"{material_name}\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Importa un archivo CAD llamado '{file_name}.dwg' en la vista actual."}, {"role": "assistant", "content": "string filePath = \"C:/CAD/{file_name}.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén la longitud total de todos los muros del proyecto."}, {"role": "assistant", "content": "double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a curtain wall 1.0 meters wide and 2.8 meters high."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters), 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a DirectShape topography from a list of points."}, {"role": "assistant", "content": "List<XYZ> points = new List<XYZ>\n{\n    new XYZ(0,0,0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0)\n};\nTessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[0], points[1], points[2]}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[1], points[3], points[2]}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_Topography));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"Topography DirectShape\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 25cm '{type_name}' type and then create a wall of that type."}, {"role": "assistant", "content": "WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), (25 / 100.0) / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Conecta dos conductos con una unión en T."}, {"role": "assistant", "content": "List<Duct> ducts = new FilteredElementCollector(doc).OfClass(typeof(Duct)).Cast<Duct>().ToList();\nif (ducts.Count >= 2)\n{\n    Connector c1 = ducts[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = ducts[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewTeeFitting(c1, c2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Modela una bandeja de cables entre dos puntos."}, {"role": "assistant", "content": "CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(trayType != null && level != null)\n{\n    XYZ start = new XYZ(0,10,3);\n    XYZ end = new XYZ(15,10,3);\n    CableTray.Create(doc, trayType.Id, start, end, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Establece la visibilidad de la categoría '{category_name}' en falso en la vista activa."}, {"role": "assistant", "content": "Category category = doc.Settings.Categories.get_Item(BuiltInCategory.{category_name});\nif (category != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(category.Id, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera un grupo a partir de la selección actual y muévelo {distance_m} metros a la derecha."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    Group group = doc.Create.NewGroup(selectedIds);\n    if (group != null)\n    {\n        XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters), 0, 0);\n        ElementTransformUtils.MoveElement(doc, group.Id, translation);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca pilares en todos los cruces de la rejilla."}, {"role": "assistant", "content": "FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    if(!colSymbol.IsActive) colSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                 if(results != null) {\n                     foreach (IntersectionResult ir in results)\n                     {\n                         doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                     }\n                 }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Import a CAD file named '{file_name}.dwg' into the current view."}, {"role": "assistant", "content": "string filePath = \"C:/CAD/{file_name}.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca un mueble en las coordenadas (7,4)."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    if(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0), furnitureSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un techo por extrusión con un perfil en arco."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null && roofType != null && doc.ActiveView != null)\n{\n    CurveArray profile = new CurveArray();\n    profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    if(refPlane != null)\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rellena el parámetro de material de todos los muros con '{material_name}'."}, {"role": "assistant", "content": "Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"{material_name}\")) as Material;\nif(material != null)\n{\n    var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el tipo de una losa por uno que contenga 'Wood Joist 10\"'."}, {"role": "assistant", "content": "Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Wood Joist 10\"\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Export the geometry of a selected element to an SAT file."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element to export\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        string folderPath = \"C:/RevitExports/\";\n        string fileName = elem.Name + \".sat\";\n        SATExportOptions options = new SATExportOptions();\n        doc.Export(folderPath, fileName, new List<ElementId>{{elem.Id}}, options);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nota de texto con el texto '{note_text}', una ubicación y un elemento de destino dados."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{note_text}\", opts);\n    if (note != null)\n    {\n        Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n        leader.End = targetRef.GlobalPoint;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Selecciona todos los muros del 'Nivel 1' y cambia su comentario a '{comment}'."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nList<Wall> wallsOnLevel = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level.Id).Cast<Wall>().ToList();\nforeach(Wall wall in wallsOnLevel)\n{\n    wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(\"{comment}\");\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an 15.0-meter long foundation beam."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(15.0, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Footing);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva hoja {title_block_size} y colócale una leyenda."}, {"role": "assistant", "content": "FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"{title_block_size}\"));\nView legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\nif (titleBlock != null && legendView != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (newSheet != null)\n    {\n        BoundingBoxUV sheetBox = newSheet.Outline;\n        UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n        XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n        Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa."}, {"role": "assistant", "content": "Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nView activeView = doc.ActiveView;\n\nif (furnitureCat != null && activeView != null)\n{\n    activeView.SetCategoryHidden(furnitureCat.Id, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a floor with a circular hole of {radius_m}m radius in the center."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    XYZ p1 = new XYZ(-10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p2 = new XYZ(10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p3 = new XYZ(10 / 0.3048, 10 / 0.3048, 0);\n    XYZ p4 = new XYZ(-10 / 0.3048, 10 / 0.3048, 0);\n    CurveLoop outerLoop = new CurveLoop();\n    outerLoop.Append(Line.CreateBound(p1, p2));\n    outerLoop.Append(Line.CreateBound(p2, p3));\n    outerLoop.Append(Line.CreateBound(p3, p4));\n    outerLoop.Append(Line.CreateBound(p4, p1));\n\n    XYZ center = XYZ.Zero;\n    double radius = {radius_m} / 0.3048;\n    CurveLoop innerLoop = new CurveLoop();\n    innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n    innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n    Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the 'Mark' parameter of all selected elements to '{mark_value}'."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"{mark_value}\");\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new sheet with number '{sheet_number}' and name '{sheet_name}'."}, {"role": "assistant", "content": "FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"{sheet_name}\";\n        sheet.SheetNumber = \"{sheet_number}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a structural foundation slab 20cm thick named '{type_name}'."}, {"role": "assistant", "content": "Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nFloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\nif(slabTypeToDuplicate != null && foundationLevel != null)\n{\n    string newTypeName = \"{type_name}\";\n    FloorType newSlabType = slabTypeToDuplicate.Duplicate(newTypeName) as FloorType;\n    if(newSlabType != null)\n    {\n        CompoundStructure cs = newSlabType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), (20 * 10) / 304.8);\n            newSlabType.SetCompoundStructure(cs);\n            XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n            CurveLoop profile = new CurveLoop();\n            profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n            doc.Create.NewFloor(new List<CurveLoop>{profile}, newSlabType, foundationLevel, true);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade el prefijo '{prefix}' a todas las vistas de plano."}, {"role": "assistant", "content": "string prefix = \"{prefix}\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Paint the interior face of exterior walls with '{material_name}'."}, {"role": "assistant", "content": "Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"{material_name}\");\nvar exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior).ToList();\n\nif (paintMaterial != null)\n{\n    foreach (Wall w in exteriorWalls)\n    {\n        IList<Reference> interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n        if(interiorFaceRefs.Count > 0)\n        {\n            Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n            if (interiorFace != null)\n            {\n                doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add mullions to all grid lines of a curtain wall."}, {"role": "assistant", "content": "Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\n\nif (curtainWall != null && mullionType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    if (grid != null)\n    {\n        foreach (ElementId gridLineId in grid.GetVGridLineIds())\n        {\n            CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n            if(line != null) line.AddMullions(mullionType, false);\n        }\n        foreach (ElementId gridLineId in grid.GetUGridLineIds())\n        {\n            CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n            if(line != null) line.AddMullions(mullionType, false);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aísla temporalmente todo el mobiliario en la vista activa."}, {"role": "assistant", "content": "ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an in-place family for a custom '{item_name}' using an extrusion."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Generate a report with the area of all rooms in the project."}, {"role": "assistant", "content": "List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rename all loaded families containing '{old_name}' to '{new_name}'."}, {"role": "assistant", "content": "List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"{old_name}\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"{old_name}\", \"{new_name}\");\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Pon un pilar estructural en las coordenadas 2,3."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un techo por contorno en el 'Level 1'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n    if(roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 / 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,0,0), new XYZ(20 / 0.3048,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,30 / 0.3048,0), new XYZ(0,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 / 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add a tag to the column closest to the origin."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n    LocationPoint lp = c.Location as LocationPoint;\n    return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n}).FirstOrDefault();\n\nif (activeView != null && column != null)\n{\n    LocationPoint loc = column.Location as LocationPoint;\n    if (loc != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a structural beam between (0,0,0) and (10,0,0) on Nivel 1."}, {"role": "assistant", "content": "FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, 0);\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(0, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el nombre de todas las vistas de planta para que empiecen con '{prefix}'."}, {"role": "assistant", "content": "string prefix = \"{prefix}\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Export the current model to an NWC file."}, {"role": "assistant", "content": "string folderPath = \"C:/exports/\";\nstring fileName = doc.Title + \".nwc\";\nNavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(folderPath, fileName, options);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Inserta una nota de texto con '{text_note}' en la vista actual."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    XYZ position = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\n    TextNote.Create(doc, activeView.Id, position, \"{text_note}\", defaultTypeId);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Exporta la geometría de un elemento seleccionado a un archivo SAT."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para exportar\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        string folderPath = \"C:/RevitExports/\";\n        string fileName = elem.Name + \".sat\";\n        SATExportOptions options = new SATExportOptions();\n        doc.Export(folderPath, fileName, new List<ElementId>{{elem.Id}}, options);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new linear dimension type named '{type_name}' with blue text and {text_size_mm}mm size."}, {"role": "assistant", "content": "DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\nif (linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"{type_name}\") as DimensionType;\n    if (newDimType != null)\n    {\n        Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n        Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca la vista '{view_name}' en el centro de la hoja activa."}, {"role": "assistant", "content": "ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"{view_name}\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null && activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) / 2, (sheetBox.Min.V + sheetBox.Max.V) / 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todos los muros con el comentario '{comment}'."}, {"role": "assistant", "content": "ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"{comment}\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a wall on Level 2 from (0,0,0) to (10,0,0) with a height of 3.0 meters."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un techo por extrusión con una pendiente del {slope_percentage}%."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null && roofType != null)\n{\n    double run = 10.0;\n    double rise = run * ({slope_percentage} / 100.0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(run / 0.3048, 0, rise / 0.3048)));\n    \n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    \n    if (refPlane != null)\n    {\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, run / 0.3048);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nota de texto con el texto '{note_text}', una ubicación y un elemento de destino dados."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{note_text}\", opts);\n    if (note != null)\n    {\n        note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L).End = targetRef.GlobalPoint;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una apertura de hueco (shaft) que atraviese desde el {bottom_level_name} al {top_level_name}."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{bottom_level_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{top_level_name}\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    XYZ p1 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p2 = new XYZ(8 / 0.3048, 5 / 0.3048,0);\n    XYZ p3 = new XYZ(8 / 0.3048, 8 / 0.3048,0);\n    XYZ p4 = new XYZ(5 / 0.3048, 8 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una región rellena con un patrón de '{pattern_name}'."}, {"role": "assistant", "content": "FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"{pattern_name}\"));\nView activeView = doc.ActiveView;\n\nif (regionType != null && activeView != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 0,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(0, 5 / 0.3048,0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls taller than 2.8 meters."}, {"role": "assistant", "content": "double heightThreshold = UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nList<ElementId> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all doors on level 'Level 1' that belong to the '{family_name}' family."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nList<Element> doors = new List<Element>();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new Level named 'First Floor' at an elevation of 3.5 meters."}, {"role": "assistant", "content": "double elevation = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"First Floor\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all subcategories from the Walls category."}, {"role": "assistant", "content": "Category wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategoryNameMap subcategories = wallCat.SubCategories;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Alinea la cara de un muro con la cara de otro."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Face, \"Selecciona la cara de destino (estática)\");\nReference ref2 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Face, \"Selecciona la cara a mover\");\nView activeView = doc.ActiveView;\n\nif (ref1 != null && ref2 != null && activeView != null)\n{\n    doc.Create.NewAlignment(activeView, ref1, ref2);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Mueve un elemento seleccionado a la posición (7,4)."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para mover\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            XYZ newPosition = new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), lp.Point.Z);\n            lp.Point = newPosition;\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva vista de alzado mirando al sur con el nombre \"{view_name}\"."}, {"role": "assistant", "content": "ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null && activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 0);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Delete all unused wall types in the project."}, {"role": "assistant", "content": "ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the total length of all walls in the project."}, {"role": "assistant", "content": "double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplica la vista de planta '{view_name}' y nómbrala '{template_name}'."}, {"role": "assistant", "content": "ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"{view_name}\");\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{template_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo parámetro de proyecto compartido de texto llamado '{param_name}' para muros y puertas."}, {"role": "assistant", "content": "string originalFile = doc.Application.SharedParametersFilename;\nstring tempFile = System.IO.Path.GetTempFileName() + \".txt\";\nusing (System.IO.File.Create(tempFile)) { }\ndoc.Application.SharedParametersFilename = tempFile;\n\ntry\n{\n    DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n    if (defFile != null)\n    {\n        DefinitionGroup group = defFile.Groups.Create(\"General\");\n        if (group != null)\n        {\n            ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(\"{param_name}\", ParameterType.Text);\n            Definition definition = group.Definitions.Create(options);\n            if (definition != null)\n            {\n                CategorySet categories = doc.Application.Create.NewCategorySet();\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                doc.ParameterBindings.Insert(definition, binding, Autodesk.Revit.DB.BuiltInParameterGroup.PG_DATA);\n            }\n        }\n    }\n}\nfinally\n{\n    doc.Application.SharedParametersFilename = originalFile;\n    System.IO.File.Delete(tempFile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a shaft opening that passes through from {bottom_level_name} to {top_level_name}."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{bottom_level_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{top_level_name}\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    XYZ p1 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p2 = new XYZ(8 / 0.3048, 5 / 0.3048,0);\n    XYZ p3 = new XYZ(8 / 0.3048, 8 / 0.3048,0);\n    XYZ p4 = new XYZ(5 / 0.3048, 8 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls with the comment '{comment}'."}, {"role": "assistant", "content": "ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"{comment}\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Permite al usuario seleccionar un muro con el mensaje '{selection_prompt}' y obtén su ElementId."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"{selection_prompt}\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Temporarily isolate all furniture in the active view."}, {"role": "assistant", "content": "ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Elimina todos los tipos de muro no utilizados en el proyecto."}, {"role": "assistant", "content": "ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén el tipo de sistema de una tubería seleccionada."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona una tubería\");\n\nPipingSystemType systemType = null;\nif (pickedRef != null)\n{\n    Pipe pipe = doc.GetElement(pickedRef.ElementId) as Pipe;\n    if (pipe != null)\n    {\n        Parameter systemTypeParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        if (systemTypeParam != null && systemTypeParam.HasValue)\n        {\n            systemType = doc.GetElement(systemTypeParam.AsElementId()) as PipingSystemType;\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Localiza todos los muros con un parámetro 'Marca' vacío y asigna '{mark_value}'."}, {"role": "assistant", "content": "List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"{mark_value}\");\n  }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Activa todos los símbolos de familia cargados en el proyecto."}, {"role": "assistant", "content": "List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) \n    {\n        sym.Activate();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el tipo de todos los muros seleccionados a 'Exterior - Brick on Mtl. Stud'."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Exterior - Brick on Mtl. Stud\");\n\nif (selectedIds.Count > 0 && targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade los campos 'Nivel', 'Marca' y 'Volumen' a la tabla de pilares."}, {"role": "assistant", "content": "ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\") || s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Check if the active view is a plan view."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nbool isPlanView = false;\n\nif (activeView != null)\n{\n    isPlanView = activeView.ViewType == ViewType.FloorPlan \n                 || activeView.ViewType == ViewType.CeilingPlan \n                 || activeView.ViewType == ViewType.AreaPlan \n                 || activeView.ViewType == ViewType.EngineeringPlan;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a section view using a 1.0x{depth_m}x2.8 meter box."}, {"role": "assistant", "content": "ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\n\nif (sectionVFT != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(0,0,0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({depth_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new workset named '{workset_name}'."}, {"role": "assistant", "content": "Workset.Create(doc, \"{workset_name}\");"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a floor with a circular hole of radius {radius_m}m in the center."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    XYZ p1 = new XYZ(-10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p2 = new XYZ(10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p3 = new XYZ(10 / 0.3048, 10 / 0.3048, 0);\n    XYZ p4 = new XYZ(-10 / 0.3048, 10 / 0.3048, 0);\n    CurveLoop outerLoop = new CurveLoop();\n    outerLoop.Append(Line.CreateBound(p1, p2));\n    outerLoop.Append(Line.CreateBound(p2, p3));\n    outerLoop.Append(Line.CreateBound(p3, p4));\n    outerLoop.Append(Line.CreateBound(p4, p1));\n\n    XYZ center = XYZ.Zero;\n    double radius = {radius_m} / 0.3048;\n    CurveLoop innerLoop = new CurveLoop();\n    innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n    innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n    Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new level 'Roof' at an elevation of 4.0 meters."}, {"role": "assistant", "content": "double elevation = UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Roof\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las advertencias del proyecto."}, {"role": "assistant", "content": "IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place all selected elements on the '{workset_name}' workset."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"{workset_name}\");\n        if(workset == null) workset = Workset.Create(doc, \"{workset_name}\");\n\n        if (selectedIds != null && selectedIds.Count > 0 && workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null && !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de texto de {text_size_mm}mm de color azul."}, {"role": "assistant", "content": "string newTypeName = \"{text_size_mm}mm Azul\";\nTextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n        \n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly) lineColorParam.Set(255);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Asigna todos los muros al workset '{workset_name}'."}, {"role": "assistant", "content": "if (doc.IsWorkshared)\n{\n    Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w => w.Name == \"{workset_name}\");\n    if (ws != null)\n    {\n        FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType();\n        foreach (Element e in collector)\n        {\n            Parameter p = e.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n            if (p != null && !p.IsReadOnly)\n            {\n                p.Set(ws.Id.IntegerValue);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una escalera entre {level1_name} y {level2_name}."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{level1_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{level2_name}\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    // TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    // Stairs creation requires using the StairsEditScope class.\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nota de texto con el texto '{note_text}', una ubicación y un elemento de destino dados."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{note_text}\", opts);\n    if (note != null)\n    {\n        note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L).End = targetRef.GlobalPoint;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a group from the current selection and move it {distance_m} meters to the right."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    Group group = doc.Create.NewGroup(selectedIds);\n    if (group != null)\n    {\n        XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters), 0, 0);\n        ElementTransformUtils.MoveElement(doc, group.Id, translation);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a global length parameter named '{param_name}' with a value of {value_m}m."}, {"role": "assistant", "content": "GlobalParameter gp = GlobalParameter.Create(doc, \"{param_name}\", SpecTypeId.Length);\n\nif (gp != null)\n{\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits({value_m}, UnitTypeId.Meters)));\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Pinta la cara interior de los muros exteriores con '{material_name}'."}, {"role": "assistant", "content": "using(Transaction t = new Transaction(doc, \"Paint Walls\"))\n{\n    t.Start();\n    Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"{material_name}\");\n    var exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior).ToList();\n    if(paintMaterial != null)\n    {\n        foreach (Wall w in exteriorWalls)\n        {\n            IList<Reference> interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n            if(interiorFaceRefs.Count > 0)\n            {\n                Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n                if (interiorFace != null)\n                {\n                    doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all project warnings."}, {"role": "assistant", "content": "IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 3D view oriented from the southeast."}, {"role": "assistant", "content": "string viewName = \"3D View Southeast\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Activa todos los FamilySymbol del proyecto."}, {"role": "assistant", "content": "List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (FamilySymbol sym in symbols)\n{\n    if (!sym.IsActive)\n    {\n        sym.Activate();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca la vista '{view_name}' en el centro de la hoja activa."}, {"role": "assistant", "content": "ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"{view_name}\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null && activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) / 2, (sheetBox.Min.V + sheetBox.Max.V) / 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una losa de cimentación de 0.9x3.0 metros."}, {"role": "assistant", "content": "Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n\nif (foundationLevel != null && slabType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(0.9/0.3048, 0, 0);\n    XYZ p3 = new XYZ(0.9/0.3048, 3.0/0.3048, 0);\n    XYZ p4 = new XYZ(0, 3.0/0.3048, 0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Ajusta la altura del antepecho de todas las ventanas a 3.0 metro(s)."}, {"role": "assistant", "content": "double sillHeight = 3.0 / 0.3048;\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a Reflected Ceiling Plan view for First Floor."}, {"role": "assistant", "content": "string levelName = \"First Floor\";\nstring viewName = \"First Floor Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 0.9x3.0 meter foundation slab."}, {"role": "assistant", "content": "Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n\nif (foundationLevel != null && slabType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(0.9/0.3048, 0, 0);\n    XYZ p3 = new XYZ(0.9/0.3048, 3.0/0.3048, 0);\n    XYZ p4 = new XYZ(0, 3.0/0.3048, 0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Hide the selected elements in the active view."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToHide = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToHide.Count > 0)\n{\n    activeView.HideElements(idsToHide);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add a point to the selected Path of Travel."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select a Path of Travel\");\n\nif (pickedRef != null)\n{\n    PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n    if (pot != null)\n    {\n        IList<XYZ> points = pot.GetPath();\n        if (points != null && points.Count >= 2)\n        {\n            XYZ midPoint = (points[0] + points[1]) / 2;\n            points.Insert(1, midPoint);\n            pot.Update(points);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Muestra un cuadro de diálogo con opciones 'Sí' y 'No'."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place lighting posts every 6m along a 100m path."}, {"role": "assistant", "content": "FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade refuerzo a una columna."}, {"role": "assistant", "content": "RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un pilar del tipo 'Pilar 30x60' en cada intersección de la rejilla."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Pilar 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Modifica el tipo de muro de un muro existente a uno que contenga '{type_name_substring}'."}, {"role": "assistant", "content": "Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(x => x.Name.Contains(\"{type_name_substring}\"));\n\nif (wallToChange != null && newType != null)\n{\n    wallToChange.ChangeTypeId(newType.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place all selected elements on the '{workset_name}' workset."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"{workset_name}\");\n        if(workset == null) workset = Workset.Create(doc, \"{workset_name}\");\n\n        if (selectedIds != null && selectedIds.Count > 0 && workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null && !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a Reflected Ceiling Plan view for Roof."}, {"role": "assistant", "content": "string levelName = \"Roof\";\nstring viewName = \"Roof Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Load the '{family_name}.rfa' family and place it at (7,4,3) on Nivel 1."}, {"role": "assistant", "content": "string familyPath = \"C:/Common/Paths/{family_name}.rfa\";\nFamily tableFamily = null;\nbool familyLoaded = doc.LoadFamily(familyPath, out tableFamily);\n\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (familyLoaded && tableFamily != null && level1 != null)\n{\n    FamilySymbol tableSymbol = doc.GetElement(tableFamily.GetFamilySymbolIds().FirstOrDefault()) as FamilySymbol;\n    if (tableSymbol != null)\n    {\n        if (!tableSymbol.IsActive) tableSymbol.Activate();\n        XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 3);\n        doc.Create.NewFamilyInstance(point, tableSymbol, level1, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén el elemento anfitrión de la primera ventana que encuentres."}, {"role": "assistant", "content": "FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo nivel 'Nivel 2' a una elevación de -3.0 metros."}, {"role": "assistant", "content": "double elevation = UnitUtils.ConvertToInternalUnits(-3.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 2\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia un panel de vidrio de un muro cortina por un panel sólido."}, {"role": "assistant", "content": "Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\nFamilySymbol solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_CurtainWallPanels && (fs.Name.Contains(\"Solid\") || fs.Name.Contains(\"Sólido\")));\n\nif (curtainWall != null && solidPanelType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    if (grid != null)\n    {\n        ElementId panelIdToChange = grid.GetPanelIds().FirstOrDefault();\n        if (panelIdToChange != ElementId.InvalidElementId)\n        {\n            Panel panelToChange = doc.GetElement(panelIdToChange) as Panel;\n            if (panelToChange != null) panelToChange.ChangeTypeId(solidPanelType.Id);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Establece el parámetro 'Marca' de todos los elementos seleccionados a '{mark_value}'."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"{mark_value}\");\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Ajusta todas las ventanas para que la altura del antepecho sea {sill_height_m} metro."}, {"role": "assistant", "content": "double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_m}, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rename all schedules containing '{text_to_find}' to '{new_text}'."}, {"role": "assistant", "content": "List<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"{text_to_find}\")).ToList();\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"{text_to_find}\", \"{new_text}\");\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all material names."}, {"role": "assistant", "content": "List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa."}, {"role": "assistant", "content": "Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplica la vista de planta '{view_name}' y nómbrala '{template_name}'."}, {"role": "assistant", "content": "ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"{view_name}\");\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{template_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all doors on level 'Level 2' that belong to the '{family_name}' family."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nList<Element> doors = new List<Element>();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplica el tipo de muro '{original_name}' y nómbralo '{new_name}'."}, {"role": "assistant", "content": "string originalName = \"{original_name}\";\nstring newName = \"{new_name}\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create {num_worksets} worksets for engineering disciplines."}, {"role": "assistant", "content": "List<string> worksetNames = new List<string> {{ \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el nombre de la familia de una puerta seleccionada a '{new_family_name}'."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una puerta\");\n\nif (pickedRef != null)\n{\n    FamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (door != null && door.Symbol != null)\n    {\n        Family family = door.Symbol.Family;\n        if (family != null)\n        {\n            family.Name = \"{new_family_name}\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all material names."}, {"role": "assistant", "content": "List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Fija el elemento seleccionado para que no se mueva."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count > 0)\n{\n    Element elementToPin = doc.GetElement(selectedIds.First());\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera un reporte con el área de todas las habitaciones del proyecto."}, {"role": "assistant", "content": "List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add the 'Level', 'Mark', and 'Volume' fields to the column schedule."}, {"role": "assistant", "content": "ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Tag all rooms with their area."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n    foreach(Room room in rooms)\n    {\n        LocationPoint loc = room.Location as LocationPoint;\n        if(loc != null)\n        {\n            doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(loc.Point.X, loc.Point.Y), activeView.Id);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Permite al usuario seleccionar un muro con el mensaje '{selection_prompt}' y obtén su ElementId."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"{selection_prompt}\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una losa de cimentación estructural de 25cm de espesor llamada '{type_name}'."}, {"role": "assistant", "content": "Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nFloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\nif(slabTypeToDuplicate != null && foundationLevel != null)\n{\n    string newTypeName = \"{type_name}\";\n    FloorType newSlabType = slabTypeToDuplicate.Duplicate(newTypeName) as FloorType;\n    if(newSlabType != null)\n    {\n        CompoundStructure cs = newSlabType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), (25 * 10) / 304.8);\n            newSlabType.SetCompoundStructure(cs);\n            XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n            CurveLoop profile = new CurveLoop();\n            profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n            doc.Create.NewFloor(new List<CurveLoop>{profile}, newSlabType, foundationLevel, true);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Unjoin the geometry of two given elements."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select the first element\");\nReference ref2 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select the second element\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all project warnings."}, {"role": "assistant", "content": "IList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea {num_grids} ejes en sentido vertical separados {separation_m} metros."}, {"role": "assistant", "content": "double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i=0; i<{num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Pon un pilar estructural en las coordenadas 2,3."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place a spot elevation on a given face and view point."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select the top face of the floor\");\n\nView activeView = doc.ActiveView;\n\nif (faceRef != null && activeView != null)\n{\n    XYZ pointOnFace = faceRef.GlobalPoint;\n    XYZ leaderEnd = pointOnFace + new XYZ(1 / 0.3048, 1 / 0.3048, 0);\n    doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls taller than 2.8 meters."}, {"role": "assistant", "content": "double heightThreshold = UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new window schedule that includes Type Mark, Width, and Height."}, {"role": "assistant", "content": "string scheduleName = \"Window Schedule\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {text_size_mm}mm text type in green color named '{type_name}'."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new pipe type named 'Standard' with '{material_name}' material."}, {"role": "assistant", "content": "PipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"{material_name}\") as Material;\n\nif (pipeTypeToDuplicate != null && material != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(\"Standard\") as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una cota de elevación en el L01."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Place Spot Elevation\"))\n{\n    t.Start();\n    Level lvl = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"L01\");\n    View activeView = doc.ActiveView;\n\n    if (lvl != null && activeView != null)\n    {\n        Reference levelRef = new Reference(lvl);\n        XYZ origin = new XYZ(5/0.3048, 5/0.3048, lvl.Elevation);\n        XYZ leaderEnd = origin + new XYZ(2/0.3048, 2/0.3048, 0);\n        doc.Create.NewSpotElevation(activeView, levelRef, origin, origin, leaderEnd, origin, true);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las puertas del nivel 'Nivel 2' que sean de la familia '{family_name}'."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\nList<Element> doors = new List<Element>();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an axonometric 3D view oriented to the Northwest."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(-1, 1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(1, -1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = \"3D View Northwest\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dentro del editor de familias, crea un plano de referencia vertical llamado '{plane_name}'."}, {"role": "assistant", "content": "string rpName = \"{plane_name}\";\nXYZ start = new XYZ(0, UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0);\nXYZ end = new XYZ(0, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nXYZ normal = XYZ.BasisX;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null && doc.IsFamilyDocument)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = rpName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Copia todos los muros del {source_level} al {target_level}."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Copy Walls\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{source_level}\");\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{target_level}\");\n\n    if (level1 != null && level2 != null)\n    {\n        ICollection<ElementId> wallsToCopy = new FilteredElementCollector(doc, level1.Id).OfClass(typeof(Wall)).Select(e => e.Id).ToList();\n        double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n        XYZ translation = new XYZ(0, 0, elevationDiff);\n        if (wallsToCopy.Count > 0)\n        {\n            ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all rooms on Azotea."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Azotea\") as Level;\nList<Element> roomsOnLevel = new List<Element>();\n\nif (level != null)\n{\n    roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level.Id).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Unjoin the geometry of two given elements."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select the first element\");\nReference ref2 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select the second element\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Establece el parámetro 'Marca' de todos los muros seleccionados a '{mark_value}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) \n                {\n                    markParam.Set(\"{mark_value}\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an extrusion roof with a {slope_percentage}% slope."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null && roofType != null)\n{\n    double run = 10.0;\n    double rise = run * ({slope_percentage} / 100.0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(run / 0.3048, 0, rise / 0.3048)));\n    \n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    \n    if (refPlane != null)\n    {\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, run / 0.3048);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the coordinates of the project base point and the survey point."}, {"role": "assistant", "content": "BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all section views in the project."}, {"role": "assistant", "content": "List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Acota la longitud de un muro seleccionado por el usuario."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Dimension Wall\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference wallRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un muro para acotar\");\n    if(wallRef != null)\n    {\n        Wall wall = doc.GetElement(wallRef) as Wall;\n        if(wall != null)\n        {\n            LocationCurve locCurve = wall.Location as LocationCurve;\n            Curve wallCurve = locCurve != null ? locCurve.Curve : null;\n            if(wallCurve != null && wallCurve is Line)\n            {\n                Line wallLine = wallCurve as Line;\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(doc.ActiveView, dimLine, refs);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un grupo de detalles con los elementos de detalle seleccionados."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Detalle Típico 1\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Move a selected element to position (7,4)."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element to move\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            XYZ newPosition = new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), lp.Point.Z);\n            lp.Point = newPosition;\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new door type named 'Double-Glass' and set its fire rating to '{fire_rating}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Double-Glass\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"{fire_rating}\");\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca un rociador en las coordenadas ({x_m},{y_m},{z_m})."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && sprinklerSymbol != null)\n{\n    if (!sprinklerSymbol.IsActive) sprinklerSymbol.Activate();\n    XYZ placementPoint = new XYZ(UnitUtils.ConvertToInternalUnits({x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({z_m}, UnitTypeId.Meters));\n    doc.Create.NewFamilyInstance(placementPoint, sprinklerSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca pilares en todos los cruces de la rejilla."}, {"role": "assistant", "content": "FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    if(!colSymbol.IsActive) colSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                 if(results != null) {\n                     foreach (IntersectionResult ir in results)\n                     {\n                         doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                     }\n                 }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {title_block_size} sheet and place a legend on it."}, {"role": "assistant", "content": "FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"{title_block_size}\"));\nView legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\nif (titleBlock != null && legendView != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (newSheet != null)\n    {\n        BoundingBoxUV sheetBox = newSheet.Outline;\n        UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n        XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n        Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todos los muros que miden más de 3.15 metros de alto."}, {"role": "assistant", "content": "double heightThreshold = UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nList<ElementId> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén todas las familias de puertas cargadas en el proyecto."}, {"role": "assistant", "content": "List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dibuja un conducto de ventilación rectangular de {width_mm}x{height_mm} milímetros."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast<DuctType>().FirstOrDefault(d => d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null && ductType != null && systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 / 0.3048);\n        XYZ p2 = new XYZ(10 / 0.3048, 0, 3 / 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null && !widthParam.IsReadOnly) widthParam.Set({width_mm} / 304.8);\n            if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set({height_mm} / 304.8);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Given a wall, get its materials and their volumes."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select a wall\");\n\nDictionary<string, double> materialVolumes = new Dictionary<string, double>();\nif (pickedRef != null)\n{\n    Wall wall = doc.GetElement(pickedRef) as Wall;\n    if (wall != null)\n    {\n        Parameter areaParam = wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED);\n        if (areaParam != null && areaParam.HasValue)\n        {\n            double wallArea = areaParam.AsDouble();\n            WallType wallType = wall.WallType;\n            if (wallType != null)\n            {\n                CompoundStructure cs = wallType.GetCompoundStructure();\n                if (cs != null)\n                {\n                    foreach(CompoundStructureLayer layer in cs.GetLayers())\n                    {\n                        Material material = doc.GetElement(layer.MaterialId) as Material;\n                        if(material != null)\n                        {\n                            double volume = layer.Width * wallArea;\n                            materialVolumes[material.Name] = volume;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a stair between {level1_name} and {level2_name}."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{level1_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{level2_name}\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    // TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    // Stairs creation requires using the StairsEditScope class.\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Open a family, add a type parameter '{param_name}', and save it."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Localiza todos los muros con un parámetro 'Marca' vacío y asigna '{mark_value}'."}, {"role": "assistant", "content": "List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"{mark_value}\");\n  }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new door type named 'Puerta 90x210' and set the 'Fire Rating' parameter to '{fire_rating_value}'."}, {"role": "assistant", "content": "FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"Puerta 90x210\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"{fire_rating_value}\");\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Modela un plafón a 3.0 metros de altura en el Level 1."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nCeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nif (ceilingType != null && level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0)));\n    profile.Append(Line.CreateBound(new XYZ(10,0,0), new XYZ(10,10,0)));\n    profile.Append(Line.CreateBound(new XYZ(10,10,0), new XYZ(0,10,0)));\n    profile.Append(Line.CreateBound(new XYZ(0,10,0), new XYZ(0,0,0)));\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters));\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Establece el parámetro 'Comentarios' de todas las puertas del Roof a 'APROBADO'."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Roof\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"APROBADO\");\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Conecta dos conductos con una unión en T."}, {"role": "assistant", "content": "List<Duct> ducts = new FilteredElementCollector(doc).OfClass(typeof(Duct)).Cast<Duct>().ToList();\nif (ducts.Count >= 2)\n{\n    Connector c1 = ducts[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = ducts[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewTeeFitting(c1, c2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un DirectShape esférico con un radio de {radius_m} metros."}, {"role": "assistant", "content": "double radius = {radius_m} / 0.3048;\nList<GeometryObject> solids = new List<GeometryObject>();\nFrame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\nArc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\nLine line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\nCurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\nSolid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\nsolids.Add(sphere);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(solids);\n    ds.Name = \"Esfera DirectShape\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Generate a report with the area of all rooms in the project."}, {"role": "assistant", "content": "List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nList<double> roomAreas = new List<double>();\nforeach (Room room in rooms)\n{\n    if (room != null && room.Area > 0)\n    {\n        roomAreas.Add(UnitUtils.ConvertFromInternalUnits(room.Area, UnitTypeId.SquareMeters));\n    }\n}\n// The orchestrator can now use the 'roomAreas' list to generate the final report."}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de muro de {width_cm}cm llamado 'Exterior - Brick on Mtl. Stud'."}, {"role": "assistant", "content": "string newTypeName = \"Exterior - Brick on Mtl. Stud\";\nWallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (wallTypeToDuplicate != null)\n{\n    WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n        cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n        cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits({width_cm} / 100.0, UnitTypeId.Meters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all walls on Level 2 that are structural."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif (level != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> {{ levelFilter, categoryFilter, structuralFilter }});\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Insert a 7.8-meter truss between two points."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(7.8 / 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista de sección entre los puntos (5,5,3) y (15,5,3)."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(5,5,3);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),3);\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Connect two cable trays with an elbow fitting."}, {"role": "assistant", "content": "List<CableTray> trays = new FilteredElementCollector(doc).OfClass(typeof(CableTray)).Cast<CableTray>().ToList();\n\nif (trays.Count >= 2)\n{\n    Connector c1 = trays[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = trays[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    \n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewUnionFitting(c1, c2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el nivel de detalle de la vista activa a 'Medio'."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.Medium;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new door type named 'Double-Glass' and set the 'Fire Rating' parameter to '{fire_rating_value}'."}, {"role": "assistant", "content": "FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"Double-Glass\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"{fire_rating_value}\");\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplica el {level_to_duplicate} con un desfase de {offset_m}m y llámalo '{new_level_name}'."}, {"role": "assistant", "content": "string newLevelName = \"{new_level_name}\";\nLevel levelToDup = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{level_to_duplicate}\") as Level;\n\nif (levelToDup != null)\n{\n    double newElevation = levelToDup.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva tabla de planificación para Pilares Estructurales."}, {"role": "assistant", "content": "string scheduleName = \"Tabla de Pilares Estructurales\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Exporta todas las hojas de un conjunto a un único PDF."}, {"role": "assistant", "content": "ViewSheetSet sheetSet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheetSet)).FirstOrDefault() as ViewSheetSet;\n\nif (sheetSet != null)\n{\n    string folderPath = \"C:/RevitExports/\";\n    PDFExportOptions options = new PDFExportOptions();\n    options.Combine = true;\n    options.FileName = sheetSet.Name;\n    List<ElementId> sheetIds = sheetSet.Views.Cast<ViewSheet>().Select(s => s.Id).ToList();\n    doc.Export(folderPath, sheetIds, options);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rellena el parámetro de material de todos los muros con '{material_name}'."}, {"role": "assistant", "content": "Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"{material_name}\")) as Material;\nif(material != null)\n{\n    var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el tipo de todas las ventanas de '{old_type_name}' a '{new_type_name}'."}, {"role": "assistant", "content": "FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"{new_type_name}\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"{old_type_name}\"));\n\nif (newType != null && oldType != null)\n{\n    if(!newType.IsActive) newType.Activate();\n    List<FamilyInstance> windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Id == oldType.Id).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén todas las habitaciones que están en el Level 2."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nList<Element> roomsOnLevel = new List<Element>();\n\nif (level != null)\n{\n    roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level.Id).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Draw a filled region with a diagonal pattern."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nFillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n\nif (activeView != null && fillPattern != null)\n{\n    FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n    if (filledRegionType != null)\n    {\n        FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n        if (newType != null)\n        {\n            newType.ForegroundPatternId = fillPattern.Id;\n            XYZ p1 = new XYZ(0,0,0);\n            XYZ p2 = new XYZ(5 / 0.3048,0,0);\n            XYZ p3 = new XYZ(5 / 0.3048,5 / 0.3048,0);\n            XYZ p4 = new XYZ(0,5 / 0.3048,0);\n            CurveLoop profile = new CurveLoop();\n            profile.Append(Line.CreateBound(p1,p2));\n            profile.Append(Line.CreateBound(p2,p3));\n            profile.Append(Line.CreateBound(p3,p4));\n            profile.Append(Line.CreateBound(p4,p1));\n            FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop>{profile});\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade el prefijo '{prefix}' a todas las vistas de plano."}, {"role": "assistant", "content": "string prefix = \"{prefix}\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if (view != null)\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las familias de anotación."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa."}, {"role": "assistant", "content": "Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (furnitureCat != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an extrusion roof with an arc profile."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las vistas de planta del proyecto."}, {"role": "assistant", "content": "List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new elevation view looking south."}, {"role": "assistant", "content": "ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null && activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 0);\n        if (aev != null)\n        {\n            aev.Name = \"South Elevation\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aplica la plantilla de vista '{template_name}' a la vista activa."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nView viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.IsTemplate && v.Name == \"{template_name}\");\n\nif (activeView != null && viewTemplate != null)\n{\n    activeView.ViewTemplateId = viewTemplate.Id;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén todas las habitaciones que están en el Basement."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Basement\") as Level;\nList<Element> roomsOnLevel = new List<Element>();\n\nif (level != null)\n{\n    roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level.Id).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create columns at each grid intersection."}, {"role": "assistant", "content": "FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    if(!colSymbol.IsActive) colSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                 if(results != null) {\n                     foreach (IntersectionResult ir in results)\n                     {\n                         doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                     }\n                 }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Calculate the total length of all Supply Air ducts."}, {"role": "assistant", "content": "List<Duct> ducts = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctCurves).WhereElementIsNotElementType().Cast<Duct>().Where(d => d.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString() == \"SupplyAir\").ToList();\ndouble totalLength = 0.0;\nforeach (Duct d in ducts)\n{\n    totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the visibility of the 'Furniture' category to false in the active view."}, {"role": "assistant", "content": "Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nView activeView = doc.ActiveView;\n\nif (furnitureCat != null && activeView != null)\n{\n    activeView.SetCategoryHidden(furnitureCat.Id, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 3D view with the section box enabled."}, {"role": "assistant", "content": "string viewName = \"3D View with Section Box\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de texto llamado '{type_name}' de {text_size_mm}mm de color verde."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Oculta todos los muros que sean más cortos de 5.0 metros."}, {"role": "assistant", "content": "double lengthThreshold = UnitUtils.ConvertToInternalUnits(5.0, UnitTypeId.Meters);\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nList<ElementId> shortWallIds = new List<ElementId>();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    foreach(Wall wall in walls)\n    {\n        Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n        if(lengthParam != null && lengthParam.HasValue && lengthParam.AsDouble() < lengthThreshold)\n        {\n            shortWallIds.Add(wall.Id);\n        }\n    }\n    if (shortWallIds.Count > 0)\n    {\n        activeView.HideElements(shortWallIds);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new level 'Nivel 1' at an elevation of 4.0 meters."}, {"role": "assistant", "content": "double elevation = UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 1\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una cimentación de viga de 7.8 metros de largo."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(7.8, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Footing);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Delete all unused wall types in the project."}, {"role": "assistant", "content": "ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new level named 'Level 2' at an elevation of 4.0 meters."}, {"role": "assistant", "content": "string levelName = \"Level 2\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una cimentación de viga de 7.8 metros de largo."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(7.8, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Footing);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the total number of warnings in the project."}, {"role": "assistant", "content": "int totalWarnings = doc.GetWarnings().Count;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Hide all annotation elements in the active view."}, {"role": "assistant", "content": "if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las vistas de planta del proyecto."}, {"role": "assistant", "content": "List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Connect two cable trays with an elbow fitting."}, {"role": "assistant", "content": "List<CableTray> trays = new FilteredElementCollector(doc).OfClass(typeof(CableTray)).Cast<CableTray>().ToList();\n\nif (trays.Count >= 2)\n{\n    Connector c1 = trays[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = trays[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    \n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewUnionFitting(c1, c2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Paint the interior face of exterior walls with '{material_name}'."}, {"role": "assistant", "content": "Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"{material_name}\");\nvar exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior).ToList();\n\nif (paintMaterial != null)\n{\n    foreach (Wall w in exteriorWalls)\n    {\n        IList<Reference> interiorFaceRefs = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior);\n        if(interiorFaceRefs.Count > 0)\n        {\n            Face interiorFace = w.GetGeometryObjectFromReference(interiorFaceRefs.First()) as Face;\n            if (interiorFace != null)\n            {\n                doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 3D view oriented from the southeast."}, {"role": "assistant", "content": "string viewName = \"3D View Southeast\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dibuja un conducto de ventilación rectangular de {width_mm}x{height_mm} milímetros."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast<DuctType>().FirstOrDefault(d => d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null && ductType != null && systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 / 0.3048);\n        XYZ p2 = new XYZ(10 / 0.3048, 0, 3 / 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null && !widthParam.IsReadOnly) widthParam.Set({width_mm} / 304.8);\n            if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set({height_mm} / 304.8);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a detail group with the selected detail items."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Typical Detail 1\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Model a railing on an existing staircase."}, {"role": "assistant", "content": "RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una ventana de 0.9x3.0 metros en la pared más cercana."}, {"role": "assistant", "content": "FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = $\"Window {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new elevation view looking south named \"{view_name}\"."}, {"role": "assistant", "content": "ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null && activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 0);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un codo en T entre dos tuberías que se intersecan."}, {"role": "assistant", "content": "// No se proporciona código para esta función específica debido a la necesidad de selección interactiva y manejo de casos complejos.\n// Este escenario involucra la selección de elementos específicos y el uso de métodos de creación que dependen de la geometría existente."}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an assembly from the selected elements."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"New Assembly\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista 3D orientada desde el sureste."}, {"role": "assistant", "content": "string viewName = \"Vista 3D Sureste\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new wall type '{type_name}' with a thickness of 10cm."}, {"role": "assistant", "content": "WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, (10 / 100) / 0.3048);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Inicia y confirma una transacción para '{transaction_name}'."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de muro de {width_cm}cm llamado 'Generic - 200mm'."}, {"role": "assistant", "content": "string newTypeName = \"Generic - 200mm\";\nWallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (wallTypeToDuplicate != null)\n{\n    WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n        cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n        cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits({width_cm} / 100.0, UnitTypeId.Meters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create columns at each grid intersection."}, {"role": "assistant", "content": "FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    if(!colSymbol.IsActive) colSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                 if(results != null) {\n                     foreach (IntersectionResult ir in results)\n                     {\n                         doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                     }\n                 }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén todos los muros de un modelo vinculado que se cruzan con una caja de delimitación."}, {"role": "assistant", "content": "RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\nList<Element> linkedWalls = new List<Element>();\n\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    if (linkDoc != null)\n    {\n        BoundingBoxXYZ bbox = new BoundingBoxXYZ();\n        bbox.Min = new XYZ(0,0,0);\n        bbox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(bbox.Min, bbox.Max));\n        linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToList();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Alinea las líneas de centro de dos muros seleccionados por el usuario."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona el primer muro (el que se moverá)\");\nReference r2 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona el segundo muro (el de referencia)\");\n\nif (r1 != null && r2 != null)\n{\n    Wall w1 = doc.GetElement(r1) as Wall;\n    Wall w2 = doc.GetElement(r2) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (w1 != null && w2 != null && activeView != null)\n    {\n        LocationCurve lc1 = w1.Location as LocationCurve;\n        LocationCurve lc2 = w2.Location as LocationCurve;\n        if (lc1 != null && lc2 != null)\n        {\n            doc.Create.NewAlignment(activeView, lc1.Curve.Reference, lc2.Curve.Reference);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new window schedule that includes Type Mark, Width, and Height."}, {"role": "assistant", "content": "string scheduleName = \"Window Schedule\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un pilar del tipo 'W-Wide Flange-Column' en cada intersección de la rejilla."}, {"role": "assistant", "content": "FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"W-Wide Flange-Column\");\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\nif (columnSymbol != null && level != null)\n{\n    if (!columnSymbol.IsActive) columnSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                if (results != null && !results.IsEmpty)\n                {\n                    foreach (IntersectionResult ir in results)\n                    {\n                        doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                    }\n                }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un filtro de vista para ocultar muros demolidos."}, {"role": "assistant", "content": "Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p => p.Name.Contains(\"Demolished\") || p.Name.Contains(\"Demolición\"));\nView activeView = doc.ActiveView;\n\nif (demolishedPhase != null && activeView != null)\n{\n    ElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\n    FilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\n    ElementFilter filter = new ElementParameterFilter(rule);\n    ICollection<ElementId> categories = new List<ElementId>{{ new ElementId(BuiltInCategory.OST_Walls) }};\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Filtro Demolición\", categories, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de texto de {text_size_mm}mm de color verde llamado '{type_name}'."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an 5.0-meter long foundation beam."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(5.0, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Footing);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Establece la visibilidad de la categoría '{category_name}' en falso en la vista activa."}, {"role": "assistant", "content": "Category category = doc.Settings.Categories.get_Item(BuiltInCategory.{category_name});\nif (category != null && doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(category.Id, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate the active view and name it '{view_name}'."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{view_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the sill height of all windows to 3.0 meter(s)."}, {"role": "assistant", "content": "double sillHeight = 3.0 / 0.3048;\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el tipo de una losa por uno que contenga 'Generic 12\"'."}, {"role": "assistant", "content": "Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif(floorToChange != null)\n{\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Generic 12\"\"));\n    if(newType!=null)\n        floorToChange.ChangeTypeId(newType.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the 'Mark' parameter of all selected elements to '{mark_value}'."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"{mark_value}\");\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una viga estructural entre (5,5,3) y (15,5,3) en el L01."}, {"role": "assistant", "content": "FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"L01\") as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(5, 5, 3);\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un muro en Level 1 de (5,5,3) a (15,5,3) con 3.15m de alto."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallType != null)\n    {\n        Line wallCurve = Line.CreateBound(new XYZ(5, 5, 3), new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters), 5, 3));\n        double height = UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters);\n        Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a grid of {num_horizontal} horizontal and {num_vertical} vertical grids, spaced 6 meters apart."}, {"role": "assistant", "content": "double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint count = {num_horizontal};\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ(({num_vertical} - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < {num_vertical}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Elimina todas las líneas de detalle en la vista activa."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection<ElementId> detailLines = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(DetailLine)).ToElementIds();\n    if (detailLines.Count > 0)\n    {\n        doc.Delete(detailLines);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls with an empty 'Mark' parameter and set it to '{mark_value}'."}, {"role": "assistant", "content": "List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"{mark_value}\");\n  }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new Ribbon panel named '{panel_name}' with a button."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rota un elemento seleccionado 30 grados sobre su eje Z."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, 30 * Math.PI / 180.0);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de texto llamado '{type_name}' de {text_size_mm}mm de color verde."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo material llamado '{material_name}' y asígnale un color base y una transparencia."}, {"role": "assistant", "content": "string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place lighting posts every 8m along a 100m path."}, {"role": "assistant", "content": "FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rename the active view to '{view_name}'."}, {"role": "assistant", "content": "string newName = \"{view_name}\";\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.Name = newName;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the total length of all walls in the project."}, {"role": "assistant", "content": "double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera un equipo eléctrico en X=2,Y=3."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && panelSymbol != null)\n{\n    if(!panelSymbol.IsActive) panelSymbol.Activate();\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una superficie topográfica a partir de una lista de 4 puntos."}, {"role": "assistant", "content": "IList<XYZ> points = new List<XYZ>\n{\n    new XYZ(0, 0, 0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters))\n};\nTopographySurface.Create(doc, points);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate {level_to_duplicate} with a {offset_m}m offset and name it '{new_level_name}'."}, {"role": "assistant", "content": "string newLevelName = \"{new_level_name}\";\nLevel levelToDup = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{level_to_duplicate}\") as Level;\n\nif (levelToDup != null)\n{\n    double newElevation = levelToDup.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all annotation families."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Mueve un muro {distance_m} metros a la derecha."}, {"role": "assistant", "content": "Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (wall != null)\n{\n    XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters),0,0);\n    ElementTransformUtils.MoveElement(doc, wall.Id, translation);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Align the centerlines of two user-selected walls."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select the first wall (the one that will move)\");\nReference r2 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select the second wall (the reference)\");\n\nif (r1 != null && r2 != null)\n{\n    Wall w1 = doc.GetElement(r1) as Wall;\n    Wall w2 = doc.GetElement(r2) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (w1 != null && w2 != null && activeView != null)\n    {\n        LocationCurve lc1 = w1.Location as LocationCurve;\n        LocationCurve lc2 = w2.Location as LocationCurve;\n        if (lc1 != null && lc2 != null)\n        {\n            doc.Create.NewAlignment(activeView, lc1.Curve.Reference, lc2.Curve.Reference);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Apply a red color to all windows in the active view."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(255, 0, 0));\n    ICollection<ElementId> windows = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().ToElementIds();\n    \n    foreach (ElementId windowId in windows)\n    {\n        activeView.SetElementOverrides(windowId, ogs);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a wall 10.2 meters long and 3.15 meters high."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(10.2, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters), 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade una etiqueta a la columna más cercana al origen."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n    LocationPoint lp = c.Location as LocationPoint;\n    return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n}).FirstOrDefault();\n\nif (activeView != null && column != null)\n{\n    LocationPoint loc = column.Location as LocationPoint;\n    if (loc != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de texto llamado '{type_name}' de {text_size_mm}mm de color verde."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nTextNoteType newType = null;\nif (defaultType != null)\n{\n    newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a spherical DirectShape with a {radius_m}-meter radius."}, {"role": "assistant", "content": "double radius = {radius_m} / 0.3048;\nList<GeometryObject> solids = new List<GeometryObject>();\nFrame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\nArc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\nLine line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\nCurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\nSolid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\nsolids.Add(sphere);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(solids);\n    ds.Name = \"Sphere DirectShape\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un techo por extrusión con una pendiente del {slope_percentage}%."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null && roofType != null)\n{\n    double run = 10.0;\n    double rise = run * ({slope_percentage} / 100.0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(run / 0.3048, 0, rise / 0.3048)));\n    \n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    \n    if (refPlane != null)\n    {\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, run / 0.3048);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo material llamado '{material_name}' y asígnale un color base y una transparencia."}, {"role": "assistant", "content": "string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Exporta el documento a un archivo IFC con la versión IFC4x3."}, {"role": "assistant", "content": "string folderPath = \"C:/RevitExports/\";\nstring fileName = doc.Title + \"_IFC4x3.ifc\";\nif(System.IO.Directory.Exists(folderPath))\n{\n    IFCExportOptions options = new IFCExportOptions();\n    options.FileVersion = IFCVersion.IFC4x3;\n    doc.Export(folderPath, fileName, options);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new sheet with number '{sheet_number}' and name '{sheet_name}'."}, {"role": "assistant", "content": "FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"{sheet_name}\";\n        sheet.SheetNumber = \"{sheet_number}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rotate a selected element 45 degrees around its Z-axis."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, 45 * Math.PI / 180.0);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén todas las subcategorías de la categoría {buit_in_category_enum}."}, {"role": "assistant", "content": "Category targetCategory = doc.Settings.Categories.get_Item(BuiltInCategory.{buit_in_category_enum});\nCategoryNameMap subcategories = targetCategory.SubCategories;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplica el tipo de muro '{original_type_name}' y llámalo '{new_type_name}'."}, {"role": "assistant", "content": "WallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"{original_type_name}\");\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(\"{new_type_name}\") as WallType;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all doors on level 'Basement' that belong to the '{family_name}' family."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Basement\");\nList<Element> doors = new List<Element>();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all section views in the project."}, {"role": "assistant", "content": "List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa."}, {"role": "assistant", "content": "Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nView activeView = doc.ActiveView;\n\nif (furnitureCat != null && activeView != null)\n{\n    activeView.SetCategoryHidden(furnitureCat.Id, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un conducto eléctrico de {diameter_inch} pulgada de diámetro."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 / 0.3048);\n        XYZ end = new XYZ(5 / 0.3048, 0, 3 / 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set({diameter_inch}/12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de tubería llamado 'PVC - Sch 40' con material '{material_name}'."}, {"role": "assistant", "content": "PipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"{material_name}\") as Material;\n\nif (pipeTypeToDuplicate != null && material != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(\"PVC - Sch 40\") as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a curtain wall 1.2 meters wide and 3.15 meters high."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters), 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a Reflected Ceiling Plan view for Roof."}, {"role": "assistant", "content": "string levelName = \"Roof\";\nstring viewName = \"Roof Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {text_size_mm}mm text type named '{type_name}' in green color."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add a reference point at coordinates (7,4,3) inside the family editor."}, {"role": "assistant", "content": "if(doc.IsFamilyDocument)\n{\n    doc.FamilyCreate.NewReferencePoint(new XYZ(7,4,3));\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplica la vista '{view_name}' como una vista dependiente."}, {"role": "assistant", "content": "ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"{view_name}\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una cámara llamada '{view_name}' en la posición ({eye_x_m}, {eye_y_m}, {eye_z_m})."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        cameraView.Name = \"{view_name}\";\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits({eye_x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_z_m}, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el tipo de una losa seleccionada a '{new_type_name}'."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"{new_type_name}\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una dimensión radial para un muro curvo."}, {"role": "assistant", "content": "Wall curvedWall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.Location is LocationCurve && (w.Location as LocationCurve).Curve is Arc);\nView activeView = doc.ActiveView;\n\nif (curvedWall != null && activeView != null)\n{\n    LocationCurve locCurve = curvedWall.Location as LocationCurve;\n    if (locCurve != null)\n    {\n        Arc arc = locCurve.Curve as Arc;\n        if (arc != null)\n        {\n            ReferenceArray refArray = new ReferenceArray();\n            refArray.Append(arc.Reference);\n            doc.Create.NewDimension(activeView, Line.CreateBound(arc.Center, arc.GetEndPoint(0)), refArray);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un muro cortina de 1.0 metros de ancho y 3.15 metros de alto."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters), 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Import a georeferenced survey from a LandXML file."}, {"role": "assistant", "content": "// The Revit API in the provided context does not support direct LandXML import.\n// This functionality typically requires additional add-ins like the Site Designer, which are not available here.\n// As a placeholder, this code will show how to create a simple topography surface from a list of points.\nusing(Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(50, 0, 5));\n    points.Add(new XYZ(0, 50, 10));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera un piso rectangular de 10×8 metros."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> {{ loop }}, floorType.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Une la geometría de una columna y un suelo que se cruzan."}, {"role": "assistant", "content": "Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\n\nif (column != null && floor != null)\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Exporta todas las hojas de un conjunto a un único PDF."}, {"role": "assistant", "content": "ViewSheetSet sheetSet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheetSet)).FirstOrDefault() as ViewSheetSet;\n\nif (sheetSet != null)\n{\n    string folderPath = \"C:/RevitExports/\";\n    PDFExportOptions options = new PDFExportOptions();\n    options.Combine = true;\n    options.FileName = sheetSet.Name;\n    List<ElementId> sheetIds = sheetSet.Views.Cast<ViewSheet>().Select(s => s.Id).ToList();\n    doc.Export(folderPath, sheetIds, options);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all doors on Nivel 1 using a combined filter."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nList<Element> doors = new List<Element>();\n\nif (level1 != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    doors = new FilteredElementCollector(doc).WherePasses(combinedFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all annotation families."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de puerta llamado 'M_Single-Flush' y asigna '{fire_rating_value}' al parámetro 'Fire Rating'."}, {"role": "assistant", "content": "FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"M_Single-Flush\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"{fire_rating_value}\");\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the sill height of all windows to {sill_height_mm}mm."}, {"role": "assistant", "content": "double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista 3D orientada desde el sureste."}, {"role": "assistant", "content": "string viewName = \"Vista 3D Sureste\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the system type of a selected pipe."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select a pipe\");\n\nPipingSystemType systemType = null;\nif (pickedRef != null)\n{\n    Pipe pipe = doc.GetElement(pickedRef.ElementId) as Pipe;\n    if (pipe != null)\n    {\n        Parameter systemTypeParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        if (systemTypeParam != null && systemTypeParam.HasValue)\n        {\n            systemType = doc.GetElement(systemTypeParam.AsElementId()) as PipingSystemType;\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Inserta un terminal de aire en el extremo de un conducto."}, {"role": "assistant", "content": "Duct duct = new FilteredElementCollector(doc).OfClass(typeof(Duct)).FirstOrDefault() as Duct;\nFamilySymbol terminalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctTerminal).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (duct != null && terminalSymbol != null)\n{\n    if(!terminalSymbol.IsActive) terminalSymbol.Activate();\n    LocationCurve locCurve = duct.Location as LocationCurve;\n    if (locCurve != null)\n    {\n        Connector endConnector = duct.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault(c => c.Origin.IsAlmostEqualTo(locCurve.Curve.GetEndPoint(1)));\n        if (endConnector != null)\n        {\n            doc.Create.NewFamilyInstance(endConnector.Origin, terminalSymbol, endConnector);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén todas las instancias de la categoría Mobiliario."}, {"role": "assistant", "content": "List<Element> furnitureInstances = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Apply the '{template_name}' view template to the active view."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nView viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.IsTemplate && v.Name == \"{template_name}\");\n\nif (activeView != null && viewTemplate != null)\n{\n    activeView.ViewTemplateId = viewTemplate.Id;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva vista de alzado mirando al sur."}, {"role": "assistant", "content": "string viewName = \"Alzado Sur (Nuevo)\";\nViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20, 0), 100);\nView aev = marker.CreateElevation(doc, doc.ActiveView.Id, 0);\naev.Name = viewName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new window schedule that includes Type Mark, Width, and Height."}, {"role": "assistant", "content": "string scheduleName = \"Window Schedule\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Comprueba si la vista activa es una vista de plano."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nbool isPlanView = false;\n\nif (activeView != null)\n{\n    isPlanView = activeView.ViewType == ViewType.FloorPlan \n                 || activeView.ViewType == ViewType.CeilingPlan \n                 || activeView.ViewType == ViewType.AreaPlan \n                 || activeView.ViewType == ViewType.EngineeringPlan;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Inicia y confirma una transacción para '{transaction_name}'."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place a spot elevation on a given face and view point."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Select the top face of the floor\");\n\nView activeView = doc.ActiveView;\n\nif (faceRef != null && activeView != null)\n{\n    XYZ pointOnFace = faceRef.GlobalPoint;\n    XYZ leaderEnd = pointOnFace + new XYZ(1 / 0.3048, 1 / 0.3048, 0);\n    doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create {num_grids} vertical grids spaced {separation_m} meters apart."}, {"role": "assistant", "content": "double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i=0; i<{num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place a material tag on a wall face."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Face, \"Select a face to tag\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Select the tag location\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de texto llamado '{type_name}' de {text_size_mm}mm de color verde."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Generate an electrical panel at X=7,Y=4."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && panelSymbol != null)\n{\n    if(!panelSymbol.IsActive) panelSymbol.Activate();\n    XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0);\n    doc.Create.NewFamilyInstance(point, panelSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an electrical conduit with a {diameter_inch}-inch diameter."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null && conduitTypeId != null && conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 / 0.3048);\n        XYZ end = new XYZ(5 / 0.3048, 0, 3 / 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null && !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set({diameter_inch}/12.0);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las puertas del nivel 'Nivel 2' que sean de la familia '{family_name}'."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\nList<Element> doors = new List<Element>();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place a material tag on a wall face."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Face, \"Select a face to tag\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Select the tag location\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Ajusta todas las ventanas para que tengan la altura del antepecho a {sill_height_mm}mm."}, {"role": "assistant", "content": "double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el tipo de una losa por uno que contenga 'Suelo Hormigón 30cm'."}, {"role": "assistant", "content": "Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Suelo Hormigón 30cm\"));\n\nif (floorToChange != null && newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las vistas de planta del proyecto."}, {"role": "assistant", "content": "List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el tipo de todos los muros seleccionados a 'Exterior - Brick on Mtl. Stud'."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Exterior - Brick on Mtl. Stud\");\nif(targetWallType != null)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null)\n        {\n            wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea {num_worksets} worksets de arquitectura."}, {"role": "assistant", "content": "List<string> worksetNames = new List<string> {{ \"TAD_ARQ_MAM\", \"TAD_ARQ_ACA\", \"TAD_ARQ_PLA\", \"TAD_ARQ_PSO\", \"TAD_ARQ_HRE\", \"TAD_ARQ_ALU\", \"TAD_ARQ_CAR\", \"TAD_ARQ_MOB\", \"TAD_ARQ_PLO\", \"TAD_ARQ_EXT\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all annotation families."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a topography surface from a list of 4 points."}, {"role": "assistant", "content": "IList<XYZ> points = new List<XYZ>\n{\n    new XYZ(0, 0, 0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters))\n};\nTopographySurface.Create(doc, points);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an in-place family for a custom '{item_name}' using an extrusion."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un techo por extrusión con un perfil en arco."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén todas las familias de puertas cargadas en el proyecto."}, {"role": "assistant", "content": "List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the total number of warnings in the project."}, {"role": "assistant", "content": "int totalWarnings = doc.GetWarnings().Count;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 20cm '{type_name}' type and then create a wall of that type."}, {"role": "assistant", "content": "WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), (20 / 100.0) / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Assign the '{material_name}' material to the first layer of a wall type."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"{material_name}\"));\n\n    if (wallType != null && material != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, material.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Move the selected elements {distance_m} meters up."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new sheet number '{sheet_number}' named '{sheet_name}' using the first available title block."}, {"role": "assistant", "content": "FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"{sheet_name}\";\n        sheet.SheetNumber = \"{sheet_number}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all section views in the project."}, {"role": "assistant", "content": "List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un suelo con un contorno de 10 por 8 metros."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> {{ loop }}, floorType.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a DirectShape with a {size_m}x{size_m}x{size_m} meter box shape named '{shape_name}'."}, {"role": "assistant", "content": "TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits({size_m}, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"{shape_name}\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate the '{view_name}' view as a dependent view."}, {"role": "assistant", "content": "ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"{view_name}\") as ViewPlan;\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create {num_worksets} worksets for engineering disciplines."}, {"role": "assistant", "content": "List<string> worksetNames = new List<string> {{ \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place an instance of the '{family_name}' family in the center of the '{room_name}' room."}, {"role": "assistant", "content": "Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"{room_name}\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"{family_name}\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Une la geometría de una columna y un suelo que se cruzan."}, {"role": "assistant", "content": "Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\nif (column != null && floor != null)\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista 3D con la caja de sección activada."}, {"role": "assistant", "content": "string viewName = \"Vista 3D con Caja de Sección\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Pin the selected element so it cannot be moved."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count > 0)\n{\n    Element elementToPin = doc.GetElement(selectedIds.First());\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {title_block_size} sheet and place a legend on it."}, {"role": "assistant", "content": "FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"{title_block_size}\"));\nView legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\nif (titleBlock != null && legendView != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (newSheet != null)\n    {\n        BoundingBoxUV sheetBox = newSheet.Outline;\n        UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n        XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n        Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade un plano de referencia horizontal llamado '{plane_name}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"{plane_name}\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo material llamado '{material_name}' con color ({color_r}, {color_g}, {color_b}) y transparencia de {transparency_percent}%."}, {"role": "assistant", "content": "ElementId materialId = Material.Create(doc, \"{material_name}\");\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color({color_r}, {color_g}, {color_b});\n        material.Transparency = {transparency_percent};\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place lighting posts every 6m along a 100m path."}, {"role": "assistant", "content": "FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dentro del editor de familias, crea un nuevo plano de referencia horizontal llamado '{plane_name}'."}, {"role": "assistant", "content": "XYZ start = new XYZ(UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0, 0);\nXYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0);\nXYZ normal = XYZ.BasisY;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = \"{plane_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a floor plan view for 'Level 1'."}, {"role": "assistant", "content": "string levelName = \"Level 1\";\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dado un muro, obtén los materiales y sus volúmenes."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un muro\");\n\nDictionary<string, double> materialVolumes = new Dictionary<string, double>();\nif (pickedRef != null)\n{\n    Wall wall = doc.GetElement(pickedRef) as Wall;\n    if (wall != null)\n    {\n        Parameter areaParam = wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED);\n        if (areaParam != null && areaParam.HasValue)\n        {\n            double wallArea = areaParam.AsDouble();\n            WallType wallType = wall.WallType;\n            if (wallType != null)\n            {\n                CompoundStructure cs = wallType.GetCompoundStructure();\n                if (cs != null)\n                {\n                    foreach(CompoundStructureLayer layer in cs.GetLayers())\n                    {\n                        Material material = doc.GetElement(layer.MaterialId) as Material;\n                        if(material != null)\n                        {\n                            double volume = layer.Width * wallArea; \n                            materialVolumes[material.Name] = volume;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea {num_worksets} worksets para las disciplinas de ingeniería."}, {"role": "assistant", "content": "List<string> worksetNames = new List<string> {{ \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new shared text project parameter named '{param_name}' for walls and doors."}, {"role": "assistant", "content": "string originalFile = doc.Application.SharedParametersFilename;\nstring tempFile = System.IO.Path.GetTempFileName() + \".txt\";\nusing (System.IO.File.Create(tempFile)) { }\ndoc.Application.SharedParametersFilename = tempFile;\n\ntry\n{\n    DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n    if (defFile != null)\n    {\n        DefinitionGroup group = defFile.Groups.Create(\"General\");\n        if (group != null)\n        {\n            ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(\"{param_name}\", ParameterType.Text);\n            Definition definition = group.Definitions.Create(options);\n            if (definition != null)\n            {\n                CategorySet categories = doc.Application.Create.NewCategorySet();\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                doc.ParameterBindings.Insert(definition, binding, Autodesk.Revit.DB.BuiltInParameterGroup.PG_DATA);\n            }\n        }\n    }\n}\nfinally\n{\n    doc.Application.SharedParametersFilename = originalFile;\n    System.IO.File.Delete(tempFile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una familia 'in-situ' para un/a '{item_name}' personalizado usando una extrusión."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Localiza todos los muros con un parámetro 'Marca' vacío y asigna '{mark_value}'."}, {"role": "assistant", "content": "List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"{mark_value}\");\n  }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a wall on Basement from (5,5,3) to (15,5,3) with a height of 2.8 meters."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Basement\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(5, 5, 3);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters), 5, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una cámara llamada '{view_name}' en la posición ({eye_x_m}, {eye_y_m}, {eye_z_m})."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        cameraView.Name = \"{view_name}\";\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits({eye_x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_z_m}, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Etiqueta todas las habitaciones con su área."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(locPoint.Point.X, locPoint.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a section view between points (5,5,3) and (15,5,3)."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(5,5,3);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),3);\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un DirectShape esférico con un radio de {radius_m} metros."}, {"role": "assistant", "content": "double radius = {radius_m} / 0.3048;\nList<GeometryObject> solids = new List<GeometryObject>();\nFrame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\nArc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\nLine line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\nCurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\nSolid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\nsolids.Add(sphere);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(solids);\n    ds.Name = \"Esfera DirectShape\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Pin the selected element so it cannot be moved."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count > 0)\n{\n    Element elementToPin = doc.GetElement(selectedIds.First());\n    if (elementToPin != null)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva vista de alzado mirando al sur con el nombre \"{view_name}\"."}, {"role": "assistant", "content": "ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null && activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 0);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un muro del tipo 'Exterior - Brick on Mtl. Stud' en el 'L01' desde (5,5) hasta (15,5)."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"L01\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Exterior - Brick on Mtl. Stud\") as WallType;\nXYZ startPoint = new XYZ(5, 5, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nif (level != null && wallType != null)\n{\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add a 45-degree elbow between two pipes."}, {"role": "assistant", "content": "List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.ConnectorManager != null && p.ConnectorManager.UnusedConnectors.Size > 0).Take(2).ToList();\n\nif (pipes.Count >= 2)\n{\n    Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    \n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewElbowFitting(c1, c2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una tubería con un diámetro de 150mm."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\n\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n\n    if (pipe != null)\n    {\n        Parameter diameterParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM);\n        if (diameterParam != null) {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits(150, UnitTypeId.Millimeters));\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera un piso rectangular de 12.5×6.2 metros."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(12.5, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(6.2, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> {{ loop }}, floorType.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls with the comment '{comment}'."}, {"role": "assistant", "content": "ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"{comment}\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Importa topografía georreferenciada desde un archivo LandXML."}, {"role": "assistant", "content": "IList<XYZ> points = new List<XYZ>();\npoints.Add(new XYZ(0, 0, 0));\npoints.Add(new XYZ(50, 0, 5));\npoints.Add(new XYZ(0, 50, 10));\nTopographySurface.Create(doc, points);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 20cm 'Generic - 200mm' type and then create a wall of that type."}, {"role": "assistant", "content": "string newTypeName = \"Generic - 200mm\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == newTypeName) as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if(newWallType!=null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if(cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(20/10.0, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nLine wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\nWall.Create(doc, wallCurve, newWallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva vista de alzado mirando al sur con el nombre \"{view_name}\"."}, {"role": "assistant", "content": "ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null && activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 0);\n        if (aev != null)\n        {\n            aev.Name = \"{view_name}\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Mueve los elementos seleccionados {distance_m} metros hacia arriba."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a roof by footprint on the 'Basement'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Basement\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 / 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,0,0), new XYZ(20 / 0.3048,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,30 / 0.3048,0), new XYZ(0,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 / 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a roof by footprint on the 'Level 2'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 / 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,0,0), new XYZ(20 / 0.3048,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,30 / 0.3048,0), new XYZ(0,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 / 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Group a room schedule by Level."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Group Schedule\"))\n{\n    t.Start();\n    ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(vs => vs.Definition.CategoryId.IntegerValue == (int)BuiltInCategory.OST_Rooms);\n\n    if (schedule != null)\n    {\n        ScheduleDefinition def = schedule.Definition;\n        if (def != null)\n        {\n            SchedulableField schedulableField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ROOM_LEVEL_ID);\n            if (schedulableField != null)\n            {\n                ScheduleField field = def.AddField(schedulableField);\n                ScheduleSortGroupField sortGroupField = new ScheduleSortGroupField(field.FieldId);\n                sortGroupField.ShowHeader = true;\n                def.AddSortGroupField(sortGroupField);\n                def.IsItemized = false;\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo nivel llamado 'Level 2' a una elevación de 4.0 metros."}, {"role": "assistant", "content": "string levelName = \"Level 2\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Selecciona todos los muros del 'Level 2' y cambia su comentario a '{comment}'."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif (level != null)\n{\n    List<Wall> wallsOnLevel = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level.Id).Cast<Wall>().ToList();\n    foreach(Wall wall in wallsOnLevel)\n    {\n        Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentParam != null && !commentParam.IsReadOnly)\n        {\n            commentParam.Set(\"{comment}\");\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the 'Mark' parameter of all selected elements to '{mark_value}'."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        if (markParam != null && !markParam.IsReadOnly) markParam.Set(\"{mark_value}\");\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Calcula la longitud total de todos los ductos de Suministro de Aire."}, {"role": "assistant", "content": "List<Duct> ducts = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctCurves).WhereElementIsNotElementType().Cast<Duct>().Where(d => d.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString() == \"SupplyAir\").ToList();\ndouble totalLength = 0.0;\nforeach (Duct d in ducts)\n{\n    totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aísla temporalmente los elementos seleccionados en la vista activa."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToIsolate = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToIsolate.Count > 0)\n{\n    activeView.IsolateElementsTemporary(idsToIsolate);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las vistas de sección en el proyecto."}, {"role": "assistant", "content": "List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva cota de nivel llamada 'Azotea' a una elevación de 3.5 metros."}, {"role": "assistant", "content": "double elevation = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nnewLevel.Name = \"Azotea\";"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una ventana de 0.9x3.0 metros en la pared más cercana."}, {"role": "assistant", "content": "FamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = $\"Window {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters), UnitTypeId.Meters)}}m x {{UnitUtils.ConvertFromInternalUnits(UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters), UnitTypeId.Meters)}}m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n\n    if (widthParam != null && heightParam != null)\n    {\n        widthParam.Set(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters));\n        heightParam.Set(UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters));\n    }\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (level != null && locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de texto de {text_size_mm}mm de color azul."}, {"role": "assistant", "content": "string newTypeName = \"{text_size_mm}mm Azul\";\nTextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n        \n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly) lineColorParam.Set(255);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rotate a selected element 90 degrees around its Z-axis."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, 90 * Math.PI / 180.0);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change the type of a floor to one that contains 'Concrete - 225mm'."}, {"role": "assistant", "content": "Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concrete - 225mm\"));\n\nif (floorToChange != null && newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dentro del editor de familias, crea un plano de referencia vertical llamado '{plane_name}'."}, {"role": "assistant", "content": "string rpName = \"{plane_name}\";\nXYZ start = new XYZ(0, UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0);\nXYZ end = new XYZ(0, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nXYZ normal = XYZ.BasisX;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null && doc.IsFamilyDocument)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = rpName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate the '{view_name}' plan view and name it '{template_name}'."}, {"role": "assistant", "content": "ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(v => v.Name == \"{view_name}\");\n\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{template_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Activate all FamilySymbols in the project."}, {"role": "assistant", "content": "List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (FamilySymbol sym in symbols)\n{\n    if (!sym.IsActive)\n    {\n        sym.Activate();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add a point to the selected Path of Travel."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select a Path of Travel\");\n\nif (pickedRef != null)\n{\n    PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n    if (pot != null)\n    {\n        IList<XYZ> points = pot.GetPath();\n        if (points != null && points.Count >= 2)\n        {\n            XYZ midPoint = (points[0] + points[1]) / 2;\n            points.Insert(1, midPoint);\n            pot.Update(points);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva habitación en el Basement en el punto (2, 3)."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Basement\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Room room = doc.Create.NewRoom(level1, point);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aplica el estilo visual 'Rayos X' a la vista 3D activa."}, {"role": "assistant", "content": "View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un grupo de detalles con los elementos de detalle seleccionados."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Detalle Típico 1\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dado un muro seleccionado, encuentra todas las tuberías que lo atraviesan."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\n\nList<ElementId> intersectingPipes = new List<ElementId>();\nif (wallRef != null)\n{\n    Element wall = doc.GetElement(wallRef);\n    if (wall != null)\n    {\n        ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n        intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds().ToList();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all section views in the project."}, {"role": "assistant", "content": "List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Establece el parámetro 'Marca' de todos los muros seleccionados a '{mark_value}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) \n                {\n                    markParam.Set(\"{mark_value}\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un techo por extrusión con una pendiente del {slope_percentage}%."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null && roofType != null)\n{\n    double run = 10.0;\n    double rise = run * ({slope_percentage} / 100.0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(run / 0.3048, 0, rise / 0.3048)));\n    \n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    \n    if (refPlane != null)\n    {\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, run / 0.3048);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un tipo de muro '{type_name}' de 10cm y luego crea un muro de ese tipo."}, {"role": "assistant", "content": "WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 10 / 100 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Apply the '{template_name}' view template to the active view."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nView viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.IsTemplate && v.Name == \"{template_name}\");\n\nif (activeView != null && viewTemplate != null)\n{\n    activeView.ViewTemplateId = viewTemplate.Id;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Generate a report with the area of all rooms in the project."}, {"role": "assistant", "content": "List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nList<double> roomAreas = new List<double>();\nforeach (Room room in rooms)\n{\n    if (room != null && room.Area > 0)\n    {\n        roomAreas.Add(UnitUtils.ConvertFromInternalUnits(room.Area, UnitTypeId.SquareMeters));\n    }\n}\n// The orchestrator can now use the 'roomAreas' list to generate the final report."}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea {num_grids} ejes horizontales separados por {separation_m} metros."}, {"role": "assistant", "content": "double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i < {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade un punto de referencia en las coordenadas (7,4,3) dentro del editor de familias."}, {"role": "assistant", "content": "if(doc.IsFamilyDocument)\n{\n    doc.FamilyCreate.NewReferencePoint(new XYZ(7,4,3));\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva hoja con el número '{sheet_number}' y nombre '{sheet_name}'."}, {"role": "assistant", "content": "FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"{sheet_name}\";\n        sheet.SheetNumber = \"{sheet_number}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un DirectShape esférico con un radio de {radius_m} metros."}, {"role": "assistant", "content": "double radius = {radius_m} / 0.3048;\nList<GeometryObject> solids = new List<GeometryObject>();\nFrame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\nArc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\nLine line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\nCurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\nSolid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\nsolids.Add(sphere);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(solids);\n    ds.Name = \"Esfera DirectShape\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an extrusion roof with an arc profile."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create {num_grids} horizontal grids spaced {separation_m} meters apart."}, {"role": "assistant", "content": "double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i < {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Apply the 'X-Ray' visual style to the active 3D view."}, {"role": "assistant", "content": "View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe; // Simulates 'X-Ray' effect\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nota de texto con el contenido '{content}' y una flecha apuntando a un elemento seleccionado."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference target = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para anotar\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (target != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    opts.HorizontalAlignment = HorizontalTextAlignment.Left;\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{content}\", opts);\n    if (note != null)\n    {\n        Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n        leader.End = target.GlobalPoint;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén el elemento anfitrión de la primera ventana que encuentres."}, {"role": "assistant", "content": "FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Modela un barandal en una escalera existente."}, {"role": "assistant", "content": "RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls with the comment '{comment}'."}, {"role": "assistant", "content": "ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"{comment}\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create {num_worksets} worksets for engineering disciplines."}, {"role": "assistant", "content": "List<string> worksetNames = new List<string> {{ \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén todas las subcategorías de la categoría {buit_in_category_enum}."}, {"role": "assistant", "content": "Category targetCategory = doc.Settings.Categories.get_Item(BuiltInCategory.{buit_in_category_enum});\nCategoryNameMap subcategories = targetCategory.SubCategories;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the sill height of all windows to {sill_height_mm}mm."}, {"role": "assistant", "content": "double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una cota de elevación en una cara y un punto de vista dados."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara superior del suelo\");\n\nView activeView = doc.ActiveView;\n\nif (faceRef != null && activeView != null)\n{\n    XYZ pointOnFace = faceRef.GlobalPoint;\n    XYZ leaderEnd = pointOnFace + new XYZ(1 / 0.3048, 1 / 0.3048, 0);\n    doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Exporta cada tabla de planificación a un archivo CSV individual."}, {"role": "assistant", "content": "string exportPath = \"C:/RevitExports/\";\nList<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => !vs.IsTemplate).ToList();\nViewScheduleExportOptions options = new ViewScheduleExportOptions();\noptions.FieldDelimiter = \",\";\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Export(exportPath, schedule.Name + \".csv\", options);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add a reference point at coordinates (7,4,3) inside the family editor."}, {"role": "assistant", "content": "if(doc.IsFamilyDocument)\n{\n    doc.FamilyCreate.NewReferencePoint(new XYZ(7,4,3));\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Copy all walls from {source_level} to {target_level}."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Copy Walls\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{source_level}\");\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{target_level}\");\n\n    if (level1 != null && level2 != null)\n    {\n        ICollection<ElementId> wallsToCopy = new FilteredElementCollector(doc, level1.Id).OfClass(typeof(Wall)).Select(e => e.Id).ToList();\n        double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n        XYZ translation = new XYZ(0, 0, elevationDiff);\n        if (wallsToCopy.Count > 0)\n        {\n            ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea {num_grids} ejes horizontales separados por {separation_m} metros."}, {"role": "assistant", "content": "double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i < {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place a piece of furniture at coordinates (7,4)."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    if(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0), furnitureSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Oculta todas las categorías de anotación en la vista activa."}, {"role": "assistant", "content": "Categories categories = doc.Settings.Categories;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    foreach(Category cat in categories)\n    {\n        if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(activeView))\n        {\n             activeView.SetCategoryHidden(cat.Id, true);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea {num_worksets} worksets para las disciplinas de ingeniería."}, {"role": "assistant", "content": "List<string> worksetNames = new List<string> {{ \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add a horizontal reference plane named '{plane_name}'."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    XYZ bubbleEnd = new XYZ(0, 10, 0);\n    XYZ freeEnd = new XYZ(10, 10, 0);\n    XYZ cutVec = XYZ.BasisZ;\n    ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n    if (rp != null)\n    {\n        rp.Name = \"{plane_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Import a georeferenced survey from a LandXML file."}, {"role": "assistant", "content": "IList<XYZ> points = new List<XYZ>();\npoints.Add(new XYZ(0, 0, 0));\npoints.Add(new XYZ(50, 0, 5));\npoints.Add(new XYZ(0, 50, 10));\nTopographySurface.Create(doc, points);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Generate a {rows}x{cols} column grid with 6-meter spacing."}, {"role": "assistant", "content": "FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n    for(int i=0; i<{rows}; i++)\n    {\n        for(int j=0; j<{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change the type of a selected floor to '{new_type_name}'."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"{new_type_name}\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva revisión con descripción '{description}', emitida por '{issued_by}' en la fecha '{date}' y aplícala a la hoja activa."}, {"role": "assistant", "content": "Revision rev = Revision.Create(doc);\nViewSheet sheet = doc.ActiveView as ViewSheet;\n\nif (rev != null && sheet != null)\n{\n    rev.Description = \"{description}\";\n    rev.RevisionDate = \"{date}\";\n    rev.IssuedBy = \"{issued_by}\";\n    \n    ICollection<ElementId> revisions = sheet.GetAdditionalRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the 'Comments' parameter for all doors on Nivel 1 to 'APROBADO'."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"APROBADO\");\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén el tipo de sistema de una tubería seleccionada."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona una tubería\");\n\nPipingSystemType systemType = null;\nif (pickedRef != null)\n{\n    Pipe pipe = doc.GetElement(pickedRef.ElementId) as Pipe;\n    if (pipe != null)\n    {\n        Parameter systemTypeParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        if (systemTypeParam != null && systemTypeParam.HasValue)\n        {\n            systemType = doc.GetElement(systemTypeParam.AsElementId()) as PipingSystemType;\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva vista de alzado mirando al sur."}, {"role": "assistant", "content": "ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null && activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 0);\n        if (aev != null)\n        {\n            aev.Name = \"Alzado Sur\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Carga la familia '{family_name}.rfa' y colócala en (2,3,0) en el First Floor."}, {"role": "assistant", "content": "string familyPath = \"C:/Rutas/Comunes/{family_name}.rfa\";\nFamily deskFamily = null;\nbool familyLoaded = doc.LoadFamily(familyPath, out deskFamily);\n\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"First Floor\") as Level;\n\nif (familyLoaded && deskFamily != null && level1 != null)\n{\n    FamilySymbol deskSymbol = doc.GetElement(deskFamily.GetFamilySymbolIds().FirstOrDefault()) as FamilySymbol;\n    if (deskSymbol != null)\n    {\n        if (!deskSymbol.IsActive) deskSymbol.Activate();\n        XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0);\n        doc.Create.NewFamilyInstance(point, deskSymbol, level1, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca postes de iluminación cada 10m en un camino de 100m."}, {"role": "assistant", "content": "FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a curtain wall 0.9 meters wide and 2.8 meters high."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters), 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls that have no base level assigned."}, {"role": "assistant", "content": "ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el tipo de una losa por uno que contenga 'Wood Joist 10\"'."}, {"role": "assistant", "content": "Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Wood Joist 10\"\"));\n\nif (floorToChange != null && newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Export the geometry of a selected element to an SAT file."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element to export\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        string folderPath = \"C:/RevitExports/\";\n        string fileName = elem.Name + \".sat\";\n        SATExportOptions options = new SATExportOptions();\n        doc.Export(folderPath, fileName, new List<ElementId>{{elem.Id}}, options);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Temporarily isolate all furniture in the active view."}, {"role": "assistant", "content": "ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an axonometric 3D view oriented to the Northwest."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(-1, 1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(1, -1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = \"3D View Northwest\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un pilar del tipo 'Pilar 30x60' en cada intersección de la rejilla."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Pilar 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Draw a filled region with a diagonal pattern."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nFillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast<FillPatternElement>().FirstOrDefault(p => !p.GetFillPattern().IsSolidFill);\n\nif (activeView != null && fillPattern != null)\n{\n    FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n    if (filledRegionType != null)\n    {\n        FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n        if (newType != null)\n        {\n            newType.ForegroundPatternId = fillPattern.Id;\n            XYZ p1 = new XYZ(0,0,0);\n            XYZ p2 = new XYZ(5 / 0.3048,0,0);\n            XYZ p3 = new XYZ(5 / 0.3048,5 / 0.3048,0);\n            XYZ p4 = new XYZ(0,5 / 0.3048,0);\n            CurveLoop profile = new CurveLoop();\n            profile.Append(Line.CreateBound(p1,p2));\n            profile.Append(Line.CreateBound(p2,p3));\n            profile.Append(Line.CreateBound(p3,p4));\n            profile.Append(Line.CreateBound(p4,p1));\n            FilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop>{profile});\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Check if a pipe is connected at both ends."}, {"role": "assistant", "content": "Pipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nbool isFullyConnected = false;\n\nif (pipe != null)\n{\n    isFullyConnected = pipe.ConnectorManager.UnusedConnectors.IsEmpty;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place lighting posts every 6m along a 100m path."}, {"role": "assistant", "content": "FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place a piece of furniture at coordinates (7,4)."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    if(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0), furnitureSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a structural beam between (0,0,0) and (10,0,0) on Nivel 1."}, {"role": "assistant", "content": "FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, 0);\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(0, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a text note with text '{note_text}', given location, and target element."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{note_text}\", opts);\n    if (note != null)\n    {\n        note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L).End = targetRef.GlobalPoint;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade un nivel llamado 'L01' a 4.0 metros."}, {"role": "assistant", "content": "double elevation = UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"L01\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all doors on level 'Level 1' that belong to the '{family_name}' family."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nList<Element> doors = new List<Element>();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea {num_grids} ejes en sentido vertical separados {separation_m} metros."}, {"role": "assistant", "content": "double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i=0; i<{num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo material llamado '{material_name}' con color ({color_r}, {color_g}, {color_b}) y transparencia de {transparency_percent}%."}, {"role": "assistant", "content": "ElementId materialId = Material.Create(doc, \"{material_name}\");\n\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color({color_r}, {color_g}, {color_b});\n        material.Transparency = {transparency_percent};\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de los nombres de todos los materiales."}, {"role": "assistant", "content": "List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca un mueble en las coordenadas (7,4)."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    if(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0), furnitureSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nivel 'First Floor' a 3.5m."}, {"role": "assistant", "content": "string levelName = \"First Floor\";\ndouble elev = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un techo por extrusión con un perfil en arco."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Model a ceiling at a height of 3.15 meters on Level 1."}, {"role": "assistant", "content": "CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (ceilingType != null && level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,0,0)));\n\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{{profile}}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters));\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una cota de elevación en una cara y un punto de vista dados."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara superior del suelo\");\n\nView activeView = doc.ActiveView;\n\nif (faceRef != null && activeView != null)\n{\n    XYZ pointOnFace = faceRef.GlobalPoint;\n    XYZ leaderEnd = pointOnFace + new XYZ(1 / 0.3048, 1 / 0.3048, 0);\n    doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista de plano de plafón reflejado para el Basement."}, {"role": "assistant", "content": "string levelName = \"Basement\";\nstring viewName = \"Plano de Plafón Basement\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade una etiqueta a la columna más cercana al origen."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n    LocationPoint lp = c.Location as LocationPoint;\n    return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n}).FirstOrDefault();\n\nif (activeView != null && column != null)\n{\n    LocationPoint loc = column.Location as LocationPoint;\n    if (loc != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Import a georeferenced survey from a LandXML file."}, {"role": "assistant", "content": "// The Revit API in the provided context does not support direct LandXML import.\n// This functionality typically requires additional add-ins like the Site Designer, which are not available here.\n// As a placeholder, this code will show how to create a simple topography surface from a list of points.\nusing(Transaction t = new Transaction(doc, \"Create Topography\"))\n{\n    t.Start();\n    IList<XYZ> points = new List<XYZ>();\n    points.Add(new XYZ(0, 0, 0));\n    points.Add(new XYZ(50, 0, 5));\n    points.Add(new XYZ(0, 50, 10));\n    TopographySurface.Create(doc, points);\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva hoja con número '{sheet_number}' y nombre '{sheet_name}' usando el primer cajetín disponible."}, {"role": "assistant", "content": "FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"{sheet_name}\";\n        sheet.SheetNumber = \"{sheet_number}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rota un elemento seleccionado 30 grados sobre su eje Z."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, 30 * Math.PI / 180.0);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Desune la geometría de dos elementos seleccionados."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer elemento\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo elemento\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new Level named 'Level 2' at an elevation of -3.0 meters."}, {"role": "assistant", "content": "double elevation = UnitUtils.ConvertToInternalUnits(-3.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 2\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las vistas de planta del proyecto."}, {"role": "assistant", "content": "List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Hide all walls shorter than 5.0 meters."}, {"role": "assistant", "content": "double lengthThreshold = UnitUtils.ConvertToInternalUnits(5.0, UnitTypeId.Meters);\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nList<ElementId> shortWallIds = new List<ElementId>();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    foreach(Wall wall in walls)\n    {\n        Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n        if(lengthParam != null && lengthParam.HasValue && lengthParam.AsDouble() < lengthThreshold)\n        {\n            shortWallIds.Add(wall.Id);\n        }\n    }\n    if (shortWallIds.Count > 0)\n    {\n        activeView.HideElements(shortWallIds);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Muestra un cuadro de diálogo con opciones 'Sí' y 'No'."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todos los muros que no tienen nivel base asignado."}, {"role": "assistant", "content": "ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Export the current 3D view to NWC for Navisworks."}, {"role": "assistant", "content": "View3D view3d = doc.ActiveView as View3D;\n\nif (view3d != null)\n{\n    string folderPath = \"C:/RevitExports/\";\n    string fileName = view3d.Name + \".nwc\";\n    NavisworksExportOptions options = new NavisworksExportOptions();\n    options.ExportScope = NavisworksExportScope.View;\n    options.ViewId = view3d.Id;\n    doc.Export(folderPath, fileName, options);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the sill height of all windows to {sill_height_mm}mm."}, {"role": "assistant", "content": "double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un muro del tipo 'Generic - 200mm' en el 'Basement' desde (0,0) hasta (10,0)."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Basement\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Generic - 200mm\") as WallType;\nXYZ startPoint = new XYZ(0, 0, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(0, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nWall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén todas las instancias de la categoría Mobiliario."}, {"role": "assistant", "content": "List<Element> furnitureInstances = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un pilar del tipo 'W-Wide Flange-Column' en cada intersección de la rejilla."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"W-Wide Flange-Column\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las familias de anotación."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todos los muros con más de 3.0 metros de altura."}, {"role": "assistant", "content": "double heightThreshold = UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de muro '{type_name}' con un grosor de 25cm."}, {"role": "assistant", "content": "WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, (25 * 10) / 304.8);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Tag all rooms with their area."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(locPoint.Point.X, locPoint.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 10cm '{type_name}' type and then create a wall of that type."}, {"role": "assistant", "content": "WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 10 / 100 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las familias de anotación."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a beam system on a selected floor slab."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Desune la geometría de dos elementos dados."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona el primer elemento\");\nReference ref2 = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona el segundo elemento\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all doors on level 'Level 2' that belong to the '{family_name}' family."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nList<Element> doors = new List<Element>();\n\nif (level != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    FilterableValueProvider provider = new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM));\n    FilterStringRuleEvaluator evaluator = new FilterStringEquals();\n    FilterRule famNameRule = new FilterStringRule(provider, evaluator, \"{family_name}\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera un reporte con el área de todas las habitaciones del proyecto."}, {"role": "assistant", "content": "List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {text_size_mm}mm text type in blue color."}, {"role": "assistant", "content": "string newTypeName = \"{text_size_mm}mm Blue\";\nTextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\n\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n        \n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly) lineColorParam.Set(255);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Ajusta la altura del antepecho de todas las ventanas a 2.8 metro(s)."}, {"role": "assistant", "content": "double sillHeight = 2.8 / 0.3048;\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las vistas que no tienen una plantilla de vista asignada."}, {"role": "assistant", "content": "List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a text note with text '{note_text}', given location, and target element."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{note_text}\", opts);\n    if (note != null)\n    {\n        note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L).End = targetRef.GlobalPoint;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change the type of a selected floor to '{new_type_name}'."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"{new_type_name}\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade un nivel llamado 'Roof' a 4.0 metros."}, {"role": "assistant", "content": "double elevation = UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Roof\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place all selected elements on the '{workset_name}' workset."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"{workset_name}\");\n        if(workset == null) workset = Workset.Create(doc, \"{workset_name}\");\n\n        if (selectedIds != null && selectedIds.Count > 0 && workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null && !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 'Exterior - Brick on Mtl. Stud' wall on 'Basement' from (0,0) to (10,0)."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Basement\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Exterior - Brick on Mtl. Stud\") as WallType;\nXYZ startPoint = new XYZ(0, 0, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(0, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nif (level != null && wallType != null)\n{\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the IDs of all 3D views starting with '{prefix}' for export."}, {"role": "assistant", "content": "List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"{prefix}\") && !v.IsTemplate).Select(v => v.Id).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén el espacio MEP asociado a la habitación '{room_name}'."}, {"role": "assistant", "content": "Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Cast<Room>().FirstOrDefault(r => r.Name == \"{room_name}\");\nList<Space> spaces = new List<Space>();\n\nif (room != null)\n{\n    spaces = new FilteredElementCollector(doc).OfClass(typeof(Space)).Cast<Space>().Where(s => s.Room != null && s.Room.Id == room.Id).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dentro del editor de familias, crea un nuevo plano de referencia horizontal llamado '{plane_name}'."}, {"role": "assistant", "content": "XYZ start = new XYZ(UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0, 0);\nXYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0);\nXYZ normal = XYZ.BasisY;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = \"{plane_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un muro en el L01 que vaya de (0,0,0) a (10,0,0) con una altura de 3.15 metros."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"L01\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(0, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(0, UnitTypeId.Meters));\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a roof by footprint on the 'Basement'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Basement\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 / 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,0,0), new XYZ(20 / 0.3048,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,30 / 0.3048,0), new XYZ(0,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 / 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 20cm '{type_name}' type and then create a wall of that type."}, {"role": "assistant", "content": "WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 20 / 100 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new schedule for Structural Columns."}, {"role": "assistant", "content": "string scheduleName = \"Structural Column Schedule\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all views that do not have an assigned view template."}, {"role": "assistant", "content": "List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Verifica si una tubería está conectada en ambos extremos."}, {"role": "assistant", "content": "Pipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nbool isFullyConnected = false;\n\nif (pipe != null)\n{\n    isFullyConnected = pipe.ConnectorManager.UnusedConnectors.IsEmpty;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new level named 'Level 1' at an elevation of 4.0 meters."}, {"role": "assistant", "content": "string levelName = \"Level 1\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add the 'Level', 'Mark', and 'Volume' fields to the column schedule."}, {"role": "assistant", "content": "ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Assign the '{material_name}' material to the first layer of a wall type."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Assign Material\"))\n{\n    t.Start();\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.GetCompoundStructure() != null);\n    Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name.Contains(\"{material_name}\"));\n\n    if (wallType != null && material != null)\n    {\n        CompoundStructure cs = wallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetMaterialId(0, material.Id);\n            wallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aísla temporalmente los elementos seleccionados en la vista activa."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToIsolate = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToIsolate.Count > 0)\n{\n    activeView.IsolateElementsTemporary(idsToIsolate);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Ajusta la región de recorte de la vista a un rectángulo de (0,0) a (10,0)."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Adjust Crop Region\"))\n{\n    t.Start();\n    View view = doc.ActiveView;\n\n    if (view != null && view.CropBoxActive)\n    {\n        BoundingBoxXYZ cropBox = view.CropBox;\n        if (cropBox != null)\n        {\n            XYZ minPoint = new XYZ(0 / 0.3048, 0 / 0.3048, cropBox.Min.Z);\n            XYZ maxPoint = new XYZ(10 / 0.3048, 0 / 0.3048, cropBox.Max.Z);\n            cropBox.Min = minPoint;\n            cropBox.Max = maxPoint;\n            view.CropBox = cropBox;\n            view.CropBoxVisible = true;\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a roof by footprint on the 'Azotea'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Azotea\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 / 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,0,0), new XYZ(20 / 0.3048,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,30 / 0.3048,0), new XYZ(0,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 / 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén la geometría sólida de un elemento seleccionado."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para obtener su geometría\");\n\nList<Solid> solids = new List<Solid>();\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        Options opt = new Options() {{ ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine }};\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if (geoElem != null)\n        {\n            solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place the '{view_name}' view in the center of the active sheet."}, {"role": "assistant", "content": "ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"{view_name}\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null && activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) / 2, (sheetBox.Min.V + sheetBox.Max.V) / 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Calcula el área total de todas las habitaciones."}, {"role": "assistant", "content": "double totalArea = 0.0;\nList<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nforeach (Room room in rooms)\n{\n    totalArea += room.Area;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Etiqueta todas las habitaciones con su área."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Tag All Rooms\"))\n{\n    t.Start();\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n        foreach(Room room in rooms)\n        {\n            LocationPoint locPoint = room.Location as LocationPoint;\n            if(locPoint != null)\n            {\n                doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(locPoint.Point.X, locPoint.Point.Y), activeView.Id);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a wall on Basement from (5,5,3) to (15,5,3) with a height of 2.8 meters."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Basement\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(5, 5, 3);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an electrical circuit connecting light fixtures to a panel."}, {"role": "assistant", "content": "FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nList<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\nif (panel != null && fixtureIds.Count > 0)\n{\n    ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n    if(electricalSystem != null)\n    {\n        electricalSystem.SelectPanel(panel);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea {num_grids} ejes horizontales separados por {separation_m} metros."}, {"role": "assistant", "content": "double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i < {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un techo por extrusión con un perfil en arco."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Acota la longitud de un muro seleccionado por el usuario."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un muro para acotar\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra un muro buscando el valor '{mark_value}' en su parámetro de Marca."}, {"role": "assistant", "content": "string markValue = \"{mark_value}\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue);\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().WherePasses(filter).FirstOrDefault() as Wall;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Inserta un terminal de aire en el extremo de un conducto."}, {"role": "assistant", "content": "Duct duct = new FilteredElementCollector(doc).OfClass(typeof(Duct)).FirstOrDefault() as Duct;\nFamilySymbol terminalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctTerminal).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (duct != null && terminalSymbol != null)\n{\n    if(!terminalSymbol.IsActive) terminalSymbol.Activate();\n    LocationCurve locCurve = duct.Location as LocationCurve;\n    if (locCurve != null)\n    {\n        Connector endConnector = duct.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault(c => c.Origin.IsAlmostEqualTo(locCurve.Curve.GetEndPoint(1)));\n        if (endConnector != null)\n        {\n            doc.Create.NewFamilyInstance(endConnector.Origin, terminalSymbol, endConnector);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una etiqueta de material en una cara de muro."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Face, \"Selecciona una cara para etiquetar\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Selecciona la ubicación de la etiqueta\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de muro de {width_cm}cm llamado 'Exterior - Brick on Mtl. Stud'."}, {"role": "assistant", "content": "string newTypeName = \"Exterior - Brick on Mtl. Stud\";\nWallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (wallTypeToDuplicate != null)\n{\n    WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n        cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n        cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits({width_cm} / 100.0, UnitTypeId.Meters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una apertura de hueco (shaft) que atraviese desde el {bottom_level_name} al {top_level_name}."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{bottom_level_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{top_level_name}\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    XYZ p1 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p2 = new XYZ(8 / 0.3048, 5 / 0.3048,0);\n    XYZ p3 = new XYZ(8 / 0.3048, 8 / 0.3048,0);\n    XYZ p4 = new XYZ(5 / 0.3048, 8 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de los nombres de todos los tipos de familia de la categoría {built_in_category_enum}."}, {"role": "assistant", "content": "List<Element> elementTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.{built_in_category_enum}).WhereElementIsElementType().ToList();\nList<string> typeNames = new List<string>();\nforeach(Element type in elementTypes)\n{\n    typeNames.Add(type.Name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new Ribbon panel named '{panel_name}' with a button."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place an instance of the '{family_name}' family in the center of the '{room_name}' room."}, {"role": "assistant", "content": "Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"{room_name}\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"{family_name}\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva tabla de planificación para Pilares Estructurales."}, {"role": "assistant", "content": "string scheduleName = \"Tabla de Pilares Estructurales\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade montantes a todas las líneas de rejilla de un muro cortina."}, {"role": "assistant", "content": "Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\n\nif (curtainWall != null && mullionType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    if (grid != null)\n    {\n        foreach (ElementId gridLineId in grid.GetVGridLineIds())\n        {\n            CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n            if(line != null) line.AddMullions(mullionType, false);\n        }\n        foreach (ElementId gridLineId in grid.GetUGridLineIds())\n        {\n            CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n            if(line != null) line.AddMullions(mullionType, false);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un muro en Roof que vaya de (0,0,0) a (10,0,0) con una altura de 3.0 metros."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Roof\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0);\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a structural beam between (5,5,3) and (15,5,3) on Level 2."}, {"role": "assistant", "content": "FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(5, 5, 3);\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las familias de anotación y cuenta cuántas hay."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\nint count = annotationFamilies.Count;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera un reporte con el área de todas las habitaciones del proyecto."}, {"role": "assistant", "content": "List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un workset llamado '{workset_name}'."}, {"role": "assistant", "content": "Workset.Create(doc, \"{workset_name}\");"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all views that do not have an assigned view template."}, {"role": "assistant", "content": "List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId.Equals(ElementId.InvalidElementId)).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Mueve el punto base del proyecto {distance_m} metros hacia el norte."}, {"role": "assistant", "content": "BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\nif (projectBasePoint != null)\n{\n    XYZ translation = new XYZ(0, {distance_m} / 0.3048, 0);\n    ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las familias de anotación."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all subcategories from the Walls category."}, {"role": "assistant", "content": "Category wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategoryNameMap subcategories = wallCat.SubCategories;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change the type of a floor to one that contains 'Suelo Hormigón 30cm'."}, {"role": "assistant", "content": "Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Suelo Hormigón 30cm\"));\n\nif (floorToChange != null && newType != null)\n{\n    floorToChange.ChangeTypeId(newType.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Activate all FamilySymbols in the project."}, {"role": "assistant", "content": "List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (FamilySymbol sym in symbols)\n{\n    if (!sym.IsActive)\n    {\n        sym.Activate();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Display a dialog box with 'Yes', 'No', and 'Cancel' options."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a structural beam between (0,0,0) and (10,0,0) on Nivel 1."}, {"role": "assistant", "content": "FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, 0);\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(0, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una columna estructural en la posición X=7, Y=4."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Temporarily isolate the selected elements in the active view."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToIsolate = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToIsolate.Count > 0)\n{\n    activeView.IsolateElementsTemporary(idsToIsolate);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Generate a {rows}x{cols} column grid with 6-meter spacing."}, {"role": "assistant", "content": "FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n    for(int i=0; i<{rows}; i++)\n    {\n        for(int j=0; j<{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un suelo con un hueco circular de radio {radius_m}m en el centro."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    XYZ p1 = new XYZ(-10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p2 = new XYZ(10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p3 = new XYZ(10 / 0.3048, 10 / 0.3048, 0);\n    XYZ p4 = new XYZ(-10 / 0.3048, 10 / 0.3048, 0);\n    CurveLoop outerLoop = new CurveLoop();\n    outerLoop.Append(Line.CreateBound(p1, p2));\n    outerLoop.Append(Line.CreateBound(p2, p3));\n    outerLoop.Append(Line.CreateBound(p3, p4));\n    outerLoop.Append(Line.CreateBound(p4, p1));\n\n    XYZ center = XYZ.Zero;\n    double radius = {radius_m} / 0.3048;\n    CurveLoop innerLoop = new CurveLoop();\n    innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n    innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n    Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva habitación en el Planta Baja en el punto (2, 3)."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Planta Baja\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Room room = doc.Create.NewRoom(level1, point);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Define a view filter named '{filter_name}' to hide detail lines."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection<ElementId> catsToHide = new List<ElementId>{new ElementId(BuiltInCategory.OST_Lines)};\n    ElementFilter filter = new ElementCategoryFilter(new ElementId(BuiltInCategory.OST_Lines));\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"{filter_name}\", catsToHide, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera un reporte con el área de todas las habitaciones del proyecto."}, {"role": "assistant", "content": "List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all annotation families and count how many there are."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\nint count = annotationFamilies.Count;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo material llamado '{material_name}' y asígnale un color base y una transparencia."}, {"role": "assistant", "content": "string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 'Pilar 30x60' column at each grid intersection."}, {"role": "assistant", "content": "FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Pilar 30x60\");\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\nif (columnSymbol != null && level != null)\n{\n    if (!columnSymbol.IsActive) columnSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                if (results != null && !results.IsEmpty)\n                {\n                    foreach (IntersectionResult ir in results)\n                    {\n                        doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                    }\n                }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add reinforcement to a column."}, {"role": "assistant", "content": "RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de cota lineal llamado '{type_name}' con texto azul y tamaño {text_size_mm}mm."}, {"role": "assistant", "content": "DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\nif (linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"{type_name}\") as DimensionType;\n    if (newDimType != null)\n    {\n        Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n        Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nivel 'First Floor' a 3.5m."}, {"role": "assistant", "content": "string levelName = \"First Floor\";\ndouble elev = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the IDs of all 3D views starting with '{prefix}' for export."}, {"role": "assistant", "content": "List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"{prefix}\") && !v.IsTemplate).Select(v => v.Id).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una dimensión radial para un muro curvo."}, {"role": "assistant", "content": "Wall curvedWall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.Location is LocationCurve && (w.Location as LocationCurve).Curve is Arc);\nView activeView = doc.ActiveView;\n\nif (curvedWall != null && activeView != null)\n{\n    LocationCurve locCurve = curvedWall.Location as LocationCurve;\n    if (locCurve != null)\n    {\n        Arc arc = locCurve.Curve as Arc;\n        if (arc != null)\n        {\n            ReferenceArray refArray = new ReferenceArray();\n            refArray.Append(arc.Reference);\n            doc.Create.NewDimension(activeView, Line.CreateBound(arc.Center, arc.GetEndPoint(0)), refArray);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all rooms on Nivel 1."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nList<Element> roomsOnLevel = new List<Element>();\n\nif (level != null)\n{\n    roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level.Id).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an extrusion roof with an arc profile."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Extrusion Roof\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (level != null && roofType != null && doc.ActiveView != null)\n    {\n        CurveArray profile = new CurveArray();\n        profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n        Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n        ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n        if(refPlane != null)\n            doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén la tabla de planificación '{schedule_name}' y exporta sus datos a '{folder_path}{file_name}'."}, {"role": "assistant", "content": "ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s=>s.Name==\"{schedule_name}\");\n\nif (schedule != null)\n{\n    string folderPath = \"{folder_path}\";\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(folderPath, \"{file_name}\", options);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 'Pilar 30x60' column at each grid intersection."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Pilar 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the 'Comments' parameter for all doors on Roof to 'APROBADO'."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Roof\") as Level;\n\nif (level1 != null)\n{\n    List<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"APROBADO\");\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Adjust the view's crop region to a rectangle from ({x1},{y1}) to ({x2},{y2})."}, {"role": "assistant", "content": "View view = doc.ActiveView;\n\nif (view != null && view.CropBoxActive)\n{\n    BoundingBoxXYZ cropBox = view.CropBox;\n    if (cropBox != null)\n    {\n        XYZ minPoint = new XYZ({x1} / 0.3048, {y1} / 0.3048, cropBox.Min.Z);\n        XYZ maxPoint = new XYZ({x2} / 0.3048, {y2} / 0.3048, cropBox.Max.Z);\n        cropBox.Min = minPoint;\n        cropBox.Max = maxPoint;\n        view.CropBox = cropBox;\n        view.CropBoxVisible = true;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una losa de cimentación de 0.9x3.15 metros."}, {"role": "assistant", "content": "Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n\nif (foundationLevel != null && slabType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(0.9/0.3048, 0, 0);\n    XYZ p3 = new XYZ(0.9/0.3048, 3.15/0.3048, 0);\n    XYZ p4 = new XYZ(0, 3.15/0.3048, 0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Ajusta todas las ventanas para que tengan la altura del antepecho a {sill_height_mm}mm."}, {"role": "assistant", "content": "double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a text note with content '{content}' and a leader pointing to a selected element."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference target = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (target != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    opts.HorizontalAlignment = HorizontalTextAlignment.Left;\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{content}\", opts);\n    if (note != null)\n    {\n        Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n        leader.End = target.GlobalPoint;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the sill height of all windows to {sill_height_mm}mm."}, {"role": "assistant", "content": "double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un Path of Travel entre los puntos ({x1},{y1}) y ({x2},{y2}) en la vista de planta."}, {"role": "assistant", "content": "ViewPlan viewPlan = doc.ActiveView as ViewPlan;\n\nif (viewPlan != null && viewPlan.ViewType == ViewType.FloorPlan)\n{\n    ElementId levelId = viewPlan.get_Parameter(BuiltInParameter.PLAN_VIEW_LEVEL).AsElementId();\n    Level level = doc.GetElement(levelId) as Level;\n    if (level != null)\n    {\n        XYZ startPoint = new XYZ({x1} / 0.3048, {y1} / 0.3048, level.Elevation);\n        XYZ endPoint = new XYZ({x2} / 0.3048, {y2} / 0.3048, level.Elevation);\n        PathOfTravel.Create(viewPlan, startPoint, endPoint);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un grupo de detalles con los elementos de detalle seleccionados."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Detalle Típico 1\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de puerta llamado 'M_Single-Flush' y establece su resistencia al fuego a '{fire_rating}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"M_Single-Flush\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"{fire_rating}\");\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new level 'Level 2' at an elevation of 3.5 meters."}, {"role": "assistant", "content": "double elevation = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 2\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nivel 'Nivel 1' a -3.0m."}, {"role": "assistant", "content": "string levelName = \"Nivel 1\";\ndouble elev = UnitUtils.ConvertToInternalUnits(-3.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera un piso rectangular de 10×8 metros."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> {{ loop }}, floorType.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Import a georeferenced survey from a LandXML file."}, {"role": "assistant", "content": "IList<XYZ> points = new List<XYZ>();\npoints.Add(new XYZ(0, 0, 0));\npoints.Add(new XYZ(50, 0, 5));\npoints.Add(new XYZ(0, 50, 10));\nTopographySurface.Create(doc, points);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls that have no base level assigned."}, {"role": "assistant", "content": "ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las vistas de planta del proyecto."}, {"role": "assistant", "content": "List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Muestra un cuadro de diálogo con las opciones 'Sí', 'No' y 'Cancelar'."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new door type named 'Puerta 90x210' and set its fire rating to '{fire_rating}'."}, {"role": "assistant", "content": "string newTypeName = \"Puerta 90x210\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = null;\nif (doorTypeToDuplicate != null)\n{\n    newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating}\");\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the visibility of the 'Furniture' category to false in the active view."}, {"role": "assistant", "content": "Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nView activeView = doc.ActiveView;\n\nif (furnitureCat != null && activeView != null)\n{\n    activeView.SetCategoryHidden(furnitureCat.Id, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new wall type '{type_name}' with a thickness of 10cm."}, {"role": "assistant", "content": "WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            if (coreLayerIndex >= 0 && coreLayerIndex < cs.LayerCount)\n            {\n                cs.SetLayerWidth(coreLayerIndex, (10 * 10) / 304.8);\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera una cuadrícula de columnas {rows}x{cols} con separación de 10 metros."}, {"role": "assistant", "content": "FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i=0; i<{rows}; i++)\n    {\n        for(int j=0; j<{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén la tabla de planificación '{schedule_name}' y exporta sus datos a '{folder_path}{file_name}'."}, {"role": "assistant", "content": "ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s=>s.Name==\"{schedule_name}\");\n\nif (schedule != null)\n{\n    string folderPath = \"{folder_path}\";\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(folderPath, \"{file_name}\", options);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a rectangular opening in a floor."}, {"role": "assistant", "content": "Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\n\nif (floor != null)\n{\n    XYZ p1 = new XYZ(1 / 0.3048, 1 / 0.3048, 0);\n    XYZ p2 = new XYZ(3 / 0.3048, 1 / 0.3048, 0);\n    XYZ p3 = new XYZ(3 / 0.3048, 3 / 0.3048, 0);\n    XYZ p4 = new XYZ(1 / 0.3048, 3 / 0.3048, 0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1, p2));\n    profile.Append(Line.CreateBound(p2, p3));\n    profile.Append(Line.CreateBound(p3, p4));\n    profile.Append(Line.CreateBound(p4, p1));\n    doc.Create.NewOpening(floor, profile, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new pipe type with {material_name} material."}, {"role": "assistant", "content": "string newTypeName = \"{material_name} Pipe\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"{material_name}\")) as Material;\n\nif (pipeTypeToDuplicate != null && material != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aplica la plantilla de vista '{template_name}' a la vista activa."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nView viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.IsTemplate && v.Name == \"{template_name}\");\n\nif (activeView != null && viewTemplate != null)\n{\n    activeView.ViewTemplateId = viewTemplate.Id;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create {num_grids} vertical grids spaced {separation_m} meters apart."}, {"role": "assistant", "content": "double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i=0; i<{num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplica el tipo de muro '{original_type_name}' y llámalo '{new_type_name}'."}, {"role": "assistant", "content": "WallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"{original_type_name}\");\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(\"{new_type_name}\") as WallType;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Exporta todas las hojas de un conjunto a un único PDF."}, {"role": "assistant", "content": "ViewSheetSet sheetSet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheetSet)).FirstOrDefault() as ViewSheetSet;\n\nif (sheetSet != null)\n{\n    string folderPath = \"C:/RevitExports/\";\n    PDFExportOptions options = new PDFExportOptions();\n    options.Combine = true;\n    options.FileName = sheetSet.Name;\n    List<ElementId> sheetIds = sheetSet.Views.Cast<ViewSheet>().Select(s => s.Id).ToList();\n    doc.Export(folderPath, sheetIds, options);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a group from the current selection and move it {distance_m} meters to the right."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    Group group = doc.Create.NewGroup(selectedIds);\n    if (group != null)\n    {\n        XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters), 0, 0);\n        ElementTransformUtils.MoveElement(doc, group.Id, translation);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an 15.0-meter long foundation beam."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(15.0, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Footing);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rota el norte del proyecto 90 grados en sentido horario."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInRadians = -(90 * Math.PI / 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Calculate the total length of all Supply Air ducts."}, {"role": "assistant", "content": "List<Duct> ducts = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctCurves).WhereElementIsNotElementType().Cast<Duct>().Where(d => d.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString() == \"SupplyAir\").ToList();\ndouble totalLength = 0.0;\nforeach (Duct d in ducts)\n{\n    totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén todas las habitaciones en el Nivel 'Roof'."}, {"role": "assistant", "content": "Level targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Roof\") as Level;\nList<Element> roomsOnLevel = new List<Element>();\n\nif (targetLevel != null)\n{\n    roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == targetLevel.Id).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add the 'Level', 'Mark', and 'Volume' fields to the column schedule."}, {"role": "assistant", "content": "ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the sill height of all windows to {sill_height_mm}mm."}, {"role": "assistant", "content": "double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un grupo de detalles con los elementos de detalle seleccionados."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Detalle Típico 1\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista 3D axonométrica orientada al Noroeste."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(-1, 1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(1, -1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = \"Vista 3D Noroeste\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all annotation families and count how many there are."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\nint count = annotationFamilies.Count;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the sill height of all windows to {sill_height_mm}mm."}, {"role": "assistant", "content": "double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the sill height of all windows to 2.8 meter(s)."}, {"role": "assistant", "content": "double sillHeight = 2.8 / 0.3048;\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add a horizontal grid line to a curtain wall at a height of 3.15 meters."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) / 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, 3.15 / 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade los campos 'Nivel', 'Marca' y 'Volumen' a la tabla de pilares."}, {"role": "assistant", "content": "ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\") || s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las familias de anotación."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Delete all detail lines in the active view."}, {"role": "assistant", "content": "if (doc.ActiveView != null)\n{\n    ICollection<ElementId> detailLines = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(DetailCurve)).ToElementIds();\n    if (detailLines.Count > 0)\n    {\n        doc.Delete(detailLines);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Move the project base point {distance_m} meters to the north."}, {"role": "assistant", "content": "BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\nif (projectBasePoint != null)\n{\n    XYZ translation = new XYZ(0, {distance_m} / 0.3048, 0);\n    ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Selecciona todos los muros del 'First Floor' y cambia su comentario a '{comment}'."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"First Floor\") as Level;\nif (level != null)\n{\n    List<Wall> wallsOnLevel = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level.Id).Cast<Wall>().ToList();\n    foreach(Wall wall in wallsOnLevel)\n    {\n        Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if (commentParam != null && !commentParam.IsReadOnly)\n        {\n            commentParam.Set(\"{comment}\");\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el nombre de la familia de una puerta seleccionada a '{new_family_name}'."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una puerta\");\n\nif (pickedRef != null)\n{\n    FamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (door != null && door.Symbol != null)\n    {\n        Family family = door.Symbol.Family;\n        if (family != null)\n        {\n            family.Name = \"{new_family_name}\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 'W-Wide Flange-Column' column at each grid intersection."}, {"role": "assistant", "content": "FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"W-Wide Flange-Column\");\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\nif (columnSymbol != null && level != null)\n{\n    if (!columnSymbol.IsActive) columnSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                if (results != null && !results.IsEmpty)\n                {\n                    foreach (IntersectionResult ir in results)\n                    {\n                        doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                    }\n                }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a detail group with the selected detail items."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Typical Detail 1\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a structural column at position X=7, Y=4."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Copy all walls from {source_level} to {target_level}."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Copy Walls\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{source_level}\");\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{target_level}\");\n\n    if (level1 != null && level2 != null)\n    {\n        ICollection<ElementId> wallsToCopy = new FilteredElementCollector(doc, level1.Id).OfClass(typeof(Wall)).Select(e => e.Id).ToList();\n        double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n        XYZ translation = new XYZ(0, 0, elevationDiff);\n        if (wallsToCopy.Count > 0)\n        {\n            ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nivel 'Basement' a -3.0m."}, {"role": "assistant", "content": "string levelName = \"Basement\";\ndouble elev = UnitUtils.ConvertToInternalUnits(-3.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\n\nif (newLevel != null)\n{\n    newLevel.Name = levelName;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create beams between horizontally aligned columns."}, {"role": "assistant", "content": "FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    if(!beamSymbol.IsActive) beamSymbol.Activate();\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Fill the material parameter of all walls with '{material_name}'."}, {"role": "assistant", "content": "Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"{material_name}\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a stair between {level1_name} and {level2_name}."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{level1_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{level2_name}\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    // TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    // Stairs creation requires using the StairsEditScope class.\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las familias y sus tipos."}, {"role": "assistant", "content": "List<string> familyAndTypeNames = new List<string>();\nList<Family> families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().ToList();\nforeach (Family fam in families)\n{\n    familyAndTypeNames.Add($\"Familia: {{fam.Name}}\");\n    foreach (ElementId symbolId in fam.GetFamilySymbolIds())\n    {\n        FamilySymbol sym = doc.GetElement(symbolId) as FamilySymbol;\n        if (sym != null)\n        {\n            familyAndTypeNames.Add($\"\\tTipo: {{sym.Name}}\");\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera una cuadrícula de columnas {rows}x{cols} con separación de 8 metros."}, {"role": "assistant", "content": "FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<{rows}; i++)\n    {\n        for(int j=0; j<{cols}; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Copia todos los elementos del {source_level} al {target_level}."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{source_level}\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{target_level}\") as Level;\n\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if (elementsToCopy.Count > 0)\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create {num_worksets} worksets for engineering disciplines."}, {"role": "assistant", "content": "List<string> worksetNames = new List<string> {{ \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una apertura de hueco vertical (shaft) desde el nivel base hasta el nivel más alto."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\nif (bottomLevel != null && topLevel != null)\n{\n    XYZ p1 = new XYZ(2 / 0.3048, 2 / 0.3048,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 2 / 0.3048,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(2 / 0.3048, 5 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una instancia de la familia '{family_name}' en el centro de la habitación '{room_name}'."}, {"role": "assistant", "content": "Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"{room_name}\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"{family_name}\") as FamilySymbol;\nif(furnitureSymbol != null && !furnitureSymbol.IsActive) furnitureSymbol.Activate();\nif(room != null)\n{\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null && furnitureSymbol != null && room.Level != null)\n    {\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 3D view with the section box enabled."}, {"role": "assistant", "content": "string viewName = \"3D View with Section Box\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un grupo de detalles con los elementos de detalle seleccionados."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    List<ElementId> detailIds = new List<ElementId>();\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null && elem.Category != null && elem.Category.CategoryType == CategoryType.Annotation)\n        {\n            detailIds.Add(id);\n        }\n    }\n\n    if (detailIds.Count > 0)\n    {\n        Group group = doc.Create.NewGroup(detailIds);\n        if (group != null)\n        {\n            group.Name = \"Detalle Típico 1\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista 3D con la caja de sección activada."}, {"role": "assistant", "content": "string viewName = \"Vista 3D con Caja de Sección\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    if (view3d != null)\n    {\n        view3d.Name = viewName;\n        view3d.IsSectionBoxActive = true;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén todos los muros del Nivel 1 que son estructurales."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> {{ levelFilter, categoryFilter, structuralFilter }});\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Sincroniza el modelo local con el central, añadiendo el comentario '{comment}'."}, {"role": "assistant", "content": "if (doc.IsWorkshared)\n{\n    TransactWithCentralOptions tco = new TransactWithCentralOptions();\n    SynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\n    swcOpts.Comment = \"{comment}\";\n    swcOpts.SaveLocalAfter = true;\n    doc.SynchronizeWithCentral(tco, swcOpts);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {sheet_size} sheet and place the '{view_name}' view on it."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Sheet\"))\n{\n    t.Start();\n    string sheetNumber = \"A-101\";\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"{sheet_size}\"));\n    View viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<View>().FirstOrDefault(v => v.Name == \"{view_name}\");\n\n    if (titleBlock != null && viewToPlace != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            newSheet.Name = \"Architectural Plan - {view_name}\";\n            newSheet.SheetNumber = sheetNumber;\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Exporta el modelo actual a un archivo NWC."}, {"role": "assistant", "content": "string folderPath = \"C:/exports/\";\nstring fileName = doc.Title + \".nwc\";\nNavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(folderPath, fileName, options);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Establece el parámetro 'Marca' de todos los muros seleccionados a '{mark_value}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Set Wall Mark\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n\n    if (selectedIds != null && selectedIds.Count > 0)\n    {\n        foreach(ElementId id in selectedIds)\n        {\n            Element elem = doc.GetElement(id);\n            if(elem is Wall)\n            {\n                Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n                if (markParam != null && !markParam.IsReadOnly) \n                {\n                    markParam.Set(\"{mark_value}\");\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place lighting posts every 6m along a 100m path."}, {"role": "assistant", "content": "FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todos los muros que no tienen nivel base asignado."}, {"role": "assistant", "content": "ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade una línea de rejilla horizontal a un muro cortina a 2.8 metros de altura."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Add Curtain Grid Line\"))\n{\n    t.Start();\n    Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.CurtainGrid != null);\n\n    if (cw != null)\n    {\n        CurtainGrid cg = cw.CurtainGrid;\n        if (cg != null)\n        {\n            LocationCurve locCurve = cw.Location as LocationCurve;\n            if(locCurve != null)\n            {\n                 XYZ startPoint = locCurve.Curve.GetEndPoint(0);\n                 XYZ endPoint = locCurve.Curve.GetEndPoint(1);\n                 XYZ midPoint = (startPoint + endPoint) / 2;\n                 XYZ gridLinePoint = new XYZ(midPoint.X, midPoint.Y, 2.8 / 0.3048);\n                 cg.AddGridLine(false, gridLinePoint, false);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Unjoin the geometry of two selected elements."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first element\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second element\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new linear dimension type named '{type_name}' with blue text and {text_size_mm}mm size."}, {"role": "assistant", "content": "DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\n\nif (linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"{type_name}\") as DimensionType;\n    if (newDimType != null)\n    {\n        Parameter colorParam = newDimType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (colorParam != null && !colorParam.IsReadOnly) colorParam.Set(255);\n        Parameter textSizeParam = newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly) textSizeParam.Set({text_size_mm} / 304.8);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Check if a pipe is connected at both ends."}, {"role": "assistant", "content": "Pipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nbool isFullyConnected = false;\n\nif (pipe != null)\n{\n    isFullyConnected = pipe.ConnectorManager.UnusedConnectors.IsEmpty;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Delete all detail lines in the active view."}, {"role": "assistant", "content": "if (doc.ActiveView != null)\n{\n    ICollection<ElementId> detailLines = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(DetailCurve)).ToElementIds();\n    if (detailLines.Count > 0)\n    {\n        doc.Delete(detailLines);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a section view using a 0.9x{depth_m}x3.15 meter box."}, {"role": "assistant", "content": "ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\n\nif (sectionVFT != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(0,0,0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({depth_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters));\n    Transform transform = Transform.Identity;\n    sectionBox.Transform = transform;\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls that have no base level assigned."}, {"role": "assistant", "content": "ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change the detail level of the current view to '{detail_level_enum}'."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.{detail_level_enum};\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nota de texto con el contenido '{content}' y una flecha apuntando a un elemento seleccionado."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference target = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para anotar\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (target != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    opts.HorizontalAlignment = HorizontalTextAlignment.Left;\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{content}\", opts);\n    if (note != null)\n    {\n        Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n        leader.End = target.GlobalPoint;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate the active view and name it '{view_name}'."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{view_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an assembly from the selected elements."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"New Assembly\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the sill height of all windows to {sill_height_m} meter."}, {"role": "assistant", "content": "double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_m}, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo panel en la cinta de opciones llamado '{panel_name}' con un botón."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Hide the selected elements in the active view."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToHide = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToHide.Count > 0)\n{\n    activeView.HideElements(idsToHide);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca todos los elementos seleccionados en el workset '{workset_name}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Assign to Workset\"))\n{\n    t.Start();\n    if(doc.IsWorkshared)\n    {\n        UIDocument localUidoc = uidoc;\n        ICollection<ElementId> selectedIds = localUidoc.Selection.GetElementIds();\n        \n        Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"{workset_name}\");\n        if(workset == null) workset = Workset.Create(doc, \"{workset_name}\");\n\n        if (selectedIds != null && selectedIds.Count > 0 && workset != null)\n        {\n            foreach(ElementId id in selectedIds)\n            {\n                Element elem = doc.GetElement(id);\n                Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n                if(wsparam != null && !wsparam.IsReadOnly) wsparam.Set(workset.Id.IntegerValue);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a grid of {num_horizontal} horizontal and {num_vertical} vertical grids, spaced 8 meters apart."}, {"role": "assistant", "content": "double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\nint count = {num_horizontal};\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ(({num_vertical} - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < {num_vertical}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change the type of a selected floor to '{new_type_name}'."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\n\nif (pickedRef != null)\n{\n    Floor floorToChange = doc.GetElement(pickedRef) as Floor;\n    FloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"{new_type_name}\");\n    \n    if (floorToChange != null && newType != null)\n    {\n        floorToChange.ChangeTypeId(newType.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new door type named 'Double-Glass' and set its fire rating to '{fire_rating_value}'."}, {"role": "assistant", "content": "FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"Double-Glass\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating_value}\");\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un tipo de muro '{type_name}' de 30cm y luego crea un muro de ese tipo."}, {"role": "assistant", "content": "WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 30 / 100 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new door type named 'Puerta 90x210' and set its fire rating to '{fire_rating}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"Puerta 90x210\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"{fire_rating}\");\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aísla temporalmente la categoría {built_in_category_enum} en la vista activa."}, {"role": "assistant", "content": "ElementId categoryId = new ElementId(BuiltInCategory.{built_in_category_enum});\nICollection<ElementId> categoryIds = new List<ElementId> { categoryId };\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateCategoriesTemporary(categoryIds);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo parámetro de proyecto compartido de texto llamado '{param_name}' para muros y puertas."}, {"role": "assistant", "content": "string originalFile = doc.Application.SharedParametersFilename;\nstring tempFile = System.IO.Path.GetTempFileName() + \".txt\";\nusing (System.IO.File.Create(tempFile)) { }\ndoc.Application.SharedParametersFilename = tempFile;\n\ntry\n{\n    DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n    if (defFile != null)\n    {\n        DefinitionGroup group = defFile.Groups.Create(\"General\");\n        if (group != null)\n        {\n            ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(\"{param_name}\", ParameterType.Text);\n            Definition definition = group.Definitions.Create(options);\n            if (definition != null)\n            {\n                CategorySet categories = doc.Application.Create.NewCategorySet();\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                doc.ParameterBindings.Insert(definition, binding, Autodesk.Revit.DB.BuiltInParameterGroup.PG_DATA);\n            }\n        }\n    }\n}\nfinally\n{\n    doc.Application.SharedParametersFilename = originalFile;\n    System.IO.File.Delete(tempFile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Apply {thickness_mm}mm thermal insulation to all hot water pipes."}, {"role": "assistant", "content": "PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\n\nif (insulationType != null && hotWaterSystem != null)\n{\n    List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => \n    {\n        Parameter systemParam = p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        return systemParam != null && systemParam.HasValue && systemParam.AsElementId() == hotWaterSystem.Id;\n    }).ToList();\n    \n    foreach(Pipe p in pipes)\n    {\n        PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits({thickness_mm}, UnitTypeId.Millimeters));\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dimension the length of a user-selected wall."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select a wall to dimension\");\n\nif (wallRef != null)\n{\n    Wall wall = doc.GetElement(wallRef) as Wall;\n    View activeView = doc.ActiveView;\n\n    if (wall != null && activeView != null)\n    {\n        LocationCurve locCurve = wall.Location as LocationCurve;\n        if (locCurve != null)\n        {\n            Line wallLine = locCurve.Curve as Line;\n            if (wallLine != null)\n            {\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(activeView, dimLine, refs);\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Importa un archivo CAD llamado '{file_name}.dwg' en la vista actual."}, {"role": "assistant", "content": "string filePath = \"C:/CAD/{file_name}.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the sill height of all windows to {sill_height_m} meter."}, {"role": "assistant", "content": "double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_m}, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Acota la longitud de un muro seleccionado por el usuario."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Dimension Wall\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference wallRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un muro para acotar\");\n    if(wallRef != null)\n    {\n        Wall wall = doc.GetElement(wallRef) as Wall;\n        if(wall != null)\n        {\n            LocationCurve locCurve = wall.Location as LocationCurve;\n            Curve wallCurve = locCurve != null ? locCurve.Curve : null;\n            if(wallCurve != null && wallCurve is Line)\n            {\n                Line wallLine = wallCurve as Line;\n                ReferenceArray refs = new ReferenceArray();\n                refs.Append(wallLine.GetEndPointReference(0));\n                refs.Append(wallLine.GetEndPointReference(1));\n                XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n                XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n                Line dimLine = Line.CreateBound(pt1, pt2);\n                doc.Create.NewDimension(doc.ActiveView, dimLine, refs);\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las colisiones entre tuberías y vigas."}, {"role": "assistant", "content": "ICollection<ElementId> pipeIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WhereElementIsNotElementType().ToElementIds();\nICollection<ElementId> beamIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().ToElementIds();\n\nif(pipeIds.Count > 0 && beamIds.Count > 0)\n{\n    List<ElementFilter> beamFilters = new List<ElementFilter>();\n    foreach(ElementId beamId in beamIds)\n    {\n        Element beam = doc.GetElement(beamId);\n        if(beam != null) beamFilters.Add(new ElementIntersectsElementFilter(beam));\n    }\n    LogicalOrFilter clashFilter = new LogicalOrFilter(beamFilters);\n    ICollection<ElementId> clashingPipeIds = new FilteredElementCollector(doc, pipeIds).WherePasses(clashFilter).ToElementIds();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Copy all elements from {source_level} to {target_level}."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{source_level}\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{target_level}\") as Level;\n\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if (elementsToCopy.Count > 0)\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Desune la geometría de dos elementos seleccionados."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer elemento\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo elemento\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Establece el parámetro '{parameter_name}' de todas las puertas del Azotea a 'APROBADO'."}, {"role": "assistant", "content": "using(Transaction t = new Transaction(doc, \"Set Door Comments\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Azotea\");\n    if(level != null)\n    {\n        List<FamilyInstance> doorsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId.Equals(level.Id)).ToList();\n        foreach(FamilyInstance door in doorsOnLevel)\n        {\n            Parameter param = door.LookupParameter(\"{parameter_name}\");\n            if(param != null && !param.IsReadOnly)\n            {\n                param.Set(\"APROBADO\");\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un suelo con un hueco circular de radio {radius_m}m en el centro."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    XYZ p1 = new XYZ(-10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p2 = new XYZ(10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p3 = new XYZ(10 / 0.3048, 10 / 0.3048, 0);\n    XYZ p4 = new XYZ(-10 / 0.3048, 10 / 0.3048, 0);\n    CurveLoop outerLoop = new CurveLoop();\n    outerLoop.Append(Line.CreateBound(p1, p2));\n    outerLoop.Append(Line.CreateBound(p2, p3));\n    outerLoop.Append(Line.CreateBound(p3, p4));\n    outerLoop.Append(Line.CreateBound(p4, p1));\n\n    XYZ center = XYZ.Zero;\n    double radius = {radius_m} / 0.3048;\n    CurveLoop innerLoop = new CurveLoop();\n    innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n    innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n    Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a Reflected Ceiling Plan view for First Floor."}, {"role": "assistant", "content": "string levelName = \"First Floor\";\nstring viewName = \"First Floor Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a structural column at position X=2, Y=3."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a shaft opening that passes through from {bottom_level_name} to {top_level_name}."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{bottom_level_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{top_level_name}\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    XYZ p1 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p2 = new XYZ(8 / 0.3048, 5 / 0.3048,0);\n    XYZ p3 = new XYZ(8 / 0.3048, 8 / 0.3048,0);\n    XYZ p4 = new XYZ(5 / 0.3048, 8 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de tubería con material de {material_name}."}, {"role": "assistant", "content": "string newTypeName = \"Tubería de {material_name}\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"{material_name}\")) as Material;\n\nif (pipeTypeToDuplicate != null && material != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Averigua quién es el propietario de un elemento seleccionado."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento\");\n\nWorksharingTooltipInfo info = null;\nif (pickedRef != null)\n{\n    info = WorksharingUtils.GetWorksharingTooltipInfo(doc, pickedRef.ElementId);\n}\n"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a spherical DirectShape with a {radius_m}-meter radius."}, {"role": "assistant", "content": "double radius = {radius_m} / 0.3048;\nList<GeometryObject> solids = new List<GeometryObject>();\nFrame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\nArc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\nLine line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\nCurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\nSolid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\nsolids.Add(sphere);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(solids);\n    ds.Name = \"Sphere DirectShape\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Mueve el punto base del proyecto {distance_m} metros hacia el norte."}, {"role": "assistant", "content": "BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\nif (projectBasePoint != null)\n{\n    XYZ translation = new XYZ(0, {distance_m} / 0.3048, 0);\n    ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Group a room schedule by Level."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Group Schedule\"))\n{\n    t.Start();\n    ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(vs => vs.Definition.CategoryId.IntegerValue == (int)BuiltInCategory.OST_Rooms);\n\n    if (schedule != null)\n    {\n        ScheduleDefinition def = schedule.Definition;\n        if (def != null)\n        {\n            SchedulableField schedulableField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ROOM_LEVEL_ID);\n            if (schedulableField != null)\n            {\n                ScheduleField field = def.AddField(schedulableField);\n                ScheduleSortGroupField sortGroupField = new ScheduleSortGroupField(field.FieldId);\n                sortGroupField.ShowHeader = true;\n                def.AddSortGroupField(sortGroupField);\n                def.IsItemized = false;\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Inserta una ventana de 1.2 metro de ancho y 3.0 metros de alto en un muro, creando un nuevo tipo si es necesario."}, {"role": "assistant", "content": "Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol originalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (originalSymbol != null && hostWall != null)\n{\n    string newTypeName = $\"Window 1.2m x 3.0m - {{Guid.NewGuid().ToString().Substring(0, 4)}}\";\n    FamilySymbol newSymbol = originalSymbol.Duplicate(newTypeName) as FamilySymbol;\n\n    if (!newSymbol.IsActive)\n    {\n        newSymbol.Activate();\n    }\n\n    Parameter widthParam = newSymbol.LookupParameter(\"Width\");\n    if(widthParam != null) widthParam.Set(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters));\n\n    Parameter heightParam = newSymbol.LookupParameter(\"Height\");\n    if(heightParam != null) heightParam.Set(UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters));\n\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    LocationCurve locationCurve = hostWall.Location as LocationCurve;\n    if (locationCurve != null)\n    {\n        XYZ insertionPoint = locationCurve.Curve.Evaluate(0.5, true);\n        doc.Create.NewFamilyInstance(insertionPoint, newSymbol, hostWall, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {sheet_size} sheet and place a legend on it."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Sheet with Legend\"))\n{\n    t.Start();\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"{sheet_size}\"));\n    View legendView = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.ViewType == ViewType.Legend);\n\n    if (titleBlock != null && legendView != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2.0;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dado un muro seleccionado, encuentra todas las tuberías que lo atraviesan."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\n\nList<ElementId> intersectingPipes = new List<ElementId>();\nif (wallRef != null)\n{\n    Element wall = doc.GetElement(wallRef);\n    if (wall != null)\n    {\n        ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n        intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds().ToList();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {text_size_mm}mm text type named '{type_name}' in green color."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the host element of the first window found."}, {"role": "assistant", "content": "FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find out who the owner of a selected element is."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element\");\n\nWorksharingTooltipInfo info = null;\nif (pickedRef != null)\n{\n    info = WorksharingUtils.GetWorksharingTooltipInfo(doc, pickedRef.ElementId);\n}\n"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de texto llamado '{type_name}' de {text_size_mm}mm de color verde."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca postes de iluminación cada 8m en un camino de 100m."}, {"role": "assistant", "content": "FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea {num_worksets} worksets para las disciplinas de ingeniería."}, {"role": "assistant", "content": "List<string> worksetNames = new List<string> {{ \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate the '{original_name}' wall type and name it '{new_name}'."}, {"role": "assistant", "content": "string originalName = \"{original_name}\";\nstring newName = \"{new_name}\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 3D view oriented from the southeast."}, {"role": "assistant", "content": "string viewName = \"3D View Southeast\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Exporta el documento a la ruta '{folder_path}{file_name}' con la versión IFC {ifc_version_enum}."}, {"role": "assistant", "content": "string folderPath = \"{folder_path}\";\nstring fileName = \"{file_name}\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.{ifc_version_enum};\ndoc.Export(folderPath, fileName, options);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una escalera entre {level1_name} y {level2_name}."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{level1_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{level2_name}\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    // TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    // Stairs creation requires using the StairsEditScope class.\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a vertical shaft opening from the base level to the top level."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\nif (bottomLevel != null && topLevel != null)\n{\n    XYZ p1 = new XYZ(2 / 0.3048, 2 / 0.3048,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 2 / 0.3048,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(2 / 0.3048, 5 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las familias de anotación."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Link a DWG file as a reference in the active view."}, {"role": "assistant", "content": "string filePath = \"C:/CAD_Files/Base_Plan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.ColorMode = ImportColorMode.Preserved;\nElementId linkedFileId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Link(filePath, options, activeView, out linkedFileId);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Abre una familia, añade un parámetro de tipo '{param_name}' y guárdala."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de muro 'SW12' con un grosor de 10cm."}, {"role": "assistant", "content": "string newTypeName = \"SW12\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(10*10, UnitTypeId.Millimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new door type named 'Double-Glass' and set its fire rating to '{fire_rating_value}'."}, {"role": "assistant", "content": "FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"Double-Glass\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating_value}\");\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the total length of all walls in the project."}, {"role": "assistant", "content": "double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all instances of the Furniture category."}, {"role": "assistant", "content": "List<Element> furnitureInstances = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new pipe type named 'Standard' with '{material_name}' material."}, {"role": "assistant", "content": "PipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"{material_name}\") as Material;\n\nif (pipeTypeToDuplicate != null && material != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(\"Standard\") as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Ajusta la altura del antepecho de todas las ventanas a 3.0 metro(s)."}, {"role": "assistant", "content": "double sillHeight = 3.0 / 0.3048;\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the coordinates of the project base point and the survey point."}, {"role": "assistant", "content": "BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera un piso rectangular de 12.5×6.2 metros."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(12.5, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(6.2, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> {{ loop }}, floorType.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new wall type 'Muro Básico 15cm' with a thickness of 15cm."}, {"role": "assistant", "content": "string newTypeName = \"Muro Básico 15cm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\n    if(newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if(cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(15*10, UnitTypeId.Millimeters));\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Define a view filter named '{filter_name}' to hide detail lines."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection<ElementId> catsToHide = new List<ElementId>{new ElementId(BuiltInCategory.OST_Lines)};\n    ElementFilter filter = new ElementCategoryFilter(new ElementId(BuiltInCategory.OST_Lines));\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"{filter_name}\", catsToHide, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén todos los muros del Nivel 1 que son estructurales."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> {{ levelFilter, categoryFilter, structuralFilter }});\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place the '{view_name}' view in the center of the active sheet."}, {"role": "assistant", "content": "ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"{view_name}\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\n\nif (viewToPlace != null && activeSheet != null)\n{\n    BoundingBoxUV sheetBox = activeSheet.Outline;\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) / 2, (sheetBox.Min.V + sheetBox.Max.V) / 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Generate a report with the area of all rooms in the project."}, {"role": "assistant", "content": "List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nList<double> roomAreas = new List<double>();\nforeach (Room room in rooms)\n{\n    if (room != null && room.Area > 0)\n    {\n        roomAreas.Add(UnitUtils.ConvertFromInternalUnits(room.Area, UnitTypeId.SquareMeters));\n    }\n}\n// The orchestrator can now use the 'roomAreas' list to generate the final report."}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Oculta los elementos seleccionados en la vista activa."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToHide = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null && idsToHide.Count > 0)\n{\n    activeView.HideElements(idsToHide);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Sincroniza el modelo local con el central, añadiendo el comentario '{comment}'."}, {"role": "assistant", "content": "if (doc.IsWorkshared)\n{\n    TransactWithCentralOptions tco = new TransactWithCentralOptions();\n    SynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\n    swcOpts.Comment = \"{comment}\";\n    swcOpts.SaveLocalAfter = true;\n    doc.SynchronizeWithCentral(tco, swcOpts);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Modela un barandal en una escalera existente."}, {"role": "assistant", "content": "RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Insert a 15.0-meter truss between two points."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(15.0 / 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aísla temporalmente la categoría {built_in_category_enum} en la vista activa."}, {"role": "assistant", "content": "ICollection<ElementId> elementIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.{built_in_category_enum}).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(elementIds);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a topography surface from a list of 4 points."}, {"role": "assistant", "content": "IList<XYZ> points = new List<XYZ>\n{\n    new XYZ(0, 0, 0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters))\n};\nTopographySurface.Create(doc, points);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all plan views in the project."}, {"role": "assistant", "content": "List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de los nombres de todos los materiales."}, {"role": "assistant", "content": "List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el nombre de todas las familias cargadas que contengan '{old_name}' a '{new_name}'."}, {"role": "assistant", "content": "List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"{old_name}\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"{old_name}\", \"{new_name}\");\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Importa una topografía desde un archivo CSV."}, {"role": "assistant", "content": "// CSV file reading is not directly supported by a single API call.\n// You would typically read the file line by line, parse the XYZ coordinates,\n// and then use the TopographySurface.Create method with a list of points.\n// As a placeholder, here's how to create a simple topography from a list of points:\nIList<XYZ> points = new List<XYZ>();\npoints.Add(new XYZ(0, 0, 0));\npoints.Add(new XYZ(10, 0, 0));\npoints.Add(new XYZ(0, 10, 0));\npoints.Add(new XYZ(10, 10, 5));\nTopographySurface.Create(doc, points);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a text note with text '{note_text}', given location, and target element."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{note_text}\", opts);\n    if (note != null)\n    {\n        note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L).End = targetRef.GlobalPoint;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a shaft opening that passes through from {bottom_level_name} to {top_level_name}."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{bottom_level_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{top_level_name}\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    XYZ p1 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p2 = new XYZ(8 / 0.3048, 5 / 0.3048,0);\n    XYZ p3 = new XYZ(8 / 0.3048, 8 / 0.3048,0);\n    XYZ p4 = new XYZ(5 / 0.3048, 8 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add a point to the selected Path of Travel."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select a Path of Travel\");\n\nif (pickedRef != null)\n{\n    PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n    if (pot != null)\n    {\n        IList<XYZ> points = pot.GetPath();\n        if (points != null && points.Count >= 2)\n        {\n            XYZ midPoint = (points[0] + points[1]) / 2;\n            points.Insert(1, midPoint);\n            pot.Update(points);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all subcategories from the {buit_in_category_enum} category."}, {"role": "assistant", "content": "Category targetCategory = doc.Settings.Categories.get_Item(BuiltInCategory.{buit_in_category_enum});\nCategoryNameMap subcategories = targetCategory.SubCategories;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Insert a text note with '{text_note}' in the current view."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    XYZ position = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\n    TextNote.Create(doc, activeView.Id, position, \"{text_note}\", defaultTypeId);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Verifica si una tubería está conectada en ambos extremos."}, {"role": "assistant", "content": "Pipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nbool isFullyConnected = false;\n\nif (pipe != null)\n{\n    isFullyConnected = pipe.ConnectorManager.UnusedConnectors.IsEmpty;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Agrupa una tabla de planificación de habitaciones por Nivel."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Group Schedule\"))\n{\n    t.Start();\n    ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(vs => vs.Definition.CategoryId.IntegerValue == (int)BuiltInCategory.OST_Rooms);\n\n    if (schedule != null)\n    {\n        ScheduleDefinition def = schedule.Definition;\n        if (def != null)\n        {\n            SchedulableField schedulableField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ROOM_LEVEL_ID);\n            if (schedulableField != null)\n            {\n                ScheduleField field = def.AddField(schedulableField);\n                ScheduleSortGroupField sortGroupField = new ScheduleSortGroupField(field.FieldId);\n                sortGroupField.ShowHeader = true;\n                def.AddSortGroupField(sortGroupField);\n                def.IsItemized = false;\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una escalera entre {level1_name} y {level2_name}."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{level1_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{level2_name}\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    // TODO: Stairs.Create(doc, bottomLevel.Id, topLevel.Id); is not a valid Revit API call.\n    // Stairs creation requires using the StairsEditScope class.\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Synchronize the local model with the central model, adding the comment '{comment}'."}, {"role": "assistant", "content": "if (doc.IsWorkshared)\n{\n    TransactWithCentralOptions tco = new TransactWithCentralOptions();\n    SynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\n    swcOpts.Comment = \"{comment}\";\n    swcOpts.SaveLocalAfter = true;\n    doc.SynchronizeWithCentral(tco, swcOpts);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Recarga el vínculo de Revit '{link_name}'."}, {"role": "assistant", "content": "RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"{link_name}\");\nif(linkType != null)\n{\n    linkType.Reload();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva habitación en el Nivel 1 en el punto (7, 4)."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n\nif (level1 != null)\n{\n    UV point = new UV(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters));\n    Room room = doc.Create.NewRoom(level1, point);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate the '{original_type_name}' wall type and name it '{new_type_name}'."}, {"role": "assistant", "content": "WallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"{original_type_name}\");\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(\"{new_type_name}\") as WallType;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rellena el parámetro de material de todos los muros con '{material_name}'."}, {"role": "assistant", "content": "Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"{material_name}\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo parámetro de proyecto compartido de texto llamado '{param_name}' para muros y puertas."}, {"role": "assistant", "content": "string originalFile = doc.Application.SharedParametersFilename;\nstring tempFile = System.IO.Path.GetTempFileName() + \".txt\";\nusing (System.IO.File.Create(tempFile)) { }\ndoc.Application.SharedParametersFilename = tempFile;\n\ntry\n{\n    DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n    if (defFile != null)\n    {\n        DefinitionGroup group = defFile.Groups.Create(\"General\");\n        if (group != null)\n        {\n            ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(\"{param_name}\", ParameterType.Text);\n            Definition definition = group.Definitions.Create(options);\n            if (definition != null)\n            {\n                CategorySet categories = doc.Application.Create.NewCategorySet();\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                doc.ParameterBindings.Insert(definition, binding, Autodesk.Revit.DB.BuiltInParameterGroup.PG_DATA);\n            }\n        }\n    }\n}\nfinally\n{\n    doc.Application.SharedParametersFilename = originalFile;\n    System.IO.File.Delete(tempFile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Inserta una nota de texto con '{text_note}' en la vista actual."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    XYZ position = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\n    TextNote.Create(doc, activeView.Id, position, \"{text_note}\", defaultTypeId);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista de plano de plafón reflejado para el L01."}, {"role": "assistant", "content": "string levelName = \"L01\";\nstring viewName = \"Plano de Plafón L01\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate the '{original_type_name}' wall type and name it '{new_type_name}'."}, {"role": "assistant", "content": "WallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"{original_type_name}\");\n\nif (wt != null)\n{\n    WallType newWt = wt.Duplicate(\"{new_type_name}\") as WallType;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de puerta llamado 'M_Single-Flush' y establece su resistencia al fuego a '{fire_rating}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"M_Single-Flush\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"{fire_rating}\");\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 'Pilar 30x60' column at each grid intersection."}, {"role": "assistant", "content": "FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Pilar 30x60\");\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\nif (columnSymbol != null && level != null)\n{\n    if (!columnSymbol.IsActive) columnSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                if (results != null && !results.IsEmpty)\n                {\n                    foreach (IntersectionResult ir in results)\n                    {\n                        doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                    }\n                }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una cota de elevación en una cara y un punto de vista dados."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara superior del suelo\");\n\nView activeView = doc.ActiveView;\n\nif (faceRef != null && activeView != null)\n{\n    XYZ pointOnFace = faceRef.GlobalPoint;\n    XYZ leaderEnd = pointOnFace + new XYZ(1 / 0.3048, 1 / 0.3048, 0);\n    doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén el tipo de sistema de una tubería seleccionada."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona una tubería\");\n\nPipingSystemType systemType = null;\nif (pickedRef != null)\n{\n    Pipe pipe = doc.GetElement(pickedRef.ElementId) as Pipe;\n    if (pipe != null)\n    {\n        Parameter systemTypeParam = pipe.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM);\n        if (systemTypeParam != null && systemTypeParam.HasValue)\n        {\n            systemType = doc.GetElement(systemTypeParam.AsElementId()) as PipingSystemType;\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the IDs of all 3D views starting with '{prefix}' for export."}, {"role": "assistant", "content": "List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"{prefix}\") && !v.IsTemplate).Select(v => v.Id).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new level named 'L01' at 3.5 meters elevation."}, {"role": "assistant", "content": "double elevation = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"L01\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un muro en Basement de (5,5,3) a (15,5,3) con 3.15m de alto."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Basement\") as Level;\nif (level1 != null)\n{\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallType != null)\n    {\n        Line wallCurve = Line.CreateBound(new XYZ(5, 5, 3), new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters), 5, 3));\n        double height = UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters);\n        Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new schedule for Structural Columns."}, {"role": "assistant", "content": "string scheduleName = \"Structural Column Schedule\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a floor with a circular hole of radius {radius_m}m in the center."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    XYZ p1 = new XYZ(-10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p2 = new XYZ(10 / 0.3048, -10 / 0.3048, 0);\n    XYZ p3 = new XYZ(10 / 0.3048, 10 / 0.3048, 0);\n    XYZ p4 = new XYZ(-10 / 0.3048, 10 / 0.3048, 0);\n    CurveLoop outerLoop = new CurveLoop();\n    outerLoop.Append(Line.CreateBound(p1, p2));\n    outerLoop.Append(Line.CreateBound(p2, p3));\n    outerLoop.Append(Line.CreateBound(p3, p4));\n    outerLoop.Append(Line.CreateBound(p4, p1));\n\n    XYZ center = XYZ.Zero;\n    double radius = {radius_m} / 0.3048;\n    CurveLoop innerLoop = new CurveLoop();\n    innerLoop.Append(Arc.Create(center - XYZ.BasisX * radius, center + XYZ.BasisX * radius, center + XYZ.BasisY * radius));\n    innerLoop.Append(Arc.Create(center + XYZ.BasisX * radius, center - XYZ.BasisX * radius, center - XYZ.BasisY * radius));\n\n    Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una viga estructural entre (5,5,3) y (15,5,3) en el First Floor."}, {"role": "assistant", "content": "FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"First Floor\") as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(5, 5, 3);\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all door families loaded in the project."}, {"role": "assistant", "content": "List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place a piece of furniture at coordinates (7,4)."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && furnitureSymbol != null)\n{\n    if(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0), furnitureSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new 3D view named '{view_name}' oriented from point ({eye_x_m},{eye_y_m},{eye_z_m}) looking at the origin."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v=>v.ViewFamily==ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    if (view != null)\n    {\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits({eye_x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_z_m}, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D vo = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        view.SetOrientation(vo);\n        view.Name = \"{view_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dibuja una pared de 5.0m de largo por 3.0m de altura."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level != null && wallType != null)\n{\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(5.0, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters), 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Elimina todas las líneas de detalle en la vista activa."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection<ElementId> detailLines = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(DetailLine)).ToElementIds();\n    if (detailLines.Count > 0)\n    {\n        doc.Delete(detailLines);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Tag all rooms with their area."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    List<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\n    foreach(Room room in rooms)\n    {\n        LocationPoint loc = room.Location as LocationPoint;\n        if(loc != null)\n        {\n            doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(loc.Point.X, loc.Point.Y), activeView.Id);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Hide all annotation elements in the active view."}, {"role": "assistant", "content": "if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Modela un barandal en una escalera existente."}, {"role": "assistant", "content": "RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a structural column at position X=2, Y=3."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Given a wall, get its materials and their volumes."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select a wall\");\n\nDictionary<string, double> materialVolumes = new Dictionary<string, double>();\nif (pickedRef != null)\n{\n    Wall wall = doc.GetElement(pickedRef) as Wall;\n    if (wall != null)\n    {\n        Parameter areaParam = wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED);\n        if (areaParam != null && areaParam.HasValue)\n        {\n            double wallArea = areaParam.AsDouble();\n            WallType wallType = wall.WallType;\n            if (wallType != null)\n            {\n                CompoundStructure cs = wallType.GetCompoundStructure();\n                if (cs != null)\n                {\n                    foreach(CompoundStructureLayer layer in cs.GetLayers())\n                    {\n                        Material material = doc.GetElement(layer.MaterialId) as Material;\n                        if(material != null)\n                        {\n                            double volume = layer.Width * wallArea;\n                            materialVolumes[material.Name] = volume;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Apply the 'X-Ray' visual style to the active 3D view."}, {"role": "assistant", "content": "View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && !view3D.IsTemplate)\n{\n    view3D.DisplayStyle = DisplayStyle.Wireframe; // Simulates 'X-Ray' effect\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de puerta llamado 'Double-Glass' y establece su resistencia al fuego a '{fire_rating}'."}, {"role": "assistant", "content": "string newTypeName = \"Double-Glass\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"{fire_rating}\");\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista de sección entre los puntos (0,0,0) y (10,0,0)."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(0, UnitTypeId.Meters),0);\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a text note with text '{note_text}', given location, and target element."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Choose the text location\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{note_text}\", opts);\n    if (note != null)\n    {\n        Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n        leader.End = targetRef.GlobalPoint;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de todas las familias de anotación."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Inside the family editor, create a vertical reference plane named '{plane_name}'."}, {"role": "assistant", "content": "string rpName = \"{plane_name}\";\nXYZ start = new XYZ(0, UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0);\nXYZ end = new XYZ(0, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nXYZ normal = XYZ.BasisX;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null && doc.IsFamilyDocument)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = rpName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls with an empty 'Mark' parameter and set it to '{mark_value}'."}, {"role": "assistant", "content": "List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"{mark_value}\");\n  }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una cimentación de viga de 7.8 metros de largo."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(7.8, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Footing);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Copia todos los muros del {source_level} al {target_level}."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Copy Walls\"))\n{\n    t.Start();\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{source_level}\");\n    Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{target_level}\");\n\n    if (level1 != null && level2 != null)\n    {\n        ICollection<ElementId> wallsToCopy = new FilteredElementCollector(doc, level1.Id).OfClass(typeof(Wall)).Select(e => e.Id).ToList();\n        double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n        XYZ translation = new XYZ(0, 0, elevationDiff);\n        if (wallsToCopy.Count > 0)\n        {\n            ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de puerta llamado 'M_Single-Flush' y establece su resistencia al fuego a '{fire_rating_value}'."}, {"role": "assistant", "content": "FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"M_Single-Flush\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating_value}\");\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un suelo con un contorno de 12.5 por 6.2 metros."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(12.5, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(6.2, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> {{ loop }}, floorType.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an electrical circuit connecting light fixtures to a panel."}, {"role": "assistant", "content": "FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nList<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\nif (panel != null && fixtureIds.Count > 0)\n{\n    ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n    if(electricalSystem != null)\n    {\n        electricalSystem.SelectPanel(panel);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una región rellena con un patrón de '{pattern_name}'."}, {"role": "assistant", "content": "FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"{pattern_name}\"));\nView activeView = doc.ActiveView;\n\nif (regionType != null && activeView != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 0,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(0, 5 / 0.3048,0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    FilledRegion.Create(doc, regionType.Id, activeView.Id, new List<CurveLoop>{profile});\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Exporta el documento a un archivo IFC con la versión IFC4x3."}, {"role": "assistant", "content": "string folderPath = \"C:/RevitExports/\";\nstring fileName = doc.Title + \"_IFC4x3.ifc\";\nif(System.IO.Directory.Exists(folderPath))\n{\n    IFCExportOptions options = new IFCExportOptions();\n    options.FileVersion = IFCVersion.IFC4x3;\n    doc.Export(folderPath, fileName, options);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {sheet_size} sheet and place the '{view_name}' view on it."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Sheet\"))\n{\n    t.Start();\n    string sheetNumber = \"A-101\";\n    FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(tb => tb.Name.Contains(\"{sheet_size}\"));\n    View viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<View>().FirstOrDefault(v => v.Name == \"{view_name}\");\n\n    if (titleBlock != null && viewToPlace != null)\n    {\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        if (newSheet != null)\n        {\n            newSheet.Name = \"Architectural Plan - {view_name}\";\n            newSheet.SheetNumber = sheetNumber;\n            BoundingBoxUV sheetBox = newSheet.Outline;\n            UV centerUv = (sheetBox.Min + sheetBox.Max) / 2;\n            XYZ centerPoint = new XYZ(centerUv.U, centerUv.V, 0);\n            Viewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un muro cortina de 1.0 metros de ancho y 3.15 metros de alto."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\n\nif (level != null && cwType != null)\n{\n    Line baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters), 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Activate all FamilySymbols in the project."}, {"role": "assistant", "content": "List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (FamilySymbol sym in symbols)\n{\n    if (!sym.IsActive)\n    {\n        sym.Activate();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all material names."}, {"role": "assistant", "content": "List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Ajusta la altura del antepecho de todas las ventanas a 2.8 metro(s)."}, {"role": "assistant", "content": "double sillHeight = 2.8 / 0.3048;\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una copia de la vista activa y nómbrala '{view_name}'."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId) as View;\n    if (newView != null)\n    {\n        newView.Name = \"{view_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create columns at each grid intersection."}, {"role": "assistant", "content": "FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    if(!colSymbol.IsActive) colSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                 if(results != null) {\n                     foreach (IntersectionResult ir in results)\n                     {\n                         doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                     }\n                 }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una viga estructural entre (0,0,0) y (10,0,0) en el Nivel 2."}, {"role": "assistant", "content": "FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\n\nif (beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    XYZ start = new XYZ(0, 0, 0);\n    XYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(0, UnitTypeId.Meters));\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls taller than 3.0 meters."}, {"role": "assistant", "content": "double heightThreshold = UnitUtils.ConvertToInternalUnits(3.0, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo Nivel llamado 'Nivel 2' a una elevación de 3.5 metros."}, {"role": "assistant", "content": "double elevation = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Nivel 2\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva vista de alzado mirando al norte."}, {"role": "assistant", "content": "ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null && activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 2);\n        if (aev != null)\n        {\n            aev.Name = \"Alzado Norte\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Place a material tag on a wall face."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Place Material Tag\"))\n{\n    t.Start();\n    UIDocument localUidoc = uidoc;\n    Reference faceRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Face, \"Select a face to tag\");\n    XYZ point = localUidoc.Selection.PickPoint(\"Select the tag location\");\n    View activeView = doc.ActiveView;\n\n    if (faceRef != null && point != null && activeView != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, faceRef, true, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, point);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Change a glass panel in a curtain wall to a solid panel."}, {"role": "assistant", "content": "Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\nFamilySymbol solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_CurtainWallPanels && fs.Name.Contains(\"Solid\"));\n\nif (curtainWall != null && solidPanelType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    if (grid != null)\n    {\n        ElementId panelIdToChange = grid.GetPanelIds().FirstOrDefault();\n        if (panelIdToChange != ElementId.InvalidElementId)\n        {\n            Panel panelToChange = doc.GetElement(panelIdToChange) as Panel;\n            if (panelToChange != null) panelToChange.ChangeTypeId(solidPanelType.Id);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Unjoin the geometry of two selected elements."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first element\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second element\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo nivel llamado 'Level 1' a -3.0 metros de elevación."}, {"role": "assistant", "content": "double elevation = UnitUtils.ConvertToInternalUnits(-3.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 1\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todos los muros con el comentario '{comment}'."}, {"role": "assistant", "content": "ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"{comment}\");\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista de sección entre los puntos (5,5,3) y (15,5,3)."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\n\nif (vft != null)\n{\n    XYZ p1 = new XYZ(5,5,3);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),3);\n    XYZ midPoint = (p1 + p2) / 2;\n    XYZ direction = (p2 - p1).Normalize();\n    XYZ up = XYZ.BasisZ;\n    XYZ viewdir = up.CrossProduct(direction);\n    \n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    Transform t = Transform.Identity;\n    t.Origin = midPoint;\n    t.BasisX = direction;\n    t.BasisY = up;\n    t.BasisZ = viewdir;\n    sectionBox.Transform = t;\n    sectionBox.Min = new XYZ(UnitUtils.ConvertToInternalUnits(-p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Meters), 0);\n    sectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(p1.DistanceTo(p2)/2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\n    \n    ViewSection.CreateSection(doc, vft.Id, sectionBox);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 30cm 'Muro Básico 15cm' type and then create a wall of that type."}, {"role": "assistant", "content": "string newTypeName = \"Muro Básico 15cm\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == newTypeName) as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if(newWallType!=null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if(cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30/10.0, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nLine wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\nWall.Create(doc, wallCurve, newWallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el nombre de todas las vistas de planta para que empiecen con '{prefix}'."}, {"role": "assistant", "content": "string prefix = \"{prefix}\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {text_size_mm}mm text type named '{type_name}' in green color."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Model a railing on an existing staircase."}, {"role": "assistant", "content": "RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera un piso rectangular de 12.5×6.2 metros."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(12.5, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(6.2, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> {{ loop }}, floorType.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el nombre de todas las tablas que contienen '{text_to_find}' por '{new_text}'."}, {"role": "assistant", "content": "List<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"{text_to_find}\")).ToList();\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"{text_to_find}\", \"{new_text}\");\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add mullions to all grid lines of a curtain wall."}, {"role": "assistant", "content": "Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\n\nif (curtainWall != null && mullionType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    if (grid != null)\n    {\n        foreach (ElementId gridLineId in grid.GetVGridLineIds())\n        {\n            CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n            if(line != null) line.AddMullions(mullionType, false);\n        }\n        foreach (ElementId gridLineId in grid.GetUGridLineIds())\n        {\n            CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n            if(line != null) line.AddMullions(mullionType, false);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las vistas que no tienen una plantilla de vista asignada."}, {"role": "assistant", "content": "List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted && !v.IsTemplate && v.ViewTemplateId.Equals(ElementId.InvalidElementId)).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de los nombres de todos los materiales."}, {"role": "assistant", "content": "List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 'Pilar 30x60' column at each grid intersection."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Columns at Grids\"))\n{\n    t.Start();\n    FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Pilar 30x60\");\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\n    List<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n    if (columnSymbol != null && level != null)\n    {\n        if (!columnSymbol.IsActive) columnSymbol.Activate();\n        for (int i = 0; i < grids.Count; i++)\n        {\n            for (int j = i + 1; j < grids.Count; j++)\n            {\n                IntersectionResultArray results;\n                if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n                {\n                    if (results != null && !results.IsEmpty)\n                    {\n                        foreach (IntersectionResult ir in results)\n                        {\n                            doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva vista 3D llamada '{view_name}' orientada desde el punto ({eye_x_m},{eye_y_m},{eye_z_m}) mirando hacia el origen."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v=>v.ViewFamily==ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    if (view != null)\n    {\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits({eye_x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_z_m}, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D vo = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        view.SetOrientation(vo);\n        view.Name = \"{view_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera un grupo a partir de la selección actual y muévelo {distance_m} metros a la derecha."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    Group group = doc.Create.NewGroup(selectedIds);\n    if (group != null)\n    {\n        XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters), 0, 0);\n        ElementTransformUtils.MoveElement(doc, group.Id, translation);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an extrusion roof with a {slope_percentage}% slope."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null && roofType != null)\n{\n    double run = 10.0;\n    double rise = run * ({slope_percentage} / 100.0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(run / 0.3048, 0, rise / 0.3048)));\n    \n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    \n    if (refPlane != null)\n    {\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, run / 0.3048);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un suelo con un contorno de 12.5 por 6.2 metros."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(12.5, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(6.2, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> {{ loop }}, floorType.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rotate the given element 90 degrees about its center."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element to rotate\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n            double angle = 90 * Math.PI / 180.0;\n            ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rota el norte del proyecto 45 grados en sentido horario."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInRadians = -(45 * Math.PI / 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el nombre de todas las familias cargadas que contengan '{old_name}' a '{new_name}'."}, {"role": "assistant", "content": "List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"{old_name}\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"{old_name}\", \"{new_name}\");\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista de planta para el 'Nivel 1'."}, {"role": "assistant", "content": "string levelName = \"Nivel 1\";\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Given a selected wall, find all pipes passing through it."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\n\nList<ElementId> intersectingPipes = new List<ElementId>();\nif (wallRef != null)\n{\n    Element wall = doc.GetElement(wallRef);\n    if (wall != null)\n    {\n        ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n        intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds().ToList();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a roof by footprint on the 'Level 2'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\n    if (roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 / 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,0,0), new XYZ(20 / 0.3048,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,30 / 0.3048,0), new XYZ(0,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 / 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Copia todos los elementos del {source_level} al {target_level}."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{source_level}\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{target_level}\") as Level;\nif (level1 != null && level2 != null)\n{\n    ICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\n    double elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(elementsToCopy.Any())\n    {\n        ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una cota de elevación en una cara y un punto de vista dados."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference faceRef = localUidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara superior del suelo\");\n\nView activeView = doc.ActiveView;\n\nif (faceRef != null && activeView != null)\n{\n    XYZ pointOnFace = faceRef.GlobalPoint;\n    XYZ leaderEnd = pointOnFace + new XYZ(1 / 0.3048, 1 / 0.3048, 0);\n    doc.Create.NewSpotElevation(activeView, faceRef, pointOnFace, pointOnFace, leaderEnd, pointOnFace, true);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva vista de alzado mirando al sur."}, {"role": "assistant", "content": "ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nView activeView = doc.ActiveView;\n\nif (elevationVFT != null && activeView != null)\n{\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20 / 0.3048, 0), 100);\n    \n    if (marker != null)\n    {\n        View aev = marker.CreateElevation(doc, activeView.Id, 0);\n        if (aev != null)\n        {\n            aev.Name = \"Alzado Sur\";\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un workset llamado '{workset_name}'."}, {"role": "assistant", "content": "Workset.Create(doc, \"{workset_name}\");"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the solid geometry of a selected element."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element to get its geometry\");\n\nList<Solid> solids = new List<Solid>();\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        Options opt = new Options() {{ ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine }};\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if (geoElem != null)\n        {\n            solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un Path of Travel entre los puntos ({x1},{y1}) y ({x2},{y2}) en la vista de planta."}, {"role": "assistant", "content": "ViewPlan viewPlan = doc.ActiveView as ViewPlan;\n\nif (viewPlan != null && viewPlan.ViewType == ViewType.FloorPlan)\n{\n    ElementId levelId = viewPlan.get_Parameter(BuiltInParameter.PLAN_VIEW_LEVEL).AsElementId();\n    Level level = doc.GetElement(levelId) as Level;\n    if (level != null)\n    {\n        XYZ startPoint = new XYZ({x1} / 0.3048, {y1} / 0.3048, level.Elevation);\n        XYZ endPoint = new XYZ({x2} / 0.3048, {y2} / 0.3048, level.Elevation);\n        PathOfTravel.Create(viewPlan, startPoint, endPoint);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all annotation families."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de puerta llamado 'M_Single-Flush' y establece su resistencia al fuego a '{fire_rating}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Door Type\"))\n{\n    t.Start();\n    string newTypeName = \"M_Single-Flush\";\n    FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n    if (doorTypeToDuplicate != null)\n    {\n        FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n        if (newDoorType != null)\n        {\n            Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n            if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n            {\n                fireRatingParam.Set(\"{fire_rating}\");\n            }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Open a family, add a type parameter '{param_name}', and save it."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea {num_worksets} worksets de arquitectura."}, {"role": "assistant", "content": "List<string> worksetNames = new List<string> {{ \"TAD_ARQ_MAM\", \"TAD_ARQ_ACA\", \"TAD_ARQ_PLA\", \"TAD_ARQ_PSO\", \"TAD_ARQ_HRE\", \"TAD_ARQ_ALU\", \"TAD_ARQ_CAR\", \"TAD_ARQ_MOB\", \"TAD_ARQ_PLO\", \"TAD_ARQ_EXT\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add a horizontal reference plane named '{plane_name}'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Add Reference Plane\"))\n{\n    t.Start();\n    string rpName = \"{plane_name}\";\n    View activeView = doc.ActiveView;\n\n    if (activeView != null)\n    {\n        XYZ bubbleEnd = new XYZ(0, 10, 0);\n        XYZ freeEnd = new XYZ(10, 10, 0);\n        XYZ cutVec = XYZ.BasisZ;\n        ReferencePlane rp = doc.Create.NewReferencePlane(bubbleEnd, freeEnd, cutVec, activeView);\n        if (rp != null)\n        {\n            rp.Name = rpName;\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén todas las habitaciones en el Nivel 'Nivel 1'."}, {"role": "assistant", "content": "Level targetLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nList<Element> roomsOnLevel = new List<Element>();\n\nif (targetLevel != null)\n{\n    roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == targetLevel.Id).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new door type named 'Double-Glass' and set its fire rating to '{fire_rating}'."}, {"role": "assistant", "content": "string newTypeName = \"Double-Glass\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = null;\nif (doorTypeToDuplicate != null)\n{\n    newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if (fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating}\");\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Set the sill height of all windows to {sill_height_mm}mm."}, {"role": "assistant", "content": "double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia el estilo visual de la vista activa a 'Línea Oculta'."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rotate the given element 45 degrees about its center."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element to rotate\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n            double angle = 45 * Math.PI / 180.0;\n            ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a shaft opening that passes through from {bottom_level_name} to {top_level_name}."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{bottom_level_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{top_level_name}\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    XYZ p1 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p2 = new XYZ(8 / 0.3048, 5 / 0.3048,0);\n    XYZ p3 = new XYZ(8 / 0.3048, 8 / 0.3048,0);\n    XYZ p4 = new XYZ(5 / 0.3048, 8 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all section views in the project."}, {"role": "assistant", "content": "List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un espacio MEP para cada habitación en el nivel 'Planta Baja'."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Planta Baja\");\n\nif (level != null)\n{\n    List<Room> roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e => (e as Room) != null && (e as Room).LevelId.Equals(level.Id)).Cast<Room>().ToList();\n    foreach(Room room in roomsOnLevel)\n    {\n       Space.Create(doc, room, null);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea columnas en cada intersección de ejes."}, {"role": "assistant", "content": "FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    if(!colSymbol.IsActive) colSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                 if(results != null) {\n                     foreach (IntersectionResult ir in results)\n                     {\n                         doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                     }\n                 }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nivel intermedio llamado '{new_level_name}' a mitad de camino entre el {level1_name} y el {level2_name}."}, {"role": "assistant", "content": "string newLevelName = \"{new_level_name}\";\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"{level1_name}\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"{level2_name}\");\nif (lvl1 != null && lvl2 != null)\n{\ndouble midElevation = (lvl1.ProjectElevation + lvl2.ProjectElevation) / 2.0;\nLevel newLevel = Level.Create(doc, midElevation);\n    if(newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add a point to the selected Path of Travel."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select a Path of Travel\");\n\nif (pickedRef != null)\n{\n    PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n    if (pot != null)\n    {\n        IList<XYZ> points = pot.GetPath();\n        if (points != null && points.Count >= 2)\n        {\n            XYZ midPoint = (points[0] + points[1]) / 2;\n            points.Insert(1, midPoint);\n            pot.Update(points);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a Path of Travel between points ({x1},{y1}) and ({x2},{y2}) in the plan view."}, {"role": "assistant", "content": "ViewPlan viewPlan = doc.ActiveView as ViewPlan;\n\nif (viewPlan != null && viewPlan.ViewType == ViewType.FloorPlan)\n{\n    ElementId levelId = viewPlan.get_Parameter(BuiltInParameter.PLAN_VIEW_LEVEL).AsElementId();\n    Level level = doc.GetElement(levelId) as Level;\n    if (level != null)\n    {\n        XYZ startPoint = new XYZ({x1} / 0.3048, {y1} / 0.3048, level.Elevation);\n        XYZ endPoint = new XYZ({x2} / 0.3048, {y2} / 0.3048, level.Elevation);\n        PathOfTravel.Create(viewPlan, startPoint, endPoint);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Pon un pilar estructural en las coordenadas 2,3."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (level != null && columnSymbol != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), columnSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un techo por extrusión con una pendiente del {slope_percentage}%."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null && roofType != null)\n{\n    double run = 10.0;\n    double rise = run * ({slope_percentage} / 100.0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(run / 0.3048, 0, rise / 0.3048)));\n    \n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    \n    if (refPlane != null)\n    {\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, run / 0.3048);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Ajusta la altura del antepecho de todas las ventanas a 3.0 metro(s)."}, {"role": "assistant", "content": "double sillHeight = 3.0 / 0.3048;\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if (sillHeightParam != null && !sillHeightParam.IsReadOnly)\n    {\n        sillHeightParam.Set(sillHeight);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Genera {num_grids} rejillas horizontales con una separación de {separation_m}m."}, {"role": "assistant", "content": "double separation = UnitUtils.ConvertToInternalUnits({separation_m}, UnitTypeId.Meters);\nfor(int i = 0; i < {num_grids}; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un muro en el First Floor que vaya de (0,0,0) a (10,0,0) con una altura de 3.15 metros."}, {"role": "assistant", "content": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"First Floor\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\nif (level1 != null && wallType != null)\n{\n    XYZ p1 = new XYZ(0, 0, 0);\n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(0, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(0, UnitTypeId.Meters));\n    Line wallCurve = Line.CreateBound(p1, p2);\n    double height = UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters);\n    Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Cambia un panel de vidrio de un muro cortina por un panel sólido."}, {"role": "assistant", "content": "Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\nFamilySymbol solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_CurtainWallPanels && (fs.Name.Contains(\"Solid\") || fs.Name.Contains(\"Sólido\")));\n\nif (curtainWall != null && solidPanelType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    if (grid != null)\n    {\n        ElementId panelIdToChange = grid.GetPanelIds().FirstOrDefault();\n        if (panelIdToChange != ElementId.InvalidElementId)\n        {\n            Panel panelToChange = doc.GetElement(panelIdToChange) as Panel;\n            if (panelToChange != null) panelToChange.ChangeTypeId(solidPanelType.Id);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un filtro de vista para ocultar muros demolidos."}, {"role": "assistant", "content": "Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p => p.Name.Contains(\"Demolished\") || p.Name.Contains(\"Demolición\"));\nView activeView = doc.ActiveView;\n\nif (demolishedPhase != null && activeView != null)\n{\n    ElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\n    FilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\n    ElementFilter filter = new ElementParameterFilter(rule);\n    ICollection<ElementId> categories = new List<ElementId>{{ new ElementId(BuiltInCategory.OST_Walls) }};\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Filtro Demolición\", categories, filter);\n    \n    if (pfe != null)\n    {\n        activeView.AddFilter(pfe.Id);\n        activeView.SetFilterVisibility(pfe.Id, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dado un muro, obtén los materiales y sus volúmenes."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un muro\");\n\nDictionary<string, double> materialVolumes = new Dictionary<string, double>();\nif (pickedRef != null)\n{\n    Wall wall = doc.GetElement(pickedRef) as Wall;\n    if (wall != null)\n    {\n        Parameter areaParam = wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED);\n        if (areaParam != null && areaParam.HasValue)\n        {\n            double wallArea = areaParam.AsDouble();\n            WallType wallType = wall.WallType;\n            if (wallType != null)\n            {\n                CompoundStructure cs = wallType.GetCompoundStructure();\n                if (cs != null)\n                {\n                    foreach(CompoundStructureLayer layer in cs.GetLayers())\n                    {\n                        Material material = doc.GetElement(layer.MaterialId) as Material;\n                        if(material != null)\n                        {\n                            double volume = layer.Width * wallArea; \n                            materialVolumes[material.Name] = volume;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una apertura de hueco vertical (shaft) desde el nivel base hasta el nivel más alto."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\n\nif (bottomLevel != null && topLevel != null)\n{\n    XYZ p1 = new XYZ(2 / 0.3048, 2 / 0.3048,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 2 / 0.3048,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(2 / 0.3048, 5 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Model a cable tray between points ({p1x_m}, {p1y_m}, {p1z_m}) and ({p2x_m}, {p2y_m}, {p2z_m})."}, {"role": "assistant", "content": "CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (trayType != null && level != null)\n{\n    XYZ p1 = new XYZ(UnitUtils.ConvertToInternalUnits({p1x_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p1y_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p1z_m}, UnitTypeId.Meters)); \n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({p2x_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p2y_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p2z_m}, UnitTypeId.Meters));\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Display a dialog box with 'Yes', 'No', and 'Cancel' options."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate level '{original_level_name}' with a {offset_m}m offset and name it '{new_level_name}'."}, {"role": "assistant", "content": "Level originalLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{original_level_name}\") as Level;\n\nif (originalLevel != null)\n{\n    double newElevation = originalLevel.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = \"{new_level_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all annotation families."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rotate the given element 45 degrees about its center."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element to rotate\");\n\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    if (elem != null)\n    {\n        LocationPoint lp = elem.Location as LocationPoint;\n        if (lp != null)\n        {\n            Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n            double angle = 45 * Math.PI / 180.0;\n            ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén las coordenadas del punto base y del punto de reconocimiento."}, {"role": "assistant", "content": "BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsShared);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsShared);\n\nXYZ surveyCoords = null;\nif (surveyPoint != null) surveyCoords = surveyPoint.get_BoundingBox(null).Min;\n\nXYZ projectCoords = null;\nif (projectBasePoint != null) projectCoords = projectBasePoint.get_BoundingBox(null).Min;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una losa de cimentación estructural de 30cm de espesor llamada '{type_name}'."}, {"role": "assistant", "content": "Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nFloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\nif(slabTypeToDuplicate != null && foundationLevel != null)\n{\n    string newTypeName = \"{type_name}\";\n    FloorType newSlabType = slabTypeToDuplicate.Duplicate(newTypeName) as FloorType;\n    if(newSlabType != null)\n    {\n        CompoundStructure cs = newSlabType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), (30 * 10) / 304.8);\n            newSlabType.SetCompoundStructure(cs);\n            XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n            CurveLoop profile = new CurveLoop();\n            profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n            doc.Create.NewFloor(new List<CurveLoop>{profile}, newSlabType, foundationLevel, true);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new Level named 'Level 1' at an elevation of 4.0 meters."}, {"role": "assistant", "content": "double elevation = UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"Level 1\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rename all loaded families containing '{old_name}' to '{new_name}'."}, {"role": "assistant", "content": "List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"{old_name}\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"{old_name}\", \"{new_name}\");\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get the IDs of all 3D views starting with '{prefix}' for export."}, {"role": "assistant", "content": "List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"{prefix}\") && !v.IsTemplate).Select(v => v.Id).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una cámara llamada '{view_name}' en la posición ({eye_x_m}, {eye_y_m}, {eye_z_m})."}, {"role": "assistant", "content": "ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    if (cameraView != null)\n    {\n        cameraView.Name = \"{view_name}\";\n        XYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits({eye_x_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_y_m}, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits({eye_z_m}, UnitTypeId.Meters));\n        XYZ upDir = XYZ.BasisZ;\n        XYZ forwardDir = XYZ.Zero - eyePos;\n        ViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\n        cameraView.SetOrientation(orientation);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva hoja con número '{sheet_number}' y nombre '{sheet_name}' usando el primer cajetín disponible."}, {"role": "assistant", "content": "FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"{sheet_name}\";\n        sheet.SheetNumber = \"{sheet_number}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new sheet with number '{sheet_number}' and name '{sheet_name}'."}, {"role": "assistant", "content": "FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.Name = \"{sheet_name}\";\n        sheet.SheetNumber = \"{sheet_number}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find the structural framing element with the mark '{mark_value}'."}, {"role": "assistant", "content": "string markValue = \"{mark_value}\";\nElement framingElement = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_StructuralFraming)\n    .WhereElementIsNotElementType()\n    .FirstOrDefault(e => {\n        Parameter p = e.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        return p != null && p.AsString() == markValue;\n    });"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add a tag to the column closest to the origin."}, {"role": "assistant", "content": "View activeView = doc.ActiveView;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => {\n    LocationPoint lp = c.Location as LocationPoint;\n    return lp != null ? lp.Point.DistanceTo(XYZ.Zero) : double.MaxValue;\n}).FirstOrDefault();\n\nif (activeView != null && column != null)\n{\n    LocationPoint loc = column.Location as LocationPoint;\n    if (loc != null)\n    {\n        IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Desune la geometría de dos elementos seleccionados."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer elemento\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo elemento\");\n\nif (ref1 != null && ref2 != null)\n{\n    Element e1 = doc.GetElement(ref1.ElementId);\n    Element e2 = doc.GetElement(ref2.ElementId);\n    if (e1 != null && e2 != null)\n    {\n        JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Oculta todos los elementos de anotación en la vista activa."}, {"role": "assistant", "content": "if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Connect two cable trays with an elbow fitting."}, {"role": "assistant", "content": "List<CableTray> trays = new FilteredElementCollector(doc).OfClass(typeof(CableTray)).Cast<CableTray>().ToList();\n\nif (trays.Count >= 2)\n{\n    Connector c1 = trays[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = trays[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    \n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewUnionFitting(c1, c2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nueva tabla de planificación para ventanas que incluya Marca de Tipo, Ancho y Alto."}, {"role": "assistant", "content": "string scheduleName = \"Tabla de Ventanas\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\n\nif (schedule != null)\n{\n    schedule.Name = scheduleName;\n    ScheduleDefinition def = schedule.Definition;\n    if (def != null)\n    {\n        SchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\n        SchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\n        SchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\n        \n        if (typeMarkField != null) def.AddField(typeMarkField);\n        if (widthField != null) def.AddField(widthField);\n        if (heightField != null) def.AddField(heightField);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén una lista de los nombres de todos los materiales."}, {"role": "assistant", "content": "List<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista 3D orientada desde el sureste."}, {"role": "assistant", "content": "string viewName = \"Vista 3D Sureste\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Load the '{family_name}.rfa' family and place it at (7,4,3) on Level 1."}, {"role": "assistant", "content": "string familyPath = \"C:/Common/Paths/{family_name}.rfa\";\nFamily tableFamily = null;\nbool familyLoaded = doc.LoadFamily(familyPath, out tableFamily);\n\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n\nif (familyLoaded && tableFamily != null && level1 != null)\n{\n    FamilySymbol tableSymbol = doc.GetElement(tableFamily.GetFamilySymbolIds().FirstOrDefault()) as FamilySymbol;\n    if (tableSymbol != null)\n    {\n        if (!tableSymbol.IsActive) tableSymbol.Activate();\n        XYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(7, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 3);\n        doc.Create.NewFamilyInstance(point, tableSymbol, level1, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Ajusta todas las ventanas para que tengan la altura del antepecho a {sill_height_mm}mm."}, {"role": "assistant", "content": "double sillHeight = UnitUtils.ConvertToInternalUnits({sill_height_mm}, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade un codo de 45 grados entre dos tuberías."}, {"role": "assistant", "content": "List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.ConnectorManager != null && p.ConnectorManager.UnusedConnectors.Size > 0).Take(2).ToList();\n\nif (pipes.Count >= 2)\n{\n    Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    \n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewElbowFitting(c1, c2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a DirectShape with a {size_m}x{size_m}x{size_m} meter box shape named '{shape_name}'."}, {"role": "assistant", "content": "TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits({size_m}, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"{shape_name}\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Conecta dos conductos con una unión en T."}, {"role": "assistant", "content": "List<Duct> ducts = new FilteredElementCollector(doc).OfClass(typeof(Duct)).Cast<Duct>().ToList();\nif (ducts.Count >= 2)\n{\n    Connector c1 = ducts[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = ducts[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (c1 != null && c2 != null)\n    {\n        doc.Create.NewTeeFitting(c1, c2);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todos los muros que no tienen nivel base asignado."}, {"role": "assistant", "content": "ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una vista de plano de plafón reflejado para el L01."}, {"role": "assistant", "content": "string levelName = \"L01\";\nstring viewName = \"Plano de Plafón L01\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\n\nif (vft != null && level != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level.Id);\n    if (rcp != null)\n    {\n        rcp.Name = viewName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un techo por contorno en el 'Nivel 2'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Roof\"))\n{\n    t.Start();\n    Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\n    RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n    if(roofLevel != null && roofType != null)\n    {\n        CurveArray roofProfile = new CurveArray();\n        roofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20 / 0.3048,0,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,0,0), new XYZ(20 / 0.3048,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(20 / 0.3048,30 / 0.3048,0), new XYZ(0,30 / 0.3048,0)));\n        roofProfile.Append(Line.CreateBound(new XYZ(0,30 / 0.3048,0), new XYZ(0,0,0)));\n        ModelCurveArray mapping = new ModelCurveArray();\n        doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de tubería con material de {material_name}."}, {"role": "assistant", "content": "string newTypeName = \"Tubería de {material_name}\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"{material_name}\")) as Material;\n\nif (pipeTypeToDuplicate != null && material != null)\n{\n    PipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\n    if (newType != null)\n    {\n        Parameter materialParam = newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n        if (materialParam != null && !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Activate all family symbols loaded in the project."}, {"role": "assistant", "content": "List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) \n    {\n        sym.Activate();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an extrusion roof with a {slope_percentage}% slope."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null && roofType != null)\n{\n    double run = 10.0;\n    double rise = run * ({slope_percentage} / 100.0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(run / 0.3048, 0, rise / 0.3048)));\n    \n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    \n    if (refPlane != null)\n    {\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, run / 0.3048);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a floor plan view for 'Roof'."}, {"role": "assistant", "content": "string levelName = \"Roof\";\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\n\nif (level != null && vft != null)\n{\n    ViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén todas las subcategorías de la categoría {buit_in_category_enum}."}, {"role": "assistant", "content": "Category targetCategory = doc.Settings.Categories.get_Item(BuiltInCategory.{buit_in_category_enum});\nCategoryNameMap subcategories = targetCategory.SubCategories;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo material llamado '{material_name}' y asígnale un color base y una transparencia."}, {"role": "assistant", "content": "string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca postes de iluminación cada 8m en un camino de 100m."}, {"role": "assistant", "content": "FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Activa todos los símbolos de familia cargados en el proyecto."}, {"role": "assistant", "content": "List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) \n    {\n        sym.Activate();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all instances of the Furniture category."}, {"role": "assistant", "content": "List<Element> furnitureInstances = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un sistema de vigas en un forjado seleccionado."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Check if a pipe is connected at both ends."}, {"role": "assistant", "content": "Pipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nbool isFullyConnected = false;\n\nif (pipe != null)\n{\n    isFullyConnected = pipe.ConnectorManager.UnusedConnectors.IsEmpty;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Add the 'Level', 'Mark', and 'Volume' fields to the column schedule."}, {"role": "assistant", "content": "ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Column\"));\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\n    if (levelField != null) def.AddField(levelField);\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\n    if (markField != null) def.AddField(markField);\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeField != null) def.AddField(volumeField);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Move a wall {distance_m} meters to the right."}, {"role": "assistant", "content": "Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (wall != null)\n{\n    XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters),0,0);\n    ElementTransformUtils.MoveElement(doc, wall.Id, translation);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aísla temporalmente la categoría {built_in_category_enum} en la vista activa."}, {"role": "assistant", "content": "ICollection<ElementId> elementIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.{built_in_category_enum}).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(elementIds);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplica el tipo de muro '{original_name}' y nómbralo '{new_name}'."}, {"role": "assistant", "content": "string originalName = \"{original_name}\";\nstring newName = \"{new_name}\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif (originalType != null)\n{\n    WallType newType = originalType.Duplicate(newName) as WallType;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Selecciona todos los muros del 'First Floor' y cambia su comentario a '{comment}'."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"First Floor\") as Level;\nList<Wall> wallsOnLevel = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level.Id).Cast<Wall>().ToList();\nforeach(Wall wall in wallsOnLevel)\n{\n    wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(\"{comment}\");\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Mueve un muro {distance_m} metros a la derecha."}, {"role": "assistant", "content": "Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\n\nif (wall != null)\n{\n    XYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters),0,0);\n    ElementTransformUtils.MoveElement(doc, wall.Id, translation);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate {level_to_duplicate} with a {offset_m}m offset and name it '{new_level_name}'."}, {"role": "assistant", "content": "string newLevelName = \"{new_level_name}\";\nLevel levelToDup = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{level_to_duplicate}\") as Level;\n\nif (levelToDup != null)\n{\n    double newElevation = levelToDup.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca una instancia de la familia '{family_name}' en el centro de la habitación '{room_name}'."}, {"role": "assistant", "content": "Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"{room_name}\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"{family_name}\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create beams between horizontally aligned columns."}, {"role": "assistant", "content": "FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\n\nif (beamSymbol != null && level != null && columns.Count >= 2)\n{\n    if(!beamSymbol.IsActive) beamSymbol.Activate();\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Beam);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todos los muros con más de 2.8 metros de altura."}, {"role": "assistant", "content": "double heightThreshold = UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rellena el parámetro de material de todos los muros con '{material_name}'."}, {"role": "assistant", "content": "Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"{material_name}\")) as Material;\nif(material != null)\n{\n    var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(material.Id);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a DirectShape with a {size_m}x{size_m}x{size_m} meter box shape named '{shape_name}'."}, {"role": "assistant", "content": "TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits({size_m}, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(result.GetGeometricalObjects());\n    ds.Name = \"{shape_name}\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén todos los muros del Level 1 que son estructurales."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> {{ levelFilter, categoryFilter, structuralFilter }});\n    List<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an extrusion roof with an arc profile."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\n\nif (level != null && roofType != null && doc.ActiveView != null)\n{\n    CurveArray profile = new CurveArray();\n    profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    ReferencePlane refPlane = doc.Create.NewReferencePlane(plane.Origin, plane.Origin + XYZ.BasisX, plane.Normal, doc.ActiveView);\n    if(refPlane != null)\n        doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra el host de una luminaria basada en cara."}, {"role": "assistant", "content": "FamilyInstance lightFixture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().Cast<FamilyInstance>().FirstOrDefault(fi => fi.HostFace != null);\n\nElement host = null;\nif (lightFixture != null)\n{\n    Reference hostFaceRef = lightFixture.HostFace;\n    if (hostFaceRef != null)\n    {\n        host = doc.GetElement(hostFaceRef.ElementId);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un circuito eléctrico conectando luminarias a un panel."}, {"role": "assistant", "content": "FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nList<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\nif (panel != null && fixtureIds.Count > 0)\n{\n    ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n    if(electricalSystem != null)\n    {\n        electricalSystem.SelectPanel(panel);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de texto de {text_size_mm}mm de color verde llamado '{type_name}'."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de texto llamado '{type_name}' de {text_size_mm}mm de color verde."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un tipo de muro 'Muro Básico 15cm' de 20cm y luego crea un muro de ese tipo."}, {"role": "assistant", "content": "string newTypeName = \"Muro Básico 15cm\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == newTypeName) as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallTypeToDuplicate != null)\n    {\n        newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if(newWallType!=null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            if(cs != null)\n            {\n                cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(20/10.0, UnitTypeId.Centimeters));\n                newWallType.SetCompoundStructure(cs);\n            }\n        }\n    }\n}\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nLine wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\nWall.Create(doc, wallCurve, newWallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 3D view oriented from the southeast."}, {"role": "assistant", "content": "string viewName = \"3D View Southeast\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\n\nif (vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    if (view3d != null)\n    {\n        XYZ eye = new XYZ(1, -1, 1);\n        XYZ up = new XYZ(0, 0, 1);\n        XYZ forward = new XYZ(-1, 1, -1);\n        view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n        view3d.Name = viewName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo nivel llamado 'Nivel 1' a una elevación de 3.5 metros."}, {"role": "assistant", "content": "string levelName = \"Nivel 1\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Model a cable tray between points ({p1x_m}, {p1y_m}, {p1z_m}) and ({p2x_m}, {p2y_m}, {p2z_m})."}, {"role": "assistant", "content": "CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif (trayType != null && level != null)\n{\n    XYZ p1 = new XYZ(UnitUtils.ConvertToInternalUnits({p1x_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p1y_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p1z_m}, UnitTypeId.Meters)); \n    XYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits({p2x_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p2y_m}, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits({p2z_m}, UnitTypeId.Meters));\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all family type names from the {built_in_category_enum} category."}, {"role": "assistant", "content": "List<Element> elementTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.{built_in_category_enum}).WhereElementIsElementType().ToList();\nList<string> typeNames = new List<string>();\nforeach(Element type in elementTypes)\n{\n    typeNames.Add(type.Name);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Obtén la longitud total de todos los muros del proyecto."}, {"role": "assistant", "content": "double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null && lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Inside the family editor, create a new horizontal reference plane named '{plane_name}'."}, {"role": "assistant", "content": "XYZ start = new XYZ(UnitUtils.ConvertToInternalUnits(-5, UnitTypeId.Meters), 0, 0);\nXYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0);\nXYZ normal = XYZ.BasisY;\n\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, activeView);\n    if (rp != null)\n    {\n        rp.Name = \"{plane_name}\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Exporta una lista de todas las advertencias del proyecto a un archivo de texto en el escritorio."}, {"role": "assistant", "content": "string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nstring filePath = System.IO.Path.Combine(desktopPath, \"RevitWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\nSystem.IO.File.WriteAllLines(filePath, warningDescriptions);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 25cm '{type_name}' type and then create a wall of that type."}, {"role": "assistant", "content": "WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 25 / 100 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Importa un archivo CAD llamado '{file_name}.dwg' en la vista actual."}, {"role": "assistant", "content": "string filePath = \"C:/CAD/{file_name}.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    doc.Import(filePath, options, activeView, out importId);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Une la geometría de una columna y un suelo que se cruzan."}, {"role": "assistant", "content": "Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\nif (column != null && floor != null)\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate the '{original_name}' wall type and name it '{new_name}'."}, {"role": "assistant", "content": "string originalName = \"{original_name}\";\nstring newName = \"{new_name}\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nif(originalType!=null)\n    originalType.Duplicate(newName);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Permite al usuario seleccionar un muro y obtén su ElementId."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un muro\");\nElementId selectedWallId = ElementId.InvalidElementId;\nif (pickedRef != null)\n{\n    selectedWallId = pickedRef.ElementId;\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una losa de cimentación estructural de 10cm de espesor."}, {"role": "assistant", "content": "Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\nif (foundationLevel != null && slabType != null)\n{\n    // Assuming the user wants to modify the existing type. For a new type, Duplicate() is needed.\n    CompoundStructure cs = slabType.GetCompoundStructure();\n    if (cs != null && cs.GetFirstCoreLayerIndex() != -1) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Centimeters));\n        slabType.SetCompoundStructure(cs);\n    }\n\n    XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,15,0); XYZ p4 = new XYZ(0,15,0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Coloca pilares en todos los cruces de la rejilla."}, {"role": "assistant", "content": "FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n\nif (colSymbol != null && level != null && grids.Count >= 2)\n{\n    if(!colSymbol.IsActive) colSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results = null;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                 if(results != null) {\n                     foreach (IntersectionResult ir in results)\n                     {\n                         doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.Column);\n                     }\n                 }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una nota de texto con el texto '{note_text}', una ubicación y un elemento de destino dados."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference targetRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\nXYZ textLocation = localUidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n\nView activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\n\nif (targetRef != null && textLocation != null && activeView != null && defaultTypeId != ElementId.InvalidElementId)\n{\n    TextNoteOptions opts = new TextNoteOptions(defaultTypeId);\n    TextNote note = TextNote.Create(doc, activeView.Id, textLocation, \"{note_text}\", opts);\n    if (note != null)\n    {\n        Leader leader = note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L);\n        leader.End = targetRef.GlobalPoint;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Modela un barandal en una escalera existente."}, {"role": "assistant", "content": "RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\n\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un circuito eléctrico conectando luminarias a un panel."}, {"role": "assistant", "content": "FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nList<ElementId> fixtureIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds().ToList();\n\nif (panel != null && fixtureIds.Count > 0)\n{\n    ElectricalSystem electricalSystem = ElectricalSystem.Create(doc, fixtureIds, ElectricalSystemType.PowerCircuit);\n    if(electricalSystem != null)\n    {\n        electricalSystem.SelectPanel(panel);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new 15cm wall type named 'SW12'."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Wall Type\"))\n{\n    t.Start();\n    string newTypeName = \"SW12\";\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n\n    if (wallTypeToDuplicate != null)\n    {\n        WallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n        if (newWallType != null)\n        {\n            CompoundStructure cs = newWallType.GetCompoundStructure();\n            int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n            cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n            cs.SetLayerWidth(coreLayerIndex, 15 / 100.0 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade un punto al Path of Travel seleccionado."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un Path of Travel\");\n\nif (pickedRef != null)\n{\n    PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n    if (pot != null)\n    {\n        IList<XYZ> points = pot.GetPath();\n        if (points != null && points.Count >= 2)\n        {\n            XYZ midPoint = (points[0] + points[1]) / 2;\n            points.Insert(1, midPoint); \n            pot.Update(points);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Display a dialog box with 'Yes' and 'No' options."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Hide all annotation elements in the active view."}, {"role": "assistant", "content": "if (doc.ActiveView != null)\n{\n    List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n    {\n        BuiltInCategory.OST_GenericAnnotation,\n        BuiltInCategory.OST_TextNotes,\n        BuiltInCategory.OST_Tags,\n        BuiltInCategory.OST_Dimensions,\n        BuiltInCategory.OST_DetailComponents\n    };\n    ElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\n    ICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\n    if(elementsToHide.Any())\n    {\n        doc.ActiveView.HideElements(elementsToHide);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo tipo de texto de {text_size_mm}mm de color verde llamado '{type_name}'."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una apertura de hueco (shaft) que atraviese desde el {bottom_level_name} al {top_level_name}."}, {"role": "assistant", "content": "Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{bottom_level_name}\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"{top_level_name}\");\n\nif (bottomLevel != null && topLevel != null)\n{\n    XYZ p1 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p2 = new XYZ(8 / 0.3048, 5 / 0.3048,0);\n    XYZ p3 = new XYZ(8 / 0.3048, 8 / 0.3048,0);\n    XYZ p4 = new XYZ(5 / 0.3048, 8 / 0.3048,0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un nuevo material llamado '{material_name}' y asígnale un color base y una transparencia."}, {"role": "assistant", "content": "string materialName = \"{material_name}\";\nElementId materialId = Material.Create(doc, materialName);\nif (materialId != ElementId.InvalidElementId)\n{\n    Material material = doc.GetElement(materialId) as Material;\n    if (material != null)\n    {\n        material.Color = new Color(210, 230, 240);\n        material.Transparency = 80;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rotate project north 30 degrees clockwise."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Rotate Project North\"))\n{\n    t.Start();\n    BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsShared);\n\n    if (projectBasePoint != null)\n    {\n        double angleInRadians = -(30 * Math.PI / 180.0);\n        using (var bbox = projectBasePoint.get_BoundingBox(null))\n        {\n          if (bbox != null)\n          {\n            XYZ center = bbox.Min;\n            Line axis = Line.CreateBound(center, center + XYZ.BasisZ);\n            ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);\n          }\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new door type named 'Double-Glass' and set its fire rating to '{fire_rating_value}'."}, {"role": "assistant", "content": "FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"Double-Glass\") as FamilySymbol;\n    if (newDoorType != null)\n    {\n        Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n        if(fireRatingParam != null && !fireRatingParam.IsReadOnly)\n        {\n            fireRatingParam.Set(\"{fire_rating_value}\");\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Mueve los elementos seleccionados {distance_m} metros hacia arriba."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits({distance_m}, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un suelo con un contorno de 10 por 8 metros."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\nif (level != null && floorType != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> {{ loop }}, floorType.Id, level.Id);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Encuentra todas las familias de anotación y cuenta cuántas hay."}, {"role": "assistant", "content": "List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();\nint count = annotationFamilies.Count;"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un DirectShape esférico con un radio de {radius_m} metros."}, {"role": "assistant", "content": "double radius = {radius_m} / 0.3048;\nList<GeometryObject> solids = new List<GeometryObject>();\nFrame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\nArc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.BasisX, frame.BasisY);\nLine line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\nCurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\nSolid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\nsolids.Add(sphere);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n\nif (ds != null)\n{\n    ds.SetShape(solids);\n    ds.Name = \"Esfera DirectShape\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Rename all schedules containing '{text_to_find}' to '{new_text}'."}, {"role": "assistant", "content": "List<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"{text_to_find}\")).ToList();\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"{text_to_find}\", \"{new_text}\");\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Aísla temporalmente todo el mobiliario en la vista activa."}, {"role": "assistant", "content": "ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(furnitureIds);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create an assembly from the selected elements."}, {"role": "assistant", "content": "UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n\nif (selectedIds != null && selectedIds.Count > 0)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    if (assemblyInstance != null)\n    {\n        assemblyInstance.Name = \"New Assembly\";\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea una rejilla de {num_horizontal} ejes horizontales y {num_vertical} verticales, espaciados 8 metros."}, {"role": "assistant", "content": "double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\nint countH = {num_horizontal};\nint countV = {num_vertical};\nfor (int i = 0; i < countH; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((countV - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < countV; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (countH - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Activa todos los FamilySymbol del proyecto."}, {"role": "assistant", "content": "List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (FamilySymbol sym in symbols)\n{\n    if (!sym.IsActive)\n    {\n        sym.Activate();\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Crea un pilar del tipo 'Pilar 30x60' en cada intersección de la rejilla."}, {"role": "assistant", "content": "FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Pilar 30x60\");\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\nif (columnSymbol != null && level != null)\n{\n    if (!columnSymbol.IsActive) columnSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            IntersectionResultArray results;\n            if(grids[i].Curve.Intersect(grids[j].Curve, out results) == SetComparisonResult.Overlap)\n            {\n                if (results != null && !results.IsEmpty)\n                {\n                    foreach (IntersectionResult ir in results)\n                    {\n                        doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                    }\n                }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Dado un muro, obtén los materiales y sus volúmenes."}, {"role": "assistant", "content": "UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un muro\");\n\nDictionary<string, double> materialVolumes = new Dictionary<string, double>();\nif (pickedRef != null)\n{\n    Wall wall = doc.GetElement(pickedRef) as Wall;\n    if (wall != null)\n    {\n        Parameter areaParam = wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED);\n        if (areaParam != null && areaParam.HasValue)\n        {\n            double wallArea = areaParam.AsDouble();\n            WallType wallType = wall.WallType;\n            if (wallType != null)\n            {\n                CompoundStructure cs = wallType.GetCompoundStructure();\n                if (cs != null)\n                {\n                    foreach(CompoundStructureLayer layer in cs.GetLayers())\n                    {\n                        Material material = doc.GetElement(layer.MaterialId) as Material;\n                        if(material != null)\n                        {\n                            double volume = layer.Width * wallArea; \n                            materialVolumes[material.Name] = volume;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get a list of all plan views in the project."}, {"role": "assistant", "content": "List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Inserta una armadura (truss) de 5.0 metros entre dos puntos."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Truss\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    FamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Family.Name.Contains(\"Truss\"));\n\n    if (level != null && trussSymbol != null)\n    {\n        if (!trussSymbol.IsActive) { trussSymbol.Activate(); }\n        Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(5.0 / 0.3048, 10, 0));\n        doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural);\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Duplicate {level_to_duplicate} with a {offset_m}m offset and name it '{new_level_name}'."}, {"role": "assistant", "content": "string newLevelName = \"{new_level_name}\";\nLevel levelToDup = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"{level_to_duplicate}\") as Level;\n\nif (levelToDup != null)\n{\n    double newElevation = levelToDup.ProjectElevation + UnitUtils.ConvertToInternalUnits({offset_m}, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    if (newLevel != null)\n    {\n        newLevel.Name = newLevelName;\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 10cm '{type_name}' type and then create a wall of that type."}, {"role": "assistant", "content": "WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = null;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"{type_name}\") as WallType;\n    if (newWallType != null)\n    {\n        CompoundStructure cs = newWallType.GetCompoundStructure();\n        if (cs != null && cs.LayerCount > 0)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), 10 / 100 / 0.3048);\n            newWallType.SetCompoundStructure(cs);\n        }\n    }\n}\nif (newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10 / 0.3048, 0, 0));\n    double height = 3 / 0.3048;\n    if (level != null)\n    {\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, height, 0, false, false);\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Añade montantes a todas las líneas de rejilla de un muro cortina."}, {"role": "assistant", "content": "Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain);\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\n\nif (curtainWall != null && mullionType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    if (grid != null)\n    {\n        foreach (ElementId gridLineId in grid.GetVGridLineIds())\n        {\n            CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n            if(line != null) grid.AddMullions(line, mullionType);\n        }\n        foreach (ElementId gridLineId in grid.GetUGridLineIds())\n        {\n            CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n            if(line != null) grid.AddMullions(line, mullionType);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Muestra un cuadro de diálogo con las opciones 'Sí', 'No' y 'Cancelar'."}, {"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new {text_size_mm}mm text type named '{type_name}' in green color."}, {"role": "assistant", "content": "TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nTextNoteType newType = null;\nif (defaultType != null)\n{\n    newType = defaultType.Duplicate(\"{type_name}\") as TextNoteType;\n    if (newType != null)\n    {\n        Parameter textSizeParam = newType.get_Parameter(BuiltInParameter.TEXT_SIZE);\n        if (textSizeParam != null && !textSizeParam.IsReadOnly)\n        {\n            textSizeParam.Set({text_size_mm} / 304.8);\n        }\n        Parameter lineColorParam = newType.get_Parameter(BuiltInParameter.LINE_COLOR);\n        if (lineColorParam != null && !lineColorParam.IsReadOnly)\n        {\n             lineColorParam.Set(65280);\n        }\n    }\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a 'Generic - 200mm' wall on 'First Floor' from (0,0) to (10,0)."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"First Floor\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Generic - 200mm\") as WallType;\nXYZ startPoint = new XYZ(0, 0, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(0, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nWall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Draw a {width_mm}x{height_mm} millimeter rectangular ventilation duct."}, {"role": "assistant", "content": "using (Transaction t = new Transaction(doc, \"Create Duct\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).Cast<DuctType>().FirstOrDefault(d => d.Shape == ConnectorProfileType.Rectangular);\n    MEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.SupplyAir);\n\n    if (level != null && ductType != null && systemType != null)\n    {\n        XYZ p1 = new XYZ(0, 0, 3 / 0.3048);\n        XYZ p2 = new XYZ(10 / 0.3048, 0, 3 / 0.3048);\n        Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n\n        if (duct != null)\n        {\n            Parameter widthParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM);\n            Parameter heightParam = duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM);\n            if (widthParam != null && !widthParam.IsReadOnly) widthParam.Set({width_mm} / 304.8);\n            if (heightParam != null && !heightParam.IsReadOnly) heightParam.Set({height_mm} / 304.8);\n        }\n    }\n    t.Commit();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Get all rooms on Nivel 2."}, {"role": "assistant", "content": "Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nList<Element> roomsOnLevel = new List<Element>();\n\nif (level != null)\n{\n    roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level.Id).ToList();\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a new Level named 'First Floor' at an elevation of 3.5 meters."}, {"role": "assistant", "content": "double elevation = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\n\nif (newLevel != null)\n{\n    newLevel.Name = \"First Floor\";\n}"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Find all walls taller than 3.15 meters."}, {"role": "assistant", "content": "double heightThreshold = UnitUtils.ConvertToInternalUnits(3.15, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}]}
{"messages": [{"role": "system", "content": "Eres un asistente experto en la API de Revit. Responde siempre con código C# válido."}, {"role": "user", "content": "Create a rectangular opening in a floor."}, {"role": "assistant", "content": "Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\n\nif (floor != null)\n{\n    XYZ p1 = new XYZ(1 / 0.3048, 1 / 0.3048, 0);\n    XYZ p2 = new XYZ(3 / 0.3048, 1 / 0.3048, 0);\n    XYZ p3 = new XYZ(3 / 0.3048, 3 / 0.3048, 0);\n    XYZ p4 = new XYZ(1 / 0.3048, 3 / 0.3048, 0);\n    CurveArray profile = new CurveArray();\n    profile.Append(Line.CreateBound(p1, p2));\n    profile.Append(Line.CreateBound(p2, p3));\n    profile.Append(Line.CreateBound(p3, p4));\n    profile.Append(Line.CreateBound(p4, p1));\n    doc.Create.NewOpening(floor, profile, true);\n}"}]}