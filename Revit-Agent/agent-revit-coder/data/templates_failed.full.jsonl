{"prompt":"Modela un plafón a {height_m} metros de altura en {level_name}.","completion":"CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (ceilingType != null \u0026\u0026 level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,0,0)));\n\n    Ceiling ceiling = Ceiling.Create(doc, new List\u003cCurveLoop\u003e{{profile}}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null \u0026\u0026 !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    }\n}","errors":["34:CS1950 The best overloaded Add method \u0027System.Collections.Generic.List\u003cAutodesk.Revit.DB.CurveLoop\u003e.Add(Autodesk.Revit.DB.CurveLoop)\u0027 for the collection initializer has some invalid arguments","34:CS1503 Argument 1: cannot convert from \u0027double\u0027 to \u0027Autodesk.Revit.DB.CurveLoop\u0027"]}
{"prompt":"Model a ceiling at a height of {height_m} meters on {level_name}.","completion":"CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\n\nif (ceilingType != null \u0026\u0026 level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0)));\n    profile.Append(Line.CreateBound(new XYZ(0,UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0), new XYZ(0,0,0)));\n\n    Ceiling ceiling = Ceiling.Create(doc, new List\u003cCurveLoop\u003e{{profile}}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null \u0026\u0026 !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    }\n}","errors":["34:CS1950 The best overloaded Add method \u0027System.Collections.Generic.List\u003cAutodesk.Revit.DB.CurveLoop\u003e.Add(Autodesk.Revit.DB.CurveLoop)\u0027 for the collection initializer has some invalid arguments","34:CS1503 Argument 1: cannot convert from \u0027double\u0027 to \u0027Autodesk.Revit.DB.CurveLoop\u0027"]}
{"prompt":"Elimina todas las líneas de detalle en la vista activa.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    ICollection\u003cElementId\u003e detailLines = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(DetailLine)).ToElementIds();\n    if (detailLines.Count \u003e 0)\n    {\n        doc.Delete(detailLines);\n    }\n}","errors":["25:CS1061 \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.DetailLine\u003e\u0027 does not contain a definition for \u0027ToElementIds\u0027 and no extension method \u0027ToElementIds\u0027 accepting a first argument of type \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.DetailLine\u003e\u0027 could be found (are you missing a using directive or an assembly reference?)"]}
{"prompt":"Cambia el nombre de todas las vistas de planta para que empiecen con \u0027{prefix}\u0027.","completion":"string prefix = \"{prefix}\";\nList\u003cViewPlan\u003e planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cViewPlan\u003e().Where(v =\u003e !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}","errors":["22:CS0128 A local variable named \u0027prefix\u0027 is already defined in this scope"]}
{"prompt":"Rename all plan views to start with \u0027{prefix}\u0027.","completion":"string prefix = \"{prefix}\";\nList\u003cViewPlan\u003e planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cViewPlan\u003e().Where(v =\u003e !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}","errors":["22:CS0128 A local variable named \u0027prefix\u0027 is already defined in this scope"]}
{"prompt":"Añade el prefijo \u0027{prefix}\u0027 a todas las vistas de plano.","completion":"string prefix = \"{prefix}\";\nList\u003cViewPlan\u003e planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cViewPlan\u003e().Where(v =\u003e !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}","errors":["22:CS0128 A local variable named \u0027prefix\u0027 is already defined in this scope"]}
{"prompt":"Exporta la vista 3D activa a NWC para Navisworks.","completion":"View3D view3d = doc.ActiveView as View3D;\n\nif (view3d != null)\n{\n    string folderPath = \"C:/RevitExports/\";\n    string fileName = view3d.Name + \".nwc\";\n    NavisworksExportOptions options = new NavisworksExportOptions();\n    options.ExportScope = NavisworksExportScope.View;\n    options.ViewId = view3d.Id;\n    doc.Export(folderPath, fileName, options);","errors":["35:CS1513 } expected"]}
{"prompt":"Export the current 3D view to NWC for Navisworks.","completion":"View3D view3d = doc.ActiveView as View3D;\n\nif (view3d != null)\n{\n    string folderPath = \"C:/RevitExports/\";\n    string fileName = view3d.Name + \".nwc\";\n    NavisworksExportOptions options = new NavisworksExportOptions();\n    options.ExportScope = NavisworksExportScope.View;\n    options.ViewId = view3d.Id;\n    doc.Export(folderPath, fileName, options);","errors":["35:CS1513 } expected"]}
{"prompt":"Cambia el nivel de detalle de la vista actual a \u0027{detail_level_enum}\u0027.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.{detail_level_enum};\n}","errors":["25:CS0117 \u0027Autodesk.Revit.DB.ViewDetailLevel\u0027 does not contain a definition for \u0027ViewDetailLevel\u0027"]}
{"prompt":"Change the detail level of the current view to \u0027{detail_level_enum}\u0027.","completion":"View activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.DetailLevel = ViewDetailLevel.{detail_level_enum};\n}","errors":["25:CS0117 \u0027Autodesk.Revit.DB.ViewDetailLevel\u0027 does not contain a definition for \u0027ViewDetailLevel\u0027"]}
{"prompt":"Exporta el documento a la ruta \u0027{folder_path}{file_name}\u0027 con la versión IFC {ifc_version_enum}.","completion":"string folderPath = \"{folder_path}\";\nstring fileName = \"{file_name}\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.{ifc_version_enum};\ndoc.Export(folderPath, fileName, options);","errors":["26:CS0117 \u0027Autodesk.Revit.DB.IFCVersion\u0027 does not contain a definition for \u0027IFCVersion\u0027"]}
{"prompt":"Export the document to \u0027{folder_path}{file_name}\u0027 with IFC version {ifc_version_enum}.","completion":"string folderPath = \"{folder_path}\";\nstring fileName = \"{file_name}\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.{ifc_version_enum};\ndoc.Export(folderPath, fileName, options);","errors":["26:CS0117 \u0027Autodesk.Revit.DB.IFCVersion\u0027 does not contain a definition for \u0027IFCVersion\u0027"]}
{"prompt":"Obtén la geometría sólida de un elemento seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Selecciona un elemento para obtener su geometría\");\n\nList\u003cSolid\u003e solids = new List\u003cSolid\u003e();\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        Options opt = new Options() {{ ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine }};\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if (geoElem != null)\n        {\n            solids = geoElem.OfType\u003cSolid\u003e().Where(s =\u003e s.Volume \u003e 0).ToList();\n        }\n    }\n}","errors":["30:CS1922 Cannot initialize type \u0027Autodesk.Revit.DB.Options\u0027 with a collection initializer because it does not implement \u0027System.Collections.IEnumerable\u0027","30:CS0103 The name \u0027ComputeReferences\u0027 does not exist in the current context","30:CS0103 The name \u0027DetailLevel\u0027 does not exist in the current context"]}
{"prompt":"Get the solid geometry of a selected element.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, \"Select an element to get its geometry\");\n\nList\u003cSolid\u003e solids = new List\u003cSolid\u003e();\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef);\n    if (elem != null)\n    {\n        Options opt = new Options() {{ ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine }};\n        GeometryElement geoElem = elem.get_Geometry(opt);\n        if (geoElem != null)\n        {\n            solids = geoElem.OfType\u003cSolid\u003e().Where(s =\u003e s.Volume \u003e 0).ToList();\n        }\n    }\n}","errors":["30:CS1922 Cannot initialize type \u0027Autodesk.Revit.DB.Options\u0027 with a collection initializer because it does not implement \u0027System.Collections.IEnumerable\u0027","30:CS0103 The name \u0027ComputeReferences\u0027 does not exist in the current context","30:CS0103 The name \u0027DetailLevel\u0027 does not exist in the current context"]}
{"prompt":"Obtén todos los muros de un modelo vinculado que se cruzan con una caja de delimitación.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\nList\u003cElement\u003e linkedWalls = new List\u003cElement\u003e();\n\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    if (linkDoc != null)\n    {\n        BoundingBoxXYZ bbox = new BoundingBoxXYZ();\n        bbox.Min = new XYZ(0,0,0);\n        bbox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(bbox.Min, bbox.Max));\n        linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToList();\n    }\n}","errors":["33:CS1061 \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Wall\u003e\u0027 does not contain a definition for \u0027WherePasses\u0027 and no extension method \u0027WherePasses\u0027 accepting a first argument of type \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Wall\u003e\u0027 could be found (are you missing a using directive or an assembly reference?)"]}
{"prompt":"Get all walls from a linked model that intersect with a bounding box.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\nList\u003cElement\u003e linkedWalls = new List\u003cElement\u003e();\n\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    if (linkDoc != null)\n    {\n        BoundingBoxXYZ bbox = new BoundingBoxXYZ();\n        bbox.Min = new XYZ(0,0,0);\n        bbox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters),UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\n        BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(bbox.Min, bbox.Max));\n        linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToList();\n    }\n}","errors":["33:CS1061 \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Wall\u003e\u0027 does not contain a definition for \u0027WherePasses\u0027 and no extension method \u0027WherePasses\u0027 accepting a first argument of type \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Wall\u003e\u0027 could be found (are you missing a using directive or an assembly reference?)"]}
{"prompt":"Obtén todas las subcategorías de la categoría {buit_in_category_enum}.","completion":"Category targetCategory = doc.Settings.Categories.get_Item(BuiltInCategory.{buit_in_category_enum});\nCategoryNameMap subcategories = targetCategory.SubCategories;","errors":["22:CS0117 \u0027Autodesk.Revit.DB.BuiltInCategory\u0027 does not contain a definition for \u0027buit_in_category_enum\u0027"]}
{"prompt":"Get all subcategories from the {buit_in_category_enum} category.","completion":"Category targetCategory = doc.Settings.Categories.get_Item(BuiltInCategory.{buit_in_category_enum});\nCategoryNameMap subcategories = targetCategory.SubCategories;","errors":["22:CS0117 \u0027Autodesk.Revit.DB.BuiltInCategory\u0027 does not contain a definition for \u0027buit_in_category_enum\u0027"]}
{"prompt":"Obtén una lista de los nombres de todos los tipos de familia de la categoría {built_in_category_enum}.","completion":"List\u003cElement\u003e elementTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.{built_in_category_enum}).WhereElementIsElementType().ToList();\nList\u003cstring\u003e typeNames = new List\u003cstring\u003e();\nforeach(Element type in elementTypes)\n{\n    typeNames.Add(type.Name);\n}","errors":["21:CS0117 \u0027Autodesk.Revit.DB.BuiltInCategory\u0027 does not contain a definition for \u0027BuiltInCategory\u0027"]}
{"prompt":"Get a list of all family type names from the {built_in_category_enum} category.","completion":"List\u003cElement\u003e elementTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.{built_in_category_enum}).WhereElementIsElementType().ToList();\nList\u003cstring\u003e typeNames = new List\u003cstring\u003e();\nforeach(Element type in elementTypes)\n{\n    typeNames.Add(type.Name);\n}","errors":["21:CS0117 \u0027Autodesk.Revit.DB.BuiltInCategory\u0027 does not contain a definition for \u0027BuiltInCategory\u0027"]}
{"prompt":"Oculta todos los muros que sean más cortos de {length_m} metros.","completion":"double lengthThreshold = UnitUtils.ConvertToInternalUnits({length_m}, UnitTypeId.Meters);\nList\u003cWall\u003e walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\nList\u003cElementId\u003e shortWallIds = new List\u003cElementId\u003e();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    foreach(Wall wall in walls)\n    {\n        Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n        if(lengthParam != null \u0026\u0026 lengthParam.HasValue \u0026\u0026 lengthParam.AsDouble() \u003c lengthThreshold)\n        {\n            shortWallIds.Add(wall.Id);\n        }\n    }\n    if (shortWallIds.Count \u003e 0)\n    {\n        activeView.HideElements(shortWallIds);\n    }\n}","errors":["23:CS1061 \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Wall\u003e\u0027 does not contain a definition for \u0027WhereElementIsNotElementType\u0027 and no extension method \u0027WhereElementIsNotElementType\u0027 accepting a first argument of type \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Wall\u003e\u0027 could be found (are you missing a using directive or an assembly reference?)"]}
{"prompt":"Hide all walls shorter than {length_m} meters.","completion":"double lengthThreshold = UnitUtils.ConvertToInternalUnits({length_m}, UnitTypeId.Meters);\nList\u003cWall\u003e walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\nList\u003cElementId\u003e shortWallIds = new List\u003cElementId\u003e();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    foreach(Wall wall in walls)\n    {\n        Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n        if(lengthParam != null \u0026\u0026 lengthParam.HasValue \u0026\u0026 lengthParam.AsDouble() \u003c lengthThreshold)\n        {\n            shortWallIds.Add(wall.Id);\n        }\n    }\n    if (shortWallIds.Count \u003e 0)\n    {\n        activeView.HideElements(shortWallIds);\n    }\n}","errors":["23:CS1061 \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Wall\u003e\u0027 does not contain a definition for \u0027WhereElementIsNotElementType\u0027 and no extension method \u0027WhereElementIsNotElementType\u0027 accepting a first argument of type \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Wall\u003e\u0027 could be found (are you missing a using directive or an assembly reference?)"]}
{"prompt":"Aísla temporalmente la categoría {built_in_category_enum} en la vista activa.","completion":"ElementId categoryId = new ElementId(BuiltInCategory.{built_in_category_enum});\nICollection\u003cElementId\u003e categoryIds = new List\u003cElementId\u003e { categoryId };\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateCategoriesTemporary(categoryIds);\n}","errors":["21:CS0117 \u0027Autodesk.Revit.DB.BuiltInCategory\u0027 does not contain a definition for \u0027BuiltInCategory\u0027"]}
{"prompt":"Temporarily isolate the {built_in_category_enum} category in the active view.","completion":"ElementId categoryId = new ElementId(BuiltInCategory.{built_in_category_enum});\nICollection\u003cElementId\u003e categoryIds = new List\u003cElementId\u003e { categoryId };\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateCategoriesTemporary(categoryIds);\n}","errors":["21:CS0117 \u0027Autodesk.Revit.DB.BuiltInCategory\u0027 does not contain a definition for \u0027BuiltInCategory\u0027"]}
{"prompt":"Crea {num_worksets} worksets para las disciplinas de ingeniería.","completion":"List\u003cstring\u003e worksetNames = new List\u003cstring\u003e {{ \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}","errors":["22:CS1501 No overload for method \u0027Add\u0027 takes 5 arguments"]}
{"prompt":"Create {num_worksets} worksets for engineering disciplines.","completion":"List\u003cstring\u003e worksetNames = new List\u003cstring\u003e {{ \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}","errors":["22:CS1501 No overload for method \u0027Add\u0027 takes 5 arguments"]}
{"prompt":"Crea {num_worksets} worksets para las disciplinas de ingeniería.","completion":"List\u003cstring\u003e worksetNames = new List\u003cstring\u003e {{ \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}","errors":["22:CS1501 No overload for method \u0027Add\u0027 takes 5 arguments"]}
{"prompt":"Create {num_worksets} worksets for engineering disciplines.","completion":"List\u003cstring\u003e worksetNames = new List\u003cstring\u003e {{ \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}","errors":["22:CS1501 No overload for method \u0027Add\u0027 takes 5 arguments"]}
{"prompt":"Aísla temporalmente la categoría {built_in_category_enum} en la vista activa.","completion":"ICollection\u003cElementId\u003e elementIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.{built_in_category_enum}).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(elementIds);\n}","errors":["21:CS0117 \u0027Autodesk.Revit.DB.BuiltInCategory\u0027 does not contain a definition for \u0027BuiltInCategory\u0027"]}
{"prompt":"Temporarily isolate the {built_in_category_enum} category in the active view.","completion":"ICollection\u003cElementId\u003e elementIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.{built_in_category_enum}).WhereElementIsNotElementType().ToElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null)\n{\n    activeView.IsolateElementsTemporary(elementIds);\n}","errors":["21:CS0117 \u0027Autodesk.Revit.DB.BuiltInCategory\u0027 does not contain a definition for \u0027BuiltInCategory\u0027"]}
{"prompt":"Crea {num_worksets} worksets para las disciplinas de ingeniería.","completion":"List\u003cstring\u003e worksetNames = new List\u003cstring\u003e {{ \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}","errors":["22:CS1501 No overload for method \u0027Add\u0027 takes 5 arguments"]}
{"prompt":"Create {num_worksets} worksets for engineering disciplines.","completion":"List\u003cstring\u003e worksetNames = new List\u003cstring\u003e {{ \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset newWorkset = Workset.Create(doc, name);\n}","errors":["22:CS1501 No overload for method \u0027Add\u0027 takes 5 arguments"]}
{"prompt":"Obtén la longitud total de todos los muros del proyecto.","completion":"double totalLength = 0.0;\nList\u003cWall\u003e walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null \u0026\u0026 lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}","errors":["22:CS1061 \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Wall\u003e\u0027 does not contain a definition for \u0027WhereElementIsNotElementType\u0027 and no extension method \u0027WhereElementIsNotElementType\u0027 accepting a first argument of type \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Wall\u003e\u0027 could be found (are you missing a using directive or an assembly reference?)"]}
{"prompt":"Get the total length of all walls in the project.","completion":"double totalLength = 0.0;\nList\u003cWall\u003e walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null \u0026\u0026 lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}","errors":["22:CS1061 \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Wall\u003e\u0027 does not contain a definition for \u0027WhereElementIsNotElementType\u0027 and no extension method \u0027WhereElementIsNotElementType\u0027 accepting a first argument of type \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Wall\u003e\u0027 could be found (are you missing a using directive or an assembly reference?)"]}
{"prompt":"Obtén la longitud total de todos los muros del proyecto.","completion":"double totalLength = 0.0;\nList\u003cWall\u003e walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null \u0026\u0026 lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}","errors":["22:CS1061 \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Wall\u003e\u0027 does not contain a definition for \u0027WhereElementIsNotElementType\u0027 and no extension method \u0027WhereElementIsNotElementType\u0027 accepting a first argument of type \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Wall\u003e\u0027 could be found (are you missing a using directive or an assembly reference?)"]}
{"prompt":"Get the total length of all walls in the project.","completion":"double totalLength = 0.0;\nList\u003cWall\u003e walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\nforeach (Wall wall in walls)\n{\n    Parameter lengthParam = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n    if (lengthParam != null \u0026\u0026 lengthParam.HasValue)\n    {\n        totalLength += lengthParam.AsDouble();\n    }\n}","errors":["22:CS1061 \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Wall\u003e\u0027 does not contain a definition for \u0027WhereElementIsNotElementType\u0027 and no extension method \u0027WhereElementIsNotElementType\u0027 accepting a first argument of type \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Wall\u003e\u0027 could be found (are you missing a using directive or an assembly reference?)"]}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"ICollection\u003cElementId\u003e allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection\u003cElementId\u003e usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w =\u003e w.GetTypeId()).Distinct().ToList();\nList\u003cElementId\u003e unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\ndoc.Delete(unusedWallTypes);","errors":["21:CS1061 \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.WallType\u003e\u0027 does not contain a definition for \u0027ToElementIds\u0027 and no extension method \u0027ToElementIds\u0027 accepting a first argument of type \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.WallType\u003e\u0027 could be found (are you missing a using directive or an assembly reference?)","22:CS1061 \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Wall\u003e\u0027 does not contain a definition for \u0027WhereElementIsNotElementType\u0027 and no extension method \u0027WhereElementIsNotElementType\u0027 accepting a first argument of type \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Wall\u003e\u0027 could be found (are you missing a using directive or an assembly reference?)"]}
{"prompt":"Delete all unused wall types in the project.","completion":"ICollection\u003cElementId\u003e allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection\u003cElementId\u003e usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w =\u003e w.GetTypeId()).Distinct().ToList();\nList\u003cElementId\u003e unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\ndoc.Delete(unusedWallTypes);","errors":["21:CS1061 \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.WallType\u003e\u0027 does not contain a definition for \u0027ToElementIds\u0027 and no extension method \u0027ToElementIds\u0027 accepting a first argument of type \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.WallType\u003e\u0027 could be found (are you missing a using directive or an assembly reference?)","22:CS1061 \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Wall\u003e\u0027 does not contain a definition for \u0027WhereElementIsNotElementType\u0027 and no extension method \u0027WhereElementIsNotElementType\u0027 accepting a first argument of type \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Wall\u003e\u0027 could be found (are you missing a using directive or an assembly reference?)"]}
{"prompt":"Crea {num_worksets} worksets de arquitectura.","completion":"List\u003cstring\u003e worksetNames = new List\u003cstring\u003e {{ \"TAD_ARQ_MAM\", \"TAD_ARQ_ACA\", \"TAD_ARQ_PLA\", \"TAD_ARQ_PSO\", \"TAD_ARQ_HRE\", \"TAD_ARQ_ALU\", \"TAD_ARQ_CAR\", \"TAD_ARQ_MOB\", \"TAD_ARQ_PLO\", \"TAD_ARQ_EXT\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}","errors":["22:CS1501 No overload for method \u0027Add\u0027 takes 10 arguments"]}
{"prompt":"Create {num_worksets} architectural worksets.","completion":"List\u003cstring\u003e worksetNames = new List\u003cstring\u003e {{ \"TAD_ARQ_WALLS\", \"TAD_ARQ_FINISHES\", \"TAD_ARQ_CEILINGS\", \"TAD_ARQ_FLOORS\", \"TAD_ARQ_RAILINGS\", \"TAD_ARQ_WINDOWS\", \"TAD_ARQ_CARPENTRY\", \"TAD_ARQ_FURNITURE\", \"TAD_ARQ_PLUMBING\", \"TAD_ARQ_EXTERIOR\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}","errors":["22:CS1501 No overload for method \u0027Add\u0027 takes 10 arguments"]}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"ICollection\u003cElementId\u003e allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection\u003cElementId\u003e usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w =\u003e w.GetTypeId()).Distinct().ToList();\nList\u003cElementId\u003e unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}","errors":["21:CS1061 \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.WallType\u003e\u0027 does not contain a definition for \u0027ToElementIds\u0027 and no extension method \u0027ToElementIds\u0027 accepting a first argument of type \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.WallType\u003e\u0027 could be found (are you missing a using directive or an assembly reference?)","22:CS1061 \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Wall\u003e\u0027 does not contain a definition for \u0027WhereElementIsNotElementType\u0027 and no extension method \u0027WhereElementIsNotElementType\u0027 accepting a first argument of type \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Wall\u003e\u0027 could be found (are you missing a using directive or an assembly reference?)"]}
{"prompt":"Delete all unused wall types in the project.","completion":"ICollection\u003cElementId\u003e allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection\u003cElementId\u003e usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w =\u003e w.GetTypeId()).Distinct().ToList();\nList\u003cElementId\u003e unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}","errors":["21:CS1061 \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.WallType\u003e\u0027 does not contain a definition for \u0027ToElementIds\u0027 and no extension method \u0027ToElementIds\u0027 accepting a first argument of type \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.WallType\u003e\u0027 could be found (are you missing a using directive or an assembly reference?)","22:CS1061 \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Wall\u003e\u0027 does not contain a definition for \u0027WhereElementIsNotElementType\u0027 and no extension method \u0027WhereElementIsNotElementType\u0027 accepting a first argument of type \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Wall\u003e\u0027 could be found (are you missing a using directive or an assembly reference?)"]}
{"prompt":"Obtén todos los muros del {level_name} que son estructurales.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nif (level != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e {{ levelFilter, categoryFilter, structuralFilter }});\n    List\u003cElement\u003e structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}","errors":["30:CS1501 No overload for method \u0027Add\u0027 takes 3 arguments"]}
{"prompt":"Get all walls on {level_name} that are structural.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nif (level != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e {{ levelFilter, categoryFilter, structuralFilter }});\n    List\u003cElement\u003e structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}","errors":["30:CS1501 No overload for method \u0027Add\u0027 takes 3 arguments"]}
{"prompt":"Establece la visibilidad de la categoría \u0027{category_name}\u0027 en falso en la vista activa.","completion":"Category category = doc.Settings.Categories.get_Item(BuiltInCategory.{category_name});\nif (category != null \u0026\u0026 doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(category.Id, true);\n}","errors":["22:CS0117 \u0027Autodesk.Revit.DB.BuiltInCategory\u0027 does not contain a definition for \u0027category_name\u0027"]}
{"prompt":"Set the visibility of the \u0027{category_name}\u0027 category to false in the active view.","completion":"Category category = doc.Settings.Categories.get_Item(BuiltInCategory.{category_name});\nif (category != null \u0026\u0026 doc.ActiveView != null)\n{\n    doc.ActiveView.SetCategoryHidden(category.Id, true);\n}","errors":["22:CS0117 \u0027Autodesk.Revit.DB.BuiltInCategory\u0027 does not contain a definition for \u0027category_name\u0027"]}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"ICollection\u003cElementId\u003e allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection\u003cElementId\u003e usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w =\u003e w.GetTypeId()).Distinct().ToList();\nList\u003cElementId\u003e unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}","errors":["21:CS1061 \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.WallType\u003e\u0027 does not contain a definition for \u0027ToElementIds\u0027 and no extension method \u0027ToElementIds\u0027 accepting a first argument of type \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.WallType\u003e\u0027 could be found (are you missing a using directive or an assembly reference?)","22:CS1061 \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Wall\u003e\u0027 does not contain a definition for \u0027WhereElementIsNotElementType\u0027 and no extension method \u0027WhereElementIsNotElementType\u0027 accepting a first argument of type \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Wall\u003e\u0027 could be found (are you missing a using directive or an assembly reference?)"]}
{"prompt":"Delete all unused wall types in the project.","completion":"ICollection\u003cElementId\u003e allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection\u003cElementId\u003e usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w =\u003e w.GetTypeId()).Distinct().ToList();\nList\u003cElementId\u003e unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif (unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n}","errors":["21:CS1061 \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.WallType\u003e\u0027 does not contain a definition for \u0027ToElementIds\u0027 and no extension method \u0027ToElementIds\u0027 accepting a first argument of type \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.WallType\u003e\u0027 could be found (are you missing a using directive or an assembly reference?)","22:CS1061 \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Wall\u003e\u0027 does not contain a definition for \u0027WhereElementIsNotElementType\u0027 and no extension method \u0027WhereElementIsNotElementType\u0027 accepting a first argument of type \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Wall\u003e\u0027 could be found (are you missing a using directive or an assembly reference?)"]}
{"prompt":"Crea {num_worksets} worksets de arquitectura.","completion":"List\u003cstring\u003e worksetNames = new List\u003cstring\u003e {{ \"TAD_ARQ_MAM\", \"TAD_ARQ_ACA\", \"TAD_ARQ_PLA\", \"TAD_ARQ_PSO\", \"TAD_ARQ_HRE\", \"TAD_ARQ_ALU\", \"TAD_ARQ_CAR\", \"TAD_ARQ_MOB\", \"TAD_ARQ_PLO\", \"TAD_ARQ_EXT\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}","errors":["22:CS1501 No overload for method \u0027Add\u0027 takes 10 arguments"]}
{"prompt":"Create {num_worksets} architectural worksets.","completion":"List\u003cstring\u003e worksetNames = new List\u003cstring\u003e {{ \"TAD_ARQ_WALLS\", \"TAD_ARQ_FINISHES\", \"TAD_ARQ_CEILINGS\", \"TAD_ARQ_FLOORS\", \"TAD_ARQ_RAILINGS\", \"TAD_ARQ_WINDOWS\", \"TAD_ARQ_CARPENTRY\", \"TAD_ARQ_FURNITURE\", \"TAD_ARQ_PLUMBING\", \"TAD_ARQ_EXTERIOR\" }}.GetRange(0, {num_worksets});\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}","errors":["22:CS1501 No overload for method \u0027Add\u0027 takes 10 arguments"]}
{"prompt":"Obtén todos los muros del {level_name} que son estructurales.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nif (level != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e {{ levelFilter, categoryFilter, structuralFilter }});\n    List\u003cElement\u003e structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}","errors":["30:CS1501 No overload for method \u0027Add\u0027 takes 3 arguments"]}
{"prompt":"Get all walls on {level_name} that are structural.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nif (level != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List\u003cElementFilter\u003e {{ levelFilter, categoryFilter, structuralFilter }});\n    List\u003cElement\u003e structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}","errors":["30:CS1501 No overload for method \u0027Add\u0027 takes 3 arguments"]}
{"prompt":"Añade el prefijo \u0027{prefix}\u0027 a todas las vistas de plano.","completion":"string prefix = \"{prefix}\";\nList\u003cViewPlan\u003e planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cViewPlan\u003e().Where(v =\u003e !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if (view != null)\n    {\n        view.Name = prefix + view.Name;\n    }\n}","errors":["22:CS0128 A local variable named \u0027prefix\u0027 is already defined in this scope"]}
{"prompt":"Delete all detail lines in the active view.","completion":"if (doc.ActiveView != null)\n{\n    ICollection\u003cElementId\u003e detailLines = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(DetailCurve)).ToElementIds();\n    if (detailLines.Count \u003e 0)\n    {\n        doc.Delete(detailLines);\n    }\n}","errors":["23:CS1061 \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.DetailCurve\u003e\u0027 does not contain a definition for \u0027ToElementIds\u0027 and no extension method \u0027ToElementIds\u0027 accepting a first argument of type \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.DetailCurve\u003e\u0027 could be found (are you missing a using directive or an assembly reference?)"]}
{"prompt":"Crea un conducto eléctrico de {diameter_inch} pulgada de diámetro.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null \u0026\u0026 conduitTypeId != null \u0026\u0026 conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 / 0.3048);\n        XYZ end = new XYZ(5 / 0.3048, 0, 3 / 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null \u0026\u0026 !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set({diameter_inch} / 12.0);\n            }\n        }\n    }\n    t.Commit();\n}","errors":["26:CS1061 \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Electrical.ConduitType\u003e\u0027 does not contain a definition for \u0027FirstElementId\u0027 and no extension method \u0027FirstElementId\u0027 accepting a first argument of type \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Electrical.ConduitType\u003e\u0027 could be found (are you missing a using directive or an assembly reference?)"]}
{"prompt":"Create an electrical conduit with a {diameter_inch}-inch diameter.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null \u0026\u0026 conduitTypeId != null \u0026\u0026 conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 / 0.3048);\n        XYZ end = new XYZ(5 / 0.3048, 0, 3 / 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null \u0026\u0026 !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set({diameter_inch} / 12.0);\n            }\n        }\n    }\n    t.Commit();\n}","errors":["26:CS1061 \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Electrical.ConduitType\u003e\u0027 does not contain a definition for \u0027FirstElementId\u0027 and no extension method \u0027FirstElementId\u0027 accepting a first argument of type \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Electrical.ConduitType\u003e\u0027 could be found (are you missing a using directive or an assembly reference?)"]}
{"prompt":"Crea un conducto eléctrico de {diameter_inch} pulgada de diámetro.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null \u0026\u0026 conduitTypeId != null \u0026\u0026 conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 / 0.3048);\n        XYZ end = new XYZ(5 / 0.3048, 0, 3 / 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null \u0026\u0026 !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set({diameter_inch}/12.0);\n            }\n        }\n    }\n    t.Commit();\n}","errors":["26:CS1061 \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Electrical.ConduitType\u003e\u0027 does not contain a definition for \u0027FirstElementId\u0027 and no extension method \u0027FirstElementId\u0027 accepting a first argument of type \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Electrical.ConduitType\u003e\u0027 could be found (are you missing a using directive or an assembly reference?)"]}
{"prompt":"Create an electrical conduit with a {diameter_inch}-inch diameter.","completion":"using (Transaction t = new Transaction(doc, \"Create Conduit\"))\n{\n    t.Start();\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    ElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\n\n    if (level != null \u0026\u0026 conduitTypeId != null \u0026\u0026 conduitTypeId != ElementId.InvalidElementId)\n    {\n        XYZ start = new XYZ(0, 0, 3 / 0.3048);\n        XYZ end = new XYZ(5 / 0.3048, 0, 3 / 0.3048);\n        Conduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\n\n        if (conduit != null)\n        {\n            Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n            if (diameterParam != null \u0026\u0026 !diameterParam.IsReadOnly)\n            {\n                diameterParam.Set({diameter_inch}/12.0);\n            }\n        }\n    }\n    t.Commit();\n}","errors":["26:CS1061 \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Electrical.ConduitType\u003e\u0027 does not contain a definition for \u0027FirstElementId\u0027 and no extension method \u0027FirstElementId\u0027 accepting a first argument of type \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Electrical.ConduitType\u003e\u0027 could be found (are you missing a using directive or an assembly reference?)"]}
{"prompt":"Crea un Path of Travel entre los puntos ({x1},{y1}) y ({x2},{y2}) en la vista de planta.","completion":"ViewPlan viewPlan = doc.ActiveView as ViewPlan;\n\nif (viewPlan != null \u0026\u0026 viewPlan.ViewType == ViewType.FloorPlan)\n{\n    ElementId levelId = viewPlan.get_Parameter(BuiltInParameter.PLAN_VIEW_LEVEL).AsElementId();\n    Level level = doc.GetElement(levelId) as Level;\n    if (level != null)\n    {\n        XYZ startPoint = new XYZ({x1} / 0.3048, {y1} / 0.3048, level.Elevation);\n        XYZ endPoint = new XYZ({x2} / 0.3048, {y2} / 0.3048, level.Elevation);\n        PathOfTravel.Create(viewPlan, startPoint, endPoint);\n    }\n}","errors":["35:CS0122 \u0027PathOfTravel\u0027 is inaccessible due to its protection level"]}
{"prompt":"Create a Path of Travel between points ({x1},{y1}) and ({x2},{y2}) in the plan view.","completion":"ViewPlan viewPlan = doc.ActiveView as ViewPlan;\n\nif (viewPlan != null \u0026\u0026 viewPlan.ViewType == ViewType.FloorPlan)\n{\n    ElementId levelId = viewPlan.get_Parameter(BuiltInParameter.PLAN_VIEW_LEVEL).AsElementId();\n    Level level = doc.GetElement(levelId) as Level;\n    if (level != null)\n    {\n        XYZ startPoint = new XYZ({x1} / 0.3048, {y1} / 0.3048, level.Elevation);\n        XYZ endPoint = new XYZ({x2} / 0.3048, {y2} / 0.3048, level.Elevation);\n        PathOfTravel.Create(viewPlan, startPoint, endPoint);\n    }\n}","errors":["35:CS0122 \u0027PathOfTravel\u0027 is inaccessible due to its protection level"]}
{"prompt":"Dibuja una región rellena con patrón diagonal.","completion":"View activeView = doc.ActiveView;\nFillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast\u003cFillPatternElement\u003e().FirstOrDefault(p =\u003e !p.GetFillPattern().IsSolidFill);\n\nif (activeView != null \u0026\u0026 fillPattern != null)\n{\n    FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n    if (filledRegionType != null)\n    {\n        FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n        if (newType != null)\n        {\n            newType.ForegroundPatternId = fillPattern.Id;\n            XYZ p1 = new XYZ(0,0,0);\n            XYZ p2 = new XYZ(5 / 0.3048,0,0);\n            XYZ p3 = new XYZ(5 / 0.3048,5 / 0.3048,0);\n            XYZ p4 = new XYZ(0,5 / 0.3048,0);\n            CurveLoop profile = new CurveLoop();\n            profile.Append(Line.CreateBound(p1,p2));\n            profile.Append(Line.CreateBound(p2,p3));\n            profile.Append(Line.CreateBound(p3,p4));\n            profile.Append(Line.CreateBound(p4,p1));\n            FilledRegion.Create(doc, newType.Id, activeView.Id, new List\u003cCurveLoop\u003e{profile});\n        }\n    }\n}","errors":["42:CS1526 A new expression requires (), [], or {} after type","42:CS1002 ; expected","42:CS1525 Invalid expression term \u0027)\u0027"]}
{"prompt":"Draw a filled region with a diagonal pattern.","completion":"View activeView = doc.ActiveView;\nFillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).Cast\u003cFillPatternElement\u003e().FirstOrDefault(p =\u003e !p.GetFillPattern().IsSolidFill);\n\nif (activeView != null \u0026\u0026 fillPattern != null)\n{\n    FilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\n    if (filledRegionType != null)\n    {\n        FilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\n        if (newType != null)\n        {\n            newType.ForegroundPatternId = fillPattern.Id;\n            XYZ p1 = new XYZ(0,0,0);\n            XYZ p2 = new XYZ(5 / 0.3048,0,0);\n            XYZ p3 = new XYZ(5 / 0.3048,5 / 0.3048,0);\n            XYZ p4 = new XYZ(0,5 / 0.3048,0);\n            CurveLoop profile = new CurveLoop();\n            profile.Append(Line.CreateBound(p1,p2));\n            profile.Append(Line.CreateBound(p2,p3));\n            profile.Append(Line.CreateBound(p3,p4));\n            profile.Append(Line.CreateBound(p4,p1));\n            FilledRegion.Create(doc, newType.Id, activeView.Id, new List\u003cCurveLoop\u003e{profile});\n        }\n    }\n}","errors":["42:CS1526 A new expression requires (), [], or {} after type","42:CS1002 ; expected","42:CS1525 Invalid expression term \u0027)\u0027"]}
{"prompt":"Crea una región rellena con un patrón de \u0027{pattern_name}\u0027.","completion":"FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast\u003cFilledRegionType\u003e().FirstOrDefault(frt =\u003e frt.Name.Contains(\"{pattern_name}\"));\nView activeView = doc.ActiveView;\n\nif (regionType != null \u0026\u0026 activeView != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 0,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(0, 5 / 0.3048,0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    FilledRegion.Create(doc, regionType.Id, activeView.Id, new List\u003cCurveLoop\u003e{profile});\n}","errors":["36:CS1526 A new expression requires (), [], or {} after type","36:CS1002 ; expected","36:CS1525 Invalid expression term \u0027)\u0027"]}
{"prompt":"Create a filled region with a \u0027{pattern_name}\u0027 pattern.","completion":"FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast\u003cFilledRegionType\u003e().FirstOrDefault(frt =\u003e frt.Name.Contains(\"{pattern_name}\"));\nView activeView = doc.ActiveView;\n\nif (regionType != null \u0026\u0026 activeView != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 0,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(0, 5 / 0.3048,0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    FilledRegion.Create(doc, regionType.Id, activeView.Id, new List\u003cCurveLoop\u003e{profile});\n}","errors":["36:CS1526 A new expression requires (), [], or {} after type","36:CS1002 ; expected","36:CS1525 Invalid expression term \u0027)\u0027"]}
{"prompt":"Crea una losa de cimentación de {width_m}x{height_m} metros.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.Elevation).FirstOrDefault();\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast\u003cFloorType\u003e().FirstOrDefault(ft =\u003e ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n\nif (foundationLevel != null \u0026\u0026 slabType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ({width_m}/0.3048, 0, 0);\n    XYZ p3 = new XYZ({width_m}/0.3048, {height_m}/0.3048, 0);\n    XYZ p4 = new XYZ(0, {height_m}/0.3048, 0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Floor.Create(doc, new List\u003cCurveLoop\u003e{profile}, slabType.Id, foundationLevel.Id);\n}","errors":["37:CS1526 A new expression requires (), [], or {} after type","37:CS1002 ; expected","37:CS1525 Invalid expression term \u0027,\u0027","37:CS1002 ; expected","37:CS1002 ; expected","37:CS1525 Invalid expression term \u0027,\u0027","37:CS1002 ; expected","37:CS1002 ; expected","37:CS1525 Invalid expression term \u0027)\u0027"]}
{"prompt":"Create a {width_m}x{height_m} meter foundation slab.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.Elevation).FirstOrDefault();\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast\u003cFloorType\u003e().FirstOrDefault(ft =\u003e ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\n\nif (foundationLevel != null \u0026\u0026 slabType != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ({width_m}/0.3048, 0, 0);\n    XYZ p3 = new XYZ({width_m}/0.3048, {height_m}/0.3048, 0);\n    XYZ p4 = new XYZ(0, {height_m}/0.3048, 0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Floor.Create(doc, new List\u003cCurveLoop\u003e{profile}, slabType.Id, foundationLevel.Id);\n}","errors":["37:CS1526 A new expression requires (), [], or {} after type","37:CS1002 ; expected","37:CS1525 Invalid expression term \u0027,\u0027","37:CS1002 ; expected","37:CS1002 ; expected","37:CS1525 Invalid expression term \u0027,\u0027","37:CS1002 ; expected","37:CS1002 ; expected","37:CS1525 Invalid expression term \u0027)\u0027"]}
{"prompt":"Añade un punto al Path of Travel seleccionado.","completion":"UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un Path of Travel\");\n\nif (pickedRef != null)\n{\n    PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n    if (pot != null)\n    {\n        IList\u003cXYZ\u003e points = pot.GetPath();\n        if (points != null \u0026\u0026 points.Count \u003e= 2)\n        {\n            XYZ midPoint = (points[0] + points[1]) / 2;\n            points.Insert(1, midPoint); \n            pot.Update(points);\n        }\n    }\n}","errors":["26:CS0122 \u0027PathOfTravel\u0027 is inaccessible due to its protection level","26:CS0122 \u0027PathOfTravel\u0027 is inaccessible due to its protection level","26:CS0077 The as operator must be used with a reference type or nullable type (\u0027PathOfTravel\u0027 is a non-nullable value type)","27:CS0019 Operator \u0027!=\u0027 cannot be applied to operands of type \u0027PathOfTravel\u0027 and \u0027\u003cnull\u003e\u0027","29:CS1061 \u0027PathOfTravel\u0027 does not contain a definition for \u0027GetPath\u0027 and no extension method \u0027GetPath\u0027 accepting a first argument of type \u0027PathOfTravel\u0027 could be found (are you missing a using directive or an assembly reference?)","34:CS1061 \u0027PathOfTravel\u0027 does not contain a definition for \u0027Update\u0027 and no extension method \u0027Update\u0027 accepting a first argument of type \u0027PathOfTravel\u0027 could be found (are you missing a using directive or an assembly reference?)"]}
{"prompt":"Add a point to the selected Path of Travel.","completion":"UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select a Path of Travel\");\n\nif (pickedRef != null)\n{\n    PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n    if (pot != null)\n    {\n        IList\u003cXYZ\u003e points = pot.GetPath();\n        if (points != null \u0026\u0026 points.Count \u003e= 2)\n        {\n            XYZ midPoint = (points[0] + points[1]) / 2;\n            points.Insert(1, midPoint);\n            pot.Update(points);\n        }\n    }\n}","errors":["26:CS0122 \u0027PathOfTravel\u0027 is inaccessible due to its protection level","26:CS0122 \u0027PathOfTravel\u0027 is inaccessible due to its protection level","26:CS0077 The as operator must be used with a reference type or nullable type (\u0027PathOfTravel\u0027 is a non-nullable value type)","27:CS0019 Operator \u0027!=\u0027 cannot be applied to operands of type \u0027PathOfTravel\u0027 and \u0027\u003cnull\u003e\u0027","29:CS1061 \u0027PathOfTravel\u0027 does not contain a definition for \u0027GetPath\u0027 and no extension method \u0027GetPath\u0027 accepting a first argument of type \u0027PathOfTravel\u0027 could be found (are you missing a using directive or an assembly reference?)","34:CS1061 \u0027PathOfTravel\u0027 does not contain a definition for \u0027Update\u0027 and no extension method \u0027Update\u0027 accepting a first argument of type \u0027PathOfTravel\u0027 could be found (are you missing a using directive or an assembly reference?)"]}
{"prompt":"Crea una región rellena con un patrón de \u0027{pattern_name}\u0027.","completion":"FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast\u003cFilledRegionType\u003e().FirstOrDefault(frt =\u003e frt.Name.Contains(\"{pattern_name}\"));\nView activeView = doc.ActiveView;\n\nif (regionType != null \u0026\u0026 activeView != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 0,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(0, 5 / 0.3048,0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    FilledRegion.Create(doc, regionType.Id, activeView.Id, new List\u003cCurveLoop\u003e{profile});\n}","errors":["36:CS1526 A new expression requires (), [], or {} after type","36:CS1002 ; expected","36:CS1525 Invalid expression term \u0027)\u0027"]}
{"prompt":"Create a filled region with a \u0027{pattern_name}\u0027 pattern.","completion":"FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast\u003cFilledRegionType\u003e().FirstOrDefault(frt =\u003e frt.Name.Contains(\"{pattern_name}\"));\nView activeView = doc.ActiveView;\n\nif (regionType != null \u0026\u0026 activeView != null)\n{\n    XYZ p1 = new XYZ(0,0,0);\n    XYZ p2 = new XYZ(5 / 0.3048, 0,0);\n    XYZ p3 = new XYZ(5 / 0.3048, 5 / 0.3048,0);\n    XYZ p4 = new XYZ(0, 5 / 0.3048,0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    FilledRegion.Create(doc, regionType.Id, activeView.Id, new List\u003cCurveLoop\u003e{profile});\n}","errors":["36:CS1526 A new expression requires (), [], or {} after type","36:CS1002 ; expected","36:CS1525 Invalid expression term \u0027)\u0027"]}
{"prompt":"Añade un punto al Path of Travel seleccionado.","completion":"UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un Path of Travel\");\n\nif (pickedRef != null)\n{\n    PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n    if (pot != null)\n    {\n        IList\u003cXYZ\u003e points = pot.GetPath();\n        if (points != null \u0026\u0026 points.Count \u003e= 2)\n        {\n            XYZ midPoint = (points[0] + points[1]) / 2;\n            points.Insert(1, midPoint); \n            pot.Update(points);\n        }\n    }\n}","errors":["26:CS0122 \u0027PathOfTravel\u0027 is inaccessible due to its protection level","26:CS0122 \u0027PathOfTravel\u0027 is inaccessible due to its protection level","26:CS0077 The as operator must be used with a reference type or nullable type (\u0027PathOfTravel\u0027 is a non-nullable value type)","27:CS0019 Operator \u0027!=\u0027 cannot be applied to operands of type \u0027PathOfTravel\u0027 and \u0027\u003cnull\u003e\u0027","29:CS1061 \u0027PathOfTravel\u0027 does not contain a definition for \u0027GetPath\u0027 and no extension method \u0027GetPath\u0027 accepting a first argument of type \u0027PathOfTravel\u0027 could be found (are you missing a using directive or an assembly reference?)","34:CS1061 \u0027PathOfTravel\u0027 does not contain a definition for \u0027Update\u0027 and no extension method \u0027Update\u0027 accepting a first argument of type \u0027PathOfTravel\u0027 could be found (are you missing a using directive or an assembly reference?)"]}
{"prompt":"Add a point to the selected Path of Travel.","completion":"UIDocument localUidoc = uidoc;\nReference pickedRef = localUidoc.Selection.PickObject(ObjectType.Element, \"Select a Path of Travel\");\n\nif (pickedRef != null)\n{\n    PathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\n    if (pot != null)\n    {\n        IList\u003cXYZ\u003e points = pot.GetPath();\n        if (points != null \u0026\u0026 points.Count \u003e= 2)\n        {\n            XYZ midPoint = (points[0] + points[1]) / 2;\n            points.Insert(1, midPoint);\n            pot.Update(points);\n        }\n    }\n}","errors":["26:CS0122 \u0027PathOfTravel\u0027 is inaccessible due to its protection level","26:CS0122 \u0027PathOfTravel\u0027 is inaccessible due to its protection level","26:CS0077 The as operator must be used with a reference type or nullable type (\u0027PathOfTravel\u0027 is a non-nullable value type)","27:CS0019 Operator \u0027!=\u0027 cannot be applied to operands of type \u0027PathOfTravel\u0027 and \u0027\u003cnull\u003e\u0027","29:CS1061 \u0027PathOfTravel\u0027 does not contain a definition for \u0027GetPath\u0027 and no extension method \u0027GetPath\u0027 accepting a first argument of type \u0027PathOfTravel\u0027 could be found (are you missing a using directive or an assembly reference?)","34:CS1061 \u0027PathOfTravel\u0027 does not contain a definition for \u0027Update\u0027 and no extension method \u0027Update\u0027 accepting a first argument of type \u0027PathOfTravel\u0027 could be found (are you missing a using directive or an assembly reference?)"]}
{"prompt":"Crea un espacio MEP para cada habitación en el nivel \u0027{level_name}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n\nif (level != null)\n{\n    List\u003cRoom\u003e roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e =\u003e (e as Room) != null \u0026\u0026 (e as Room).LevelId.Equals(level.Id)).Cast\u003cRoom\u003e().ToList();\n    foreach(Room room in roomsOnLevel)\n    {\n       Space.Create(doc, room, null);\n    }\n}","errors":["29:CS0117 \u0027Autodesk.Revit.DB.Mechanical.Space\u0027 does not contain a definition for \u0027Create\u0027"]}
{"prompt":"Create an MEP space for each room on \u0027{level_name}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n\nif (level != null)\n{\n    List\u003cRoom\u003e roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e =\u003e (e as Room) != null \u0026\u0026 (e as Room).LevelId.Equals(level.Id)).Cast\u003cRoom\u003e().ToList();\n    foreach(Room room in roomsOnLevel)\n    {\n       Space.Create(doc, room, null);\n    }\n}","errors":["29:CS0117 \u0027Autodesk.Revit.DB.Mechanical.Space\u0027 does not contain a definition for \u0027Create\u0027"]}
{"prompt":"Crea un espacio MEP para cada habitación en el nivel \u0027{level_name}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n\nif (level != null)\n{\n    List\u003cRoom\u003e roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e =\u003e (e as Room) != null \u0026\u0026 (e as Room).LevelId.Equals(level.Id)).Cast\u003cRoom\u003e().ToList();\n    foreach(Room room in roomsOnLevel)\n    {\n       Space.Create(doc, room, null);\n    }\n}","errors":["29:CS0117 \u0027Autodesk.Revit.DB.Mechanical.Space\u0027 does not contain a definition for \u0027Create\u0027"]}
{"prompt":"Create an MEP space for each room on \u0027{level_name}\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().FirstOrDefault(l =\u003e l.Name == \"{level_name}\");\n\nif (level != null)\n{\n    List\u003cRoom\u003e roomsOnLevel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(e =\u003e (e as Room) != null \u0026\u0026 (e as Room).LevelId.Equals(level.Id)).Cast\u003cRoom\u003e().ToList();\n    foreach(Room room in roomsOnLevel)\n    {\n       Space.Create(doc, room, null);\n    }\n}","errors":["29:CS0117 \u0027Autodesk.Revit.DB.Mechanical.Space\u0027 does not contain a definition for \u0027Create\u0027"]}
{"prompt":"Crea un nuevo parámetro de proyecto compartido de texto llamado \u0027{param_name}\u0027 para muros y puertas.","completion":"string originalFile = doc.Application.SharedParametersFilename;\nstring tempFile = System.IO.Path.GetTempFileName() + \".txt\";\nusing (System.IO.File.Create(tempFile)) { }\ndoc.Application.SharedParametersFilename = tempFile;\n\ntry\n{\n    DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n    if (defFile != null)\n    {\n        DefinitionGroup group = defFile.Groups.Create(\"General\");\n        if (group != null)\n        {\n            ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(\"{param_name}\", ParameterType.Text);\n            Definition definition = group.Definitions.Create(options);\n            if (definition != null)\n            {\n                CategorySet categories = doc.Application.Create.NewCategorySet();\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                doc.ParameterBindings.Insert(definition, binding, Autodesk.Revit.DB.BuiltInParameterGroup.PG_DATA);\n            }\n        }\n    }\n}\nfinally\n{\n    doc.Application.SharedParametersFilename = originalFile;\n    System.IO.File.Delete(tempFile);\n}","errors":["35:CS0122 \u0027ParameterType\u0027 is inaccessible due to its protection level","43:CS0234 The type or namespace name \u0027BuiltInParameterGroup\u0027 does not exist in the namespace \u0027Autodesk.Revit.DB\u0027 (are you missing an assembly reference?)"]}
{"prompt":"Create a new shared text project parameter named \u0027{param_name}\u0027 for walls and doors.","completion":"string originalFile = doc.Application.SharedParametersFilename;\nstring tempFile = System.IO.Path.GetTempFileName() + \".txt\";\nusing (System.IO.File.Create(tempFile)) { }\ndoc.Application.SharedParametersFilename = tempFile;\n\ntry\n{\n    DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n    if (defFile != null)\n    {\n        DefinitionGroup group = defFile.Groups.Create(\"General\");\n        if (group != null)\n        {\n            ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(\"{param_name}\", ParameterType.Text);\n            Definition definition = group.Definitions.Create(options);\n            if (definition != null)\n            {\n                CategorySet categories = doc.Application.Create.NewCategorySet();\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                doc.ParameterBindings.Insert(definition, binding, Autodesk.Revit.DB.BuiltInParameterGroup.PG_DATA);\n            }\n        }\n    }\n}\nfinally\n{\n    doc.Application.SharedParametersFilename = originalFile;\n    System.IO.File.Delete(tempFile);\n}","errors":["35:CS0122 \u0027ParameterType\u0027 is inaccessible due to its protection level","43:CS0234 The type or namespace name \u0027BuiltInParameterGroup\u0027 does not exist in the namespace \u0027Autodesk.Revit.DB\u0027 (are you missing an assembly reference?)"]}
{"prompt":"Crea una losa de cimentación estructural de {thickness_cm}cm de espesor llamada \u0027{type_name}\u0027.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.Elevation).FirstOrDefault();\nFloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast\u003cFloorType\u003e().FirstOrDefault(ft =\u003e ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\nif(slabTypeToDuplicate != null \u0026\u0026 foundationLevel != null)\n{\n    FloorType newSlabType = slabTypeToDuplicate.Duplicate(\"{type_name}\") as FloorType;\n    if(newSlabType != null)\n    {\n        CompoundStructure cs = newSlabType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), ({thickness_cm} * 10) / 304.8);\n            newSlabType.SetCompoundStructure(cs);\n            XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n            CurveLoop profile = new CurveLoop();\n            profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n            Floor.Create(doc, new List\u003cCurveLoop\u003e{profile}, newSlabType.Id, foundationLevel.Id);\n        }\n    }\n}","errors":["38:CS1526 A new expression requires (), [], or {} after type","38:CS1002 ; expected","38:CS1525 Invalid expression term \u0027,\u0027","38:CS1002 ; expected","38:CS1002 ; expected","38:CS1525 Invalid expression term \u0027,\u0027","38:CS1002 ; expected","38:CS1002 ; expected","38:CS1525 Invalid expression term \u0027)\u0027"]}
{"prompt":"Create a structural foundation slab {thickness_cm}cm thick named \u0027{type_name}\u0027.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.Elevation).FirstOrDefault();\nFloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast\u003cFloorType\u003e().FirstOrDefault(ft =\u003e ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\nif(slabTypeToDuplicate != null \u0026\u0026 foundationLevel != null)\n{\n    FloorType newSlabType = slabTypeToDuplicate.Duplicate(\"{type_name}\") as FloorType;\n    if(newSlabType != null)\n    {\n        CompoundStructure cs = newSlabType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), ({thickness_cm} * 10) / 304.8);\n            newSlabType.SetCompoundStructure(cs);\n            XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n            CurveLoop profile = new CurveLoop();\n            profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n            Floor.Create(doc, new List\u003cCurveLoop\u003e{profile}, newSlabType.Id, foundationLevel.Id);\n        }\n    }\n}","errors":["38:CS1526 A new expression requires (), [], or {} after type","38:CS1002 ; expected","38:CS1525 Invalid expression term \u0027,\u0027","38:CS1002 ; expected","38:CS1002 ; expected","38:CS1525 Invalid expression term \u0027,\u0027","38:CS1002 ; expected","38:CS1002 ; expected","38:CS1525 Invalid expression term \u0027)\u0027"]}
{"prompt":"Añade montantes a todas las líneas de rejilla de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast\u003cWall\u003e().FirstOrDefault(w =\u003e w.WallType.Kind == WallKind.Curtain);\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\n\nif (curtainWall != null \u0026\u0026 mullionType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    if (grid != null)\n    {\n        foreach (ElementId gridLineId in grid.GetVGridLineIds())\n        {\n            CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n            if(line != null) grid.AddMullions(line, mullionType);\n        }\n        foreach (ElementId gridLineId in grid.GetUGridLineIds())\n        {\n            CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n            if(line != null) grid.AddMullions(line, mullionType);\n        }\n    }\n}","errors":["32:CS1061 \u0027Autodesk.Revit.DB.CurtainGrid\u0027 does not contain a definition for \u0027AddMullions\u0027 and no extension method \u0027AddMullions\u0027 accepting a first argument of type \u0027Autodesk.Revit.DB.CurtainGrid\u0027 could be found (are you missing a using directive or an assembly reference?)","37:CS1061 \u0027Autodesk.Revit.DB.CurtainGrid\u0027 does not contain a definition for \u0027AddMullions\u0027 and no extension method \u0027AddMullions\u0027 accepting a first argument of type \u0027Autodesk.Revit.DB.CurtainGrid\u0027 could be found (are you missing a using directive or an assembly reference?)"]}
{"prompt":"Crea un nuevo parámetro de proyecto compartido de texto llamado \u0027{param_name}\u0027 para muros y puertas.","completion":"string originalFile = doc.Application.SharedParametersFilename;\nstring tempFile = System.IO.Path.GetTempFileName() + \".txt\";\nusing (System.IO.File.Create(tempFile)) { }\ndoc.Application.SharedParametersFilename = tempFile;\n\ntry\n{\n    DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n    if (defFile != null)\n    {\n        DefinitionGroup group = defFile.Groups.Create(\"General\");\n        if (group != null)\n        {\n            ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(\"{param_name}\", ParameterType.Text);\n            Definition definition = group.Definitions.Create(options);\n            if (definition != null)\n            {\n                CategorySet categories = doc.Application.Create.NewCategorySet();\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                doc.ParameterBindings.Insert(definition, binding, Autodesk.Revit.DB.BuiltInParameterGroup.PG_DATA);\n            }\n        }\n    }\n}\nfinally\n{\n    doc.Application.SharedParametersFilename = originalFile;\n    System.IO.File.Delete(tempFile);\n}","errors":["35:CS0122 \u0027ParameterType\u0027 is inaccessible due to its protection level","43:CS0234 The type or namespace name \u0027BuiltInParameterGroup\u0027 does not exist in the namespace \u0027Autodesk.Revit.DB\u0027 (are you missing an assembly reference?)"]}
{"prompt":"Create a new shared text project parameter named \u0027{param_name}\u0027 for walls and doors.","completion":"string originalFile = doc.Application.SharedParametersFilename;\nstring tempFile = System.IO.Path.GetTempFileName() + \".txt\";\nusing (System.IO.File.Create(tempFile)) { }\ndoc.Application.SharedParametersFilename = tempFile;\n\ntry\n{\n    DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n    if (defFile != null)\n    {\n        DefinitionGroup group = defFile.Groups.Create(\"General\");\n        if (group != null)\n        {\n            ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(\"{param_name}\", ParameterType.Text);\n            Definition definition = group.Definitions.Create(options);\n            if (definition != null)\n            {\n                CategorySet categories = doc.Application.Create.NewCategorySet();\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                doc.ParameterBindings.Insert(definition, binding, Autodesk.Revit.DB.BuiltInParameterGroup.PG_DATA);\n            }\n        }\n    }\n}\nfinally\n{\n    doc.Application.SharedParametersFilename = originalFile;\n    System.IO.File.Delete(tempFile);\n}","errors":["35:CS0122 \u0027ParameterType\u0027 is inaccessible due to its protection level","43:CS0234 The type or namespace name \u0027BuiltInParameterGroup\u0027 does not exist in the namespace \u0027Autodesk.Revit.DB\u0027 (are you missing an assembly reference?)"]}
{"prompt":"Crea una losa de cimentación estructural de {thickness_cm}cm de espesor llamada \u0027{type_name}\u0027.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.Elevation).FirstOrDefault();\nFloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast\u003cFloorType\u003e().FirstOrDefault(ft =\u003e ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\nif(slabTypeToDuplicate != null \u0026\u0026 foundationLevel != null)\n{\n    string newTypeName = \"{type_name}\";\n    FloorType newSlabType = slabTypeToDuplicate.Duplicate(newTypeName) as FloorType;\n    if(newSlabType != null)\n    {\n        CompoundStructure cs = newSlabType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), ({thickness_cm} * 10) / 304.8);\n            newSlabType.SetCompoundStructure(cs);\n            XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n            CurveLoop profile = new CurveLoop();\n            profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n            doc.Create.NewFloor(new List\u003cCurveLoop\u003e{profile}, newSlabType, foundationLevel, true);\n        }\n    }\n}","errors":["39:CS1526 A new expression requires (), [], or {} after type","39:CS1002 ; expected","39:CS1525 Invalid expression term \u0027,\u0027","39:CS1002 ; expected","39:CS1002 ; expected","39:CS1525 Invalid expression term \u0027,\u0027","39:CS1002 ; expected","39:CS1002 ; expected","39:CS1525 Invalid expression term \u0027,\u0027","39:CS1002 ; expected","39:CS1002 ; expected","39:CS1525 Invalid expression term \u0027)\u0027"]}
{"prompt":"Create a structural foundation slab {thickness_cm}cm thick named \u0027{type_name}\u0027.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.Elevation).FirstOrDefault();\nFloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast\u003cFloorType\u003e().FirstOrDefault(ft =\u003e ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\nif(slabTypeToDuplicate != null \u0026\u0026 foundationLevel != null)\n{\n    string newTypeName = \"{type_name}\";\n    FloorType newSlabType = slabTypeToDuplicate.Duplicate(newTypeName) as FloorType;\n    if(newSlabType != null)\n    {\n        CompoundStructure cs = newSlabType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), ({thickness_cm} * 10) / 304.8);\n            newSlabType.SetCompoundStructure(cs);\n            XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n            CurveLoop profile = new CurveLoop();\n            profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n            doc.Create.NewFloor(new List\u003cCurveLoop\u003e{profile}, newSlabType, foundationLevel, true);\n        }\n    }\n}","errors":["39:CS1526 A new expression requires (), [], or {} after type","39:CS1002 ; expected","39:CS1525 Invalid expression term \u0027,\u0027","39:CS1002 ; expected","39:CS1002 ; expected","39:CS1525 Invalid expression term \u0027,\u0027","39:CS1002 ; expected","39:CS1002 ; expected","39:CS1525 Invalid expression term \u0027,\u0027","39:CS1002 ; expected","39:CS1002 ; expected","39:CS1525 Invalid expression term \u0027)\u0027"]}
{"prompt":"Añade montantes a todas las líneas de rejilla de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast\u003cWall\u003e().FirstOrDefault(w =\u003e w.WallType.Kind == WallKind.Curtain);\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\n\nif (curtainWall != null \u0026\u0026 mullionType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    if (grid != null)\n    {\n        foreach (ElementId gridLineId in grid.GetVGridLineIds())\n        {\n            CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n            if(line != null) line.AddMullions(mullionType, false);\n        }\n        foreach (ElementId gridLineId in grid.GetUGridLineIds())\n        {\n            CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n            if(line != null) line.AddMullions(mullionType, false);\n        }\n    }\n}","errors":["32:CS1501 No overload for method \u0027AddMullions\u0027 takes 2 arguments","37:CS1501 No overload for method \u0027AddMullions\u0027 takes 2 arguments"]}
{"prompt":"Add mullions to all grid lines of a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast\u003cWall\u003e().FirstOrDefault(w =\u003e w.WallType.Kind == WallKind.Curtain);\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\n\nif (curtainWall != null \u0026\u0026 mullionType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    if (grid != null)\n    {\n        foreach (ElementId gridLineId in grid.GetVGridLineIds())\n        {\n            CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n            if(line != null) line.AddMullions(mullionType, false);\n        }\n        foreach (ElementId gridLineId in grid.GetUGridLineIds())\n        {\n            CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n            if(line != null) line.AddMullions(mullionType, false);\n        }\n    }\n}","errors":["32:CS1501 No overload for method \u0027AddMullions\u0027 takes 2 arguments","37:CS1501 No overload for method \u0027AddMullions\u0027 takes 2 arguments"]}
{"prompt":"Crea un conducto eléctrico de {diameter_mm}mm de diámetro entre ({start_x},{start_y},{start_z}) y ({end_x},{end_y},{end_z}).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nElementId conduitTypeId = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstElementId();\nif (level != null \u0026\u0026 conduitTypeId != ElementId.InvalidElementId)\n{\n    XYZ startPoint = new XYZ({start_x}, {start_y}, {start_z});\n    XYZ endPoint = new XYZ({end_x}, {end_y}, {end_z});\n    Conduit conduit = Conduit.Create(doc, conduitTypeId, startPoint, endPoint, level.Id);\n    if (conduit != null)\n    {\n        Parameter diameterParam = conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM);\n        if (diameterParam != null \u0026\u0026 !diameterParam.IsReadOnly)\n        {\n            diameterParam.Set(UnitUtils.ConvertToInternalUnits({diameter_mm}, UnitTypeId.Millimeters));\n        }\n    }\n}","errors":["29:CS1061 \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Electrical.ConduitType\u003e\u0027 does not contain a definition for \u0027FirstElementId\u0027 and no extension method \u0027FirstElementId\u0027 accepting a first argument of type \u0027System.Collections.Generic.IEnumerable\u003cAutodesk.Revit.DB.Electrical.ConduitType\u003e\u0027 could be found (are you missing a using directive or an assembly reference?)"]}
{"prompt":"Modela un plafón a {height_m} metros de altura en el {level_name}.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"{level_name}\") as Level;\nCeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nif (ceilingType != null \u0026\u0026 level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0)));\n    profile.Append(Line.CreateBound(new XYZ(10,0,0), new XYZ(10,10,0)));\n    profile.Append(Line.CreateBound(new XYZ(10,10,0), new XYZ(0,10,0)));\n    profile.Append(Line.CreateBound(new XYZ(0,10,0), new XYZ(0,0,0)));\n    Ceiling ceiling = Ceiling.Create(doc, new List\u003cCurveLoop\u003e{profile}, ceilingType.Id, level.Id);\n    if (ceiling != null)\n    {\n        Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n        if (heightParam != null \u0026\u0026 !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits({height_m}, UnitTypeId.Meters));\n    }\n}","errors":["32:CS1526 A new expression requires (), [], or {} after type","32:CS1002 ; expected","32:CS1525 Invalid expression term \u0027,\u0027","32:CS1002 ; expected","32:CS1002 ; expected","32:CS1525 Invalid expression term \u0027,\u0027","32:CS1002 ; expected","32:CS1002 ; expected","32:CS1525 Invalid expression term \u0027)\u0027"]}
{"prompt":"Crea una losa de cimentación estructural de {thickness_cm}cm de espesor.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.Elevation).FirstOrDefault();\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast\u003cFloorType\u003e().FirstOrDefault(ft =\u003e ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\nif (foundationLevel != null \u0026\u0026 slabType != null)\n{\n    // Assuming the user wants to modify the existing type. For a new type, Duplicate() is needed.\n    CompoundStructure cs = slabType.GetCompoundStructure();\n    if (cs != null \u0026\u0026 cs.GetFirstCoreLayerIndex() != -1) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits({thickness_cm}, UnitTypeId.Centimeters));\n        slabType.SetCompoundStructure(cs);\n    }\n\n    XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,15,0); XYZ p4 = new XYZ(0,15,0);\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(p1,p2));\n    profile.Append(Line.CreateBound(p2,p3));\n    profile.Append(Line.CreateBound(p3,p4));\n    profile.Append(Line.CreateBound(p4,p1));\n    Floor.Create(doc, new List\u003cCurveLoop\u003e{profile}, slabType.Id, foundationLevel.Id);\n}","errors":["39:CS1526 A new expression requires (), [], or {} after type","39:CS1002 ; expected","39:CS1525 Invalid expression term \u0027,\u0027","39:CS1002 ; expected","39:CS1002 ; expected","39:CS1525 Invalid expression term \u0027,\u0027","39:CS1002 ; expected","39:CS1002 ; expected","39:CS1525 Invalid expression term \u0027)\u0027"]}
{"prompt":"Conecta dos conductos con una unión en T.","completion":"List\u003cDuct\u003e ducts = new FilteredElementCollector(doc).OfClass(typeof(Duct)).Cast\u003cDuct\u003e().ToList();\nif (ducts.Count \u003e= 2)\n{\n    Connector c1 = ducts[0].ConnectorManager.UnusedConnectors.Cast\u003cConnector\u003e().FirstOrDefault();\n    Connector c2 = ducts[1].ConnectorManager.UnusedConnectors.Cast\u003cConnector\u003e().FirstOrDefault();\n    if (c1 != null \u0026\u0026 c2 != null)\n    {\n        doc.Create.NewTeeFitting(c1, c2);\n    }\n}","errors":["28:CS1501 No overload for method \u0027NewTeeFitting\u0027 takes 2 arguments"]}
{"prompt":"Inserta un terminal de aire en el extremo de un conducto.","completion":"Duct duct = new FilteredElementCollector(doc).OfClass(typeof(Duct)).FirstOrDefault() as Duct;\nFamilySymbol terminalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctTerminal).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (duct != null \u0026\u0026 terminalSymbol != null)\n{\n    if(!terminalSymbol.IsActive) terminalSymbol.Activate();\n    LocationCurve locCurve = duct.Location as LocationCurve;\n    if (locCurve != null)\n    {\n        Connector endConnector = duct.ConnectorManager.UnusedConnectors.Cast\u003cConnector\u003e().FirstOrDefault(c =\u003e c.Origin.IsAlmostEqualTo(locCurve.Curve.GetEndPoint(1)));\n        if (endConnector != null)\n        {\n            doc.Create.NewFamilyInstance(endConnector.Origin, terminalSymbol, endConnector);\n        }\n    }\n}","errors":["32:CS1502 The best overloaded method match for \u0027Autodesk.Revit.Creation.ItemFactoryBase.NewFamilyInstance(Autodesk.Revit.DB.XYZ, Autodesk.Revit.DB.FamilySymbol, Autodesk.Revit.DB.View)\u0027 has some invalid arguments","32:CS1503 Argument 3: cannot convert from \u0027Autodesk.Revit.DB.Connector\u0027 to \u0027Autodesk.Revit.DB.View\u0027"]}
