{"prompt":"Selecciona todos los muros con una resistencia al fuego de 90 minutos.","completion":"ElementId fireRatingParamId = new ElementId(BuiltInParameter.FIRE_RATING);\nParameterValueProvider pvp = new ParameterValueProvider(fireRatingParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"90 min\");\nElementParameterFilter filter = new ElementParameterFilter(rule);\nICollection\u003cElementId\u003e wallsToSelect = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds();\nif (wallsToSelect.Count \u003e 0)\n{\n    new UIDocument(doc).Selection.SetElementIds(wallsToSelect);\n}"}
{"prompt":"Encuentra todos los pilares estructurales en el Nivel 2 que sean de hormigón.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"Nivel 2\") as Level;\nFamilySymbol concreteColumnType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Name.Contains(\"Hormigón\"));\nif (level2 != null \u0026\u0026 concreteColumnType != null)\n{\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FamilySymbolFilter typeFilter = new FamilySymbolFilter(concreteColumnType.Id);\n    LogicalAndFilter andFilter = new LogicalAndFilter(levelFilter, typeFilter);\n    List\u003cElement\u003e concreteColumns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Mueve el muro seleccionado 5 metros hacia arriba.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro para mover\");\nif (pickedRef != null)\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElement(doc, pickedRef.ElementId, translation);\n}"}
{"prompt":"Rota la columna seleccionada 45 grados.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una columna para rotar\");\nif (pickedRef != null)\n{\n    Element elem = doc.GetElement(pickedRef.ElementId);\n    LocationPoint lp = elem.Location as LocationPoint;\n    if (lp != null)\n    {\n        Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n        double angle = 45 * Math.PI / 180.0;\n        ElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);\n    }\n}"}
{"prompt":"Elimina todas las puertas del Nivel 1.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"Nivel 1\") as Level;\nif (level1 != null)\n{\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter andFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    ICollection\u003cElementId\u003e doorsToDelete = new FilteredElementCollector(doc).WherePasses(andFilter).ToElementIds();\n    if (doorsToDelete.Count \u003e 0)\n    {\n        doc.Delete(doorsToDelete);\n    }\n}"}
{"prompt":"Cambia el tipo de la ventana seleccionada al tipo \u0027Fija 120x60\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una ventana\");\nFamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast\u003cFamilySymbol\u003e().FirstOrDefault(fs =\u003e fs.Name == \"Fija 120x60\");\nif (pickedRef != null \u0026\u0026 newType != null)\n{\n    FamilyInstance window = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\n    if (window != null)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Crea una apertura rectangular de 1x1 metros en el centro del suelo seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un suelo\");\nif (pickedRef != null)\n{\n    Floor floor = doc.GetElement(pickedRef.ElementId) as Floor;\n    if (floor != null)\n    {\n        BoundingBoxXYZ bbox = floor.get_BoundingBox(null);\n        XYZ center = (bbox.Min + bbox.Max) / 2.0;\n        double size = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\n        XYZ p1 = new XYZ(center.X - size/2, center.Y - size/2, 0);\n        XYZ p2 = new XYZ(center.X + size/2, center.Y - size/2, 0);\n        XYZ p3 = new XYZ(center.X + size/2, center.Y + size/2, 0);\n        XYZ p4 = new XYZ(center.X - size/2, center.Y + size/2, 0);\n        CurveArray profile = new CurveArray();\n        profile.Append(Line.CreateBound(p1, p2));\n        profile.Append(Line.CreateBound(p2, p3));\n        profile.Append(Line.CreateBound(p3, p4));\n        profile.Append(Line.CreateBound(p4, p1));\n        doc.Create.NewOpening(floor, profile, false);\n    }\n}"}
{"prompt":"Oculta la categoría de mobiliario en la vista activa.","completion":"View activeView = doc.ActiveView;\nCategory furnitureCategory = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif (activeView != null \u0026\u0026 furnitureCategory != null \u0026\u0026 furnitureCategory.get_AllowsVisibilityControl(activeView))\n{\n    activeView.SetCategoryHidden(furnitureCategory.Id, true);\n}"}
{"prompt":"Crea los siguientes planos: \u0027A-101\u0027 con nombre \u0027Planta Baja\u0027, y \u0027A-102\u0027 con nombre \u0027Planta Alta\u0027.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet sheet1 = ViewSheet.Create(doc, titleBlock.Id);\n    sheet1.SheetNumber = \"A-101\";\n    sheet1.Name = \"Planta Baja\";\n    ViewSheet sheet2 = ViewSheet.Create(doc, titleBlock.Id);\n    sheet2.SheetNumber = \"A-102\";\n    sheet2.Name = \"Planta Alta\";\n}"}
{"prompt":"Coloca las vistas \u0027Planta Nivel 1\u0027 y \u0027Planta Nivel 2\u0027 en el plano \u0027A-101\u0027.","completion":"ViewSheet sheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast\u003cViewSheet\u003e().FirstOrDefault(s =\u003e s.SheetNumber == \"A-101\");\nView view1 = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cViewPlan\u003e().FirstOrDefault(v =\u003e v.Name == \"Planta Nivel 1\");\nView view2 = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast\u003cViewPlan\u003e().FirstOrDefault(v =\u003e v.Name == \"Planta Nivel 2\");\nif (sheet != null \u0026\u0026 view1 != null \u0026\u0026 view2 != null)\n{\n    XYZ insertPoint1 = new XYZ(1.0, 1.0, 0);\n    Viewport.Create(doc, sheet.Id, view1.Id, insertPoint1);\n    XYZ insertPoint2 = new XYZ(1.0, 2.0, 0);\n    Viewport.Create(doc, sheet.Id, view2.Id, insertPoint2);\n}"}
{"prompt":"Añade el prefijo \u0027ARQ-\u0027 a todas las tablas de planificación.","completion":"string prefix = \"ARQ-\";\nList\u003cViewSchedule\u003e schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast\u003cViewSchedule\u003e().Where(v =\u003e !v.IsTemplate).ToList();\nforeach (ViewSchedule schedule in schedules)\n{\n    if (!schedule.Name.StartsWith(prefix))\n    {\n        schedule.Name = prefix + schedule.Name;\n    }\n}"}
{"prompt":"Renombra todas las vistas de sección para que empiecen con \u0027SEC-\u0027.","completion":"string prefix = \"SEC-\";\nList\u003cViewSection\u003e sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast\u003cViewSection\u003e().Where(v =\u003e !v.IsTemplate).ToList();\nforeach (ViewSection view in sectionViews)\n{\n    if (!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Crea los worksets \u0027Arquitectura\u0027, \u0027Estructura\u0027 y \u0027MEP\u0027.","completion":"if (doc.IsWorkshared)\n{\n    Workset.Create(doc, \"Arquitectura\");\n    Workset.Create(doc, \"Estructura\");\n    Workset.Create(doc, \"MEP\");\n}"}
{"prompt":"Asigna todos los muros y suelos seleccionados al workset \u0027Estructura\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nWorkset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws =\u003e ws.Name == \"Estructura\");\nif (selectedIds.Count \u003e 0 \u0026\u0026 workset != null)\n{\n    int worksetId = workset.Id.IntegerValue;\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        Parameter wsparam = elem.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n        if (wsparam != null \u0026\u0026 !wsparam.IsReadOnly) wsparam.Set(worksetId);\n    }\n}"}
{"prompt":"Fija (pin) todos los vínculos de Revit en el proyecto.","completion":"List\u003cRevitLinkInstance\u003e links = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).Cast\u003cRevitLinkInstance\u003e().ToList();\nforeach (RevitLinkInstance link in links)\n{\n    if (!link.Pinned)\n    {\n        link.Pinned = true;\n    }\n}"}
{"prompt":"Pin all selected elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count \u003e 0)\n{\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null \u0026\u0026 !elem.Pinned)\n        {\n            elem.Pinned = true;\n        }\n    }\n}"}
{"prompt":"Set the \u0027Mark\u0027 parameter to \u0027D-01\u0027 for the selected door.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a door\");\nif (pickedRef != null)\n{\n    Element door = doc.GetElement(pickedRef.ElementId);\n    if (door != null)\n    {\n        Parameter markParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n        if (markParam != null \u0026\u0026 !markParam.IsReadOnly)\n        {\n            markParam.Set(\"D-01\");\n        }\n    }\n}"}
{"prompt":"Cambia el parámetro \u0027Función\u0027 de todos los muros seleccionados a \u0027Interior\u0027.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count \u003e 0)\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Wall wall = doc.GetElement(id) as Wall;\n        if (wall != null)\n        {\n            Parameter funcParam = wall.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n            if (funcParam != null \u0026\u0026 !funcParam.IsReadOnly)\n            {\n                funcParam.Set(1); // 1 corresponde a Interior\n            }\n        }\n    }\n}"}
{"prompt":"Conecta dos tuberías seleccionadas por el usuario con un codo.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first pipe\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second pipe\");\nif (ref1 != null \u0026\u0026 ref2 != null)\n{\n    Pipe pipe1 = doc.GetElement(ref1) as Pipe;\n    Pipe pipe2 = doc.GetElement(ref2) as Pipe;\n    if (pipe1 != null \u0026\u0026 pipe2 != null)\n    {\n        Connector c1 = pipe1.ConnectorManager.UnusedConnectors.Cast\u003cConnector\u003e().FirstOrDefault();\n        Connector c2 = pipe2.ConnectorManager.UnusedConnectors.Cast\u003cConnector\u003e().FirstOrDefault();\n        if (c1 != null \u0026\u0026 c2 != null)\n        {\n            doc.Create.NewElbowFitting(c1, c2);\n        }\n    }\n}"}
{"prompt":"Calcula el volumen total de hormigón de todas las zapatas de cimentación.","completion":"double totalVolume = 0.0;\nList\u003cFamilyInstance\u003e footings = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsNotElementType().Cast\u003cFamilyInstance\u003e().ToList();\nforeach (FamilyInstance footing in footings)\n{\n    Parameter volumeParam = footing.get_Parameter(BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if (volumeParam != null \u0026\u0026 volumeParam.HasValue)\n    {\n        totalVolume += volumeParam.AsDouble();\n    }\n}\n// El volumen está en pies cúbicos. El orquestador puede convertirlo a metros cúbicos."}
{"prompt":"Encuentra el muro con la marca \u0027M-01\u0027 y cambia su comentario a \u0027Muro de carga principal\u0027.","completion":"string markValue = \"M-01\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).FirstOrDefault() as Wall;\nif (wall != null)\n{\n    Parameter commentParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n    if (commentParam != null \u0026\u0026 !commentParam.IsReadOnly)\n    {\n        commentParam.Set(\"Muro de carga principal\");\n    }\n}"}
{"prompt":"Añade refuerzo tipo estribo a la viga seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference beamRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a beam\");\nRebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape stirrupShape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).Cast\u003cRebarShape\u003e().FirstOrDefault(s =\u003e s.RebarStyle == RebarStyle.StirrupTie);\nif (beamRef != null \u0026\u0026 barType != null \u0026\u0026 stirrupShape != null)\n{\n    FamilyInstance beam = doc.GetElement(beamRef) as FamilyInstance;\n    if (beam != null)\n    {\n        Rebar.CreateFromRebarShape(doc, stirrupShape, barType, beam, beam.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);\n    }\n}"}
{"prompt":"Crea una losa de cimentación estructural de 40cm de espesor.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast\u003cLevel\u003e().OrderBy(l =\u003e l.Elevation).FirstOrDefault();\nFloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast\u003cFloorType\u003e().FirstOrDefault(ft =\u003e ft.get_Parameter(BuiltInParameter.FLOOR_PARAM_IS_STRUCTURAL).AsInteger() == 1);\nif(slabTypeToDuplicate != null \u0026\u0026 foundationLevel != null)\n{\n    string newTypeName = \"Losa Cimentación 40cm\";\n    FloorType newSlabType = slabTypeToDuplicate.Duplicate(newTypeName) as FloorType;\n    if(newSlabType != null)\n    {\n        CompoundStructure cs = newSlabType.GetCompoundStructure();\n        if (cs != null)\n        {\n            cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(40, UnitTypeId.Centimeters));\n            newSlabType.SetCompoundStructure(cs);\n            XYZ p1 = new XYZ(0,0,0); XYZ p2 = new XYZ(10,0,0); XYZ p3 = new XYZ(10,10,0); XYZ p4 = new XYZ(0,10,0);\n            CurveLoop profile = new CurveLoop();\n            profile.Append(Line.CreateBound(p1,p2)); profile.Append(Line.CreateBound(p2,p3)); profile.Append(Line.CreateBound(p3,p4)); profile.Append(Line.CreateBound(p4,p1));\n            Floor.Create(doc, new List\u003cCurveLoop\u003e{profile}, newSlabType.Id, foundationLevel.Id);\n        }\n    }\n}"}
{"prompt":"Conecta dos conductos con una unión en T.","completion":"List\u003cDuct\u003e ducts = new FilteredElementCollector(doc).OfClass(typeof(Duct)).Cast\u003cDuct\u003e().ToList();\nif (ducts.Count \u003e= 2)\n{\n    Connector c1 = ducts[0].ConnectorManager.UnusedConnectors.Cast\u003cConnector\u003e().FirstOrDefault();\n    Connector c2 = ducts[1].ConnectorManager.UnusedConnectors.Cast\u003cConnector\u003e().FirstOrDefault();\n    if (c1 != null \u0026\u0026 c2 != null)\n    {\n        // CORRECCIÓN: El método correcto es NewUnionFitting, no NewTeeFitting para una conexión simple.\n        doc.Create.NewUnionFitting(c1, c2);\n    }\n}"}
{"prompt":"Crea un nuevo parámetro de proyecto compartido de texto llamado \u0027Notas Adicionales\u0027 para muros y puertas.","completion":"string paramName = \"Notas Adicionales\";\nstring originalFile = doc.Application.SharedParametersFilename;\nstring tempFile = System.IO.Path.GetTempFileName() + \".txt\";\nusing (System.IO.File.Create(tempFile)) { }\ndoc.Application.SharedParametersFilename = tempFile;\ntry\n{\n    DefinitionFile defFile = doc.Application.OpenSharedParameterFile();\n    if (defFile != null)\n    {\n        DefinitionGroup group = defFile.Groups.Create(\"General\");\n        if (group != null)\n        {\n            ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(paramName, SpecTypeId.String.Text);\n            Definition definition = group.Definitions.Create(options);\n            if (definition != null)\n            {\n                CategorySet categories = doc.Application.Create.NewCategorySet();\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\n                categories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\n                InstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\n                doc.ParameterBindings.Insert(definition, binding, GroupTypeId.Data);\n            }\n        }\n    }\n}\nfinally\n{\n    doc.Application.SharedParametersFilename = originalFile;\n    System.IO.File.Delete(tempFile);\n}"}
{"prompt":"Inserta un terminal de aire en el extremo de un conducto.","completion":"Duct duct = new FilteredElementCollector(doc).OfClass(typeof(Duct)).FirstOrDefault() as Duct;\nFamilySymbol terminalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctTerminal).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (duct != null \u0026\u0026 terminalSymbol != null)\n{\n    if(!terminalSymbol.IsActive) terminalSymbol.Activate();\n    LocationCurve locCurve = duct.Location as LocationCurve;\n    if (locCurve != null)\n    {\n        Connector endConnector = duct.ConnectorManager.UnusedConnectors.Cast\u003cConnector\u003e().FirstOrDefault(c =\u003e c.Origin.IsAlmostEqualTo(locCurve.Curve.GetEndPoint(1)));\n        if (endConnector != null)\n        {\n            doc.Create.NewFamilyInstance(endConnector.Origin, terminalSymbol, duct, StructuralType.NonStructural);\n        }\n    }\n}"}
{"prompt":"Etiqueta todos los muros en la vista actual.","completion":"View activeView = doc.ActiveView;\nif (activeView == null) return;\n\nFilteredElementCollector collector = new FilteredElementCollector(doc, activeView.Id)\n    .OfCategory(BuiltInCategory.OST_Walls)\n    .WhereElementIsNotElementType();\n\nIList\u003cElement\u003e elementsToTag = collector.ToElements();\n\nif (elementsToTag.Any())\n{\n    foreach (Element elem in elementsToTag)\n    {\n        Reference elemRef = new Reference(elem);\n        BoundingBoxXYZ bbox = elem.get_BoundingBox(activeView);\n        if (bbox == null) continue;\n\n        XYZ tagLocation = (bbox.Min + bbox.Max) / 2.0;\n        IndependentTag.Create(doc, activeView.Id, elemRef, true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, tagLocation);\n    }\n}"}
{"prompt":"Aplica etiquetas a cada puerta visible en la vista activa.","completion":"View activeView = doc.ActiveView;\nif (activeView == null) return;\n\nFilteredElementCollector collector = new FilteredElementCollector(doc, activeView.Id)\n    .OfCategory(BuiltInCategory.OST_Doors)\n    .WhereElementIsNotElementType();\n\nIList\u003cElement\u003e elementsToTag = collector.ToElements();\n\nif (elementsToTag.Any())\n{\n    foreach (Element elem in elementsToTag)\n    {\n        Reference elemRef = new Reference(elem);\n        BoundingBoxXYZ bbox = elem.get_BoundingBox(activeView);\n        if (bbox == null) continue;\n\n        XYZ tagLocation = (bbox.Min + bbox.Max) / 2.0;\n        IndependentTag.Create(doc, activeView.Id, elemRef, true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, tagLocation);\n    }\n}"}
{"prompt":"Crea etiquetas para todas las ventanas que se muestran en pantalla.","completion":"View activeView = doc.ActiveView;\nif (activeView == null) return;\n\nFilteredElementCollector collector = new FilteredElementCollector(doc, activeView.Id)\n    .OfCategory(BuiltInCategory.OST_Windows)\n    .WhereElementIsNotElementType();\n\nIList\u003cElement\u003e elementsToTag = collector.ToElements();\n\nif (elementsToTag.Any())\n{\n    foreach (Element elem in elementsToTag)\n    {\n        Reference elemRef = new Reference(elem);\n        BoundingBoxXYZ bbox = elem.get_BoundingBox(activeView);\n        if (bbox == null) continue;\n\n        XYZ tagLocation = (bbox.Min + bbox.Max) / 2.0;\n        IndependentTag.Create(doc, activeView.Id, elemRef, true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, tagLocation);\n    }\n}"}
{"prompt":"Etiqueta cada pilar estructural en la vista activa.","completion":"View activeView = doc.ActiveView;\nif (activeView == null) return;\n\nFilteredElementCollector collector = new FilteredElementCollector(doc, activeView.Id)\n    .OfCategory(BuiltInCategory.OST_StructuralColumns)\n    .WhereElementIsNotElementType();\n\nIList\u003cElement\u003e elementsToTag = collector.ToElements();\n\nif (elementsToTag.Any())\n{\n    foreach (Element elem in elementsToTag)\n    {\n        Reference elemRef = new Reference(elem);\n        BoundingBoxXYZ bbox = elem.get_BoundingBox(activeView);\n        if (bbox == null) continue;\n\n        XYZ tagLocation = (bbox.Min + bbox.Max) / 2.0;\n        IndependentTag.Create(doc, activeView.Id, elemRef, true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, tagLocation);\n    }\n}"}
{"prompt":"Añade una etiqueta a todos los elementos de mobiliario en la vista actual.","completion":"View activeView = doc.ActiveView;\nif (activeView == null) return;\n\nFilteredElementCollector collector = new FilteredElementCollector(doc, activeView.Id)\n    .OfCategory(BuiltInCategory.OST_Furniture)\n    .WhereElementIsNotElementType();\n\nIList\u003cElement\u003e elementsToTag = collector.ToElements();\n\nif (elementsToTag.Any())\n{\n    foreach (Element elem in elementsToTag)\n    {\n        Reference elemRef = new Reference(elem);\n        BoundingBoxXYZ bbox = elem.get_BoundingBox(activeView);\n        if (bbox == null) continue;\n\n        XYZ tagLocation = (bbox.Min + bbox.Max) / 2.0;\n        IndependentTag.Create(doc, activeView.Id, elemRef, true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, tagLocation);\n    }\n}"}
{"prompt":"Tag all walls in the current view.","completion":"View activeView = doc.ActiveView;\nif (activeView == null) return;\n\nFilteredElementCollector collector = new FilteredElementCollector(doc, activeView.Id)\n    .OfCategory(BuiltInCategory.OST_Walls)\n    .WhereElementIsNotElementType();\n\nIList\u003cElement\u003e elementsToTag = collector.ToElements();\n\nif (elementsToTag.Any())\n{\n    foreach (Element elem in elementsToTag)\n    {\n        Reference elemRef = new Reference(elem);\n        BoundingBoxXYZ bbox = elem.get_BoundingBox(activeView);\n        if (bbox == null) continue;\n\n        XYZ tagLocation = (bbox.Min + bbox.Max) / 2.0;\n        IndependentTag.Create(doc, activeView.Id, elemRef, true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, tagLocation);\n    }\n}"}
{"prompt":"Apply tags to every door visible in the active view.","completion":"View activeView = doc.ActiveView;\nif (activeView == null) return;\n\nFilteredElementCollector collector = new FilteredElementCollector(doc, activeView.Id)\n    .OfCategory(BuiltInCategory.OST_Doors)\n    .WhereElementIsNotElementType();\n\nIList\u003cElement\u003e elementsToTag = collector.ToElements();\n\nif (elementsToTag.Any())\n{\n    foreach (Element elem in elementsToTag)\n    {\n        Reference elemRef = new Reference(elem);\n        BoundingBoxXYZ bbox = elem.get_BoundingBox(activeView);\n        if (bbox == null) continue;\n\n        XYZ tagLocation = (bbox.Min + bbox.Max) / 2.0;\n        IndependentTag.Create(doc, activeView.Id, elemRef, true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, tagLocation);\n    }\n}"}
{"prompt":"Create tags for all windows shown on screen.","completion":"View activeView = doc.ActiveView;\nif (activeView == null) return;\n\nFilteredElementCollector collector = new FilteredElementCollector(doc, activeView.Id)\n    .OfCategory(BuiltInCategory.OST_Windows)\n    .WhereElementIsNotElementType();\n\nIList\u003cElement\u003e elementsToTag = collector.ToElements();\n\nif (elementsToTag.Any())\n{\n    foreach (Element elem in elementsToTag)\n    {\n        Reference elemRef = new Reference(elem);\n        BoundingBoxXYZ bbox = elem.get_BoundingBox(activeView);\n        if (bbox == null) continue;\n\n        XYZ tagLocation = (bbox.Min + bbox.Max) / 2.0;\n        IndependentTag.Create(doc, activeView.Id, elemRef, true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, tagLocation);\n    }\n}"}
{"prompt":"Tag every structural column in the active view.","completion":"View activeView = doc.ActiveView;\nif (activeView == null) return;\n\nFilteredElementCollector collector = new FilteredElementCollector(doc, activeView.Id)\n    .OfCategory(BuiltInCategory.OST_StructuralColumns)\n    .WhereElementIsNotElementType();\n\nIList\u003cElement\u003e elementsToTag = collector.ToElements();\n\nif (elementsToTag.Any())\n{\n    foreach (Element elem in elementsToTag)\n    {\n        Reference elemRef = new Reference(elem);\n        BoundingBoxXYZ bbox = elem.get_BoundingBox(activeView);\n        if (bbox == null) continue;\n\n        XYZ tagLocation = (bbox.Min + bbox.Max) / 2.0;\n        IndependentTag.Create(doc, activeView.Id, elemRef, true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, tagLocation);\n    }\n}"}
{"prompt":"Add a tag to all furniture elements in the current view.","completion":"View activeView = doc.ActiveView;\nif (activeView == null) return;\n\nFilteredElementCollector collector = new FilteredElementCollector(doc, activeView.Id)\n    .OfCategory(BuiltInCategory.OST_Furniture)\n    .WhereElementIsNotElementType();\n\nIList\u003cElement\u003e elementsToTag = collector.ToElements();\n\nif (elementsToTag.Any())\n{\n    foreach (Element elem in elementsToTag)\n    {\n        Reference elemRef = new Reference(elem);\n        BoundingBoxXYZ bbox = elem.get_BoundingBox(activeView);\n        if (bbox == null) continue;\n\n        XYZ tagLocation = (bbox.Min + bbox.Max) / 2.0;\n        IndependentTag.Create(doc, activeView.Id, elemRef, true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, tagLocation);\n    }\n}"}
{"prompt":"Aísla los elementos seleccionados en la vista.","completion":"ICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null \u0026\u0026 selectedIds.Any())\n{\n    activeView.IsolateElementsTemporary(selectedIds);\n}"}
{"prompt":"Oculta los elementos que tengo seleccionados.","completion":"ICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null \u0026\u0026 selectedIds.Any())\n{\n    activeView.HideElements(selectedIds);\n}"}
{"prompt":"Quiero ver solamente lo que he seleccionado.","completion":"ICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null \u0026\u0026 selectedIds.Any())\n{\n    activeView.IsolateElementsTemporary(selectedIds);\n}"}
{"prompt":"Esconde mi selección actual en esta vista.","completion":"ICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null \u0026\u0026 selectedIds.Any())\n{\n    activeView.HideElements(selectedIds);\n}"}
{"prompt":"Aísla temporalmente la selección.","completion":"ICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null \u0026\u0026 selectedIds.Any())\n{\n    activeView.IsolateElementsTemporary(selectedIds);\n}"}
{"prompt":"Isolate the selected elements in the view.","completion":"ICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null \u0026\u0026 selectedIds.Any())\n{\n    activeView.IsolateElementsTemporary(selectedIds);\n}"}
{"prompt":"Hide the elements I have selected.","completion":"ICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null \u0026\u0026 selectedIds.Any())\n{\n    activeView.HideElements(selectedIds);\n}"}
{"prompt":"I want to see only what I\u0027ve selected.","completion":"ICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null \u0026\u0026 selectedIds.Any())\n{\n    activeView.IsolateElementsTemporary(selectedIds);\n}"}
{"prompt":"Hide my current selection in this view.","completion":"ICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null \u0026\u0026 selectedIds.Any())\n{\n    activeView.HideElements(selectedIds);\n}"}
{"prompt":"Temporarily isolate the current selection.","completion":"ICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nView activeView = doc.ActiveView;\n\nif (activeView != null \u0026\u0026 selectedIds.Any())\n{\n    activeView.IsolateElementsTemporary(selectedIds);\n}"}
{"prompt":"Crea una retícula de ejes estructurales de 40x25 metros, con ejes longitudinales cada 8 metros y transversales cada 12.5 metros.","completion":"double length = UnitUtils.ConvertToInternalUnits(40, UnitTypeId.Meters);\ndouble width = UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Meters);\ndouble spacingX = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\ndouble spacingY = UnitUtils.ConvertToInternalUnits(12.5, UnitTypeId.Meters);\n\nfor (double y = 0; y \u003c= width; y += spacingY)\n{\n    Line line = Line.CreateBound(new XYZ(0, y, 0), new XYZ(length, y, 0));\n    Grid.Create(doc, line);\n}\n\nfor (double x = 0; x \u003c= length; x += spacingX)\n{\n    Line line = Line.CreateBound(new XYZ(x, 0, 0), new XYZ(x, width, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea los muros perimetrales de tipo \u0027Generic - 200mm\u0027 a lo largo de los ejes exteriores, con una altura de 8 metros sobre el Nivel 1.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == \"Generic - 200mm\") as WallType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"Level 1\") as Level;\n\nFilteredElementCollector gridCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Grids).WhereElementIsNotElementType();\nIList\u003cGrid\u003e grids = gridCollector.Cast\u003cGrid\u003e().ToList();\n\nif (wallType != null \u0026\u0026 level != null \u0026\u0026 grids.Any())\n{\n    // Assuming grids define the building perimeter\n    XYZ min = new XYZ(grids.Min(g =\u003e g.Curve.GetEndPoint(0).X), grids.Min(g =\u003e g.Curve.GetEndPoint(0).Y), 0);\n    XYZ max = new XYZ(grids.Max(g =\u003e g.Curve.GetEndPoint(1).X), grids.Max(g =\u003e g.Curve.GetEndPoint(1).Y), 0);\n\n    XYZ p1 = new XYZ(min.X, min.Y, 0);\n    XYZ p2 = new XYZ(max.X, min.Y, 0);\n    XYZ p3 = new XYZ(max.X, max.Y, 0);\n    XYZ p4 = new XYZ(min.X, max.Y, 0);\n    \n    double height = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n\n    Wall.Create(doc, Line.CreateBound(p1, p2), wallType.Id, level.Id, height, 0.0, false, false);\n    Wall.Create(doc, Line.CreateBound(p2, p3), wallType.Id, level.Id, height, 0.0, false, false);\n    Wall.Create(doc, Line.CreateBound(p3, p4), wallType.Id, level.Id, height, 0.0, false, false);\n    Wall.Create(doc, Line.CreateBound(p4, p1), wallType.Id, level.Id, height, 0.0, false, false);\n}"}
{"prompt":"Genera un suelo de tipo \u0027Generic 150mm\u0027 que cubra el área definida por los muros perimetrales en el Nivel 1.","completion":"FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault(f =\u003e f.Name == \"Generic 150mm\") as FloorType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"Level 1\") as Level;\n\nIList\u003cWall\u003e walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast\u003cWall\u003e().ToList();\n\nif (floorType != null \u0026\u0026 level != null \u0026\u0026 walls.Count \u003e= 4)\n{\n    CurveLoop profile = new CurveLoop();\n    // Simplified assumption of a rectangular perimeter for the agent\n    XYZ min = new XYZ(walls.Min(w =\u003e (w.Location as LocationCurve).Curve.GetEndPoint(0).X), walls.Min(w =\u003e (w.Location as LocationCurve).Curve.GetEndPoint(0).Y), 0);\n    XYZ max = new XYZ(walls.Max(w =\u003e (w.Location as LocationCurve).Curve.GetEndPoint(1).X), walls.Max(w =\u003e (w.Location as LocationCurve).Curve.GetEndPoint(1).Y), 0);\n\n    profile.Append(Line.CreateBound(new XYZ(min.X, min.Y, 0), new XYZ(max.X, min.Y, 0)));\n    profile.Append(Line.CreateBound(new XYZ(max.X, min.Y, 0), new XYZ(max.X, max.Y, 0)));\n    profile.Append(Line.CreateBound(new XYZ(max.X, max.Y, 0), new XYZ(min.X, max.Y, 0)));\n    profile.Append(Line.CreateBound(new XYZ(min.X, max.Y, 0), new XYZ(min.X, min.Y, 0)));\n\n    Floor.Create(doc, new List\u003cCurveLoop\u003e { profile }, floorType.Id, level.Id);\n}"}
{"prompt":"Crea una cubierta a dos aguas con una pendiente del 10% sobre los muros existentes, usando el tipo \u0027Generic - 400mm\u0027.","completion":"RoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault(rt =\u003e rt.Name == \"Generic - 400mm\") as RoofType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"Level 1\") as Level; // Assuming roof is based on Level 1\n\nif (roofType != null \u0026\u0026 level != null)\n{\n    // This is a complex operation that requires multiple steps and/or user interaction and is not supported by the agent.\n}"}
{"prompt":"Build a structural grid 100 by 60 feet, with longitudinal lines every 25 ft and transverse lines every 20 ft.","completion":"double length = 100.0;\ndouble width = 60.0;\ndouble spacingX = 25.0;\ndouble spacingY = 20.0;\n\n// Create transverse grids (Y direction)\nfor (double y = 0; y \u003c= width; y += spacingY)\n{\n    Line line = Line.CreateBound(new XYZ(0, y, 0), new XYZ(length, y, 0));\n    Grid.Create(doc, line);\n}\n\n// Create longitudinal grids (X direction)\nfor (double x = 0; x \u003c= length; x += spacingX)\n{\n    Line line = Line.CreateBound(new XYZ(x, 0, 0), new XYZ(x, width, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create perimeter walls along the exterior grid lines, 30 feet high on Level 1, using \u0027Generic - 8\"\u0027 wall type.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt =\u003e wt.Name == \"Generic - 8\\\"\") as WallType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"Level 1\") as Level;\n\nFilteredElementCollector gridCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Grids).WhereElementIsNotElementType();\nIList\u003cGrid\u003e grids = gridCollector.Cast\u003cGrid\u003e().ToList();\n\nif (wallType != null \u0026\u0026 level != null \u0026\u0026 grids.Any())\n{\n    // Simplified rectangular perimeter from grid extents\n    XYZ min = new XYZ(grids.Min(g =\u003e g.Curve.GetEndPoint(0).X), grids.Min(g =\u003e g.Curve.GetEndPoint(0).Y), 0);\n    XYZ max = new XYZ(grids.Max(g =\u003e g.Curve.GetEndPoint(1).X), grids.Max(g =\u003e g.Curve.GetEndPoint(1).Y), 0);\n\n    XYZ p1 = new XYZ(min.X, min.Y, 0);\n    XYZ p2 = new XYZ(max.X, min.Y, 0);\n    XYZ p3 = new XYZ(max.X, max.Y, 0);\n    XYZ p4 = new XYZ(min.X, max.Y, 0);\n    \n    double height = 30.0;\n\n    Wall.Create(doc, Line.CreateBound(p1, p2), wallType.Id, level.Id, height, 0.0, false, false);\n    Wall.Create(doc, Line.CreateBound(p2, p3), wallType.Id, level.Id, height, 0.0, false, false);\n    Wall.Create(doc, Line.CreateBound(p3, p4), wallType.Id, level.Id, height, 0.0, false, false);\n    Wall.Create(doc, Line.CreateBound(p4, p1), wallType.Id, level.Id, height, 0.0, false, false);\n}"}
{"prompt":"Attach the top of all walls to the nearest roof or floor above.","completion":"FilteredElementCollector wallCollector = new FilteredElementCollector(doc).OfClass(typeof(Wall));\n\nif (wallCollector.Any())\n{\n    foreach (Wall wall in wallCollector)\n    {\n        if (wall.get_Parameter(BuiltInParameter.WALL_HEIGHT_TYPE).AsElementId() != new ElementId(1000000 + (int)BuiltInParameter.WALL_USER_HEIGHT_PARAM))\n        {\n            wall.get_Parameter(BuiltInParameter.WALL_TOP_IS_ATTACHED).Set(1);\n        }\n    }\n}"}
{"prompt":"Dame una lista de todos los tipos de muro en el proyecto.","completion":"FilteredElementCollector collector = new FilteredElementCollector(doc).OfClass(typeof(WallType));\nList\u003cstring\u003e wallTypeNames = collector.Select(e =\u003e e.Name).ToList();"}
{"prompt":"Obtén los nombres de todos los tipos de suelo disponibles.","completion":"FilteredElementCollector collector = new FilteredElementCollector(doc).OfClass(typeof(FloorType));\nList\u003cstring\u003e floorTypeNames = collector.Select(e =\u003e e.Name).ToList();"}
{"prompt":"Necesito ver todos los tipos de puertas que están cargados.","completion":"FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType();\nList\u003cstring\u003e doorTypeNames = collector.Select(e =\u003e e.Name).ToList();"}
{"prompt":"Enumera todos los tipos de pilares estructurales.","completion":"FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType();\nList\u003cstring\u003e columnTypeNames = collector.Select(e =\u003e e.Name).ToList();"}
{"prompt":"Haz una lista con los nombres de todos los tipos de tubería.","completion":"FilteredElementCollector collector = new FilteredElementCollector(doc).OfClass(typeof(PipeType));\nList\u003cstring\u003e pipeTypeNames = collector.Select(e =\u003e e.Name).ToList();"}
{"prompt":"Quiero una lista de los tipos de equipos mecánicos en el modelo.","completion":"FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_MechanicalEquipment).WhereElementIsElementType();\nList\u003cstring\u003e equipmentTypeNames = collector.Select(e =\u003e e.Name).ToList();"}
{"prompt":"List all available window types in the project.","completion":"FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType();\nList\u003cstring\u003e windowTypeNames = collector.Select(e =\u003e e.Name).ToList();"}
{"prompt":"Get the names of all loaded furniture types.","completion":"FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType();\nList\u003cstring\u003e furnitureTypeNames = collector.Select(e =\u003e e.Name).ToList();"}
{"prompt":"What are the ceiling types in this model?","completion":"FilteredElementCollector collector = new FilteredElementCollector(doc).OfClass(typeof(CeilingType));\nList\u003cstring\u003e ceilingTypeNames = collector.Select(e =\u003e e.Name).ToList();"}
{"prompt":"Provide a list of all structural framing types.","completion":"FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType();\nList\u003cstring\u003e framingTypeNames = collector.Select(e =\u003e e.Name).ToList();"}
{"prompt":"Enumerate all duct types.","completion":"FilteredElementCollector collector = new FilteredElementCollector(doc).OfClass(typeof(DuctType));\nList\u003cstring\u003e ductTypeNames = collector.Select(e =\u003e e.Name).ToList();"}
{"prompt":"Show me a list of all plumbing fixture types.","completion":"FilteredElementCollector collector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PlumbingFixtures).WhereElementIsElementType();\nList\u003cstring\u003e fixtureTypeNames = collector.Select(e =\u003e e.Name).ToList();"}
{"prompt":"Change the height of the selected walls to 3.5 meters.","completion":"ICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Any())\n{\n    double newHeight = UnitUtils.ConvertToInternalUnits(3.5, UnitTypeId.Meters);\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null)\n        {\n            Parameter heightParam = elem.get_Parameter(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\n            if (heightParam != null \u0026\u0026 !heightParam.IsReadOnly)\n            {\n                heightParam.Set(newHeight);\n            }\n        }\n    }\n}"}
{"prompt":"Asigna el comentario \u0027Revisar Detalle\u0027 a los elementos seleccionados.","completion":"ICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Any())\n{\n    string comment = \"Revisar Detalle\";\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null)\n        {\n            Parameter commentParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n            if (commentParam != null \u0026\u0026 !commentParam.IsReadOnly)\n            {\n                commentParam.Set(comment);\n            }\n        }\n    }\n}"}
{"prompt":"Set the Mark for the selected doors to \u0027D-101\u0027.","completion":"ICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Any())\n{\n    string mark = \"D-101\";\n    foreach (ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if (elem != null \u0026\u0026 elem.Category.Id.IntegerValue == (int)BuiltInCategory.OST_Doors)\n        {\n            Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n            if (markParam != null \u0026\u0026 !markParam.IsReadOnly)\n            {\n                markParam.Set(mark);\n            }\n        }\n    }\n}"}
{"prompt":"¿Cuál es la longitud de la viga seleccionada?","completion":"ElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\nif (selectedId != null \u0026\u0026 selectedId != ElementId.InvalidElementId)\n{\n    Element beam = doc.GetElement(selectedId);\n    if (beam != null)\n    {\n        Parameter lengthParam = beam.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH);\n        if (lengthParam != null)\n        {\n            double lengthInFeet = lengthParam.AsDouble();\n            // The orchestrator would be responsible for displaying this value.\n        }\n    }\n}"}
{"prompt":"Delete the selected elements.","completion":"ICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Any())\n{\n    doc.Delete(selectedIds);\n}"}
{"prompt":"Borra los muros que tengo seleccionados.","completion":"ICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Any())\n{\n    doc.Delete(selectedIds);\n}"}
{"prompt":"Remove the selected furniture from the model.","completion":"ICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Any())\n{\n    doc.Delete(selectedIds);\n}"}
{"prompt":"Elimina la selección actual.","completion":"ICollection\u003cElementId\u003e selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Any())\n{\n    doc.Delete(selectedIds);\n}"}
{"prompt":"Crea un nuevo plano con el número \u0027A-101\u0027 y nombre \u0027Planta Baja\u0027.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\n\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    if (sheet != null)\n    {\n        sheet.SheetNumber = \"A-101\";\n        sheet.Name = \"Planta Baja\";\n    }\n}"}
{"prompt":"Crea una vista de planta para el \u0027Nivel 2\u0027.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l =\u003e l.Name == \"Nivel 2\") as Level;\nViewFamilyType viewFamilyType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast\u003cViewFamilyType\u003e().FirstOrDefault(vft =\u003e vft.ViewFamily == ViewFamily.FloorPlan);\n\nif (level != null \u0026\u0026 viewFamilyType != null)\n{\n    ViewPlan.Create(doc, viewFamilyType.Id, level.Id);\n}"}
{"prompt":"Duplicate the active view with detailing.","completion":"View activeView = doc.ActiveView;\nif (activeView != null)\n{\n    activeView.Duplicate(ViewDuplicateOption.WithDetailing);\n}"}
{"prompt":"Crea un suelo en la habitación \u0027Oficina 101\u0027 usando el tipo de piso \u0027Genérico 150mm\u0027.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r =\u003e r.Name == \"Oficina 101\") as Room;\n\nif (room != null)\n{\n    Level level = room.Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault(ft =\u003e ft.Name == \"Genérico 150mm\") as FloorType;\n\n    if (level != null \u0026\u0026 floorType != null)\n    {\n        SpatialElementBoundaryOptions options = new SpatialElementBoundaryOptions();\n        IList\u003cIList\u003cBoundarySegment\u003e\u003e boundarySegments = room.GetBoundarySegments(options);\n        IList\u003cBoundarySegment\u003e outerBoundary = boundarySegments.FirstOrDefault();\n\n        if (outerBoundary != null \u0026\u0026 outerBoundary.Any())\n        {\n            CurveLoop curveLoop = new CurveLoop();\n            foreach (BoundarySegment segment in outerBoundary)\n            {\n                curveLoop.Append(segment.GetCurve());\n            }\n            Floor.Create(doc, new List\u003cCurveLoop\u003e { curveLoop }, floorType.Id, level.Id);\n        }\n    }\n}"}
{"prompt":"Create a ceiling in the \u0027Living Room\u0027 at a height of 9 feet.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r =\u003e r.Name == \"Living Room\") as Room;\n\nif (room != null)\n{\n    Level level = room.Level;\n    CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\n\n    if (level != null \u0026\u0026 ceilingType != null)\n    {\n        SpatialElementBoundaryOptions options = new SpatialElementBoundaryOptions();\n        IList\u003cIList\u003cBoundarySegment\u003e\u003e boundarySegments = room.GetBoundarySegments(options);\n        IList\u003cBoundarySegment\u003e outerBoundary = boundarySegments.FirstOrDefault();\n\n        if (outerBoundary != null \u0026\u0026 outerBoundary.Any())\n        {\n            CurveLoop curveLoop = new CurveLoop();\n            foreach (BoundarySegment segment in outerBoundary)\n            {\n                curveLoop.Append(segment.GetCurve());\n            }\n            Ceiling ceiling = Ceiling.Create(doc, new List\u003cCurveLoop\u003e { curveLoop }, ceilingType.Id, level.Id);\n            if (ceiling != null)\n            {\n                Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n                if (heightParam != null \u0026\u0026 !heightParam.IsReadOnly) heightParam.Set(9.0);\n            }\n        }\n    }\n}"}
{"prompt":"Generate a floor that matches the boundary of the \u0027Kitchen\u0027 room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r =\u003e r.Name == \"Kitchen\") as Room;\n\nif (room != null)\n{\n    Level level = room.Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n\n    if (level != null \u0026\u0026 floorType != null)\n    {\n        SpatialElementBoundaryOptions options = new SpatialElementBoundaryOptions();\n        IList\u003cIList\u003cBoundarySegment\u003e\u003e boundarySegments = room.GetBoundarySegments(options);\n        IList\u003cBoundarySegment\u003e outerBoundary = boundarySegments.FirstOrDefault();\n\n        if (outerBoundary != null \u0026\u0026 outerBoundary.Any())\n        {\n            CurveLoop curveLoop = new CurveLoop();\n            foreach (BoundarySegment segment in outerBoundary)\n            {\n                curveLoop.Append(segment.GetCurve());\n            }\n            Floor.Create(doc, new List\u003cCurveLoop\u003e { curveLoop }, floorType.Id, level.Id);\n        }\n    }\n}"}
{"prompt":"Modela un plafón para el \u0027Dormitorio Principal\u0027 a 2.7 metros de altura.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r =\u003e r.Name == \"Dormitorio Principal\") as Room;\n\nif (room != null)\n{\n    Level level = room.Level;\n    CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\n\n    if (level != null \u0026\u0026 ceilingType != null)\n    {\n        SpatialElementBoundaryOptions options = new SpatialElementBoundaryOptions();\n        IList\u003cIList\u003cBoundarySegment\u003e\u003e boundarySegments = room.GetBoundarySegments(options);\n        IList\u003cBoundarySegment\u003e outerBoundary = boundarySegments.FirstOrDefault();\n\n        if (outerBoundary != null \u0026\u0026 outerBoundary.Any())\n        {\n            CurveLoop curveLoop = new CurveLoop();\n            foreach (BoundarySegment segment in outerBoundary)\n            {\n                curveLoop.Append(segment.GetCurve());\n            }\n            Ceiling ceiling = Ceiling.Create(doc, new List\u003cCurveLoop\u003e { curveLoop }, ceilingType.Id, level.Id);\n            if (ceiling != null)\n            {\n                Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n                if (heightParam != null \u0026\u0026 !heightParam.IsReadOnly) heightParam.Set(UnitUtils.ConvertToInternalUnits(2.7, UnitTypeId.Meters));\n            }\n        }\n    }\n}"}
{"prompt":"Based on the perimeter of the \u0027Conference Room\u0027, create a \u0027Polished Concrete\u0027 floor.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r =\u003e r.Name == \"Conference Room\") as Room;\n\nif (room != null)\n{\n    Level level = room.Level;\n    FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault(ft =\u003e ft.Name == \"Polished Concrete\") as FloorType;\n\n    if (level != null \u0026\u0026 floorType != null)\n    {\n        SpatialElementBoundaryOptions options = new SpatialElementBoundaryOptions();\n        IList\u003cIList\u003cBoundarySegment\u003e\u003e boundarySegments = room.GetBoundarySegments(options);\n        IList\u003cBoundarySegment\u003e outerBoundary = boundarySegments.FirstOrDefault();\n\n        if (outerBoundary != null \u0026\u0026 outerBoundary.Any())\n        {\n            CurveLoop curveLoop = new CurveLoop();\n            foreach (BoundarySegment segment in outerBoundary)\n            {\n                curveLoop.Append(segment.GetCurve());\n            }\n            Floor.Create(doc, new List\u003cCurveLoop\u003e { curveLoop }, floorType.Id, level.Id);\n        }\n    }\n}"}
