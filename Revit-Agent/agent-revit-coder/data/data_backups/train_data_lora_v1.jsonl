{"prompt":"Crea un muro de 5 metros de largo y 3 metros de alto.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstElement() as WallType;\nLine line = Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\nWall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);"}
{"prompt":"Inserta una ventana de 1 metro de ancho y 1.2 metros de alto en la pared anterior.","completion":"FamilySymbol windowSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name.Contains(\"1m x 1.2m\"));\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif (windowSymbol != null && hostWall != null) {\n    if (!windowSymbol.IsActive) windowSymbol.Activate();\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    doc.Create.NewFamilyInstance(new XYZ(2.5, 0, 1.0), windowSymbol, hostWall, level, StructuralType.NonStructural);\n}"}
{"prompt":"Crea una columna estructural en la posición X=10, Y=5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().First() as FamilySymbol;\nif (!columnSymbol.IsActive) columnSymbol.Activate();\ndoc.Create.NewFamilyInstance(new XYZ(10, 5, 0), columnSymbol, level, StructuralType.Column);"}
{"prompt":"Genera un piso rectangular de 10×8 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstElement() as FloorType;\nCurveLoop loop = new CurveLoop();\nloop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0)));\nloop.Append(Line.CreateBound(new XYZ(10,0,0), new XYZ(10,8,0)));\nloop.Append(Line.CreateBound(new XYZ(10,8,0), new XYZ(0,8,0)));\nloop.Append(Line.CreateBound(new XYZ(0,8,0), new XYZ(0,0,0)));\nFloor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);"}
{"prompt":"Crea un muro cortina de 6 metros de ancho y 4 metros de alto.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif (cwType != null) {\n    Line baseLine = Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Crea 8 ejes en sentido horizontal separados 10 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<8; i++){\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea 4 ejes en sentido vertical separados 10 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<4; i++){\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea columnas en cada intersección de ejes.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nvar grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\nif (colSymbol != null && level != null && grids.Count > 1)\n{\n    if (!colSymbol.IsActive) colSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            var result = grids[i].Curve.Intersect(grids[j].Curve, out IntersectionResultArray results);\n            if (result == SetComparisonResult.Overlap && results != null)\n            {\n                foreach (IntersectionResult ir in results)\n                {\n                    doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Crea vigas entre columnas horizontales.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nvar columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nif (beamSymbol != null && level != null)\n{\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Acota la longitud del muro anterior.","completion":"View view = doc.ActiveView;\nWall wall = new FilteredElementCollector(doc, view.Id).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif (wall != null)\n{\n    ReferenceArray refs = new ReferenceArray();\n    refs.Append(wall.GetGeometryObjectFromReference(new Reference(wall)).GetEndPointReference(0));\n    refs.Append(wall.GetGeometryObjectFromReference(new Reference(wall)).GetEndPointReference(1));\n    Line wallLine = (wall.Location as LocationCurve).Curve as Line;\n    XYZ dimLinePoint = wallLine.GetEndPoint(0).Add(wallLine.Direction.Normalize().CrossProduct(XYZ.BasisZ));\n    Line dimLine = Line.CreateBound(dimLinePoint, dimLinePoint.Add(wallLine.Direction));\n    doc.Create.NewDimension(view, dimLine, refs);\n}"}
{"prompt":"Crea una puerta de 0.9m de ancho y 2.1m de alto en el muro existente.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol doorSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name.Contains(\"0.9\") && s.Name.Contains(\"2.1\"));\nif(hostWall != null && doorSymbol != null)\n{\n    if(!doorSymbol.IsActive) doorSymbol.Activate();\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    XYZ insertionPoint = (hostWall.Location as LocationCurve).Curve.Evaluate(0.5, true);\n    doc.Create.NewFamilyInstance(insertionPoint, doorSymbol, hostWall, level, StructuralType.NonStructural);\n}"}
{"prompt":"Crea un sistema de vigas estructurales en forma de retícula de 5x5 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && beamSymbol != null)\n{\n    if (!beamSymbol.IsActive) beamSymbol.Activate();\n    double gridSize = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    for (int i = 0; i <= 5; i++)\n    {\n        Line horizontalLine = Line.CreateBound(new XYZ(0, i * gridSize, 0), new XYZ(5 * gridSize, i * gridSize, 0));\n        Line verticalLine = Line.CreateBound(new XYZ(i * gridSize, 0, 0), new XYZ(i * gridSize, 5 * gridSize, 0));\n        doc.Create.NewFamilyInstance(horizontalLine, beamSymbol, level, StructuralType.Beam);\n        doc.Create.NewFamilyInstance(verticalLine, beamSymbol, level, StructuralType.Beam);\n    }\n}"}
{"prompt":"Inserta una armadura (truss) de 6 metros entre columnas.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Trusses).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && trussSymbol != null)\n{\n    Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 10, 0));\n    doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Crea un sistema de tuberías con un diámetro de 150mm.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0); XYZ p2=new XYZ(5,0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n    pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(150, UnitTypeId.Millimeters));\n}"}
{"prompt":"Añade un tag de texto a la columna más cercana al origen.","completion":"View activeView = doc.ActiveView;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => (c.Location as LocationPoint).Point.DistanceTo(XYZ.Zero)).FirstOrDefault();\nif (column != null)\n{\n    LocationPoint loc = column.Location as LocationPoint;\n    IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n}"}
{"prompt":"Crea una escalera con 12 peldaños y altura total de 3 metros.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nif (bottomLevel != null && topLevel != null)\n{\n    using (StairsEditScope ses = new StairsEditScope(doc, \"Create Stairs\"))\n    {\n        ElementId stairsId = ses.Start(bottomLevel.Id, topLevel.Id);\n        Stairs stairs = doc.GetElement(stairsId) as Stairs;\n        stairs.DesiredRisersNumber = 12;\n        ses.Commit();\n    }\n}"}
{"prompt":"Crea un barandal paralelo a la escalera anterior.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Stairs).FirstOrDefault() as Stairs;\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Coloca una pieza de mobiliario genérico en X=2,Y=3.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && furnitureSymbol != null)\n{\n    if (!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,3,0), furnitureSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Crea una viga de cimentación (foundation) de 8 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, StructuralType.Footing);\n}"}
{"prompt":"Añade estribos (rebars) a la columna anterior.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault(s => s.Name.Contains(\"Stirrup\")) as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif(barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, XYZ.BasisZ, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Crea un conducto (conduit) de 1 pulgada desde A hasta B.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nConduitType conduitType = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstOrDefault() as ConduitType;\nif (level != null && conduitType != null)\n{\n    XYZ start = new XYZ(0,0,3); XYZ end = new XYZ(5,0,3);\n    Conduit conduit = Conduit.Create(doc, conduitType.Id, start, end, level.Id);\n    conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Inches));\n}"}
{"prompt":"Instala un accesorio de conducto en el conducto anterior.","completion":"FamilySymbol fittingSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ConduitFitting).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nConduit conduit = new FilteredElementCollector(doc).OfClass(typeof(Conduit)).FirstOrDefault() as Conduit;\nif (fittingSymbol != null && conduit != null)\n{\n    if(!fittingSymbol.IsActive) fittingSymbol.Activate();\n    Connector unusedConnector = conduit.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (unusedConnector != null) doc.Create.NewFamilyInstance(unusedConnector, fittingSymbol);\n}"}
{"prompt":"Genera un equipo eléctrico (panel) en X=1,Y=1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && panelSymbol != null)\n{\n    if(!panelSymbol.IsActive) panelSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(1,1,0), panelSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Dibuja ducto de ventilación de 0.3x0.2 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nDuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).FirstOrDefault() as DuctType;\nMEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.SupplyAir) as MEPSystemType;\nif (level != null && ductType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,3); XYZ p2 = new XYZ(5,0,3);\n    Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM).Set(UnitUtils.ConvertToInternalUnits(0.3, UnitTypeId.Meters));\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM).Set(UnitUtils.ConvertToInternalUnits(0.2, UnitTypeId.Meters));\n}"}
{"prompt":"Coloca un terminal de aire (air terminal) en el ducto.","completion":"FamilySymbol terminalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctTerminal).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nDuct duct = new FilteredElementCollector(doc).OfClass(typeof(Duct)).FirstOrDefault() as Duct;\nif (terminalSymbol != null && duct != null)\n{\n    if(!terminalSymbol.IsActive) terminalSymbol.Activate();\n    Connector unusedConnector = duct.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (unusedConnector != null) doc.Create.NewFamilyInstance(unusedConnector, terminalSymbol);\n}"}
{"prompt":"Importa topografía desde un archivo CSV.","completion":"TopographySurface.Create(doc, \"C:/temp/terrain.csv\", new CSVImportOptions());"}
{"prompt":"Exporta el modelo a Navisworks NWC.","completion":"NavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(\"C:/exports/\", \"model.nwc\", options);"}
{"prompt":"Exporta las vistas a DWG.","completion":"ICollection<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).ToElementIds();\nif (viewsToExport.Any())\n{\n    doc.Export(\"C:/exports/dwg/\", \"views.dwg\", viewsToExport, new DWGExportOptions());\n}"}
{"prompt":"Cambia el nombre de la familia de puertas a \"Puerta_TAD\".","completion":"var doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Where(f => f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors);\nforeach (Family fam in doorFamilies)\n{\n    fam.Name = \"Puerta_TAD\";\n}"}
{"prompt":"Rellena el parámetro \"Material\" de todos los muros con \"Concreto\".","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concreto\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Crea un nuevo tipo de muro llamado 'Muro_Genérico_25cm', definiendo su grosor en 0.25m y su función como estructural.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (wallTypeToDuplicate != null)\n{\n    WallType newWallType = wallTypeToDuplicate.Duplicate(\"Muro_Genérico_25cm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0)\n    {\n        int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n        cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n        cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(0.25, UnitTypeId.Meters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Carga la familia 'Furniture_Desk.rfa' desde 'C:\\RevitFamilies\\' y luego inserta una instancia en el Nivel 1 en las coordenadas (5, 5, 0).","completion":"string familyPath = \"C:\\\\RevitFamilies\\\\Furniture_Desk.rfa\";\nFamily deskFamily;\nif(doc.LoadFamily(familyPath, out deskFamily))\n{\n    ISet<ElementId> symbolIds = deskFamily.GetFamilySymbolIds();\n    if(symbolIds.Any())\n    {\n        FamilySymbol deskSymbol = doc.GetElement(symbolIds.First()) as FamilySymbol;\n        Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n        if (deskSymbol != null && level1 != null)\n        {\n            if (!deskSymbol.IsActive) { deskSymbol.Activate(); }\n            doc.Create.NewFamilyInstance(new XYZ(5, 5, 0), deskSymbol, level1, StructuralType.NonStructural);\n        }\n    }\n}"}
{"prompt":"Crea un suelo para un data center con un acabado de piso técnico elevado a 60cm sobre el nivel.","completion":"FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name.Contains(\"Data Center\")) as Level;\nif(floorType != null && level != null)\n{\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { Line.CreateBound(new XYZ(0,0,0), new XYZ(20,0,0)), Line.CreateBound(new XYZ(20,0,0), new XYZ(20,15,0)), Line.CreateBound(new XYZ(20,15,0), new XYZ(0,15,0)), Line.CreateBound(new XYZ(0,15,0), new XYZ(0,0,0)) });\n    Floor raisedFloor = Floor.Create(doc, new List<CurveLoop>{profile}, floorType.Id, level.Id);\n    Parameter offsetParam = raisedFloor.get_Parameter(BuiltInParameter.FLOOR_HEIGHTABOVELEVEL_PARAM);\n    if(offsetParam != null) offsetParam.Set(UnitUtils.ConvertToInternalUnits(0.6, UnitTypeId.Meters));\n}"}
{"prompt":"Modela un plafón (techo) a una altura de 2.8 metros sobre el nivel del plano.","completion":"CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(ceilingType != null && level != null)\n{\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0)), Line.CreateBound(new XYZ(10,0,0), new XYZ(10,10,0)), Line.CreateBound(new XYZ(10,10,0), new XYZ(0,10,0)), Line.CreateBound(new XYZ(0,10,0), new XYZ(0,0,0)) });\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\n    Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n    if(heightParam != null) heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n}"}
{"prompt":"Crea una nueva habitación en el Nivel 1 en la coordenada UV(10, 10).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    Room newRoom = doc.Create.NewRoom(level1, new UV(10, 10));\n}"}
{"prompt":"Crea un techo usando un contorno rectangular en 'Roof Level'.","completion":"Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Roof Level\") as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nif(roofLevel != null && roofType != null)\n{\n    CurveLoop roofProfile = CurveLoop.Create(new List<Curve> { Line.CreateBound(new XYZ(0,0,0), new XYZ(20,0,0)), Line.CreateBound(new XYZ(20,0,0), new XYZ(20,30,0)), Line.CreateBound(new XYZ(20,30,0), new XYZ(0,30,0)), Line.CreateBound(new XYZ(0,30,0), new XYZ(0,0,0)) });\n    ModelCurveArray footPrintToModelCurveMapping = new ModelCurveArray();\n    FootPrintRoof roof = doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out footPrintToModelCurveMapping);\n}"}
{"prompt":"Coloca rociadores en un plafón en una retícula de 4x5 con espaciado de 3 metros.","completion":"FamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nCeiling ceilingHost = new FilteredElementCollector(doc).OfClass(typeof(Ceiling)).FirstOrDefault() as Ceiling;\nif (sprinklerSymbol != null && ceilingHost != null)\n{\n    if (!sprinklerSymbol.IsActive) { sprinklerSymbol.Activate(); }\n    double spacing = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    for(int i = 0; i < 4; i++)\n    {\n        for(int j = 0; j < 5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i * spacing, j * spacing, 0), sprinklerSymbol, ceilingHost);\n        }\n    }\n}"}
{"prompt":"Coloca una toma de datos (data outlet) a 45cm del suelo en el primer muro que encuentres.","completion":"FamilySymbol dataOutletSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DataDevices).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall wallHost = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif (dataOutletSymbol != null && wallHost != null)\n{\n    if(!dataOutletSymbol.IsActive) {dataOutletSymbol.Activate();}\n    Level level = doc.GetElement(wallHost.LevelId) as Level;\n    double height = UnitUtils.ConvertToInternalUnits(450, UnitTypeId.Millimeters);\n    XYZ insertionPoint = (wallHost.Location as LocationCurve).Curve.Evaluate(0.5, true).Add(new XYZ(0,0,height));\n    doc.Create.NewFamilyInstance(insertionPoint, dataOutletSymbol, wallHost, level, StructuralType.NonStructural);\n}"}
{"prompt":"Crea una nueva familia 'in-situ' para una pieza de equipo eléctrico.","completion":"ElementId categoryId = new ElementId(BuiltInCategory.OST_ElectricalEquipment);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(level != null) InPlaceElement.Create(doc, categoryId, level.Id);"}
{"prompt":"Encuentra todos los extremos de tubería desconectados en el proyecto.","completion":"var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>();\nList<Connector> unconnected = new List<Connector>();\nforeach(Pipe p in pipes)\n{\n    foreach(Connector c in p.ConnectorManager.Connectors)\n    {\n        if(!c.IsConnected) unconnected.Add(c);\n    }\n}"}
{"prompt":"Aplica aislamiento de 50mm de espesor a todas las tuberías de agua helada.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType chilledWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Chilled Water\"));\nif(insulationType != null && chilledWaterSystem != null)\n{\n    var pipesToInsulate = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == chilledWaterSystem.Id);\n    double thickness = UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Millimeters);\n    foreach(Pipe pipe in pipesToInsulate)\n    {\n        PipeInsulation.Create(doc, pipe.Id, insulationType.Id, thickness);\n    }\n}"}
{"prompt":"Etiqueta todas las puertas en la vista activa con su valor de 'Type Mark'.","completion":"View activeView = doc.ActiveView;\nvar doors = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType();\nforeach(Element door in doors)\n{\n    LocationPoint loc = door.Location as LocationPoint;\n    if (loc != null) IndependentTag.Create(doc, activeView.Id, new Reference(door), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n}"}
{"prompt":"Crea una leyenda de tipos de muro, mostrando el nombre y una imagen de cada tipo.","completion":"ViewFamilyType legendVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Legend);\nif (legendVFT != null)\n{\n    ViewLegend legendView = ViewLegend.Create(doc, legendVFT.Id);\n    legendView.Name = \"Leyenda de Muros\";\n    var wallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElements();\n    double y_coord = 0.0;\n    foreach(WallType wt in wallTypes)\n    {\n        LegendComponent.Create(doc, legendView.Id, wt.Id, new XYZ(2, y_coord, 0));\n        TextNote.Create(doc, legendView.Id, new XYZ(0, y_coord, 0), wt.Name, TextNoteType.CreateDefault(doc).Id);\n        y_coord -= 5.0;\n    }\n}"}
{"prompt":"Crea una dimensión lineal alineada con un muro seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nWall wall = doc.GetElement(wallRef) as Wall;\nif (wall != null)\n{\n    LocationCurve locCurve = wall.Location as LocationCurve;\n    Line wallLine = locCurve.Curve as Line;\n    ReferenceArray refArray = new ReferenceArray();\n    refArray.Append(wallLine.GetEndPointReference(0));\n    refArray.Append(wallLine.GetEndPointReference(1));\n    XYZ p1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ); XYZ p2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ);\n    Line dimLine = Line.CreateBound(p1, p2);\n    doc.Create.NewDimension(doc.ActiveView, dimLine, refArray);\n}"}
{"prompt":"Crea una cota de coordenada en la esquina de una zapata de cimentación.","completion":"FamilyInstance footing = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif(footing != null)\n{\n    Options opt = new Options() { ComputeReferences = true };\n    GeometryElement geo = footing.get_Geometry(opt);\n    Solid solid = geo.OfType<Solid>().FirstOrDefault(s => s.Volume > 0);\n    if(solid != null)\n    {\n        Edge edge = solid.Edges.get_Item(0);\n        Reference cornerRef = edge.GetEndPointReference(0);\n        XYZ pointOnFace = cornerRef.GlobalPoint;\n        doc.Create.NewSpotCoordinate(doc.ActiveView, cornerRef, pointOnFace + new XYZ(1,1,0), new XYZ(1,1,0), new XYZ(1,1,0), true);\n    }\n}"}
{"prompt":"Crea una dimensión radial para un muro curvo.","completion":"Wall curvedWall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.Location is LocationCurve && (w.Location as LocationCurve).Curve is Arc);\nif (curvedWall != null)\n{\n    Arc arc = (curvedWall.Location as LocationCurve).Curve as Arc;\n    XYZ leaderEndPoint = arc.Center.Add(new XYZ(arc.Radius + 2, 0, 0));\n    doc.Create.NewRadialDimension(doc.ActiveView, new Reference(curvedWall), leaderEndPoint, arc.Radius);\n}"}
{"prompt":"Crea una nueva fase de proyecto llamada 'Fase 2 - Remodelación'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Fase 2 - Remodelación\";"}
{"prompt":"Asigna un grupo de muros seleccionados para ser demolidos en la fase 'Fase Existente'.","completion":"UIDocument uidoc = new UIDocument(doc);\nPhase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).FirstOrDefault(p => p.Name == \"Fase Existente\") as Phase;\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (demolishedPhase != null && selectedIds.Any())\n{\n    var selectedWalls = selectedIds.Select(id => doc.GetElement(id) as Wall).Where(w => w != null);\n    foreach(Wall wall in selectedWalls)\n    {\n        wall.DemolishedPhaseId = demolishedPhase.Id;\n    }\n}"}
{"prompt":"Asigna los elementos seleccionados a un workset llamado 'Facade', creándolo si no existe.","completion":"UIDocument uidoc = new UIDocument(doc);\nWorkset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Facade\") as Workset;\nif (workset == null) { workset = Workset.Create(doc, \"Facade\"); }\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif(workset != null && selectedIds.Any())\n{\n    WorksharingUtils.ChangeWorkset(doc, selectedIds, workset.Id);\n}"}
{"prompt":"Crea una nueva revisión y aplícala a la hoja activa.","completion":"Revision rev = Revision.Create(doc);\nrev.Description = \"Issued for Construction\";\nrev.RevisionDate = DateTime.Now.ToString(\"yyyy-MM-dd\");\nrev.IssuedBy = \"BIM Department\";\nViewSheet sheet = doc.ActiveView as ViewSheet;\nif (sheet != null)\n{\n    ICollection<ElementId> revisions = sheet.GetAllRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}
{"prompt":"Crea un parámetro de proyecto de tipo texto, llamado 'Clasificación de Espacio' y aplícalo a la categoría de habitaciones.","completion":"string sharedParamsFile = doc.Application.SharedParametersFilename;\nif(string.IsNullOrEmpty(sharedParamsFile)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\shared_params.txt\"; }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = defFile.Groups.Create(\"CustomParameters\");\nExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(\"Clasificación de Espacio\", SpecTypeId.String.Text);\nDefinition def = group.Definitions.Create(options);\nCategory roomCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Rooms);\nCategorySet catSet = doc.Application.Create.NewCategorySet();\ncatSet.Insert(roomCat);\nInstanceBinding binding = doc.Application.Create.NewInstanceBinding(catSet);\ndoc.ParameterBindings.Insert(def, binding, BuiltInParameterGroup.PG_IDENTITY_DATA);"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 1 a 'Clasificación Fuego - 90 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    var doors = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id);\n    foreach(FamilyInstance door in doors)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if(commentsParam != null) commentsParam.Set(\"Clasificación Fuego - 90 min\");\n    }\n}"}
{"prompt":"Exporta cada tabla de planificación a un archivo CSV individual en un directorio especificado.","completion":"string exportPath = @\"C:\\RevitExports\\\";\nif(!Directory.Exists(exportPath)) Directory.CreateDirectory(exportPath);\nvar schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => !vs.IsTemplate);\nViewScheduleExportOptions options = new ViewScheduleExportOptions();\noptions.FieldDelimiter = \",\";\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Export(exportPath, schedule.Name + \".csv\", options);\n}"}
{"prompt":"Exporta el modelo a formato IFC 4 para coordinación.","completion":"IFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4;\ndoc.Export(@\"C:\\RevitExports\\\", \"Model-For-Coordination.ifc\", options);"}
{"prompt":"Importa un archivo DWG como un vínculo en la vista activa para usarlo como referencia.","completion":"string filePath = @\"C:\\CAD_Files\\Base_Plan.dwg\";\nif(File.Exists(filePath))\n{\n    DWGImportOptions options = new DWGImportOptions();\n    options.ColorMode = ImportColorMode.Preserved;\n    ElementId linkedFileId;\n    doc.Link(filePath, options, doc.ActiveView, out linkedFileId);\n}"}
{"prompt":"Exporta todas las hojas de un conjunto llamado 'Conjunto Arquitectónico' a un único PDF combinado.","completion":"ViewSheetSet sheetSet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheetSet)).FirstOrDefault(ss => ss.Name == \"Conjunto Arquitectónico\") as ViewSheetSet;\nif(sheetSet != null)\n{\n    PDFExportOptions options = new PDFExportOptions();\n    options.Combine = true;\n    options.FileName = \"ConjuntoArquitectonico\";\n    List<ElementId> sheetIds = sheetSet.Views.Cast<ViewSheet>().Select(s => s.Id).ToList();\n    if(sheetIds.Any()) doc.Export(@\"C:\\RevitExports\\\", sheetIds, options);\n}"}
{"prompt":"Crea ocho ejes horizontales separados por 10 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 4' a una elevación de 12 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nnewLevel.Name = \"Nivel 4\";"}
{"prompt":"Fija un elemento seleccionado para evitar su modificación accidental.","completion":"UIDocument uidoc = new UIDocument(doc);\nElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\nif (selectedId != null && selectedId != ElementId.InvalidElementId)\n{\n    Element elementToPin = doc.GetElement(selectedId);\n    if (elementToPin != null && !elementToPin.Pinned)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}
{"prompt":"Elimina todas las líneas de detalle de la vista activa.","completion":"ICollection<ElementId> detailLines = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(DetailLine)).ToElementIds();\nif(detailLines.Any())\n{\n    doc.Delete(detailLines);\n}"}
{"prompt":"Crea una 'Caja de Referencia' que abarque el 'Bloque A' del edificio.","completion":"BoundingBoxXYZ scopeBoxVolume = new BoundingBoxXYZ();\nscopeBoxVolume.Min = new XYZ(0,0,0);\nscopeBoxVolume.Max = new XYZ(50, 40, 20);\nView3D viewForBox = new FilteredElementCollector(doc).OfClass(typeof(View3D)).FirstOrDefault() as View3D;\nif (viewForBox != null) {\n    ScopeBox box = ScopeBox.Create(doc, scopeBoxVolume);\n    box.Name = \"Bloque A\";\n    box.Views.Insert(viewForBox);\n}"}
{"prompt":"Une la geometría de una columna estructural y un suelo que se intersectan.","completion":"Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\nif(column != null && floor != null && !JoinGeometryUtils.AreElementsJoined(doc, column, floor))\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}
{"prompt":"Ajusta la rotación del norte de proyecto a 30 grados en sentido horario.","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsSurveyPoint);\nif (projectBasePoint != null)\n{\n    double angle = -30 * Math.PI / 180.0; // Negativo para sentido horario\n    ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, Line.CreateBound(projectBasePoint.Position, projectBasePoint.Position + XYZ.BasisZ), angle);\n}"}
{"prompt":"Crea un barrido de muro 'in-situ' a lo largo de un muro.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallSweepType sweepType = new FilteredElementCollector(doc).OfClass(typeof(WallSweepType)).FirstOrDefault() as WallSweepType;\nif (wall != null && sweepType != null)\n{\n    WallSweepInfo info = new WallSweepInfo(true, WallSweepType.Sweep);\n    WallSweep.Create(doc, wall.Id, sweepType.Id, info);\n}"}
{"prompt":"Asigna un acabado de 'Pintura Blanca' a la cara interior de los muros perimetrales.","completion":"Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Pintura Blanca\") as Material;\nvar exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior);\nif (paintMaterial != null)\n{\n    foreach (Wall w in exteriorWalls)\n    {\n        Face interiorFace = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior).FirstOrDefault();\n        if (interiorFace != null)\n        {\n            doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n        }\n    }\n}"}
{"prompt":"Crea un muro básico de 5 metros de largo y 3 metros de alto en el Nivel 1.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (level1 != null && wallType != null)\n{\n    double length = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    double height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Line line = Line.CreateBound(new XYZ(0,0,0), new XYZ(length,0,0));\n    Wall.Create(doc, line, wallType.Id, level1.Id, height, 0, false, false);\n}"}
{"prompt":"Inserta una ventana de tipo '1m x 1.2m' en un muro existente.","completion":"FamilySymbol windowSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault(fs => fs.Name.Contains(\"1m x 1.2m\")) as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif (windowSymbol != null && hostWall != null)\n{\n    if (!windowSymbol.IsActive) windowSymbol.Activate();\n    Level lvl = doc.GetElement(hostWall.LevelId) as Level;\n    XYZ pt = (hostWall.Location as LocationCurve).Curve.Evaluate(0.5, true);\n    doc.Create.NewFamilyInstance(pt, windowSymbol, hostWall, lvl, StructuralType.NonStructural);\n}"}
{"prompt":"Crea una columna estructural en las coordenadas (10, 5, 0) sobre el Nivel 1.","completion":"FamilySymbol colSym = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (colSym != null && lvl1 != null)\n{\n    if (!colSym.IsActive) colSym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10,5,0), colSym, lvl1, StructuralType.Column);\n}"}
{"prompt":"Genera un suelo rectangular de 10x8 metros.","completion":"FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault();\nLevel lvl = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif (floorType != null && lvl != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double depth = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,depth,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,depth,0), new XYZ(0,depth,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,depth,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop>{loop}, floorType.Id, lvl.Id);\n}"}
{"prompt":"Crea cuatro ejes verticales espaciados cada 10 metros.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 4; i++)\n{\n    Line ln = Line.CreateBound(new XYZ(i * spacing,0,0), new XYZ(i * spacing,40,0));\n    Grid.Create(doc, ln);\n}"}
{"prompt":"Coloca columnas estructurales en cada intersección de la rejilla.","completion":"FamilySymbol colS = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel lvl = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nvar grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\nif (colS != null && lvl != null && grids.Count > 1)\n{\n    if (!colS.IsActive) colS.Activate();\n    for(int i=0;i<grids.Count;i++)\n    {\n        for(int j=i+1;j<grids.Count;j++)\n        {\n            SetComparisonResult res = grids[i].Curve.Intersect(grids[j].Curve, out IntersectionResultArray ints);\n            if(res == SetComparisonResult.Overlap && ints!=null)\n            {\n                foreach(IntersectionResult ir in ints) doc.Create.NewFamilyInstance(ir.XYZPoint, colS, lvl, StructuralType.Column);\n            }\n        }\n    }\n}"}
{"prompt":"Crea una puerta con la marca de tipo 'D-01' en un muro.","completion":"FamilySymbol doorSym = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.get_Parameter(BuiltInParameter.ALL_MODEL_TYPE_MARK).AsString() == \"D-01\");\nWall w = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif (doorSym!=null && w!=null)\n{\n    if (!doorSym.IsActive) doorSym.Activate();\n    Level lvl = doc.GetElement(w.LevelId) as Level;\n    XYZ pt = (w.Location as LocationCurve).Curve.Evaluate(0.5, true);\n    doc.Create.NewFamilyInstance(pt, doorSym, w, lvl, StructuralType.NonStructural);\n}"}
{"prompt":"Crea un sistema de tuberías con un diámetro de 150mm.","completion":"PipeType pt = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType sys = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\nLevel lvl0 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(pt!=null && sys!=null && lvl0!=null)\n{\n    XYZ a=new XYZ(0,0,-1), b=new XYZ(5,0,-1);\n    Pipe pipe = Pipe.Create(doc, sys.Id, pt.Id, lvl0.Id, a, b);\n    pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(150, UnitTypeId.Millimeters));\n}"}
{"prompt":"Crea una escalera con 12 peldaños entre el Nivel 1 y el Nivel 2.","completion":"Level l1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l=>l.Name==\"Nivel 1\") as Level;\nLevel l2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l=>l.Name==\"Nivel 2\") as Level;\nif(l1!=null && l2!=null)\n{\n    using(StairsEditScope ses=new StairsEditScope(doc,\"Crear Escalera\"))\n    {\n        ElementId sid = ses.Start(l1.Id, l2.Id);\n        Stairs.CreateSketchedLanding(doc, sid, new CurveLoop(), 0);\n        StairsRun.CreateSketchedRun(doc, sid, l1.Elevation, 12, \"Center\");\n        ses.Commit(new StairsEditScopeFailuresPreprocessor());\n    }\n}"}
{"prompt":"Genera un barandal en el borde de una escalera existente.","completion":"RailingType rt = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs st0 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Stairs).FirstOrDefault() as Stairs;\nif(rt!=null && st0!=null)\n{\n    Railing.Create(doc, st0.Id, rt.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Crea un conducto eléctrico (conduit) de 1 pulgada.","completion":"ConduitType cdt = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstOrDefault() as ConduitType;\nLevel lvlx = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(cdt!=null && lvlx!=null)\n{\n    XYZ p1=new XYZ(0,0,3), p2=new XYZ(5,0,3);\n    Conduit cond = Conduit.Create(doc, cdt.Id, p1, p2, lvlx.Id);\n    cond.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Inches));\n}"}
{"prompt":"Dibuja un conducto de ventilación de 300x200 mm.","completion":"DuctType dt = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).FirstOrDefault(d=>d.Shape==ConnectorProfileType.Rectangular) as DuctType;\nMEPSystemType mst = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s=>s.SystemClassification==MEPSystemClassification.SupplyAir);\nLevel ly = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(dt!=null && mst!=null && ly!=null)\n{\n    XYZ s=new XYZ(0,0,3), e=new XYZ(5,0,3);\n    Duct duct = Duct.Create(doc, mst.Id, dt.Id, ly.Id, s, e);\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM).Set(UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM).Set(UnitUtils.ConvertToInternalUnits(200, UnitTypeId.Millimeters));\n}"}
{"prompt":"Rellena el parámetro 'Material' de todos los muros con el material 'Concreto'.","completion":"Material mat = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m=>m.Name.Contains(\"Concreto\")) as Material;\nif(mat!=null)\n{\n    var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall w in walls)\n    {\n        Parameter pm = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(pm!=null && !pm.IsReadOnly) pm.Set(mat.Id);\n    }\n}"}
{"prompt":"Obtén el elemento anfitrión de una instancia de ventana.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n    if(hostElement != null) TaskDialog.Show(\"Anfitrión\", \"El anfitrión es: \" + hostElement.Name);\n}"}
{"prompt":"Crea una forma de masa 'in-situ' mediante una extrusión por revolución.","completion":"using (var massTransaction = new Transaction(doc, \"Create Mass Revolution\"))\n{\n    massTransaction.Start();\n    InPlaceElement mass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    SketchPlane sp = SketchPlane.Create(doc, plane);\n    Line axis = Line.CreateBound(new XYZ(0,0,0), new XYZ(0,0,5));\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(1,0,0), new XYZ(2,0,0)));\n    profile.Append(Arc.Create(new XYZ(2,0,0), new XYZ(2,0,1), new XYZ(1.5,0,0.5)));\n    profile.Append(Line.CreateBound(new XYZ(2,0,1), new XYZ(1,0,1)));\n    profile.Append(Line.CreateBound(new XYZ(1,0,1), new XYZ(1,0,0)));\n    doc.FamilyCreate.NewRevolution(true, new List<CurveLoop>{ profile }, sp, axis, 0, 2*Math.PI);\n    massTransaction.Commit();\n}"}
{"prompt":"Obtén el espacio MEP asociado a una habitación específica por su nombre.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 101\") as Room;\nif (room != null)\n{\n    MEPSpace space = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_MEPSpaces).Cast<MEPSpace>().FirstOrDefault(s => s.Room.Id == room.Id);\n    if (space != null) TaskDialog.Show(\"Espacio MEP\", \"El espacio es: \" + space.Name);\n}"}
{"prompt":"Crea un suelo siguiendo el contorno de un conjunto de muros perimetrales seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selIds = uidoc.Selection.GetElementIds();\nvar walls = selIds.Select(id => doc.GetElement(id)).OfType<Wall>().ToList();\nif (walls.Count > 1)\n{\n    CurveLoop loop = new CurveLoop();\n    foreach (Wall w in walls)\n    {\n        LocationCurve lc = w.Location as LocationCurve;\n        if (lc != null) loop.Append(lc.Curve);\n    }\n    FloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n    Level lvl = doc.GetElement(walls[0].LevelId) as Level;\n    Floor.Create(doc, new List<CurveLoop>{loop}, ft.Id, lvl.Id);\n}"}
{"prompt":"Calcula la longitud total de todos los conductos rectangulares en un sistema HVAC específico.","completion":"MEPSystem sys = new FilteredElementCollector(doc).OfClass(typeof(MEPSystem)).FirstOrDefault(s => s.Name == \"Supply Air 1\") as MEPSystem;\nif (sys != null)\n{\n    double totalLength = 0.0;\n    var ducts = sys.DuctNetwork.OfType<Duct>();\n    foreach (Duct d in ducts)\n    {\n        if (d.DuctType.Shape == ConnectorProfileType.Rectangular)\n        {\n            totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n        }\n    }\n    TaskDialog.Show(\"Longitud Total\", \"La longitud total es: \" + UnitUtils.ConvertFromInternalUnits(totalLength, UnitTypeId.Meters) + \" m\");\n}"}
{"prompt":"Añade una nueva línea de rejilla horizontal a un muro cortina existente.","completion":"Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.CurtainGrid != null) as Wall;\nif (cw != null)\n{\n    CurtainGrid cg = cw.CurtainGrid;\n    cg.AddGridLine(false, new XYZ(0,0, UnitUtils.ConvertToInternalUnits(1.5, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Alterna la visibilidad de un modelo de Revit vinculado específico en la vista activa.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault(li => li.Name.Contains(\"Structure_LINK\")) as RevitLinkInstance;\nif (linkInstance != null)\n{\n    ElementId categoryId = linkInstance.Category.Id;\n    bool isHidden = doc.ActiveView.GetCategoryHidden(categoryId);\n    doc.ActiveView.SetCategoryHidden(categoryId, !isHidden);\n}"}
{"prompt":"Crea un nuevo material llamado 'Roble Oscuro' con una apariencia de renderizado y un patrón de superficie.","completion":"ElementId materialId = Material.Create(doc, \"Roble Oscuro\");\nMaterial material = doc.GetElement(materialId) as Material;\nFillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Wood\")) as FillPatternElement;\nif(fillPattern != null) material.SurfaceForegroundPatternId = fillPattern.Id;\nmaterial.Color = new Color(139, 69, 19);\nAppearanceAssetElement appearanceAsset = AppearanceAssetElement.Create(doc, \"RobleOscuro_Asset\", false);\nmaterial.AppearanceAssetId = appearanceAsset.Id;"}
{"prompt":"Etiqueta todas las columnas estructurales en la vista actual con sus respectivos nombres de tipo.","completion":"View activeView = doc.ActiveView;\nvar columns = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().ToElements();\nforeach (Element col in columns)\n{\n    LocationPoint loc = col.Location as LocationPoint;\n    if(loc != null) IndependentTag.Create(doc, activeView.Id, new Reference(col), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n}"}
{"prompt":"Encuentra un muro específico buscando el valor 'W-01' en su parámetro de Marca de Tipo.","completion":"ElementId typeMarkParamId = new ElementId(BuiltInParameter.ALL_MODEL_TYPE_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(typeMarkParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"W-01\");\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).FirstOrDefault() as Wall;"}
{"prompt":"Alinea las líneas centrales de dos muros existentes.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer muro\");\nReference r2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo muro\");\nWall w1 = doc.GetElement(r1) as Wall;\nWall w2 = doc.GetElement(r2) as Wall;\nif (w1 != null && w2 != null)\n{\n    LocationCurve lc1 = w1.Location as LocationCurve;\n    LocationCurve lc2 = w2.Location as LocationCurve;\n    doc.Create.NewAlignment(doc.ActiveView, lc1.Curve.Reference, lc2.Curve.Reference);\n}"}
{"prompt":"Define un nuevo parámetro compartido de tipo 'Área' desde un archivo y aplícalo a la categoría de mobiliario.","completion":"string sharedParamFile = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamFile) || !File.Exists(sharedParamFile)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\shared_params.txt\"; File.Create(sharedParamFile).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = defFile.Groups.Create(\"Analytics\");\nExternalDefinitionCreationOptions opt = new ExternalDefinitionCreationOptions(\"Net Area\", SpecTypeId.Area);\nDefinition def = group.Definitions.Create(opt);\nCategory cat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nCategorySet cs = doc.Application.Create.NewCategorySet(); cs.Insert(cat);\nInstanceBinding bind = doc.Application.Create.NewInstanceBinding(cs);\ndoc.ParameterBindings.Insert(def, bind, BuiltInParameterGroup.PG_ANALYSIS_RESULTS);"}
{"prompt":"Establece la configuración de sol y sombra para la vista 3D activa a una hora y fecha específicas.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && view3D.CanEnableSunAndShadows())\n{\n    SunAndShadowSettings settings = view3D.SunAndShadowSettings;\n    settings.SunAndShadowType = SunAndShadowType.Still;\n    settings.SetTimeAndDate(new DateTime(2024, 6, 21, 15, 30, 0));\n    view3D.ShadowsOn = true;\n}"}
{"prompt":"Crea una superficie topográfica a partir de una lista de puntos XYZ.","completion":"IList<XYZ> points = new List<XYZ>{ new XYZ(0,0,0), new XYZ(10,0,1), new XYZ(0,10,2), new XYZ(10,10,1) };\nif (points.Count > 2) TopographySurface.Create(doc, points);"}
{"prompt":"Añade una nueva nota clave a la tabla de notas clave con un valor y texto específicos.","completion":"KeynoteTable table = doc.KeynoteTable;\nKeynoteEntry newEntry = table.GetKeynoteEntries().FirstOrDefault()?.Clone() as KeynoteEntry;\nif (newEntry != null)\n{\n    newEntry.KeyValue = \"08.10.01.A\";\n    newEntry.KeynoteText = \"Specialty Hollow Metal Door\";\n    table.AddKeynoteEntry(newEntry);\n}"}
{"prompt":"Dentro del editor de familias, cambia el valor por defecto de un parámetro de longitud llamado 'Ancho'.","completion":"if(doc.IsFamilyDocument)\n{\n    FamilyManager fm = doc.FamilyManager;\n    FamilyParameter param = fm.get_Parameter(\"Ancho\");\n    if (param != null) fm.Set(param, UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters));\n}"}
{"prompt":"Coloca una calcomanía (decal) en una cara de un muro desde un archivo de imagen.","completion":"Wall wallHost = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nDecalType decalType = new FilteredElementCollector(doc).OfClass(typeof(DecalType)).FirstOrDefault() as DecalType;\nif (wallHost != null && decalType != null)\n{\n    Face wallFace = HostObjectUtils.GetSideFaces(wallHost, ShellLayerType.Exterior).FirstOrDefault();\n    if(wallFace != null) Decal.Create(doc, doc.ActiveView.Id, new Reference(wallHost), decalType.Id, wallFace.GetSurface(), new XYZ(0.5, 0.5, 0));\n}"}
{"prompt":"Calcula el volumen total de acero de refuerzo para todas las barras de 12mm.","completion":"double totalVolume = 0;\nRebarBarType barType12mm = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).Cast<RebarBarType>().FirstOrDefault(bt => bt.BarDiameter == UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Millimeters));\nif (barType12mm != null)\n{\n    var rebars = new FilteredElementCollector(doc).OfClass(typeof(Rebar)).Where(r => (r as Rebar).GetTypeId() == barType12mm.Id);\n    foreach (Rebar r in rebars)\n    {\n        totalVolume += r.GetVolume();\n    }\n    TaskDialog.Show(\"Volumen Total\", \"Volumen de barras de 12mm: \" + UnitUtils.ConvertFromInternalUnits(totalVolume, UnitTypeId.CubicMeters) + \" m³\");\n}"}
{"prompt":"Crea una nueva tabla de planificación para Habitaciones y añade un filtro para mostrar solo habitaciones con 'Oficina' en su nombre.","completion":"ElementId roomCatId = new ElementId(BuiltInCategory.OST_Rooms);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, roomCatId);\nschedule.Name = \"Tabla de Oficinas\";\nScheduleDefinition def = schedule.Definition;\nSchedulableField nameField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.ROOM_NAME));\nif (nameField != null)\n{\n    def.AddField(nameField);\n    ScheduleFilter filter = new ScheduleFilter(nameField.FieldId, ScheduleFilterType.Contains, \"Oficina\");\n    def.AddFilter(filter);\n}"}
{"prompt":"Crea una abertura rectangular en un suelo usando un perfil de curvas.","completion":"Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif (floor != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(1,1,0), new XYZ(3,1,0)));\n    profile.Append(Line.CreateBound(new XYZ(3,1,0), new XYZ(3,3,0)));\n    profile.Append(Line.CreateBound(new XYZ(3,3,0), new XYZ(1,3,0)));\n    profile.Append(Line.CreateBound(new XYZ(1,3,0), new XYZ(1,1,0)));\n    doc.Create.NewOpening(floor, profile, true);\n}"}
{"prompt":"Establece un valor de parámetro para todas las instancias de mobiliario ubicadas dentro de una habitación específica.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Sala de Conferencias 1\") as Room;\nif (room != null)\n{\n    var furniture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Room != null && fi.Room.Id == room.Id);\n    foreach (FamilyInstance fi in furniture)\n    {\n        fi.LookupParameter(\"Comments\").Set(\"Aprobado para Conf. 1\");\n    }\n}"}
{"prompt":"Obtén el ID del elemento anfitrión para una instancia de armadura dada.","completion":"Rebar rebarInstance = new FilteredElementCollector(doc).OfClass(typeof(Rebar)).FirstOrDefault() as Rebar;\nif (rebarInstance != null)\n{\n    ElementId hostId = rebarInstance.GetHostId();\n    Element hostElement = doc.GetElement(hostId);\n    TaskDialog.Show(\"Anfitrión de Armadura\", \"ID del anfitrión: \" + hostElement.Id.ToString());\n}"}
{"prompt":"Cambia el estilo visual de la vista activa a 'Línea Oculta'.","completion":"View activeView = doc.ActiveView;\nif (activeView != null && activeView.CanBePrinted)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}
{"prompt":"Duplica la vista 'Nivel 1' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 1\") as ViewPlan;\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if(newView != null) newView.Name = \"Nivel 1 - Dependiente\";\n}"}
{"prompt":"Bloquea una dimensión seleccionada para mantener sus restricciones.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una dimensión\");\nDimension dim = doc.GetElement(pickedRef) as Dimension;\nif (dim != null) dim.IsLocked = true;"}
{"prompt":"Coloca una cámara en la vista activa en coordenadas (2,2,3).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    cameraView.Name = \"Nueva Vista de Cámara\";\n    ViewOrientation3D orientation = new ViewOrientation3D(new XYZ(2,2,3), new XYZ(0,0,0), new XYZ(0,0,1));\n    cameraView.SetOrientation(orientation);\n}"}
{"prompt":"Crea una separación de habitación usando la línea de un muro existente.","completion":"Wall wall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif (wall != null)\n{\n    LocationCurve locCurve = wall.Location as LocationCurve;\n    if(locCurve != null)\n    {\n        RoomSeparationLine.Create(doc, locCurve.Curve, doc.ActiveView.SketchPlane.Id);\n    }\n}"}
{"prompt":"Genera una sección en cada intersección de la rejilla.","completion":"ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\nvar grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\nif (sectionVFT != null && grids.Count > 1)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            SetComparisonResult res = grids[i].Curve.Intersect(grids[j].Curve, out IntersectionResultArray results);\n            if (res == SetComparisonResult.Overlap && results != null)\n            {\n                foreach (IntersectionResult ir in results)\n                {\n                    XYZ origin = ir.XYZPoint;\n                    XYZ viewDir = grids[i].Curve.GetEndPoint(1) - grids[i].Curve.GetEndPoint(0);\n                    Transform t = Transform.CreateRotation(XYZ.BasisZ, viewDir.AngleOnPlaneTo(XYZ.BasisX, XYZ.BasisZ));\n                    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ() { Min = new XYZ(-5, -1, 0), Max = new XYZ(5, 5, 10), Transform = t.Inverse };\n                    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Crea un sistema de vigas en una retícula de 5x5 metros.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif (beamSymbol != null && level != null)\n{\n    if (!beamSymbol.IsActive) beamSymbol.Activate();\n    double gridSize = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    for (int i = 0; i <= 5; i++)\n    {\n        Line horizontalLine = Line.CreateBound(new XYZ(0, i * gridSize, 0), new XYZ(5 * gridSize, i * gridSize, 0));\n        doc.Create.NewFamilyInstance(horizontalLine, beamSymbol, level, StructuralType.Beam);\n        Line verticalLine = Line.CreateBound(new XYZ(i * gridSize, 0, 0), new XYZ(i * gridSize, 5 * gridSize, 0));\n        doc.Create.NewFamilyInstance(verticalLine, beamSymbol, level, StructuralType.Beam);\n    }\n}"}
{"prompt":"Añade una etiqueta de texto a la columna más cercana al origen (0,0,0).","completion":"FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => (c.Location as LocationPoint).Point.DistanceTo(XYZ.Zero)).FirstOrDefault();\nif (column != null)\n{\n    IndependentTag.Create(doc, doc.ActiveView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, (column.Location as LocationPoint).Point);\n}"}
{"prompt":"Instala un accesorio de tubería (fitting) en el extremo de la primera tubería encontrada.","completion":"FamilySymbol fittingSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeFitting).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nPipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nif (fittingSymbol != null && pipe != null)\n{\n    if (!fittingSymbol.IsActive) fittingSymbol.Activate();\n    Connector connector = pipe.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (connector != null) doc.Create.NewFamilyInstance(connector, fittingSymbol);\n}"}
{"prompt":"Coloca un terminal de aire en el extremo de un conducto.","completion":"FamilySymbol terminalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctTerminal).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nDuct duct = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Ducts).FirstOrDefault() as Duct;\nif (terminalSymbol != null && duct != null)\n{\n    if (!terminalSymbol.IsActive) terminalSymbol.Activate();\n    Connector connector = duct.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (connector != null) doc.Create.NewFamilyInstance(connector, terminalSymbol);\n}"}
{"prompt":"Crea una familia 'in-situ' para un mostrador de recepción personalizado usando una extrusión.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(level != null) {\n    InPlaceElement ipe = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Furniture), level.Id);\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { Line.CreateBound(new XYZ(0,0,0), new XYZ(2,0,0)), Line.CreateBound(new XYZ(2,0,0), new XYZ(2,1,0)), Line.CreateBound(new XYZ(2,1,0), new XYZ(0,1,0)), Line.CreateBound(new XYZ(0,1,0), new XYZ(0,0,0)) });\n    SketchPlane sp = SketchPlane.Create(doc, level.GetPlane());\n    doc.FamilyCreate.NewExtrusion(true, new List<CurveLoop>{profile}, sp, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n    ipe.Commit();\n}"}
{"prompt":"Modifica el tipo de muro de un muro existente a un tipo que contenga 'Aislamiento Térmico'.","completion":"Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(x => x.Name.Contains(\"Aislamiento Térmico\"));\nif (wallToChange != null && newType != null) wallToChange.WallType = newType;"}
{"prompt":"Crea una losa inclinada con una pendiente del 2% sobre una planta de 8x6 m.","completion":"FloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nLevel lvl = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif (ft != null && lvl != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(8,6,0), new XYZ(0,1,0));\n    Floor slopedFloor = Floor.Create(doc, new List<CurveLoop>{profile}, ft.Id, lvl.Id);\n    slopedFloor.get_Parameter(BuiltInParameter.ROOF_SLOPE).Set(0.02);\n}"}
{"prompt":"Añade un accesorio de tubería tipo codo de 90° en la unión de dos tuberías.","completion":"FamilySymbol elbowSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeFitting).WhereElementIsElementType().FirstOrDefault(x => x.Name.Contains(\"Elbow\")) as FamilySymbol;\nvar pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Take(2).Cast<Pipe>().ToList();\nif (elbowSymbol != null && pipes.Count == 2)\n{\n    Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (c1 != null && c2 != null) doc.Create.NewElbowFitting(c1, c2);\n}"}
{"prompt":"Coloca una etiqueta de elevación en el Nivel 1.","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (lvl1 != null)\n{\n    Reference levelRef = new Reference(lvl1);\n    XYZ origin = new XYZ(5,5,lvl1.Elevation);\n    doc.Create.NewSpotElevation(doc.ActiveView, levelRef, origin, origin, origin, true, true);\n}"}
{"prompt":"Exporta la vista 3D actual a formato NWC para Navisworks.","completion":"View3D view3d = doc.ActiveView as View3D;\nif (view3d != null)\n{\n    NavisworksExportOptions options = new NavisworksExportOptions();\n    options.ExportScope = NavisworksExportScope.View;\n    options.ViewId = view3d.Id;\n    doc.Export(@\"C:\\RevitExports\\\", \"3DView.nwc\", options);\n}"}
{"prompt":"Aplica un refuerzo de viga con estribos espaciados cada 0.3 metros.","completion":"RebarBarType stirrupType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault(s => s.Name.Contains(\"Stirrup\")) as RebarShape;\nFamilyInstance beam = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).FirstOrDefault() as FamilyInstance;\nif (stirrupType != null && shape != null && beam != null)\n{\n    Rebar rebar = Rebar.CreateFromRebarShape(doc, shape, stirrupType, beam, XYZ.BasisZ, XYZ.BasisX, XYZ.BasisY);\n    rebar.GetRebarLayout().MaxSpacing = UnitUtils.ConvertToInternalUnits(0.3, UnitTypeId.Meters);\n}"}
{"prompt":"Crea una pieza de mobiliario de emergencia, como una camilla, en las coordenadas (2,3,0).","completion":"FamilySymbol emergencySymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Emergency\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif (emergencySymbol != null && level != null)\n{\n    if (!emergencySymbol.IsActive) emergencySymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,3,0), emergencySymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Obtén todas las habitaciones que están en el Nivel 3.","completion":"Level level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nList<Room> roomsOnLevel3 = new List<Room>();\nif (level3 != null)\n{\n    roomsOnLevel3 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().Where(r => r.LevelId == level3.Id).ToList();\n}"}
{"prompt":"Crea una vista de sección con el nombre 'Sección A-A' en el nivel actual.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(-5, -1, 0);\n    sectionBox.Max = new XYZ(5, 5, 10);\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    sectionView.Name = \"Sección A-A\";\n}"}
{"prompt":"Cambia el nivel de detalle de la vista activa a 'Medio'.","completion":"View activeView = doc.ActiveView;\nif (activeView != null) activeView.DetailLevel = ViewDetailLevel.Medium;"}
{"prompt":"Aplica un parámetro compartido llamado 'CódigoEspacio' a todas las habitaciones.","completion":"string sharedParamFile = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamFile) || !File.Exists(sharedParamFile)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\shared_params.txt\"; File.Create(sharedParamFile).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinition def = defFile.Groups.SelectMany(g => g.Definitions).OfType<ExternalDefinition>().FirstOrDefault(d => d.Name == \"CódigoEspacio\");\nif(def != null) {\n    CategorySet cats = doc.Application.Create.NewCategorySet();\n    cats.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Rooms));\n    InstanceBinding bind = doc.Application.Create.NewInstanceBinding(cats);\n    doc.ParameterBindings.Insert(def, bind, BuiltInParameterGroup.PG_IDENTITY_DATA);\n}"}
{"prompt":"Genera un grupo con las instancias seleccionadas y colócalo en (10,10,0).","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Any())\n{\n    Group group = doc.Create.Group(selectedIds);\n    group.Location.Move(new XYZ(10,10,0));\n}"}
{"prompt":"Obtén todas las instancias de FamilyInstance de la categoría Mobiliario.","completion":"var furnitureInstances = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_Furniture)\n    .WhereElementIsNotElementType()\n    .ToElements();"}
{"prompt":"Elimina todas las DetailLine de la vista activa.","completion":"ICollection<ElementId> detailLines = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(DetailLine)).ToElementIds();\nif (detailLines.Any()) doc.Delete(detailLines);"}
{"prompt":"Ajusta la región de recorte (crop) de la vista activa a un rectángulo de 0 a 20 en X/Y.","completion":"View view = doc.ActiveView;\nif (view != null && view.CropBoxActive)\n{\n    BoundingBoxXYZ cropBox = view.CropBox;\n    cropBox.Min = new XYZ(0, 0, cropBox.Min.Z);\n    cropBox.Max = new XYZ(20, 20, cropBox.Max.Z);\n    view.CropBox = cropBox;\n}"}
{"prompt":"Crea un SketchPlane asociado al nivel 'Level 2'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif(level2 != null) {\n    Plane plane = level2.GetPlane();\n    SketchPlane sp = SketchPlane.Create(doc, plane);\n}"}
{"prompt":"Dibuja una curva spline pasando por los puntos (0,0,0), (5,2,0) y (10,0,0).","completion":"IList<XYZ> points = new List<XYZ>{ new XYZ(0,0,0), new XYZ(5,2,0), new XYZ(10,0,0) };\nNurbSpline spline = NurbSpline.Create(points);\nPlane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, XYZ.Zero);\nSketchPlane sp = SketchPlane.Create(doc, plane);\ndoc.Create.NewModelCurve(spline, sp);"}
{"prompt":"Extrae todos los parámetros compartidos del documento.","completion":"BindingMap bindingMap = doc.ParameterBindings;\nvar sharedParams = new List<ExternalDefinition>();\nDefinitionBindingMapIterator it = bindingMap.ForwardIterator();\nit.Reset();\nwhile (it.MoveNext())\n{\n    if (it.Key is ExternalDefinition def) sharedParams.Add(def);\n}"}
{"prompt":"Activa todos los FamilySymbol cargados en el documento.","completion":"var symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) sym.Activate();\n}"}
{"prompt":"Inicia y confirma una transacción llamada 'Modificar Proyecto'.","completion":"using (Transaction tx = new Transaction(doc, \"Modificar Proyecto\"))\n{\n    tx.Start();\n    // ... acciones de modificación aquí ...\n    tx.Commit();\n}"}
{"prompt":"Usa TransactionGroup para agrupar dos transacciones.","completion":"using (TransactionGroup tg = new TransactionGroup(doc, \"Agrupar Cambios\"))\n{\n    tg.Start();\n    using (Transaction t1 = new Transaction(doc, \"Paso 1\")) { t1.Start(); /* acción 1 */ t1.Commit(); }\n    using (Transaction t2 = new Transaction(doc, \"Paso 2\")) { t2.Start(); /* acción 2 */ t2.Commit(); }\n    tg.Assimilate();\n}"}
{"prompt":"Crea y cancela una SubTransaction dentro de una transacción.","completion":"using (Transaction tx = new Transaction(doc, \"Transacción Principal\"))\n{\n    tx.Start();\n    using (SubTransaction st = new SubTransaction(doc))\n    {\n        st.Start();\n        // ... cambios tentativos ...\n        st.RollBack();\n    }\n    tx.Commit();\n}"}
{"prompt":"Crea un filtro de vista que oculte muros con el parámetro 'Phase Demolished' igual a un ID de fase específico.","completion":"Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).FirstOrDefault(p => p.Name == \"Fase de Demolición\") as Phase;\nif(demolishedPhase != null) {\n    ElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\n    FilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\n    ElementFilter filter = new ElementParameterFilter(rule);\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Filtro de Demolición\", new List<ElementId>{new ElementId(BuiltInCategory.OST_Walls)}, filter);\n    doc.ActiveView.AddFilter(pfe.Id);\n    doc.ActiveView.SetFilterVisibility(pfe.Id, false);\n}"}
{"prompt":"Aplica OverrideGraphicSettings para que todas las ventanas se muestren en rojo.","completion":"View activeView = doc.ActiveView;\nOverrideGraphicSettings ogs = new OverrideGraphicSettings();\nogs.SetProjectionLineColor(new Color(255,0,0));\nvar windows = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().ToElementIds();\nforeach (var windowId in windows)\n{\n    activeView.SetElementOverrides(windowId, ogs);\n}"}
{"prompt":"Exporta la vista 3D activa como imagen JPG en 'C:/temp/vista.jpg'.","completion":"View activeView = doc.ActiveView;\nImageExportOptions opts = new ImageExportOptions();\nopts.FilePath = @\"C:\\temp\\vista\";\nopts.HLRandWFViewsFileType = ImageFileType.JPEGLossless;\nopts.ZoomType = ZoomFitType.FitToPage;\nopts.ExportRange = ExportRange.CurrentView;\ndoc.ExportImage(opts);"}
{"prompt":"Configura los ajustes de trazado de rayos (RayTrace) en la vista 3D.","completion":"View3D view3D = doc.ActiveView as View3D;\nif(view3D != null) {\n    view3D.get_Parameter(BuiltInParameter.MODEL_GRAPHICS_STYLE).Set(6); // Realistic\n    view3D.get_Parameter(BuiltInParameter.REALISTIC_GRAPHICS_STYLE_RAY_TRACE).Set(1); // Enable Ray Tracing\n    RenderingSettings settings = view3D.GetRenderingSettings();\n    settings.ResolutionTarget = ResolutionTarget.Printer;\n    settings.ResolutionValue = 300;\n    view3D.SetRenderingSettings(settings);\n}"}
{"prompt":"Crea un PathOfTravel entre dos puntos (1,1) y (10,10).","completion":"ViewPlan viewPlan = doc.ActiveView as ViewPlan;\nif(viewPlan != null) {\n    UV start = new UV(1,1);\n    UV end = new UV(10,10);\n    PathOfTravel.Create(viewPlan, start, end);\n}"}
{"prompt":"Crea un filtro mecánico HVAC que agrupe conductos de SupplyAir.","completion":"ElementId sysClassParamId = new ElementId(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(sysClassParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"SupplyAir\");\nElementFilter filter = new ElementParameterFilter(rule);\nParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Filtro Supply Air\", new List<ElementId>{new ElementId(BuiltInCategory.OST_DuctCurves)}, filter);\ndoc.ActiveView.AddFilter(pfe.Id);\nOverrideGraphicSettings ogs = new OverrideGraphicSettings();\nogs.SetProjectionLineColor(new Color(0,0,255));\ndoc.ActiveView.SetFilterOverrides(pfe.Id, ogs);"}
{"prompt":"Añade un parámetro de instancia compartido 'SerialNumber' a la categoría Mobiliario.","completion":"string sharedParamFile = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamFile) || !File.Exists(sharedParamFile)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\shared_params.txt\"; File.Create(sharedParamFile).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = defFile.Groups.EnsureDefinitionGroup(\"General\");\nExternalDefinition def = group.Definitions.Create(new ExternalDefinitionCreationOptions(\"SerialNumber\", SpecTypeId.String.Text)) as ExternalDefinition;\nCategory cat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nCategorySet cs = doc.Application.Create.NewCategorySet(); cs.Insert(cat);\nInstanceBinding bind = doc.Application.Create.NewInstanceBinding(cs);\ndoc.ParameterBindings.Insert(def, bind, BuiltInParameterGroup.PG_TEXT);"}
{"prompt":"Obtén la malla de geometría de una masa conceptual (MassInstance).","completion":"FamilyInstance massInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Mass).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif(massInstance != null) {\n    Options opt = new Options() { DetailLevel = ViewDetailLevel.Fine };\n    GeometryElement geomElem = massInstance.get_Geometry(opt);\n    foreach (GeometryObject geomObj in geomElem) {\n        if (geomObj is Solid solid && solid.Volume > 0) {\n            // Procesar el sólido\n        }\n    }\n}"}
{"prompt":"Inserta un TextNote con el texto 'Revisar' en posición (2,3,0) en la vista activa.","completion":"XYZ position = new XYZ(2,3,0);\nTextNote.Create(doc, doc.ActiveView.Id, position, \"Revisar\", TextNoteType.CreateDefault(doc).Id);"}
{"prompt":"Crea un Workset de usuario llamado 'Mobiliario' y asígnalo a una FamilyInstance.","completion":"if(doc.IsWorkshared) {\n    Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w => w.Name == \"Mobiliario\");\n    if(ws == null) ws = Workset.Create(doc, \"Mobiliario\");\n    FamilyInstance fi = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n    if (fi != null) {\n        Parameter wsparam = fi.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n        if(wsparam != null) wsparam.Set(ws.Id.IntegerValue);\n    }\n}"}
{"prompt":"Obtén y establece la ubicación XY de un elemento a (5,5).","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para mover\");\nElement elem = doc.GetElement(pickedRef);\nLocationPoint lp = elem.Location as LocationPoint;\nif (lp != null) {\n    XYZ newPosition = new XYZ(5, 5, lp.Point.Z);\n    lp.Point = newPosition;\n}"}
{"prompt":"Crea una carga de superficie (Area Load) de 2 kN/m² en un contorno cerrado dado.","completion":"CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(10,10,0), XYZ.BasisZ);\nAreaLoadType loadType = new FilteredElementCollector(doc).OfClass(typeof(AreaLoadType)).FirstOrDefault() as AreaLoadType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(loadType != null && level != null) {\n    AreaLoad.Create(doc, level, new List<CurveLoop>{profile}, loadType.Id, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.KilonewtonsPerSquareMeter), \"Uniform\");\n}"}
{"prompt":"Crea un refuerzo de superficie (Area Reinforcement) en un muro, usando un contorno de curvas.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nAreaReinforcementType reinforcementType = new FilteredElementCollector(doc).OfClass(typeof(AreaReinforcementType)).FirstOrDefault() as AreaReinforcementType;\nif(wall != null && reinforcementType != null) {\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(1,1,0), new XYZ(4,4,0), wall.Orientation);\n    AreaReinforcement.Create(doc, wall, new List<CurveLoop>{profile}, reinforcementType.Id);\n}"}
{"prompt":"Genera una malla de refuerzo (Fabric Area) en un forjado, con ángulo de 45°.","completion":"Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFabricAreaType areaType = new FilteredElementCollector(doc).OfClass(typeof(FabricAreaType)).FirstOrDefault() as FabricAreaType;\nif(floor != null && areaType != null) {\n    FabricArea.Create(doc, floor.Id, areaType.Id, 45 * Math.PI / 180.0);\n}"}
{"prompt":"Crea una lámina de refuerzo (Fabric Sheet) en una columna, usando un contorno de curvas.","completion":"FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nFabricSheetType sheetType = new FilteredElementCollector(doc).OfClass(typeof(FabricSheetType)).FirstOrDefault() as FabricSheetType;\nif(column != null && sheetType != null) {\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(-0.5,-0.5,0), new XYZ(0.5,0.5,0), column.GetTransform().BasisX);\n    FabricSheet.Create(doc, column.Id, sheetType.Id, new List<CurveLoop>{profile});\n}"}
{"prompt":"Selecciona un tipo de hilo de refuerzo (FabricWireType) llamado '8mm'.","completion":"FabricWireType wireType = new FilteredElementCollector(doc).OfClass(typeof(FabricWireType)).Cast<FabricWireType>().FirstOrDefault(ft => ft.Name.Contains(\"8mm\"));"}
{"prompt":"Crea un refuerzo de trayectoria (Path Reinforcement) en una viga a lo largo de su curva de centro.","completion":"FamilyInstance beam = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nPathReinforcementType pathType = new FilteredElementCollector(doc).OfClass(typeof(PathReinforcementType)).FirstOrDefault() as PathReinforcementType;\nif(beam != null && pathType != null) {\n    LocationCurve lc = beam.Location as LocationCurve;\n    PathReinforcement.Create(doc, beam, new List<Curve>{lc.Curve}, pathType.Id, false);\n}"}
{"prompt":"Agrupa barras en un contenedor de refuerzo (Rebar Container) alrededor de una zapata.","completion":"FamilyInstance footing = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif(footing != null)\n{\n    RebarContainer rebarContainer = RebarContainer.Create(doc, footing);\n    // Aquí se añadirían las RebarContainerItems al contenedor\n}"}
{"prompt":"Crea una instancia de ensamblaje (AssemblyInstance) para un conjunto de muros seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> wallIds = uidoc.Selection.PickElementsByCategory(BuiltInCategory.OST_Walls, \"Selecciona muros para el ensamblaje\").Select(e => e.Id).ToList();\nif (wallIds.Any())\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, wallIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    assemblyInstance.Name = \"Ensamblado de Muros Perimetrales\";\n}"}
{"prompt":"Dibuja una región rellena (Filled Region) con un patrón de relleno y un contorno de curvas.","completion":"View activeView = doc.ActiveView;\nFilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\nif(filledRegionType != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(5,5,0), activeView.ViewDirection);\n    FilledRegion.Create(doc, filledRegionType.Id, activeView.Id, new List<CurveLoop>{profile});\n}"}
{"prompt":"Añade un punto de referencia (ReferencePoint) en las coordenadas X=1, Y=2, Z=3.","completion":"// Este código solo es válido dentro del editor de familias (Family Document)\nif(doc.IsFamilyDocument)\n{\n    ReferencePoint refPoint = doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));\n}"}
{"prompt":"Crea una etiqueta independiente (Independent Tag) para la primera puerta en la vista.","completion":"FamilyInstance door = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif(door != null)\n{\n    LocationPoint loc = door.Location as LocationPoint;\n    if(loc != null) IndependentTag.Create(doc, doc.ActiveView.Id, new Reference(door), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n}"}
{"prompt":"Crea un esquema de área (Area Scheme) llamado 'Zonas de Uso'.","completion":"AreaScheme newScheme = AreaScheme.Create(doc, \"Zonas de Uso\");"}
{"prompt":"Crea un área (Area) en el esquema 'Zonas de Uso' con un contorno de curvas.","completion":"AreaScheme scheme = new FilteredElementCollector(doc).OfClass(typeof(AreaScheme)).FirstOrDefault(s => s.Name == \"Zonas de Uso\") as AreaScheme;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(scheme != null && level != null)\n{\n    Area a = doc.Create.NewArea(level, new UV(1,1));\n    // Se necesitarían AreaBoundaryLines para definir el contorno del área.\n}"}
{"prompt":"Crea un elemento de patrón de trama de materiales (MaterialPlotPatternElement) llamado 'PatrónDiagonal'.","completion":"Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault() as Material;\nFillPatternElement pattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Diagonal\")) as FillPatternElement;\nif(material != null && pattern != null)\n{\n    material.SurfaceForegroundPatternId = pattern.Id;\n}"}
{"prompt":"Crea un elemento de patrón de relleno de color (ColorFillPatternElement) llamado 'RellenoAzul'.","completion":"FillPatternElement pattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.GetFillPattern().IsSolidFill) as FillPatternElement;\nif(pattern != null)\n{\n    ColorFillScheme colorFillScheme = new FilteredElementCollector(doc).OfClass(typeof(ColorFillScheme)).FirstOrDefault() as ColorFillScheme;\n    if(colorFillScheme != null) colorFillScheme.CreateEntry(new Color(0,0,255), pattern.Id, \"RellenoAzul\");\n}"}
{"prompt":"Duplica la vista de plan 'Level 2' como plantilla de vista.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 2\") as ViewPlan;\nif(viewToDuplicate != null && viewToDuplicate.CanBeTemplate())\n{\n    viewToDuplicate.IsTemplate = true;\n    viewToDuplicate.Name = \"Plantilla Nivel 2\";\n}"}
{"prompt":"Crea una vista 3D (View3D) con caja de sección activada.","completion":"ViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\nif(vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    view3d.IsSectionBoxActive = true;\n}"}
{"prompt":"Inserta un enlace CAD (ImportInstance) de 'BasePlan.dwg' en la vista activa.","completion":"string filePath = @\"C:\\CAD\\BasePlan.dwg\";\nif(File.Exists(filePath))\n{\n    DWGImportOptions options = new DWGImportOptions();\n    options.Placement = ImportPlacement.Origin;\n    ElementId linkId;\n    doc.Import(filePath, options, doc.ActiveView, out linkId);\n}"}
{"prompt":"Crea un punto de levantamiento (Survey Point) en X=0, Y=0, Z=0.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsSurveyPoint);\nif(surveyPoint == null)\n{\n    // La creación directa no es posible, se modifica el existente.\n}\n// Mover el punto de levantamiento existente\nif(surveyPoint != null) ElementTransformUtils.MoveElement(doc, surveyPoint.Id, -surveyPoint.Position);"}
{"prompt":"Crea un filtro de parámetro de elemento (ElementParameterFilter) que seleccione muros con marca de tipo 'W-EX'.","completion":"ElementId typeMarkParamId = new ElementId(BuiltInParameter.ALL_MODEL_TYPE_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(typeMarkParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"W-EX\");\nElementFilter filter = new ElementParameterFilter(rule);\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElements();"}
{"prompt":"Crea un espacio MEP (MEPSpace) en un nivel dado en coordenadas UV(5,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(level != null)\n{\n    MEPSpace space = MEPSpace.Create(doc, level, new UV(5,5));\n}"}
{"prompt":"Crea un DirectShape de categoría GenericModel con un sólido de caja de 2×2×2 metros.","completion":"List<GeometryObject> geomList = new List<GeometryObject>();\nSolid box = SolidUtils.CreateExtrusion(CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(2,2,0), XYZ.BasisZ), XYZ.BasisZ, 2);\ngeomList.Add(box);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\nds.SetShape(geomList);"}
{"prompt":"Inserta un componente adaptativo de familia \"AdaptivePoint\" en tres puntos dados.","completion":"// Suponiendo que rp1, rp2, rp3 son ReferencePoint existentes\nFamilySymbol adaptiveSymbol = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).FirstOrDefault(s => s.Family.FamilyPlacementType == FamilyPlacementType.Adaptive && s.Name == \"AdaptivePoint\") as FamilySymbol;\nif(adaptiveSymbol != null)\n{\n    if(!adaptiveSymbol.IsActive) adaptiveSymbol.Activate();\n    AdaptiveComponentInstanceUtils.CreateAdaptiveComponentInstance(doc, adaptiveSymbol, new List<ReferencePoint>{rp1, rp2, rp3});\n}"}
{"prompt":"Crea un parámetro compartido de tipo entero llamado \"LoadBearing\" y aplícalo a la categoría de muros.","completion":"string sharedParamFile = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamFile) || !File.Exists(sharedParamFile)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\shared_params.txt\"; File.Create(sharedParamFile).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = defFile.Groups.EnsureDefinitionGroup(\"Structural\");\nExternalDefinition def = group.Definitions.Create(new ExternalDefinitionCreationOptions(\"LoadBearing\", SpecTypeId.Boolean.YesNo)) as ExternalDefinition;\nCategorySet cats = doc.Application.Create.NewCategorySet();\ncats.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\nInstanceBinding bind = doc.Application.Create.NewInstanceBinding(cats);\ndoc.ParameterBindings.Insert(def, bind, BuiltInParameterGroup.PG_STRUCTURAL);"}
{"prompt":"Mueve un muro en una SubTransaction a una nueva posición X=5.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif(wall != null)\n{\n    using(SubTransaction st = new SubTransaction(doc))\n    {\n        st.Start();\n        ElementTransformUtils.MoveElement(doc, wall.Id, new XYZ(5,0,0));\n        st.Commit();\n    }\n}"}
{"prompt":"Crea un SketchPlane basado en un círculo de radio 5m centrado en el origen.","completion":"Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, XYZ.Zero);\nSketchPlane sp = SketchPlane.Create(doc, plane);\nArc arc = Arc.Create(plane, 5, 0, 2*Math.PI);\ndoc.Create.NewModelCurve(arc, sp);"}
{"prompt":"Cambia la visibilidad de cortes de muros en la vista activa deshabilitándolos.","completion":"View activeView = doc.ActiveView;\nOverrideGraphicSettings ogs = new OverrideGraphicSettings();\nogs.SetCutPatternVisible(false);\nactiveView.SetCategoryOverrides(new ElementId(BuiltInCategory.OST_Walls), ogs);"}
{"prompt":"Exporta el documento a un archivo IFC con versión IFC4x3.","completion":"IFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4x3;\ndoc.Export(@\"C:\\Exports\\\", \"Model.ifc\", options);"}
{"prompt":"Inicia y confirma una transacción para duplicar el tipo de muro \"Basic Wall\".","completion":"WallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Basic Wall\");\nif(wt != null)\n{\n    WallType newWt = wt.Duplicate(\"Basic Wall Copy\") as WallType;\n}"}
{"prompt":"Crea un nuevo View3D orientado al punto (10,10,10) mirando al origen.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v=>v.ViewFamily==ViewFamily.ThreeDimensional);\nif(vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    ViewOrientation3D vo = new ViewOrientation3D(new XYZ(10,10,10), XYZ.Zero, XYZ.BasisZ);\n    view.SetOrientation(vo);\n}"}
{"prompt":"Dibuja un texto de modelo en la vista activa en (2,2,0) con contenido \"Proyecto BIM\".","completion":"TextElementOptions opts = new TextElementOptions() { HorizontalAlignment = HorizontalAlignment.Center, VerticalAlignment = VerticalAlignment.Middle };\nModelText mt = ModelText.Create(doc, \"Proyecto BIM\", new ElementId(-1), doc.ActiveView.SketchPlane.Id, new XYZ(2,2,0), 1.0, opts);"}
{"prompt":"Añade un material llamado \"VidrioReflectante\" con reflectividad al 80%.","completion":"ElementId materialId = Material.Create(doc, \"VidrioReflectante\");\nMaterial material = doc.GetElement(materialId) as Material;\nAppearanceAssetElement appearanceAsset = AppearanceAssetElement.Create(doc, \"VidrioReflectante_Asset\", false);\nusing(AppearanceAssetEditScope scope = new AppearanceAssetEditScope(appearanceAsset.GetRenderingAsset()))\n{\n    Asset anAsset = scope.Start();\n    AssetPropertyDouble reflectivity = anAsset.FindByName(\"generic_reflectivity\") as AssetPropertyDouble;\n    if(reflectivity != null) reflectivity.Value = 0.8;\n    scope.Commit(true);\n}\nmaterial.AppearanceAssetId = appearanceAsset.Id;"}
{"prompt":"Crea un DirectShape de categoría Topography usando una lista de puntos.","completion":"List<XYZ> points = new List<XYZ>{new XYZ(0,0,0),new XYZ(10,0,1),new XYZ(0,10,2)};\nTessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\nbuilder.AddFace(new TessellatedFace(points, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_Topography));\nds.SetShape(result.GetGeometricalObjects());"}
{"prompt":"Carga un enlace DWG preservando colores y lo añade a la vista activa.","completion":"string filePath = @\"C:\\CAD\\Planos.dwg\";\nif(File.Exists(filePath))\n{\n    DWGImportOptions opts = new DWGImportOptions();\n    opts.ColorMode = ImportColorMode.Preserved;\n    ElementId linkId;\n    doc.Link(filePath, opts, doc.ActiveView, out linkId);\n}"}
{"prompt":"Obtén todas las vistas de plano y lista sus nombres.","completion":"IList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().ToList();\nStringBuilder viewNames = new StringBuilder();\nforeach(var vp in planViews)\n{\n    viewNames.AppendLine(vp.Name);\n}\nTaskDialog.Show(\"Vistas de Plano\", viewNames.ToString());"}
{"prompt":"Crea un nivel nuevo llamado \"Mezzanine\" a 7.5m de elevación.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(7.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nnewLevel.Name = \"Mezzanine\";"}
{"prompt":"Define un filtro de vista para ocultar líneas de detalle.","completion":"ElementId detailCategoryId = new ElementId(BuiltInCategory.OST_Lines);\nParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Ocultar Líneas de Detalle\", new List<ElementId>{detailCategoryId}, new ElementFilter[0]);\ndoc.ActiveView.AddFilter(pfe.Id);\ndoc.ActiveView.SetFilterVisibility(pfe.Id, false);"}
{"prompt":"Genera un bounding box de 10×10×3 m y crea una sección con él.","completion":"BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\nsectionBox.Min = new XYZ(0,0,0);\nsectionBox.Max = new XYZ(10,10,3);\nViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\nif(sectionVFT != null)\n{\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}
{"prompt":"Crea un nuevo grupo de trabajo (Workset) llamado \"Estructura\".","completion":"if(doc.IsWorkshared)\n{\n    Workset.Create(doc, \"Estructura\");\n}"}
{"prompt":"Asigna todos los muros existentes al Workset \"Estructura\".","completion":"if(doc.IsWorkshared)\n{\n    Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w => w.Name == \"Estructura\");\n    if(ws != null)\n    {\n        var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().ToElementIds();\n        WorksharingUtils.ChangeWorkset(doc, walls, ws.Id);\n    }\n}"}
{"prompt":"Inserta un punto de referencia SharedBasePoint y lo posiciona en (1,1,0).","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsSurveyPoint);\nif(projectBasePoint != null) ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, new XYZ(1,1,0) - projectBasePoint.Position);"}
{"prompt":"Crea un componente de techo (Roof) extruido con pendiente del 10%.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nif(level != null && roofType != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(10,10,0), XYZ.BasisY);\n    ReferencePlane refPlane = ReferencePlane.Create(doc, new XYZ(0,0,level.Elevation), XYZ.BasisX, XYZ.BasisZ, doc.ActiveView);\n    ExtrusionRoof extrusionRoof = doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10);\n    extrusionRoof.get_Parameter(BuiltInParameter.ROOF_SLOPE).Set(0.1);\n}"}
{"prompt":"Crea una nota de texto ligada a un muro con contenido \"Muro Cortina\".","completion":"Wall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(wall != null)\n{\n    XYZ textLocation = (wall.Location as LocationCurve).Curve.Evaluate(0.5, true);\n    TextNote.Create(doc, doc.ActiveView.Id, textLocation, \"Muro Cortina\", TextNoteType.CreateDefault(doc).Id);\n}"}
{"prompt":"Obtén la tabla de planificación \"Muros\" y exporta sus datos a CSV.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s=>s.Name==\"Muros\");\nif(schedule != null)\n{\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(@\"C:\\Exports\\\", \"Muros.csv\", options);\n}"}
{"prompt":"Crea un RebarShape personalizado con propiedad \"Stirrup\" y tipo \"Rectangular\".","completion":"// La creación de RebarShape programáticamente es muy compleja y generalmente se hace en la interfaz de usuario.\n// Este código muestra cómo encontrar una forma existente.\nRebarShape stirrupShape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).Cast<RebarShape>().FirstOrDefault(s => s.Name.Contains(\"Stirrup\") && s.RebarStyle == RebarStyle.StirrupTie);"}
{"prompt":"Genera un filtro de planta para mostrar solo habitaciones con área >10m2.","completion":"ViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Rooms));\nScheduleDefinition def = schedule.Definition;\nSchedulableField areaField = def.GetSchedulableFields().FirstOrDefault(f=>f.ParameterId==new ElementId(BuiltInParameter.ROOM_AREA));\nif(areaField != null)\n{\n    def.AddField(areaField);\n    def.AddFilter(new ScheduleFilter(areaField.FieldId, ScheduleFilterType.GreaterThan, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.SquareMeters)));\n}"}
{"prompt":"Permite al usuario seleccionar un muro y luego resáltalo.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Por favor, selecciona un muro\");\nif (pickedRef != null && pickedRef.ElementId != ElementId.InvalidElementId)\n{\n    uidoc.Selection.SetElementIds(new List<ElementId>{pickedRef.ElementId});\n    uidoc.ShowElements(pickedRef.ElementId);\n}"}
{"prompt":"Crea una nueva hoja (sheet) A1 usando el primer cajetín (title block) disponible.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    sheet.Name = \"A1 - Planta General\";\n    sheet.SheetNumber = \"A1\";\n}"}
{"prompt":"Coloca la vista 'Nivel 1' en la hoja activa en el centro.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 1\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\nif (viewToPlace != null && activeSheet != null && Viewport.CanAddViewToSheet(doc, activeSheet.Id, viewToPlace.Id))\n{\n    BoundingBoxUV sheetBox = activeSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Aplica una plantilla de vista llamada 'Plantilla Arquitectónica' a la vista activa.","completion":"View activeView = doc.ActiveView;\nView viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.IsTemplate && v.Name == \"Plantilla Arquitectónica\");\nif (activeView != null && viewTemplate != null && activeView.ViewTemplateId == ElementId.InvalidElementId)\n{\n    activeView.ViewTemplateId = viewTemplate.Id;\n}"}
{"prompt":"Crea un circuito eléctrico conectando luminarias a un panel.","completion":"FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nvar fixtures = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds();\nif (panel != null && fixtures.Any())\n{\n    ElectricalSystem.Create(doc, fixtures, panel, ElectricalSystemType.PowerCircuit);\n}"}
{"prompt":"Modela una bandeja de cables (cable tray) entre dos puntos.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif (trayType != null && level != null)\n{\n    XYZ p1 = new XYZ(0,10,3), p2 = new XYZ(15,10,3);\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}
{"prompt":"Encuentra todas las colisiones entre tuberías y vigas en el modelo.","completion":"ElementCategoryFilter pipeFilter = new ElementCategoryFilter(BuiltInCategory.OST_PipeCurves);\nElementCategoryFilter beamFilter = new ElementCategoryFilter(BuiltInCategory.OST_StructuralFraming);\nvar pipeCollector = new FilteredElementCollector(doc).WherePasses(pipeFilter);\nvar beamCollector = new FilteredElementCollector(doc).WherePasses(beamFilter);\nvar clashElements = pipeCollector.WherePasses(new ElementIntersectsElementFilter(beamCollector.FirstElement()));\nTaskDialog.Show(\"Clash\", \"Se encontraron \" + clashElements.GetElementCount() + \" colisiones.\");"}
{"prompt":"Muestra un cuadro de diálogo simple al usuario con un mensaje.","completion":"TaskDialog.Show(\"Notificación de Agente\", \"La operación se ha completado exitosamente.\");"}
{"prompt":"Crea un parámetro global de tipo longitud llamado 'AnchoCorredor' con un valor de 1.2 metros.","completion":"if (GlobalParametersManager.IsGlobalParameterValidName(doc, \"AnchoCorredor\"))\n{\n    GlobalParameter gp = GlobalParameter.Create(doc, \"AnchoCorredor\", SpecTypeId.Length);\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters)));\n}"}
{"prompt":"Obtén la geometría sólida de un elemento seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento\");\nElement elem = doc.GetElement(pickedRef);\nOptions opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\nGeometryElement geoElem = elem.get_Geometry(opt);\nList<Solid> solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();"}
{"prompt":"Alinea la cara de un muro con la cara de otro muro.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara de destino\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara a mover\");\nif (ref1 != null && ref2 != null)\n{\n    doc.Create.NewAlignment(doc.ActiveView, ref1, ref2);\n}"}
{"prompt":"Crea una forma 'in-situ' de masa usando un 'loft' entre dos perfiles.","completion":"using(Transaction massTrans = new Transaction(doc, \"Create Loft Mass\")){\n    massTrans.Start();\n    InPlaceElement ipe = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\n    SketchPlane sp = SketchPlane.Create(doc, Plane.CreateByNormalAndOrigin(XYZ.BasisZ, XYZ.Zero));\n    CurveLoop p1 = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(5,5,0), XYZ.BasisZ);\n    CurveLoop p2 = CurveLoop.CreateViaRectangle(new XYZ(1,1,10), new XYZ(4,4,10), XYZ.BasisZ);\n    doc.FamilyCreate.NewLoftForm(true, new List<CurveLoop>{p1, p2});\n    ipe.Commit();\n    massTrans.Commit();\n}"}
{"prompt":"Cambia el tipo de todas las ventanas de 'Fijo' a 'Abatible'.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Abatible\"));\nif (newType != null)\n{\n    var windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Name.Contains(\"Fijo\")).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Recarga el vínculo de Revit más reciente llamado 'Estructura_LINK.rvt'.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"Estructura_LINK.rvt\");\nif (linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Crea una vista de plano de planta para el 'Nivel 3'.","completion":"Level level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 3\") as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\nif (level3 != null && vft != null)\n{\n    ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Calcula y muestra el área total de todas las habitaciones del proyecto.","completion":"double totalArea = 0.0;\nvar rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>();\nforeach (Room room in rooms)\n{\n    totalArea += room.Area;\n}\nTaskDialog.Show(\"Área Total\", $\"El área total de habitaciones es: {UnitUtils.ConvertFromInternalUnits(totalArea, UnitTypeId.SquareMeters).ToString(\"F2\")} m²\");"}
{"prompt":"Crea un filtro de vista que resalte en rojo todos los muros con resistencia al fuego de 2 horas.","completion":"ElementId fireRatingParamId = new ElementId(BuiltInParameter.FIRE_RATING);\nParameterValueProvider pvp = new ParameterValueProvider(fireRatingParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"2-hr\");\nElementFilter filter = new ElementParameterFilter(rule);\nParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Muros Cortafuego 2hr\", new List<ElementId>{new ElementId(BuiltInCategory.OST_Walls)}, filter);\nOverrideGraphicSettings ogs = new OverrideGraphicSettings();\nogs.SetCutBackgroundPatternColor(new Color(255,0,0));\nogs.SetSurfaceForegroundPatternColor(new Color(255,0,0));\ndoc.ActiveView.SetFilterOverrides(pfe.Id, ogs);"}
{"prompt":"Exporta una lista de todas las familias y sus tipos a un archivo de texto.","completion":"string path = @\"C:\\RevitExports\\FamilyList.txt\";\nusing (StreamWriter writer = new StreamWriter(path))\n{\n    var families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>();\n    foreach (Family fam in families)\n    {\n        writer.WriteLine($\"Familia: {fam.Name}\");\n        foreach (ElementId symbolId in fam.GetFamilySymbolIds())\n        {\n            FamilySymbol sym = doc.GetElement(symbolId) as FamilySymbol;\n            if(sym != null) writer.WriteLine($\"\\tTipo: {sym.Name}\");\n        }\n    }\n}"}
{"prompt":"Cambia un panel de vidrio de un muro cortina por un panel sólido.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nPanelType solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(PanelType)).Cast<PanelType>().FirstOrDefault(pt => pt.Name.Contains(\"Solid\"));\nif (curtainWall != null && solidPanelType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    var panelIds = grid.GetPanelIds();\n    if(panelIds.Any()){\n        Panel panelToChange = doc.GetElement(panelIds.First()) as Panel;\n        if (panelToChange != null) panelToChange.Symbol = solidPanelType;\n    }\n}"}
{"prompt":"Obtén las coordenadas del punto base y del punto de reconocimiento del proyecto.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsSurveyPoint);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsSurveyPoint);\nif(surveyPoint != null && projectBasePoint != null) {\n    XYZ surveyCoords = surveyPoint.Position;\n    XYZ projectCoords = projectBasePoint.Position;\n    TaskDialog.Show(\"Coordenadas\", $\"Punto de Levantamiento: {surveyCoords}\\nPunto Base: {projectCoords}\");\n}"}
{"prompt":"Crea una región rellenada (filled region) con un patrón de 'Concreto' en la vista activa.","completion":"FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\"));\nif (regionType != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(5,5,0), doc.ActiveView.ViewDirection);\n    FilledRegion.Create(doc, regionType.Id, doc.ActiveView.Id, new List<CurveLoop>{profile});\n}"}
{"prompt":"Encuentra el elemento de pórtico estructural con la marca 'B-101'.","completion":"Element framingElement = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_StructuralFraming)\n    .WhereElementIsNotElementType()\n    .FirstOrDefault(e => e.get_Parameter(BuiltInParameter.ALL_MODEL_MARK).AsString() == \"B-101\");"}
{"prompt":"Crea una losa de cimentación de 20x15 metros.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundationLevel != null && slabType != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(20,15,0), XYZ.BasisZ);\n    Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n}"}
{"prompt":"Añade montantes (mullions) a todas las líneas de rejilla de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif (curtainWall != null && mullionType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    foreach (ElementId gridLineId in grid.GetVGridLineIds()) grid.AddMullions(doc.GetElement(gridLineId) as CurtainGridLine, mullionType, false);\n    foreach (ElementId gridLineId in grid.GetUGridLineIds()) grid.AddMullions(doc.GetElement(gridLineId) as CurtainGridLine, mullionType, false);\n}"}
{"prompt":"Rota el elemento seleccionado 45 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nElement elem = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nif (lp != null)\n{\n    Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n    ElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI / 4.0);\n}"}
{"prompt":"Crea una apertura de hueco (shaft) que atraviese desde el Nivel 1 hasta el Nivel 3.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 3\") as Level;\nif(bottomLevel != null && topLevel != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(5,5,0), new XYZ(8,8,0), XYZ.BasisZ);\n    doc.Create.NewOpening(bottomLevel, topLevel, profile, true);\n}"}
{"prompt":"Obtén todos los materiales y sus volúmenes de un muro compuesto seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nWall wall = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\")) as Wall;\nif (wall != null)\n{\n    double wallArea = wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED).AsDouble();\n    CompoundStructure cs = wall.WallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        CompoundStructureLayer layer = cs.GetLayer(i);\n        Material material = doc.GetElement(layer.MaterialId) as Material;\n        if(material != null)\n        {\n            double volume = layer.Width * wallArea;\n            TaskDialog.Show(\"Material\", $\"Material: {material.Name}, Volumen aprox: {UnitUtils.ConvertFromInternalUnits(volume, UnitTypeId.CubicMeters)} m³\");\n        }\n    }\n}"}
{"prompt":"Muestra un cuadro de diálogo al usuario con opciones 'Sí' y 'No', y captura la respuesta.","completion":"TaskDialog mainDialog = new TaskDialog(\"Confirmación\");\nmainDialog.MainInstruction = \"¿Desea proceder con la operación?\";\nmainDialog.CommonButtons = TaskDialogCommonButtons.Yes | TaskDialogCommonButtons.No;\nTaskDialogResult result = mainDialog.Show();\nif (result == TaskDialogResult.Yes)\n{\n    // El usuario presionó 'Sí'\n} else {\n    // El usuario presionó 'No' o cerró el diálogo\n}"}
{"prompt":"Sincroniza el modelo local con el central, añadiendo el comentario 'Actualización de diseño'.","completion":"if(doc.IsWorkshared)\n{\n    TransactWithCentralOptions tco = new TransactWithCentralOptions();\n    SynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\n    swcOpts.SetComment(\"Actualización de diseño\");\n    swcOpts.SaveLocalAfter = true;\n    doc.SyncWithCentral(tco, swcOpts);\n}"}
{"prompt":"Obtén la curva del modelo analítico de una viga estructural.","completion":"FamilyInstance beam = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif (beam != null)\n{\n    AnalyticalModel am = beam.GetAnalyticalModel();\n    if (am != null && am.IsSingleCurve())\n    {\n        Curve analyticalCurve = am.GetCurve();\n    }\n}"}
{"prompt":"Crea una nota de texto con una flecha (leader) que apunte a un elemento seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference target = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para anotar\");\nif(target != null)\n{\n    XYZ textLocation = uidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n    XYZ leaderEnd = target.GlobalPoint;\n    TextNote.Create(doc, doc.ActiveView.Id, textLocation, \"Revisar este elemento\", TextNoteType.CreateDefault(doc).Id).AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L, leaderEnd, false); \n}"}
{"prompt":"Abre una familia, añade un nuevo parámetro de tipo llamado 'Código de Material' y guárdala.","completion":"Family fam = new FilteredElementCollector(doc).OfClass(typeof(Family)).FirstOrDefault(f => f.Name == \"Mi_Mobiliario\") as Family;\nif (fam != null)\n{\n    Document famDoc = doc.EditFamily(fam);\n    using (Transaction t = new Transaction(famDoc, \"Add Parameter\"))\n    {\n        t.Start();\n        famDoc.FamilyManager.AddParameter(\"Código de Material\", BuiltInParameterGroup.PG_MATERIALS, SpecTypeId.String.Text, false);\n        t.Commit();\n    }\n    famDoc.SaveFamilyAs(@\"C:\\RevitFamilies\\Mi_Mobiliario_mod.rfa\");\n    famDoc.Close();\n}"}
{"prompt":"Conecta dos bandejas de cables (cable trays) con un codo (fitting).","completion":"var trays = new FilteredElementCollector(doc).OfClass(typeof(CableTray)).Take(2).ToList();\nif (trays.Count == 2)\n{\n    Connector c1 = trays[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = trays[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (c1 != null && c2 != null) doc.Create.NewUnionFitting(c1, c2);\n}"}
{"prompt":"Crea una vista 3D axonométrica orientada para mirar desde el Noroeste.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\nif(vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    XYZ eye = new XYZ(-1, 1, 1); // Noroeste\n    XYZ up = new XYZ(0, 0, 1);\n    XYZ forward = eye.Negate().Normalize();\n    view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n    view3d.Name = \"Vista 3D Noroeste\";\n}"}
{"prompt":"Encuentra todas las puertas del Nivel 1 usando un filtro lógico combinado para mayor rendimiento.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(level1 != null){\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    var doors = new FilteredElementCollector(doc).WherePasses(combinedFilter).ToElements();\n}"}
{"prompt":"Crea un texto de modelo 3D que diga 'TORRE A' en el nivel base.","completion":"Level baseLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nif(baseLevel != null)\n{\n    XYZ origin = new XYZ(0,0,baseLevel.Elevation);\n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, origin);\n    SketchPlane sp = SketchPlane.Create(doc, plane);\n    ModelText.Create(doc, \"TORRE A\", sp, origin, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), TextHorizontalAlignment.Center, TextVerticalAlignment.Middle, 0.5);\n}"}
{"prompt":"Exporta todas las advertencias (warnings) del proyecto a un archivo de texto.","completion":"string path = @\"C:\\RevitExports\\ProjectWarnings.txt\";\nIList<FailureMessage> warnings = doc.GetWarnings();\nusing (StreamWriter writer = new StreamWriter(path))\n{\n    foreach (FailureMessage fm in warnings)\n    {\n        writer.WriteLine(fm.GetDescriptionText());\n    }\n}"}
{"prompt":"Suscríbete al evento 'DocumentSavingAs' para ejecutar una función antes de que el documento se guarde con un nuevo nombre.","completion":"// Este código se colocaría en el método OnStartup de una IExternalApplication\n// public Result OnStartup(UIControlledApplication application)\n// {\n//     application.ControlledApplication.DocumentSavingAs += OnDocumentSavingAs;\n//     return Result.Succeeded;\n// }\n// void OnDocumentSavingAs(object sender, Autodesk.Revit.DB.Events.DocumentSavingAsEventArgs args)\n// {\n//     TaskDialog.Show(\"Recordatorio\", \"Estás guardando el archivo con un nuevo nombre: \" + args.PathName);\n// }"}
{"prompt":"Agrupa una tabla de planificación de habitaciones por Nivel y muestra los totales de área.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(vs => vs.Definition.CategoryId.IntegerValue == (int)BuiltInCategory.OST_Rooms);\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.ROOM_LEVEL_ID));\n    if(levelField != null) {\n        def.AddSortGroupField(new ScheduleSortGroupField(levelField.FieldId));\n        def.IsItemized = false;\n        def.ShowGrandTotal = true;\n    }\n}"}
{"prompt":"Obtén todos los muros de un modelo de Revit vinculado que se cruzan con una caja de delimitación.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault();\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    BoundingBoxXYZ bbox = new BoundingBoxXYZ() { Min = new XYZ(0,0,0), Max = new XYZ(50,50,10) };\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(bbox.Min, bbox.Max));\n    var linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToElements();\n}"}
{"prompt":"Desune la geometría de dos elementos previamente unidos.","completion":"UIDocument uidoc = new UIDocument(doc);\nElement e1 = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId);\nElement e2 = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId);\nif (e1 != null && e2 != null && JoinGeometryUtils.AreElementsJoined(doc, e1, e2))\n{\n    JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n}"}
{"prompt":"Coloca una cota de elevación (spot elevation) en la cara superior de un suelo seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference faceRef = uidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara superior del suelo\");\nif(faceRef != null)\n{\n    XYZ pointOnFace = faceRef.GlobalPoint;\n    XYZ leaderEnd = pointOnFace + new XYZ(1,1,0);\n    doc.Create.NewSpotElevation(doc.ActiveView, faceRef, pointOnFace, leaderEnd, leaderEnd, true, true);\n}"}
{"prompt":"Verifica si una tubería está conectada en ambos extremos.","completion":"Pipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nif(pipe != null) {\n    bool isFullyConnected = pipe.ConnectorManager.UnusedConnectors.IsEmpty;\n    TaskDialog.Show(\"Conectividad\", \"La tubería está completamente conectada: \" + isFullyConnected);\n}"}
{"prompt":"Dentro del editor de familias, crea un nuevo plano de referencia vertical llamado 'Eje Central'.","completion":"// Este código se ejecuta en un documento de familia (famDoc)\nif(doc.IsFamilyDocument)\n{\n    XYZ start = new XYZ(0, -5, 0);\n    XYZ end = new XYZ(0, 5, 0);\n    XYZ normal = XYZ.BasisX;\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, doc.ActiveView);\n    rp.Name = \"Eje Central\";\n}"}
{"prompt":"Averigua quién es el propietario de un elemento seleccionado en un modelo compartido.","completion":"if(doc.IsWorkshared)\n{\n    UIDocument uidoc = new UIDocument(doc);\n    Element elem = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId);\n    if(elem != null)\n    {\n        WorksharingTooltipInfo info = WorksharingUtils.GetWorksharingTooltipInfo(doc, elem.Id);\n        TaskDialog.Show(\"Propietario\", \"El propietario es: \" + info.Owner);\n    }\n}"}
{"prompt":"Aísla temporalmente un elemento seleccionado en la vista activa.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToIsolate = uidoc.Selection.GetElementIds();\nif (idsToIsolate.Any())\n{\n    doc.ActiveView.IsolateElementsTemporary(idsToIsolate);\n}"}
{"prompt":"Encuentra el elemento anfitrión de una luminaria colocada en una cara.","completion":"FamilyInstance lightFixture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().FirstOrDefault(fi => fi.HostFace != null) as FamilyInstance;\nif (lightFixture != null)\n{\n    Reference hostFaceRef = lightFixture.HostFace;\n    Element host = doc.GetElement(hostFaceRef.ElementId);\n    TaskDialog.Show(\"Anfitrión\", \"El anfitrión es: \" + host.Name);\n}"}
{"prompt":"Crea un componente de detalle repetitivo a lo largo de una línea.","completion":"DetailComponentType dct = new FilteredElementCollector(doc).OfClass(typeof(DetailComponentType)).FirstOrDefault() as DetailComponentType;\nif (dct != null)\n{\n    Line path = Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0));\n    RepeatingDetailComponent.Create(doc, doc.ActiveView.Id, dct.Id, path);\n}"}
{"prompt":"Crea un elemento de Área a partir de una selección de líneas de contorno de área.","completion":"UIDocument uidoc = new UIDocument(doc);\nAreaScheme scheme = new FilteredElementCollector(doc).OfClass(typeof(AreaScheme)).FirstOrDefault() as AreaScheme;\nLevel level = doc.ActiveView.GenLevel;\nif(scheme != null && level != null)\n{\n    var boundaryLines = uidoc.Selection.PickElementsByCategory(BuiltInCategory.OST_AreaSchemeLines, \"Selecciona líneas de contorno de área\");\n    CurveArray curves = new CurveArray();\n    foreach(Element el in boundaryLines) curves.Append((el as ModelCurve).GeometryCurve);\n    doc.Create.NewAreaBoundaryLine(doc.ActiveView.SketchPlane, curves, doc.ActiveView);\n}"}
{"prompt":"Crea un nuevo panel en la cinta de opciones (Ribbon) llamado 'Mis Herramientas' con un botón.","completion":"// Este código se colocaría en el método OnStartup de una IExternalApplication\n// string panelName = \"Mis Herramientas\";\n// RibbonPanel ribbonPanel = application.CreateRibbonPanel(panelName);\n// string thisAssemblyPath = System.Reflection.Assembly.GetExecutingAssembly().Location;\n// PushButtonData buttonData = new PushButtonData(\"cmdMyButton\", \"Mi Botón\", thisAssemblyPath, \"MyNamespace.MyCommandClass\");\n// PushButton pushButton = ribbonPanel.AddItem(buttonData) as PushButton;"}
{"prompt":"Cambia el tipo de una losa existente por uno que contenga 'Concreto'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concreto\"));\nif(floorToChange != null && newType != null) floorToChange.FloorType = newType;"}
{"prompt":"Obtén todas las subcategorías de la categoría Muros.","completion":"Category wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategoryNameMap subcategories = wallCat.SubCategories;\nforeach(Category subcat in subcategories)\n{\n    // Procesar subcategoría 'subcat'\n}"}
{"prompt":"Crea un parámetro de proyecto de tipo 'URL' llamado 'Enlace a Especificaciones'.","completion":"string sharedParamFile = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamFile)) { /*...*/ }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = defFile.Groups.EnsureDefinitionGroup(\"Documentation\");\nExternalDefinition def = group.Definitions.Create(new ExternalDefinitionCreationOptions(\"Enlace a Especificaciones\", SpecTypeId.Url)) as ExternalDefinition;\n// ... el resto del binding ..."}
{"prompt":"Añade un punto a un PathOfTravel existente.","completion":"PathOfTravel pot = new FilteredElementCollector(doc).OfClass(typeof(PathOfTravel)).FirstOrDefault() as PathOfTravel;\nif(pot != null){\n    IList<XYZ> points = pot.GetPoints();\n    points.Insert(1, new XYZ(5,5,0));\n    pot.Update(points);\n}"}
{"prompt":"Crea una nueva vista de alzado (elevation) mirando al sur.","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nif(elevationVFT != null){\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0,-10,0), 10);\n    marker.CreateElevation(doc, doc.ActiveView.Id, 0);\n}"}
{"prompt":"Comprueba si la vista activa es una vista de plano.","completion":"bool isPlanView = doc.ActiveView.ViewType == ViewType.FloorPlan || doc.ActiveView.ViewType == ViewType.CeilingPlan || doc.ActiveView.ViewType == ViewType.EngineeringPlan;"}
{"prompt":"Exporta la geometría de un elemento a un archivo SAT.","completion":"UIDocument uidoc = new UIDocument(doc);\nElement elem = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId);\nif(elem != null){\n    Options opt = new Options();\n    GeometryElement geo = elem.get_Geometry(opt);\n    doc.Export(@\"C:\\Exports\\\", \"geometry.sat\", new List<ElementId>{elem.Id}, new SATExportOptions());\n}"}
{"prompt":"Obtén el tipo de sistema de una tubería seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nPipe pipe = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId) as Pipe;\nif(pipe != null){\n    PipingSystemType systemType = doc.GetElement(pipe.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId()) as PipingSystemType;\n    if(systemType != null) TaskDialog.Show(\"Sistema\", systemType.Name);\n}"}
{"prompt":"Crea un nuevo tipo de tubería con un material específico.","completion":"PipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nif(pipeTypeToDuplicate != null){\n    PipeType newType = pipeTypeToDuplicate.Duplicate(\"Tubería de Cobre\") as PipeType;\n    Material copper = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Copper\") as Material;\n    if(copper != null) newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM).Set(copper.Id);\n}"}
{"prompt":"Oculta un elemento seleccionado en la vista activa.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToHide = uidoc.Selection.GetElementIds();\nif(idsToHide.Any()) doc.ActiveView.HideElements(idsToHide);"}

{"prompt":"Crea un muro de 5 metros de largo y 3 metros de alto.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstElement() as WallType;\nLine line = Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\nWall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);"}
{"prompt":"Create a wall 5 meters long and 3 meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstElement() as WallType;\nLine line = Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\nWall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);"}
{"prompt":"Inserta una ventana de 1 metro de ancho y 1.2 metros de alto en la pared anterior.","completion":"FamilySymbol windowSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name.Contains(\"1m x 1.2m\"));\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif (windowSymbol != null && hostWall != null) {\n    if (!windowSymbol.IsActive) windowSymbol.Activate();\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    doc.Create.NewFamilyInstance(new XYZ(2.5, 0, 1.0), windowSymbol, hostWall, level, StructuralType.NonStructural);\n}"}
{"prompt":"Insert a window 1 meter wide and 1.2 meters high in the previous wall.","completion":"FamilySymbol windowSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name.Contains(\"1m x 1.2m\"));\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif (windowSymbol != null && hostWall != null) {\n    if (!windowSymbol.IsActive) windowSymbol.Activate();\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    doc.Create.NewFamilyInstance(new XYZ(2.5, 0, 1.0), windowSymbol, hostWall, level, StructuralType.NonStructural);\n}"}
{"prompt":"Crea una columna estructural en la posición X=10, Y=5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().First() as FamilySymbol;\nif (!columnSymbol.IsActive) columnSymbol.Activate();\ndoc.Create.NewFamilyInstance(new XYZ(10, 5, 0), columnSymbol, level, StructuralType.Column);"}
{"prompt":"Create a structural column at position X=10, Y=5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().First() as FamilySymbol;\nif (!columnSymbol.IsActive) columnSymbol.Activate();\ndoc.Create.NewFamilyInstance(new XYZ(10, 5, 0), columnSymbol, level, StructuralType.Column);"}
{"prompt":"Genera un piso rectangular de 10×8 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstElement() as FloorType;\nCurveLoop loop = new CurveLoop();\nloop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0)));\nloop.Append(Line.CreateBound(new XYZ(10,0,0), new XYZ(10,8,0)));\nloop.Append(Line.CreateBound(new XYZ(10,8,0), new XYZ(0,8,0)));\nloop.Append(Line.CreateBound(new XYZ(0,8,0), new XYZ(0,0,0)));\nFloor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);"}
{"prompt":"Generate a rectangular floor of 10x8 meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstElement() as FloorType;\nCurveLoop loop = new CurveLoop();\nloop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0)));\nloop.Append(Line.CreateBound(new XYZ(10,0,0), new XYZ(10,8,0)));\nloop.Append(Line.CreateBound(new XYZ(10,8,0), new XYZ(0,8,0)));\nloop.Append(Line.CreateBound(new XYZ(0,8,0), new XYZ(0,0,0)));\nFloor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);"}
{"prompt":"Crea un muro cortina de 6 metros de ancho y 4 metros de alto.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif (cwType != null) {\n    Line baseLine = Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Create a curtain wall 6 meters wide and 4 meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif (cwType != null) {\n    Line baseLine = Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Crea 8 ejes en sentido horizontal separados 10 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<8; i++){\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create 8 horizontal grids spaced 10 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<8; i++){\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea 4 ejes en sentido vertical separados 10 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<4; i++){\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create 4 vertical grids spaced 10 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<4; i++){\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea columnas en cada intersección de ejes.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nvar grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\nif (colSymbol != null && level != null && grids.Count > 1)\n{\n    if (!colSymbol.IsActive) colSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            var result = grids[i].Curve.Intersect(grids[j].Curve, out IntersectionResultArray results);\n            if (result == SetComparisonResult.Overlap && results != null)\n            {\n                foreach (IntersectionResult ir in results)\n                {\n                    doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Create columns at each grid intersection.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nvar grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\nif (colSymbol != null && level != null && grids.Count > 1)\n{\n    if (!colSymbol.IsActive) colSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            var result = grids[i].Curve.Intersect(grids[j].Curve, out IntersectionResultArray results);\n            if (result == SetComparisonResult.Overlap && results != null)\n            {\n                foreach (IntersectionResult ir in results)\n                {\n                    doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Crea vigas entre columnas horizontales.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nvar columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nif (beamSymbol != null && level != null)\n{\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Create beams between horizontal columns.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nvar columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nif (beamSymbol != null && level != null)\n{\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Acota la longitud del muro anterior.","completion":"View view = doc.ActiveView;\nWall wall = new FilteredElementCollector(doc, view.Id).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif (wall != null)\n{\n    ReferenceArray refs = new ReferenceArray();\n    refs.Append(wall.GetGeometryObjectFromReference(new Reference(wall)).GetEndPointReference(0));\n    refs.Append(wall.GetGeometryObjectFromReference(new Reference(wall)).GetEndPointReference(1));\n    Line wallLine = (wall.Location as LocationCurve).Curve as Line;\n    XYZ dimLinePoint = wallLine.GetEndPoint(0).Add(wallLine.Direction.Normalize().CrossProduct(XYZ.BasisZ));\n    Line dimLine = Line.CreateBound(dimLinePoint, dimLinePoint.Add(wallLine.Direction));\n    doc.Create.NewDimension(view, dimLine, refs);\n}"}
{"prompt":"Dimension the length of the previous wall.","completion":"View view = doc.ActiveView;\nWall wall = new FilteredElementCollector(doc, view.Id).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif (wall != null)\n{\n    ReferenceArray refs = new ReferenceArray();\n    refs.Append(wall.GetGeometryObjectFromReference(new Reference(wall)).GetEndPointReference(0));\n    refs.Append(wall.GetGeometryObjectFromReference(new Reference(wall)).GetEndPointReference(1));\n    Line wallLine = (wall.Location as LocationCurve).Curve as Line;\n    XYZ dimLinePoint = wallLine.GetEndPoint(0).Add(wallLine.Direction.Normalize().CrossProduct(XYZ.BasisZ));\n    Line dimLine = Line.CreateBound(dimLinePoint, dimLinePoint.Add(wallLine.Direction));\n    doc.Create.NewDimension(view, dimLine, refs);\n}"}
{"prompt":"Crea una puerta de 0.9m de ancho y 2.1m de alto en el muro existente.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol doorSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name.Contains(\"0.9\") && s.Name.Contains(\"2.1\"));\nif(hostWall != null && doorSymbol != null)\n{\n    if(!doorSymbol.IsActive) doorSymbol.Activate();\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    XYZ insertionPoint = (hostWall.Location as LocationCurve).Curve.Evaluate(0.5, true);\n    doc.Create.NewFamilyInstance(insertionPoint, doorSymbol, hostWall, level, StructuralType.NonStructural);\n}"}
{"prompt":"Create a door 0.9m wide and 2.1m high in the existing wall.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol doorSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name.Contains(\"0.9\") && s.Name.Contains(\"2.1\"));\nif(hostWall != null && doorSymbol != null)\n{\n    if(!doorSymbol.IsActive) doorSymbol.Activate();\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    XYZ insertionPoint = (hostWall.Location as LocationCurve).Curve.Evaluate(0.5, true);\n    doc.Create.NewFamilyInstance(insertionPoint, doorSymbol, hostWall, level, StructuralType.NonStructural);\n}"}
{"prompt":"Crea un sistema de vigas estructurales en forma de retícula de 5x5 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && beamSymbol != null)\n{\n    if (!beamSymbol.IsActive) beamSymbol.Activate();\n    double gridSize = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    for (int i = 0; i <= 5; i++)\n    {\n        Line horizontalLine = Line.CreateBound(new XYZ(0, i * gridSize, 0), new XYZ(5 * gridSize, i * gridSize, 0));\n        Line verticalLine = Line.CreateBound(new XYZ(i * gridSize, 0, 0), new XYZ(i * gridSize, 5 * gridSize, 0));\n        doc.Create.NewFamilyInstance(horizontalLine, beamSymbol, level, StructuralType.Beam);\n        doc.Create.NewFamilyInstance(verticalLine, beamSymbol, level, StructuralType.Beam);\n    }\n}"}
{"prompt":"Create a structural beam system in a 5x5 meter grid.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && beamSymbol != null)\n{\n    if (!beamSymbol.IsActive) beamSymbol.Activate();\n    double gridSize = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    for (int i = 0; i <= 5; i++)\n    {\n        Line horizontalLine = Line.CreateBound(new XYZ(0, i * gridSize, 0), new XYZ(5 * gridSize, i * gridSize, 0));\n        Line verticalLine = Line.CreateBound(new XYZ(i * gridSize, 0, 0), new XYZ(i * gridSize, 5 * gridSize, 0));\n        doc.Create.NewFamilyInstance(horizontalLine, beamSymbol, level, StructuralType.Beam);\n        doc.Create.NewFamilyInstance(verticalLine, beamSymbol, level, StructuralType.Beam);\n    }\n}"}
{"prompt":"Inserta una armadura (truss) de 6 metros entre columnas.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Trusses).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && trussSymbol != null)\n{\n    Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 10, 0));\n    doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Insert a 6-meter truss between columns.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Trusses).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && trussSymbol != null)\n{\n    Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 10, 0));\n    doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Crea un sistema de tuberías con un diámetro de 150mm.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0); XYZ p2=new XYZ(5,0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n    pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(150, UnitTypeId.Millimeters));\n}"}
{"prompt":"Create a piping system with a 150mm diameter.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0); XYZ p2=new XYZ(5,0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n    pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(150, UnitTypeId.Millimeters));\n}"}
{"prompt":"Añade un tag de texto a la columna más cercana al origen.","completion":"View activeView = doc.ActiveView;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => (c.Location as LocationPoint).Point.DistanceTo(XYZ.Zero)).FirstOrDefault();\nif (column != null)\n{\n    LocationPoint loc = column.Location as LocationPoint;\n    IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n}"}
{"prompt":"Add a text tag to the column closest to the origin.","completion":"View activeView = doc.ActiveView;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => (c.Location as LocationPoint).Point.DistanceTo(XYZ.Zero)).FirstOrDefault();\nif (column != null)\n{\n    LocationPoint loc = column.Location as LocationPoint;\n    IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n}"}
{"prompt":"Crea una escalera con 12 peldaños y altura total de 3 metros.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nif (bottomLevel != null && topLevel != null)\n{\n    using (StairsEditScope ses = new StairsEditScope(doc, \"Create Stairs\"))\n    {\n        ElementId stairsId = ses.Start(bottomLevel.Id, topLevel.Id);\n        Stairs stairs = doc.GetElement(stairsId) as Stairs;\n        stairs.DesiredRisersNumber = 12;\n        ses.Commit();\n    }\n}"}
{"prompt":"Create a stair with 12 steps and a total height of 3 meters.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nif (bottomLevel != null && topLevel != null)\n{\n    using (StairsEditScope ses = new StairsEditScope(doc, \"Create Stairs\"))\n    {\n        ElementId stairsId = ses.Start(bottomLevel.Id, topLevel.Id);\n        Stairs stairs = doc.GetElement(stairsId) as Stairs;\n        stairs.DesiredRisersNumber = 12;\n        ses.Commit();\n    }\n}"}
{"prompt":"Crea un barandal paralelo a la escalera anterior.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Stairs).FirstOrDefault() as Stairs;\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Create a railing parallel to the previous stair.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Stairs).FirstOrDefault() as Stairs;\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Coloca una pieza de mobiliario genérico en X=2,Y=3.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && furnitureSymbol != null)\n{\n    if (!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,3,0), furnitureSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Place a generic piece of furniture at X=2, Y=3.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && furnitureSymbol != null)\n{\n    if (!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,3,0), furnitureSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Crea una viga de cimentación (foundation) de 8 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, StructuralType.Footing);\n}"}
{"prompt":"Create an 8-meter foundation beam.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, StructuralType.Footing);\n}"}
{"prompt":"Añade estribos (rebars) a la columna anterior.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault(s => s.Name.Contains(\"Stirrup\")) as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif(barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, XYZ.BasisZ, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Add stirrups (rebars) to the previous column.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault(s => s.Name.Contains(\"Stirrup\")) as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif(barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, XYZ.BasisZ, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Crea un conducto (conduit) de 1 pulgada desde A hasta B.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nConduitType conduitType = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstOrDefault() as ConduitType;\nif (level != null && conduitType != null)\n{\n    XYZ start = new XYZ(0,0,3); XYZ end = new XYZ(5,0,3);\n    Conduit conduit = Conduit.Create(doc, conduitType.Id, start, end, level.Id);\n    conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Inches));\n}"}
{"prompt":"Create a 1-inch conduit from A to B.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nConduitType conduitType = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstOrDefault() as ConduitType;\nif (level != null && conduitType != null)\n{\n    XYZ start = new XYZ(0,0,3); XYZ end = new XYZ(5,0,3);\n    Conduit conduit = Conduit.Create(doc, conduitType.Id, start, end, level.Id);\n    conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Inches));\n}"}
{"prompt":"Instala un accesorio de conducto en el conducto anterior.","completion":"FamilySymbol fittingSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ConduitFitting).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nConduit conduit = new FilteredElementCollector(doc).OfClass(typeof(Conduit)).FirstOrDefault() as Conduit;\nif (fittingSymbol != null && conduit != null)\n{\n    if(!fittingSymbol.IsActive) fittingSymbol.Activate();\n    Connector unusedConnector = conduit.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (unusedConnector != null) doc.Create.NewFamilyInstance(unusedConnector, fittingSymbol);\n}"}
{"prompt":"Install a conduit fitting on the previous conduit.","completion":"FamilySymbol fittingSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ConduitFitting).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nConduit conduit = new FilteredElementCollector(doc).OfClass(typeof(Conduit)).FirstOrDefault() as Conduit;\nif (fittingSymbol != null && conduit != null)\n{\n    if(!fittingSymbol.IsActive) fittingSymbol.Activate();\n    Connector unusedConnector = conduit.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (unusedConnector != null) doc.Create.NewFamilyInstance(unusedConnector, fittingSymbol);\n}"}
{"prompt":"Genera un equipo eléctrico (panel) en X=1,Y=1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && panelSymbol != null)\n{\n    if(!panelSymbol.IsActive) panelSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(1,1,0), panelSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Generate an electrical panel at X=1, Y=1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && panelSymbol != null)\n{\n    if(!panelSymbol.IsActive) panelSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(1,1,0), panelSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Dibuja ducto de ventilación de 0.3x0.2 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nDuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).FirstOrDefault() as DuctType;\nMEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.SupplyAir) as MEPSystemType;\nif (level != null && ductType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,3); XYZ p2 = new XYZ(5,0,3);\n    Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM).Set(UnitUtils.ConvertToInternalUnits(0.3, UnitTypeId.Meters));\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM).Set(UnitUtils.ConvertToInternalUnits(0.2, UnitTypeId.Meters));\n}"}
{"prompt":"Draw a ventilation duct of 0.3x0.2 meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nDuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).FirstOrDefault() as DuctType;\nMEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.SupplyAir) as MEPSystemType;\nif (level != null && ductType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,3); XYZ p2 = new XYZ(5,0,3);\n    Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM).Set(UnitUtils.ConvertToInternalUnits(0.3, UnitTypeId.Meters));\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM).Set(UnitUtils.ConvertToInternalUnits(0.2, UnitTypeId.Meters));\n}"}
{"prompt":"Coloca un terminal de aire (air terminal) en el ducto.","completion":"FamilySymbol terminalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctTerminal).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nDuct duct = new FilteredElementCollector(doc).OfClass(typeof(Duct)).FirstOrDefault() as Duct;\nif (terminalSymbol != null && duct != null)\n{\n    if(!terminalSymbol.IsActive) terminalSymbol.Activate();\n    Connector unusedConnector = duct.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (unusedConnector != null) doc.Create.NewFamilyInstance(unusedConnector, terminalSymbol);\n}"}
{"prompt":"Place an air terminal on the duct.","completion":"FamilySymbol terminalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctTerminal).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nDuct duct = new FilteredElementCollector(doc).OfClass(typeof(Duct)).FirstOrDefault() as Duct;\nif (terminalSymbol != null && duct != null)\n{\n    if(!terminalSymbol.IsActive) terminalSymbol.Activate();\n    Connector unusedConnector = duct.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (unusedConnector != null) doc.Create.NewFamilyInstance(unusedConnector, terminalSymbol);\n}"}
{"prompt":"Importa topografía desde un archivo CSV.","completion":"TopographySurface.Create(doc, \"C:/temp/terrain.csv\", new CSVImportOptions());"}
{"prompt":"Import topography from a CSV file.","completion":"TopographySurface.Create(doc, \"C:/temp/terrain.csv\", new CSVImportOptions());"}
{"prompt":"Exporta el modelo a Navisworks NWC.","completion":"NavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(\"C:/exports/\", \"model.nwc\", options);"}
{"prompt":"Export the model to Navisworks NWC.","completion":"NavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(\"C:/exports/\", \"model.nwc\", options);"}
{"prompt":"Exporta las vistas a DWG.","completion":"ICollection<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).ToElementIds();\nif (viewsToExport.Any())\n{\n    doc.Export(\"C:/exports/dwg/\", \"views.dwg\", viewsToExport, new DWGExportOptions());\n}"}
{"prompt":"Export the views to DWG.","completion":"ICollection<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).ToElementIds();\nif (viewsToExport.Any())\n{\n    doc.Export(\"C:/exports/dwg/\", \"views.dwg\", viewsToExport, new DWGExportOptions());\n}"}
{"prompt":"Cambia el nombre de la familia de puertas a \"Puerta_TAD\".","completion":"var doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Where(f => f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors);\nforeach (Family fam in doorFamilies)\n{\n    fam.Name = \"Puerta_TAD\";\n}"}
{"prompt":"Change the name of the door family to \"Door_TAD\".","completion":"var doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Where(f => f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors);\nforeach (Family fam in doorFamilies)\n{\n    fam.Name = \"Door_TAD\";\n}"}
{"prompt":"Rellena el parámetro \"Material\" de todos los muros con \"Concreto\".","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concreto\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Fill the \"Material\" parameter of all walls with \"Concrete\".","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concrete\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Crea un nuevo tipo de muro llamado 'Muro_Genérico_25cm', definiendo su grosor en 0.25m y su función como estructural.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (wallTypeToDuplicate != null)\n{\n    WallType newWallType = wallTypeToDuplicate.Duplicate(\"Muro_Genérico_25cm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0)\n    {\n        int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n        cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n        cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(0.25, UnitTypeId.Meters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Create a new wall type named 'Generic_Wall_25cm', defining its thickness as 0.25m and its function as structural.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (wallTypeToDuplicate != null)\n{\n    WallType newWallType = wallTypeToDuplicate.Duplicate(\"Generic_Wall_25cm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0)\n    {\n        int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n        cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n        cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(0.25, UnitTypeId.Meters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Carga la familia 'Furniture_Desk.rfa' desde 'C:\\RevitFamilies\\' y luego inserta una instancia en el Nivel 1 en las coordenadas (5, 5, 0).","completion":"string familyPath = \"C:\\\\RevitFamilies\\\\Furniture_Desk.rfa\";\nFamily deskFamily;\nif(doc.LoadFamily(familyPath, out deskFamily))\n{\n    ISet<ElementId> symbolIds = deskFamily.GetFamilySymbolIds();\n    if(symbolIds.Any())\n    {\n        FamilySymbol deskSymbol = doc.GetElement(symbolIds.First()) as FamilySymbol;\n        Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n        if (deskSymbol != null && level1 != null)\n        {\n            if (!deskSymbol.IsActive) { deskSymbol.Activate(); }\n            doc.Create.NewFamilyInstance(new XYZ(5, 5, 0), deskSymbol, level1, StructuralType.NonStructural);\n        }\n    }\n}"}
{"prompt":"Load the 'Furniture_Desk.rfa' family from 'C:\\RevitFamilies\\' and then insert an instance at Level 1 at coordinates (5, 5, 0).","completion":"string familyPath = \"C:\\\\RevitFamilies\\\\Furniture_Desk.rfa\";\nFamily deskFamily;\nif(doc.LoadFamily(familyPath, out deskFamily))\n{\n    ISet<ElementId> symbolIds = deskFamily.GetFamilySymbolIds();\n    if(symbolIds.Any())\n    {\n        FamilySymbol deskSymbol = doc.GetElement(symbolIds.First()) as FamilySymbol;\n        Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n        if (deskSymbol != null && level1 != null)\n        {\n            if (!deskSymbol.IsActive) { deskSymbol.Activate(); }\n            doc.Create.NewFamilyInstance(new XYZ(5, 5, 0), deskSymbol, level1, StructuralType.NonStructural);\n        }\n    }\n}"}
{"prompt":"Crea un suelo para un data center con un acabado de piso técnico elevado a 60cm sobre el nivel.","completion":"FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name.Contains(\"Data Center\")) as Level;\nif(floorType != null && level != null)\n{\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { Line.CreateBound(new XYZ(0,0,0), new XYZ(20,0,0)), Line.CreateBound(new XYZ(20,0,0), new XYZ(20,15,0)), Line.CreateBound(new XYZ(20,15,0), new XYZ(0,15,0)), Line.CreateBound(new XYZ(0,15,0), new XYZ(0,0,0)) });\n    Floor raisedFloor = Floor.Create(doc, new List<CurveLoop>{profile}, floorType.Id, level.Id);\n    Parameter offsetParam = raisedFloor.get_Parameter(BuiltInParameter.FLOOR_HEIGHTABOVELEVEL_PARAM);\n    if(offsetParam != null) offsetParam.Set(UnitUtils.ConvertToInternalUnits(0.6, UnitTypeId.Meters));\n}"}
{"prompt":"Create a floor for a data center with a raised floor finish 60cm above the level.","completion":"FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name.Contains(\"Data Center\")) as Level;\nif(floorType != null && level != null)\n{\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { Line.CreateBound(new XYZ(0,0,0), new XYZ(20,0,0)), Line.CreateBound(new XYZ(20,0,0), new XYZ(20,15,0)), Line.CreateBound(new XYZ(20,15,0), new XYZ(0,15,0)), Line.CreateBound(new XYZ(0,15,0), new XYZ(0,0,0)) });\n    Floor raisedFloor = Floor.Create(doc, new List<CurveLoop>{profile}, floorType.Id, level.Id);\n    Parameter offsetParam = raisedFloor.get_Parameter(BuiltInParameter.FLOOR_HEIGHTABOVELEVEL_PARAM);\n    if(offsetParam != null) offsetParam.Set(UnitUtils.ConvertToInternalUnits(0.6, UnitTypeId.Meters));\n}"}
{"prompt":"Modela un plafón (techo) a una altura de 2.8 metros sobre el nivel del plano.","completion":"CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(ceilingType != null && level != null)\n{\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0)), Line.CreateBound(new XYZ(10,0,0), new XYZ(10,10,0)), Line.CreateBound(new XYZ(10,10,0), new XYZ(0,10,0)), Line.CreateBound(new XYZ(0,10,0), new XYZ(0,0,0)) });\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\n    Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n    if(heightParam != null) heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n}"}
{"prompt":"Model a ceiling at a height of 2.8 meters above the plane level.","completion":"CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(ceilingType != null && level != null)\n{\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0)), Line.CreateBound(new XYZ(10,0,0), new XYZ(10,10,0)), Line.CreateBound(new XYZ(10,10,0), new XYZ(0,10,0)), Line.CreateBound(new XYZ(0,10,0), new XYZ(0,0,0)) });\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\n    Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n    if(heightParam != null) heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n}"}
{"prompt":"Crea una nueva habitación en el Nivel 1 en la coordenada UV(10, 10).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    Room newRoom = doc.Create.NewRoom(level1, new UV(10, 10));\n}"}
{"prompt":"Create a new room on Level 1 at coordinate UV(10, 10).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    Room newRoom = doc.Create.NewRoom(level1, new UV(10, 10));\n}"}
{"prompt":"Crea un techo usando un contorno rectangular en 'Roof Level'.","completion":"Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Roof Level\") as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nif(roofLevel != null && roofType != null)\n{\n    CurveLoop roofProfile = CurveLoop.Create(new List<Curve> { Line.CreateBound(new XYZ(0,0,0), new XYZ(20,0,0)), Line.CreateBound(new XYZ(20,0,0), new XYZ(20,30,0)), Line.CreateBound(new XYZ(20,30,0), new XYZ(0,30,0)), Line.CreateBound(new XYZ(0,30,0), new XYZ(0,0,0)) });\n    ModelCurveArray footPrintToModelCurveMapping = new ModelCurveArray();\n    FootPrintRoof roof = doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out footPrintToModelCurveMapping);\n}"}
{"prompt":"Create a roof using a rectangular footprint on 'Roof Level'.","completion":"Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Roof Level\") as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nif(roofLevel != null && roofType != null)\n{\n    CurveLoop roofProfile = CurveLoop.Create(new List<Curve> { Line.CreateBound(new XYZ(0,0,0), new XYZ(20,0,0)), Line.CreateBound(new XYZ(20,0,0), new XYZ(20,30,0)), Line.CreateBound(new XYZ(20,30,0), new XYZ(0,30,0)), Line.CreateBound(new XYZ(0,30,0), new XYZ(0,0,0)) });\n    ModelCurveArray footPrintToModelCurveMapping = new ModelCurveArray();\n    FootPrintRoof roof = doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out footPrintToModelCurveMapping);\n}"}
{"prompt":"Coloca rociadores en un plafón en una retícula de 4x5 con espaciado de 3 metros.","completion":"FamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nCeiling ceilingHost = new FilteredElementCollector(doc).OfClass(typeof(Ceiling)).FirstOrDefault() as Ceiling;\nif (sprinklerSymbol != null && ceilingHost != null)\n{\n    if (!sprinklerSymbol.IsActive) { sprinklerSymbol.Activate(); }\n    double spacing = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    for(int i = 0; i < 4; i++)\n    {\n        for(int j = 0; j < 5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i * spacing, j * spacing, 0), sprinklerSymbol, ceilingHost);\n        }\n    }\n}"}
{"prompt":"Place sprinkler heads on a ceiling in a 4x5 grid with 3-meter spacing.","completion":"FamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nCeiling ceilingHost = new FilteredElementCollector(doc).OfClass(typeof(Ceiling)).FirstOrDefault() as Ceiling;\nif (sprinklerSymbol != null && ceilingHost != null)\n{\n    if (!sprinklerSymbol.IsActive) { sprinklerSymbol.Activate(); }\n    double spacing = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    for(int i = 0; i < 4; i++)\n    {\n        for(int j = 0; j < 5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i * spacing, j * spacing, 0), sprinklerSymbol, ceilingHost);\n        }\n    }\n}"}
{"prompt":"Coloca una toma de datos (data outlet) a 45cm del suelo en el primer muro que encuentres.","completion":"FamilySymbol dataOutletSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DataDevices).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall wallHost = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif (dataOutletSymbol != null && wallHost != null)\n{\n    if(!dataOutletSymbol.IsActive) {dataOutletSymbol.Activate();}\n    Level level = doc.GetElement(wallHost.LevelId) as Level;\n    double height = UnitUtils.ConvertToInternalUnits(450, UnitTypeId.Millimeters);\n    XYZ insertionPoint = (wallHost.Location as LocationCurve).Curve.Evaluate(0.5, true).Add(new XYZ(0,0,height));\n    doc.Create.NewFamilyInstance(insertionPoint, dataOutletSymbol, wallHost, level, StructuralType.NonStructural);\n}"}
{"prompt":"Place a data outlet 45cm above the floor on the first wall found.","completion":"FamilySymbol dataOutletSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DataDevices).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall wallHost = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif (dataOutletSymbol != null && wallHost != null)\n{\n    if(!dataOutletSymbol.IsActive) {dataOutletSymbol.Activate();}\n    Level level = doc.GetElement(wallHost.LevelId) as Level;\n    double height = UnitUtils.ConvertToInternalUnits(450, UnitTypeId.Millimeters);\n    XYZ insertionPoint = (wallHost.Location as LocationCurve).Curve.Evaluate(0.5, true).Add(new XYZ(0,0,height));\n    doc.Create.NewFamilyInstance(insertionPoint, dataOutletSymbol, wallHost, level, StructuralType.NonStructural);\n}"}
{"prompt":"Crea una nueva familia 'in-situ' para una pieza de equipo eléctrico.","completion":"ElementId categoryId = new ElementId(BuiltInCategory.OST_ElectricalEquipment);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(level != null) InPlaceElement.Create(doc, categoryId, level.Id);"}
{"prompt":"Create a new in-place family for a piece of electrical equipment.","completion":"ElementId categoryId = new ElementId(BuiltInCategory.OST_ElectricalEquipment);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(level != null) InPlaceElement.Create(doc, categoryId, level.Id);"}
{"prompt":"Encuentra todos los extremos de tubería desconectados en el proyecto.","completion":"var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>();\nList<Connector> unconnected = new List<Connector>();\nforeach(Pipe p in pipes)\n{\n    foreach(Connector c in p.ConnectorManager.Connectors)\n    {\n        if(!c.IsConnected) unconnected.Add(c);\n    }\n}"}
{"prompt":"Find all unconnected pipe ends in the project.","completion":"var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>();\nList<Connector> unconnected = new List<Connector>();\nforeach(Pipe p in pipes)\n{\n    foreach(Connector c in p.ConnectorManager.Connectors)\n    {\n        if(!c.IsConnected) unconnected.Add(c);\n    }\n}"}
{"prompt":"Aplica aislamiento de 50mm de espesor a todas las tuberías de agua helada.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType chilledWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Chilled Water\"));\nif(insulationType != null && chilledWaterSystem != null)\n{\n    var pipesToInsulate = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == chilledWaterSystem.Id);\n    double thickness = UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Millimeters);\n    foreach(Pipe pipe in pipesToInsulate)\n    {\n        PipeInsulation.Create(doc, pipe.Id, insulationType.Id, thickness);\n    }\n}"}
{"prompt":"Apply 50mm thick insulation to all chilled water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType chilledWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Chilled Water\"));\nif(insulationType != null && chilledWaterSystem != null)\n{\n    var pipesToInsulate = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == chilledWaterSystem.Id);\n    double thickness = UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Millimeters);\n    foreach(Pipe pipe in pipesToInsulate)\n    {\n        PipeInsulation.Create(doc, pipe.Id, insulationType.Id, thickness);\n    }\n}"}
{"prompt":"Etiqueta todas las puertas en la vista activa con su valor de 'Type Mark'.","completion":"View activeView = doc.ActiveView;\nvar doors = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType();\nforeach(Element door in doors)\n{\n    LocationPoint loc = door.Location as LocationPoint;\n    if (loc != null) IndependentTag.Create(doc, activeView.Id, new Reference(door), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n}"}
{"prompt":"Tag all doors in the active view with their 'Type Mark' value.","completion":"View activeView = doc.ActiveView;\nvar doors = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType();\nforeach(Element door in doors)\n{\n    LocationPoint loc = door.Location as LocationPoint;\n    if (loc != null) IndependentTag.Create(doc, activeView.Id, new Reference(door), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n}"}
{"prompt":"Crea una leyenda de tipos de muro, mostrando el nombre y una imagen de cada tipo.","completion":"ViewFamilyType legendVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Legend);\nif (legendVFT != null)\n{\n    ViewLegend legendView = ViewLegend.Create(doc, legendVFT.Id);\n    legendView.Name = \"Leyenda de Muros\";\n    var wallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElements();\n    double y_coord = 0.0;\n    foreach(WallType wt in wallTypes)\n    {\n        LegendComponent.Create(doc, legendView.Id, wt.Id, new XYZ(2, y_coord, 0));\n        TextNote.Create(doc, legendView.Id, new XYZ(0, y_coord, 0), wt.Name, TextNoteType.CreateDefault(doc).Id);\n        y_coord -= 5.0;\n    }\n}"}
{"prompt":"Create a wall type legend, showing the name and an image of each type.","completion":"ViewFamilyType legendVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Legend);\nif (legendVFT != null)\n{\n    ViewLegend legendView = ViewLegend.Create(doc, legendVFT.Id);\n    legendView.Name = \"Wall Legend\";\n    var wallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElements();\n    double y_coord = 0.0;\n    foreach(WallType wt in wallTypes)\n    {\n        LegendComponent.Create(doc, legendView.Id, wt.Id, new XYZ(2, y_coord, 0));\n        TextNote.Create(doc, legendView.Id, new XYZ(0, y_coord, 0), wt.Name, TextNoteType.CreateDefault(doc).Id);\n        y_coord -= 5.0;\n    }\n}"}
{"prompt":"Crea una dimensión lineal alineada con un muro seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nWall wall = doc.GetElement(wallRef) as Wall;\nif (wall != null)\n{\n    LocationCurve locCurve = wall.Location as LocationCurve;\n    Line wallLine = locCurve.Curve as Line;\n    ReferenceArray refArray = new ReferenceArray();\n    refArray.Append(wallLine.GetEndPointReference(0));\n    refArray.Append(wallLine.GetEndPointReference(1));\n    XYZ p1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ); XYZ p2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ);\n    Line dimLine = Line.CreateBound(p1, p2);\n    doc.Create.NewDimension(doc.ActiveView, dimLine, refArray);\n}"}
{"prompt":"Create a linear dimension aligned with a selected wall.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\nWall wall = doc.GetElement(wallRef) as Wall;\nif (wall != null)\n{\n    LocationCurve locCurve = wall.Location as LocationCurve;\n    Line wallLine = locCurve.Curve as Line;\n    ReferenceArray refArray = new ReferenceArray();\n    refArray.Append(wallLine.GetEndPointReference(0));\n    refArray.Append(wallLine.GetEndPointReference(1));\n    XYZ p1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ); XYZ p2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ);\n    Line dimLine = Line.CreateBound(p1, p2);\n    doc.Create.NewDimension(doc.ActiveView, dimLine, refArray);\n}"}
{"prompt":"Crea una cota de coordenada en la esquina de una zapata de cimentación.","completion":"FamilyInstance footing = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif(footing != null)\n{\n    Options opt = new Options() { ComputeReferences = true };\n    GeometryElement geo = footing.get_Geometry(opt);\n    Solid solid = geo.OfType<Solid>().FirstOrDefault(s => s.Volume > 0);\n    if(solid != null)\n    {\n        Edge edge = solid.Edges.get_Item(0);\n        Reference cornerRef = edge.GetEndPointReference(0);\n        XYZ pointOnFace = cornerRef.GlobalPoint;\n        doc.Create.NewSpotCoordinate(doc.ActiveView, cornerRef, pointOnFace + new XYZ(1,1,0), new XYZ(1,1,0), new XYZ(1,1,0), true);\n    }\n}"}
{"prompt":"Create a spot coordinate dimension on the corner of a foundation footing.","completion":"FamilyInstance footing = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif(footing != null)\n{\n    Options opt = new Options() { ComputeReferences = true };\n    GeometryElement geo = footing.get_Geometry(opt);\n    Solid solid = geo.OfType<Solid>().FirstOrDefault(s => s.Volume > 0);\n    if(solid != null)\n    {\n        Edge edge = solid.Edges.get_Item(0);\n        Reference cornerRef = edge.GetEndPointReference(0);\n        XYZ pointOnFace = cornerRef.GlobalPoint;\n        doc.Create.NewSpotCoordinate(doc.ActiveView, cornerRef, pointOnFace + new XYZ(1,1,0), new XYZ(1,1,0), new XYZ(1,1,0), true);\n    }\n}"}
{"prompt":"Crea una dimensión radial para un muro curvo.","completion":"Wall curvedWall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.Location is LocationCurve && (w.Location as LocationCurve).Curve is Arc);\nif (curvedWall != null)\n{\n    Arc arc = (curvedWall.Location as LocationCurve).Curve as Arc;\n    XYZ leaderEndPoint = arc.Center.Add(new XYZ(arc.Radius + 2, 0, 0));\n    doc.Create.NewRadialDimension(doc.ActiveView, new Reference(curvedWall), leaderEndPoint, arc.Radius);\n}"}
{"prompt":"Create a radial dimension for a curved wall.","completion":"Wall curvedWall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.Location is LocationCurve && (w.Location as LocationCurve).Curve is Arc);\nif (curvedWall != null)\n{\n    Arc arc = (curvedWall.Location as LocationCurve).Curve as Arc;\n    XYZ leaderEndPoint = arc.Center.Add(new XYZ(arc.Radius + 2, 0, 0));\n    doc.Create.NewRadialDimension(doc.ActiveView, new Reference(curvedWall), leaderEndPoint, arc.Radius);\n}"}
{"prompt":"Crea una nueva fase de proyecto llamada 'Fase 2 - Remodelación'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Fase 2 - Remodelación\";"}
{"prompt":"Create a new project phase named 'Phase 2 - Remodeling'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Phase 2 - Remodeling\";"}
{"prompt":"Asigna un grupo de muros seleccionados para ser demolidos en la fase 'Fase Existente'.","completion":"UIDocument uidoc = new UIDocument(doc);\nPhase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).FirstOrDefault(p => p.Name == \"Fase Existente\") as Phase;\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (demolishedPhase != null && selectedIds.Any())\n{\n    var selectedWalls = selectedIds.Select(id => doc.GetElement(id) as Wall).Where(w => w != null);\n    foreach(Wall wall in selectedWalls)\n    {\n        wall.DemolishedPhaseId = demolishedPhase.Id;\n    }\n}"}
{"prompt":"Assign a group of selected walls to be demolished in the 'Existing Phase'.","completion":"UIDocument uidoc = new UIDocument(doc);\nPhase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).FirstOrDefault(p => p.Name == \"Existing Phase\") as Phase;\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (demolishedPhase != null && selectedIds.Any())\n{\n    var selectedWalls = selectedIds.Select(id => doc.GetElement(id) as Wall).Where(w => w != null);\n    foreach(Wall wall in selectedWalls)\n    {\n        wall.DemolishedPhaseId = demolishedPhase.Id;\n    }\n}"}
{"prompt":"Asigna los elementos seleccionados a un workset llamado 'Facade', creándolo si no existe.","completion":"UIDocument uidoc = new UIDocument(doc);\nWorkset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Facade\") as Workset;\nif (workset == null) { workset = Workset.Create(doc, \"Facade\"); }\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif(workset != null && selectedIds.Any())\n{\n    WorksharingUtils.ChangeWorkset(doc, selectedIds, workset.Id);\n}"}
{"prompt":"Assign the selected elements to a workset named 'Facade', creating it if it doesn't exist.","completion":"UIDocument uidoc = new UIDocument(doc);\nWorkset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Facade\") as Workset;\nif (workset == null) { workset = Workset.Create(doc, \"Facade\"); }\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif(workset != null && selectedIds.Any())\n{\n    WorksharingUtils.ChangeWorkset(doc, selectedIds, workset.Id);\n}"}
{"prompt":"Crea una nueva revisión y aplícala a la hoja activa.","completion":"Revision rev = Revision.Create(doc);\nrev.Description = \"Issued for Construction\";\nrev.RevisionDate = DateTime.Now.ToString(\"yyyy-MM-dd\");\nrev.IssuedBy = \"BIM Department\";\nViewSheet sheet = doc.ActiveView as ViewSheet;\nif (sheet != null)\n{\n    ICollection<ElementId> revisions = sheet.GetAllRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}
{"prompt":"Create a new revision and apply it to the active sheet.","completion":"Revision rev = Revision.Create(doc);\nrev.Description = \"Issued for Construction\";\nrev.RevisionDate = DateTime.Now.ToString(\"yyyy-MM-dd\");\nrev.IssuedBy = \"BIM Department\";\nViewSheet sheet = doc.ActiveView as ViewSheet;\nif (sheet != null)\n{\n    ICollection<ElementId> revisions = sheet.GetAllRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}
{"prompt":"Crea un parámetro de proyecto de tipo texto, llamado 'Clasificación de Espacio' y aplícalo a la categoría de habitaciones.","completion":"string sharedParamsFile = doc.Application.SharedParametersFilename;\nif(string.IsNullOrEmpty(sharedParamsFile)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\shared_params.txt\"; }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = defFile.Groups.Create(\"CustomParameters\");\nExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(\"Clasificación de Espacio\", SpecTypeId.String.Text);\nDefinition def = group.Definitions.Create(options);\nCategory roomCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Rooms);\nCategorySet catSet = doc.Application.Create.NewCategorySet();\ncatSet.Insert(roomCat);\nInstanceBinding binding = doc.Application.Create.NewInstanceBinding(catSet);\ndoc.ParameterBindings.Insert(def, binding, BuiltInParameterGroup.PG_IDENTITY_DATA);"}
{"prompt":"Create a text project parameter named 'Space Classification' and apply it to the rooms category.","completion":"string sharedParamsFile = doc.Application.SharedParametersFilename;\nif(string.IsNullOrEmpty(sharedParamsFile)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\shared_params.txt\"; }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = defFile.Groups.Create(\"CustomParameters\");\nExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(\"Space Classification\", SpecTypeId.String.Text);\nDefinition def = group.Definitions.Create(options);\nCategory roomCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Rooms);\nCategorySet catSet = doc.Application.Create.NewCategorySet();\ncatSet.Insert(roomCat);\nInstanceBinding binding = doc.Application.Create.NewInstanceBinding(catSet);\ndoc.ParameterBindings.Insert(def, binding, BuiltInParameterGroup.PG_IDENTITY_DATA);"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 1 a 'Clasificación Fuego - 90 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    var doors = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id);\n    foreach(FamilyInstance door in doors)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if(commentsParam != null) commentsParam.Set(\"Clasificación Fuego - 90 min\");\n    }\n}"}
{"prompt":"Set the 'Comments' parameter of all doors on Level 1 to 'Fire Rating - 90 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    var doors = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id);\n    foreach(FamilyInstance door in doors)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if(commentsParam != null) commentsParam.Set(\"Fire Rating - 90 min\");\n    }\n}"}
{"prompt":"Exporta cada tabla de planificación a un archivo CSV individual en un directorio especificado.","completion":"string exportPath = @\"C:\\RevitExports\\\";\nif(!Directory.Exists(exportPath)) Directory.CreateDirectory(exportPath);\nvar schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => !vs.IsTemplate);\nViewScheduleExportOptions options = new ViewScheduleExportOptions();\noptions.FieldDelimiter = \",\";\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Export(exportPath, schedule.Name + \".csv\", options);\n}"}
{"prompt":"Export each schedule to an individual CSV file in a specified directory.","completion":"string exportPath = @\"C:\\RevitExports\\\";\nif(!Directory.Exists(exportPath)) Directory.CreateDirectory(exportPath);\nvar schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => !vs.IsTemplate);\nViewScheduleExportOptions options = new ViewScheduleExportOptions();\noptions.FieldDelimiter = \",\";\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Export(exportPath, schedule.Name + \".csv\", options);\n}"}
{"prompt":"Exporta el modelo a formato IFC 4 para coordinación.","completion":"IFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4;\ndoc.Export(@\"C:\\RevitExports\\\", \"Model-For-Coordination.ifc\", options);"}
{"prompt":"Export the model to IFC 4 format for coordination.","completion":"IFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4;\ndoc.Export(@\"C:\\RevitExports\\\", \"Model-For-Coordination.ifc\", options);"}
{"prompt":"Importa un archivo DWG como un vínculo en la vista activa para usarlo como referencia.","completion":"string filePath = @\"C:\\CAD_Files\\Base_Plan.dwg\";\nif(File.Exists(filePath))\n{\n    DWGImportOptions options = new DWGImportOptions();\n    options.ColorMode = ImportColorMode.Preserved;\n    ElementId linkedFileId;\n    doc.Link(filePath, options, doc.ActiveView, out linkedFileId);\n}"}
{"prompt":"Import a DWG file as a link into the active view to use as a reference.","completion":"string filePath = @\"C:\\CAD_Files\\Base_Plan.dwg\";\nif(File.Exists(filePath))\n{\n    DWGImportOptions options = new DWGImportOptions();\n    options.ColorMode = ImportColorMode.Preserved;\n    ElementId linkedFileId;\n    doc.Link(filePath, options, doc.ActiveView, out linkedFileId);\n}"}
{"prompt":"Exporta todas las hojas de un conjunto llamado 'Conjunto Arquitectónico' a un único PDF combinado.","completion":"ViewSheetSet sheetSet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheetSet)).FirstOrDefault(ss => ss.Name == \"Conjunto Arquitectónico\") as ViewSheetSet;\nif(sheetSet != null)\n{\n    PDFExportOptions options = new PDFExportOptions();\n    options.Combine = true;\n    options.FileName = \"ConjuntoArquitectonico\";\n    List<ElementId> sheetIds = sheetSet.Views.Cast<ViewSheet>().Select(s => s.Id).ToList();\n    if(sheetIds.Any()) doc.Export(@\"C:\\RevitExports\\\", sheetIds, options);\n}"}
{"prompt":"Export all sheets in a set named 'Architectural Set' to a single combined PDF.","completion":"ViewSheetSet sheetSet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheetSet)).FirstOrDefault(ss => ss.Name == \"Architectural Set\") as ViewSheetSet;\nif(sheetSet != null)\n{\n    PDFExportOptions options = new PDFExportOptions();\n    options.Combine = true;\n    options.FileName = \"ArchitecturalSet\";\n    List<ElementId> sheetIds = sheetSet.Views.Cast<ViewSheet>().Select(s => s.Id).ToList();\n    if(sheetIds.Any()) doc.Export(@\"C:\\RevitExports\\\", sheetIds, options);\n}"}
{"prompt":"Fija un elemento seleccionado para evitar su modificación accidental.","completion":"UIDocument uidoc = new UIDocument(doc);\nElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\nif (selectedId != null && selectedId != ElementId.InvalidElementId)\n{\n    Element elementToPin = doc.GetElement(selectedId);\n    if (elementToPin != null && !elementToPin.Pinned)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}
{"prompt":"Pin a selected element to prevent accidental modification.","completion":"UIDocument uidoc = new UIDocument(doc);\nElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\nif (selectedId != null && selectedId != ElementId.InvalidElementId)\n{\n    Element elementToPin = doc.GetElement(selectedId);\n    if (elementToPin != null && !elementToPin.Pinned)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}
{"prompt":"Elimina todas las líneas de detalle de la vista activa.","completion":"ICollection<ElementId> detailLines = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(DetailLine)).ToElementIds();\nif(detailLines.Any())\n{\n    doc.Delete(detailLines);\n}"}
{"prompt":"Delete all detail lines from the active view.","completion":"ICollection<ElementId> detailLines = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(DetailLine)).ToElementIds();\nif(detailLines.Any())\n{\n    doc.Delete(detailLines);\n}"}
{"prompt":"Crea una 'Caja de Referencia' que abarque el 'Bloque A' del edificio.","completion":"BoundingBoxXYZ scopeBoxVolume = new BoundingBoxXYZ();\nscopeBoxVolume.Min = new XYZ(0,0,0);\nscopeBoxVolume.Max = new XYZ(50, 40, 20);\nView3D viewForBox = new FilteredElementCollector(doc).OfClass(typeof(View3D)).FirstOrDefault() as View3D;\nif (viewForBox != null) {\n    ScopeBox box = ScopeBox.Create(doc, scopeBoxVolume);\n    box.Name = \"Bloque A\";\n    box.Views.Insert(viewForBox);\n}"}
{"prompt":"Create a 'Scope Box' that encompasses 'Block A' of the building.","completion":"BoundingBoxXYZ scopeBoxVolume = new BoundingBoxXYZ();\nscopeBoxVolume.Min = new XYZ(0,0,0);\nscopeBoxVolume.Max = new XYZ(50, 40, 20);\nView3D viewForBox = new FilteredElementCollector(doc).OfClass(typeof(View3D)).FirstOrDefault() as View3D;\nif (viewForBox != null) {\n    ScopeBox box = ScopeBox.Create(doc, scopeBoxVolume);\n    box.Name = \"Block A\";\n    box.Views.Insert(viewForBox);\n}"}
{"prompt":"Une la geometría de una columna estructural y un suelo que se intersectan.","completion":"Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\nif(column != null && floor != null && !JoinGeometryUtils.AreElementsJoined(doc, column, floor))\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}
{"prompt":"Join the geometry of a structural column and a floor that intersect.","completion":"Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\nif(column != null && floor != null && !JoinGeometryUtils.AreElementsJoined(doc, column, floor))\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}
{"prompt":"Ajusta la rotación del norte de proyecto a 30 grados en sentido horario.","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsSurveyPoint);\nif (projectBasePoint != null)\n{\n    double angle = -30 * Math.PI / 180.0; // Negativo para sentido horario\n    ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, Line.CreateBound(projectBasePoint.Position, projectBasePoint.Position + XYZ.BasisZ), angle);\n}"}
{"prompt":"Adjust the project north rotation 30 degrees clockwise.","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsSurveyPoint);\nif (projectBasePoint != null)\n{\n    double angle = -30 * Math.PI / 180.0; // Negative for clockwise\n    ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, Line.CreateBound(projectBasePoint.Position, projectBasePoint.Position + XYZ.BasisZ), angle);\n}"}
{"prompt":"Crea un barrido de muro 'in-situ' a lo largo de un muro.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallSweepType sweepType = new FilteredElementCollector(doc).OfClass(typeof(WallSweepType)).FirstOrDefault() as WallSweepType;\nif (wall != null && sweepType != null)\n{\n    WallSweepInfo info = new WallSweepInfo(true, WallSweepType.Sweep);\n    WallSweep.Create(doc, wall.Id, sweepType.Id, info);\n}"}
{"prompt":"Create an in-place wall sweep along a wall.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallSweepType sweepType = new FilteredElementCollector(doc).OfClass(typeof(WallSweepType)).FirstOrDefault() as WallSweepType;\nif (wall != null && sweepType != null)\n{\n    WallSweepInfo info = new WallSweepInfo(true, WallSweepType.Sweep);\n    WallSweep.Create(doc, wall.Id, sweepType.Id, info);\n}"}
{"prompt":"Asigna un acabado de 'Pintura Blanca' a la cara interior de los muros perimetrales.","completion":"Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Pintura Blanca\") as Material;\nvar exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior);\nif (paintMaterial != null)\n{\n    foreach (Wall w in exteriorWalls)\n    {\n        Face interiorFace = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior).FirstOrDefault();\n        if (interiorFace != null)\n        {\n            doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n        }\n    }\n}"}
{"prompt":"Assign a 'White Paint' finish to the interior face of the perimeter walls.","completion":"Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"White Paint\") as Material;\nvar exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior);\nif (paintMaterial != null)\n{\n    foreach (Wall w in exteriorWalls)\n    {\n        Face interiorFace = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior).FirstOrDefault();\n        if (interiorFace != null)\n        {\n            doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n        }\n    }\n}"}
{"prompt":"Inserta una ventana de tipo '1m x 1.2m' en un muro existente.","completion":"FamilySymbol windowSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault(fs => fs.Name.Contains(\"1m x 1.2m\")) as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif (windowSymbol != null && hostWall != null)\n{\n    if (!windowSymbol.IsActive) windowSymbol.Activate();\n    Level lvl = doc.GetElement(hostWall.LevelId) as Level;\n    XYZ pt = (hostWall.Location as LocationCurve).Curve.Evaluate(0.5, true);\n    doc.Create.NewFamilyInstance(pt, windowSymbol, hostWall, lvl, StructuralType.NonStructural);\n}"}
{"prompt":"Insert a '1m x 1.2m' type window into an existing wall.","completion":"FamilySymbol windowSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault(fs => fs.Name.Contains(\"1m x 1.2m\")) as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif (windowSymbol != null && hostWall != null)\n{\n    if (!windowSymbol.IsActive) windowSymbol.Activate();\n    Level lvl = doc.GetElement(hostWall.LevelId) as Level;\n    XYZ pt = (hostWall.Location as LocationCurve).Curve.Evaluate(0.5, true);\n    doc.Create.NewFamilyInstance(pt, windowSymbol, hostWall, lvl, StructuralType.NonStructural);\n}"}
{"prompt":"Crea una columna estructural en las coordenadas (10, 5, 0) sobre el Nivel 1.","completion":"FamilySymbol colSym = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (colSym != null && lvl1 != null)\n{\n    if (!colSym.IsActive) colSym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10,5,0), colSym, lvl1, StructuralType.Column);\n}"}
{"prompt":"Create a structural column at coordinates (10, 5, 0) on Level 1.","completion":"FamilySymbol colSym = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (colSym != null && lvl1 != null)\n{\n    if (!colSym.IsActive) colSym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10,5,0), colSym, lvl1, StructuralType.Column);\n}"}
{"prompt":"Genera un suelo rectangular de 10x8 metros.","completion":"FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault();\nLevel lvl = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif (floorType != null && lvl != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double depth = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,depth,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,depth,0), new XYZ(0,depth,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,depth,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop>{loop}, floorType.Id, lvl.Id);\n}"}
{"prompt":"Generate a 10x8 meter rectangular floor.","completion":"FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault();\nLevel lvl = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif (floorType != null && lvl != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double depth = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,depth,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,depth,0), new XYZ(0,depth,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,depth,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop>{loop}, floorType.Id, lvl.Id);\n}"}
{"prompt":"Crea cuatro ejes verticales espaciados cada 10 metros.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 4; i++)\n{\n    Line ln = Line.CreateBound(new XYZ(i * spacing,0,0), new XYZ(i * spacing,40,0));\n    Grid.Create(doc, ln);\n}"}
{"prompt":"Create four vertical grids spaced 10 meters apart.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 4; i++)\n{\n    Line ln = Line.CreateBound(new XYZ(i * spacing,0,0), new XYZ(i * spacing,40,0));\n    Grid.Create(doc, ln);\n}"}
{"prompt":"Coloca columnas estructurales en cada intersección de la rejilla.","completion":"FamilySymbol colS = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel lvl = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nvar grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\nif (colS != null && lvl != null && grids.Count > 1)\n{\n    if (!colS.IsActive) colS.Activate();\n    for(int i=0;i<grids.Count;i++)\n    {\n        for(int j=i+1;j<grids.Count;j++)\n        {\n            SetComparisonResult res = grids[i].Curve.Intersect(grids[j].Curve, out IntersectionResultArray ints);\n            if(res == SetComparisonResult.Overlap && ints!=null)\n            {\n                foreach(IntersectionResult ir in ints) doc.Create.NewFamilyInstance(ir.XYZPoint, colS, lvl, StructuralType.Column);\n            }\n        }\n    }\n}"}
{"prompt":"Place structural columns at each grid intersection.","completion":"FamilySymbol colS = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel lvl = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nvar grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\nif (colS != null && lvl != null && grids.Count > 1)\n{\n    if (!colS.IsActive) colS.Activate();\n    for(int i=0;i<grids.Count;i++)\n    {\n        for(int j=i+1;j<grids.Count;j++)\n        {\n            SetComparisonResult res = grids[i].Curve.Intersect(grids[j].Curve, out IntersectionResultArray ints);\n            if(res == SetComparisonResult.Overlap && ints!=null)\n            {\n                foreach(IntersectionResult ir in ints) doc.Create.NewFamilyInstance(ir.XYZPoint, colS, lvl, StructuralType.Column);\n            }\n        }\n    }\n}"}
{"prompt":"Crea una puerta con la marca de tipo 'D-01' en un muro.","completion":"FamilySymbol doorSym = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.get_Parameter(BuiltInParameter.ALL_MODEL_TYPE_MARK).AsString() == \"D-01\");\nWall w = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif (doorSym!=null && w!=null)\n{\n    if (!doorSym.IsActive) doorSym.Activate();\n    Level lvl = doc.GetElement(w.LevelId) as Level;\n    XYZ pt = (w.Location as LocationCurve).Curve.Evaluate(0.5, true);\n    doc.Create.NewFamilyInstance(pt, doorSym, w, lvl, StructuralType.NonStructural);\n}"}
{"prompt":"Create a door with the type mark 'D-01' in a wall.","completion":"FamilySymbol doorSym = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.get_Parameter(BuiltInParameter.ALL_MODEL_TYPE_MARK).AsString() == \"D-01\");\nWall w = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif (doorSym!=null && w!=null)\n{\n    if (!doorSym.IsActive) doorSym.Activate();\n    Level lvl = doc.GetElement(w.LevelId) as Level;\n    XYZ pt = (w.Location as LocationCurve).Curve.Evaluate(0.5, true);\n    doc.Create.NewFamilyInstance(pt, doorSym, w, lvl, StructuralType.NonStructural);\n}"}
{"prompt":"Crea una escalera con 12 peldaños entre el Nivel 1 y el Nivel 2.","completion":"Level l1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l=>l.Name==\"Nivel 1\") as Level;\nLevel l2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l=>l.Name==\"Nivel 2\") as Level;\nif(l1!=null && l2!=null)\n{\n    using(StairsEditScope ses=new StairsEditScope(doc,\"Crear Escalera\"))\n    {\n        ElementId sid = ses.Start(l1.Id, l2.Id);\n        Stairs.CreateSketchedLanding(doc, sid, new CurveLoop(), 0);\n        StairsRun.CreateSketchedRun(doc, sid, l1.Elevation, 12, \"Center\");\n        ses.Commit(new StairsEditScopeFailuresPreprocessor());\n    }\n}"}
{"prompt":"Create a 12-step stair between Level 1 and Level 2.","completion":"Level l1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l=>l.Name==\"Level 1\") as Level;\nLevel l2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l=>l.Name==\"Nivel 2\") as Level;\nif(l1!=null && l2!=null)\n{\n    using(StairsEditScope ses=new StairsEditScope(doc,\"Create Stair\"))\n    {\n        ElementId sid = ses.Start(l1.Id, l2.Id);\n        Stairs.CreateSketchedLanding(doc, sid, new CurveLoop(), 0);\n        StairsRun.CreateSketchedRun(doc, sid, l1.Elevation, 12, \"Center\");\n        ses.Commit(new StairsEditScopeFailuresPreprocessor());\n    }\n}"}
{"prompt":"Genera un barandal en el borde de una escalera existente.","completion":"RailingType rt = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs st0 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Stairs).FirstOrDefault() as Stairs;\nif(rt!=null && st0!=null)\n{\n    Railing.Create(doc, st0.Id, rt.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Generate a railing on the edge of an existing stair.","completion":"RailingType rt = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs st0 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Stairs).FirstOrDefault() as Stairs;\nif(rt!=null && st0!=null)\n{\n    Railing.Create(doc, st0.Id, rt.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Dibuja un conducto de ventilación de 300x200 mm.","completion":"DuctType dt = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).FirstOrDefault(d=>d.Shape==ConnectorProfileType.Rectangular) as DuctType;\nMEPSystemType mst = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s=>s.SystemClassification==MEPSystemClassification.SupplyAir);\nLevel ly = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(dt!=null && mst!=null && ly!=null)\n{\n    XYZ s=new XYZ(0,0,3), e=new XYZ(5,0,3);\n    Duct duct = Duct.Create(doc, mst.Id, dt.Id, ly.Id, s, e);\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM).Set(UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM).Set(UnitUtils.ConvertToInternalUnits(200, UnitTypeId.Millimeters));\n}"}
{"prompt":"Draw a 300x200 mm ventilation duct.","completion":"DuctType dt = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).FirstOrDefault(d=>d.Shape==ConnectorProfileType.Rectangular) as DuctType;\nMEPSystemType mst = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s=>s.SystemClassification==MEPSystemClassification.SupplyAir);\nLevel ly = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(dt!=null && mst!=null && ly!=null)\n{\n    XYZ s=new XYZ(0,0,3), e=new XYZ(5,0,3);\n    Duct duct = Duct.Create(doc, mst.Id, dt.Id, ly.Id, s, e);\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM).Set(UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM).Set(UnitUtils.ConvertToInternalUnits(200, UnitTypeId.Millimeters));\n}"}
{"prompt":"Obtén el elemento anfitrión de una instancia de ventana.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n    if(hostElement != null) TaskDialog.Show(\"Anfitrión\", \"El anfitrión es: \" + hostElement.Name);\n}"}
{"prompt":"Get the host element of a window instance.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n    if(hostElement != null) TaskDialog.Show(\"Host Element\", \"The host is: \" + hostElement.Name);\n}"}
{"prompt":"Crea una forma de masa 'in-situ' mediante una extrusión por revolución.","completion":"using (var massTransaction = new Transaction(doc, \"Create Mass Revolution\"))\n{\n    massTransaction.Start();\n    InPlaceElement mass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    SketchPlane sp = SketchPlane.Create(doc, plane);\n    Line axis = Line.CreateBound(new XYZ(0,0,0), new XYZ(0,0,5));\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(1,0,0), new XYZ(2,0,0)));\n    profile.Append(Arc.Create(new XYZ(2,0,0), new XYZ(2,0,1), new XYZ(1.5,0,0.5)));\n    profile.Append(Line.CreateBound(new XYZ(2,0,1), new XYZ(1,0,1)));\n    profile.Append(Line.CreateBound(new XYZ(1,0,1), new XYZ(1,0,0)));\n    doc.FamilyCreate.NewRevolution(true, new List<CurveLoop>{ profile }, sp, axis, 0, 2*Math.PI);\n    massTransaction.Commit();\n}"}
{"prompt":"Create an in-place mass form using a revolution extrusion.","completion":"using (var massTransaction = new Transaction(doc, \"Create Mass Revolution\"))\n{\n    massTransaction.Start();\n    InPlaceElement mass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    SketchPlane sp = SketchPlane.Create(doc, plane);\n    Line axis = Line.CreateBound(new XYZ(0,0,0), new XYZ(0,0,5));\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(1,0,0), new XYZ(2,0,0)));\n    profile.Append(Arc.Create(new XYZ(2,0,0), new XYZ(2,0,1), new XYZ(1.5,0,0.5)));\n    profile.Append(Line.CreateBound(new XYZ(2,0,1), new XYZ(1,0,1)));\n    profile.Append(Line.CreateBound(new XYZ(1,0,1), new XYZ(1,0,0)));\n    doc.FamilyCreate.NewRevolution(true, new List<CurveLoop>{ profile }, sp, axis, 0, 2*Math.PI);\n    massTransaction.Commit();\n}"}
{"prompt":"Obtén el espacio MEP asociado a una habitación específica por su nombre.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 101\") as Room;\nif (room != null)\n{\n    MEPSpace space = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_MEPSpaces).Cast<MEPSpace>().FirstOrDefault(s => s.Room.Id == room.Id);\n    if (space != null) TaskDialog.Show(\"Espacio MEP\", \"El espacio es: \" + space.Name);\n}"}
{"prompt":"Get the MEP space associated with a specific room by its name.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 101\") as Room;\nif (room != null)\n{\n    MEPSpace space = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_MEPSpaces).Cast<MEPSpace>().FirstOrDefault(s => s.Room.Id == room.Id);\n    if (space != null) TaskDialog.Show(\"MEP Space\", \"The space is: \" + space.Name);\n}"}
{"prompt":"Crea un suelo siguiendo el contorno de un conjunto de muros perimetrales seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selIds = uidoc.Selection.GetElementIds();\nvar walls = selIds.Select(id => doc.GetElement(id)).OfType<Wall>().ToList();\nif (walls.Count > 1)\n{\n    CurveLoop loop = new CurveLoop();\n    foreach (Wall w in walls)\n    {\n        LocationCurve lc = w.Location as LocationCurve;\n        if (lc != null) loop.Append(lc.Curve);\n    }\n    FloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n    Level lvl = doc.GetElement(walls[0].LevelId) as Level;\n    Floor.Create(doc, new List<CurveLoop>{loop}, ft.Id, lvl.Id);\n}"}
{"prompt":"Create a floor following the contour of a set of selected perimeter walls.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selIds = uidoc.Selection.GetElementIds();\nvar walls = selIds.Select(id => doc.GetElement(id)).OfType<Wall>().ToList();\nif (walls.Count > 1)\n{\n    CurveLoop loop = new CurveLoop();\n    foreach (Wall w in walls)\n    {\n        LocationCurve lc = w.Location as LocationCurve;\n        if (lc != null) loop.Append(lc.Curve);\n    }\n    FloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n    Level lvl = doc.GetElement(walls[0].LevelId) as Level;\n    Floor.Create(doc, new List<CurveLoop>{loop}, ft.Id, lvl.Id);\n}"}
{"prompt":"Calcula la longitud total de todos los conductos rectangulares en un sistema HVAC específico.","completion":"MEPSystem sys = new FilteredElementCollector(doc).OfClass(typeof(MEPSystem)).FirstOrDefault(s => s.Name == \"Supply Air 1\") as MEPSystem;\nif (sys != null)\n{\n    double totalLength = 0.0;\n    var ducts = sys.DuctNetwork.OfType<Duct>();\n    foreach (Duct d in ducts)\n    {\n        if (d.DuctType.Shape == ConnectorProfileType.Rectangular)\n        {\n            totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n        }\n    }\n    TaskDialog.Show(\"Longitud Total\", \"La longitud total es: \" + UnitUtils.ConvertFromInternalUnits(totalLength, UnitTypeId.Meters) + \" m\");\n}"}
{"prompt":"Calculate the total length of all rectangular ducts in a specific HVAC system.","completion":"MEPSystem sys = new FilteredElementCollector(doc).OfClass(typeof(MEPSystem)).FirstOrDefault(s => s.Name == \"Supply Air 1\") as MEPSystem;\nif (sys != null)\n{\n    double totalLength = 0.0;\n    var ducts = sys.DuctNetwork.OfType<Duct>();\n    foreach (Duct d in ducts)\n    {\n        if (d.DuctType.Shape == ConnectorProfileType.Rectangular)\n        {\n            totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n        }\n    }\n    TaskDialog.Show(\"Total Length\", \"The total length is: \" + UnitUtils.ConvertFromInternalUnits(totalLength, UnitTypeId.Meters) + \" m\");\n}"}
{"prompt":"Añade una nueva línea de rejilla horizontal a un muro cortina existente.","completion":"Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.CurtainGrid != null) as Wall;\nif (cw != null)\n{\n    CurtainGrid cg = cw.CurtainGrid;\n    cg.AddGridLine(false, new XYZ(0,0, UnitUtils.ConvertToInternalUnits(1.5, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Add a new horizontal grid line to an existing curtain wall.","completion":"Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.CurtainGrid != null) as Wall;\nif (cw != null)\n{\n    CurtainGrid cg = cw.CurtainGrid;\n    cg.AddGridLine(false, new XYZ(0,0, UnitUtils.ConvertToInternalUnits(1.5, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Alterna la visibilidad de un modelo de Revit vinculado específico en la vista activa.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault(li => li.Name.Contains(\"Structure_LINK\")) as RevitLinkInstance;\nif (linkInstance != null)\n{\n    ElementId categoryId = linkInstance.Category.Id;\n    bool isHidden = doc.ActiveView.GetCategoryHidden(categoryId);\n    doc.ActiveView.SetCategoryHidden(categoryId, !isHidden);\n}"}
{"prompt":"Toggle the visibility of a specific linked Revit model in the active view.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault(li => li.Name.Contains(\"Structure_LINK\")) as RevitLinkInstance;\nif (linkInstance != null)\n{\n    ElementId categoryId = linkInstance.Category.Id;\n    bool isHidden = doc.ActiveView.GetCategoryHidden(categoryId);\n    doc.ActiveView.SetCategoryHidden(categoryId, !isHidden);\n}"}
{"prompt":"Crea un nuevo material llamado 'Roble Oscuro' con una apariencia de renderizado y un patrón de superficie.","completion":"ElementId materialId = Material.Create(doc, \"Roble Oscuro\");\nMaterial material = doc.GetElement(materialId) as Material;\nFillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Wood\")) as FillPatternElement;\nif(fillPattern != null) material.SurfaceForegroundPatternId = fillPattern.Id;\nmaterial.Color = new Color(139, 69, 19);\nAppearanceAssetElement appearanceAsset = AppearanceAssetElement.Create(doc, \"RobleOscuro_Asset\", false);\nmaterial.AppearanceAssetId = appearanceAsset.Id;"}
{"prompt":"Create a new material named 'Dark Oak' with a rendering appearance and a surface pattern.","completion":"ElementId materialId = Material.Create(doc, \"Dark Oak\");\nMaterial material = doc.GetElement(materialId) as Material;\nFillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Wood\")) as FillPatternElement;\nif(fillPattern != null) material.SurfaceForegroundPatternId = fillPattern.Id;\nmaterial.Color = new Color(139, 69, 19);\nAppearanceAssetElement appearanceAsset = AppearanceAssetElement.Create(doc, \"DarkOak_Asset\", false);\nmaterial.AppearanceAssetId = appearanceAsset.Id;"}
{"prompt":"Etiqueta todas las columnas estructurales en la vista actual con sus respectivos nombres de tipo.","completion":"View activeView = doc.ActiveView;\nvar columns = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().ToElements();\nforeach (Element col in columns)\n{\n    LocationPoint loc = col.Location as LocationPoint;\n    if(loc != null) IndependentTag.Create(doc, activeView.Id, new Reference(col), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n}"}
{"prompt":"Tag all structural columns in the current view with their respective type names.","completion":"View activeView = doc.ActiveView;\nvar columns = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().ToElements();\nforeach (Element col in columns)\n{\n    LocationPoint loc = col.Location as LocationPoint;\n    if(loc != null) IndependentTag.Create(doc, activeView.Id, new Reference(col), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n}"}
{"prompt":"Encuentra un muro específico buscando el valor 'W-01' en su parámetro de Marca de Tipo.","completion":"ElementId typeMarkParamId = new ElementId(BuiltInParameter.ALL_MODEL_TYPE_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(typeMarkParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"W-01\");\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).FirstOrDefault() as Wall;"}
{"prompt":"Find a specific wall by searching for the value 'W-01' in its Type Mark parameter.","completion":"ElementId typeMarkParamId = new ElementId(BuiltInParameter.ALL_MODEL_TYPE_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(typeMarkParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"W-01\");\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).FirstOrDefault() as Wall;"}
{"prompt":"Alinea las líneas centrales de dos muros existentes.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer muro\");\nReference r2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo muro\");\nWall w1 = doc.GetElement(r1) as Wall;\nWall w2 = doc.GetElement(r2) as Wall;\nif (w1 != null && w2 != null)\n{\n    LocationCurve lc1 = w1.Location as LocationCurve;\n    LocationCurve lc2 = w2.Location as LocationCurve;\n    doc.Create.NewAlignment(doc.ActiveView, lc1.Curve.Reference, lc2.Curve.Reference);\n}"}
{"prompt":"Align the center lines of two existing walls.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first wall\");\nReference r2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second wall\");\nWall w1 = doc.GetElement(r1) as Wall;\nWall w2 = doc.GetElement(r2) as Wall;\nif (w1 != null && w2 != null)\n{\n    LocationCurve lc1 = w1.Location as LocationCurve;\n    LocationCurve lc2 = w2.Location as LocationCurve;\n    doc.Create.NewAlignment(doc.ActiveView, lc1.Curve.Reference, lc2.Curve.Reference);\n}"}
{"prompt":"Define un nuevo parámetro compartido de tipo 'Área' desde un archivo y aplícalo a la categoría de mobiliario.","completion":"string sharedParamFile = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamFile) || !File.Exists(sharedParamFile)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\shared_params.txt\"; File.Create(sharedParamFile).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = defFile.Groups.Create(\"Analytics\");\nExternalDefinitionCreationOptions opt = new ExternalDefinitionCreationOptions(\"Net Area\", SpecTypeId.Area);\nDefinition def = group.Definitions.Create(opt);\nCategory cat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nCategorySet cs = doc.Application.Create.NewCategorySet(); cs.Insert(cat);\nInstanceBinding bind = doc.Application.Create.NewInstanceBinding(cs);\ndoc.ParameterBindings.Insert(def, bind, BuiltInParameterGroup.PG_ANALYSIS_RESULTS);"}
{"prompt":"Define a new shared parameter of type 'Area' from a file and apply it to the furniture category.","completion":"string sharedParamFile = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamFile) || !File.Exists(sharedParamFile)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\shared_params.txt\"; File.Create(sharedParamFile).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = defFile.Groups.Create(\"Analytics\");\nExternalDefinitionCreationOptions opt = new ExternalDefinitionCreationOptions(\"Net Area\", SpecTypeId.Area);\nDefinition def = group.Definitions.Create(opt);\nCategory cat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nCategorySet cs = doc.Application.Create.NewCategorySet(); cs.Insert(cat);\nInstanceBinding bind = doc.Application.Create.NewInstanceBinding(cs);\ndoc.ParameterBindings.Insert(def, bind, BuiltInParameterGroup.PG_ANALYSIS_RESULTS);"}
{"prompt":"Establece la configuración de sol y sombra para la vista 3D activa a una hora y fecha específicas.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && view3D.CanEnableSunAndShadows())\n{\n    SunAndShadowSettings settings = view3D.SunAndShadowSettings;\n    settings.SunAndShadowType = SunAndShadowType.Still;\n    settings.SetTimeAndDate(new DateTime(2024, 6, 21, 15, 30, 0));\n    view3D.ShadowsOn = true;\n}"}
{"prompt":"Set the sun and shadow settings for the active 3D view to a specific time and date.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && view3D.CanEnableSunAndShadows())\n{\n    SunAndShadowSettings settings = view3D.SunAndShadowSettings;\n    settings.SunAndShadowType = SunAndShadowType.Still;\n    settings.SetTimeAndDate(new DateTime(2024, 6, 21, 15, 30, 0));\n    view3D.ShadowsOn = true;\n}"}
{"prompt":"Crea una superficie topográfica a partir de una lista de puntos XYZ.","completion":"IList<XYZ> points = new List<XYZ>{ new XYZ(0,0,0), new XYZ(10,0,1), new XYZ(0,10,2), new XYZ(10,10,1) };\nif (points.Count > 2) TopographySurface.Create(doc, points);"}
{"prompt":"Create a topography surface from a list of XYZ points.","completion":"IList<XYZ> points = new List<XYZ>{ new XYZ(0,0,0), new XYZ(10,0,1), new XYZ(0,10,2), new XYZ(10,10,1) };\nif (points.Count > 2) TopographySurface.Create(doc, points);"}
{"prompt":"Añade una nueva nota clave a la tabla de notas clave con un valor y texto específicos.","completion":"KeynoteTable table = doc.KeynoteTable;\nKeynoteEntry newEntry = table.GetKeynoteEntries().FirstOrDefault()?.Clone() as KeynoteEntry;\nif (newEntry != null)\n{\n    newEntry.KeyValue = \"08.10.01.A\";\n    newEntry.KeynoteText = \"Specialty Hollow Metal Door\";\n    table.AddKeynoteEntry(newEntry);\n}"}
{"prompt":"Add a new keynote to the keynote table with a specific key value and text.","completion":"KeynoteTable table = doc.KeynoteTable;\nKeynoteEntry newEntry = table.GetKeynoteEntries().FirstOrDefault()?.Clone() as KeynoteEntry;\nif (newEntry != null)\n{\n    newEntry.KeyValue = \"08.10.01.A\";\n    newEntry.KeynoteText = \"Specialty Hollow Metal Door\";\n    table.AddKeynoteEntry(newEntry);\n}"}
{"prompt":"Dentro del editor de familias, cambia el valor por defecto de un parámetro de longitud llamado 'Ancho'.","completion":"if(doc.IsFamilyDocument)\n{\n    FamilyManager fm = doc.FamilyManager;\n    FamilyParameter param = fm.get_Parameter(\"Ancho\");\n    if (param != null) fm.Set(param, UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters));\n}"}
{"prompt":"Inside the family editor, change the default value of a length parameter named 'Width'.","completion":"if(doc.IsFamilyDocument)\n{\n    FamilyManager fm = doc.FamilyManager;\n    FamilyParameter param = fm.get_Parameter(\"Width\");\n    if (param != null) fm.Set(param, UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters));\n}"}
{"prompt":"Coloca una calcomanía (decal) en una cara de un muro desde un archivo de imagen.","completion":"Wall wallHost = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nDecalType decalType = new FilteredElementCollector(doc).OfClass(typeof(DecalType)).FirstOrDefault() as DecalType;\nif (wallHost != null && decalType != null)\n{\n    Face wallFace = HostObjectUtils.GetSideFaces(wallHost, ShellLayerType.Exterior).FirstOrDefault();\n    if(wallFace != null) Decal.Create(doc, doc.ActiveView.Id, new Reference(wallHost), decalType.Id, wallFace.GetSurface(), new XYZ(0.5, 0.5, 0));\n}"}
{"prompt":"Place a decal on a wall face from an image file.","completion":"Wall wallHost = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nDecalType decalType = new FilteredElementCollector(doc).OfClass(typeof(DecalType)).FirstOrDefault() as DecalType;\nif (wallHost != null && decalType != null)\n{\n    Face wallFace = HostObjectUtils.GetSideFaces(wallHost, ShellLayerType.Exterior).FirstOrDefault();\n    if(wallFace != null) Decal.Create(doc, doc.ActiveView.Id, new Reference(wallHost), decalType.Id, wallFace.GetSurface(), new XYZ(0.5, 0.5, 0));\n}"}
{"prompt":"Calcula el volumen total de acero de refuerzo para todas las barras de 12mm.","completion":"double totalVolume = 0;\nRebarBarType barType12mm = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).Cast<RebarBarType>().FirstOrDefault(bt => bt.BarDiameter == UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Millimeters));\nif (barType12mm != null)\n{\n    var rebars = new FilteredElementCollector(doc).OfClass(typeof(Rebar)).Where(r => (r as Rebar).GetTypeId() == barType12mm.Id);\n    foreach (Rebar r in rebars)\n    {\n        totalVolume += r.GetVolume();\n    }\n    TaskDialog.Show(\"Volumen Total\", \"Volumen de barras de 12mm: \" + UnitUtils.ConvertFromInternalUnits(totalVolume, UnitTypeId.CubicMeters) + \" m³\");\n}"}
{"prompt":"Calculate the total volume of rebar for all 12mm bars.","completion":"double totalVolume = 0;\nRebarBarType barType12mm = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).Cast<RebarBarType>().FirstOrDefault(bt => bt.BarDiameter == UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Millimeters));\nif (barType12mm != null)\n{\n    var rebars = new FilteredElementCollector(doc).OfClass(typeof(Rebar)).Where(r => (r as Rebar).GetTypeId() == barType12mm.Id);\n    foreach (Rebar r in rebars)\n    {\n        totalVolume += r.GetVolume();\n    }\n    TaskDialog.Show(\"Total Volume\", \"Volume of 12mm bars: \" + UnitUtils.ConvertFromInternalUnits(totalVolume, UnitTypeId.CubicMeters) + \" m³\");\n}"}
{"prompt":"Crea una nueva tabla de planificación para Habitaciones y añade un filtro para mostrar solo habitaciones con 'Oficina' en su nombre.","completion":"ElementId roomCatId = new ElementId(BuiltInCategory.OST_Rooms);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, roomCatId);\nschedule.Name = \"Tabla de Oficinas\";\nScheduleDefinition def = schedule.Definition;\nSchedulableField nameField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.ROOM_NAME));\nif (nameField != null)\n{\n    def.AddField(nameField);\n    ScheduleFilter filter = new ScheduleFilter(nameField.FieldId, ScheduleFilterType.Contains, \"Oficina\");\n    def.AddFilter(filter);\n}"}
{"prompt":"Create a new schedule for Rooms and add a filter to show only rooms with 'Office' in their name.","completion":"ElementId roomCatId = new ElementId(BuiltInCategory.OST_Rooms);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, roomCatId);\nschedule.Name = \"Office Schedule\";\nScheduleDefinition def = schedule.Definition;\nSchedulableField nameField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.ROOM_NAME));\nif (nameField != null)\n{\n    def.AddField(nameField);\n    ScheduleFilter filter = new ScheduleFilter(nameField.FieldId, ScheduleFilterType.Contains, \"Office\");\n    def.AddFilter(filter);\n}"}
{"prompt":"Crea una abertura rectangular en un suelo usando un perfil de curvas.","completion":"Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif (floor != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(1,1,0), new XYZ(3,1,0)));\n    profile.Append(Line.CreateBound(new XYZ(3,1,0), new XYZ(3,3,0)));\n    profile.Append(Line.CreateBound(new XYZ(3,3,0), new XYZ(1,3,0)));\n    profile.Append(Line.CreateBound(new XYZ(1,3,0), new XYZ(1,1,0)));\n    doc.Create.NewOpening(floor, profile, true);\n}"}
{"prompt":"Create a rectangular opening in a floor using a curve profile.","completion":"Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif (floor != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(1,1,0), new XYZ(3,1,0)));\n    profile.Append(Line.CreateBound(new XYZ(3,1,0), new XYZ(3,3,0)));\n    profile.Append(Line.CreateBound(new XYZ(3,3,0), new XYZ(1,3,0)));\n    profile.Append(Line.CreateBound(new XYZ(1,3,0), new XYZ(1,1,0)));\n    doc.Create.NewOpening(floor, profile, true);\n}"}
{"prompt":"Establece un valor de parámetro para todas las instancias de mobiliario ubicadas dentro de una habitación específica.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Sala de Conferencias 1\") as Room;\nif (room != null)\n{\n    var furniture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Room != null && fi.Room.Id == room.Id);\n    foreach (FamilyInstance fi in furniture)\n    {\n        fi.LookupParameter(\"Comments\").Set(\"Aprobado para Conf. 1\");\n    }\n}"}
{"prompt":"Set a parameter value for all furniture instances located inside a specific room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Conference Room 1\") as Room;\nif (room != null)\n{\n    var furniture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Room != null && fi.Room.Id == room.Id);\n    foreach (FamilyInstance fi in furniture)\n    {\n        fi.LookupParameter(\"Comments\").Set(\"Approved for Conf. 1\");\n    }\n}"}
{"prompt":"Obtén el ID del elemento anfitrión para una instancia de armadura dada.","completion":"Rebar rebarInstance = new FilteredElementCollector(doc).OfClass(typeof(Rebar)).FirstOrDefault() as Rebar;\nif (rebarInstance != null)\n{\n    ElementId hostId = rebarInstance.GetHostId();\n    Element hostElement = doc.GetElement(hostId);\n    TaskDialog.Show(\"Anfitrión de Armadura\", \"ID del anfitrión: \" + hostElement.Id.ToString());\n}"}
{"prompt":"Get the host element ID for a given rebar instance.","completion":"Rebar rebarInstance = new FilteredElementCollector(doc).OfClass(typeof(Rebar)).FirstOrDefault() as Rebar;\nif (rebarInstance != null)\n{\n    ElementId hostId = rebarInstance.GetHostId();\n    Element hostElement = doc.GetElement(hostId);\n    TaskDialog.Show(\"Rebar Host\", \"Host ID: \" + hostElement.Id.ToString());\n}"}
{"prompt":"Cambia el estilo visual de la vista activa a 'Línea Oculta'.","completion":"View activeView = doc.ActiveView;\nif (activeView != null && activeView.CanBePrinted)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}
{"prompt":"Change the visual style of the active view to 'Hidden Line'.","completion":"View activeView = doc.ActiveView;\nif (activeView != null && activeView.CanBePrinted)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}
{"prompt":"Duplica la vista 'Nivel 1' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 1\") as ViewPlan;\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if(newView != null) newView.Name = \"Nivel 1 - Dependiente\";\n}"}
{"prompt":"Duplicate the 'Level 1' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 1\") as ViewPlan;\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if(newView != null) newView.Name = \"Level 1 - Dependent\";\n}"}
{"prompt":"Bloquea una dimensión seleccionada para mantener sus restricciones.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una dimensión\");\nDimension dim = doc.GetElement(pickedRef) as Dimension;\nif (dim != null) dim.IsLocked = true;"}
{"prompt":"Lock a selected dimension to maintain its constraints.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a dimension\");\nDimension dim = doc.GetElement(pickedRef) as Dimension;\nif (dim != null) dim.IsLocked = true;"}
{"prompt":"Coloca una cámara en la vista activa en coordenadas (2,2,3).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    cameraView.Name = \"Nueva Vista de Cámara\";\n    ViewOrientation3D orientation = new ViewOrientation3D(new XYZ(2,2,3), new XYZ(0,0,0), new XYZ(0,0,1));\n    cameraView.SetOrientation(orientation);\n}"}
{"prompt":"Place a camera in the active view at coordinates (2,2,3).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    cameraView.Name = \"New Camera View\";\n    ViewOrientation3D orientation = new ViewOrientation3D(new XYZ(2,2,3), new XYZ(0,0,0), new XYZ(0,0,1));\n    cameraView.SetOrientation(orientation);\n}"}
{"prompt":"Crea una separación de habitación usando la línea de un muro existente.","completion":"Wall wall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif (wall != null)\n{\n    LocationCurve locCurve = wall.Location as LocationCurve;\n    if(locCurve != null)\n    {\n        RoomSeparationLine.Create(doc, locCurve.Curve, doc.ActiveView.SketchPlane.Id);\n    }\n}"}
{"prompt":"Create a room separation using the line of an existing wall.","completion":"Wall wall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif (wall != null)\n{\n    LocationCurve locCurve = wall.Location as LocationCurve;\n    if(locCurve != null)\n    {\n        RoomSeparationLine.Create(doc, locCurve.Curve, doc.ActiveView.SketchPlane.Id);\n    }\n}"}
{"prompt":"Genera una sección en cada intersección de la rejilla.","completion":"ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\nvar grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\nif (sectionVFT != null && grids.Count > 1)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            SetComparisonResult res = grids[i].Curve.Intersect(grids[j].Curve, out IntersectionResultArray results);\n            if (res == SetComparisonResult.Overlap && results != null)\n            {\n                foreach (IntersectionResult ir in results)\n                {\n                    XYZ origin = ir.XYZPoint;\n                    XYZ viewDir = grids[i].Curve.GetEndPoint(1) - grids[i].Curve.GetEndPoint(0);\n                    Transform t = Transform.CreateRotation(XYZ.BasisZ, viewDir.AngleOnPlaneTo(XYZ.BasisX, XYZ.BasisZ));\n                    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ() { Min = new XYZ(-5, -1, 0), Max = new XYZ(5, 5, 10), Transform = t.Inverse };\n                    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Generate a section at each grid intersection.","completion":"ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\nvar grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\nif (sectionVFT != null && grids.Count > 1)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            SetComparisonResult res = grids[i].Curve.Intersect(grids[j].Curve, out IntersectionResultArray results);\n            if (res == SetComparisonResult.Overlap && results != null)\n            {\n                foreach (IntersectionResult ir in results)\n                {\n                    XYZ origin = ir.XYZPoint;\n                    XYZ viewDir = grids[i].Curve.GetEndPoint(1) - grids[i].Curve.GetEndPoint(0);\n                    Transform t = Transform.CreateRotation(XYZ.BasisZ, viewDir.AngleOnPlaneTo(XYZ.BasisX, XYZ.BasisZ));\n                    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ() { Min = new XYZ(-5, -1, 0), Max = new XYZ(5, 5, 10), Transform = t.Inverse };\n                    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Añade una etiqueta de texto a la columna más cercana al origen (0,0,0).","completion":"FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => (c.Location as LocationPoint).Point.DistanceTo(XYZ.Zero)).FirstOrDefault();\nif (column != null)\n{\n    IndependentTag.Create(doc, doc.ActiveView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, (column.Location as LocationPoint).Point);\n}"}
{"prompt":"Add a text tag to the column closest to the origin (0,0,0).","completion":"FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => (c.Location as LocationPoint).Point.DistanceTo(XYZ.Zero)).FirstOrDefault();\nif (column != null)\n{\n    IndependentTag.Create(doc, doc.ActiveView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, (column.Location as LocationPoint).Point);\n}"}
{"prompt":"Instala un accesorio de tubería (fitting) en el extremo de la primera tubería encontrada.","completion":"FamilySymbol fittingSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeFitting).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nPipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nif (fittingSymbol != null && pipe != null)\n{\n    if (!fittingSymbol.IsActive) fittingSymbol.Activate();\n    Connector connector = pipe.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (connector != null) doc.Create.NewFamilyInstance(connector, fittingSymbol);\n}"}
{"prompt":"Install a pipe fitting at the end of the first found pipe.","completion":"FamilySymbol fittingSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeFitting).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nPipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nif (fittingSymbol != null && pipe != null)\n{\n    if (!fittingSymbol.IsActive) fittingSymbol.Activate();\n    Connector connector = pipe.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (connector != null) doc.Create.NewFamilyInstance(connector, fittingSymbol);\n}"}
{"prompt":"Coloca un terminal de aire en el extremo de un conducto.","completion":"FamilySymbol terminalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctTerminal).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nDuct duct = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Ducts).FirstOrDefault() as Duct;\nif (terminalSymbol != null && duct != null)\n{\n    if (!terminalSymbol.IsActive) terminalSymbol.Activate();\n    Connector connector = duct.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (connector != null) doc.Create.NewFamilyInstance(connector, terminalSymbol);\n}"}
{"prompt":"Place an air terminal at the end of a duct.","completion":"FamilySymbol terminalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctTerminal).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nDuct duct = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Ducts).FirstOrDefault() as Duct;\nif (terminalSymbol != null && duct != null)\n{\n    if (!terminalSymbol.IsActive) terminalSymbol.Activate();\n    Connector connector = duct.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (connector != null) doc.Create.NewFamilyInstance(connector, terminalSymbol);\n}"}
{"prompt":"Crea una familia 'in-situ' para un mostrador de recepción personalizado usando una extrusión.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(level != null) {\n    InPlaceElement ipe = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Furniture), level.Id);\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { Line.CreateBound(new XYZ(0,0,0), new XYZ(2,0,0)), Line.CreateBound(new XYZ(2,0,0), new XYZ(2,1,0)), Line.CreateBound(new XYZ(2,1,0), new XYZ(0,1,0)), Line.CreateBound(new XYZ(0,1,0), new XYZ(0,0,0)) });\n    SketchPlane sp = SketchPlane.Create(doc, level.GetPlane());\n    doc.FamilyCreate.NewExtrusion(true, new List<CurveLoop>{profile}, sp, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n    ipe.Commit();\n}"}
{"prompt":"Create an in-place family for a custom reception desk using an extrusion.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(level != null) {\n    InPlaceElement ipe = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Furniture), level.Id);\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { Line.CreateBound(new XYZ(0,0,0), new XYZ(2,0,0)), Line.CreateBound(new XYZ(2,0,0), new XYZ(2,1,0)), Line.CreateBound(new XYZ(2,1,0), new XYZ(0,1.0)), Line.CreateBound(new XYZ(0,1,0), new XYZ(0,0,0)) });\n    SketchPlane sp = SketchPlane.Create(doc, level.GetPlane());\n    doc.FamilyCreate.NewExtrusion(true, new List<CurveLoop>{profile}, sp, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n    ipe.Commit();\n}"}
{"prompt":"Modifica el tipo de muro de un muro existente a un tipo que contenga 'Aislamiento Térmico'.","completion":"Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(x => x.Name.Contains(\"Aislamiento Térmico\"));\nif (wallToChange != null && newType != null) wallToChange.WallType = newType;"}
{"prompt":"Change the wall type of an existing wall to a type containing 'Thermal Insulation'.","completion":"Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(x => x.Name.Contains(\"Thermal Insulation\"));\nif (wallToChange != null && newType != null) wallToChange.WallType = newType;"}
{"prompt":"Crea una losa inclinada con una pendiente del 2% sobre una planta de 8x6 m.","completion":"FloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nLevel lvl = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif (ft != null && lvl != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(8,6,0), new XYZ(0,1,0));\n    Floor slopedFloor = Floor.Create(doc, new List<CurveLoop>{profile}, ft.Id, lvl.Id);\n    slopedFloor.get_Parameter(BuiltInParameter.ROOF_SLOPE).Set(0.02);\n}"}
{"prompt":"Create a sloped slab with a 2% slope over an 8x6 m area.","completion":"FloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nLevel lvl = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif (ft != null && lvl != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(8,6,0), new XYZ(0,1,0));\n    Floor slopedFloor = Floor.Create(doc, new List<CurveLoop>{profile}, ft.Id, lvl.Id);\n    slopedFloor.get_Parameter(BuiltInParameter.ROOF_SLOPE).Set(0.02);\n}"}
{"prompt":"Añade un accesorio de tubería tipo codo de 90° en la unión de dos tuberías.","completion":"FamilySymbol elbowSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeFitting).WhereElementIsElementType().FirstOrDefault(x => x.Name.Contains(\"Elbow\")) as FamilySymbol;\nvar pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Take(2).Cast<Pipe>().ToList();\nif (elbowSymbol != null && pipes.Count == 2)\n{\n    Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (c1 != null && c2 != null) doc.Create.NewElbowFitting(c1, c2);\n}"}
{"prompt":"Add a 90° elbow pipe fitting at the junction of two pipes.","completion":"FamilySymbol elbowSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeFitting).WhereElementIsElementType().FirstOrDefault(x => x.Name.Contains(\"Elbow\")) as FamilySymbol;\nvar pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Take(2).Cast<Pipe>().ToList();\nif (elbowSymbol != null && pipes.Count == 2)\n{\n    Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (c1 != null && c2 != null) doc.Create.NewElbowFitting(c1, c2);\n}"}
{"prompt":"Coloca una etiqueta de elevación en el Nivel 1.","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (lvl1 != null)\n{\n    Reference levelRef = new Reference(lvl1);\n    XYZ origin = new XYZ(5,5,lvl1.Elevation);\n    doc.Create.NewSpotElevation(doc.ActiveView, levelRef, origin, origin, origin, true, true);\n}"}
{"prompt":"Place an elevation tag on Level 1.","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (lvl1 != null)\n{\n    Reference levelRef = new Reference(lvl1);\n    XYZ origin = new XYZ(5,5,lvl1.Elevation);\n    doc.Create.NewSpotElevation(doc.ActiveView, levelRef, origin, origin, origin, true, true);\n}"}
{"prompt":"Exporta la vista 3D actual a formato NWC para Navisworks.","completion":"View3D view3d = doc.ActiveView as View3D;\nif (view3d != null)\n{\n    NavisworksExportOptions options = new NavisworksExportOptions();\n    options.ExportScope = NavisworksExportScope.View;\n    options.ViewId = view3d.Id;\n    doc.Export(@\"C:\\RevitExports\\\", \"3DView.nwc\", options);\n}"}
{"prompt":"Export the current 3D view to NWC format for Navisworks.","completion":"View3D view3d = doc.ActiveView as View3D;\nif (view3d != null)\n{\n    NavisworksExportOptions options = new NavisworksExportOptions();\n    options.ExportScope = NavisworksExportScope.View;\n    options.ViewId = view3d.Id;\n    doc.Export(@\"C:\\RevitExports\\\", \"3DView.nwc\", options);\n}"}
{"prompt":"Aplica un refuerzo de viga con estribos espaciados cada 0.3 metros.","completion":"RebarBarType stirrupType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault(s => s.Name.Contains(\"Stirrup\")) as RebarShape;\nFamilyInstance beam = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).FirstOrDefault() as FamilyInstance;\nif (stirrupType != null && shape != null && beam != null)\n{\n    Rebar rebar = Rebar.CreateFromRebarShape(doc, shape, stirrupType, beam, XYZ.BasisZ, XYZ.BasisX, XYZ.BasisY);\n    rebar.GetRebarLayout().MaxSpacing = UnitUtils.ConvertToInternalUnits(0.3, UnitTypeId.Meters);\n}"}
{"prompt":"Apply beam reinforcement with stirrups spaced every 0.3 meters.","completion":"RebarBarType stirrupType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault(s => s.Name.Contains(\"Stirrup\")) as RebarShape;\nFamilyInstance beam = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).FirstOrDefault() as FamilyInstance;\nif (stirrupType != null && shape != null && beam != null)\n{\n    Rebar rebar = Rebar.CreateFromRebarShape(doc, shape, stirrupType, beam, XYZ.BasisZ, XYZ.BasisX, XYZ.BasisY);\n    rebar.GetRebarLayout().MaxSpacing = UnitUtils.ConvertToInternalUnits(0.3, UnitTypeId.Meters);\n}"}
{"prompt":"Crea una pieza de mobiliario de emergencia, como una camilla, en las coordenadas (2,3,0).","completion":"FamilySymbol emergencySymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Emergency\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif (emergencySymbol != null && level != null)\n{\n    if (!emergencySymbol.IsActive) emergencySymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,3,0), emergencySymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Create a piece of emergency furniture, like a stretcher, at coordinates (2,3,0).","completion":"FamilySymbol emergencySymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Emergency\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif (emergencySymbol != null && level != null)\n{\n    if (!emergencySymbol.IsActive) emergencySymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,3,0), emergencySymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Obtén todas las habitaciones que están en el Nivel 3.","completion":"Level level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nList<Room> roomsOnLevel3 = new List<Room>();\nif (level3 != null)\n{\n    roomsOnLevel3 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().Where(r => r.LevelId == level3.Id).ToList();\n}"}
{"prompt":"Get all rooms that are on Level 3.","completion":"Level level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nList<Room> roomsOnLevel3 = new List<Room>();\nif (level3 != null)\n{\n    roomsOnLevel3 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().Where(r => r.LevelId == level3.Id).ToList();\n}"}
{"prompt":"Crea una vista de sección con el nombre 'Sección A-A' en el nivel actual.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(-5, -1, 0);\n    sectionBox.Max = new XYZ(5, 5, 10);\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    sectionView.Name = \"Sección A-A\";\n}"}
{"prompt":"Create a section view named 'Section A-A' on the current level.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(-5, -1, 0);\n    sectionBox.Max = new XYZ(5, 5, 10);\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    sectionView.Name = \"Section A-A\";\n}"}
{"prompt":"Cambia el nivel de detalle de la vista activa a 'Medio'.","completion":"View activeView = doc.ActiveView;\nif (activeView != null) activeView.DetailLevel = ViewDetailLevel.Medium;"}
{"prompt":"Change the detail level of the active view to 'Medium'.","completion":"View activeView = doc.ActiveView;\nif (activeView != null) activeView.DetailLevel = ViewDetailLevel.Medium;"}
{"prompt":"Aplica un parámetro compartido llamado 'CódigoEspacio' a todas las habitaciones.","completion":"string sharedParamFile = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamFile) || !File.Exists(sharedParamFile)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\shared_params.txt\"; File.Create(sharedParamFile).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinition def = defFile.Groups.SelectMany(g => g.Definitions).OfType<ExternalDefinition>().FirstOrDefault(d => d.Name == \"CódigoEspacio\");\nif(def != null) {\n    CategorySet cats = doc.Application.Create.NewCategorySet();\n    cats.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Rooms));\n    InstanceBinding bind = doc.Application.Create.NewInstanceBinding(cats);\n    doc.ParameterBindings.Insert(def, bind, BuiltInParameterGroup.PG_IDENTITY_DATA);\n}"}
{"prompt":"Apply a shared parameter named 'SpaceCode' to all rooms.","completion":"string sharedParamFile = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamFile) || !File.Exists(sharedParamFile)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\shared_params.txt\"; File.Create(sharedParamFile).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinition def = defFile.Groups.SelectMany(g => g.Definitions).OfType<ExternalDefinition>().FirstOrDefault(d => d.Name == \"SpaceCode\");\nif(def != null) {\n    CategorySet cats = doc.Application.Create.NewCategorySet();\n    cats.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Rooms));\n    InstanceBinding bind = doc.Application.Create.NewInstanceBinding(cats);\n    doc.ParameterBindings.Insert(def, bind, BuiltInParameterGroup.PG_IDENTITY_DATA);\n}"}
{"prompt":"Genera un grupo con las instancias seleccionadas y colócalo en (10,10,0).","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Any())\n{\n    Group group = doc.Create.Group(selectedIds);\n    group.Location.Move(new XYZ(10,10,0));\n}"}
{"prompt":"Generate a group with the selected instances and place it at (10,10,0).","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Any())\n{\n    Group group = doc.Create.Group(selectedIds);\n    group.Location.Move(new XYZ(10,10,0));\n}"}
{"prompt":"Obtén todas las instancias de FamilyInstance de la categoría Mobiliario.","completion":"var furnitureInstances = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_Furniture)\n    .WhereElementIsNotElementType()\n    .ToElements();"}
{"prompt":"Get all FamilyInstance instances from the Furniture category.","completion":"var furnitureInstances = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_Furniture)\n    .WhereElementIsNotElementType()\n    .ToElements();"}
{"prompt":"Ajusta la región de recorte (crop) de la vista activa a un rectángulo de 0 a 20 en X/Y.","completion":"View view = doc.ActiveView;\nif (view != null && view.CropBoxActive)\n{\n    BoundingBoxXYZ cropBox = view.CropBox;\n    cropBox.Min = new XYZ(0, 0, cropBox.Min.Z);\n    cropBox.Max = new XYZ(20, 20, cropBox.Max.Z);\n    view.CropBox = cropBox;\n}"}
{"prompt":"Adjust the crop region of the active view to a rectangle from 0 to 20 in X/Y.","completion":"View view = doc.ActiveView;\nif (view != null && view.CropBoxActive)\n{\n    BoundingBoxXYZ cropBox = view.CropBox;\n    cropBox.Min = new XYZ(0, 0, cropBox.Min.Z);\n    cropBox.Max = new XYZ(20, 20, cropBox.Max.Z);\n    view.CropBox = cropBox;\n}"}
{"prompt":"Crea un SketchPlane asociado al nivel 'Level 2'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif(level2 != null) {\n    Plane plane = level2.GetPlane();\n    SketchPlane sp = SketchPlane.Create(doc, plane);\n}"}
{"prompt":"Create a SketchPlane associated with 'Level 2'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif(level2 != null) {\n    Plane plane = level2.GetPlane();\n    SketchPlane sp = SketchPlane.Create(doc, plane);\n}"}
{"prompt":"Dibuja una curva spline pasando por los puntos (0,0,0), (5,2,0) y (10,0,0).","completion":"IList<XYZ> points = new List<XYZ>{ new XYZ(0,0,0), new XYZ(5,2,0), new XYZ(10,0,0) };\nNurbSpline spline = NurbSpline.Create(points);\nPlane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, XYZ.Zero);\nSketchPlane sp = SketchPlane.Create(doc, plane);\ndoc.Create.NewModelCurve(spline, sp);"}
{"prompt":"Draw a spline curve passing through points (0,0,0), (5,2,0), and (10,0,0).","completion":"IList<XYZ> points = new List<XYZ>{ new XYZ(0,0,0), new XYZ(5,2,0), new XYZ(10,0,0) };\nNurbSpline spline = NurbSpline.Create(points);\nPlane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, XYZ.Zero);\nSketchPlane sp = SketchPlane.Create(doc, plane);\ndoc.Create.NewModelCurve(spline, sp);"}
{"prompt":"Extrae todos los parámetros compartidos del documento.","completion":"BindingMap bindingMap = doc.ParameterBindings;\nvar sharedParams = new List<ExternalDefinition>();\nDefinitionBindingMapIterator it = bindingMap.ForwardIterator();\nit.Reset();\nwhile (it.MoveNext())\n{\n    if (it.Key is ExternalDefinition def) sharedParams.Add(def);\n}"}
{"prompt":"Extract all shared parameters from the document.","completion":"BindingMap bindingMap = doc.ParameterBindings;\nvar sharedParams = new List<ExternalDefinition>();\nDefinitionBindingMapIterator it = bindingMap.ForwardIterator();\nit.Reset();\nwhile (it.MoveNext())\n{\n    if (it.Key is ExternalDefinition def) sharedParams.Add(def);\n}"}
{"prompt":"Activa todos los FamilySymbol cargados en el documento.","completion":"var symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) sym.Activate();\n}"}
{"prompt":"Activate all loaded FamilySymbols in the document.","completion":"var symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) sym.Activate();\n}"}
{"prompt":"Inicia y confirma una transacción llamada 'Modificar Proyecto'.","completion":"using (Transaction tx = new Transaction(doc, \"Modificar Proyecto\"))\n{\n    tx.Start();\n    // ... acciones de modificación aquí ...\n    tx.Commit();\n}"}
{"prompt":"Start and commit a transaction named 'Modify Project'.","completion":"using (Transaction tx = new Transaction(doc, \"Modify Project\"))\n{\n    tx.Start();\n    // ... modification actions here ...\n    tx.Commit();\n}"}
{"prompt":"Usa TransactionGroup para agrupar dos transacciones.","completion":"using (TransactionGroup tg = new TransactionGroup(doc, \"Agrupar Cambios\"))\n{\n    tg.Start();\n    using (Transaction t1 = new Transaction(doc, \"Paso 1\")) { t1.Start(); /* acción 1 */ t1.Commit(); }\n    using (Transaction t2 = new Transaction(doc, \"Paso 2\")) { t2.Start(); /* acción 2 */ t2.Commit(); }\n    tg.Assimilate();\n}"}
{"prompt":"Use a TransactionGroup to group two transactions.","completion":"using (TransactionGroup tg = new TransactionGroup(doc, \"Group Changes\"))\n{\n    tg.Start();\n    using (Transaction t1 = new Transaction(doc, \"Step 1\")) { t1.Start(); /* action 1 */ t1.Commit(); }\n    using (Transaction t2 = new Transaction(doc, \"Step 2\")) { t2.Start(); /* action 2 */ t2.Commit(); }\n    tg.Assimilate();\n}"}
{"prompt":"Crea y cancela una SubTransaction dentro de una transacción.","completion":"using (Transaction tx = new Transaction(doc, \"Transacción Principal\"))\n{\n    tx.Start();\n    using (SubTransaction st = new SubTransaction(doc))\n    {\n        st.Start();\n        // ... cambios tentativos ...\n        st.RollBack();\n    }\n    tx.Commit();\n}"}
{"prompt":"Create and roll back a SubTransaction within a transaction.","completion":"using (Transaction tx = new Transaction(doc, \"Main Transaction\"))\n{\n    tx.Start();\n    using (SubTransaction st = new SubTransaction(doc))\n    {\n        st.Start();\n        // ... tentative changes ...\n        st.RollBack();\n    }\n    tx.Commit();\n}"}
{"prompt":"Crea un filtro de vista que oculte muros con el parámetro 'Phase Demolished' igual a un ID de fase específico.","completion":"Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).FirstOrDefault(p => p.Name == \"Fase de Demolición\") as Phase;\nif(demolishedPhase != null) {\n    ElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\n    FilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\n    ElementFilter filter = new ElementParameterFilter(rule);\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Filtro de Demolición\", new List<ElementId>{new ElementId(BuiltInCategory.OST_Walls)}, filter);\n    doc.ActiveView.AddFilter(pfe.Id);\n    doc.ActiveView.SetFilterVisibility(pfe.Id, false);\n}"}
{"prompt":"Create a view filter that hides walls with the 'Phase Demolished' parameter equal to a specific phase ID.","completion":"Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).FirstOrDefault(p => p.Name == \"Demolition Phase\") as Phase;\nif(demolishedPhase != null) {\n    ElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\n    FilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\n    ElementFilter filter = new ElementParameterFilter(rule);\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Demolition Filter\", new List<ElementId>{new ElementId(BuiltInCategory.OST_Walls)}, filter);\n    doc.ActiveView.AddFilter(pfe.Id);\n    doc.ActiveView.SetFilterVisibility(pfe.Id, false);\n}"}
{"prompt":"Aplica OverrideGraphicSettings para que todas las ventanas se muestren en rojo.","completion":"View activeView = doc.ActiveView;\nOverrideGraphicSettings ogs = new OverrideGraphicSettings();\nogs.SetProjectionLineColor(new Color(255,0,0));\nvar windows = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().ToElementIds();\nforeach (var windowId in windows)\n{\n    activeView.SetElementOverrides(windowId, ogs);\n}"}
{"prompt":"Apply OverrideGraphicSettings to show all windows in red.","completion":"View activeView = doc.ActiveView;\nOverrideGraphicSettings ogs = new OverrideGraphicSettings();\nogs.SetProjectionLineColor(new Color(255,0,0));\nvar windows = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().ToElementIds();\nforeach (var windowId in windows)\n{\n    activeView.SetElementOverrides(windowId, ogs);\n}"}
{"prompt":"Exporta la vista 3D activa como imagen JPG en 'C:/temp/vista.jpg'.","completion":"View activeView = doc.ActiveView;\nImageExportOptions opts = new ImageExportOptions();\nopts.FilePath = @\"C:\\temp\\vista\";\nopts.HLRandWFViewsFileType = ImageFileType.JPEGLossless;\nopts.ZoomType = ZoomFitType.FitToPage;\nopts.ExportRange = ExportRange.CurrentView;\ndoc.ExportImage(opts);"}
{"prompt":"Export the active 3D view as a JPG image to 'C:/temp/view.jpg'.","completion":"View activeView = doc.ActiveView;\nImageExportOptions opts = new ImageExportOptions();\nopts.FilePath = @\"C:\\temp\\view\";\nopts.HLRandWFViewsFileType = ImageFileType.JPEGLossless;\nopts.ZoomType = ZoomFitType.FitToPage;\nopts.ExportRange = ExportRange.CurrentView;\ndoc.ExportImage(opts);"}
{"prompt":"Configura los ajustes de trazado de rayos (RayTrace) en la vista 3D.","completion":"View3D view3D = doc.ActiveView as View3D;\nif(view3D != null) {\n    view3D.get_Parameter(BuiltInParameter.MODEL_GRAPHICS_STYLE).Set(6); // Realistic\n    view3D.get_Parameter(BuiltInParameter.REALISTIC_GRAPHICS_STYLE_RAY_TRACE).Set(1); // Enable Ray Tracing\n    RenderingSettings settings = view3D.GetRenderingSettings();\n    settings.ResolutionTarget = ResolutionTarget.Printer;\n    settings.ResolutionValue = 300;\n    view3D.SetRenderingSettings(settings);\n}"}
{"prompt":"Configure RayTrace settings in the 3D view.","completion":"View3D view3D = doc.ActiveView as View3D;\nif(view3D != null) {\n    view3D.get_Parameter(BuiltInParameter.MODEL_GRAPHICS_STYLE).Set(6); // Realistic\n    view3D.get_Parameter(BuiltInParameter.REALISTIC_GRAPHICS_STYLE_RAY_TRACE).Set(1); // Enable Ray Tracing\n    RenderingSettings settings = view3D.GetRenderingSettings();\n    settings.ResolutionTarget = ResolutionTarget.Printer;\n    settings.ResolutionValue = 300;\n    view3D.SetRenderingSettings(settings);\n}"}
{"prompt":"Crea un PathOfTravel entre dos puntos (1,1) y (10,10).","completion":"ViewPlan viewPlan = doc.ActiveView as ViewPlan;\nif(viewPlan != null) {\n    UV start = new UV(1,1);\n    UV end = new UV(10,10);\n    PathOfTravel.Create(viewPlan, start, end);\n}"}
{"prompt":"Create a PathOfTravel between two points (1,1) and (10,10).","completion":"ViewPlan viewPlan = doc.ActiveView as ViewPlan;\nif(viewPlan != null) {\n    UV start = new UV(1,1);\n    UV end = new UV(10,10);\n    PathOfTravel.Create(viewPlan, start, end);\n}"}
{"prompt":"Crea un filtro mecánico HVAC que agrupe conductos de SupplyAir.","completion":"ElementId sysClassParamId = new ElementId(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(sysClassParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"SupplyAir\");\nElementFilter filter = new ElementParameterFilter(rule);\nParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Filtro Supply Air\", new List<ElementId>{new ElementId(BuiltInCategory.OST_DuctCurves)}, filter);\ndoc.ActiveView.AddFilter(pfe.Id);\nOverrideGraphicSettings ogs = new OverrideGraphicSettings();\nogs.SetProjectionLineColor(new Color(0,0,255));\ndoc.ActiveView.SetFilterOverrides(pfe.Id, ogs);"}
{"prompt":"Create an HVAC mechanical filter that groups SupplyAir ducts.","completion":"ElementId sysClassParamId = new ElementId(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(sysClassParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"SupplyAir\");\nElementFilter filter = new ElementParameterFilter(rule);\nParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Supply Air Filter\", new List<ElementId>{new ElementId(BuiltInCategory.OST_DuctCurves)}, filter);\ndoc.ActiveView.AddFilter(pfe.Id);\nOverrideGraphicSettings ogs = new OverrideGraphicSettings();\nogs.SetProjectionLineColor(new Color(0,0,255));\ndoc.ActiveView.SetFilterOverrides(pfe.Id, ogs);"}
{"prompt":"Añade un parámetro de instancia compartido 'SerialNumber' a la categoría Mobiliario.","completion":"string sharedParamFile = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamFile) || !File.Exists(sharedParamFile)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\shared_params.txt\"; File.Create(sharedParamFile).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = defFile.Groups.EnsureDefinitionGroup(\"General\");\nExternalDefinition def = group.Definitions.Create(new ExternalDefinitionCreationOptions(\"SerialNumber\", SpecTypeId.String.Text)) as ExternalDefinition;\nCategory cat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nCategorySet cs = doc.Application.Create.NewCategorySet(); cs.Insert(cat);\nInstanceBinding bind = doc.Application.Create.NewInstanceBinding(cs);\ndoc.ParameterBindings.Insert(def, bind, BuiltInParameterGroup.PG_TEXT);"}
{"prompt":"Add a shared instance parameter 'SerialNumber' to the Furniture category.","completion":"string sharedParamFile = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamFile) || !File.Exists(sharedParamFile)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\shared_params.txt\"; File.Create(sharedParamFile).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = defFile.Groups.EnsureDefinitionGroup(\"General\");\nExternalDefinition def = group.Definitions.Create(new ExternalDefinitionCreationOptions(\"SerialNumber\", SpecTypeId.String.Text)) as ExternalDefinition;\nCategory cat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nCategorySet cs = doc.Application.Create.NewCategorySet(); cs.Insert(cat);\nInstanceBinding bind = doc.Application.Create.NewInstanceBinding(cs);\ndoc.ParameterBindings.Insert(def, bind, BuiltInParameterGroup.PG_TEXT);"}
{"prompt":"Obtén la malla de geometría de una masa conceptual (MassInstance).","completion":"FamilyInstance massInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Mass).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif(massInstance != null) {\n    Options opt = new Options() { DetailLevel = ViewDetailLevel.Fine };\n    GeometryElement geomElem = massInstance.get_Geometry(opt);\n    foreach (GeometryObject geomObj in geomElem) {\n        if (geomObj is Solid solid && solid.Volume > 0) {\n            // Process the solid\n        }\n    }\n}"}
{"prompt":"Get the geometry mesh of a conceptual mass (MassInstance).","completion":"FamilyInstance massInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Mass).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif(massInstance != null) {\n    Options opt = new Options() { DetailLevel = ViewDetailLevel.Fine };\n    GeometryElement geomElem = massInstance.get_Geometry(opt);\n    foreach (GeometryObject geomObj in geomElem) {\n        if (geomObj is Solid solid && solid.Volume > 0) {\n            // Process the solid\n        }\n    }\n}"}
{"prompt":"Inserta un TextNote con el texto 'Revisar' en posición (2,3,0) en la vista activa.","completion":"XYZ position = new XYZ(2,3,0);\nTextNote.Create(doc, doc.ActiveView.Id, position, \"Revisar\", TextNoteType.CreateDefault(doc).Id);"}
{"prompt":"Insert a TextNote with the text 'Review' at position (2,3,0) in the active view.","completion":"XYZ position = new XYZ(2,3,0);\nTextNote.Create(doc, doc.ActiveView.Id, position, \"Review\", TextNoteType.CreateDefault(doc).Id);"}
{"prompt":"Crea un Workset de usuario llamado 'Mobiliario' y asígnalo a una FamilyInstance.","completion":"if(doc.IsWorkshared) {\n    Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w => w.Name == \"Mobiliario\");\n    if(ws == null) ws = Workset.Create(doc, \"Mobiliario\");\n    FamilyInstance fi = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n    if (fi != null) {\n        Parameter wsparam = fi.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n        if(wsparam != null) wsparam.Set(ws.Id.IntegerValue);\n    }\n}"}
{"prompt":"Create a user Workset named 'Furniture' and assign it to a FamilyInstance.","completion":"if(doc.IsWorkshared) {\n    Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w => w.Name == \"Furniture\");\n    if(ws == null) ws = Workset.Create(doc, \"Furniture\");\n    FamilyInstance fi = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n    if (fi != null) {\n        Parameter wsparam = fi.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n        if(wsparam != null) wsparam.Set(ws.Id.IntegerValue);\n    }\n}"}
{"prompt":"Obtén y establece la ubicación XY de un elemento a (5,5).","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para mover\");\nElement elem = doc.GetElement(pickedRef);\nLocationPoint lp = elem.Location as LocationPoint;\nif (lp != null) {\n    XYZ newPosition = new XYZ(5, 5, lp.Point.Z);\n    lp.Point = newPosition;\n}"}
{"prompt":"Get and set the XY location of an element to (5,5).","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to move\");\nElement elem = doc.GetElement(pickedRef);\nLocationPoint lp = elem.Location as LocationPoint;\nif (lp != null) {\n    XYZ newPosition = new XYZ(5, 5, lp.Point.Z);\n    lp.Point = newPosition;\n}"}
{"prompt":"Crea una carga de superficie (Area Load) de 2 kN/m² en un contorno cerrado dado.","completion":"CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(10,10,0), XYZ.BasisZ);\nAreaLoadType loadType = new FilteredElementCollector(doc).OfClass(typeof(AreaLoadType)).FirstOrDefault() as AreaLoadType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(loadType != null && level != null) {\n    AreaLoad.Create(doc, level, new List<CurveLoop>{profile}, loadType.Id, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.KilonewtonsPerSquareMeter), \"Uniform\");\n}"}
{"prompt":"Create an Area Load of 2 kN/m² on a given closed contour.","completion":"CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(10,10,0), XYZ.BasisZ);\nAreaLoadType loadType = new FilteredElementCollector(doc).OfClass(typeof(AreaLoadType)).FirstOrDefault() as AreaLoadType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(loadType != null && level != null) {\n    AreaLoad.Create(doc, level, new List<CurveLoop>{profile}, loadType.Id, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.KilonewtonsPerSquareMeter), \"Uniform\");\n}"}
{"prompt":"Crea un refuerzo de superficie (Area Reinforcement) en un muro, usando un contorno de curvas.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nAreaReinforcementType reinforcementType = new FilteredElementCollector(doc).OfClass(typeof(AreaReinforcementType)).FirstOrDefault() as AreaReinforcementType;\nif(wall != null && reinforcementType != null) {\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(1,1,0), new XYZ(4,4,0), wall.Orientation);\n    AreaReinforcement.Create(doc, wall, new List<CurveLoop>{profile}, reinforcementType.Id);\n}"}
{"prompt":"Create an Area Reinforcement on a wall using a curve contour.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nAreaReinforcementType reinforcementType = new FilteredElementCollector(doc).OfClass(typeof(AreaReinforcementType)).FirstOrDefault() as AreaReinforcementType;\nif(wall != null && reinforcementType != null) {\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(1,1,0), new XYZ(4,4,0), wall.Orientation);\n    AreaReinforcement.Create(doc, wall, new List<CurveLoop>{profile}, reinforcementType.Id);\n}"}
{"prompt":"Genera una malla de refuerzo (Fabric Area) en un forjado, con ángulo de 45°.","completion":"Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFabricAreaType areaType = new FilteredElementCollector(doc).OfClass(typeof(FabricAreaType)).FirstOrDefault() as FabricAreaType;\nif(floor != null && areaType != null) {\n    FabricArea.Create(doc, floor.Id, areaType.Id, 45 * Math.PI / 180.0);\n}"}
{"prompt":"Generate a Fabric Area reinforcement in a floor, with a 45° angle.","completion":"Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFabricAreaType areaType = new FilteredElementCollector(doc).OfClass(typeof(FabricAreaType)).FirstOrDefault() as FabricAreaType;\nif(floor != null && areaType != null) {\n    FabricArea.Create(doc, floor.Id, areaType.Id, 45 * Math.PI / 180.0);\n}"}
{"prompt":"Crea una lámina de refuerzo (Fabric Sheet) en una columna, usando un contorno de curvas.","completion":"FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nFabricSheetType sheetType = new FilteredElementCollector(doc).OfClass(typeof(FabricSheetType)).FirstOrDefault() as FabricSheetType;\nif(column != null && sheetType != null) {\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(-0.5,-0.5,0), new XYZ(0.5,0.5,0), column.GetTransform().BasisX);\n    FabricSheet.Create(doc, column.Id, sheetType.Id, new List<CurveLoop>{profile});\n}"}
{"prompt":"Create a Fabric Sheet reinforcement on a column, using a curve contour.","completion":"FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nFabricSheetType sheetType = new FilteredElementCollector(doc).OfClass(typeof(FabricSheetType)).FirstOrDefault() as FabricSheetType;\nif(column != null && sheetType != null) {\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(-0.5,-0.5,0), new XYZ(0.5,0.5,0), column.GetTransform().BasisX);\n    FabricSheet.Create(doc, column.Id, sheetType.Id, new List<CurveLoop>{profile});\n}"}
{"prompt":"Selecciona un tipo de hilo de refuerzo (FabricWireType) llamado '8mm'.","completion":"FabricWireType wireType = new FilteredElementCollector(doc).OfClass(typeof(FabricWireType)).Cast<FabricWireType>().FirstOrDefault(ft => ft.Name.Contains(\"8mm\"));"}
{"prompt":"Select a FabricWireType named '8mm'.","completion":"FabricWireType wireType = new FilteredElementCollector(doc).OfClass(typeof(FabricWireType)).Cast<FabricWireType>().FirstOrDefault(ft => ft.Name.Contains(\"8mm\"));"}
{"prompt":"Crea un refuerzo de trayectoria (Path Reinforcement) en una viga a lo largo de su curva de centro.","completion":"FamilyInstance beam = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nPathReinforcementType pathType = new FilteredElementCollector(doc).OfClass(typeof(PathReinforcementType)).FirstOrDefault() as PathReinforcementType;\nif(beam != null && pathType != null) {\n    LocationCurve lc = beam.Location as LocationCurve;\n    PathReinforcement.Create(doc, beam, new List<Curve>{lc.Curve}, pathType.Id, false);\n}"}
{"prompt":"Create a Path Reinforcement on a beam along its center curve.","completion":"FamilyInstance beam = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nPathReinforcementType pathType = new FilteredElementCollector(doc).OfClass(typeof(PathReinforcementType)).FirstOrDefault() as PathReinforcementType;\nif(beam != null && pathType != null) {\n    LocationCurve lc = beam.Location as LocationCurve;\n    PathReinforcement.Create(doc, beam, new List<Curve>{lc.Curve}, pathType.Id, false);\n}"}
{"prompt":"Agrupa barras en un contenedor de refuerzo (Rebar Container) alrededor de una zapata.","completion":"FamilyInstance footing = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif(footing != null)\n{\n    RebarContainer rebarContainer = RebarContainer.Create(doc, footing);\n    // Aquí se añadirían las RebarContainerItems al contenedor\n}"}
{"prompt":"Group rebars in a Rebar Container around a footing.","completion":"FamilyInstance footing = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif(footing != null)\n{\n    RebarContainer rebarContainer = RebarContainer.Create(doc, footing);\n    // RebarContainerItems would be added to the container here\n}"}
{"prompt":"Crea una instancia de ensamblaje (AssemblyInstance) para un conjunto de muros seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> wallIds = uidoc.Selection.PickElementsByCategory(BuiltInCategory.OST_Walls, \"Selecciona muros para el ensamblaje\").Select(e => e.Id).ToList();\nif (wallIds.Any())\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, wallIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    assemblyInstance.Name = \"Ensamblado de Muros Perimetrales\";\n}"}
{"prompt":"Create an AssemblyInstance for a set of selected walls.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> wallIds = uidoc.Selection.PickElementsByCategory(BuiltInCategory.OST_Walls, \"Select walls for the assembly\").Select(e => e.Id).ToList();\nif (wallIds.Any())\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, wallIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    assemblyInstance.Name = \"Perimeter Walls Assembly\";\n}"}
{"prompt":"Dibuja una región rellena (Filled Region) con un patrón de relleno y un contorno de curvas.","completion":"View activeView = doc.ActiveView;\nFilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\nif(filledRegionType != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(5,5,0), activeView.ViewDirection);\n    FilledRegion.Create(doc, filledRegionType.Id, activeView.Id, new List<CurveLoop>{profile});\n}"}
{"prompt":"Draw a Filled Region with a fill pattern and a curve contour.","completion":"View activeView = doc.ActiveView;\nFilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\nif(filledRegionType != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(5,5,0), activeView.ViewDirection);\n    FilledRegion.Create(doc, filledRegionType.Id, activeView.Id, new List<CurveLoop>{profile});\n}"}
{"prompt":"Añade un punto de referencia (ReferencePoint) en las coordenadas X=1, Y=2, Z=3.","completion":"// Este código solo es válido dentro del editor de familias (Family Document)\nif(doc.IsFamilyDocument)\n{\n    ReferencePoint refPoint = doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));\n}"}
{"prompt":"Add a ReferencePoint at coordinates X=1, Y=2, Z=3.","completion":"// This code is only valid inside the family editor (Family Document)\nif(doc.IsFamilyDocument)\n{\n    ReferencePoint refPoint = doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));\n}"}
{"prompt":"Crea una etiqueta independiente (Independent Tag) para la primera puerta en la vista.","completion":"FamilyInstance door = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif(door != null)\n{\n    LocationPoint loc = door.Location as LocationPoint;\n    if(loc != null) IndependentTag.Create(doc, doc.ActiveView.Id, new Reference(door), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n}"}
{"prompt":"Create an Independent Tag for the first door in the view.","completion":"FamilyInstance door = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif(door != null)\n{\n    LocationPoint loc = door.Location as LocationPoint;\n    if(loc != null) IndependentTag.Create(doc, doc.ActiveView.Id, new Reference(door), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n}"}
{"prompt":"Crea un esquema de área (Area Scheme) llamado 'Zonas de Uso'.","completion":"AreaScheme newScheme = AreaScheme.Create(doc, \"Zonas de Uso\");"}
{"prompt":"Create an Area Scheme named 'Usage Zones'.","completion":"AreaScheme newScheme = AreaScheme.Create(doc, \"Usage Zones\");"}
{"prompt":"Crea un área (Area) en el esquema 'Zonas de Uso' con un contorno de curvas.","completion":"AreaScheme scheme = new FilteredElementCollector(doc).OfClass(typeof(AreaScheme)).FirstOrDefault(s => s.Name == \"Zonas de Uso\") as AreaScheme;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(scheme != null && level != null)\n{\n    Area a = doc.Create.NewArea(level, new UV(1,1));\n    // Se necesitarían AreaBoundaryLines para definir el contorno del área.\n}"}
{"prompt":"Create an Area in the 'Usage Zones' scheme with a curve contour.","completion":"AreaScheme scheme = new FilteredElementCollector(doc).OfClass(typeof(AreaScheme)).FirstOrDefault(s => s.Name == \"Usage Zones\") as AreaScheme;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(scheme != null && level != null)\n{\n    Area a = doc.Create.NewArea(level, new UV(1,1));\n    // AreaBoundaryLines would be needed to define the area's contour.\n}"}
{"prompt":"Crea un elemento de patrón de trama de materiales (MaterialPlotPatternElement) llamado 'PatrónDiagonal'.","completion":"Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault() as Material;\nFillPatternElement pattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Diagonal\")) as FillPatternElement;\nif(material != null && pattern != null)\n{\n    material.SurfaceForegroundPatternId = pattern.Id;\n}"}
{"prompt":"Create a material plot pattern element named 'DiagonalPattern'.","completion":"Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault() as Material;\nFillPatternElement pattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Diagonal\")) as FillPatternElement;\nif(material != null && pattern != null)\n{\n    material.SurfaceForegroundPatternId = pattern.Id;\n}"}
{"prompt":"Crea un elemento de patrón de relleno de color (ColorFillPatternElement) llamado 'RellenoAzul'.","completion":"FillPatternElement pattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.GetFillPattern().IsSolidFill) as FillPatternElement;\nif(pattern != null)\n{\n    ColorFillScheme colorFillScheme = new FilteredElementCollector(doc).OfClass(typeof(ColorFillScheme)).FirstOrDefault() as ColorFillScheme;\n    if(colorFillScheme != null) colorFillScheme.CreateEntry(new Color(0,0,255), pattern.Id, \"RellenoAzul\");\n}"}
{"prompt":"Create a color fill pattern element named 'BlueFill'.","completion":"FillPatternElement pattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.GetFillPattern().IsSolidFill) as FillPatternElement;\nif(pattern != null)\n{\n    ColorFillScheme colorFillScheme = new FilteredElementCollector(doc).OfClass(typeof(ColorFillScheme)).FirstOrDefault() as ColorFillScheme;\n    if(colorFillScheme != null) colorFillScheme.CreateEntry(new Color(0,0,255), pattern.Id, \"BlueFill\");\n}"}
{"prompt":"Duplica la vista de plan 'Level 2' como plantilla de vista.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 2\") as ViewPlan;\nif(viewToDuplicate != null && viewToDuplicate.CanBeTemplate())\n{\n    viewToDuplicate.IsTemplate = true;\n    viewToDuplicate.Name = \"Plantilla Nivel 2\";\n}"}
{"prompt":"Duplicate the 'Level 2' plan view as a view template.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 2\") as ViewPlan;\nif(viewToDuplicate != null && viewToDuplicate.CanBeTemplate())\n{\n    viewToDuplicate.IsTemplate = true;\n    viewToDuplicate.Name = \"Level 2 Template\";\n}"}
{"prompt":"Crea una vista 3D (View3D) con caja de sección activada.","completion":"ViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\nif(vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    view3d.IsSectionBoxActive = true;\n}"}
{"prompt":"Create a 3D view (View3D) with the section box enabled.","completion":"ViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\nif(vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    view3d.IsSectionBoxActive = true;\n}"}
{"prompt":"Inserta un enlace CAD (ImportInstance) de 'BasePlan.dwg' en la vista activa.","completion":"string filePath = @\"C:\\CAD\\BasePlan.dwg\";\nif(File.Exists(filePath))\n{\n    DWGImportOptions options = new DWGImportOptions();\n    options.Placement = ImportPlacement.Origin;\n    ElementId linkId;\n    doc.Import(filePath, options, doc.ActiveView, out linkId);\n}"}
{"prompt":"Insert a CAD link (ImportInstance) of 'BasePlan.dwg' into the active view.","completion":"string filePath = @\"C:\\CAD\\BasePlan.dwg\";\nif(File.Exists(filePath))\n{\n    DWGImportOptions options = new DWGImportOptions();\n    options.Placement = ImportPlacement.Origin;\n    ElementId linkId;\n    doc.Import(filePath, options, doc.ActiveView, out linkId);\n}"}
{"prompt":"Crea un punto de levantamiento (Survey Point) en X=0, Y=0, Z=0.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsSurveyPoint);\nif(surveyPoint == null)\n{\n    // La creación directa no es posible, se modifica el existente.\n}\n// Mover el punto de levantamiento existente\nif(surveyPoint != null) ElementTransformUtils.MoveElement(doc, surveyPoint.Id, -surveyPoint.Position);"}
{"prompt":"Create a Survey Point at X=0, Y=0, Z=0.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsSurveyPoint);\nif(surveyPoint == null)\n{\n    // Direct creation is not possible, modify the existing one.\n}\n// Move the existing survey point\nif(surveyPoint != null) ElementTransformUtils.MoveElement(doc, surveyPoint.Id, -surveyPoint.Position);"}
{"prompt":"Crea un filtro de parámetro de elemento (ElementParameterFilter) que seleccione muros con marca de tipo 'W-EX'.","completion":"ElementId typeMarkParamId = new ElementId(BuiltInParameter.ALL_MODEL_TYPE_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(typeMarkParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"W-EX\");\nElementFilter filter = new ElementParameterFilter(rule);\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElements();"}
{"prompt":"Create an ElementParameterFilter that selects walls with a type mark of 'W-EX'.","completion":"ElementId typeMarkParamId = new ElementId(BuiltInParameter.ALL_MODEL_TYPE_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(typeMarkParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"W-EX\");\nElementFilter filter = new ElementParameterFilter(rule);\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElements();"}
{"prompt":"Crea un espacio MEP (MEPSpace) en un nivel dado en coordenadas UV(5,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(level != null)\n{\n    MEPSpace space = MEPSpace.Create(doc, level, new UV(5,5));\n}"}
{"prompt":"Create an MEPSpace on a given level at UV coordinates (5,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(level != null)\n{\n    MEPSpace space = MEPSpace.Create(doc, level, new UV(5,5));\n}"}
{"prompt":"Crea un DirectShape de categoría GenericModel con un sólido de caja de 2×2×2 metros.","completion":"List<GeometryObject> geomList = new List<GeometryObject>();\nSolid box = SolidUtils.CreateExtrusion(CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(2,2,0), XYZ.BasisZ), XYZ.BasisZ, 2);\ngeomList.Add(box);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\nds.SetShape(geomList);"}
{"prompt":"Create a DirectShape of category GenericModel with a 2x2x2 meter box solid.","completion":"List<GeometryObject> geomList = new List<GeometryObject>();\nSolid box = SolidUtils.CreateExtrusion(CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(2,2,0), XYZ.BasisZ), XYZ.BasisZ, 2);\ngeomList.Add(box);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\nds.SetShape(geomList);"}
{"prompt":"Inserta un componente adaptativo de familia \"AdaptivePoint\" en tres puntos dados.","completion":"// Suponiendo que rp1, rp2, rp3 son ReferencePoint existentes\nFamilySymbol adaptiveSymbol = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).FirstOrDefault(s => s.Family.FamilyPlacementType == FamilyPlacementType.Adaptive && s.Name == \"AdaptivePoint\") as FamilySymbol;\nif(adaptiveSymbol != null)\n{\n    if(!adaptiveSymbol.IsActive) adaptiveSymbol.Activate();\n    AdaptiveComponentInstanceUtils.CreateAdaptiveComponentInstance(doc, adaptiveSymbol, new List<ReferencePoint>{rp1, rp2, rp3});\n}"}
{"prompt":"Insert an adaptive component of family \"AdaptivePoint\" at three given points.","completion":"// Assuming rp1, rp2, rp3 are existing ReferencePoints\nFamilySymbol adaptiveSymbol = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).FirstOrDefault(s => s.Family.FamilyPlacementType == FamilyPlacementType.Adaptive && s.Name == \"AdaptivePoint\") as FamilySymbol;\nif(adaptiveSymbol != null)\n{\n    if(!adaptiveSymbol.IsActive) adaptiveSymbol.Activate();\n    AdaptiveComponentInstanceUtils.CreateAdaptiveComponentInstance(doc, adaptiveSymbol, new List<ReferencePoint>{rp1, rp2, rp3});\n}"}
{"prompt":"Crea un parámetro compartido de tipo entero llamado \"LoadBearing\" y aplícalo a la categoría de muros.","completion":"string sharedParamFile = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamFile) || !File.Exists(sharedParamFile)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\shared_params.txt\"; File.Create(sharedParamFile).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = defFile.Groups.EnsureDefinitionGroup(\"Structural\");\nExternalDefinition def = group.Definitions.Create(new ExternalDefinitionCreationOptions(\"LoadBearing\", SpecTypeId.Boolean.YesNo)) as ExternalDefinition;\nCategorySet cats = doc.Application.Create.NewCategorySet();\ncats.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\nInstanceBinding bind = doc.Application.Create.NewInstanceBinding(cats);\ndoc.ParameterBindings.Insert(def, bind, BuiltInParameterGroup.PG_STRUCTURAL);"}
{"prompt":"Create a shared integer parameter named \"LoadBearing\" and apply it to the walls category.","completion":"string sharedParamFile = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamFile) || !File.Exists(sharedParamFile)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\shared_params.txt\"; File.Create(sharedParamFile).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = defFile.Groups.EnsureDefinitionGroup(\"Structural\");\nExternalDefinition def = group.Definitions.Create(new ExternalDefinitionCreationOptions(\"LoadBearing\", SpecTypeId.Boolean.YesNo)) as ExternalDefinition;\nCategorySet cats = doc.Application.Create.NewCategorySet();\ncats.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\nInstanceBinding bind = doc.Application.Create.NewInstanceBinding(cats);\ndoc.ParameterBindings.Insert(def, bind, BuiltInParameterGroup.PG_STRUCTURAL);"}
{"prompt":"Mueve un muro en una SubTransaction a una nueva posición X=5.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif(wall != null)\n{\n    using(SubTransaction st = new SubTransaction(doc))\n    {\n        st.Start();\n        ElementTransformUtils.MoveElement(doc, wall.Id, new XYZ(5,0,0));\n        st.Commit();\n    }\n}"}
{"prompt":"Move a wall in a SubTransaction to a new position X=5.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif(wall != null)\n{\n    using(SubTransaction st = new SubTransaction(doc))\n    {\n        st.Start();\n        ElementTransformUtils.MoveElement(doc, wall.Id, new XYZ(5,0,0));\n        st.Commit();\n    }\n}"}
{"prompt":"Crea un SketchPlane basado en un círculo de radio 5m centrado en el origen.","completion":"Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, XYZ.Zero);\nSketchPlane sp = SketchPlane.Create(doc, plane);\nArc arc = Arc.Create(plane, 5, 0, 2*Math.PI);\ndoc.Create.NewModelCurve(arc, sp);"}
{"prompt":"Create a SketchPlane based on a circle with a 5m radius centered at the origin.","completion":"Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, XYZ.Zero);\nSketchPlane sp = SketchPlane.Create(doc, plane);\nArc arc = Arc.Create(plane, 5, 0, 2*Math.PI);\ndoc.Create.NewModelCurve(arc, sp);"}
{"prompt":"Cambia la visibilidad de cortes de muros en la vista activa deshabilitándolos.","completion":"View activeView = doc.ActiveView;\nOverrideGraphicSettings ogs = new OverrideGraphicSettings();\nogs.SetCutPatternVisible(false);\nactiveView.SetCategoryOverrides(new ElementId(BuiltInCategory.OST_Walls), ogs);"}
{"prompt":"Change the visibility of wall cuts in the active view by disabling them.","completion":"View activeView = doc.ActiveView;\nOverrideGraphicSettings ogs = new OverrideGraphicSettings();\nogs.SetCutPatternVisible(false);\nactiveView.SetCategoryOverrides(new ElementId(BuiltInCategory.OST_Walls), ogs);"}
{"prompt":"Exporta el documento a un archivo IFC con versión IFC4x3.","completion":"IFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4x3;\ndoc.Export(@\"C:\\Exports\\\", \"Model.ifc\", options);"}
{"prompt":"Export the document to an IFC file with version IFC4x3.","completion":"IFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4x3;\ndoc.Export(@\"C:\\Exports\\\", \"Model.ifc\", options);"}
{"prompt":"Inicia y confirma una transacción para duplicar el tipo de muro \"Basic Wall\".","completion":"WallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Basic Wall\");\nif(wt != null)\n{\n    WallType newWt = wt.Duplicate(\"Basic Wall Copy\") as WallType;\n}"}
{"prompt":"Start and commit a transaction to duplicate the \"Basic Wall\" type.","completion":"WallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Basic Wall\");\nif(wt != null)\n{\n    WallType newWt = wt.Duplicate(\"Basic Wall Copy\") as WallType;\n}"}
{"prompt":"Crea un nuevo View3D orientado al punto (10,10,10) mirando al origen.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v=>v.ViewFamily==ViewFamily.ThreeDimensional);\nif(vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    ViewOrientation3D vo = new ViewOrientation3D(new XYZ(10,10,10), XYZ.Zero, XYZ.BasisZ);\n    view.SetOrientation(vo);\n}"}
{"prompt":"Create a new View3D oriented from point (10,10,10) looking at the origin.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v=>v.ViewFamily==ViewFamily.ThreeDimensional);\nif(vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    ViewOrientation3D vo = new ViewOrientation3D(new XYZ(10,10,10), XYZ.Zero, XYZ.BasisZ);\n    view.SetOrientation(vo);\n}"}
{"prompt":"Dibuja un texto de modelo en la vista activa en (2,2,0) con contenido \"Proyecto BIM\".","completion":"TextElementOptions opts = new TextElementOptions() { HorizontalAlignment = HorizontalAlignment.Center, VerticalAlignment = VerticalAlignment.Middle };\nModelText mt = ModelText.Create(doc, \"Proyecto BIM\", new ElementId(-1), doc.ActiveView.SketchPlane.Id, new XYZ(2,2,0), 1.0, opts);"}
{"prompt":"Draw a model text in the active view at (2,2,0) with the content \"BIM Project\".","completion":"TextElementOptions opts = new TextElementOptions() { HorizontalAlignment = HorizontalAlignment.Center, VerticalAlignment = VerticalAlignment.Middle };\nModelText mt = ModelText.Create(doc, \"BIM Project\", new ElementId(-1), doc.ActiveView.SketchPlane.Id, new XYZ(2,2,0), 1.0, opts);"}
{"prompt":"Añade un material llamado \"VidrioReflectante\" con reflectividad al 80%.","completion":"ElementId materialId = Material.Create(doc, \"VidrioReflectante\");\nMaterial material = doc.GetElement(materialId) as Material;\nAppearanceAssetElement appearanceAsset = AppearanceAssetElement.Create(doc, \"VidrioReflectante_Asset\", false);\nusing(AppearanceAssetEditScope scope = new AppearanceAssetEditScope(appearanceAsset.GetRenderingAsset()))\n{\n    Asset anAsset = scope.Start();\n    AssetPropertyDouble reflectivity = anAsset.FindByName(\"generic_reflectivity\") as AssetPropertyDouble;\n    if(reflectivity != null) reflectivity.Value = 0.8;\n    scope.Commit(true);\n}\nmaterial.AppearanceAssetId = appearanceAsset.Id;"}
{"prompt":"Add a material named \"ReflectiveGlass\" with 80% reflectivity.","completion":"ElementId materialId = Material.Create(doc, \"ReflectiveGlass\");\nMaterial material = doc.GetElement(materialId) as Material;\nAppearanceAssetElement appearanceAsset = AppearanceAssetElement.Create(doc, \"ReflectiveGlass_Asset\", false);\nusing(AppearanceAssetEditScope scope = new AppearanceAssetEditScope(appearanceAsset.GetRenderingAsset()))\n{\n    Asset anAsset = scope.Start();\n    AssetPropertyDouble reflectivity = anAsset.FindByName(\"generic_reflectivity\") as AssetPropertyDouble;\n    if(reflectivity != null) reflectivity.Value = 0.8;\n    scope.Commit(true);\n}\nmaterial.AppearanceAssetId = appearanceAsset.Id;"}
{"prompt":"Crea un DirectShape de categoría Topography usando una lista de puntos.","completion":"List<XYZ> points = new List<XYZ>{new XYZ(0,0,0),new XYZ(10,0,1),new XYZ(0,10,2)};\nTessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\nbuilder.AddFace(new TessellatedFace(points, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_Topography));\nds.SetShape(result.GetGeometricalObjects());"}
{"prompt":"Create a DirectShape of category Topography using a list of points.","completion":"List<XYZ> points = new List<XYZ>{new XYZ(0,0,0),new XYZ(10,0,1),new XYZ(0,10,2)};\nTessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\nbuilder.AddFace(new TessellatedFace(points, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_Topography));\nds.SetShape(result.GetGeometricalObjects());"}
{"prompt":"Carga un enlace DWG preservando colores y lo añade a la vista activa.","completion":"string filePath = @\"C:\\CAD\\Planos.dwg\";\nif(File.Exists(filePath))\n{\n    DWGImportOptions opts = new DWGImportOptions();\n    opts.ColorMode = ImportColorMode.Preserved;\n    ElementId linkId;\n    doc.Link(filePath, opts, doc.ActiveView, out linkId);\n}"}
{"prompt":"Load a DWG link preserving colors and add it to the active view.","completion":"string filePath = @\"C:\\CAD\\Plans.dwg\";\nif(File.Exists(filePath))\n{\n    DWGImportOptions opts = new DWGImportOptions();\n    opts.ColorMode = ImportColorMode.Preserved;\n    ElementId linkId;\n    doc.Link(filePath, opts, doc.ActiveView, out linkId);\n}"}
{"prompt":"Obtén todas las vistas de plano y lista sus nombres.","completion":"IList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().ToList();\nStringBuilder viewNames = new StringBuilder();\nforeach(var vp in planViews)\n{\n    viewNames.AppendLine(vp.Name);\n}\nTaskDialog.Show(\"Vistas de Plano\", viewNames.ToString());"}
{"prompt":"Get all plan views and list their names.","completion":"IList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().ToList();\nStringBuilder viewNames = new StringBuilder();\nforeach(var vp in planViews)\n{\n    viewNames.AppendLine(vp.Name);\n}\nTaskDialog.Show(\"Plan Views\", viewNames.ToString());"}
{"prompt":"Crea un nivel nuevo llamado \"Mezzanine\" a 7.5m de elevación.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(7.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nnewLevel.Name = \"Mezzanine\";"}
{"prompt":"Create a new level named \"Mezzanine\" at a 7.5m elevation.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(7.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nnewLevel.Name = \"Mezzanine\";"}
{"prompt":"Define un filtro de vista para ocultar líneas de detalle.","completion":"ElementId detailCategoryId = new ElementId(BuiltInCategory.OST_Lines);\nParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Ocultar Líneas de Detalle\", new List<ElementId>{detailCategoryId}, new ElementFilter[0]);\ndoc.ActiveView.AddFilter(pfe.Id);\ndoc.ActiveView.SetFilterVisibility(pfe.Id, false);"}
{"prompt":"Define a view filter to hide detail lines.","completion":"ElementId detailCategoryId = new ElementId(BuiltInCategory.OST_Lines);\nParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Hide Detail Lines\", new List<ElementId>{detailCategoryId}, new ElementFilter[0]);\ndoc.ActiveView.AddFilter(pfe.Id);\ndoc.ActiveView.SetFilterVisibility(pfe.Id, false);"}
{"prompt":"Genera un bounding box de 10×10×3 m y crea una sección con él.","completion":"BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\nsectionBox.Min = new XYZ(0,0,0);\nsectionBox.Max = new XYZ(10,10,3);\nViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\nif(sectionVFT != null)\n{\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}
{"prompt":"Generate a 10x10x3 m bounding box and create a section with it.","completion":"BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\nsectionBox.Min = new XYZ(0,0,0);\nsectionBox.Max = new XYZ(10,10,3);\nViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\nif(sectionVFT != null)\n{\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}
{"prompt":"Crea un nuevo grupo de trabajo (Workset) llamado \"Estructura\".","completion":"if(doc.IsWorkshared)\n{\n    Workset.Create(doc, \"Estructura\");\n}"}
{"prompt":"Create a new Workset named \"Structure\".","completion":"if(doc.IsWorkshared)\n{\n    Workset.Create(doc, \"Structure\");\n}"}
{"prompt":"Asigna todos los muros existentes al Workset \"Estructura\".","completion":"if(doc.IsWorkshared)\n{\n    Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w => w.Name == \"Estructura\");\n    if(ws != null)\n    {\n        var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().ToElementIds();\n        WorksharingUtils.ChangeWorkset(doc, walls, ws.Id);\n    }\n}"}
{"prompt":"Assign all existing walls to the \"Structure\" Workset.","completion":"if(doc.IsWorkshared)\n{\n    Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w => w.Name == \"Structure\");\n    if(ws != null)\n    {\n        var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().ToElementIds();\n        WorksharingUtils.ChangeWorkset(doc, walls, ws.Id);\n    }\n}"}
{"prompt":"Inserta un punto de referencia SharedBasePoint y lo posiciona en (1,1,0).","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsSurveyPoint);\nif(projectBasePoint != null) ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, new XYZ(1,1,0) - projectBasePoint.Position);"}
{"prompt":"Insert a SharedBasePoint reference point and position it at (1,1,0).","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsSurveyPoint);\nif(projectBasePoint != null) ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, new XYZ(1,1,0) - projectBasePoint.Position);"}
{"prompt":"Crea un componente de techo (Roof) extruido con pendiente del 10%.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nif(level != null && roofType != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(10,10,0), XYZ.BasisY);\n    ReferencePlane refPlane = ReferencePlane.Create(doc, new XYZ(0,0,level.Elevation), XYZ.BasisX, XYZ.BasisZ, doc.ActiveView);\n    ExtrusionRoof extrusionRoof = doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10);\n    extrusionRoof.get_Parameter(BuiltInParameter.ROOF_SLOPE).Set(0.1);\n}"}
{"prompt":"Create an extruded Roof component with a 10% slope.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nif(level != null && roofType != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(10,10,0), XYZ.BasisY);\n    ReferencePlane refPlane = ReferencePlane.Create(doc, new XYZ(0,0,level.Elevation), XYZ.BasisX, XYZ.BasisZ, doc.ActiveView);\n    ExtrusionRoof extrusionRoof = doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10);\n    extrusionRoof.get_Parameter(BuiltInParameter.ROOF_SLOPE).Set(0.1);\n}"}
{"prompt":"Crea una nota de texto ligada a un muro con contenido \"Muro Cortina\".","completion":"Wall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(wall != null)\n{\n    XYZ textLocation = (wall.Location as LocationCurve).Curve.Evaluate(0.5, true);\n    TextNote.Create(doc, doc.ActiveView.Id, textLocation, \"Muro Cortina\", TextNoteType.CreateDefault(doc).Id);\n}"}
{"prompt":"Create a text note linked to a wall with the content \"Curtain Wall\".","completion":"Wall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(wall != null)\n{\n    XYZ textLocation = (wall.Location as LocationCurve).Curve.Evaluate(0.5, true);\n    TextNote.Create(doc, doc.ActiveView.Id, textLocation, \"Curtain Wall\", TextNoteType.CreateDefault(doc).Id);\n}"}
{"prompt":"Obtén la tabla de planificación \"Muros\" y exporta sus datos a CSV.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s=>s.Name==\"Muros\");\nif(schedule != null)\n{\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(@\"C:\\Exports\\\", \"Muros.csv\", options);\n}"}
{"prompt":"Get the \"Walls\" schedule and export its data to CSV.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s=>s.Name==\"Walls\");\nif(schedule != null)\n{\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(@\"C:\\Exports\\\", \"Walls.csv\", options);\n}"}
{"prompt":"Crea un RebarShape personalizado con propiedad \"Stirrup\" y tipo \"Rectangular\".","completion":"// La creación de RebarShape programáticamente es muy compleja y generalmente se hace en la interfaz de usuario.\n// Este código muestra cómo encontrar una forma existente.\nRebarShape stirrupShape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).Cast<RebarShape>().FirstOrDefault(s => s.Name.Contains(\"Stirrup\") && s.RebarStyle == RebarStyle.StirrupTie);"}
{"prompt":"Create a custom RebarShape with \"Stirrup\" property and \"Rectangular\" type.","completion":"// Creating RebarShape programmatically is very complex and usually done in the UI.\n// This code shows how to find an existing shape.\nRebarShape stirrupShape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).Cast<RebarShape>().FirstOrDefault(s => s.Name.Contains(\"Stirrup\") && s.RebarStyle == RebarStyle.StirrupTie);"}
{"prompt":"Genera un filtro de planta para mostrar solo habitaciones con área >10m2.","completion":"ViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Rooms));\nScheduleDefinition def = schedule.Definition;\nSchedulableField areaField = def.GetSchedulableFields().FirstOrDefault(f=>f.ParameterId==new ElementId(BuiltInParameter.ROOM_AREA));\nif(areaField != null)\n{\n    def.AddField(areaField);\n    def.AddFilter(new ScheduleFilter(areaField.FieldId, ScheduleFilterType.GreaterThan, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.SquareMeters)));\n}"}
{"prompt":"Generate a schedule filter to show only rooms with an area >10m².","completion":"ViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Rooms));\nScheduleDefinition def = schedule.Definition;\nSchedulableField areaField = def.GetSchedulableFields().FirstOrDefault(f=>f.ParameterId==new ElementId(BuiltInParameter.ROOM_AREA));\nif(areaField != null)\n{\n    def.AddField(areaField);\n    def.AddFilter(new ScheduleFilter(areaField.FieldId, ScheduleFilterType.GreaterThan, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.SquareMeters)));\n}"}
{"prompt":"Permite al usuario seleccionar un muro y luego resáltalo.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Por favor, selecciona un muro\");\nif (pickedRef != null && pickedRef.ElementId != ElementId.InvalidElementId)\n{\n    uidoc.Selection.SetElementIds(new List<ElementId>{pickedRef.ElementId});\n    uidoc.ShowElements(pickedRef.ElementId);\n}"}
{"prompt":"Allow the user to select a wall and then highlight it.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Please select a wall\");\nif (pickedRef != null && pickedRef.ElementId != ElementId.InvalidElementId)\n{\n    uidoc.Selection.SetElementIds(new List<ElementId>{pickedRef.ElementId});\n    uidoc.ShowElements(pickedRef.ElementId);\n}"}
{"prompt":"Crea una nueva hoja (sheet) A1 usando el primer cajetín (title block) disponible.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    sheet.Name = \"A1 - Planta General\";\n    sheet.SheetNumber = \"A1\";\n}"}
{"prompt":"Create a new A1 sheet using the first available title block.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    sheet.Name = \"A1 - General Plan\";\n    sheet.SheetNumber = \"A1\";\n}"}
{"prompt":"Coloca la vista 'Nivel 1' en la hoja activa en el centro.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 1\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\nif (viewToPlace != null && activeSheet != null && Viewport.CanAddViewToSheet(doc, activeSheet.Id, viewToPlace.Id))\n{\n    BoundingBoxUV sheetBox = activeSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Place the 'Level 1' view in the center of the active sheet.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 1\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\nif (viewToPlace != null && activeSheet != null && Viewport.CanAddViewToSheet(doc, activeSheet.Id, viewToPlace.Id))\n{\n    BoundingBoxUV sheetBox = activeSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Aplica una plantilla de vista llamada 'Plantilla Arquitectónica' a la vista activa.","completion":"View activeView = doc.ActiveView;\nView viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.IsTemplate && v.Name == \"Plantilla Arquitectónica\");\nif (activeView != null && viewTemplate != null && activeView.ViewTemplateId == ElementId.InvalidElementId)\n{\n    activeView.ViewTemplateId = viewTemplate.Id;\n}"}
{"prompt":"Apply a view template named 'Architectural Template' to the active view.","completion":"View activeView = doc.ActiveView;\nView viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.IsTemplate && v.Name == \"Architectural Template\");\nif (activeView != null && viewTemplate != null && activeView.ViewTemplateId == ElementId.InvalidElementId)\n{\n    activeView.ViewTemplateId = viewTemplate.Id;\n}"}
{"prompt":"Crea un circuito eléctrico conectando luminarias a un panel.","completion":"FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nvar fixtures = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds();\nif (panel != null && fixtures.Any())\n{\n    ElectricalSystem.Create(doc, fixtures, panel, ElectricalSystemType.PowerCircuit);\n}"}
{"prompt":"Create an electrical circuit connecting light fixtures to a panel.","completion":"FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nvar fixtures = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds();\nif (panel != null && fixtures.Any())\n{\n    ElectricalSystem.Create(doc, fixtures, panel, ElectricalSystemType.PowerCircuit);\n}"}
{"prompt":"Modela una bandeja de cables (cable tray) entre dos puntos.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif (trayType != null && level != null)\n{\n    XYZ p1 = new XYZ(0,10,3), p2 = new XYZ(15,10,3);\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}
{"prompt":"Model a cable tray between two points.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif (trayType != null && level != null)\n{\n    XYZ p1 = new XYZ(0,10,3), p2 = new XYZ(15,10,3);\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}
{"prompt":"Encuentra todas las colisiones entre tuberías y vigas en el modelo.","completion":"ElementCategoryFilter pipeFilter = new ElementCategoryFilter(BuiltInCategory.OST_PipeCurves);\nElementCategoryFilter beamFilter = new ElementCategoryFilter(BuiltInCategory.OST_StructuralFraming);\nvar pipeCollector = new FilteredElementCollector(doc).WherePasses(pipeFilter);\nvar beamCollector = new FilteredElementCollector(doc).WherePasses(beamFilter);\nvar clashElements = pipeCollector.WherePasses(new ElementIntersectsElementFilter(beamCollector.FirstElement()));\nTaskDialog.Show(\"Clash\", \"Se encontraron \" + clashElements.GetElementCount() + \" colisiones.\");"}
{"prompt":"Find all collisions between pipes and beams in the model.","completion":"ElementCategoryFilter pipeFilter = new ElementCategoryFilter(BuiltInCategory.OST_PipeCurves);\nElementCategoryFilter beamFilter = new ElementCategoryFilter(BuiltInCategory.OST_StructuralFraming);\nvar pipeCollector = new FilteredElementCollector(doc).WherePasses(pipeFilter);\nvar beamCollector = new FilteredElementCollector(doc).WherePasses(beamFilter);\nvar clashElements = pipeCollector.WherePasses(new ElementIntersectsElementFilter(beamCollector.FirstElement()));\nTaskDialog.Show(\"Clash\", \"Found \" + clashElements.GetElementCount() + \" clashes.\");"}
{"prompt":"Muestra un cuadro de diálogo simple al usuario con un mensaje.","completion":"TaskDialog.Show(\"Notificación de Agente\", \"La operación se ha completado exitosamente.\");"}
{"prompt":"Show a simple dialog box to the user with a message.","completion":"TaskDialog.Show(\"Agent Notification\", \"The operation has been completed successfully.\");"}
{"prompt":"Crea un parámetro global de tipo longitud llamado 'AnchoCorredor' con un valor de 1.2 metros.","completion":"if (GlobalParametersManager.IsGlobalParameterValidName(doc, \"AnchoCorredor\"))\n{\n    GlobalParameter gp = GlobalParameter.Create(doc, \"AnchoCorredor\", SpecTypeId.Length);\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters)));\n}"}
{"prompt":"Create a global parameter of type length named 'CorridorWidth' with a value of 1.2 meters.","completion":"if (GlobalParametersManager.IsGlobalParameterValidName(doc, \"CorridorWidth\"))\n{\n    GlobalParameter gp = GlobalParameter.Create(doc, \"CorridorWidth\", SpecTypeId.Length);\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters)));\n}"}
{"prompt":"Obtén la geometría sólida de un elemento seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento\");\nElement elem = doc.GetElement(pickedRef);\nOptions opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\nGeometryElement geoElem = elem.get_Geometry(opt);\nList<Solid> solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();"}
{"prompt":"Get the solid geometry of a selected element.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element\");\nElement elem = doc.GetElement(pickedRef);\nOptions opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\nGeometryElement geoElem = elem.get_Geometry(opt);\nList<Solid> solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();"}
{"prompt":"Alinea la cara de un muro con la cara de otro muro.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara de destino\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara a mover\");\nif (ref1 != null && ref2 != null)\n{\n    doc.Create.NewAlignment(doc.ActiveView, ref1, ref2);\n}"}
{"prompt":"Align the face of a wall with the face of another wall.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Face, \"Select the target face\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Face, \"Select the face to move\");\nif (ref1 != null && ref2 != null)\n{\n    doc.Create.NewAlignment(doc.ActiveView, ref1, ref2);\n}"}
{"prompt":"Crea una forma 'in-situ' de masa usando un 'loft' entre dos perfiles.","completion":"using(Transaction massTrans = new Transaction(doc, \"Create Loft Mass\")){\n    massTrans.Start();\n    InPlaceElement ipe = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\n    SketchPlane sp = SketchPlane.Create(doc, Plane.CreateByNormalAndOrigin(XYZ.BasisZ, XYZ.Zero));\n    CurveLoop p1 = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(5,5,0), XYZ.BasisZ);\n    CurveLoop p2 = CurveLoop.CreateViaRectangle(new XYZ(1,1,10), new XYZ(4,4,10), XYZ.BasisZ);\n    doc.FamilyCreate.NewLoftForm(true, new List<CurveLoop>{p1, p2});\n    ipe.Commit();\n    massTrans.Commit();\n}"}
{"prompt":"Create an in-place mass form using a 'loft' between two profiles.","completion":"using(Transaction massTrans = new Transaction(doc, \"Create Loft Mass\")){\n    massTrans.Start();\n    InPlaceElement ipe = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\n    SketchPlane sp = SketchPlane.Create(doc, Plane.CreateByNormalAndOrigin(XYZ.BasisZ, XYZ.Zero));\n    CurveLoop p1 = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(5,5,0), XYZ.BasisZ);\n    CurveLoop p2 = CurveLoop.CreateViaRectangle(new XYZ(1,1,10), new XYZ(4,4,10), XYZ.BasisZ);\n    doc.FamilyCreate.NewLoftForm(true, new List<CurveLoop>{p1, p2});\n    ipe.Commit();\n    massTrans.Commit();\n}"}
{"prompt":"Cambia el tipo de todas las ventanas de 'Fijo' a 'Abatible'.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Abatible\"));\nif (newType != null)\n{\n    var windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Name.Contains(\"Fijo\")).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Change the type of all 'Fixed' windows to 'Casement'.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Casement\"));\nif (newType != null)\n{\n    var windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Name.Contains(\"Fixed\")).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Recarga el vínculo de Revit más reciente llamado 'Estructura_LINK.rvt'.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"Estructura_LINK.rvt\");\nif (linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Reload the latest Revit link named 'Structure_LINK.rvt'.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"Structure_LINK.rvt\");\nif (linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Crea una vista de plano de planta para el 'Nivel 3'.","completion":"Level level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 3\") as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\nif (level3 != null && vft != null)\n{\n    ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Create a floor plan view for 'Level 3'.","completion":"Level level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\nif (level3 != null && vft != null)\n{\n    ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Calcula y muestra el área total de todas las habitaciones del proyecto.","completion":"double totalArea = 0.0;\nvar rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>();\nforeach (Room room in rooms)\n{\n    totalArea += room.Area;\n}\nTaskDialog.Show(\"Área Total\", $\"El área total de habitaciones es: {UnitUtils.ConvertFromInternalUnits(totalArea, UnitTypeId.SquareMeters).ToString(\"F2\")} m²\");"}
{"prompt":"Calculate and display the total area of all rooms in the project.","completion":"double totalArea = 0.0;\nvar rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>();\nforeach (Room room in rooms)\n{\n    totalArea += room.Area;\n}\nTaskDialog.Show(\"Total Area\", $\"The total room area is: {UnitUtils.ConvertFromInternalUnits(totalArea, UnitTypeId.SquareMeters).ToString(\"F2\")} m²\");"}
{"prompt":"Crea un filtro de vista que resalte en rojo todos los muros con resistencia al fuego de 2 horas.","completion":"ElementId fireRatingParamId = new ElementId(BuiltInParameter.FIRE_RATING);\nParameterValueProvider pvp = new ParameterValueProvider(fireRatingParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"2-hr\");\nElementFilter filter = new ElementParameterFilter(rule);\nParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Muros Cortafuego 2hr\", new List<ElementId>{new ElementId(BuiltInCategory.OST_Walls)}, filter);\nOverrideGraphicSettings ogs = new OverrideGraphicSettings();\nogs.SetCutBackgroundPatternColor(new Color(255,0,0));\nogs.SetSurfaceForegroundPatternColor(new Color(255,0,0));\ndoc.ActiveView.SetFilterOverrides(pfe.Id, ogs);"}
{"prompt":"Create a view filter that highlights in red all walls with a 2-hour fire rating.","completion":"ElementId fireRatingParamId = new ElementId(BuiltInParameter.FIRE_RATING);\nParameterValueProvider pvp = new ParameterValueProvider(fireRatingParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"2-hr\");\nElementFilter filter = new ElementParameterFilter(rule);\nParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"2hr Fire-Rated Walls\", new List<ElementId>{new ElementId(BuiltInCategory.OST_Walls)}, filter);\nOverrideGraphicSettings ogs = new OverrideGraphicSettings();\nogs.SetCutBackgroundPatternColor(new Color(255,0,0));\nogs.SetSurfaceForegroundPatternColor(new Color(255,0,0));\ndoc.ActiveView.SetFilterOverrides(pfe.Id, ogs);"}
{"prompt":"Exporta una lista de todas las familias y sus tipos a un archivo de texto.","completion":"string path = @\"C:\\RevitExports\\FamilyList.txt\";\nusing (StreamWriter writer = new StreamWriter(path))\n{\n    var families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>();\n    foreach (Family fam in families)\n    {\n        writer.WriteLine($\"Familia: {fam.Name}\");\n        foreach (ElementId symbolId in fam.GetFamilySymbolIds())\n        {\n            FamilySymbol sym = doc.GetElement(symbolId) as FamilySymbol;\n            if(sym != null) writer.WriteLine($\"\\tTipo: {sym.Name}\");\n        }\n    }\n}"}
{"prompt":"Export a list of all families and their types to a text file.","completion":"string path = @\"C:\\RevitExports\\FamilyList.txt\";\nusing (StreamWriter writer = new StreamWriter(path))\n{\n    var families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>();\n    foreach (Family fam in families)\n    {\n        writer.WriteLine($\"Family: {fam.Name}\");\n        foreach (ElementId symbolId in fam.GetFamilySymbolIds())\n        {\n            FamilySymbol sym = doc.GetElement(symbolId) as FamilySymbol;\n            if(sym != null) writer.WriteLine($\"\\tType: {sym.Name}\");\n        }\n    }\n}"}
{"prompt":"Cambia un panel de vidrio de un muro cortina por un panel sólido.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nPanelType solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(PanelType)).Cast<PanelType>().FirstOrDefault(pt => pt.Name.Contains(\"Solid\"));\nif (curtainWall != null && solidPanelType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    var panelIds = grid.GetPanelIds();\n    if(panelIds.Any()){\n        Panel panelToChange = doc.GetElement(panelIds.First()) as Panel;\n        if (panelToChange != null) panelToChange.Symbol = solidPanelType;\n    }\n}"}
{"prompt":"Change a glass panel in a curtain wall to a solid panel.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nPanelType solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(PanelType)).Cast<PanelType>().FirstOrDefault(pt => pt.Name.Contains(\"Solid\"));\nif (curtainWall != null && solidPanelType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    var panelIds = grid.GetPanelIds();\n    if(panelIds.Any()){\n        Panel panelToChange = doc.GetElement(panelIds.First()) as Panel;\n        if (panelToChange != null) panelToChange.Symbol = solidPanelType;\n    }\n}"}
{"prompt":"Obtén las coordenadas del punto base y del punto de reconocimiento del proyecto.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsSurveyPoint);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsSurveyPoint);\nif(surveyPoint != null && projectBasePoint != null) {\n    XYZ surveyCoords = surveyPoint.Position;\n    XYZ projectCoords = projectBasePoint.Position;\n    TaskDialog.Show(\"Coordenadas\", $\"Punto de Levantamiento: {surveyCoords}\\nPunto Base: {projectCoords}\");\n}"}
{"prompt":"Get the coordinates of the project base point and survey point.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsSurveyPoint);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsSurveyPoint);\nif(surveyPoint != null && projectBasePoint != null) {\n    XYZ surveyCoords = surveyPoint.Position;\n    XYZ projectCoords = projectBasePoint.Position;\n    TaskDialog.Show(\"Coordinates\", $\"Survey Point: {surveyCoords}\\nProject Base Point: {projectCoords}\");\n}"}
{"prompt":"Crea una región rellenada (filled region) con un patrón de 'Concreto' en la vista activa.","completion":"FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\"));\nif (regionType != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(5,5,0), doc.ActiveView.ViewDirection);\n    FilledRegion.Create(doc, regionType.Id, doc.ActiveView.Id, new List<CurveLoop>{profile});\n}"}
{"prompt":"Create a filled region with a 'Concrete' pattern in the active view.","completion":"FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\"));\nif (regionType != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(5,5,0), doc.ActiveView.ViewDirection);\n    FilledRegion.Create(doc, regionType.Id, doc.ActiveView.Id, new List<CurveLoop>{profile});\n}"}
{"prompt":"Encuentra el elemento de pórtico estructural con la marca 'B-101'.","completion":"Element framingElement = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_StructuralFraming)\n    .WhereElementIsNotElementType()\n    .FirstOrDefault(e => e.get_Parameter(BuiltInParameter.ALL_MODEL_MARK).AsString() == \"B-101\");"}
{"prompt":"Find the structural framing element with the mark 'B-101'.","completion":"Element framingElement = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_StructuralFraming)\n    .WhereElementIsNotElementType()\n    .FirstOrDefault(e => e.get_Parameter(BuiltInParameter.ALL_MODEL_MARK).AsString() == \"B-101\");"}
{"prompt":"Crea una losa de cimentación de 20x15 metros.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundationLevel != null && slabType != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(20,15,0), XYZ.BasisZ);\n    Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n}"}
{"prompt":"Create a 20x15 meter foundation slab.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundationLevel != null && slabType != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(20,15,0), XYZ.BasisZ);\n    Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n}"}
{"prompt":"Añade montantes (mullions) a todas las líneas de rejilla de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif (curtainWall != null && mullionType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    foreach (ElementId gridLineId in grid.GetVGridLineIds()) grid.AddMullions(doc.GetElement(gridLineId) as CurtainGridLine, mullionType, false);\n    foreach (ElementId gridLineId in grid.GetUGridLineIds()) grid.AddMullions(doc.GetElement(gridLineId) as CurtainGridLine, mullionType, false);\n}"}
{"prompt":"Add mullions to all grid lines of a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif (curtainWall != null && mullionType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    foreach (ElementId gridLineId in grid.GetVGridLineIds()) grid.AddMullions(doc.GetElement(gridLineId) as CurtainGridLine, mullionType, false);\n    foreach (ElementId gridLineId in grid.GetUGridLineIds()) grid.AddMullions(doc.GetElement(gridLineId) as CurtainGridLine, mullionType, false);\n}"}
{"prompt":"Rota el elemento seleccionado 45 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nElement elem = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nif (lp != null)\n{\n    Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n    ElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI / 4.0);\n}"}
{"prompt":"Rotate the selected element 45 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nElement elem = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nif (lp != null)\n{\n    Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n    ElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI / 4.0);\n}"}
{"prompt":"Crea una apertura de hueco (shaft) que atraviese desde el Nivel 1 hasta el Nivel 3.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 3\") as Level;\nif(bottomLevel != null && topLevel != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(5,5,0), new XYZ(8,8,0), XYZ.BasisZ);\n    doc.Create.NewOpening(bottomLevel, topLevel, profile, true);\n}"}
{"prompt":"Create a shaft opening that passes from Level 1 to Level 3.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nif(bottomLevel != null && topLevel != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(5,5,0), new XYZ(8,8,0), XYZ.BasisZ);\n    doc.Create.NewOpening(bottomLevel, topLevel, profile, true);\n}"}
{"prompt":"Obtén todos los materiales y sus volúmenes de un muro compuesto seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nWall wall = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\")) as Wall;\nif (wall != null)\n{\n    double wallArea = wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED).AsDouble();\n    CompoundStructure cs = wall.WallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        CompoundStructureLayer layer = cs.GetLayer(i);\n        Material material = doc.GetElement(layer.MaterialId) as Material;\n        if(material != null)\n        {\n            double volume = layer.Width * wallArea;\n            TaskDialog.Show(\"Material\", $\"Material: {material.Name}, Volumen aprox: {UnitUtils.ConvertFromInternalUnits(volume, UnitTypeId.CubicMeters)} m³\");\n        }\n    }\n}"}
{"prompt":"Crea un texto de modelo 3D que diga 'TORRE A' en el nivel base.","completion":"Level baseLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nif(baseLevel != null)\n{\n    XYZ origin = new XYZ(0,0,baseLevel.Elevation);\n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, origin);\n    SketchPlane sp = SketchPlane.Create(doc, plane);\n    ModelText.Create(doc, \"TORRE A\", sp, origin, UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n}"}
{"prompt":"Create a 3D model text that says 'TOWER A' on the base level.","completion":"Level baseLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nif(baseLevel != null)\n{\n    XYZ origin = new XYZ(0,0,baseLevel.Elevation);\n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, origin);\n    SketchPlane sp = SketchPlane.Create(doc, plane);\n    ModelText.Create(doc, \"TOWER A\", sp, origin, UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Meters));\n}"}
{"prompt":"Exporta todas las advertencias (warnings) del proyecto a un archivo de texto.","completion":"string path = @\"C:\\RevitExports\\ProjectWarnings.txt\";\nIList<FailureMessage> warnings = doc.GetWarnings();\nusing (StreamWriter writer = new StreamWriter(path))\n{\n    foreach (FailureMessage fm in warnings)\n    {\n        writer.WriteLine(fm.GetDescriptionText());\n    }\n}"}
{"prompt":"Export all project warnings to a text file.","completion":"string path = @\"C:\\RevitExports\\ProjectWarnings.txt\";\nIList<FailureMessage> warnings = doc.GetWarnings();\nusing (StreamWriter writer = new StreamWriter(path))\n{\n    foreach (FailureMessage fm in warnings)\n    {\n        writer.WriteLine(fm.GetDescriptionText());\n    }\n}"}
{"prompt":"Suscríbete al evento 'DocumentSavingAs' para ejecutar una función antes de que el documento se guarde con un nuevo nombre.","completion":"// Este código se colocaría en el método OnStartup de una IExternalApplication\n// public Result OnStartup(UIControlledApplication application)\n// {\n//     application.ControlledApplication.DocumentSavingAs += OnDocumentSavingAs;\n//     return Result.Succeeded;\n// }\n// void OnDocumentSavingAs(object sender, Autodesk.Revit.DB.Events.DocumentSavingAsEventArgs args)\n// {\n//     TaskDialog.Show(\"Recordatorio\", \"Estás guardando el archivo con un nuevo nombre: \" + args.PathName);\n// }"}
{"prompt":"Subscribe to the 'DocumentSavingAs' event to run a function before the document is saved with a new name.","completion":"// This code would be placed in the OnStartup method of an IExternalApplication\n// public Result OnStartup(UIControlledApplication application)\n// {\n//     application.ControlledApplication.DocumentSavingAs += OnDocumentSavingAs;\n//     return Result.Succeeded;\n// }\n// void OnDocumentSavingAs(object sender, Autodesk.Revit.DB.Events.DocumentSavingAsEventArgs args)\n// {\n//     TaskDialog.Show(\"Reminder\", \"You are saving the file with a new name: \" + args.PathName);\n// }"}
{"prompt":"Agrupa una tabla de planificación de habitaciones por Nivel y muestra los totales de área.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(vs => vs.Definition.CategoryId.IntegerValue == (int)BuiltInCategory.OST_Rooms);\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.ROOM_LEVEL_ID));\n    if(levelField != null) {\n        def.AddSortGroupField(new ScheduleSortGroupField(levelField.FieldId));\n        def.IsItemized = false;\n        def.ShowGrandTotal = true;\n    }\n}"}
{"prompt":"Group a room schedule by Level and show area totals.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(vs => vs.Definition.CategoryId.IntegerValue == (int)BuiltInCategory.OST_Rooms);\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.ROOM_LEVEL_ID));\n    if(levelField != null) {\n        def.AddSortGroupField(new ScheduleSortGroupField(levelField.FieldId));\n        def.IsItemized = false;\n        def.ShowGrandTotal = true;\n    }\n}"}
{"prompt":"Obtén todos los muros de un modelo de Revit vinculado que se cruzan con una caja de delimitación.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault();\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    BoundingBoxXYZ bbox = new BoundingBoxXYZ() { Min = new XYZ(0,0,0), Max = new XYZ(50,50,10) };\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(bbox.Min, bbox.Max));\n    var linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToElements();\n}"}
{"prompt":"Get all walls from a linked Revit model that intersect a bounding box.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault();\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    BoundingBoxXYZ bbox = new BoundingBoxXYZ() { Min = new XYZ(0,0,0), Max = new XYZ(50,50,10) };\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(bbox.Min, bbox.Max));\n    var linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToElements();\n}"}
{"prompt":"Desune la geometría de dos elementos previamente unidos.","completion":"UIDocument uidoc = new UIDocument(doc);\nElement e1 = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId);\nElement e2 = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId);\nif (e1 != null && e2 != null && JoinGeometryUtils.AreElementsJoined(doc, e1, e2))\n{\n    JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n}"}
{"prompt":"Unjoin the geometry of two previously joined elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nElement e1 = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId);\nElement e2 = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId);\nif (e1 != null && e2 != null && JoinGeometryUtils.AreElementsJoined(doc, e1, e2))\n{\n    JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n}"}
{"prompt":"Coloca una cota de elevación (spot elevation) en la cara superior de un suelo seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference faceRef = uidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara superior del suelo\");\nif(faceRef != null)\n{\n    XYZ pointOnFace = faceRef.GlobalPoint;\n    XYZ leaderEnd = pointOnFace + new XYZ(1,1,0);\n    doc.Create.NewSpotElevation(doc.ActiveView, faceRef, pointOnFace, leaderEnd, leaderEnd, true, true);\n}"}
{"prompt":"Place a spot elevation on the top face of a selected floor.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference faceRef = uidoc.Selection.PickObject(ObjectType.Face, \"Select the top face of the floor\");\nif(faceRef != null)\n{\n    XYZ pointOnFace = faceRef.GlobalPoint;\n    XYZ leaderEnd = pointOnFace + new XYZ(1,1,0);\n    doc.Create.NewSpotElevation(doc.ActiveView, faceRef, pointOnFace, leaderEnd, leaderEnd, true, true);\n}"}
{"prompt":"Verifica si una tubería está conectada en ambos extremos.","completion":"Pipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nif(pipe != null) {\n    bool isFullyConnected = pipe.ConnectorManager.UnusedConnectors.IsEmpty;\n    TaskDialog.Show(\"Conectividad\", \"La tubería está completamente conectada: \" + isFullyConnected);\n}"}
{"prompt":"Check if a pipe is connected at both ends.","completion":"Pipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nif(pipe != null) {\n    bool isFullyConnected = pipe.ConnectorManager.UnusedConnectors.IsEmpty;\n    TaskDialog.Show(\"Connectivity\", \"The pipe is fully connected: \" + isFullyConnected);\n}"}
{"prompt":"Dentro del editor de familias, crea un nuevo plano de referencia vertical llamado 'Eje Central'.","completion":"// Este código se ejecuta en un documento de familia (famDoc)\nif(doc.IsFamilyDocument)\n{\n    XYZ start = new XYZ(0, -5, 0);\n    XYZ end = new XYZ(0, 5, 0);\n    XYZ normal = XYZ.BasisX;\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, doc.ActiveView);\n    rp.Name = \"Eje Central\";\n}"}
{"prompt":"Inside the family editor, create a new vertical reference plane named 'Center Axis'.","completion":"// This code runs in a family document (famDoc)\nif(doc.IsFamilyDocument)\n{\n    XYZ start = new XYZ(0, -5, 0);\n    XYZ end = new XYZ(0, 5, 0);\n    XYZ normal = XYZ.BasisX;\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, doc.ActiveView);\n    rp.Name = \"Center Axis\";\n}"}
{"prompt":"Averigua quién es el propietario de un elemento seleccionado en un modelo compartido.","completion":"if(doc.IsWorkshared)\n{\n    UIDocument uidoc = new UIDocument(doc);\n    Element elem = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId);\n    if(elem != null)\n    {\n        WorksharingTooltipInfo info = WorksharingUtils.GetWorksharingTooltipInfo(doc, elem.Id);\n        TaskDialog.Show(\"Propietario\", \"El propietario es: \" + info.Owner);\n    }\n}"}
{"prompt":"Find out who the owner of a selected element is in a workshared model.","completion":"if(doc.IsWorkshared)\n{\n    UIDocument uidoc = new UIDocument(doc);\n    Element elem = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId);\n    if(elem != null)\n    {\n        WorksharingTooltipInfo info = WorksharingUtils.GetWorksharingTooltipInfo(doc, elem.Id);\n        TaskDialog.Show(\"Owner\", \"The owner is: \" + info.Owner);\n    }\n}"}
{"prompt":"Aísla temporalmente un elemento seleccionado en la vista activa.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToIsolate = uidoc.Selection.GetElementIds();\nif (idsToIsolate.Any())\n{\n    doc.ActiveView.IsolateElementsTemporary(idsToIsolate);\n}"}
{"prompt":"Temporarily isolate a selected element in the active view.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToIsolate = uidoc.Selection.GetElementIds();\nif (idsToIsolate.Any())\n{\n    doc.ActiveView.IsolateElementsTemporary(idsToIsolate);\n}"}
{"prompt":"Encuentra el elemento anfitrión de una luminaria colocada en una cara.","completion":"FamilyInstance lightFixture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().FirstOrDefault(fi => fi.HostFace != null) as FamilyInstance;\nif (lightFixture != null)\n{\n    Reference hostFaceRef = lightFixture.HostFace;\n    Element host = doc.GetElement(hostFaceRef.ElementId);\n    TaskDialog.Show(\"Anfitrión\", \"El anfitrión es: \" + host.Name);\n}"}
{"prompt":"Find the host element of a face-based light fixture.","completion":"FamilyInstance lightFixture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().FirstOrDefault(fi => fi.HostFace != null) as FamilyInstance;\nif (lightFixture != null)\n{\n    Reference hostFaceRef = lightFixture.HostFace;\n    Element host = doc.GetElement(hostFaceRef.ElementId);\n    TaskDialog.Show(\"Host\", \"The host is: \" + host.Name);\n}"}
{"prompt":"Crea un componente de detalle repetitivo a lo largo de una línea.","completion":"DetailComponentType dct = new FilteredElementCollector(doc).OfClass(typeof(DetailComponentType)).FirstOrDefault() as DetailComponentType;\nif (dct != null)\n{\n    Line path = Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0));\n    RepeatingDetailComponent.Create(doc, doc.ActiveView.Id, dct.Id, path);\n}"}
{"prompt":"Create a repeating detail component along a line.","completion":"DetailComponentType dct = new FilteredElementCollector(doc).OfClass(typeof(DetailComponentType)).FirstOrDefault() as DetailComponentType;\nif (dct != null)\n{\n    Line path = Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0));\n    RepeatingDetailComponent.Create(doc, doc.ActiveView.Id, dct.Id, path);\n}"}
{"prompt":"Crea un elemento de Área a partir de una selección de líneas de contorno de área.","completion":"UIDocument uidoc = new UIDocument(doc);\nAreaScheme scheme = new FilteredElementCollector(doc).OfClass(typeof(AreaScheme)).FirstOrDefault() as AreaScheme;\nLevel level = doc.ActiveView.GenLevel;\nif(scheme != null && level != null)\n{\n    var boundaryLines = uidoc.Selection.PickElementsByCategory(BuiltInCategory.OST_AreaSchemeLines, \"Selecciona líneas de contorno de área\");\n    CurveArray curves = new CurveArray();\n    foreach(Element el in boundaryLines) curves.Append((el as ModelCurve).GeometryCurve);\n    doc.Create.NewAreaBoundaryLine(doc.ActiveView.SketchPlane, curves, doc.ActiveView);\n}"}
{"prompt":"Create an Area element from a selection of area boundary lines.","completion":"UIDocument uidoc = new UIDocument(doc);\nAreaScheme scheme = new FilteredElementCollector(doc).OfClass(typeof(AreaScheme)).FirstOrDefault() as AreaScheme;\nLevel level = doc.ActiveView.GenLevel;\nif(scheme != null && level != null)\n{\n    var boundaryLines = uidoc.Selection.PickElementsByCategory(BuiltInCategory.OST_AreaSchemeLines, \"Select area boundary lines\");\n    CurveArray curves = new CurveArray();\n    foreach(Element el in boundaryLines) curves.Append((el as ModelCurve).GeometryCurve);\n    doc.Create.NewAreaBoundaryLine(doc.ActiveView.SketchPlane, curves, doc.ActiveView);\n}"}
{"prompt":"Crea un nuevo panel en la cinta de opciones (Ribbon) llamado 'Mis Herramientas' con un botón.","completion":"// Este código se colocaría en el método OnStartup de una IExternalApplication\n// string panelName = \"Mis Herramientas\";\n// RibbonPanel ribbonPanel = application.CreateRibbonPanel(panelName);\n// string thisAssemblyPath = System.Reflection.Assembly.GetExecutingAssembly().Location;\n// PushButtonData buttonData = new PushButtonData(\"cmdMyButton\", \"Mi Botón\", thisAssemblyPath, \"MyNamespace.MyCommandClass\");\n// PushButton pushButton = ribbonPanel.AddItem(buttonData) as PushButton;"}
{"prompt":"Create a new Ribbon panel named 'My Tools' with a button.","completion":"// This code would be placed in the OnStartup method of an IExternalApplication\n// string panelName = \"My Tools\";\n// RibbonPanel ribbonPanel = application.CreateRibbonPanel(panelName);\n// string thisAssemblyPath = System.Reflection.Assembly.GetExecutingAssembly().Location;\n// PushButtonData buttonData = new PushButtonData(\"cmdMyButton\", \"My Button\", thisAssemblyPath, \"MyNamespace.MyCommandClass\");\n// PushButton pushButton = ribbonPanel.AddItem(buttonData) as PushButton;"}
{"prompt":"Cambia el tipo de una losa existente por uno que contenga 'Concreto'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concreto\"));\nif(floorToChange != null && newType != null) floorToChange.FloorType = newType;"}
{"prompt":"Change the type of an existing slab to one that contains 'Concrete'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concrete\"));\nif(floorToChange != null && newType != null) floorToChange.FloorType = newType;"}
{"prompt":"Obtén todas las subcategorías de la categoría Muros.","completion":"Category wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategoryNameMap subcategories = wallCat.SubCategories;\nforeach(Category subcat in subcategories)\n{\n    // Procesar subcategoría 'subcat'\n}"}
{"prompt":"Get all subcategories from the Walls category.","completion":"Category wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategoryNameMap subcategories = wallCat.SubCategories;\nforeach(Category subcat in subcategories)\n{\n    // Process subcategory 'subcat'\n}"}
{"prompt":"Crea un parámetro de proyecto de tipo 'URL' llamado 'Enlace a Especificaciones'.","completion":"string sharedParamFile = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamFile)) { /*...*/ }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = defFile.Groups.EnsureDefinitionGroup(\"Documentation\");\nExternalDefinition def = group.Definitions.Create(new ExternalDefinitionCreationOptions(\"Enlace a Especificaciones\", SpecTypeId.Url)) as ExternalDefinition;\n// ... el resto del binding ..."}
{"prompt":"Create a project parameter of type 'URL' named 'Link to Specifications'.","completion":"string sharedParamFile = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamFile)) { /*...*/ }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = defFile.Groups.EnsureDefinitionGroup(\"Documentation\");\nExternalDefinition def = group.Definitions.Create(new ExternalDefinitionCreationOptions(\"Link to Specifications\", SpecTypeId.Url)) as ExternalDefinition;\n// ... rest of the binding ..."}
{"prompt":"Añade un punto a un PathOfTravel existente.","completion":"PathOfTravel pot = new FilteredElementCollector(doc).OfClass(typeof(PathOfTravel)).FirstOrDefault() as PathOfTravel;\nif(pot != null){\n    IList<XYZ> points = pot.GetPoints();\n    points.Insert(1, new XYZ(5,5,0));\n    pot.Update(points);\n}"}
{"prompt":"Add a point to an existing PathOfTravel.","completion":"PathOfTravel pot = new FilteredElementCollector(doc).OfClass(typeof(PathOfTravel)).FirstOrDefault() as PathOfTravel;\nif(pot != null){\n    IList<XYZ> points = pot.GetPoints();\n    points.Insert(1, new XYZ(5,5,0));\n    pot.Update(points);\n}"}
{"prompt":"Crea una nueva vista de alzado (elevation) mirando al sur.","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nif(elevationVFT != null){\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0,-10,0), 10);\n    marker.CreateElevation(doc, doc.ActiveView.Id, 0);\n}"}
{"prompt":"Create a new elevation view looking south.","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nif(elevationVFT != null){\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0,-10,0), 10);\n    marker.CreateElevation(doc, doc.ActiveView.Id, 0);\n}"}
{"prompt":"Comprueba si la vista activa es una vista de plano.","completion":"bool isPlanView = doc.ActiveView.ViewType == ViewType.FloorPlan || doc.ActiveView.ViewType == ViewType.CeilingPlan || doc.ActiveView.ViewType == ViewType.EngineeringPlan;"}
{"prompt":"Check if the active view is a plan view.","completion":"bool isPlanView = doc.ActiveView.ViewType == ViewType.FloorPlan || doc.ActiveView.ViewType == ViewType.CeilingPlan || doc.ActiveView.ViewType == ViewType.EngineeringPlan;"}
{"prompt":"Exporta la geometría de un elemento a un archivo SAT.","completion":"UIDocument uidoc = new UIDocument(doc);\nElement elem = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId);\nif(elem != null){\n    Options opt = new Options();\n    GeometryElement geo = elem.get_Geometry(opt);\n    doc.Export(@\"C:\\Exports\\\", \"geometry.sat\", new List<ElementId>{elem.Id}, new SATExportOptions());\n}"}
{"prompt":"Export the geometry of an element to an SAT file.","completion":"UIDocument uidoc = new UIDocument(doc);\nElement elem = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId);\nif(elem != null){\n    Options opt = new Options();\n    GeometryElement geo = elem.get_Geometry(opt);\n    doc.Export(@\"C:\\Exports\\\", \"geometry.sat\", new List<ElementId>{elem.Id}, new SATExportOptions());\n}"}
{"prompt":"Obtén el tipo de sistema de una tubería seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nPipe pipe = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId) as Pipe;\nif(pipe != null){\n    PipingSystemType systemType = doc.GetElement(pipe.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId()) as PipingSystemType;\n    if(systemType != null) TaskDialog.Show(\"Sistema\", systemType.Name);\n}"}
{"prompt":"Get the system type of a selected pipe.","completion":"UIDocument uidoc = new UIDocument(doc);\nPipe pipe = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId) as Pipe;\nif(pipe != null){\n    PipingSystemType systemType = doc.GetElement(pipe.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId()) as PipingSystemType;\n    if(systemType != null) TaskDialog.Show(\"System\", systemType.Name);\n}"}
{"prompt":"Crea un nuevo tipo de tubería con un material específico.","completion":"PipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nif(pipeTypeToDuplicate != null){\n    PipeType newType = pipeTypeToDuplicate.Duplicate(\"Tubería de Cobre\") as PipeType;\n    Material copper = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Copper\") as Material;\n    if(copper != null) newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM).Set(copper.Id);\n}"}
{"prompt":"Create a new pipe type with a specific material.","completion":"PipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nif(pipeTypeToDuplicate != null){\n    PipeType newType = pipeTypeToDuplicate.Duplicate(\"Copper Pipe\") as PipeType;\n    Material copper = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Copper\") as Material;\n    if(copper != null) newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM).Set(copper.Id);\n}"}
{"prompt":"Oculta un elemento seleccionado en la vista activa.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToHide = uidoc.Selection.GetElementIds();\nif(idsToHide.Any()) doc.ActiveView.HideElements(idsToHide);"}
{"prompt":"Hide a selected element in the active view.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToHide = uidoc.Selection.GetElementIds();\nif(idsToHide.Any()) doc.ActiveView.HideElements(idsToHide);"}