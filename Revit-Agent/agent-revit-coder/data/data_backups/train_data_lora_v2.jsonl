{"prompt":"Crea un muro de 5 metros de largo y 3 metros de alto.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstElement() as WallType;\nif(level != null && wallType != null) {\n    Line line = Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Create a wall 5 meters long and 3 meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstElement() as WallType;\nif(level != null && wallType != null) {\n    Line line = Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Inserta una ventana de 1 metro de ancho y 1.2 metros de alto en la pared anterior.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol windowSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name.Contains(\"1m x 1.2m\"));\nif (windowSymbol != null && hostWall != null) {\n    if (!windowSymbol.IsActive) windowSymbol.Activate();\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    XYZ insertionPoint = (hostWall.Location as LocationCurve).Curve.Evaluate(0.5, true);\n    doc.Create.NewFamilyInstance(insertionPoint, windowSymbol, hostWall, level, StructuralType.NonStructural);\n}"}
{"prompt":"Insert a window 1 meter wide and 1.2 meters high in the previous wall.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol windowSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name.Contains(\"1m x 1.2m\"));\nif (windowSymbol != null && hostWall != null) {\n    if (!windowSymbol.IsActive) windowSymbol.Activate();\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    XYZ insertionPoint = (hostWall.Location as LocationCurve).Curve.Evaluate(0.5, true);\n    doc.Create.NewFamilyInstance(insertionPoint, windowSymbol, hostWall, level, StructuralType.NonStructural);\n}"}
{"prompt":"Crea una columna estructural en la posición X=10, Y=5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().First() as FamilySymbol;\nif(level != null && columnSymbol != null) {\n    if (!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 5, 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Create a structural column at position X=10, Y=5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().First() as FamilySymbol;\nif(level != null && columnSymbol != null) {\n    if (!columnSymbol.IsActive) columnSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 5, 0), columnSymbol, level, StructuralType.Column);\n}"}
{"prompt":"Genera un piso rectangular de 10×8 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstElement() as FloorType;\nif(level != null && floorType != null) {\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(10,0,0), new XYZ(10,8,0)));\n    loop.Append(Line.CreateBound(new XYZ(10,8,0), new XYZ(0,8,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,8,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Generate a rectangular floor of 10x8 meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstElement() as FloorType;\nif(level != null && floorType != null) {\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(10,0,0), new XYZ(10,8,0)));\n    loop.Append(Line.CreateBound(new XYZ(10,8,0), new XYZ(0,8,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,8,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);\n}"}
{"prompt":"Crea un muro cortina de 6 metros de ancho y 4 metros de alto.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif (cwType != null && level != null) {\n    Line baseLine = Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Create a curtain wall 6 meters wide and 4 meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif (cwType != null && level != null) {\n    Line baseLine = Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Crea 8 ejes en sentido horizontal separados 10 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<8; i++){\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create 8 horizontal grids spaced 10 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<8; i++){\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea 4 ejes en sentido vertical separados 10 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<4; i++){\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create 4 vertical grids spaced 10 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<4; i++){\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea columnas en cada intersección de ejes.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nvar grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\nif (colSymbol != null && level != null && grids.Count > 1)\n{\n    if (!colSymbol.IsActive) colSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            var result = grids[i].Curve.Intersect(grids[j].Curve, out IntersectionResultArray results);\n            if (result == SetComparisonResult.Overlap && results != null)\n            {\n                foreach (IntersectionResult ir in results)\n                {\n                    doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Create columns at each grid intersection.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nvar grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\nif (colSymbol != null && level != null && grids.Count > 1)\n{\n    if (!colSymbol.IsActive) colSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            var result = grids[i].Curve.Intersect(grids[j].Curve, out IntersectionResultArray results);\n            if (result == SetComparisonResult.Overlap && results != null)\n            {\n                foreach (IntersectionResult ir in results)\n                {\n                    doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Crea vigas entre columnas horizontales.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nvar columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.X).ToList();\nif (beamSymbol != null && level != null && columns.Count > 1)\n{\n    if(!beamSymbol.IsActive) beamSymbol.Activate();\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.1)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Create beams between horizontal columns.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nvar columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.X).ToList();\nif (beamSymbol != null && level != null && columns.Count > 1)\n{\n    if(!beamSymbol.IsActive) beamSymbol.Activate();\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.1)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Acota la longitud de un muro seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro para acotar\");\nWall wall = doc.GetElement(wallRef) as Wall;\nif (wall != null)\n{\n    LocationCurve locCurve = wall.Location as LocationCurve;\n    if (locCurve != null)\n    {\n        Line wallLine = locCurve.Curve as Line;\n        if(wallLine != null) \n        {\n            ReferenceArray refs = new ReferenceArray();\n            refs.Append(wallLine.GetEndPointReference(0));\n            refs.Append(wallLine.GetEndPointReference(1));\n            XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ);\n            XYZ pt2 = wallLine.GetEndPoint(1).Add(pt1 - wallLine.GetEndPoint(0));\n            Line dimLine = Line.CreateBound(pt1, pt2);\n            doc.Create.NewDimension(doc.ActiveView, dimLine, refs);\n        }\n    }\n}"}
{"prompt":"Dimension the length of a selected wall.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall to dimension\");\nWall wall = doc.GetElement(wallRef) as Wall;\nif (wall != null)\n{\n    LocationCurve locCurve = wall.Location as LocationCurve;\n    if (locCurve != null)\n    {\n        Line wallLine = locCurve.Curve as Line;\n        if(wallLine != null) \n        {\n            ReferenceArray refs = new ReferenceArray();\n            refs.Append(wallLine.GetEndPointReference(0));\n            refs.Append(wallLine.GetEndPointReference(1));\n            XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ);\n            XYZ pt2 = wallLine.GetEndPoint(1).Add(pt1 - wallLine.GetEndPoint(0));\n            Line dimLine = Line.CreateBound(pt1, pt2);\n            doc.Create.NewDimension(doc.ActiveView, dimLine, refs);\n        }\n    }\n}"}
{"prompt":"Crea una puerta de 0.9m de ancho y 2.1m de alto en un muro existente.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol doorSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name.Contains(\"0.9\") && s.Name.Contains(\"2.1\"));\nif(hostWall != null && doorSymbol != null)\n{\n    if(!doorSymbol.IsActive) doorSymbol.Activate();\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    XYZ insertionPoint = (hostWall.Location as LocationCurve).Curve.Evaluate(0.5, true);\n    doc.Create.NewFamilyInstance(insertionPoint, doorSymbol, hostWall, level, StructuralType.NonStructural);\n}"}
{"prompt":"Create a door 0.9m wide and 2.1m high in the existing wall.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol doorSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name.Contains(\"0.9\") && s.Name.Contains(\"2.1\"));\nif(hostWall != null && doorSymbol != null)\n{\n    if(!doorSymbol.IsActive) doorSymbol.Activate();\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    XYZ insertionPoint = (hostWall.Location as LocationCurve).Curve.Evaluate(0.5, true);\n    doc.Create.NewFamilyInstance(insertionPoint, doorSymbol, hostWall, level, StructuralType.NonStructural);\n}"}
{"prompt":"Crea un sistema de vigas estructurales en forma de retícula de 5x5 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && beamSymbol != null)\n{\n    if (!beamSymbol.IsActive) beamSymbol.Activate();\n    double gridSize = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    for (int i = 0; i <= 5; i++)\n    {\n        for (int j = 0; j <= 5; j++)\n        {\n             Line h_line = Line.CreateBound(new XYZ(i * gridSize, j * gridSize, 0), new XYZ((i + 1) * gridSize, j * gridSize, 0));\n             Line v_line = Line.CreateBound(new XYZ(i * gridSize, j * gridSize, 0), new XYZ(i * gridSize, (j + 1) * gridSize, 0));\n             doc.Create.NewFamilyInstance(h_line, beamSymbol, level, StructuralType.Beam);\n             doc.Create.NewFamilyInstance(v_line, beamSymbol, level, StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Create a structural beam system in a 5x5 meter grid.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && beamSymbol != null)\n{\n    if (!beamSymbol.IsActive) beamSymbol.Activate();\n    double gridSize = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    for (int i = 0; i <= 5; i++)\n    {\n        for (int j = 0; j <= 5; j++)\n        {\n             Line h_line = Line.CreateBound(new XYZ(i * gridSize, j * gridSize, 0), new XYZ((i + 1) * gridSize, j * gridSize, 0));\n             Line v_line = Line.CreateBound(new XYZ(i * gridSize, j * gridSize, 0), new XYZ(i * gridSize, (j + 1) * gridSize, 0));\n             doc.Create.NewFamilyInstance(h_line, beamSymbol, level, StructuralType.Beam);\n             doc.Create.NewFamilyInstance(v_line, beamSymbol, level, StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Inserta una armadura (truss) de 6 metros entre columnas.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Trusses).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && trussSymbol != null)\n{\n    Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 10, 0));\n    doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Insert a 6-meter truss between columns.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Trusses).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && trussSymbol != null)\n{\n    Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 10, 0));\n    doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Crea un sistema de tuberías con un diámetro de 150mm.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0); XYZ p2=new XYZ(5,0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n    pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(150, UnitTypeId.Millimeters));\n}"}
{"prompt":"Create a piping system with a 150mm diameter.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0); XYZ p2=new XYZ(5,0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n    pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(150, UnitTypeId.Millimeters));\n}"}
{"prompt":"Añade un tag de texto a la columna más cercana al origen.","completion":"View activeView = doc.ActiveView;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => (c.Location as LocationPoint).Point.DistanceTo(XYZ.Zero)).FirstOrDefault();\nif (column != null)\n{\n    LocationPoint loc = column.Location as LocationPoint;\n    IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n}"}
{"prompt":"Add a text tag to the column closest to the origin.","completion":"View activeView = doc.ActiveView;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => (c.Location as LocationPoint).Point.DistanceTo(XYZ.Zero)).FirstOrDefault();\nif (column != null)\n{\n    LocationPoint loc = column.Location as LocationPoint;\n    IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n}"}
{"prompt":"Crea una escalera con 12 peldaños y altura total de 3 metros.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nif (bottomLevel != null && topLevel != null)\n{\n    using (StairsEditScope ses = new StairsEditScope(doc, \"Create Stairs\"))\n    {\n        ElementId stairsId = ses.Start(bottomLevel.Id, topLevel.Id);\n        Stairs stairs = doc.GetElement(stairsId) as Stairs;\n        stairs.DesiredRisersNumber = 12;\n        ses.Commit();\n    }\n}"}
{"prompt":"Create a stair with 12 steps and a total height of 3 meters.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nif (bottomLevel != null && topLevel != null)\n{\n    using (StairsEditScope ses = new StairsEditScope(doc, \"Create Stairs\"))\n    {\n        ElementId stairsId = ses.Start(bottomLevel.Id, topLevel.Id);\n        Stairs stairs = doc.GetElement(stairsId) as Stairs;\n        stairs.DesiredRisersNumber = 12;\n        ses.Commit();\n    }\n}"}
{"prompt":"Crea un barandal paralelo a la escalera anterior.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Stairs).FirstOrDefault() as Stairs;\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Create a railing parallel to the previous stair.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Stairs).FirstOrDefault() as Stairs;\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Coloca una pieza de mobiliario genérico en X=2,Y=3.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && furnitureSymbol != null)\n{\n    if (!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,3,0), furnitureSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Place a generic piece of furniture at X=2, Y=3.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && furnitureSymbol != null)\n{\n    if (!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,3,0), furnitureSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Crea una viga de cimentación (foundation) de 8 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, StructuralType.Footing);\n}"}
{"prompt":"Create an 8-meter foundation beam.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, StructuralType.Footing);\n}"}
{"prompt":"Añade estribos (rebars) a la columna anterior.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault(s => s.Name.Contains(\"Stirrup\")) as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif(barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, XYZ.BasisZ, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Add stirrups (rebars) to the previous column.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault(s => s.Name.Contains(\"Stirrup\")) as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif(barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, XYZ.BasisZ, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Crea un conducto (conduit) de 1 pulgada desde A hasta B.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nConduitType conduitType = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstOrDefault() as ConduitType;\nif (level != null && conduitType != null)\n{\n    XYZ start = new XYZ(0,0,3); XYZ end = new XYZ(5,0,3);\n    Conduit conduit = Conduit.Create(doc, conduitType.Id, start, end, level.Id);\n    conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Inches));\n}"}
{"prompt":"Create a 1-inch conduit from A to B.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nConduitType conduitType = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstOrDefault() as ConduitType;\nif (level != null && conduitType != null)\n{\n    XYZ start = new XYZ(0,0,3); XYZ end = new XYZ(5,0,3);\n    Conduit conduit = Conduit.Create(doc, conduitType.Id, start, end, level.Id);\n    conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Inches));\n}"}
{"prompt":"Instala un accesorio de conducto en el conducto anterior.","completion":"FamilySymbol fittingSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ConduitFitting).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nConduit conduit = new FilteredElementCollector(doc).OfClass(typeof(Conduit)).FirstOrDefault() as Conduit;\nif (fittingSymbol != null && conduit != null)\n{\n    if(!fittingSymbol.IsActive) fittingSymbol.Activate();\n    Connector unusedConnector = conduit.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (unusedConnector != null) doc.Create.NewFamilyInstance(unusedConnector, fittingSymbol);\n}"}
{"prompt":"Install a conduit fitting on the previous conduit.","completion":"FamilySymbol fittingSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ConduitFitting).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nConduit conduit = new FilteredElementCollector(doc).OfClass(typeof(Conduit)).FirstOrDefault() as Conduit;\nif (fittingSymbol != null && conduit != null)\n{\n    if(!fittingSymbol.IsActive) fittingSymbol.Activate();\n    Connector unusedConnector = conduit.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (unusedConnector != null) doc.Create.NewFamilyInstance(unusedConnector, fittingSymbol);\n}"}
{"prompt":"Genera un equipo eléctrico (panel) en X=1,Y=1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && panelSymbol != null)\n{\n    if(!panelSymbol.IsActive) panelSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(1,1,0), panelSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Generate an electrical panel at X=1, Y=1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && panelSymbol != null)\n{\n    if(!panelSymbol.IsActive) panelSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(1,1,0), panelSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Dibuja ducto de ventilación de 0.3x0.2 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nDuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).FirstOrDefault() as DuctType;\nMEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.SupplyAir) as MEPSystemType;\nif (level != null && ductType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,3); XYZ p2 = new XYZ(5,0,3);\n    Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM).Set(UnitUtils.ConvertToInternalUnits(0.3, UnitTypeId.Meters));\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM).Set(UnitUtils.ConvertToInternalUnits(0.2, UnitTypeId.Meters));\n}"}
{"prompt":"Draw a ventilation duct of 0.3x0.2 meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nDuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).FirstOrDefault() as DuctType;\nMEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.SupplyAir) as MEPSystemType;\nif (level != null && ductType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,3); XYZ p2 = new XYZ(5,0,3);\n    Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM).Set(UnitUtils.ConvertToInternalUnits(0.3, UnitTypeId.Meters));\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM).Set(UnitUtils.ConvertToInternalUnits(0.2, UnitTypeId.Meters));\n}"}
{"prompt":"Coloca un terminal de aire (air terminal) en el ducto.","completion":"FamilySymbol terminalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctTerminal).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nDuct duct = new FilteredElementCollector(doc).OfClass(typeof(Duct)).FirstOrDefault() as Duct;\nif (terminalSymbol != null && duct != null)\n{\n    if(!terminalSymbol.IsActive) terminalSymbol.Activate();\n    Connector unusedConnector = duct.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (unusedConnector != null) doc.Create.NewFamilyInstance(unusedConnector, terminalSymbol);\n}"}
{"prompt":"Place an air terminal on the duct.","completion":"FamilySymbol terminalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctTerminal).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nDuct duct = new FilteredElementCollector(doc).OfClass(typeof(Duct)).FirstOrDefault() as Duct;\nif (terminalSymbol != null && duct != null)\n{\n    if(!terminalSymbol.IsActive) terminalSymbol.Activate();\n    Connector unusedConnector = duct.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (unusedConnector != null) doc.Create.NewFamilyInstance(unusedConnector, terminalSymbol);\n}"}
{"prompt":"Importa topografía desde un archivo CSV.","completion":"TopographySurface.Create(doc, \"C:/temp/terrain.csv\", new CSVImportOptions());"}
{"prompt":"Import topography from a CSV file.","completion":"TopographySurface.Create(doc, \"C:/temp/terrain.csv\", new CSVImportOptions());"}
{"prompt":"Exporta el modelo a Navisworks NWC.","completion":"NavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(\"C:/exports/\", \"model.nwc\", options);"}
{"prompt":"Export the model to Navisworks NWC.","completion":"NavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(\"C:/exports/\", \"model.nwc\", options);"}
{"prompt":"Exporta las vistas a DWG.","completion":"ICollection<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).ToElementIds();\nif (viewsToExport.Any())\n{\n    doc.Export(\"C:/exports/dwg/\", \"views.dwg\", viewsToExport, new DWGExportOptions());\n}"}
{"prompt":"Export the views to DWG.","completion":"ICollection<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).ToElementIds();\nif (viewsToExport.Any())\n{\n    doc.Export(\"C:/exports/dwg/\", \"views.dwg\", viewsToExport, new DWGExportOptions());\n}"}
{"prompt":"Cambia el nombre de la familia de puertas a \"Puerta_TAD\".","completion":"var doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Where(f => f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors);\nforeach (Family fam in doorFamilies)\n{\n    fam.Name = \"Puerta_TAD\";\n}"}
{"prompt":"Change the name of the door family to \"Door_TAD\".","completion":"var doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Where(f => f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors);\nforeach (Family fam in doorFamilies)\n{\n    fam.Name = \"Door_TAD\";\n}"}
{"prompt":"Rellena el parámetro \"Material\" de todos los muros con \"Concreto\".","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concreto\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Fill the \"Material\" parameter of all walls with \"Concrete\".","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concrete\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Crea un nuevo tipo de muro llamado 'Muro_Genérico_25cm', definiendo su grosor en 0.25m y su función como estructural.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (wallTypeToDuplicate != null)\n{\n    WallType newWallType = wallTypeToDuplicate.Duplicate(\"Muro_Genérico_25cm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0)\n    {\n        int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n        cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n        cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(0.25, UnitTypeId.Meters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Create a new wall type named 'Generic_Wall_25cm', defining its thickness as 0.25m and its function as structural.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (wallTypeToDuplicate != null)\n{\n    WallType newWallType = wallTypeToDuplicate.Duplicate(\"Generic_Wall_25cm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0)\n    {\n        int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n        cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n        cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(0.25, UnitTypeId.Meters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Carga la familia 'Furniture_Desk.rfa' desde 'C:\\RevitFamilies\\' y luego inserta una instancia en el Nivel 1 en las coordenadas (5, 5, 0).","completion":"string familyPath = \"C:\\\\RevitFamilies\\\\Furniture_Desk.rfa\";\nFamily deskFamily;\nif(doc.LoadFamily(familyPath, out deskFamily))\n{\n    ISet<ElementId> symbolIds = deskFamily.GetFamilySymbolIds();\n    if(symbolIds.Any())\n    {\n        FamilySymbol deskSymbol = doc.GetElement(symbolIds.First()) as FamilySymbol;\n        Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n        if (deskSymbol != null && level1 != null)\n        {\n            if (!deskSymbol.IsActive) { deskSymbol.Activate(); }\n            doc.Create.NewFamilyInstance(new XYZ(5, 5, 0), deskSymbol, level1, StructuralType.NonStructural);\n        }\n    }\n}"}
{"prompt":"Load the 'Furniture_Desk.rfa' family from 'C:\\RevitFamilies\\' and then insert an instance at Level 1 at coordinates (5, 5, 0).","completion":"string familyPath = \"C:\\\\RevitFamilies\\\\Furniture_Desk.rfa\";\nFamily deskFamily;\nif(doc.LoadFamily(familyPath, out deskFamily))\n{\n    ISet<ElementId> symbolIds = deskFamily.GetFamilySymbolIds();\n    if(symbolIds.Any())\n    {\n        FamilySymbol deskSymbol = doc.GetElement(symbolIds.First()) as FamilySymbol;\n        Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n        if (deskSymbol != null && level1 != null)\n        {\n            if (!deskSymbol.IsActive) { deskSymbol.Activate(); }\n            doc.Create.NewFamilyInstance(new XYZ(5, 5, 0), deskSymbol, level1, StructuralType.NonStructural);\n        }\n    }\n}"}
{"prompt":"Crea un suelo para un data center con un acabado de piso técnico elevado a 60cm sobre el nivel.","completion":"FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name.Contains(\"Data Center\")) as Level;\nif(floorType != null && level != null)\n{\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { Line.CreateBound(new XYZ(0,0,0), new XYZ(20,0,0)), Line.CreateBound(new XYZ(20,0,0), new XYZ(20,15,0)), Line.CreateBound(new XYZ(20,15,0), new XYZ(0,15,0)), Line.CreateBound(new XYZ(0,15,0), new XYZ(0,0,0)) });\n    Floor raisedFloor = Floor.Create(doc, new List<CurveLoop>{profile}, floorType.Id, level.Id);\n    Parameter offsetParam = raisedFloor.get_Parameter(BuiltInParameter.FLOOR_HEIGHTABOVELEVEL_PARAM);\n    if(offsetParam != null) offsetParam.Set(UnitUtils.ConvertToInternalUnits(0.6, UnitTypeId.Meters));\n}"}
{"prompt":"Create a floor for a data center with a raised floor finish 60cm above the level.","completion":"FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name.Contains(\"Data Center\")) as Level;\nif(floorType != null && level != null)\n{\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { Line.CreateBound(new XYZ(0,0,0), new XYZ(20,0,0)), Line.CreateBound(new XYZ(20,0,0), new XYZ(20,15,0)), Line.CreateBound(new XYZ(20,15,0), new XYZ(0,15,0)), Line.CreateBound(new XYZ(0,15,0), new XYZ(0,0,0)) });\n    Floor raisedFloor = Floor.Create(doc, new List<CurveLoop>{profile}, floorType.Id, level.Id);\n    Parameter offsetParam = raisedFloor.get_Parameter(BuiltInParameter.FLOOR_HEIGHTABOVELEVEL_PARAM);\n    if(offsetParam != null) offsetParam.Set(UnitUtils.ConvertToInternalUnits(0.6, UnitTypeId.Meters));\n}"}
{"prompt":"Modela un plafón (techo) a una altura de 2.8 metros sobre el nivel del plano.","completion":"CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(ceilingType != null && level != null)\n{\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0)), Line.CreateBound(new XYZ(10,0,0), new XYZ(10,10,0)), Line.CreateBound(new XYZ(10,10,0), new XYZ(0,10,0)), Line.CreateBound(new XYZ(0,10,0), new XYZ(0,0,0)) });\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\n    Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n    if(heightParam != null) heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n}"}
{"prompt":"Model a ceiling at a height of 2.8 meters above the plane level.","completion":"CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(ceilingType != null && level != null)\n{\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0)), Line.CreateBound(new XYZ(10,0,0), new XYZ(10,10,0)), Line.CreateBound(new XYZ(10,10,0), new XYZ(0,10,0)), Line.CreateBound(new XYZ(0,10,0), new XYZ(0,0,0)) });\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\n    Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n    if(heightParam != null) heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n}"}
{"prompt":"Crea una nueva habitación en el Nivel 1 en la coordenada UV(10, 10).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    Room newRoom = doc.Create.NewRoom(level1, new UV(10, 10));\n}"}
{"prompt":"Create a new room on Level 1 at coordinate UV(10, 10).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    Room newRoom = doc.Create.NewRoom(level1, new UV(10, 10));\n}"}
{"prompt":"Crea un techo usando un contorno rectangular en 'Roof Level'.","completion":"Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Roof Level\") as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nif(roofLevel != null && roofType != null)\n{\n    CurveLoop roofProfile = CurveLoop.Create(new List<Curve> { Line.CreateBound(new XYZ(0,0,0), new XYZ(20,0,0)), Line.CreateBound(new XYZ(20,0,0), new XYZ(20,30,0)), Line.CreateBound(new XYZ(20,30,0), new XYZ(0,30,0)), Line.CreateBound(new XYZ(0,30,0), new XYZ(0,0,0)) });\n    ModelCurveArray footPrintToModelCurveMapping = new ModelCurveArray();\n    FootPrintRoof roof = doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out footPrintToModelCurveMapping);\n}"}
{"prompt":"Create a roof using a rectangular footprint on 'Roof Level'.","completion":"Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Roof Level\") as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nif(roofLevel != null && roofType != null)\n{\n    CurveLoop roofProfile = CurveLoop.Create(new List<Curve> { Line.CreateBound(new XYZ(0,0,0), new XYZ(20,0,0)), Line.CreateBound(new XYZ(20,0,0), new XYZ(20,30,0)), Line.CreateBound(new XYZ(20,30,0), new XYZ(0,30,0)), Line.CreateBound(new XYZ(0,30,0), new XYZ(0,0,0)) });\n    ModelCurveArray footPrintToModelCurveMapping = new ModelCurveArray();\n    FootPrintRoof roof = doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out footPrintToModelCurveMapping);\n}"}
{"prompt":"Coloca rociadores en un plafón en una retícula de 4x5 con espaciado de 3 metros.","completion":"FamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nCeiling ceilingHost = new FilteredElementCollector(doc).OfClass(typeof(Ceiling)).FirstOrDefault() as Ceiling;\nif (sprinklerSymbol != null && ceilingHost != null)\n{\n    if (!sprinklerSymbol.IsActive) { sprinklerSymbol.Activate(); }\n    double spacing = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    for(int i = 0; i < 4; i++)\n    {\n        for(int j = 0; j < 5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i * spacing, j * spacing, 0), sprinklerSymbol, ceilingHost);\n        }\n    }\n}"}
{"prompt":"Place sprinkler heads on a ceiling in a 4x5 grid with 3-meter spacing.","completion":"FamilySymbol sprinklerSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sprinklers).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nCeiling ceilingHost = new FilteredElementCollector(doc).OfClass(typeof(Ceiling)).FirstOrDefault() as Ceiling;\nif (sprinklerSymbol != null && ceilingHost != null)\n{\n    if (!sprinklerSymbol.IsActive) { sprinklerSymbol.Activate(); }\n    double spacing = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    for(int i = 0; i < 4; i++)\n    {\n        for(int j = 0; j < 5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i * spacing, j * spacing, 0), sprinklerSymbol, ceilingHost);\n        }\n    }\n}"}
{"prompt":"Coloca una toma de datos (data outlet) a 45cm del suelo en el primer muro que encuentres.","completion":"FamilySymbol dataOutletSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DataDevices).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall wallHost = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif (dataOutletSymbol != null && wallHost != null)\n{\n    if(!dataOutletSymbol.IsActive) {dataOutletSymbol.Activate();}\n    Level level = doc.GetElement(wallHost.LevelId) as Level;\n    double height = UnitUtils.ConvertToInternalUnits(450, UnitTypeId.Millimeters);\n    XYZ insertionPoint = (wallHost.Location as LocationCurve).Curve.Evaluate(0.5, true).Add(new XYZ(0,0,height));\n    doc.Create.NewFamilyInstance(insertionPoint, dataOutletSymbol, wallHost, level, StructuralType.NonStructural);\n}"}
{"prompt":"Place a data outlet 45cm above the floor on the first wall found.","completion":"FamilySymbol dataOutletSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DataDevices).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall wallHost = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif (dataOutletSymbol != null && wallHost != null)\n{\n    if(!dataOutletSymbol.IsActive) {dataOutletSymbol.Activate();}\n    Level level = doc.GetElement(wallHost.LevelId) as Level;\n    double height = UnitUtils.ConvertToInternalUnits(450, UnitTypeId.Millimeters);\n    XYZ insertionPoint = (wallHost.Location as LocationCurve).Curve.Evaluate(0.5, true).Add(new XYZ(0,0,height));\n    doc.Create.NewFamilyInstance(insertionPoint, dataOutletSymbol, wallHost, level, StructuralType.NonStructural);\n}"}
{"prompt":"Crea una nueva familia 'in-situ' para una pieza de equipo eléctrico.","completion":"ElementId categoryId = new ElementId(BuiltInCategory.OST_ElectricalEquipment);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(level != null) InPlaceElement.Create(doc, categoryId, level.Id);"}
{"prompt":"Create a new in-place family for a piece of electrical equipment.","completion":"ElementId categoryId = new ElementId(BuiltInCategory.OST_ElectricalEquipment);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(level != null) InPlaceElement.Create(doc, categoryId, level.Id);"}
{"prompt":"Encuentra todos los extremos de tubería desconectados en el proyecto.","completion":"var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>();\nList<Connector> unconnected = new List<Connector>();\nforeach(Pipe p in pipes)\n{\n    foreach(Connector c in p.ConnectorManager.Connectors)\n    {\n        if(!c.IsConnected) unconnected.Add(c);\n    }\n}"}
{"prompt":"Find all unconnected pipe ends in the project.","completion":"var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>();\nList<Connector> unconnected = new List<Connector>();\nforeach(Pipe p in pipes)\n{\n    foreach(Connector c in p.ConnectorManager.Connectors)\n    {\n        if(!c.IsConnected) unconnected.Add(c);\n    }\n}"}
{"prompt":"Aplica aislamiento de 50mm de espesor a todas las tuberías de agua helada.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType chilledWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Chilled Water\"));\nif(insulationType != null && chilledWaterSystem != null)\n{\n    var pipesToInsulate = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == chilledWaterSystem.Id);\n    double thickness = UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Millimeters);\n    foreach(Pipe pipe in pipesToInsulate)\n    {\n        PipeInsulation.Create(doc, pipe.Id, insulationType.Id, thickness);\n    }\n}"}
{"prompt":"Apply 50mm thick insulation to all chilled water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType chilledWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Chilled Water\"));\nif(insulationType != null && chilledWaterSystem != null)\n{\n    var pipesToInsulate = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == chilledWaterSystem.Id);\n    double thickness = UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Millimeters);\n    foreach(Pipe pipe in pipesToInsulate)\n    {\n        PipeInsulation.Create(doc, pipe.Id, insulationType.Id, thickness);\n    }\n}"}
{"prompt":"Etiqueta todas las puertas en la vista activa con su valor de 'Type Mark'.","completion":"View activeView = doc.ActiveView;\nvar doors = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType();\nforeach(Element door in doors)\n{\n    LocationPoint loc = door.Location as LocationPoint;\n    if (loc != null) IndependentTag.Create(doc, activeView.Id, new Reference(door), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n}"}
{"prompt":"Tag all doors in the active view with their 'Type Mark' value.","completion":"View activeView = doc.ActiveView;\nvar doors = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType();\nforeach(Element door in doors)\n{\n    LocationPoint loc = door.Location as LocationPoint;\n    if (loc != null) IndependentTag.Create(doc, activeView.Id, new Reference(door), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n}"}
{"prompt":"Crea una leyenda de tipos de muro, mostrando el nombre y una imagen de cada tipo.","completion":"ViewFamilyType legendVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Legend);\nif (legendVFT != null)\n{\n    ViewLegend legendView = ViewLegend.Create(doc, legendVFT.Id);\n    legendView.Name = \"Leyenda de Muros\";\n    var wallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElements();\n    double y_coord = 0.0;\n    foreach(WallType wt in wallTypes)\n    {\n        LegendComponent.Create(doc, legendView.Id, wt.Id, new XYZ(2, y_coord, 0));\n        TextNote.Create(doc, legendView.Id, new XYZ(0, y_coord, 0), wt.Name, TextNoteType.CreateDefault(doc).Id);\n        y_coord -= 5.0;\n    }\n}"}
{"prompt":"Create a wall type legend, showing the name and an image of each type.","completion":"ViewFamilyType legendVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Legend);\nif (legendVFT != null)\n{\n    ViewLegend legendView = ViewLegend.Create(doc, legendVFT.Id);\n    legendView.Name = \"Wall Legend\";\n    var wallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElements();\n    double y_coord = 0.0;\n    foreach(WallType wt in wallTypes)\n    {\n        LegendComponent.Create(doc, legendView.Id, wt.Id, new XYZ(2, y_coord, 0));\n        TextNote.Create(doc, legendView.Id, new XYZ(0, y_coord, 0), wt.Name, TextNoteType.CreateDefault(doc).Id);\n        y_coord -= 5.0;\n    }\n}"}
{"prompt":"Crea una dimensión lineal alineada con un muro seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nWall wall = doc.GetElement(wallRef) as Wall;\nif (wall != null)\n{\n    LocationCurve locCurve = wall.Location as LocationCurve;\n    Line wallLine = locCurve.Curve as Line;\n    ReferenceArray refArray = new ReferenceArray();\n    refArray.Append(wallLine.GetEndPointReference(0));\n    refArray.Append(wallLine.GetEndPointReference(1));\n    XYZ p1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ); XYZ p2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ);\n    Line dimLine = Line.CreateBound(p1, p2);\n    doc.Create.NewDimension(doc.ActiveView, dimLine, refArray);\n}"}
{"prompt":"Create a linear dimension aligned with a selected wall.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\nWall wall = doc.GetElement(wallRef) as Wall;\nif (wall != null)\n{\n    LocationCurve locCurve = wall.Location as LocationCurve;\n    Line wallLine = locCurve.Curve as Line;\n    ReferenceArray refArray = new ReferenceArray();\n    refArray.Append(wallLine.GetEndPointReference(0));\n    refArray.Append(wallLine.GetEndPointReference(1));\n    XYZ p1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ); XYZ p2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ);\n    Line dimLine = Line.CreateBound(p1, p2);\n    doc.Create.NewDimension(doc.ActiveView, dimLine, refArray);\n}"}
{"prompt":"Crea una cota de coordenada en la esquina de una zapata de cimentación.","completion":"FamilyInstance footing = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif(footing != null)\n{\n    Options opt = new Options() { ComputeReferences = true };\n    GeometryElement geo = footing.get_Geometry(opt);\n    Solid solid = geo.OfType<Solid>().FirstOrDefault(s => s.Volume > 0);\n    if(solid != null)\n    {\n        Edge edge = solid.Edges.get_Item(0);\n        Reference cornerRef = edge.GetEndPointReference(0);\n        XYZ pointOnFace = cornerRef.GlobalPoint;\n        doc.Create.NewSpotCoordinate(doc.ActiveView, cornerRef, pointOnFace + new XYZ(1,1,0), new XYZ(1,1,0), new XYZ(1,1,0), true);\n    }\n}"}
{"prompt":"Create a spot coordinate dimension on the corner of a foundation footing.","completion":"FamilyInstance footing = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif(footing != null)\n{\n    Options opt = new Options() { ComputeReferences = true };\n    GeometryElement geo = footing.get_Geometry(opt);\n    Solid solid = geo.OfType<Solid>().FirstOrDefault(s => s.Volume > 0);\n    if(solid != null)\n    {\n        Edge edge = solid.Edges.get_Item(0);\n        Reference cornerRef = edge.GetEndPointReference(0);\n        XYZ pointOnFace = cornerRef.GlobalPoint;\n        doc.Create.NewSpotCoordinate(doc.ActiveView, cornerRef, pointOnFace + new XYZ(1,1,0), new XYZ(1,1,0), new XYZ(1,1,0), true);\n    }\n}"}
{"prompt":"Crea una dimensión radial para un muro curvo.","completion":"Wall curvedWall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.Location is LocationCurve && (w.Location as LocationCurve).Curve is Arc);\nif (curvedWall != null)\n{\n    Arc arc = (curvedWall.Location as LocationCurve).Curve as Arc;\n    XYZ leaderEndPoint = arc.Center.Add(new XYZ(arc.Radius + 2, 0, 0));\n    doc.Create.NewRadialDimension(doc.ActiveView, new Reference(curvedWall), leaderEndPoint, arc.Radius);\n}"}
{"prompt":"Create a radial dimension for a curved wall.","completion":"Wall curvedWall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.Location is LocationCurve && (w.Location as LocationCurve).Curve is Arc);\nif (curvedWall != null)\n{\n    Arc arc = (curvedWall.Location as LocationCurve).Curve as Arc;\n    XYZ leaderEndPoint = arc.Center.Add(new XYZ(arc.Radius + 2, 0, 0));\n    doc.Create.NewRadialDimension(doc.ActiveView, new Reference(curvedWall), leaderEndPoint, arc.Radius);\n}"}
{"prompt":"Crea una nueva fase de proyecto llamada 'Fase 2 - Remodelación'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Fase 2 - Remodelación\";"}
{"prompt":"Create a new project phase named 'Phase 2 - Remodeling'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Phase 2 - Remodeling\";"}
{"prompt":"Asigna un grupo de muros seleccionados para ser demolidos en la fase 'Fase Existente'.","completion":"UIDocument uidoc = new UIDocument(doc);\nPhase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).FirstOrDefault(p => p.Name == \"Fase Existente\") as Phase;\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (demolishedPhase != null && selectedIds.Any())\n{\n    var selectedWalls = selectedIds.Select(id => doc.GetElement(id) as Wall).Where(w => w != null);\n    foreach(Wall wall in selectedWalls)\n    {\n        wall.DemolishedPhaseId = demolishedPhase.Id;\n    }\n}"}
{"prompt":"Assign a group of selected walls to be demolished in the 'Existing Phase'.","completion":"UIDocument uidoc = new UIDocument(doc);\nPhase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).FirstOrDefault(p => p.Name == \"Existing Phase\") as Phase;\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (demolishedPhase != null && selectedIds.Any())\n{\n    var selectedWalls = selectedIds.Select(id => doc.GetElement(id) as Wall).Where(w => w != null);\n    foreach(Wall wall in selectedWalls)\n    {\n        wall.DemolishedPhaseId = demolishedPhase.Id;\n    }\n}"}
{"prompt":"Asigna los elementos seleccionados a un workset llamado 'Facade', creándolo si no existe.","completion":"UIDocument uidoc = new UIDocument(doc);\nif(doc.IsWorkshared) {\n    Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Facade\") as Workset;\n    if (workset == null) { workset = Workset.Create(doc, \"Facade\"); }\n    ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n    if(workset != null && selectedIds.Any())\n    {\n        WorksharingUtils.ChangeWorkset(doc, selectedIds, workset.Id);\n    }\n}"}
{"prompt":"Assign the selected elements to a workset named 'Facade', creating it if it doesn't exist.","completion":"UIDocument uidoc = new UIDocument(doc);\nif(doc.IsWorkshared) {\n    Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Facade\") as Workset;\n    if (workset == null) { workset = Workset.Create(doc, \"Facade\"); }\n    ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n    if(workset != null && selectedIds.Any())\n    {\n        WorksharingUtils.ChangeWorkset(doc, selectedIds, workset.Id);\n    }\n}"}
{"prompt":"Crea una nueva revisión y aplícala a la hoja activa.","completion":"ViewSheet sheet = doc.ActiveView as ViewSheet;\nif (sheet != null)\n{\n    Revision rev = Revision.Create(doc);\n    rev.Description = \"Issued for Construction\";\n    rev.RevisionDate = DateTime.Now.ToString(\"yyyy-MM-dd\");\n    rev.IssuedBy = \"BIM Department\";\n    ICollection<ElementId> revisions = sheet.GetAllRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}
{"prompt":"Create a new revision and apply it to the active sheet.","completion":"ViewSheet sheet = doc.ActiveView as ViewSheet;\nif (sheet != null)\n{\n    Revision rev = Revision.Create(doc);\n    rev.Description = \"Issued for Construction\";\n    rev.RevisionDate = DateTime.Now.ToString(\"yyyy-MM-dd\");\n    rev.IssuedBy = \"BIM Department\";\n    ICollection<ElementId> revisions = sheet.GetAllRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}
{"prompt":"Crea un parámetro de proyecto de tipo texto, llamado 'Clasificación de Espacio' y aplícalo a la categoría de habitaciones.","completion":"string sharedParamsFile = doc.Application.SharedParametersFilename;\nif(string.IsNullOrEmpty(sharedParamsFile) || !System.IO.File.Exists(sharedParamsFile)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\shared_params.txt\"; System.IO.File.Create(sharedParamsFile).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = defFile.Groups.EnsureDefinitionGroup(\"CustomParameters\");\nExternalDefinition def = group.Definitions.Create(new ExternalDefinitionCreationOptions(\"Clasificación de Espacio\", SpecTypeId.String.Text)) as ExternalDefinition;\nCategory roomCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Rooms);\nCategorySet catSet = doc.Application.Create.NewCategorySet();\ncatSet.Insert(roomCat);\nInstanceBinding binding = doc.Application.Create.NewInstanceBinding(catSet);\ndoc.ParameterBindings.Insert(def, binding, BuiltInParameterGroup.PG_IDENTITY_DATA);"}
{"prompt":"Create a text project parameter named 'Space Classification' and apply it to the rooms category.","completion":"string sharedParamsFile = doc.Application.SharedParametersFilename;\nif(string.IsNullOrEmpty(sharedParamsFile) || !System.IO.File.Exists(sharedParamsFile)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\shared_params.txt\"; System.IO.File.Create(sharedParamsFile).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = defFile.Groups.EnsureDefinitionGroup(\"CustomParameters\");\nExternalDefinition def = group.Definitions.Create(new ExternalDefinitionCreationOptions(\"Space Classification\", SpecTypeId.String.Text)) as ExternalDefinition;\nCategory roomCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Rooms);\nCategorySet catSet = doc.Application.Create.NewCategorySet();\ncatSet.Insert(roomCat);\nInstanceBinding binding = doc.Application.Create.NewInstanceBinding(catSet);\ndoc.ParameterBindings.Insert(def, binding, BuiltInParameterGroup.PG_IDENTITY_DATA);"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 1 a 'Clasificación Fuego - 90 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    var doors = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id);\n    foreach(FamilyInstance door in doors)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if(commentsParam != null) commentsParam.Set(\"Clasificación Fuego - 90 min\");\n    }\n}"}
{"prompt":"Set the 'Comments' parameter of all doors on Level 1 to 'Fire Rating - 90 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    var doors = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id);\n    foreach(FamilyInstance door in doors)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if(commentsParam != null) commentsParam.Set(\"Fire Rating - 90 min\");\n    }\n}"}
{"prompt":"Exporta cada tabla de planificación a un archivo CSV individual en un directorio especificado.","completion":"string exportPath = @\"C:\\RevitExports\\\";\nif(!System.IO.Directory.Exists(exportPath)) System.IO.Directory.CreateDirectory(exportPath);\nvar schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => !vs.IsTemplate);\nViewScheduleExportOptions options = new ViewScheduleExportOptions();\noptions.FieldDelimiter = \",\";\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Export(exportPath, schedule.Name + \".csv\", options);\n}"}
{"prompt":"Export each schedule to an individual CSV file in a specified directory.","completion":"string exportPath = @\"C:\\RevitExports\\\";\nif(!System.IO.Directory.Exists(exportPath)) System.IO.Directory.CreateDirectory(exportPath);\nvar schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => !vs.IsTemplate);\nViewScheduleExportOptions options = new ViewScheduleExportOptions();\noptions.FieldDelimiter = \",\";\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Export(exportPath, schedule.Name + \".csv\", options);\n}"}
{"prompt":"Exporta el modelo a formato IFC 4 para coordinación.","completion":"IFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4;\ndoc.Export(@\"C:\\RevitExports\\\", \"Model-For-Coordination.ifc\", options);"}
{"prompt":"Export the model to IFC 4 format for coordination.","completion":"IFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4;\ndoc.Export(@\"C:\\RevitExports\\\", \"Model-For-Coordination.ifc\", options);"}
{"prompt":"Importa un archivo DWG como un vínculo en la vista activa para usarlo como referencia.","completion":"string filePath = @\"C:\\CAD_Files\\Base_Plan.dwg\";\nif(System.IO.File.Exists(filePath))\n{\n    DWGImportOptions options = new DWGImportOptions();\n    options.ColorMode = ImportColorMode.Preserved;\n    ElementId linkedFileId;\n    doc.Link(filePath, options, doc.ActiveView, out linkedFileId);\n}"}
{"prompt":"Import a DWG file as a link into the active view to use as a reference.","completion":"string filePath = @\"C:\\CAD_Files\\Base_Plan.dwg\";\nif(System.IO.File.Exists(filePath))\n{\n    DWGImportOptions options = new DWGImportOptions();\n    options.ColorMode = ImportColorMode.Preserved;\n    ElementId linkedFileId;\n    doc.Link(filePath, options, doc.ActiveView, out linkedFileId);\n}"}
{"prompt":"Exporta todas las hojas de un conjunto llamado 'Conjunto Arquitectónico' a un único PDF combinado.","completion":"ViewSheetSet sheetSet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheetSet)).FirstOrDefault(ss => ss.Name == \"Conjunto Arquitectónico\") as ViewSheetSet;\nif(sheetSet != null)\n{\n    PDFExportOptions options = new PDFExportOptions();\n    options.Combine = true;\n    options.FileName = \"ConjuntoArquitectonico\";\n    List<ElementId> sheetIds = sheetSet.Views.Cast<ViewSheet>().Select(s => s.Id).ToList();\n    if(sheetIds.Any()) doc.Export(@\"C:\\RevitExports\\\", sheetIds, options);\n}"}
{"prompt":"Export all sheets in a set named 'Architectural Set' to a single combined PDF.","completion":"ViewSheetSet sheetSet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheetSet)).FirstOrDefault(ss => ss.Name == \"Architectural Set\") as ViewSheetSet;\nif(sheetSet != null)\n{\n    PDFExportOptions options = new PDFExportOptions();\n    options.Combine = true;\n    options.FileName = \"ArchitecturalSet\";\n    List<ElementId> sheetIds = sheetSet.Views.Cast<ViewSheet>().Select(s => s.Id).ToList();\n    if(sheetIds.Any()) doc.Export(@\"C:\\RevitExports\\\", sheetIds, options);\n}"}
{"prompt":"Fija un elemento seleccionado para evitar su modificación accidental.","completion":"UIDocument uidoc = new UIDocument(doc);\nElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\nif (selectedId != null && selectedId != ElementId.InvalidElementId)\n{\n    Element elementToPin = doc.GetElement(selectedId);\n    if (elementToPin != null && !elementToPin.Pinned)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}
{"prompt":"Pin a selected element to prevent accidental modification.","completion":"UIDocument uidoc = new UIDocument(doc);\nElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\nif (selectedId != null && selectedId != ElementId.InvalidElementId)\n{\n    Element elementToPin = doc.GetElement(selectedId);\n    if (elementToPin != null && !elementToPin.Pinned)\n    {\n        elementToPin.Pinned = true;\n    }\n}"}
{"prompt":"Elimina todas las líneas de detalle de la vista activa.","completion":"ICollection<ElementId> detailLines = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(DetailLine)).ToElementIds();\nif(detailLines.Any())\n{\n    doc.Delete(detailLines);\n}"}
{"prompt":"Delete all detail lines from the active view.","completion":"ICollection<ElementId> detailLines = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(DetailLine)).ToElementIds();\nif(detailLines.Any())\n{\n    doc.Delete(detailLines);\n}"}
{"prompt":"Crea una 'Caja de Referencia' que abarque el 'Bloque A' del edificio.","completion":"BoundingBoxXYZ scopeBoxVolume = new BoundingBoxXYZ();\nscopeBoxVolume.Min = new XYZ(0,0,0);\nscopeBoxVolume.Max = new XYZ(50, 40, 20);\nView3D viewForBox = new FilteredElementCollector(doc).OfClass(typeof(View3D)).FirstOrDefault() as View3D;\nif (viewForBox != null) {\n    ScopeBox box = ScopeBox.Create(doc, scopeBoxVolume);\n    box.Name = \"Bloque A\";\n    box.Views.Insert(viewForBox);\n}"}
{"prompt":"Create a 'Scope Box' that encompasses 'Block A' of the building.","completion":"BoundingBoxXYZ scopeBoxVolume = new BoundingBoxXYZ();\nscopeBoxVolume.Min = new XYZ(0,0,0);\nscopeBoxVolume.Max = new XYZ(50, 40, 20);\nView3D viewForBox = new FilteredElementCollector(doc).OfClass(typeof(View3D)).FirstOrDefault() as View3D;\nif (viewForBox != null) {\n    ScopeBox box = ScopeBox.Create(doc, scopeBoxVolume);\n    box.Name = \"Block A\";\n    box.Views.Insert(viewForBox);\n}"}
{"prompt":"Une la geometría de una columna estructural y un suelo que se intersectan.","completion":"Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\nif(column != null && floor != null && !JoinGeometryUtils.AreElementsJoined(doc, column, floor))\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}
{"prompt":"Join the geometry of a structural column and a floor that intersect.","completion":"Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\nif(column != null && floor != null && !JoinGeometryUtils.AreElementsJoined(doc, column, floor))\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}
{"prompt":"Ajusta la rotación del norte de proyecto a 30 grados en sentido horario.","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsSurveyPoint);\nif (projectBasePoint != null)\n{\n    double angle = -30 * Math.PI / 180.0; // Negativo para sentido horario\n    ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, Line.CreateBound(projectBasePoint.Position, projectBasePoint.Position + XYZ.BasisZ), angle);\n}"}
{"prompt":"Adjust the project north rotation 30 degrees clockwise.","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsSurveyPoint);\nif (projectBasePoint != null)\n{\n    double angle = -30 * Math.PI / 180.0; // Negative for clockwise\n    ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, Line.CreateBound(projectBasePoint.Position, projectBasePoint.Position + XYZ.BasisZ), angle);\n}"}
{"prompt":"Crea un barrido de muro 'in-situ' a lo largo de un muro.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallSweepType sweepType = new FilteredElementCollector(doc).OfClass(typeof(WallSweepType)).FirstOrDefault() as WallSweepType;\nif (wall != null && sweepType != null)\n{\n    WallSweepInfo info = new WallSweepInfo(true, WallSweepType.Sweep);\n    WallSweep.Create(doc, wall.Id, sweepType.Id, info);\n}"}
{"prompt":"Create an in-place wall sweep along a wall.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallSweepType sweepType = new FilteredElementCollector(doc).OfClass(typeof(WallSweepType)).FirstOrDefault() as WallSweepType;\nif (wall != null && sweepType != null)\n{\n    WallSweepInfo info = new WallSweepInfo(true, WallSweepType.Sweep);\n    WallSweep.Create(doc, wall.Id, sweepType.Id, info);\n}"}
{"prompt":"Asigna un acabado de 'Pintura Blanca' a la cara interior de los muros perimetrales.","completion":"Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Pintura Blanca\") as Material;\nvar exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior);\nif (paintMaterial != null)\n{\n    foreach (Wall w in exteriorWalls)\n    {\n        Face interiorFace = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior).FirstOrDefault();\n        if (interiorFace != null)\n        {\n            doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n        }\n    }\n}"}
{"prompt":"Assign a 'White Paint' finish to the interior face of the perimeter walls.","completion":"Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"White Paint\") as Material;\nvar exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior);\nif (paintMaterial != null)\n{\n    foreach (Wall w in exteriorWalls)\n    {\n        Face interiorFace = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior).FirstOrDefault();\n        if (interiorFace != null)\n        {\n            doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n        }\n    }\n}"}
{"prompt":"Inserta una ventana de tipo '1m x 1.2m' en un muro existente.","completion":"FamilySymbol windowSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault(fs => fs.Name.Contains(\"1m x 1.2m\")) as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif (windowSymbol != null && hostWall != null)\n{\n    if (!windowSymbol.IsActive) windowSymbol.Activate();\n    Level lvl = doc.GetElement(hostWall.LevelId) as Level;\n    XYZ pt = (hostWall.Location as LocationCurve).Curve.Evaluate(0.5, true);\n    doc.Create.NewFamilyInstance(pt, windowSymbol, hostWall, lvl, StructuralType.NonStructural);\n}"}
{"prompt":"Insert a '1m x 1.2m' type window into an existing wall.","completion":"FamilySymbol windowSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault(fs => fs.Name.Contains(\"1m x 1.2m\")) as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif (windowSymbol != null && hostWall != null)\n{\n    if (!windowSymbol.IsActive) windowSymbol.Activate();\n    Level lvl = doc.GetElement(hostWall.LevelId) as Level;\n    XYZ pt = (hostWall.Location as LocationCurve).Curve.Evaluate(0.5, true);\n    doc.Create.NewFamilyInstance(pt, windowSymbol, hostWall, lvl, StructuralType.NonStructural);\n}"}
{"prompt":"Crea una columna estructural en las coordenadas (10, 5, 0) sobre el Nivel 1.","completion":"FamilySymbol colSym = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (colSym != null && lvl1 != null)\n{\n    if (!colSym.IsActive) colSym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10,5,0), colSym, lvl1, StructuralType.Column);\n}"}
{"prompt":"Create a structural column at coordinates (10, 5, 0) on Level 1.","completion":"FamilySymbol colSym = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (colSym != null && lvl1 != null)\n{\n    if (!colSym.IsActive) colSym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10,5,0), colSym, lvl1, StructuralType.Column);\n}"}
{"prompt":"Genera un suelo rectangular de 10x8 metros.","completion":"FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault();\nLevel lvl = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif (floorType != null && lvl != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double depth = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,depth,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,depth,0), new XYZ(0,depth,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,depth,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop>{loop}, floorType.Id, lvl.Id);\n}"}
{"prompt":"Generate a 10x8 meter rectangular floor.","completion":"FloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault();\nLevel lvl = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif (floorType != null && lvl != null)\n{\n    double width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    double depth = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    CurveLoop loop = new CurveLoop();\n    loop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,depth,0)));\n    loop.Append(Line.CreateBound(new XYZ(width,depth,0), new XYZ(0,depth,0)));\n    loop.Append(Line.CreateBound(new XYZ(0,depth,0), new XYZ(0,0,0)));\n    Floor.Create(doc, new List<CurveLoop>{loop}, floorType.Id, lvl.Id);\n}"}
{"prompt":"Crea cuatro ejes verticales espaciados cada 10 metros.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 4; i++)\n{\n    Line ln = Line.CreateBound(new XYZ(i * spacing,0,0), new XYZ(i * spacing,40,0));\n    Grid.Create(doc, ln);\n}"}
{"prompt":"Create four vertical grids spaced 10 meters apart.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 4; i++)\n{\n    Line ln = Line.CreateBound(new XYZ(i * spacing,0,0), new XYZ(i * spacing,40,0));\n    Grid.Create(doc, ln);\n}"}
{"prompt":"Coloca columnas estructurales en cada intersección de la rejilla.","completion":"FamilySymbol colS = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel lvl = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nvar grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\nif (colS != null && lvl != null && grids.Count > 1)\n{\n    if (!colS.IsActive) colS.Activate();\n    for(int i=0;i<grids.Count;i++)\n    {\n        for(int j=i+1;j<grids.Count;j++)\n        {\n            SetComparisonResult res = grids[i].Curve.Intersect(grids[j].Curve, out IntersectionResultArray ints);\n            if(res == SetComparisonResult.Overlap && ints!=null)\n            {\n                foreach(IntersectionResult ir in ints) doc.Create.NewFamilyInstance(ir.XYZPoint, colS, lvl, StructuralType.Column);\n            }\n        }\n    }\n}"}
{"prompt":"Place structural columns at each grid intersection.","completion":"FamilySymbol colS = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel lvl = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nvar grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\nif (colS != null && lvl != null && grids.Count > 1)\n{\n    if (!colS.IsActive) colS.Activate();\n    for(int i=0;i<grids.Count;i++)\n    {\n        for(int j=i+1;j<grids.Count;j++)\n        {\n            SetComparisonResult res = grids[i].Curve.Intersect(grids[j].Curve, out IntersectionResultArray ints);\n            if(res == SetComparisonResult.Overlap && ints!=null)\n            {\n                foreach(IntersectionResult ir in ints) doc.Create.NewFamilyInstance(ir.XYZPoint, colS, lvl, StructuralType.Column);\n            }\n        }\n    }\n}"}
{"prompt":"Crea una puerta con la marca de tipo 'D-01' en un muro.","completion":"FamilySymbol doorSym = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.get_Parameter(BuiltInParameter.ALL_MODEL_TYPE_MARK).AsString() == \"D-01\");\nWall w = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif (doorSym!=null && w!=null)\n{\n    if (!doorSym.IsActive) doorSym.Activate();\n    Level lvl = doc.GetElement(w.LevelId) as Level;\n    XYZ pt = (w.Location as LocationCurve).Curve.Evaluate(0.5, true);\n    doc.Create.NewFamilyInstance(pt, doorSym, w, lvl, StructuralType.NonStructural);\n}"}
{"prompt":"Create a door with the type mark 'D-01' in a wall.","completion":"FamilySymbol doorSym = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.get_Parameter(BuiltInParameter.ALL_MODEL_TYPE_MARK).AsString() == \"D-01\");\nWall w = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif (doorSym!=null && w!=null)\n{\n    if (!doorSym.IsActive) doorSym.Activate();\n    Level lvl = doc.GetElement(w.LevelId) as Level;\n    XYZ pt = (w.Location as LocationCurve).Curve.Evaluate(0.5, true);\n    doc.Create.NewFamilyInstance(pt, doorSym, w, lvl, StructuralType.NonStructural);\n}"}
{"prompt":"Crea una escalera con 12 peldaños entre el Nivel 1 y el Nivel 2.","completion":"Level l1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l=>l.Name==\"Nivel 1\") as Level;\nLevel l2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l=>l.Name==\"Nivel 2\") as Level;\nif(l1!=null && l2!=null)\n{\n    using(StairsEditScope ses=new StairsEditScope(doc,\"Crear Escalera\"))\n    {\n        ElementId sid = ses.Start(l1.Id, l2.Id);\n        Stairs.CreateSketchedLanding(doc, sid, new CurveLoop(), 0);\n        StairsRun.CreateSketchedRun(doc, sid, l1.Elevation, 12, \"Center\");\n        ses.Commit(new StairsEditScopeFailuresPreprocessor());\n    }\n}"}
{"prompt":"Create a 12-step stair between Level 1 and Level 2.","completion":"Level l1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l=>l.Name==\"Level 1\") as Level;\nLevel l2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l=>l.Name==\"Level 2\") as Level;\nif(l1!=null && l2!=null)\n{\n    using(StairsEditScope ses=new StairsEditScope(doc,\"Create Stair\"))\n    {\n        ElementId sid = ses.Start(l1.Id, l2.Id);\n        Stairs.CreateSketchedLanding(doc, sid, new CurveLoop(), 0);\n        StairsRun.CreateSketchedRun(doc, sid, l1.Elevation, 12, \"Center\");\n        ses.Commit(new StairsEditScopeFailuresPreprocessor());\n    }\n}"}
{"prompt":"Genera un barandal en el borde de una escalera existente.","completion":"RailingType rt = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs st0 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Stairs).FirstOrDefault() as Stairs;\nif(rt!=null && st0!=null)\n{\n    Railing.Create(doc, st0.Id, rt.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Generate a railing on the edge of an existing stair.","completion":"RailingType rt = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs st0 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Stairs).FirstOrDefault() as Stairs;\nif(rt!=null && st0!=null)\n{\n    Railing.Create(doc, st0.Id, rt.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Crea un conducto eléctrico (conduit) de 1 pulgada.","completion":"ConduitType cdt = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstOrDefault() as ConduitType;\nLevel lvlx = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(cdt!=null && lvlx!=null)\n{\n    XYZ p1=new XYZ(0,0,3), p2=new XYZ(5,0,3);\n    Conduit cond = Conduit.Create(doc, cdt.Id, p1, p2, lvlx.Id);\n    cond.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Inches));\n}"}
{"prompt":"Create a 1-inch electrical conduit.","completion":"ConduitType cdt = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstOrDefault() as ConduitType;\nLevel lvlx = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(cdt!=null && lvlx!=null)\n{\n    XYZ p1=new XYZ(0,0,3), p2=new XYZ(5,0,3);\n    Conduit cond = Conduit.Create(doc, cdt.Id, p1, p2, lvlx.Id);\n    cond.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Inches));\n}"}
{"prompt":"Dibuja un conducto de ventilación de 300x200 mm.","completion":"DuctType dt = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).FirstOrDefault(d=>d.Shape==ConnectorProfileType.Rectangular) as DuctType;\nMEPSystemType mst = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s=>s.SystemClassification==MEPSystemClassification.SupplyAir);\nLevel ly = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(dt!=null && mst!=null && ly!=null)\n{\n    XYZ s=new XYZ(0,0,3), e=new XYZ(5,0,3);\n    Duct duct = Duct.Create(doc, mst.Id, dt.Id, ly.Id, s, e);\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM).Set(UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM).Set(UnitUtils.ConvertToInternalUnits(200, UnitTypeId.Millimeters));\n}"}
{"prompt":"Draw a 300x200 mm ventilation duct.","completion":"DuctType dt = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).FirstOrDefault(d=>d.Shape==ConnectorProfileType.Rectangular) as DuctType;\nMEPSystemType mst = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s=>s.SystemClassification==MEPSystemClassification.SupplyAir);\nLevel ly = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(dt!=null && mst!=null && ly!=null)\n{\n    XYZ s=new XYZ(0,0,3), e=new XYZ(5,0,3);\n    Duct duct = Duct.Create(doc, mst.Id, dt.Id, ly.Id, s, e);\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM).Set(UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM).Set(UnitUtils.ConvertToInternalUnits(200, UnitTypeId.Millimeters));\n}"}
{"prompt":"Rellena el parámetro 'Material' de todos los muros con el material 'Concreto'.","completion":"Material mat = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m=>m.Name.Contains(\"Concreto\")) as Material;\nif(mat!=null)\n{\n    var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall w in walls)\n    {\n        Parameter pm = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(pm!=null && !pm.IsReadOnly) pm.Set(mat.Id);\n    }\n}"}
{"prompt":"Fill the 'Material' parameter for all walls with the 'Concrete' material.","completion":"Material mat = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m=>m.Name.Contains(\"Concrete\")) as Material;\nif(mat!=null)\n{\n    var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall w in walls)\n    {\n        Parameter pm = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(pm!=null && !pm.IsReadOnly) pm.Set(mat.Id);\n    }\n}"}
{"prompt":"Obtén el elemento anfitrión de una instancia de ventana.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n    if(hostElement != null) TaskDialog.Show(\"Anfitrión\", \"El anfitrión es: \" + hostElement.Name);\n}"}
{"prompt":"Get the host element of a window instance.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n    if(hostElement != null) TaskDialog.Show(\"Host Element\", \"The host is: \" + hostElement.Name);\n}"}
{"prompt":"Crea una forma de masa 'in-situ' mediante una extrusión por revolución.","completion":"using (var massTransaction = new Transaction(doc, \"Create Mass Revolution\"))\n{\n    massTransaction.Start();\n    InPlaceElement mass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    SketchPlane sp = SketchPlane.Create(doc, plane);\n    Line axis = Line.CreateBound(new XYZ(0,0,0), new XYZ(0,0,5));\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(1,0,0), new XYZ(2,0,0)));\n    profile.Append(Arc.Create(new XYZ(2,0,0), new XYZ(2,0,1), new XYZ(1.5,0,0.5)));\n    profile.Append(Line.CreateBound(new XYZ(2,0,1), new XYZ(1,0,1)));\n    profile.Append(Line.CreateBound(new XYZ(1,0,1), new XYZ(1,0,0)));\n    doc.FamilyCreate.NewRevolution(true, new List<CurveLoop>{ profile }, sp, axis, 0, 2*Math.PI);\n    massTransaction.Commit();\n}"}
{"prompt":"Create an in-place mass form using a revolution extrusion.","completion":"using (var massTransaction = new Transaction(doc, \"Create Mass Revolution\"))\n{\n    massTransaction.Start();\n    InPlaceElement mass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\n    SketchPlane sp = SketchPlane.Create(doc, plane);\n    Line axis = Line.CreateBound(new XYZ(0,0,0), new XYZ(0,0,5));\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(1,0,0), new XYZ(2,0,0)));\n    profile.Append(Arc.Create(new XYZ(2,0,0), new XYZ(2,0,1), new XYZ(1.5,0,0.5)));\n    profile.Append(Line.CreateBound(new XYZ(2,0,1), new XYZ(1,0,1)));\n    profile.Append(Line.CreateBound(new XYZ(1,0,1), new XYZ(1,0,0)));\n    doc.FamilyCreate.NewRevolution(true, new List<CurveLoop>{ profile }, sp, axis, 0, 2*Math.PI);\n    massTransaction.Commit();\n}"}
{"prompt":"Obtén el espacio MEP asociado a una habitación específica por su nombre.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 101\") as Room;\nif (room != null)\n{\n    MEPSpace space = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_MEPSpaces).Cast<MEPSpace>().FirstOrDefault(s => s.Room.Id == room.Id);\n    if (space != null) TaskDialog.Show(\"Espacio MEP\", \"El espacio es: \" + space.Name);\n}"}
{"prompt":"Get the MEP space associated with a specific room by its name.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 101\") as Room;\nif (room != null)\n{\n    MEPSpace space = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_MEPSpaces).Cast<MEPSpace>().FirstOrDefault(s => s.Room.Id == room.Id);\n    if (space != null) TaskDialog.Show(\"MEP Space\", \"The space is: \" + space.Name);\n}"}
{"prompt":"Crea un suelo siguiendo el contorno de un conjunto de muros perimetrales seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selIds = uidoc.Selection.GetElementIds();\nvar walls = selIds.Select(id => doc.GetElement(id)).OfType<Wall>().ToList();\nif (walls.Count > 1)\n{\n    CurveLoop loop = new CurveLoop();\n    foreach (Wall w in walls)\n    {\n        LocationCurve lc = w.Location as LocationCurve;\n        if (lc != null) loop.Append(lc.Curve);\n    }\n    FloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n    Level lvl = doc.GetElement(walls[0].LevelId) as Level;\n    Floor.Create(doc, new List<CurveLoop>{loop}, ft.Id, lvl.Id);\n}"}
{"prompt":"Create a floor following the contour of a set of selected perimeter walls.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selIds = uidoc.Selection.GetElementIds();\nvar walls = selIds.Select(id => doc.GetElement(id)).OfType<Wall>().ToList();\nif (walls.Count > 1)\n{\n    CurveLoop loop = new CurveLoop();\n    foreach (Wall w in walls)\n    {\n        LocationCurve lc = w.Location as LocationCurve;\n        if (lc != null) loop.Append(lc.Curve);\n    }\n    FloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n    Level lvl = doc.GetElement(walls[0].LevelId) as Level;\n    Floor.Create(doc, new List<CurveLoop>{loop}, ft.Id, lvl.Id);\n}"}
{"prompt":"Calcula la longitud total de todos los conductos rectangulares en un sistema HVAC específico.","completion":"MEPSystem sys = new FilteredElementCollector(doc).OfClass(typeof(MEPSystem)).FirstOrDefault(s => s.Name == \"Supply Air 1\") as MEPSystem;\nif (sys != null)\n{\n    double totalLength = 0.0;\n    var ducts = sys.DuctNetwork.OfType<Duct>();\n    foreach (Duct d in ducts)\n    {\n        if (d.DuctType.Shape == ConnectorProfileType.Rectangular)\n        {\n            totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n        }\n    }\n    TaskDialog.Show(\"Longitud Total\", \"La longitud total es: \" + UnitUtils.ConvertFromInternalUnits(totalLength, UnitTypeId.Meters) + \" m\");\n}"}
{"prompt":"Calculate the total length of all rectangular ducts in a specific HVAC system.","completion":"MEPSystem sys = new FilteredElementCollector(doc).OfClass(typeof(MEPSystem)).FirstOrDefault(s => s.Name == \"Supply Air 1\") as MEPSystem;\nif (sys != null)\n{\n    double totalLength = 0.0;\n    var ducts = sys.DuctNetwork.OfType<Duct>();\n    foreach (Duct d in ducts)\n    {\n        if (d.DuctType.Shape == ConnectorProfileType.Rectangular)\n        {\n            totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n        }\n    }\n    TaskDialog.Show(\"Total Length\", \"The total length is: \" + UnitUtils.ConvertFromInternalUnits(totalLength, UnitTypeId.Meters) + \" m\");\n}"}
{"prompt":"Añade una nueva línea de rejilla horizontal a un muro cortina existente.","completion":"Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.CurtainGrid != null) as Wall;\nif (cw != null)\n{\n    CurtainGrid cg = cw.CurtainGrid;\n    cg.AddGridLine(false, new XYZ(0,0, UnitUtils.ConvertToInternalUnits(1.5, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Add a new horizontal grid line to an existing curtain wall.","completion":"Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.CurtainGrid != null) as Wall;\nif (cw != null)\n{\n    CurtainGrid cg = cw.CurtainGrid;\n    cg.AddGridLine(false, new XYZ(0,0, UnitUtils.ConvertToInternalUnits(1.5, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Alterna la visibilidad de un modelo de Revit vinculado específico en la vista activa.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault(li => li.Name.Contains(\"Structure_LINK\")) as RevitLinkInstance;\nif (linkInstance != null)\n{\n    ElementId categoryId = linkInstance.Category.Id;\n    bool isHidden = doc.ActiveView.GetCategoryHidden(categoryId);\n    doc.ActiveView.SetCategoryHidden(categoryId, !isHidden);\n}"}
{"prompt":"Toggle the visibility of a specific linked Revit model in the active view.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault(li => li.Name.Contains(\"Structure_LINK\")) as RevitLinkInstance;\nif (linkInstance != null)\n{\n    ElementId categoryId = linkInstance.Category.Id;\n    bool isHidden = doc.ActiveView.GetCategoryHidden(categoryId);\n    doc.ActiveView.SetCategoryHidden(categoryId, !isHidden);\n}"}
{"prompt":"Crea un nuevo material llamado 'Roble Oscuro' con una apariencia de renderizado y un patrón de superficie.","completion":"ElementId materialId = Material.Create(doc, \"Roble Oscuro\");\nMaterial material = doc.GetElement(materialId) as Material;\nFillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Wood\")) as FillPatternElement;\nif(fillPattern != null) material.SurfaceForegroundPatternId = fillPattern.Id;\nmaterial.Color = new Color(139, 69, 19);\nAppearanceAssetElement appearanceAsset = AppearanceAssetElement.Create(doc, \"RobleOscuro_Asset\", false);\nmaterial.AppearanceAssetId = appearanceAsset.Id;"}
{"prompt":"Create a new material named 'Dark Oak' with a rendering appearance and a surface pattern.","completion":"ElementId materialId = Material.Create(doc, \"Dark Oak\");\nMaterial material = doc.GetElement(materialId) as Material;\nFillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Wood\")) as FillPatternElement;\nif(fillPattern != null) material.SurfaceForegroundPatternId = fillPattern.Id;\nmaterial.Color = new Color(139, 69, 19);\nAppearanceAssetElement appearanceAsset = AppearanceAssetElement.Create(doc, \"DarkOak_Asset\", false);\nmaterial.AppearanceAssetId = appearanceAsset.Id;"}
{"prompt":"Etiqueta todas las columnas estructurales en la vista actual con sus respectivos nombres de tipo.","completion":"View activeView = doc.ActiveView;\nvar columns = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().ToElements();\nforeach (Element col in columns)\n{\n    LocationPoint loc = col.Location as LocationPoint;\n    if(loc != null) IndependentTag.Create(doc, activeView.Id, new Reference(col), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n}"}
{"prompt":"Tag all structural columns in the current view with their respective type names.","completion":"View activeView = doc.ActiveView;\nvar columns = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().ToElements();\nforeach (Element col in columns)\n{\n    LocationPoint loc = col.Location as LocationPoint;\n    if(loc != null) IndependentTag.Create(doc, activeView.Id, new Reference(col), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n}"}
{"prompt":"Encuentra un muro específico buscando el valor 'W-01' en su parámetro de Marca de Tipo.","completion":"ElementId typeMarkParamId = new ElementId(BuiltInParameter.ALL_MODEL_TYPE_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(typeMarkParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"W-01\");\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).FirstOrDefault() as Wall;"}
{"prompt":"Find a specific wall by searching for the value 'W-01' in its Type Mark parameter.","completion":"ElementId typeMarkParamId = new ElementId(BuiltInParameter.ALL_MODEL_TYPE_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(typeMarkParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"W-01\");\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).FirstOrDefault() as Wall;"}
{"prompt":"Alinea las líneas centrales de dos muros existentes.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer muro\");\nReference r2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo muro\");\nWall w1 = doc.GetElement(r1) as Wall;\nWall w2 = doc.GetElement(r2) as Wall;\nif (w1 != null && w2 != null)\n{\n    LocationCurve lc1 = w1.Location as LocationCurve;\n    LocationCurve lc2 = w2.Location as LocationCurve;\n    doc.Create.NewAlignment(doc.ActiveView, lc1.Curve.Reference, lc2.Curve.Reference);\n}"}
{"prompt":"Align the center lines of two existing walls.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first wall\");\nReference r2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second wall\");\nWall w1 = doc.GetElement(r1) as Wall;\nWall w2 = doc.GetElement(r2) as Wall;\nif (w1 != null && w2 != null)\n{\n    LocationCurve lc1 = w1.Location as LocationCurve;\n    LocationCurve lc2 = w2.Location as LocationCurve;\n    doc.Create.NewAlignment(doc.ActiveView, lc1.Curve.Reference, lc2.Curve.Reference);\n}"}
{"prompt":"Define un nuevo parámetro compartido de tipo 'Área' desde un archivo y aplícalo a la categoría de mobiliario.","completion":"string sharedParamFile = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamFile) || !System.IO.File.Exists(sharedParamFile)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\shared_params.txt\"; System.IO.File.Create(sharedParamFile).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = defFile.Groups.Create(\"Analytics\");\nExternalDefinitionCreationOptions opt = new ExternalDefinitionCreationOptions(\"Net Area\", SpecTypeId.Area);\nDefinition def = group.Definitions.Create(opt);\nCategory cat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nCategorySet cs = doc.Application.Create.NewCategorySet(); cs.Insert(cat);\nInstanceBinding bind = doc.Application.Create.NewInstanceBinding(cs);\ndoc.ParameterBindings.Insert(def, bind, BuiltInParameterGroup.PG_ANALYSIS_RESULTS);"}
{"prompt":"Define a new shared parameter of type 'Area' from a file and apply it to the furniture category.","completion":"string sharedParamFile = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamFile) || !System.IO.File.Exists(sharedParamFile)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\shared_params.txt\"; System.IO.File.Create(sharedParamFile).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = defFile.Groups.Create(\"Analytics\");\nExternalDefinitionCreationOptions opt = new ExternalDefinitionCreationOptions(\"Net Area\", SpecTypeId.Area);\nDefinition def = group.Definitions.Create(opt);\nCategory cat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nCategorySet cs = doc.Application.Create.NewCategorySet(); cs.Insert(cat);\nInstanceBinding bind = doc.Application.Create.NewInstanceBinding(cs);\ndoc.ParameterBindings.Insert(def, bind, BuiltInParameterGroup.PG_ANALYSIS_RESULTS);"}
{"prompt":"Establece la configuración de sol y sombra para la vista 3D activa a una hora y fecha específicas.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && view3D.CanEnableSunAndShadows())\n{\n    SunAndShadowSettings settings = view3D.SunAndShadowSettings;\n    settings.SunAndShadowType = SunAndShadowType.Still;\n    settings.SetTimeAndDate(new DateTime(2024, 6, 21, 15, 30, 0));\n    view3D.ShadowsOn = true;\n}"}
{"prompt":"Set the sun and shadow settings for the active 3D view to a specific time and date.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && view3D.CanEnableSunAndShadows())\n{\n    SunAndShadowSettings settings = view3D.SunAndShadowSettings;\n    settings.SunAndShadowType = SunAndShadowType.Still;\n    settings.SetTimeAndDate(new DateTime(2024, 6, 21, 15, 30, 0));\n    view3D.ShadowsOn = true;\n}"}
{"prompt":"Crea una superficie topográfica a partir de una lista de puntos XYZ.","completion":"IList<XYZ> points = new List<XYZ>{ new XYZ(0,0,0), new XYZ(10,0,1), new XYZ(0,10,2), new XYZ(10,10,1) };\nif (points.Count > 2) TopographySurface.Create(doc, points);"}
{"prompt":"Create a topography surface from a list of XYZ points.","completion":"IList<XYZ> points = new List<XYZ>{ new XYZ(0,0,0), new XYZ(10,0,1), new XYZ(0,10,2), new XYZ(10,10,1) };\nif (points.Count > 2) TopographySurface.Create(doc, points);"}
{"prompt":"Añade una nueva nota clave a la tabla de notas clave con un valor y texto específicos.","completion":"KeynoteTable table = doc.KeynoteTable;\nKeynoteEntry newEntry = table.GetKeynoteEntries().FirstOrDefault()?.Clone() as KeynoteEntry;\nif (newEntry != null)\n{\n    newEntry.KeyValue = \"08.10.01.A\";\n    newEntry.KeynoteText = \"Specialty Hollow Metal Door\";\n    table.AddKeynoteEntry(newEntry);\n}"}
{"prompt":"Add a new keynote to the keynote table with a specific key value and text.","completion":"KeynoteTable table = doc.KeynoteTable;\nKeynoteEntry newEntry = table.GetKeynoteEntries().FirstOrDefault()?.Clone() as KeynoteEntry;\nif (newEntry != null)\n{\n    newEntry.KeyValue = \"08.10.01.A\";\n    newEntry.KeynoteText = \"Specialty Hollow Metal Door\";\n    table.AddKeynoteEntry(newEntry);\n}"}
{"prompt":"Dentro del editor de familias, cambia el valor por defecto de un parámetro de longitud llamado 'Ancho'.","completion":"if(doc.IsFamilyDocument)\n{\n    FamilyManager fm = doc.FamilyManager;\n    FamilyParameter param = fm.get_Parameter(\"Ancho\");\n    if (param != null) fm.Set(param, UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters));\n}"}
{"prompt":"Inside the family editor, change the default value of a length parameter named 'Width'.","completion":"if(doc.IsFamilyDocument)\n{\n    FamilyManager fm = doc.FamilyManager;\n    FamilyParameter param = fm.get_Parameter(\"Width\");\n    if (param != null) fm.Set(param, UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters));\n}"}
{"prompt":"Coloca una calcomanía (decal) en una cara de un muro desde un archivo de imagen.","completion":"Wall wallHost = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nDecalType decalType = new FilteredElementCollector(doc).OfClass(typeof(DecalType)).FirstOrDefault() as DecalType;\nif (wallHost != null && decalType != null)\n{\n    Face wallFace = HostObjectUtils.GetSideFaces(wallHost, ShellLayerType.Exterior).FirstOrDefault();\n    if(wallFace != null) Decal.Create(doc, doc.ActiveView.Id, wallHost.Id, decalType.Id, new XYZ(0.5, 0.5, 0), wallFace, 10, 10);\n}"}
{"prompt":"Place a decal on a wall face from an image file.","completion":"Wall wallHost = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nDecalType decalType = new FilteredElementCollector(doc).OfClass(typeof(DecalType)).FirstOrDefault() as DecalType;\nif (wallHost != null && decalType != null)\n{\n    Face wallFace = HostObjectUtils.GetSideFaces(wallHost, ShellLayerType.Exterior).FirstOrDefault();\n    if(wallFace != null) Decal.Create(doc, doc.ActiveView.Id, wallHost.Id, decalType.Id, new XYZ(0.5, 0.5, 0), wallFace, 10, 10);\n}"}
{"prompt":"Calcula el volumen total de acero de refuerzo para todas las barras de 12mm.","completion":"double totalVolume = 0;\nRebarBarType barType12mm = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).Cast<RebarBarType>().FirstOrDefault(bt => bt.BarDiameter == UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Millimeters));\nif (barType12mm != null)\n{\n    var rebars = new FilteredElementCollector(doc).OfClass(typeof(Rebar)).Where(r => (r as Rebar).GetTypeId() == barType12mm.Id);\n    foreach (Rebar r in rebars)\n    {\n        totalVolume += r.GetVolume();\n    }\n    TaskDialog.Show(\"Volumen Total\", \"Volumen de barras de 12mm: \" + UnitUtils.ConvertFromInternalUnits(totalVolume, UnitTypeId.CubicMeters) + \" m³\");\n}"}
{"prompt":"Calculate the total volume of rebar for all 12mm bars.","completion":"double totalVolume = 0;\nRebarBarType barType12mm = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).Cast<RebarBarType>().FirstOrDefault(bt => bt.BarDiameter == UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Millimeters));\nif (barType12mm != null)\n{\n    var rebars = new FilteredElementCollector(doc).OfClass(typeof(Rebar)).Where(r => (r as Rebar).GetTypeId() == barType12mm.Id);\n    foreach (Rebar r in rebars)\n    {\n        totalVolume += r.GetVolume();\n    }\n    TaskDialog.Show(\"Total Volume\", \"Volume of 12mm bars: \" + UnitUtils.ConvertFromInternalUnits(totalVolume, UnitTypeId.CubicMeters) + \" m³\");\n}"}
{"prompt":"Crea una nueva tabla de planificación para Habitaciones y añade un filtro para mostrar solo habitaciones con 'Oficina' en su nombre.","completion":"ElementId roomCatId = new ElementId(BuiltInCategory.OST_Rooms);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, roomCatId);\nschedule.Name = \"Tabla de Oficinas\";\nScheduleDefinition def = schedule.Definition;\nSchedulableField nameField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.ROOM_NAME));\nif (nameField != null)\n{\n    def.AddField(nameField);\n    ScheduleFilter filter = new ScheduleFilter(nameField.FieldId, ScheduleFilterType.Contains, \"Oficina\");\n    def.AddFilter(filter);\n}"}
{"prompt":"Create a new schedule for Rooms and add a filter to show only rooms with 'Office' in their name.","completion":"ElementId roomCatId = new ElementId(BuiltInCategory.OST_Rooms);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, roomCatId);\nschedule.Name = \"Office Schedule\";\nScheduleDefinition def = schedule.Definition;\nSchedulableField nameField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.ROOM_NAME));\nif (nameField != null)\n{\n    def.AddField(nameField);\n    ScheduleFilter filter = new ScheduleFilter(nameField.FieldId, ScheduleFilterType.Contains, \"Office\");\n    def.AddFilter(filter);\n}"}
{"prompt":"Crea una abertura rectangular en un suelo usando un perfil de curvas.","completion":"Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif (floor != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(1,1,0), new XYZ(3,1,0)));\n    profile.Append(Line.CreateBound(new XYZ(3,1,0), new XYZ(3,3,0)));\n    profile.Append(Line.CreateBound(new XYZ(3,3,0), new XYZ(1,3,0)));\n    profile.Append(Line.CreateBound(new XYZ(1,3,0), new XYZ(1,1,0)));\n    doc.Create.NewOpening(floor, profile, true);\n}"}
{"prompt":"Create a rectangular opening in a floor using a curve profile.","completion":"Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif (floor != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Line.CreateBound(new XYZ(1,1,0), new XYZ(3,1,0)));\n    profile.Append(Line.CreateBound(new XYZ(3,1,0), new XYZ(3,3,0)));\n    profile.Append(Line.CreateBound(new XYZ(3,3,0), new XYZ(1,3,0)));\n    profile.Append(Line.CreateBound(new XYZ(1,3,0), new XYZ(1,1,0)));\n    doc.Create.NewOpening(floor, profile, true);\n}"}
{"prompt":"Establece un valor de parámetro para todas las instancias de mobiliario ubicadas dentro de una habitación específica.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Sala de Conferencias 1\") as Room;\nif (room != null)\n{\n    var furniture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Room != null && fi.Room.Id == room.Id);\n    foreach (FamilyInstance fi in furniture)\n    {\n        fi.LookupParameter(\"Comments\").Set(\"Aprobado para Conf. 1\");\n    }\n}"}
{"prompt":"Set a parameter value for all furniture instances located inside a specific room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Conference Room 1\") as Room;\nif (room != null)\n{\n    var furniture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Room != null && fi.Room.Id == room.Id);\n    foreach (FamilyInstance fi in furniture)\n    {\n        fi.LookupParameter(\"Comments\").Set(\"Approved for Conf. 1\");\n    }\n}"}
{"prompt":"Obtén el ID del elemento anfitrión para una instancia de armadura dada.","completion":"Rebar rebarInstance = new FilteredElementCollector(doc).OfClass(typeof(Rebar)).FirstOrDefault() as Rebar;\nif (rebarInstance != null)\n{\n    ElementId hostId = rebarInstance.GetHostId();\n    Element hostElement = doc.GetElement(hostId);\n    TaskDialog.Show(\"Anfitrión de Armadura\", \"ID del anfitrión: \" + hostElement.Id.ToString());\n}"}
{"prompt":"Get the host element ID for a given rebar instance.","completion":"Rebar rebarInstance = new FilteredElementCollector(doc).OfClass(typeof(Rebar)).FirstOrDefault() as Rebar;\nif (rebarInstance != null)\n{\n    ElementId hostId = rebarInstance.GetHostId();\n    Element hostElement = doc.GetElement(hostId);\n    TaskDialog.Show(\"Rebar Host\", \"Host ID: \" + hostElement.Id.ToString());\n}"}
{"prompt":"Cambia el estilo visual de la vista activa a 'Línea Oculta'.","completion":"View activeView = doc.ActiveView;\nif (activeView != null && activeView.CanBePrinted)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}
{"prompt":"Change the visual style of the active view to 'Hidden Line'.","completion":"View activeView = doc.ActiveView;\nif (activeView != null && activeView.CanBePrinted)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}
{"prompt":"Duplica la vista 'Nivel 1' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 1\") as ViewPlan;\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if(newView != null) newView.Name = \"Nivel 1 - Dependiente\";\n}"}
{"prompt":"Duplicate the 'Level 1' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 1\") as ViewPlan;\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if(newView != null) newView.Name = \"Level 1 - Dependent\";\n}"}
{"prompt":"Bloquea una dimensión seleccionada para mantener sus restricciones.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una dimensión\");\nDimension dim = doc.GetElement(pickedRef) as Dimension;\nif (dim != null) dim.IsLocked = true;"}
{"prompt":"Lock a selected dimension to maintain its constraints.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a dimension\");\nDimension dim = doc.GetElement(pickedRef) as Dimension;\nif (dim != null) dim.IsLocked = true;"}
{"prompt":"Coloca una cámara en la vista activa en coordenadas (2,2,3).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    cameraView.Name = \"Nueva Vista de Cámara\";\n    ViewOrientation3D orientation = new ViewOrientation3D(new XYZ(2,2,3), new XYZ(0,0,0), new XYZ(0,0,1));\n    cameraView.SetOrientation(orientation);\n}"}
{"prompt":"Place a camera in the active view at coordinates (2,2,3).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    cameraView.Name = \"New Camera View\";\n    ViewOrientation3D orientation = new ViewOrientation3D(new XYZ(2,2,3), new XYZ(0,0,0), new XYZ(0,0,1));\n    cameraView.SetOrientation(orientation);\n}"}
{"prompt":"Crea una separación de habitación usando la línea de un muro existente.","completion":"Wall wall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif (wall != null)\n{\n    LocationCurve locCurve = wall.Location as LocationCurve;\n    if(locCurve != null)\n    {\n        RoomSeparationLine.Create(doc, locCurve.Curve, doc.ActiveView.SketchPlane.Id);\n    }\n}"}
{"prompt":"Create a room separation using the line of an existing wall.","completion":"Wall wall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif (wall != null)\n{\n    LocationCurve locCurve = wall.Location as LocationCurve;\n    if(locCurve != null)\n    {\n        RoomSeparationLine.Create(doc, locCurve.Curve, doc.ActiveView.SketchPlane.Id);\n    }\n}"}
{"prompt":"Genera una sección en cada intersección de la rejilla.","completion":"ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\nvar grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\nif (sectionVFT != null && grids.Count > 1)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            SetComparisonResult res = grids[i].Curve.Intersect(grids[j].Curve, out IntersectionResultArray results);\n            if (res == SetComparisonResult.Overlap && results != null)\n            {\n                foreach (IntersectionResult ir in results)\n                {\n                    XYZ origin = ir.XYZPoint;\n                    XYZ viewDir = grids[i].Curve.GetEndPoint(1) - grids[i].Curve.GetEndPoint(0);\n                    Transform t = Transform.CreateRotation(XYZ.BasisZ, viewDir.AngleOnPlaneTo(XYZ.BasisX, XYZ.BasisZ));\n                    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ() { Min = new XYZ(-5, -1, 0), Max = new XYZ(5, 5, 10), Transform = t.Inverse };\n                    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Generate a section at each grid intersection.","completion":"ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\nvar grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\nif (sectionVFT != null && grids.Count > 1)\n{\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            SetComparisonResult res = grids[i].Curve.Intersect(grids[j].Curve, out IntersectionResultArray results);\n            if (res == SetComparisonResult.Overlap && results != null)\n            {\n                foreach (IntersectionResult ir in results)\n                {\n                    XYZ origin = ir.XYZPoint;\n                    XYZ viewDir = grids[i].Curve.GetEndPoint(1) - grids[i].Curve.GetEndPoint(0);\n                    Transform t = Transform.CreateRotation(XYZ.BasisZ, viewDir.AngleOnPlaneTo(XYZ.BasisX, XYZ.BasisZ));\n                    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ() { Min = new XYZ(-5, -1, 0), Max = new XYZ(5, 5, 10), Transform = t.Inverse };\n                    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Crea un sistema de vigas en una retícula de 5x5 metros.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif (beamSymbol != null && level != null)\n{\n    if (!beamSymbol.IsActive) beamSymbol.Activate();\n    double gridSize = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    for (int i = 0; i <= 5; i++)\n    {\n        Line horizontalLine = Line.CreateBound(new XYZ(0, i * gridSize, 0), new XYZ(5 * gridSize, i * gridSize, 0));\n        doc.Create.NewFamilyInstance(horizontalLine, beamSymbol, level, StructuralType.Beam);\n        Line verticalLine = Line.CreateBound(new XYZ(i * gridSize, 0, 0), new XYZ(i * gridSize, 5 * gridSize, 0));\n        doc.Create.NewFamilyInstance(verticalLine, beamSymbol, level, StructuralType.Beam);\n    }\n}"}
{"prompt":"Create a beam system in a 5x5 meter grid.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif (beamSymbol != null && level != null)\n{\n    if (!beamSymbol.IsActive) beamSymbol.Activate();\n    double gridSize = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n    for (int i = 0; i <= 5; i++)\n    {\n        Line horizontalLine = Line.CreateBound(new XYZ(0, i * gridSize, 0), new XYZ(5 * gridSize, i * gridSize, 0));\n        doc.Create.NewFamilyInstance(horizontalLine, beamSymbol, level, StructuralType.Beam);\n        Line verticalLine = Line.CreateBound(new XYZ(i * gridSize, 0, 0), new XYZ(i * gridSize, 5 * gridSize, 0));\n        doc.Create.NewFamilyInstance(verticalLine, beamSymbol, level, StructuralType.Beam);\n    }\n}"}
{"prompt":"Añade una etiqueta de texto a la columna más cercana al origen (0,0,0).","completion":"FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => (c.Location as LocationPoint).Point.DistanceTo(XYZ.Zero)).FirstOrDefault();\nif (column != null)\n{\n    IndependentTag.Create(doc, doc.ActiveView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, (column.Location as LocationPoint).Point);\n}"}
{"prompt":"Add a text tag to the column closest to the origin (0,0,0).","completion":"FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => (c.Location as LocationPoint).Point.DistanceTo(XYZ.Zero)).FirstOrDefault();\nif (column != null)\n{\n    IndependentTag.Create(doc, doc.ActiveView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, (column.Location as LocationPoint).Point);\n}"}
{"prompt":"Instala un accesorio de tubería (fitting) en el extremo de la primera tubería encontrada.","completion":"FamilySymbol fittingSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeFitting).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nPipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nif (fittingSymbol != null && pipe != null)\n{\n    if (!fittingSymbol.IsActive) fittingSymbol.Activate();\n    Connector connector = pipe.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (connector != null) doc.Create.NewFamilyInstance(connector, fittingSymbol);\n}"}
{"prompt":"Install a pipe fitting at the end of the first found pipe.","completion":"FamilySymbol fittingSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeFitting).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nPipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nif (fittingSymbol != null && pipe != null)\n{\n    if (!fittingSymbol.IsActive) fittingSymbol.Activate();\n    Connector connector = pipe.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (connector != null) doc.Create.NewFamilyInstance(connector, fittingSymbol);\n}"}
{"prompt":"Coloca un terminal de aire en el extremo de un conducto.","completion":"FamilySymbol terminalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctTerminal).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nDuct duct = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Ducts).FirstOrDefault() as Duct;\nif (terminalSymbol != null && duct != null)\n{\n    if (!terminalSymbol.IsActive) terminalSymbol.Activate();\n    Connector connector = duct.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (connector != null) doc.Create.NewFamilyInstance(connector, terminalSymbol);\n}"}
{"prompt":"Place an air terminal at the end of a duct.","completion":"FamilySymbol terminalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctTerminal).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nDuct duct = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Ducts).FirstOrDefault() as Duct;\nif (terminalSymbol != null && duct != null)\n{\n    if (!terminalSymbol.IsActive) terminalSymbol.Activate();\n    Connector connector = duct.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (connector != null) doc.Create.NewFamilyInstance(connector, terminalSymbol);\n}"}
{"prompt":"Crea una familia 'in-situ' para un mostrador de recepción personalizado usando una extrusión.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(level != null) {\n    InPlaceElement ipe = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Furniture), level.Id);\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { Line.CreateBound(new XYZ(0,0,0), new XYZ(2,0,0)), Line.CreateBound(new XYZ(2,0,0), new XYZ(2,1,0)), Line.CreateBound(new XYZ(2,1,0), new XYZ(0,1,0)), Line.CreateBound(new XYZ(0,1,0), new XYZ(0,0,0)) });\n    SketchPlane sp = SketchPlane.Create(doc, level.GetPlane());\n    doc.FamilyCreate.NewExtrusion(true, new List<CurveLoop>{profile}, sp, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n    ipe.Commit();\n}"}
{"prompt":"Create an in-place family for a custom reception desk using an extrusion.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(level != null) {\n    InPlaceElement ipe = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Furniture), level.Id);\n    CurveLoop profile = CurveLoop.Create(new List<Curve> { Line.CreateBound(new XYZ(0,0,0), new XYZ(2,0,0)), Line.CreateBound(new XYZ(2,0,0), new XYZ(2,1,0)), Line.CreateBound(new XYZ(2,1,0), new XYZ(0,1.0)), Line.CreateBound(new XYZ(0,1,0), new XYZ(0,0,0)) });\n    SketchPlane sp = SketchPlane.Create(doc, level.GetPlane());\n    doc.FamilyCreate.NewExtrusion(true, new List<CurveLoop>{profile}, sp, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n    ipe.Commit();\n}"}
{"prompt":"Modifica el tipo de muro de un muro existente a un tipo que contenga 'Aislamiento Térmico'.","completion":"Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(x => x.Name.Contains(\"Aislamiento Térmico\"));\nif (wallToChange != null && newType != null) wallToChange.WallType = newType;"}
{"prompt":"Change the wall type of an existing wall to a type containing 'Thermal Insulation'.","completion":"Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(x => x.Name.Contains(\"Thermal Insulation\"));\nif (wallToChange != null && newType != null) wallToChange.WallType = newType;"}
{"prompt":"Crea una losa inclinada con una pendiente del 2% sobre una planta de 8x6 m.","completion":"FloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nLevel lvl = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif (ft != null && lvl != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(8,6,0), new XYZ(0,1,0));\n    Floor slopedFloor = Floor.Create(doc, new List<CurveLoop>{profile}, ft.Id, lvl.Id);\n    slopedFloor.get_Parameter(BuiltInParameter.ROOF_SLOPE).Set(0.02);\n}"}
{"prompt":"Create a sloped slab with a 2% slope over an 8x6 m area.","completion":"FloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nLevel lvl = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif (ft != null && lvl != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(8,6,0), new XYZ(0,1,0));\n    Floor slopedFloor = Floor.Create(doc, new List<CurveLoop>{profile}, ft.Id, lvl.Id);\n    slopedFloor.get_Parameter(BuiltInParameter.ROOF_SLOPE).Set(0.02);\n}"}
{"prompt":"Añade un accesorio de tubería tipo codo de 90° en la unión de dos tuberías.","completion":"FamilySymbol elbowSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeFitting).WhereElementIsElementType().FirstOrDefault(x => x.Name.Contains(\"Elbow\")) as FamilySymbol;\nvar pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Take(2).Cast<Pipe>().ToList();\nif (elbowSymbol != null && pipes.Count == 2)\n{\n    Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (c1 != null && c2 != null) doc.Create.NewElbowFitting(c1, c2);\n}"}
{"prompt":"Add a 90° elbow pipe fitting at the junction of two pipes.","completion":"FamilySymbol elbowSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeFitting).WhereElementIsElementType().FirstOrDefault(x => x.Name.Contains(\"Elbow\")) as FamilySymbol;\nvar pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Take(2).Cast<Pipe>().ToList();\nif (elbowSymbol != null && pipes.Count == 2)\n{\n    Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (c1 != null && c2 != null) doc.Create.NewElbowFitting(c1, c2);\n}"}
{"prompt":"Coloca una etiqueta de elevación en el Nivel 1.","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (lvl1 != null)\n{\n    Reference levelRef = new Reference(lvl1);\n    XYZ origin = new XYZ(5,5,lvl1.Elevation);\n    doc.Create.NewSpotElevation(doc.ActiveView, levelRef, origin, origin, origin, true, true);\n}"}
{"prompt":"Place an elevation tag on Level 1.","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (lvl1 != null)\n{\n    Reference levelRef = new Reference(lvl1);\n    XYZ origin = new XYZ(5,5,lvl1.Elevation);\n    doc.Create.NewSpotElevation(doc.ActiveView, levelRef, origin, origin, origin, true, true);\n}"}
{"prompt":"Exporta la vista 3D actual a formato NWC para Navisworks.","completion":"View3D view3d = doc.ActiveView as View3D;\nif (view3d != null)\n{\n    NavisworksExportOptions options = new NavisworksExportOptions();\n    options.ExportScope = NavisworksExportScope.View;\n    options.ViewId = view3d.Id;\n    doc.Export(@\"C:\\RevitExports\\\", \"3DView.nwc\", options);\n}"}
{"prompt":"Export the current 3D view to NWC format for Navisworks.","completion":"View3D view3d = doc.ActiveView as View3D;\nif (view3d != null)\n{\n    NavisworksExportOptions options = new NavisworksExportOptions();\n    options.ExportScope = NavisworksExportScope.View;\n    options.ViewId = view3d.Id;\n    doc.Export(@\"C:\\RevitExports\\\", \"3DView.nwc\", options);\n}"}
{"prompt":"Aplica un refuerzo de viga con estribos espaciados cada 0.3 metros.","completion":"RebarBarType stirrupType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault(s => s.Name.Contains(\"Stirrup\")) as RebarShape;\nFamilyInstance beam = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).FirstOrDefault() as FamilyInstance;\nif (stirrupType != null && shape != null && beam != null)\n{\n    Rebar rebar = Rebar.CreateFromRebarShape(doc, shape, stirrupType, beam, XYZ.BasisZ, XYZ.BasisX, XYZ.BasisY);\n    rebar.GetRebarLayout().MaxSpacing = UnitUtils.ConvertToInternalUnits(0.3, UnitTypeId.Meters);\n}"}
{"prompt":"Apply beam reinforcement with stirrups spaced every 0.3 meters.","completion":"RebarBarType stirrupType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault(s => s.Name.Contains(\"Stirrup\")) as RebarShape;\nFamilyInstance beam = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).FirstOrDefault() as FamilyInstance;\nif (stirrupType != null && shape != null && beam != null)\n{\n    Rebar rebar = Rebar.CreateFromRebarShape(doc, shape, stirrupType, beam, XYZ.BasisZ, XYZ.BasisX, XYZ.BasisY);\n    rebar.GetRebarLayout().MaxSpacing = UnitUtils.ConvertToInternalUnits(0.3, UnitTypeId.Meters);\n}"}
{"prompt":"Crea una pieza de mobiliario de emergencia, como una camilla, en las coordenadas (2,3,0).","completion":"FamilySymbol emergencySymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Emergency\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif (emergencySymbol != null && level != null)\n{\n    if (!emergencySymbol.IsActive) emergencySymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,3,0), emergencySymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Create a piece of emergency furniture, like a stretcher, at coordinates (2,3,0).","completion":"FamilySymbol emergencySymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Emergency\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif (emergencySymbol != null && level != null)\n{\n    if (!emergencySymbol.IsActive) emergencySymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,3,0), emergencySymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Obtén todas las habitaciones que están en el Nivel 3.","completion":"Level level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nList<Room> roomsOnLevel3 = new List<Room>();\nif (level3 != null)\n{\n    roomsOnLevel3 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().Where(r => r.LevelId == level3.Id).ToList();\n}"}
{"prompt":"Get all rooms that are on Level 3.","completion":"Level level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nList<Room> roomsOnLevel3 = new List<Room>();\nif (level3 != null)\n{\n    roomsOnLevel3 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().Where(r => r.LevelId == level3.Id).ToList();\n}"}
{"prompt":"Crea una vista de sección con el nombre 'Sección A-A' en el nivel actual.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(-5, -1, 0);\n    sectionBox.Max = new XYZ(5, 5, 10);\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    sectionView.Name = \"Sección A-A\";\n}"}
{"prompt":"Create a section view named 'Section A-A' on the current level.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(-5, -1, 0);\n    sectionBox.Max = new XYZ(5, 5, 10);\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    sectionView.Name = \"Section A-A\";\n}"}
{"prompt":"Cambia el nivel de detalle de la vista activa a 'Medio'.","completion":"View activeView = doc.ActiveView;\nif (activeView != null) activeView.DetailLevel = ViewDetailLevel.Medium;"}
{"prompt":"Change the detail level of the active view to 'Medium'.","completion":"View activeView = doc.ActiveView;\nif (activeView != null) activeView.DetailLevel = ViewDetailLevel.Medium;"}
{"prompt":"Aplica un parámetro compartido llamado 'CódigoEspacio' a todas las habitaciones.","completion":"string sharedParamFile = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamFile) || !System.IO.File.Exists(sharedParamFile)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\shared_params.txt\"; System.IO.File.Create(sharedParamFile).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinition def = defFile.Groups.SelectMany(g => g.Definitions).OfType<ExternalDefinition>().FirstOrDefault(d => d.Name == \"CódigoEspacio\");\nif(def != null) {\n    CategorySet cats = doc.Application.Create.NewCategorySet();\n    cats.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Rooms));\n    InstanceBinding bind = doc.Application.Create.NewInstanceBinding(cats);\n    doc.ParameterBindings.Insert(def, bind, BuiltInParameterGroup.PG_IDENTITY_DATA);\n}"}
{"prompt":"Apply a shared parameter named 'SpaceCode' to all rooms.","completion":"string sharedParamFile = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamFile) || !System.IO.File.Exists(sharedParamFile)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\shared_params.txt\"; System.IO.File.Create(sharedParamFile).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinition def = defFile.Groups.SelectMany(g => g.Definitions).OfType<ExternalDefinition>().FirstOrDefault(d => d.Name == \"SpaceCode\");\nif(def != null) {\n    CategorySet cats = doc.Application.Create.NewCategorySet();\n    cats.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Rooms));\n    InstanceBinding bind = doc.Application.Create.NewInstanceBinding(cats);\n    doc.ParameterBindings.Insert(def, bind, BuiltInParameterGroup.PG_IDENTITY_DATA);\n}"}
{"prompt":"Genera un grupo con las instancias seleccionadas y colócalo en (10,10,0).","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Any())\n{\n    Group group = doc.Create.Group(selectedIds);\n    group.Location.Move(new XYZ(10,10,0));\n}"}
{"prompt":"Generate a group with the selected instances and place it at (10,10,0).","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Any())\n{\n    Group group = doc.Create.Group(selectedIds);\n    group.Location.Move(new XYZ(10,10,0));\n}"}
{"prompt":"Obtén todas las instancias de FamilyInstance de la categoría Mobiliario.","completion":"var furnitureInstances = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_Furniture)\n    .WhereElementIsNotElementType()\n    .ToElements();"}
{"prompt":"Get all FamilyInstance instances from the Furniture category.","completion":"var furnitureInstances = new FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_Furniture)\n    .WhereElementIsNotElementType()\n    .ToElements();"}
{"prompt":"Elimina todas las DetailLine de la vista activa.","completion":"ICollection<ElementId> detailLines = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(DetailLine)).ToElementIds();\nif (detailLines.Any()) doc.Delete(detailLines);"}
{"prompt":"Delete all DetailLine from the active view.","completion":"ICollection<ElementId> detailLines = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(DetailLine)).ToElementIds();\nif (detailLines.Any()) doc.Delete(detailLines);"}
{"prompt":"Ajusta la región de recorte (crop) de la vista activa a un rectángulo de 0 a 20 en X/Y.","completion":"View view = doc.ActiveView;\nif (view != null && view.CropBoxActive)\n{\n    BoundingBoxXYZ cropBox = view.CropBox;\n    cropBox.Min = new XYZ(0, 0, cropBox.Min.Z);\n    cropBox.Max = new XYZ(20, 20, cropBox.Max.Z);\n    view.CropBox = cropBox;\n}"}
{"prompt":"Adjust the crop region of the active view to a rectangle from 0 to 20 in X/Y.","completion":"View view = doc.ActiveView;\nif (view != null && view.CropBoxActive)\n{\n    BoundingBoxXYZ cropBox = view.CropBox;\n    cropBox.Min = new XYZ(0, 0, cropBox.Min.Z);\n    cropBox.Max = new XYZ(20, 20, cropBox.Max.Z);\n    view.CropBox = cropBox;\n}"}
{"prompt":"Crea un SketchPlane asociado al nivel 'Level 2'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif(level2 != null) {\n    Plane plane = level2.GetPlane();\n    SketchPlane sp = SketchPlane.Create(doc, plane);\n}"}
{"prompt":"Create a SketchPlane associated with 'Level 2'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif(level2 != null) {\n    Plane plane = level2.GetPlane();\n    SketchPlane sp = SketchPlane.Create(doc, plane);\n}"}
{"prompt":"Dibuja una curva spline pasando por los puntos (0,0,0), (5,2,0) y (10,0,0).","completion":"IList<XYZ> points = new List<XYZ>{ new XYZ(0,0,0), new XYZ(5,2,0), new XYZ(10,0,0) };\nNurbSpline spline = NurbSpline.Create(points);\nPlane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, XYZ.Zero);\nSketchPlane sp = SketchPlane.Create(doc, plane);\ndoc.Create.NewModelCurve(spline, sp);"}
{"prompt":"Draw a spline curve passing through points (0,0,0), (5,2,0), and (10,0,0).","completion":"IList<XYZ> points = new List<XYZ>{ new XYZ(0,0,0), new XYZ(5,2,0), new XYZ(10,0,0) };\nNurbSpline spline = NurbSpline.Create(points);\nPlane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, XYZ.Zero);\nSketchPlane sp = SketchPlane.Create(doc, plane);\ndoc.Create.NewModelCurve(spline, sp);"}
{"prompt":"Extrae todos los parámetros compartidos del documento.","completion":"BindingMap bindingMap = doc.ParameterBindings;\nvar sharedParams = new List<ExternalDefinition>();\nDefinitionBindingMapIterator it = bindingMap.ForwardIterator();\nit.Reset();\nwhile (it.MoveNext())\n{\n    if (it.Key is ExternalDefinition def) sharedParams.Add(def);\n}"}
{"prompt":"Extract all shared parameters from the document.","completion":"BindingMap bindingMap = doc.ParameterBindings;\nvar sharedParams = new List<ExternalDefinition>();\nDefinitionBindingMapIterator it = bindingMap.ForwardIterator();\nit.Reset();\nwhile (it.MoveNext())\n{\n    if (it.Key is ExternalDefinition def) sharedParams.Add(def);\n}"}
{"prompt":"Activa todos los FamilySymbol cargados en el documento.","completion":"var symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) sym.Activate();\n}"}
{"prompt":"Activate all loaded FamilySymbols in the document.","completion":"var symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) sym.Activate();\n}"}
{"prompt":"Inicia y confirma una transacción llamada 'Modificar Proyecto'.","completion":"using (Transaction tx = new Transaction(doc, \"Modificar Proyecto\"))\n{\n    tx.Start();\n    // ... acciones de modificación aquí ...\n    tx.Commit();\n}"}
{"prompt":"Start and commit a transaction named 'Modify Project'.","completion":"using (Transaction tx = new Transaction(doc, \"Modify Project\"))\n{\n    tx.Start();\n    // ... modification actions here ...\n    tx.Commit();\n}"}
{"prompt":"Usa TransactionGroup para agrupar dos transacciones.","completion":"using (TransactionGroup tg = new TransactionGroup(doc, \"Agrupar Cambios\"))\n{\n    tg.Start();\n    using (Transaction t1 = new Transaction(doc, \"Paso 1\")) { t1.Start(); /* acción 1 */ t1.Commit(); }\n    using (Transaction t2 = new Transaction(doc, \"Paso 2\")) { t2.Start(); /* acción 2 */ t2.Commit(); }\n    tg.Assimilate();\n}"}
{"prompt":"Use a TransactionGroup to group two transactions.","completion":"using (TransactionGroup tg = new TransactionGroup(doc, \"Group Changes\"))\n{\n    tg.Start();\n    using (Transaction t1 = new Transaction(doc, \"Step 1\")) { t1.Start(); /* action 1 */ t1.Commit(); }\n    using (Transaction t2 = new Transaction(doc, \"Step 2\")) { t2.Start(); /* action 2 */ t2.Commit(); }\n    tg.Assimilate();\n}"}
{"prompt":"Crea y cancela una SubTransaction dentro de una transacción.","completion":"using (Transaction tx = new Transaction(doc, \"Transacción Principal\"))\n{\n    tx.Start();\n    using (SubTransaction st = new SubTransaction(doc))\n    {\n        st.Start();\n        // ... cambios tentativos ...\n        st.RollBack();\n    }\n    tx.Commit();\n}"}
{"prompt":"Create and roll back a SubTransaction within a transaction.","completion":"using (Transaction tx = new Transaction(doc, \"Main Transaction\"))\n{\n    tx.Start();\n    using (SubTransaction st = new SubTransaction(doc))\n    {\n        st.Start();\n        // ... tentative changes ...\n        st.RollBack();\n    }\n    tx.Commit();\n}"}
{"prompt":"Crea un filtro de vista que oculte muros con el parámetro 'Phase Demolished' igual a un ID de fase específico.","completion":"Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).FirstOrDefault(p => p.Name == \"Fase de Demolición\") as Phase;\nif(demolishedPhase != null) {\n    ElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\n    FilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\n    ElementFilter filter = new ElementParameterFilter(rule);\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Filtro de Demolición\", new List<ElementId>{new ElementId(BuiltInCategory.OST_Walls)}, filter);\n    doc.ActiveView.AddFilter(pfe.Id);\n    doc.ActiveView.SetFilterVisibility(pfe.Id, false);\n}"}
{"prompt":"Create a view filter that hides walls with the 'Phase Demolished' parameter equal to a specific phase ID.","completion":"Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).FirstOrDefault(p => p.Name == \"Demolition Phase\") as Phase;\nif(demolishedPhase != null) {\n    ElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\n    FilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\n    ElementFilter filter = new ElementParameterFilter(rule);\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Demolition Filter\", new List<ElementId>{new ElementId(BuiltInCategory.OST_Walls)}, filter);\n    doc.ActiveView.AddFilter(pfe.Id);\n    doc.ActiveView.SetFilterVisibility(pfe.Id, false);\n}"}
{"prompt":"Aplica OverrideGraphicSettings para que todas las ventanas se muestren en rojo.","completion":"View activeView = doc.ActiveView;\nOverrideGraphicSettings ogs = new OverrideGraphicSettings();\nogs.SetProjectionLineColor(new Color(255,0,0));\nvar windows = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().ToElementIds();\nforeach (var windowId in windows)\n{\n    activeView.SetElementOverrides(windowId, ogs);\n}"}
{"prompt":"Apply OverrideGraphicSettings to show all windows in red.","completion":"View activeView = doc.ActiveView;\nOverrideGraphicSettings ogs = new OverrideGraphicSettings();\nogs.SetProjectionLineColor(new Color(255,0,0));\nvar windows = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().ToElementIds();\nforeach (var windowId in windows)\n{\n    activeView.SetElementOverrides(windowId, ogs);\n}"}
{"prompt":"Exporta la vista 3D activa como imagen JPG en 'C:/temp/vista.jpg'.","completion":"View activeView = doc.ActiveView;\nImageExportOptions opts = new ImageExportOptions();\nopts.FilePath = @\"C:\\temp\\vista\";\nopts.HLRandWFViewsFileType = ImageFileType.JPEGLossless;\nopts.ZoomType = ZoomFitType.FitToPage;\nopts.ExportRange = ExportRange.CurrentView;\ndoc.ExportImage(opts);"}
{"prompt":"Export the active 3D view as a JPG image to 'C:/temp/view.jpg'.","completion":"View activeView = doc.ActiveView;\nImageExportOptions opts = new ImageExportOptions();\nopts.FilePath = @\"C:\\temp\\view\";\nopts.HLRandWFViewsFileType = ImageFileType.JPEGLossless;\nopts.ZoomType = ZoomFitType.FitToPage;\nopts.ExportRange = ExportRange.CurrentView;\ndoc.ExportImage(opts);"}
{"prompt":"Configura los ajustes de trazado de rayos (RayTrace) en la vista 3D.","completion":"View3D view3D = doc.ActiveView as View3D;\nif(view3D != null) {\n    view3D.get_Parameter(BuiltInParameter.MODEL_GRAPHICS_STYLE).Set(6); // Realistic\n    view3D.get_Parameter(BuiltInParameter.REALISTIC_GRAPHICS_STYLE_RAY_TRACE).Set(1); // Enable Ray Tracing\n    RenderingSettings settings = view3D.GetRenderingSettings();\n    settings.ResolutionTarget = ResolutionTarget.Printer;\n    settings.ResolutionValue = 300;\n    view3D.SetRenderingSettings(settings);\n}"}
{"prompt":"Configure RayTrace settings in the 3D view.","completion":"View3D view3D = doc.ActiveView as View3D;\nif(view3D != null) {\n    view3D.get_Parameter(BuiltInParameter.MODEL_GRAPHICS_STYLE).Set(6); // Realistic\n    view3D.get_Parameter(BuiltInParameter.REALISTIC_GRAPHICS_STYLE_RAY_TRACE).Set(1); // Enable Ray Tracing\n    RenderingSettings settings = view3D.GetRenderingSettings();\n    settings.ResolutionTarget = ResolutionTarget.Printer;\n    settings.ResolutionValue = 300;\n    view3D.SetRenderingSettings(settings);\n}"}
{"prompt":"Crea un PathOfTravel entre dos puntos (1,1) y (10,10).","completion":"ViewPlan viewPlan = doc.ActiveView as ViewPlan;\nif(viewPlan != null) {\n    UV start = new UV(1,1);\n    UV end = new UV(10,10);\n    PathOfTravel.Create(viewPlan, start, end);\n}"}
{"prompt":"Create a PathOfTravel between two points (1,1) and (10,10).","completion":"ViewPlan viewPlan = doc.ActiveView as ViewPlan;\nif(viewPlan != null) {\n    UV start = new UV(1,1);\n    UV end = new UV(10,10);\n    PathOfTravel.Create(viewPlan, start, end);\n}"}
{"prompt":"Crea un filtro mecánico HVAC que agrupe conductos de SupplyAir.","completion":"ElementId sysClassParamId = new ElementId(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(sysClassParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"SupplyAir\");\nElementFilter filter = new ElementParameterFilter(rule);\nParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Filtro Supply Air\", new List<ElementId>{new ElementId(BuiltInCategory.OST_DuctCurves)}, filter);\ndoc.ActiveView.AddFilter(pfe.Id);\nOverrideGraphicSettings ogs = new OverrideGraphicSettings();\nogs.SetProjectionLineColor(new Color(0,0,255));\ndoc.ActiveView.SetFilterOverrides(pfe.Id, ogs);"}
{"prompt":"Create an HVAC mechanical filter that groups SupplyAir ducts.","completion":"ElementId sysClassParamId = new ElementId(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(sysClassParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"SupplyAir\");\nElementFilter filter = new ElementParameterFilter(rule);\nParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Supply Air Filter\", new List<ElementId>{new ElementId(BuiltInCategory.OST_DuctCurves)}, filter);\ndoc.ActiveView.AddFilter(pfe.Id);\nOverrideGraphicSettings ogs = new OverrideGraphicSettings();\nogs.SetProjectionLineColor(new Color(0,0,255));\ndoc.ActiveView.SetFilterOverrides(pfe.Id, ogs);"}
{"prompt":"Añade un parámetro de instancia compartido 'SerialNumber' a la categoría Mobiliario.","completion":"string sharedParamFile = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamFile) || !System.IO.File.Exists(sharedParamFile)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\shared_params.txt\"; System.IO.File.Create(sharedParamFile).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = defFile.Groups.EnsureDefinitionGroup(\"General\");\nExternalDefinition def = group.Definitions.Create(new ExternalDefinitionCreationOptions(\"SerialNumber\", SpecTypeId.String.Text)) as ExternalDefinition;\nCategory cat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nCategorySet cs = doc.Application.Create.NewCategorySet(); cs.Insert(cat);\nInstanceBinding bind = doc.Application.Create.NewInstanceBinding(cs);\ndoc.ParameterBindings.Insert(def, bind, BuiltInParameterGroup.PG_TEXT);"}
{"prompt":"Add a shared instance parameter 'SerialNumber' to the Furniture category.","completion":"string sharedParamFile = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamFile) || !System.IO.File.Exists(sharedParamFile)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\shared_params.txt\"; System.IO.File.Create(sharedParamFile).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = defFile.Groups.EnsureDefinitionGroup(\"General\");\nExternalDefinition def = group.Definitions.Create(new ExternalDefinitionCreationOptions(\"SerialNumber\", SpecTypeId.String.Text)) as ExternalDefinition;\nCategory cat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nCategorySet cs = doc.Application.Create.NewCategorySet(); cs.Insert(cat);\nInstanceBinding bind = doc.Application.Create.NewInstanceBinding(cs);\ndoc.ParameterBindings.Insert(def, bind, BuiltInParameterGroup.PG_TEXT);"}
{"prompt":"Obtén la malla de geometría de una masa conceptual (MassInstance).","completion":"FamilyInstance massInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Mass).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif(massInstance != null) {\n    Options opt = new Options() { DetailLevel = ViewDetailLevel.Fine };\n    GeometryElement geomElem = massInstance.get_Geometry(opt);\n    foreach (GeometryObject geomObj in geomElem) {\n        if (geomObj is Solid solid && solid.Volume > 0) {\n            // Process the solid\n        }\n    }\n}"}
{"prompt":"Get the geometry mesh of a conceptual mass (MassInstance).","completion":"FamilyInstance massInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Mass).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif(massInstance != null) {\n    Options opt = new Options() { DetailLevel = ViewDetailLevel.Fine };\n    GeometryElement geomElem = massInstance.get_Geometry(opt);\n    foreach (GeometryObject geomObj in geomElem) {\n        if (geomObj is Solid solid && solid.Volume > 0) {\n            // Process the solid\n        }\n    }\n}"}
{"prompt":"Inserta un TextNote con el texto 'Revisar' en posición (2,3,0) en la vista activa.","completion":"XYZ position = new XYZ(2,3,0);\nTextNote.Create(doc, doc.ActiveView.Id, position, \"Revisar\", TextNoteType.CreateDefault(doc).Id);"}
{"prompt":"Insert a TextNote with the text 'Review' at position (2,3,0) in the active view.","completion":"XYZ position = new XYZ(2,3,0);\nTextNote.Create(doc, doc.ActiveView.Id, position, \"Review\", TextNoteType.CreateDefault(doc).Id);"}
{"prompt":"Crea un Workset de usuario llamado 'Mobiliario' y asígnalo a una FamilyInstance.","completion":"if(doc.IsWorkshared) {\n    Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w => w.Name == \"Mobiliario\");\n    if(ws == null) ws = Workset.Create(doc, \"Mobiliario\");\n    FamilyInstance fi = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n    if (fi != null) {\n        Parameter wsparam = fi.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n        if(wsparam != null) wsparam.Set(ws.Id.IntegerValue);\n    }\n}"}
{"prompt":"Create a user Workset named 'Furniture' and assign it to a FamilyInstance.","completion":"if(doc.IsWorkshared) {\n    Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w => w.Name == \"Furniture\");\n    if(ws == null) ws = Workset.Create(doc, \"Furniture\");\n    FamilyInstance fi = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\n    if (fi != null) {\n        Parameter wsparam = fi.get_Parameter(BuiltInParameter.ELEM_PARTITION_PARAM);\n        if(wsparam != null) wsparam.Set(ws.Id.IntegerValue);\n    }\n}"}
{"prompt":"Obtén y establece la ubicación XY de un elemento a (5,5).","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para mover\");\nElement elem = doc.GetElement(pickedRef);\nLocationPoint lp = elem.Location as LocationPoint;\nif (lp != null) {\n    XYZ newPosition = new XYZ(5, 5, lp.Point.Z);\n    lp.Point = newPosition;\n}"}
{"prompt":"Get and set the XY location of an element to (5,5).","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to move\");\nElement elem = doc.GetElement(pickedRef);\nLocationPoint lp = elem.Location as LocationPoint;\nif (lp != null) {\n    XYZ newPosition = new XYZ(5, 5, lp.Point.Z);\n    lp.Point = newPosition;\n}"}
{"prompt":"Crea una carga de superficie (Area Load) de 2 kN/m² en un contorno cerrado dado.","completion":"CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(10,10,0), XYZ.BasisZ);\nAreaLoadType loadType = new FilteredElementCollector(doc).OfClass(typeof(AreaLoadType)).FirstOrDefault() as AreaLoadType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(loadType != null && level != null) {\n    AreaLoad.Create(doc, level, new List<CurveLoop>{profile}, loadType.Id, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.KilonewtonsPerSquareMeter), \"Uniform\");\n}"}
{"prompt":"Create an Area Load of 2 kN/m² on a given closed contour.","completion":"CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(10,10,0), XYZ.BasisZ);\nAreaLoadType loadType = new FilteredElementCollector(doc).OfClass(typeof(AreaLoadType)).FirstOrDefault() as AreaLoadType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(loadType != null && level != null) {\n    AreaLoad.Create(doc, level, new List<CurveLoop>{profile}, loadType.Id, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.KilonewtonsPerSquareMeter), \"Uniform\");\n}"}
{"prompt":"Crea un refuerzo de superficie (Area Reinforcement) en un muro, usando un contorno de curvas.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nAreaReinforcementType reinforcementType = new FilteredElementCollector(doc).OfClass(typeof(AreaReinforcementType)).FirstOrDefault() as AreaReinforcementType;\nif(wall != null && reinforcementType != null) {\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(1,1,0), new XYZ(4,4,0), wall.Orientation);\n    AreaReinforcement.Create(doc, wall, new List<CurveLoop>{profile}, reinforcementType.Id);\n}"}
{"prompt":"Create an Area Reinforcement on a wall using a curve contour.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nAreaReinforcementType reinforcementType = new FilteredElementCollector(doc).OfClass(typeof(AreaReinforcementType)).FirstOrDefault() as AreaReinforcementType;\nif(wall != null && reinforcementType != null) {\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(1,1,0), new XYZ(4,4,0), wall.Orientation);\n    AreaReinforcement.Create(doc, wall, new List<CurveLoop>{profile}, reinforcementType.Id);\n}"}
{"prompt":"Genera una malla de refuerzo (Fabric Area) en un forjado, con ángulo de 45°.","completion":"Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFabricAreaType areaType = new FilteredElementCollector(doc).OfClass(typeof(FabricAreaType)).FirstOrDefault() as FabricAreaType;\nif(floor != null && areaType != null) {\n    FabricArea.Create(doc, floor.Id, areaType.Id, 45 * Math.PI / 180.0);\n}"}
{"prompt":"Generate a Fabric Area reinforcement in a floor, with a 45° angle.","completion":"Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFabricAreaType areaType = new FilteredElementCollector(doc).OfClass(typeof(FabricAreaType)).FirstOrDefault() as FabricAreaType;\nif(floor != null && areaType != null) {\n    FabricArea.Create(doc, floor.Id, areaType.Id, 45 * Math.PI / 180.0);\n}"}
{"prompt":"Crea una lámina de refuerzo (Fabric Sheet) en una columna, usando un contorno de curvas.","completion":"FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nFabricSheetType sheetType = new FilteredElementCollector(doc).OfClass(typeof(FabricSheetType)).FirstOrDefault() as FabricSheetType;\nif(column != null && sheetType != null) {\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(-0.5,-0.5,0), new XYZ(0.5,0.5,0), column.GetTransform().BasisX);\n    FabricSheet.Create(doc, column.Id, sheetType.Id, new List<CurveLoop>{profile});\n}"}
{"prompt":"Create a Fabric Sheet reinforcement on a column, using a curve contour.","completion":"FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nFabricSheetType sheetType = new FilteredElementCollector(doc).OfClass(typeof(FabricSheetType)).FirstOrDefault() as FabricSheetType;\nif(column != null && sheetType != null) {\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(-0.5,-0.5,0), new XYZ(0.5,0.5,0), column.GetTransform().BasisX);\n    FabricSheet.Create(doc, column.Id, sheetType.Id, new List<CurveLoop>{profile});\n}"}
{"prompt":"Selecciona un tipo de hilo de refuerzo (FabricWireType) llamado '8mm'.","completion":"FabricWireType wireType = new FilteredElementCollector(doc).OfClass(typeof(FabricWireType)).Cast<FabricWireType>().FirstOrDefault(ft => ft.Name.Contains(\"8mm\"));"}
{"prompt":"Select a FabricWireType named '8mm'.","completion":"FabricWireType wireType = new FilteredElementCollector(doc).OfClass(typeof(FabricWireType)).Cast<FabricWireType>().FirstOrDefault(ft => ft.Name.Contains(\"8mm\"));"}
{"prompt":"Crea un refuerzo de trayectoria (Path Reinforcement) en una viga a lo largo de su curva de centro.","completion":"FamilyInstance beam = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nPathReinforcementType pathType = new FilteredElementCollector(doc).OfClass(typeof(PathReinforcementType)).FirstOrDefault() as PathReinforcementType;\nif(beam != null && pathType != null) {\n    LocationCurve lc = beam.Location as LocationCurve;\n    PathReinforcement.Create(doc, beam, new List<Curve>{lc.Curve}, pathType.Id, false);\n}"}
{"prompt":"Create a Path Reinforcement on a beam along its center curve.","completion":"FamilyInstance beam = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nPathReinforcementType pathType = new FilteredElementCollector(doc).OfClass(typeof(PathReinforcementType)).FirstOrDefault() as PathReinforcementType;\nif(beam != null && pathType != null) {\n    LocationCurve lc = beam.Location as LocationCurve;\n    PathReinforcement.Create(doc, beam, new List<Curve>{lc.Curve}, pathType.Id, false);\n}"}
{"prompt":"Agrupa barras en un contenedor de refuerzo (Rebar Container) alrededor de una zapata.","completion":"FamilyInstance footing = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif(footing != null)\n{\n    RebarContainer rebarContainer = RebarContainer.Create(doc, footing);\n    // Aquí se añadirían las RebarContainerItems al contenedor\n}"}
{"prompt":"Group rebars in a Rebar Container around a footing.","completion":"FamilyInstance footing = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif(footing != null)\n{\n    RebarContainer rebarContainer = RebarContainer.Create(doc, footing);\n    // RebarContainerItems would be added to the container here\n}"}
{"prompt":"Crea una instancia de ensamblaje (AssemblyInstance) para un conjunto de muros seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> wallIds = uidoc.Selection.PickElementsByCategory(BuiltInCategory.OST_Walls, \"Selecciona muros para el ensamblaje\").Select(e => e.Id).ToList();\nif (wallIds.Any())\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, wallIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    assemblyInstance.Name = \"Ensamblado de Muros Perimetrales\";\n}"}
{"prompt":"Create an AssemblyInstance for a set of selected walls.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> wallIds = uidoc.Selection.PickElementsByCategory(BuiltInCategory.OST_Walls, \"Select walls for the assembly\").Select(e => e.Id).ToList();\nif (wallIds.Any())\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, wallIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    assemblyInstance.Name = \"Perimeter Walls Assembly\";\n}"}
{"prompt":"Dibuja una región rellena (Filled Region) con un patrón de relleno y un contorno de curvas.","completion":"View activeView = doc.ActiveView;\nFilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\nif(filledRegionType != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(5,5,0), activeView.ViewDirection);\n    FilledRegion.Create(doc, filledRegionType.Id, activeView.Id, new List<CurveLoop>{profile});\n}"}
{"prompt":"Draw a Filled Region with a fill pattern and a curve contour.","completion":"View activeView = doc.ActiveView;\nFilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\nif(filledRegionType != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(5,5,0), activeView.ViewDirection);\n    FilledRegion.Create(doc, filledRegionType.Id, activeView.Id, new List<CurveLoop>{profile});\n}"}
{"prompt":"Añade un punto de referencia (ReferencePoint) en las coordenadas X=1, Y=2, Z=3.","completion":"// Este código solo es válido dentro del editor de familias (Family Document)\nif(doc.IsFamilyDocument)\n{\n    ReferencePoint refPoint = doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));\n}"}
{"prompt":"Add a ReferencePoint at coordinates X=1, Y=2, Z=3.","completion":"// This code is only valid inside the family editor (Family Document)\nif(doc.IsFamilyDocument)\n{\n    ReferencePoint refPoint = doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));\n}"}
{"prompt":"Crea una etiqueta independiente (Independent Tag) para la primera puerta en la vista.","completion":"FamilyInstance door = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif(door != null)\n{\n    LocationPoint loc = door.Location as LocationPoint;\n    if(loc != null) IndependentTag.Create(doc, doc.ActiveView.Id, new Reference(door), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n}"}
{"prompt":"Create an Independent Tag for the first door in the view.","completion":"FamilyInstance door = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif(door != null)\n{\n    LocationPoint loc = door.Location as LocationPoint;\n    if(loc != null) IndependentTag.Create(doc, doc.ActiveView.Id, new Reference(door), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n}"}
{"prompt":"Crea un esquema de área (Area Scheme) llamado 'Zonas de Uso'.","completion":"AreaScheme newScheme = AreaScheme.Create(doc, \"Zonas de Uso\");"}
{"prompt":"Create an Area Scheme named 'Usage Zones'.","completion":"AreaScheme newScheme = AreaScheme.Create(doc, \"Usage Zones\");"}
{"prompt":"Crea un área (Area) en el esquema 'Zonas de Uso' en la ubicación (1,1).","completion":"AreaScheme scheme = new FilteredElementCollector(doc).OfClass(typeof(AreaScheme)).FirstOrDefault(s => s.Name == \"Zonas de Uso\") as AreaScheme;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(scheme != null && level != null)\n{\n    // Nota: Se requiere un contorno cerrado de AreaBoundaryLines para que el área sea visible y calculable.\n    Area newArea = doc.Create.NewArea(level, new UV(1,1));\n}"}
{"prompt":"Create an Area in the 'Usage Zones' scheme at location (1,1).","completion":"AreaScheme scheme = new FilteredElementCollector(doc).OfClass(typeof(AreaScheme)).FirstOrDefault(s => s.Name == \"Usage Zones\") as AreaScheme;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(scheme != null && level != null)\n{\n    // Note: A closed loop of AreaBoundaryLines is required for the area to be visible and calculable.\n    Area newArea = doc.Create.NewArea(level, new UV(1,1));\n}"}
{"prompt":"Asigna el patrón de superficie 'Diagonal' al primer material encontrado.","completion":"Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault() as Material;\nFillPatternElement pattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Diagonal\")) as FillPatternElement;\nif(material != null && pattern != null)\n{\n    material.SurfaceForegroundPatternId = pattern.Id;\n}"}
{"prompt":"Assign the 'Diagonal' surface pattern to the first material found.","completion":"Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault() as Material;\nFillPatternElement pattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Diagonal\")) as FillPatternElement;\nif(material != null && pattern != null)\n{\n    material.SurfaceForegroundPatternId = pattern.Id;\n}"}
{"prompt":"Crea un nuevo esquema de color de relleno sólido llamado 'Esquema de Departamentos'.","completion":"ElementId categoryId = new ElementId(BuiltInCategory.OST_Rooms);\nColorFillScheme newScheme = ColorFillScheme.Create(doc, \"Esquema de Departamentos\", categoryId);\nFillPatternElement solidFill = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.GetFillPattern().IsSolidFill) as FillPatternElement;\nif(newScheme != null && solidFill != null)\n{\n    newScheme.CreateEntry(new Color(255,0,0), solidFill.Id, \"Tipo A\");\n    newScheme.CreateEntry(new Color(0,0,255), solidFill.Id, \"Tipo B\");\n}"}
{"prompt":"Create a new solid color fill scheme named 'Department Scheme'.","completion":"ElementId categoryId = new ElementId(BuiltInCategory.OST_Rooms);\nColorFillScheme newScheme = ColorFillScheme.Create(doc, \"Department Scheme\", categoryId);\nFillPatternElement solidFill = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.GetFillPattern().IsSolidFill) as FillPatternElement;\nif(newScheme != null && solidFill != null)\n{\n    newScheme.CreateEntry(new Color(255,0,0), solidFill.Id, \"Type A\");\n    newScheme.CreateEntry(new Color(0,0,255), solidFill.Id, \"Type B\");\n}"}
{"prompt":"Convierte la vista 'Plano Nivel 2' en una plantilla de vista.","completion":"ViewPlan viewToConvert = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Plano Nivel 2\") as ViewPlan;\nif(viewToConvert != null && !viewToConvert.IsTemplate)\n{\n    viewToConvert.IsTemplate = true;\n    viewToConvert.Name = \"Plantilla de Planta Arquitectónica\";\n}"}
{"prompt":"Convert the 'Level 2 Plan' view into a view template.","completion":"ViewPlan viewToConvert = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 2 Plan\") as ViewPlan;\nif(viewToConvert != null && !viewToConvert.IsTemplate)\n{\n    viewToConvert.IsTemplate = true;\n    viewToConvert.Name = \"Architectural Plan Template\";\n}"}
{"prompt":"Crea una vista 3D isométrica y oculta la categoría de mobiliario.","completion":"ViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\nif(vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    view3d.Name = \"Vista 3D - Sin Mobiliario\";\n    Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\n    if (furnitureCat != null) view3d.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Create an isometric 3D view and hide the furniture category.","completion":"ViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\nif(vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    view3d.Name = \"3D View - No Furniture\";\n    Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\n    if (furnitureCat != null) view3d.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Importa el archivo CAD 'planobase.dwg' en la vista actual.","completion":"string filePath = @\"C:\\CAD\\planobase.dwg\";\nif(System.IO.File.Exists(filePath))\n{\n    DWGImportOptions options = new DWGImportOptions();\n    options.Placement = ImportPlacement.Origin;\n    ElementId importId;\n    doc.Import(filePath, options, doc.ActiveView, out importId);\n}"}
{"prompt":"Import the CAD file 'baseplan.dwg' into the current view.","completion":"string filePath = @\"C:\\CAD\\baseplan.dwg\";\nif(System.IO.File.Exists(filePath))\n{\n    DWGImportOptions options = new DWGImportOptions();\n    options.Placement = ImportPlacement.Origin;\n    ElementId importId;\n    doc.Import(filePath, options, doc.ActiveView, out importId);\n}"}
{"prompt":"Mueve el punto base del proyecto 100 metros hacia el norte.","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsSurveyPoint);\nif(projectBasePoint != null)\n{\n    XYZ translation = new XYZ(0, UnitUtils.ConvertToInternalUnits(100, UnitTypeId.Meters), 0);\n    ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n}"}
{"prompt":"Move the project base point 100 meters to the north.","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsSurveyPoint);\nif(projectBasePoint != null)\n{\n    XYZ translation = new XYZ(0, UnitUtils.ConvertToInternalUnits(100, UnitTypeId.Meters), 0);\n    ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n}"}
{"prompt":"Encuentra todos los muros con el comentario 'Revisar'.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Revisar\");\nElementFilter filter = new ElementParameterFilter(rule);\nvar wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElements();"}
{"prompt":"Find all walls with the comment 'Review'.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Review\");\nElementFilter filter = new ElementParameterFilter(rule);\nvar wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElements();"}
{"prompt":"Crea un espacio MEP para cada habitación en el Nivel 1.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(level1 != null)\n{\n    var roomsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level1.Id);\n    foreach(Room room in roomsOnLevel1)\n    {\n        doc.Create.NewMEPSpace(room, null);\n    }\n}"}
{"prompt":"Create an MEP space for each room on Level 1.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(level1 != null)\n{\n    var roomsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level1.Id);\n    foreach(Room room in roomsOnLevel1)\n    {\n        doc.Create.NewMEPSpace(room, null);\n    }\n}"}
{"prompt":"Crea un DirectShape esférico con radio de 5 metros.","completion":"double radius = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\nBRepBuilder brepBuilder = new BRepBuilder(BRepType.Solid);\nbrepBuilder.AddSphere(new Sphere(XYZ.Zero, radius));\nBRepBuilderOutcome result = brepBuilder.Finish();\nif(result == BRepBuilderOutcome.Success)\n{\n    List<GeometryObject> geoList = new List<GeometryObject>{ brepBuilder.GetResult() };\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n    ds.SetShape(geoList);\n}"}
{"prompt":"Create a spherical DirectShape with a 5-meter radius.","completion":"double radius = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\nBRepBuilder brepBuilder = new BRepBuilder(BRepType.Solid);\nbrepBuilder.AddSphere(new Sphere(XYZ.Zero, radius));\nBRepBuilderOutcome result = brepBuilder.Finish();\nif(result == BRepBuilderOutcome.Success)\n{\n    List<GeometryObject> geoList = new List<GeometryObject>{ brepBuilder.GetResult() };\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n    ds.SetShape(geoList);\n}"}
{"prompt":"Inserta un componente adaptativo de 4 puntos en las esquinas de una habitación.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault() as Room;\nFamilySymbol adaptiveSymbol = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).FirstOrDefault(s => s.Family.FamilyPlacementType == FamilyPlacementType.Adaptive && AdaptiveComponentInstanceUtils.IsAdaptiveFamilySymbol(s)) as FamilySymbol;\nif(room != null && adaptiveSymbol != null)\n{\n    // Simplified logic, assumes rectangular room and 4 points\n    IList<IList<BoundarySegment>> segments = room.GetBoundarySegments(new SpatialElementBoundaryOptions());\n    List<XYZ> corners = segments[0].Select(s => s.GetCurve().GetEndPoint(0)).ToList();\n    AdaptiveComponentInstanceUtils.CreateAdaptiveComponentInstance(doc, adaptiveSymbol, corners.Select(c => doc.FamilyCreate.NewReferencePoint(c).Id).ToList());\n}"}
{"prompt":"Insert a 4-point adaptive component at the corners of a room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault() as Room;\nFamilySymbol adaptiveSymbol = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).FirstOrDefault(s => s.Family.FamilyPlacementType == FamilyPlacementType.Adaptive && AdaptiveComponentInstanceUtils.IsAdaptiveFamilySymbol(s)) as FamilySymbol;\nif(room != null && adaptiveSymbol != null)\n{\n    // Simplified logic, assumes rectangular room and 4 points\n    IList<IList<BoundarySegment>> segments = room.GetBoundarySegments(new SpatialElementBoundaryOptions());\n    List<XYZ> corners = segments[0].Select(s => s.GetCurve().GetEndPoint(0)).ToList();\n    AdaptiveComponentInstanceUtils.CreateAdaptiveComponentInstance(doc, adaptiveSymbol, corners.Select(c => doc.FamilyCreate.NewReferencePoint(c).Id).ToList());\n}"}
{"prompt":"Asigna el material 'Acero' a la primera capa de un tipo de muro compuesto.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.GetCompoundStructure() != null) as WallType;\nMaterial steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Steel\")) as Material;\nif(wallType != null && steel != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    if(cs.GetLayerCount() > 0) cs.SetMaterialId(0, steel.Id);\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Assign the 'Steel' material to the first layer of a compound wall type.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.GetCompoundStructure() != null) as WallType;\nMaterial steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Steel\")) as Material;\nif(wallType != null && steel != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    if(cs.GetLayerCount() > 0) cs.SetMaterialId(0, steel.Id);\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Crea una nueva hoja y nómbrala usando el número de la siguiente hoja disponible.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Create a new sheet and name it using the next available sheet number.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Rota la vista activa 90 grados.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Rotate the active view by 90 degrees.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Crea una vista de detalle (callout) que siga la forma de un polígono.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Create a detail callout view that follows the shape of a polygon.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Crea una masa conceptual cónica.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Create a conical conceptual mass.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Aplica un material a todas las capas de un tipo de muro.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Apply a material to all layers of a wall type.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Encuentra todos los elementos dentro de un 'Scope Box' específico.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zona A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Find all elements within a specific 'Scope Box'.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zone A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Crea una vista de plano estructural para el Nivel 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Plano Estructural Nivel 2\";\n}"}
{"prompt":"Create a structural plan view for Level 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Structural Plan Level 2\";\n}"}
{"prompt":"Cambia el color de la línea de todas las tuberías sanitarias a verde.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Change the line color of all sanitary pipes to green.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Oculta todos los elementos excepto los muros en la vista actual.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Hide all elements except walls in the current view.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Encuentra y selecciona todas las familias no utilizadas en el proyecto.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Find and select all unused families in the project.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Exporta un listado de todas las vistas y sus plantillas aplicadas a CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Export a list of all views and their applied templates to CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Crea una cortina mural rectangular del Nivel 1 al Nivel 2 entre (0,0) y (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Create a rectangular curtain wall from Level 1 to Level 2 between (0,0) and (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Añade rejillas U y V cada 2 m a un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Add U and V gridlines every 2m to a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Carga la familia 'LightingFixture.rfa' e inserta una instancia en coordenadas (2,2,3) en Nivel 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Load the 'LightingFixture.rfa' family and insert an instance at (2,2,3) on Level 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Crea un techo esquemático rectangular en 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Create a schematic rectangular roof at 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Genera una losa de cimentación de 1m de espesor.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Create a 1m thick structural footing slab.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Exporta todos los muros con 'Mark' a un archivo CSV.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Export all walls with a 'Mark' to a CSV file.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Create an intermediate level named 'Mezzanine' halfway between Level 1 and Level 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Cambia el material de todos los muros a 'Acero'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Acero\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Change the material of all walls to 'Steel'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Steel\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Éxito\", $\"Se eliminaron {unusedWallTypes.Count} tipos de muro no utilizados.\");\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Success\", $\"Deleted {unusedWallTypes.Count} unused wall types.\");\n}"}
{"prompt":"Añade una línea de rejilla U en un muro cortina a 3m desde el origen.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Add a U grid line to a curtain wall at 3m from the origin.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Añade una línea de rejilla V en un muro cortina a 2m de altura.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Add a V grid line to a curtain wall at 2m height.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Activa todos los segmentos en la primera línea de rejilla U.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Activate all segments on the first U grid line.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Añade montantes en la línea de rejilla U seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla de muro cortina\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Add mullions to the selected U grid line.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a curtain grid line\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Aísla la rejilla V seleccionada y añade solo un segmento.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla V\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Isolate the selected V gridline and add only one segment.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a V grid line\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Crea una nueva fase 'Fase 3 - Ejecución'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Fase 3 - Ejecución\";"}
{"prompt":"Create a new phase 'Phase 3 - Execution'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Phase 3 - Execution\";"}
{"prompt":"Asigna la demolición de los muros seleccionados a la 'Fase 3 - Ejecución'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Fase 3 - Ejecución\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Assign the demolition of selected walls to 'Phase 3 - Execution'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Phase 3 - Execution\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Cambia el primer tipo de muro curvo a un tipo estructural.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curved);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Change the first curved wall type to a structural type.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curtain);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Cambia el material de los paneles de muro cortina a 'Vidrio' si no tienen material.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Set curtain panel material to 'Glass' if unassigned.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 200mm' y nómbralo 'Muro_Dibujo'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Genérico - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Muro_Dibujo\");"}
{"prompt":"Duplicate wall type 'Generic - 200mm' and name it 'Drawing_Wall'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Generic - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Drawing_Wall\");"}
{"prompt":"Exporta los IDs y las elevaciones de los niveles a un archivo CSV.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Export level IDs and elevations to a CSV file.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Elimina todos los montantes (mullions) desbloqueados de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Delete all unlocked mullions from a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Crea un nuevo tipo de muro llamado 'Muro Genérico - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Muro Genérico - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Create a new wall type named 'Generic Wall - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Generic Wall - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Change the type of all selected walls to 'Exterior Wall - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Exterior Wall - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Crea una nueva hoja con el nombre 'Planos de Planta'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Planos de Planta\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Create a new sheet with the name 'Floor Plans'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Floor Plans\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Coloca la vista 'Nivel 1' en la hoja 'Planos de Planta' en el centro.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Planos de Planta\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Nivel 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Place the 'Level 1' view on the 'Floor Plans' sheet at its center.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Floor Plans\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Level 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Establece el nivel de detalle de la vista activa a 'Fino'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Set the detail level of the active view to 'Fine'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Renombrar el nivel 'Nivel 1' a 'Planta Baja'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nif(levelToRename != null) levelToRename.Name = \"Planta Baja\";"}
{"prompt":"Rename the level 'Level 1' to 'Ground Floor'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nif(levelToRename != null) levelToRename.Name = \"Ground Floor\";"}
{"prompt":"Crea un pilar estructural con una sección de 300x300mm en (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Create a structural column with a 300x300mm section at (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Alinea todos los muros con el eje '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Align all walls to grid '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Crea una masa in-place.","completion":"using (Transaction t = new Transaction(doc, \"Crear Masa In-Place\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Create an in-place mass.","completion":"using (Transaction t = new Transaction(doc, \"Create In-Place Mass\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Aplica un material llamado 'Hormigón in situ' a todos los suelos.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Hormigón in situ\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Apply a material named 'Cast-in-place Concrete' to all floors.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Cast-in-place Concrete\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Borra todos los grupos del modelo.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Delete all groups from the model.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Crea un nuevo parámetro de proyecto compartido de texto llamado 'Notas Adicionales' para muros y puertas.","completion":"string paramName = \"Notas Adicionales\";\nstring groupName = \"General\";\nCategories categories = doc.Application.Create.NewCategories();\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\nstring sharedParamsFilePath = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamsFilePath) || !System.IO.File.Exists(sharedParamsFilePath)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\shared_params.txt\"; System.IO.File.Create(sharedParamsFilePath).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup myGroup = defFile.Groups.EnsureDefinitionGroup(groupName);\nExternalDefinition externalDefinition = myGroup.Definitions.Create(new ExternalDefinitionCreationOptions(paramName, SpecTypeId.String.Text)) as ExternalDefinition;\nif (externalDefinition != null)\n{\n    InstanceBinding instanceBinding = doc.Application.Create.NewInstanceBinding(categories);\n    doc.ParameterBindings.Insert(externalDefinition, instanceBinding, BuiltInParameterGroup.PG_DATA);\n}"}
{"prompt":"Create a new shared project parameter of text type named 'Additional Notes' for walls and doors.","completion":"string paramName = \"Additional Notes\";\nstring groupName = \"General\";\nCategories categories = doc.Application.Create.NewCategories();\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\nstring sharedParamsFilePath = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamsFilePath) || !System.IO.File.Exists(sharedParamsFilePath)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\shared_params.txt\"; System.IO.File.Create(sharedParamsFilePath).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup myGroup = defFile.Groups.EnsureDefinitionGroup(groupName);\nExternalDefinition externalDefinition = myGroup.Definitions.Create(new ExternalDefinitionCreationOptions(paramName, SpecTypeId.String.Text)) as ExternalDefinition;\nif (externalDefinition != null)\n{\n    InstanceBinding instanceBinding = doc.Application.Create.NewInstanceBinding(categories);\n    doc.ParameterBindings.Insert(externalDefinition, instanceBinding, BuiltInParameterGroup.PG_DATA);\n}"}
{"prompt":"Crea un nivel 'Roof Terrace' a 15 m solo en proyecto compartido.","completion":"if(doc.IsWorkshared && !new FilteredElementCollector(doc).OfClass(typeof(Level)).Any(l => l.Name == \"Roof Terrace\"))\n{\n    double elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\n    Level.Create(doc, elev).Name = \"Roof Terrace\";\n}"}
{"prompt":"Create a 'Roof Terrace' level at 15m only in a workshared project.","completion":"if(doc.IsWorkshared && !new FilteredElementCollector(doc).OfClass(typeof(Level)).Any(l => l.Name == \"Roof Terrace\"))\n{\n    double elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\n    Level.Create(doc, elev).Name = \"Roof Terrace\";\n}"}
{"prompt":"Coloca postes de iluminación cada 10 m en un camino lineal de 100 m.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    Line path = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(100, UnitTypeId.Meters), 0, 0));\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(double d = 0; d <= path.Length; d += spacing)\n    {\n        XYZ point = path.Evaluate(d, true);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Place lighting posts every 10m along a 100m linear path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    Line path = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(100, UnitTypeId.Meters), 0, 0));\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(double d = 0; d <= path.Length; d += spacing)\n    {\n        XYZ point = path.Evaluate(d, true);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Genera una cuadrícula de columnas 5×5 con separación de 8 m.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Generate a 5x5 column grid with 8m spacing.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Crea una habitación circular de radio 5 m en el Nivel 2.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif(level2 != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Arc.Create(XYZ.Zero, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY));\n    doc.Create.NewRoomBoundaryLines(level2.GetPlane(), profile, doc.ActiveView);\n    doc.Create.NewRoom(level2, new UV(0,0));\n}"}
{"prompt":"Create a circular room with a 5m radius on Level 2.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif(level2 != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Arc.Create(XYZ.Zero, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY));\n    doc.Create.NewRoomBoundaryLines(level2.GetPlane(), profile, doc.ActiveView);\n    doc.Create.NewRoom(level2, new UV(0,0));\n}"}
{"prompt":"Inserta barandales a ambos lados de una escalera existente.","completion":"Stairs stairs = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Stairs).FirstOrDefault() as Stairs;\nRailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nif(stairs != null && railingType != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Stringer);\n}"}
{"prompt":"Insert railings on both sides of an existing staircase.","completion":"Stairs stairs = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Stairs).FirstOrDefault() as Stairs;\nRailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nif(stairs != null && railingType != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Stringer);\n}"}
{"prompt":"Importa un topográfico georreferenciado desde LandXML.","completion":"LandXMLImportOptions options = new LandXMLImportOptions();\noptions.XYLengthUnit = XYLengthUnit.Meter;\ndoc.Import(@\"C:\\CAD\\site.xml\", options);"}
{"prompt":"Import a georeferenced survey from LandXML.","completion":"LandXMLImportOptions options = new LandXMLImportOptions();\noptions.XYLengthUnit = XYLengthUnit.Meter;\ndoc.Import(@\"C:\\CAD\\site.xml\", options);"}
{"prompt":"Crea una vista de plano de plafón reflejado para el Nivel 1.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    rcp.Name = \"Plano de Plafón Nivel 1\";\n}"}
{"prompt":"Create a Reflected Ceiling Plan view for Level 1.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    rcp.Name = \"Level 1 Ceiling Plan\";\n}"}
{"prompt":"Agrega un plano de referencia horizontal llamado 'Centro Eje A'.","completion":"ReferencePlane rp = ReferencePlane.Create(doc, XYZ.Zero, XYZ.BasisX, XYZ.BasisZ, doc.ActiveView);\nrp.Name = \"Centro Eje A\";"}
{"prompt":"Add a horizontal reference plane named 'Centerline A'.","completion":"ReferencePlane rp = ReferencePlane.Create(doc, XYZ.Zero, XYZ.BasisX, XYZ.BasisZ, doc.ActiveView);\nrp.Name = \"Centerline A\";"}
{"prompt":"Duplica el nivel 1 con un desfase de 3m y llámalo Mezzanine.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(level1 != null)\n{\n    double newElevation = level1.Elevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Duplicate level 1 with a 3m offset and name it Mezzanine.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(level1 != null)\n{\n    double newElevation = level1.Elevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Crea una rejilla de muros cortina 4×4 en un plano.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    for(int i = 1; i < 4; i++) { grid.AddGridLine(true, new XYZ(i,0,0), false); }\n    for(int j = 1; j < 4; j++) { grid.AddGridLine(false, new XYZ(0,0,j), false); }\n}"}
{"prompt":"Create a 4x4 curtain wall grid on a plane.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    for(int i = 1; i < 4; i++) { grid.AddGridLine(true, new XYZ(i,0,0), false); }\n    for(int j = 1; j < 4; j++) { grid.AddGridLine(false, new XYZ(0,0,j), false); }\n}"}
{"prompt":"Etiqueta todas las habitaciones con su área.","completion":"var rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType();\nforeach(Room room in rooms)\n{\n    if(room.Location != null)\n    {\n        doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(room.Location.Point.X, room.Location.Point.Y), doc.ActiveView.Id);\n    }\n}"}
{"prompt":"Tag all rooms with their area.","completion":"var rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType();\nforeach(Room room in rooms)\n{\n    if(room.Location != null)\n    {\n        doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(room.Location.Point.X, room.Location.Point.Y), doc.ActiveView.Id);\n    }\n}"}
{"prompt":"Exporta una lista de materiales a un archivo de texto.","completion":"var materials = new FilteredElementCollector(doc).OfClass(typeof(Material));\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(\"C:\\\\Exports\\\\materials.txt\"))\n{\n    foreach(Material m in materials)\n    {\n        writer.WriteLine(m.Name);\n    }\n}"}
{"prompt":"Export a list of materials to a text file.","completion":"var materials = new FilteredElementCollector(doc).OfClass(typeof(Material));\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(\"C:\\\\Exports\\\\materials.txt\"))\n{\n    foreach(Material m in materials)\n    {\n        writer.WriteLine(m.Name);\n    }\n}"}
{"prompt":"Aísla temporalmente todos los muebles en la vista activa.","completion":"var furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nif(furnitureIds.Any())\n{\n    doc.ActiveView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Temporarily isolate all furniture in the active view.","completion":"var furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nif(furnitureIds.Any())\n{\n    doc.ActiveView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Coloca conductos redondos de 200mm entre los puntos X e Y.","completion":"DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).FirstOrDefault(dt => dt.Shape == ConnectorProfileType.Round) as DuctType;\nMEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(st => st.SystemClassification == MEPSystemClassification.SupplyAir);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(ductType != null && systemType != null && level != null)\n{\n    Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, new XYZ(0,0,3), new XYZ(10,0,3));\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(200, UnitTypeId.Millimeters));\n}"}
{"prompt":"Place 200mm round ducts between points X and Y.","completion":"DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).FirstOrDefault(dt => dt.Shape == ConnectorProfileType.Round) as DuctType;\nMEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(st => st.SystemClassification == MEPSystemClassification.SupplyAir);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(ductType != null && systemType != null && level != null)\n{\n    Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, new XYZ(0,0,3), new XYZ(10,0,3));\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(200, UnitTypeId.Millimeters));\n}"}
{"prompt":"Crea un techo por extrusión con un perfil en arco.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nif(level != null && roofType != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n    ReferencePlane refPlane = ReferencePlane.Create(doc, new XYZ(0,0,level.Elevation), XYZ.BasisY, doc.ActiveView);\n    doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n}"}
{"prompt":"Create an extrusion roof with an arc profile.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nif(level != null && roofType != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n    ReferencePlane refPlane = ReferencePlane.Create(doc, new XYZ(0,0,level.Elevation), XYZ.BasisY, doc.ActiveView);\n    doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n}"}
{"prompt":"Genera una matriz de masas de 3x2 en el plano XY.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(level != null) {\n    for(int i=0; i<3; i++) {\n        for(int j=0; j<2; j++) {\n            using(Transaction t = new Transaction(doc, \"Create Mass\")) {\n                t.Start();\n                InPlaceElement mass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), level.Id);\n                // Create simple box geometry for the mass\n                mass.Commit();\n            }\n        }\n    }\n}"}
{"prompt":"Generate a 3x2 array of masses on the XY plane.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(level != null) {\n    for(int i=0; i<3; i++) {\n        for(int j=0; j<2; j++) {\n            using(Transaction t = new Transaction(doc, \"Create Mass\")) {\n                t.Start();\n                InPlaceElement mass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), level.Id);\n                // Create simple box geometry for the mass\n                mass.Commit();\n            }\n        }\n    }\n}"}
{"prompt":"Ajusta todas las ventanas para que tengan la altura del antepecho a 0.9m.","completion":"var windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters));\n}"}
{"prompt":"Adjust all windows to have a sill height of 0.9m.","completion":"var windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(UnitUtils.ConvertToInternalUnits(0.9, UnitTypeId.Meters));\n}"}
{"prompt":"Exporta todas las vistas 3D que empiecen con 'Exploded' a imágenes PNG.","completion":"var explodedViews = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Exploded\"));\nImageExportOptions options = new ImageExportOptions() { FilePath = @\"C:\\Exports\\\", ImageFileType = ImageFileType.PNG, ZoomType = ZoomFitType.FitToPage };\nforeach(View3D view in explodedViews)\n{\n    doc.ExportImage(options);\n}"}
{"prompt":"Export all 3D views starting with 'Exploded' to PNG images.","completion":"var explodedViews = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Exploded\"));\nImageExportOptions options = new ImageExportOptions() { FilePath = @\"C:\\Exports\\\", ImageFileType = ImageFileType.PNG, ZoomType = ZoomFitType.FitToPage };\nforeach(View3D view in explodedViews)\n{\n    doc.ExportImage(options);\n}"}
{"prompt":"Crea una vista de sección entre los puntos A y B.","completion":"XYZ pointA = new XYZ(0,0,0); XYZ pointB = new XYZ(10,10,0);\nLine line = Line.CreateBound(pointA, pointB);\nXYZ midPoint = (pointA + pointB) / 2;\nXYZ direction = (pointB - pointA).Normalize();\nBoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\nsectionBox.Min = -XYZ.BasisX * 5 - XYZ.BasisY * 1 - XYZ.BasisZ * 0;\nsectionBox.Max = XYZ.BasisX * 5 + XYZ.BasisY * 1 + XYZ.BasisZ * 10;\nTransform t = Transform.CreateRotationAtPoint(XYZ.BasisZ, direction.AngleOnPlaneTo(XYZ.BasisX, XYZ.BasisZ), midPoint);\nsectionBox.Transform = t;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\nViewSection.CreateSection(doc, vft.Id, sectionBox);"}
{"prompt":"Create a section view between points A and B.","completion":"XYZ pointA = new XYZ(0,0,0); XYZ pointB = new XYZ(10,10,0);\nLine line = Line.CreateBound(pointA, pointB);\nXYZ midPoint = (pointA + pointB) / 2;\nXYZ direction = (pointB - pointA).Normalize();\nBoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\nsectionBox.Min = -XYZ.BasisX * 5 - XYZ.BasisY * 1 - XYZ.BasisZ * 0;\nsectionBox.Max = XYZ.BasisX * 5 + XYZ.BasisY * 1 + XYZ.BasisZ * 10;\nTransform t = Transform.CreateRotationAtPoint(XYZ.BasisZ, direction.AngleOnPlaneTo(XYZ.BasisX, XYZ.BasisZ), midPoint);\nsectionBox.Transform = t;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\nViewSection.CreateSection(doc, vft.Id, sectionBox);"}
{"prompt":"Aplica aislamiento térmico de 25mm a todos los conductos de agua caliente.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\nif(insulationType != null && hotWaterSystem != null){\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == hotWaterSystem.Id);\n    foreach(Pipe p in pipes) PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Millimeters));\n}"}
{"prompt":"Apply 25mm thermal insulation to all hot water ducts.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\nif(insulationType != null && hotWaterSystem != null){\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == hotWaterSystem.Id);\n    foreach(Pipe p in pipes) PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Millimeters));\n}"}
{"prompt":"Genera una sombra en la vista 3D en una fecha y hora específicas.","completion":"View3D view3d = new FilteredElementCollector(doc).OfClass(typeof(View3D)).FirstOrDefault() as View3D;\nif(view3d != null && view3d.CanEnableSunAndShadows()){\n    SunAndShadowSettings sunSettings = view3d.SunAndShadowSettings;\n    sunSettings.SunAndShadowType = SunAndShadowType.Still;\n    sunSettings.SetTimeAndDate(new DateTime(DateTime.Now.Year, 6, 21, 12, 0, 0));\n    view3d.ShadowsOn = true;\n}"}
{"prompt":"Generate a shadow in the 3D view at a specific date and time.","completion":"View3D view3d = new FilteredElementCollector(doc).OfClass(typeof(View3D)).FirstOrDefault() as View3D;\nif(view3d != null && view3d.CanEnableSunAndShadows()){\n    SunAndShadowSettings sunSettings = view3d.SunAndShadowSettings;\n    sunSettings.SunAndShadowType = SunAndShadowType.Still;\n    sunSettings.SetTimeAndDate(new DateTime(DateTime.Now.Year, 6, 21, 12, 0, 0));\n    view3d.ShadowsOn = true;\n}"}
{"prompt":"Crea un muro escalonado con tres alturas diferentes.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(level != null && wallType != null){\n    Line line1 = Line.CreateBound(new XYZ(0,0,0), new XYZ(5,0,0));\n    Line line2 = Line.CreateBound(new XYZ(5,0,0), new XYZ(10,0,0));\n    Line line3 = Line.CreateBound(new XYZ(10,0,0), new XYZ(15,0,0));\n    Wall.Create(doc, line1, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0, false, false);\n    Wall.Create(doc, line2, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);\n    Wall.Create(doc, line3, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), 0, false, false);\n}"}
{"prompt":"Create a stepped wall with three different heights.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(level != null && wallType != null){\n    Line line1 = Line.CreateBound(new XYZ(0,0,0), new XYZ(5,0,0));\n    Line line2 = Line.CreateBound(new XYZ(5,0,0), new XYZ(10,0,0));\n    Line line3 = Line.CreateBound(new XYZ(10,0,0), new XYZ(15,0,0));\n    Wall.Create(doc, line1, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters), 0, false, false);\n    Wall.Create(doc, line2, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);\n    Wall.Create(doc, line3, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), 0, false, false);\n}"}
{"prompt":"Crea un muro genérico de 200mm desde (0,0,0) hasta (5,5,0) en el Nivel 2.","completion":"XYZ p1 = new XYZ(0, 0, 0);\nXYZ p2 = new XYZ(5, 5, 0);\nLine wallCurve = Line.CreateBound(p1, p2);\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(x => x.Name == \"Generic - 200mm\");\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(x => x.Name == \"Level 2\");\nif(wallType != null && level != null)\n{\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, true);\n}"}
{"prompt":"Create a Generic 200mm wall from (0,0,0) to (5,5,0) on Level 2.","completion":"XYZ p1 = new XYZ(0, 0, 0);\nXYZ p2 = new XYZ(5, 5, 0);\nLine wallCurve = Line.CreateBound(p1, p2);\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(x => x.Name == \"Generic - 200mm\");\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(x => x.Name == \"Level 2\");\nif(wallType != null && level != null)\n{\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, true);\n}"}
{"prompt":"Crea un suelo con las esquinas en (0,0,0), (5,0,0), (5,5,0) y (0,5,0).","completion":"List<XYZ> points = new List<XYZ> { new XYZ(0,0,0), new XYZ(5,0,0), new XYZ(5,5,0), new XYZ(0,5,0) };\nCurveLoop profile = new CurveLoop();\nfor (int i = 0; i < points.Count; i++)\n{\n    profile.Append(Line.CreateBound(points[i], points[(i + 1) % points.Count]));\n}\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(floorType != null && level != null)\n{\n    Floor.Create(doc, new List<CurveLoop> { profile }, floorType.Id, level.Id);\n}"}
{"prompt":"Create a floor with corners at (0,0,0), (5,0,0), (5,5,0), and (0,5,0).","completion":"List<XYZ> points = new List<XYZ> { new XYZ(0,0,0), new XYZ(5,0,0), new XYZ(5,5,0), new XYZ(0,5,0) };\nCurveLoop profile = new CurveLoop();\nfor (int i = 0; i < points.Count; i++)\n{\n    profile.Append(Line.CreateBound(points[i], points[(i + 1) % points.Count]));\n}\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(floorType != null && level != null)\n{\n    Floor.Create(doc, new List<CurveLoop> { profile }, floorType.Id, level.Id);\n}"}
{"prompt":"Crea un plafón usando el contorno de una habitación llamada 'Oficina 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Oficina 101\") as Room;\nif(room != null)\n{\n    CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\n    if(ceilingType != null)\n    {\n        IList<IList<BoundarySegment>> segments = room.GetBoundarySegments(new SpatialElementBoundaryOptions());\n        if(segments.Count > 0)\n        {\n            CurveLoop profile = new CurveLoop();\n            foreach(BoundarySegment seg in segments[0])\n            {\n                profile.Append(seg.GetCurve());\n            }\n            Ceiling.Create(doc, new List<CurveLoop>{ profile }, ceilingType.Id, room.LevelId);\n        }\n    }\n}"}
{"prompt":"Create a ceiling using the boundary of a room named 'Office 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 101\") as Room;\nif(room != null)\n{\n    CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\n    if(ceilingType != null)\n    {\n        IList<IList<BoundarySegment>> segments = room.GetBoundarySegments(new SpatialElementBoundaryOptions());\n        if(segments.Count > 0)\n        {\n            CurveLoop profile = new CurveLoop();\n            foreach(BoundarySegment seg in segments[0])\n            {\n                profile.Append(seg.GetCurve());\n            }\n            Ceiling.Create(doc, new List<CurveLoop>{ profile }, ceilingType.Id, room.LevelId);\n        }\n    }\n}"}
{"prompt":"Obtén el ID del elemento seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento\");\nif(pickedRef != null)\n{\n    ElementId selectedId = pickedRef.ElementId;\n    TaskDialog.Show(\"Elemento Seleccionado\", \"El ID es: \" + selectedId.ToString());\n}"}
{"prompt":"Get the ID of the selected element.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element\");\nif(pickedRef != null)\n{\n    ElementId selectedId = pickedRef.ElementId;\n    TaskDialog.Show(\"Selected Element\", \"The ID is: \" + selectedId.ToString());\n}"}
{"prompt":"Aísla temporalmente todas las columnas estructurales en la vista activa.","completion":"var columns = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().ToElementIds();\nif(columns.Any())\n{\n    doc.ActiveView.IsolateElementsTemporary(columns);\n}"}
{"prompt":"Temporarily isolate all structural columns in the active view.","completion":"var columns = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().ToElementIds();\nif(columns.Any())\n{\n    doc.ActiveView.IsolateElementsTemporary(columns);\n}"}
{"prompt":"Crea un eje horizontal de 20 metros de largo.","completion":"Line gridLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters), 0, 0));\nGrid.Create(doc, gridLine);"}
{"prompt":"Create a 20-meter long horizontal grid line.","completion":"Line gridLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters), 0, 0));\nGrid.Create(doc, gridLine);"}
{"prompt":"Añade el prefijo 'ARQ-' a todos los nombres de materiales.","completion":"string prefix = \"ARQ-\";\nvar materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).ToElements();\nforeach(Material mat in materials)\n{\n    if(!mat.Name.StartsWith(prefix))\n    {\n        mat.Name = prefix + mat.Name;\n    }\n}"}
{"prompt":"Add the prefix 'ARQ-' to all material names.","completion":"string prefix = \"ARQ-\";\nvar materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).ToElements();\nforeach(Material mat in materials)\n{\n    if(!mat.Name.StartsWith(prefix))\n    {\n        mat.Name = prefix + mat.Name;\n    }\n}"}
{"prompt":"Añade el prefijo 'V-' a todas las vistas de planta.","completion":"string prefix = \"V-\";\nvar planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.IsTemplate && !view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Add the prefix 'V-' to all plan views.","completion":"string prefix = \"V-\";\nvar planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.IsTemplate && !view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Quita el prefijo 'TEMP-' de todas las familias cargadas.","completion":"string oldPrefix = \"TEMP-\";\nvar families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>();\nforeach(Family fam in families)\n{\n    if(fam.Name.StartsWith(oldPrefix))\n    {\n        fam.Name = fam.Name.Substring(oldPrefix.Length);\n    }\n}"}
{"prompt":"Remove the prefix 'TEMP-' from all loaded families.","completion":"string oldPrefix = \"TEMP-\";\nvar families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>();\nforeach(Family fam in families)\n{\n    if(fam.Name.StartsWith(oldPrefix))\n    {\n        fam.Name = fam.Name.Substring(oldPrefix.Length);\n    }\n}"}
{"prompt":"Asigna todos los ejes y niveles al workset '01_SHARED_GRIDS_LEVELS'.","completion":"if(doc.IsWorkshared)\n{\n    string worksetName = \"01_SHARED_GRIDS_LEVELS\";\n    Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == worksetName);\n    if(workset != null)\n    {\n        var gridIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Grids).ToElementIds();\n        var levelIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Levels).ToElementIds();\n        var allIds = new List<ElementId>();\n        allIds.AddRange(gridIds);\n        allIds.AddRange(levelIds);\n        \n        if(allIds.Any())\n        {\n            WorksharingUtils.ChangeWorkset(doc, allIds, workset.Id);\n            TaskDialog.Show(\"Éxito\", $\"Se movieron {allIds.Count} elementos al workset {worksetName}.\");\n        }\n    }\n    else\n    {\n        TaskDialog.Show(\"Error\", $\"No se encontró el workset '{worksetName}'.\");\n    }\n}"}
{"prompt":"Move all grids and levels to the '01_SHARED_GRIDS_LEVELS' workset.","completion":"if(doc.IsWorkshared)\n{\n    string worksetName = \"01_SHARED_GRIDS_LEVELS\";\n    Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == worksetName);\n    if(workset != null)\n    {\n        var gridIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Grids).ToElementIds();\n        var levelIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Levels).ToElementIds();\n        var allIds = new List<ElementId>();\n        allIds.AddRange(gridIds);\n        allIds.AddRange(levelIds);\n        \n        if(allIds.Any())\n        {\n            WorksharingUtils.ChangeWorkset(doc, allIds, workset.Id);\n            TaskDialog.Show(\"Success\", $\"Moved {allIds.Count} elements to the {worksetName} workset.\");\n        }\n    }\n    else\n    {\n        TaskDialog.Show(\"Error\", $\"Workset '{worksetName}' not found.\");\n    }\n}"}
{"prompt":"Exporta las tablas que empiezan con 'CUAN_' a CSV en la carpeta 'C:\\Exports'.","completion":"string prefix = \"CUAN_\";\nstring exportPath = @\"C:\\Exports\\\";\nif(!Directory.Exists(exportPath)) Directory.CreateDirectory(exportPath);\nvar schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => !vs.IsTemplate && vs.Name.StartsWith(prefix));\nViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\nforeach(ViewSchedule schedule in schedules)\n{\n    string fileName = schedule.Name + \".csv\";\n    schedule.Export(exportPath, fileName, options);\n}"}
{"prompt":"Export schedules starting with 'QTY_' to CSV in the 'C:\\Exports' folder.","completion":"string prefix = \"QTY_\";\nstring exportPath = @\"C:\\Exports\\\";\nif(!Directory.Exists(exportPath)) Directory.CreateDirectory(exportPath);\nvar schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => !vs.IsTemplate && vs.Name.StartsWith(prefix));\nViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\nforeach(ViewSchedule schedule in schedules)\n{\n    string fileName = schedule.Name + \".csv\";\n    schedule.Export(exportPath, fileName, options);\n}"}
{"prompt":"Crea una losa de cimentación con un grosor de 500mm.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundationLevel != null && slabType != null)\n{\n    FloorType newSlabType = slabType.Duplicate(\"Slab 500mm\") as FloorType;\n    CompoundStructure cs = newSlabType.GetCompoundStructure();\n    if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(500, UnitTypeId.Millimeters));\n    newSlabType.SetCompoundStructure(cs);\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n    Floor.Create(doc, new List<CurveLoop>{profile}, newSlabType.Id, foundation.Id);\n}"}
{"prompt":"Create a foundation slab with a thickness of 500mm.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundationLevel != null && slabType != null)\n{\n    FloorType newSlabType = slabType.Duplicate(\"Slab 500mm\") as FloorType;\n    CompoundStructure cs = newSlabType.GetCompoundStructure();\n    if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(500, UnitTypeId.Millimeters));\n    newSlabType.SetCompoundStructure(cs);\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n    Floor.Create(doc, new List<CurveLoop>{profile}, newSlabType.Id, foundation.Id);\n}"}
{"prompt":"Genera un reporte con el área de todas las habitaciones del proyecto.","completion":"StringBuilder report = new StringBuilder(\"Reporte de Áreas de Habitaciones:\\n\");\nvar rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>();\nforeach(Room room in rooms)\n{\n    double area = room.get_Parameter(BuiltInParameter.ROOM_AREA).AsDouble();\n    report.AppendLine($\"- {room.Name}: {UnitUtils.ConvertFromInternalUnits(area, UnitTypeId.SquareMeters):F2} m²\");\n}\nTaskDialog.Show(\"Reporte de Áreas\", report.ToString());"}
{"prompt":"Generate a report with the area of all rooms in the project.","completion":"StringBuilder report = new StringBuilder(\"Room Area Report:\\n\");\nvar rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>();\nforeach(Room room in rooms)\n{\n    double area = room.get_Parameter(BuiltInParameter.ROOM_AREA).AsDouble();\n    report.AppendLine($\"- {room.Name}: {UnitUtils.ConvertFromInternalUnits(area, UnitTypeId.SquareMeters):F2} m²\");\n}\nTaskDialog.Show(\"Area Report\", report.ToString());"}
{"prompt":"Crea un techo por extrusión con un perfil en arco.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nif(level != null && roofType != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n    ReferencePlane refPlane = ReferencePlane.Create(doc, new XYZ(0,0,level.Elevation), XYZ.BasisY, doc.ActiveView);\n    doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n}"}
{"prompt":"Create an extrusion roof with an arc profile.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nif(level != null && roofType != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n    ReferencePlane refPlane = ReferencePlane.Create(doc, new XYZ(0,0,level.Elevation), XYZ.BasisY, doc.ActiveView);\n    doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n}"}
{"prompt":"Oculta todos los elementos de anotación en la vista activa.","completion":"var annotationCategories = new List<BuiltInCategory>\n{\n    BuiltInCategory.OST_GenericAnnotation,\n    BuiltInCategory.OST_TextNotes,\n    BuiltInCategory.OST_Tags,\n    BuiltInCategory.OST_Dimensions\n};\nvar multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\nvar elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\nif(elementsToHide.Any())\n{\n    doc.ActiveView.HideElements(elementsToHide);\n}"}
{"prompt":"Hide all annotation elements in the active view.","completion":"var annotationCategories = new List<BuiltInCategory>\n{\n    BuiltInCategory.OST_GenericAnnotation,\n    BuiltInCategory.OST_TextNotes,\n    BuiltInCategory.OST_Tags,\n    BuiltInCategory.OST_Dimensions\n};\nvar multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\nvar elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\nif(elementsToHide.Any())\n{\n    doc.ActiveView.HideElements(elementsToHide);\n}"}
{"prompt":"Encuentra todas las vistas que no tienen una plantilla de vista asignada.","completion":"var viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View))\n    .Cast<View>()\n    .Where(v => v.CanBePrinted() && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId)\n    .ToList();\nStringBuilder sb = new StringBuilder(\"Vistas sin plantilla:\\n\");\nforeach(var view in viewsWithoutTemplate)\n{\n    sb.AppendLine(view.Name);\n}\nTaskDialog.Show(\"Auditoría de Vistas\", sb.ToString());"}
{"prompt":"Find all views that do not have a view template assigned.","completion":"var viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View))\n    .Cast<View>()\n    .Where(v => v.CanBePrinted() && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId)\n    .ToList();\nStringBuilder sb = new StringBuilder(\"Views without template:\\n\");\nforeach(var view in viewsWithoutTemplate)\n{\n    sb.AppendLine(view.Name);\n}\nTaskDialog.Show(\"View Audit\", sb.ToString());"}
{"prompt":"Establece el parámetro 'Marca' de todos los muros seleccionados a 'M-01'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any())\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall)\n        {\n            Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n            if(markParam != null) markParam.Set(\"M-01\");\n        }\n    }\n}"}
{"prompt":"Set the 'Mark' parameter of all selected walls to 'W-01'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any())\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall)\n        {\n            Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n            if(markParam != null) markParam.Set(\"W-01\");\n        }\n    }\n}"}
{"prompt":"Crea 10 worksets de arquitectura.","completion":"if(doc.IsWorkshared)\n{\n    var worksetNames = new List<string> { \"TAD_ARQ_MAM\", \"TAD_ARQ_ACA\", \"TAD_ARQ_PLA\", \"TAD_ARQ_PSO\", \"TAD_ARQ_HRE\", \"TAD_ARQ_ALU\", \"TAD_ARQ_CAR\", \"TAD_ARQ_MOB\", \"TAD_ARQ_PLO\", \"TAD_ARQ_EXT\" };\n    foreach(string name in worksetNames)\n    {\n        Workset.Create(doc, name);\n    }\n}"}
{"prompt":"Create 10 architectural worksets.","completion":"if(doc.IsWorkshared)\n{\n    var worksetNames = new List<string> { \"TAD_ARQ_WALLS\", \"TAD_ARQ_FINISHES\", \"TAD_ARQ_CEILINGS\", \"TAD_ARQ_FLOORS\", \"TAD_ARQ_RAILINGS\", \"TAD_ARQ_WINDOWS\", \"TAD_ARQ_CARPENTRY\", \"TAD_ARQ_FURNITURE\", \"TAD_ARQ_PLUMBING\", \"TAD_ARQ_EXTERIOR\" };\n    foreach(string name in worksetNames)\n    {\n        Workset.Create(doc, name);\n    }\n}"}
{"prompt":"Cambia el nombre de todas las tablas que contienen 'Muros' por 'Cuantificación de Muros'.","completion":"var schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"Muros\"));\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"Muros\", \"Cuantificación de Muros\");\n}"}
{"prompt":"Rename all schedules containing 'Walls' to 'Wall Quantity Takeoff'.","completion":"var schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"Walls\"));\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"Walls\", \"Wall Quantity Takeoff\");\n}"}
{"prompt":"Encuentra todas las familias de anotación y muestra sus nombres.","completion":"var annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation);\nStringBuilder sb = new StringBuilder(\"Familias de Anotación:\\n\");\nforeach(var fam in annotationFamilies)\n{\n    sb.AppendLine(fam.Name);\n}\nTaskDialog.Show(\"Familias de Anotación\", sb.ToString());"}
{"prompt":"Find all annotation families and display their names.","completion":"var annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation);\nStringBuilder sb = new StringBuilder(\"Annotation Families:\\n\");\nforeach(var fam in annotationFamilies)\n{\n    sb.AppendLine(fam.Name);\n}\nTaskDialog.Show(\"Annotation Families\", sb.ToString());"}
{"prompt":"Crea un tipo de cota lineal con texto rojo.","completion":"DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\nif(linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"Cota Roja\") as DimensionType;\n    if(newDimType != null)\n    {\n        newDimType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(255,0,0).GetElementId());\n    }\n}"}
{"prompt":"Create a linear dimension type with red text.","completion":"DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\nif(linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"Red Dimension\") as DimensionType;\n    if(newDimType != null)\n    {\n        newDimType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(255,0,0).GetElementId());\n    }\n}"}
{"prompt":"Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif(furnitureCat != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Set the visibility of the 'Furniture' category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif(furnitureCat != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Éxito\", $\"Se eliminaron {unusedWallTypes.Count} tipos de muro no utilizados.\");\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Success\", $\"Deleted {unusedWallTypes.Count} unused wall types.\");\n}"}
{"prompt":"Crea una nueva hoja A1 y coloca la vista 'Planta Baja' en ella.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A1\")) as FamilySymbol;\nView viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Planta Baja\") as View;\nif (titleBlock != null && viewToPlace != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Planta Arquitectónica\";\n    newSheet.SheetNumber = \"A-101\";\n    if (Viewport.CanAddViewToSheet(doc, newSheet.Id, viewToPlace.Id))\n    {\n        Viewport.Create(doc, newSheet.Id, viewToPlace.Id, new XYZ(0.5, 0.5, 0));\n    }\n}"}
{"prompt":"Create a new A1 sheet and place the 'Ground Floor' view on it.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A1\")) as FamilySymbol;\nView viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Ground Floor\") as View;\nif (titleBlock != null && viewToPlace != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Architectural Plan\";\n    newSheet.SheetNumber = \"A-101\";\n    if (Viewport.CanAddViewToSheet(doc, newSheet.Id, viewToPlace.Id))\n    {\n        Viewport.Create(doc, newSheet.Id, viewToPlace.Id, new XYZ(0.5, 0.5, 0));\n    }\n}"}
{"prompt":"Reporta el número total de advertencias en el proyecto.","completion":"int warningCount = doc.GetWarnings().Count;\nTaskDialog.Show(\"Auditoría de Proyecto\", $\"El proyecto tiene {warningCount} advertencias.\");"}
{"prompt":"Report the total number of warnings in the project.","completion":"int warningCount = doc.GetWarnings().Count;\nTaskDialog.Show(\"Project Audit\", $\"The project has {warningCount} warnings.\");"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-60' basado en un tipo existente, y asigna '60 min' al parámetro 'Fire Rating'.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"Puerta RF-60\") as FamilySymbol;\n    Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n    if (fireRatingParam != null && !fireRatingParam.IsReadOnly)\n    {\n        fireRatingParam.Set(\"60 min\");\n    }\n}"}
{"prompt":"Create a new door type named 'FR-60 Door' based on an existing type, and set the 'Fire Rating' parameter to '60 min'.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"FR-60 Door\") as FamilySymbol;\n    Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n    if (fireRatingParam != null && !fireRatingParam.IsReadOnly)\n    {\n        fireRatingParam.Set(\"60 min\");\n    }\n}"}
{"prompt":"Mueve todos los elementos seleccionados 3 metros hacia arriba.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any())\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Move all selected elements 3 meters up.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any())\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Encuentra todos los muros que no están asociados a ningún nivel.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nvar unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToElements();\nTaskDialog.Show(\"Muros sin Nivel\", $\"Se encontraron {unassignedWalls.Count} muros sin un nivel base asociado.\");"}
{"prompt":"Find all walls that are not associated with any level.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nvar unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToElements();\nTaskDialog.Show(\"Unassigned Walls\", $\"Found {unassignedWalls.Count} walls without an associated base level.\");"}
{"prompt":"Exporta todos los tipos de familia de la categoría 'Mobiliario' a un archivo de texto.","completion":"string path = @\"C:\\RevitExports\\FurnitureTypes.txt\";\nvar furnitureTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType();\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(path))\n{\n    foreach(Element type in furnitureTypes)\n    {\n        writer.WriteLine(type.Name);\n    }\n}"}
{"prompt":"Export all family types from the 'Furniture' category to a text file.","completion":"string path = @\"C:\\RevitExports\\FurnitureTypes.txt\";\nvar furnitureTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType();\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(path))\n{\n    foreach(Element type in furnitureTypes)\n    {\n        writer.WriteLine(type.Name);\n    }\n}"}
{"prompt":"Copia todos los muros del Nivel 1 al Nivel 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif (level1 != null && level2 != null)\n{\n    var wallsToCopy = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level1.Id).ToElementIds();\n    double elevationDiff = level2.Elevation - level1.Elevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n}"}
{"prompt":"Copy all walls from Level 1 to Level 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif (level1 != null && level2 != null)\n{\n    var wallsToCopy = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level1.Id).ToElementIds();\n    double elevationDiff = level2.Elevation - level1.Elevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n}"}
{"prompt":"Crea un nuevo tipo de texto de 3mm de color azul.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"3mm Azul\") as TextNoteType;\n    newType.get_Parameter(BuiltInParameter.TEXT_SIZE).Set(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Millimeters));\n    newType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(0,0,255).GetElementId());\n}"}
{"prompt":"Create a new text type, 3mm in size and blue in color.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"3mm Blue\") as TextNoteType;\n    newType.get_Parameter(BuiltInParameter.TEXT_SIZE).Set(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Millimeters));\n    newType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(0,0,255).GetElementId());\n}"}
{"prompt":"Encuentra todos los muros que midan más de 3 metros de alto.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nvar tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds();\nTaskDialog.Show(\"Resultado\", $\"Se encontraron {tallWalls.Count} muros con más de 3m de altura.\");"}
{"prompt":"Find all walls taller than 3 meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nvar tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds();\nTaskDialog.Show(\"Result\", $\"Found {tallWalls.Count} walls taller than 3m.\");"}
{"prompt":"Selecciona un muro y encuentra todas las tuberías que lo atraviesan.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nElement wall = doc.GetElement(wallRef);\nif(wall != null)\n{\n    ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n    var intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds();\n    TaskDialog.Show(\"Colisiones\", $\"El muro intersecta con {intersectingPipes.Count} tuberías.\");\n    if(intersectingPipes.Any()) uidoc.Selection.SetElementIds(intersectingPipes);\n}"}
{"prompt":"Select a wall and find all pipes that pass through it.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\nElement wall = doc.GetElement(wallRef);\nif(wall != null)\n{\n    ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n    var intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds();\n    TaskDialog.Show(\"Clashes\", $\"The wall intersects with {intersectingPipes.Count} pipes.\");\n    if(intersectingPipes.Any()) uidoc.Selection.SetElementIds(intersectingPipes);\n}"}
{"prompt":"Crea una nota de texto que apunte al elemento seleccionado y diga 'REVISAR CLASH'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference targetRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\nif(targetRef != null)\n{\n    XYZ textLocation = uidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n    TextNoteOptions opts = new TextNoteOptions() { HorizontalAlignment = HorizontalAlignment.Left };\n    \n    TextNote note = TextNote.Create(doc, doc.ActiveView.Id, textLocation, \"REVISAR CLASH\", opts);\n    note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L, targetRef.GlobalPoint);\n}"}
{"prompt":"Create a text note pointing to the selected element that says 'REVIEW CLASH'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference targetRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\nif(targetRef != null)\n{\n    XYZ textLocation = uidoc.Selection.PickPoint(\"Choose the text location\");\n    TextNoteOptions opts = new TextNoteOptions() { HorizontalAlignment = HorizontalAlignment.Left };\n    \n    TextNote note = TextNote.Create(doc, doc.ActiveView.Id, \"REVIEW CLASH\", textLocation, opts);\n    note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L, targetRef.GlobalPoint);\n}"}
{"prompt":"Oculta todos los muros que sean más cortos de 2 metros.","completion":"double lengthThreshold = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nvar walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\nList<ElementId> shortWallIds = new List<ElementId>();\n\nforeach(Wall wall in walls)\n{\n    double length = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n    if(length < lengthThreshold)\n    {\n        shortWallIds.Add(wall.Id);\n    }\n}\n\nif(shortWallIds.Any())\n{\n    doc.ActiveView.HideElements(shortWallIds);\n    TaskDialog.Show(\"Resultado\", $\"Se ocultaron {shortWallIds.Count} muros cortos.\");\n}"}
{"prompt":"Hide all walls shorter than 2 meters.","completion":"double lengthThreshold = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nvar walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\nList<ElementId> shortWallIds = new List<ElementId>();\n\nforeach(Wall wall in walls)\n{\n    double length = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n    if(length < lengthThreshold)\n    {\n        shortWallIds.Add(wall.Id);\n    }\n}\n\nif(shortWallIds.Any())\n{\n    doc.ActiveView.HideElements(shortWallIds);\n    TaskDialog.Show(\"Result\", $\"Hid {shortWallIds.Count} short walls.\");\n}"}
{"prompt":"Crea una viga estructural entre (0,0,0) y (5,0,0) en el Nivel 1.","completion":"XYZ start = new XYZ(0, 0, 0);\nXYZ end = new XYZ(5, 0, 0);\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault();\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nif(beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Create a structural beam between (0,0,0) and (5,0,0) on Level 1.","completion":"XYZ start = new XYZ(0, 0, 0);\nXYZ end = new XYZ(5, 0, 0);\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault();\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nif(beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Crea una cortina mural rectangular del Nivel 1 al Nivel 2 entre (0,0) y (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Create a rectangular curtain wall from Level 1 to Level 2 between (0,0) and (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Añade rejillas U y V cada 2 m a un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Add U and V gridlines every 2m to a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Carga la familia 'LightingFixture.rfa' e inserta una instancia en coordenadas (2,2,3) en Nivel 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Load the 'LightingFixture.rfa' family and insert an instance at (2,2,3) on Level 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Crea un techo esquemático rectangular en 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Create a schematic rectangular roof at 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Genera una losa de cimentación de 1m de espesor.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Create a 1m thick structural footing slab.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Exporta todos los muros con 'Mark' a un archivo CSV.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Export all walls with a 'Mark' to a CSV file.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Create an intermediate level named 'Mezzanine' halfway between Level 1 and Level 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Cambia el material de todos los muros a 'Acero'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Acero\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Change the material of all walls to 'Steel'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Steel\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Éxito\", $\"Se eliminaron {unusedWallTypes.Count} tipos de muro no utilizados.\");\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Success\", $\"Deleted {unusedWallTypes.Count} unused wall types.\");\n}"}
{"prompt":"Añade una línea de rejilla U en un muro cortina a 3m desde el origen.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Add a U grid line to a curtain wall at 3m from the origin.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Añade una línea de rejilla V en un muro cortina a 2m de altura.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Add a V grid line to a curtain wall at 2m height.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Activa todos los segmentos en la primera línea de rejilla U.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Activate all segments on the first U grid line.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Añade montantes en la línea de rejilla U seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla de muro cortina\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Add mullions to the selected U grid line.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a curtain grid line\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Aísla la rejilla V seleccionada y añade solo un segmento.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla V\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Isolate the selected V gridline and add only one segment.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a V grid line\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Crea una nueva fase 'Fase 3 - Ejecución'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Fase 3 - Ejecución\";"}
{"prompt":"Create a new phase 'Phase 3 - Execution'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Phase 3 - Execution\";"}
{"prompt":"Asigna la demolición de los muros seleccionados a la 'Fase 3 - Ejecución'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Fase 3 - Ejecución\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Assign the demolition of selected walls to 'Phase 3 - Execution'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Phase 3 - Execution\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Cambia el primer tipo de muro curvo a un tipo estructural.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curved);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Change the first curved wall type to a structural type.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curtain);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Cambia el material de los paneles de muro cortina a 'Vidrio' si no tienen material.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Set curtain panel material to 'Glass' if unassigned.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 200mm' y nómbralo 'Muro_Dibujo'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Genérico - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Muro_Dibujo\");"}
{"prompt":"Duplicate wall type 'Generic - 200mm' and name it 'Drawing_Wall'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Generic - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Drawing_Wall\");"}
{"prompt":"Exporta los IDs y las elevaciones de los niveles a un archivo CSV.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Export level IDs and elevations to a CSV file.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Elimina todos los montantes (mullions) desbloqueados de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Delete all unlocked mullions from a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Crea un nuevo tipo de muro llamado 'Muro Genérico - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Muro Genérico - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Create a new wall type named 'Generic Wall - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Generic Wall - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Change the type of all selected walls to 'Exterior Wall - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Exterior Wall - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Crea una nueva hoja con el nombre 'Planos de Planta'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Planos de Planta\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Create a new sheet with the name 'Floor Plans'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Floor Plans\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Coloca la vista 'Nivel 1' en la hoja 'Planos de Planta' en el centro.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Planos de Planta\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Nivel 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Place the 'Level 1' view on the 'Floor Plans' sheet at its center.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Floor Plans\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Level 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Establece el nivel de detalle de la vista activa a 'Fino'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Set the detail level of the active view to 'Fine'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Renombrar el nivel 'Nivel 1' a 'Planta Baja'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nif(levelToRename != null) levelToRename.Name = \"Planta Baja\";"}
{"prompt":"Rename the level 'Level 1' to 'Ground Floor'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nif(levelToRename != null) levelToRename.Name = \"Ground Floor\";"}
{"prompt":"Crea un pilar estructural con una sección de 300x300mm en (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Create a structural column with a 300x300mm section at (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Alinea todos los muros con el eje '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Align all walls to grid '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Crea una masa in-place.","completion":"using (Transaction t = new Transaction(doc, \"Crear Masa In-Place\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Create an in-place mass.","completion":"using (Transaction t = new Transaction(doc, \"Create In-Place Mass\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Aplica un material llamado 'Hormigón in situ' a todos los suelos.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Hormigón in situ\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Apply a material named 'Cast-in-place Concrete' to all floors.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Cast-in-place Concrete\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Borra todos los grupos del modelo.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Delete all groups from the model.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Crea una nueva hoja y nómbrala usando el número de la siguiente hoja disponible.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Create a new sheet and name it using the next available sheet number.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Rota la vista activa 90 grados.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Rotate the active view by 90 degrees.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Crea una vista de detalle (callout) que siga la forma de un polígono.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Create a detail callout view that follows the shape of a polygon.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Crea una masa conceptual cónica.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Create a conical conceptual mass.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Aplica un material a todas las capas de un tipo de muro.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Apply a material to all layers of a wall type.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Encuentra todos los elementos dentro de un 'Scope Box' específico.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zona A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Find all elements within a specific 'Scope Box'.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zone A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Crea una vista de plano estructural para el Nivel 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Plano Estructural Nivel 2\";\n}"}
{"prompt":"Create a structural plan view for Level 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Structural Plan Level 2\";\n}"}
{"prompt":"Cambia el color de la línea de todas las tuberías sanitarias a verde.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Change the line color of all sanitary pipes to green.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Oculta todos los elementos excepto los muros en la vista actual.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Hide all elements except walls in the current view.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Encuentra y selecciona todas las familias no utilizadas en el proyecto.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Find and select all unused families in the project.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Exporta un listado de todas las vistas y sus plantillas aplicadas a CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Export a list of all views and their applied templates to CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Crea una cortina mural rectangular del Nivel 1 al Nivel 2 entre (0,0) y (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Create a rectangular curtain wall from Level 1 to Level 2 between (0,0) and (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Añade rejillas U y V cada 2 m a un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Add U and V gridlines every 2m to a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Carga la familia 'LightingFixture.rfa' e inserta una instancia en coordenadas (2,2,3) en Nivel 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Load the 'LightingFixture.rfa' family and insert an instance at (2,2,3) on Level 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Crea un techo esquemático rectangular en 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Create a schematic rectangular roof at 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Genera una losa de cimentación de 1m de espesor.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Create a 1m thick structural footing slab.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Exporta todos los muros con 'Mark' a un archivo CSV.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Export all walls with a 'Mark' to a CSV file.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Create an intermediate level named 'Mezzanine' halfway between Level 1 and Level 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Cambia el material de todos los muros a 'Acero'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Acero\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Change the material of all walls to 'Steel'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Steel\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Éxito\", $\"Se eliminaron {unusedWallTypes.Count} tipos de muro no utilizados.\");\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Success\", $\"Deleted {unusedWallTypes.Count} unused wall types.\");\n}"}
{"prompt":"Añade una línea de rejilla U en un muro cortina a 3m desde el origen.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Add a U grid line to a curtain wall at 3m from the origin.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Añade una línea de rejilla V en un muro cortina a 2m de altura.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Add a V grid line to a curtain wall at 2m height.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Activa todos los segmentos en la primera línea de rejilla U.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Activate all segments on the first U grid line.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Añade montantes en la línea de rejilla U seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla de muro cortina\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Add mullions to the selected U grid line.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a curtain grid line\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Aísla la rejilla V seleccionada y añade solo un segmento.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla V\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Isolate the selected V gridline and add only one segment.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a V grid line\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Crea una nueva fase 'Fase 3 - Ejecución'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Fase 3 - Ejecución\";"}
{"prompt":"Create a new phase 'Phase 3 - Execution'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Phase 3 - Execution\";"}
{"prompt":"Asigna la demolición de los muros seleccionados a la 'Fase 3 - Ejecución'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Fase 3 - Ejecución\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Assign the demolition of selected walls to 'Phase 3 - Execution'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Phase 3 - Execution\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Cambia el primer tipo de muro curvo a un tipo estructural.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curved);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Change the first curved wall type to a structural type.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curtain);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Cambia el material de los paneles de muro cortina a 'Vidrio' si no tienen material.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Set curtain panel material to 'Glass' if unassigned.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 200mm' y nómbralo 'Muro_Dibujo'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Genérico - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Muro_Dibujo\");"}
{"prompt":"Duplicate wall type 'Generic - 200mm' and name it 'Drawing_Wall'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Generic - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Drawing_Wall\");"}
{"prompt":"Exporta los IDs y las elevaciones de los niveles a un archivo CSV.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Export level IDs and elevations to a CSV file.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Elimina todos los montantes (mullions) desbloqueados de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Delete all unlocked mullions from a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Crea un nuevo tipo de muro llamado 'Muro Genérico - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Muro Genérico - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Create a new wall type named 'Generic Wall - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Generic Wall - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Change the type of all selected walls to 'Exterior Wall - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Exterior Wall - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Crea una nueva hoja con el nombre 'Planos de Planta'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Planos de Planta\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Create a new sheet with the name 'Floor Plans'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Floor Plans\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Coloca la vista 'Nivel 1' en la hoja 'Planos de Planta' en el centro.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Planos de Planta\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Nivel 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Place the 'Level 1' view on the 'Floor Plans' sheet at its center.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Floor Plans\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Level 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Establece el nivel de detalle de la vista activa a 'Fino'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Set the detail level of the active view to 'Fine'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Renombrar el nivel 'Nivel 1' a 'Planta Baja'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nif(levelToRename != null) levelToRename.Name = \"Planta Baja\";"}
{"prompt":"Rename the level 'Level 1' to 'Ground Floor'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nif(levelToRename != null) levelToRename.Name = \"Ground Floor\";"}
{"prompt":"Crea un pilar estructural con una sección de 300x300mm en (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Create a structural column with a 300x300mm section at (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Alinea todos los muros con el eje '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Align all walls to grid '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Crea una masa in-place.","completion":"using (Transaction t = new Transaction(doc, \"Crear Masa In-Place\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Create an in-place mass.","completion":"using (Transaction t = new Transaction(doc, \"Create In-Place Mass\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Aplica un material llamado 'Hormigón in situ' a todos los suelos.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Hormigón in situ\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Apply a material named 'Cast-in-place Concrete' to all floors.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Cast-in-place Concrete\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Borra todos los grupos del modelo.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Delete all groups from the model.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Crea una nueva hoja y nómbrala usando el número de la siguiente hoja disponible.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Create a new sheet and name it using the next available sheet number.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Rota la vista activa 90 grados.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Rotate the active view by 90 degrees.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Crea una vista de detalle (callout) que siga la forma de un polígono.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Create a detail callout view that follows the shape of a polygon.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Crea una masa conceptual cónica.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Create a conical conceptual mass.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Aplica un material a todas las capas de un tipo de muro.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Apply a material to all layers of a wall type.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Encuentra todos los elementos dentro de un 'Scope Box' específico.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zona A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Find all elements within a specific 'Scope Box'.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zone A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Crea una vista de plano estructural para el Nivel 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Plano Estructural Nivel 2\";\n}"}
{"prompt":"Create a structural plan view for Level 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Structural Plan Level 2\";\n}"}
{"prompt":"Cambia el color de la línea de todas las tuberías sanitarias a verde.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Change the line color of all sanitary pipes to green.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Oculta todos los elementos excepto los muros en la vista actual.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Hide all elements except walls in the current view.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Encuentra y selecciona todas las familias no utilizadas en el proyecto.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Find and select all unused families in the project.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Exporta un listado de todas las vistas y sus plantillas aplicadas a CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Export a list of all views and their applied templates to CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Crea una cortina mural rectangular del Nivel 1 al Nivel 2 entre (0,0) y (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Create a rectangular curtain wall from Level 1 to Level 2 between (0,0) and (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Añade rejillas U y V cada 2 m a un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Add U and V gridlines every 2m to a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Carga la familia 'LightingFixture.rfa' e inserta una instancia en coordenadas (2,2,3) en Nivel 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Load the 'LightingFixture.rfa' family and insert an instance at (2,2,3) on Level 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Crea un techo esquemático rectangular en 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Create a schematic rectangular roof at 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Genera una losa de cimentación de 1m de espesor.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Create a 1m thick structural footing slab.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Exporta todos los muros con 'Mark' a un archivo CSV.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Export all walls with a 'Mark' to a CSV file.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Create an intermediate level named 'Mezzanine' halfway between Level 1 and Level 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Cambia el material de todos los muros a 'Acero'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Acero\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Change the material of all walls to 'Steel'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Steel\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Éxito\", $\"Se eliminaron {unusedWallTypes.Count} tipos de muro no utilizados.\");\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Success\", $\"Deleted {unusedWallTypes.Count} unused wall types.\");\n}"}
{"prompt":"Añade una línea de rejilla U en un muro cortina a 3m desde el origen.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Add a U grid line to a curtain wall at 3m from the origin.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Añade una línea de rejilla V en un muro cortina a 2m de altura.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Add a V grid line to a curtain wall at 2m height.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Activa todos los segmentos en la primera línea de rejilla U.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Activate all segments on the first U grid line.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Añade montantes en la línea de rejilla U seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla de muro cortina\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Add mullions to the selected U grid line.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a curtain grid line\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Aísla la rejilla V seleccionada y añade solo un segmento.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla V\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Isolate the selected V gridline and add only one segment.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a V grid line\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Crea una nueva fase 'Fase 3 - Ejecución'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Fase 3 - Ejecución\";"}
{"prompt":"Create a new phase 'Phase 3 - Execution'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Phase 3 - Execution\";"}
{"prompt":"Asigna la demolición de los muros seleccionados a la 'Fase 3 - Ejecución'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Fase 3 - Ejecución\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Assign the demolition of selected walls to 'Phase 3 - Execution'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Phase 3 - Execution\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Cambia el primer tipo de muro curvo a un tipo estructural.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curved);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Change the first curved wall type to a structural type.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curtain);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Cambia el material de los paneles de muro cortina a 'Vidrio' si no tienen material.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Set curtain panel material to 'Glass' if unassigned.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 200mm' y nómbralo 'Muro_Dibujo'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Genérico - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Muro_Dibujo\");"}
{"prompt":"Duplicate wall type 'Generic - 200mm' and name it 'Drawing_Wall'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Generic - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Drawing_Wall\");"}
{"prompt":"Exporta los IDs y las elevaciones de los niveles a un archivo CSV.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Export level IDs and elevations to a CSV file.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Elimina todos los montantes (mullions) desbloqueados de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Delete all unlocked mullions from a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Crea un nuevo tipo de muro llamado 'Muro Genérico - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Muro Genérico - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Create a new wall type named 'Generic Wall - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Generic Wall - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Change the type of all selected walls to 'Exterior Wall - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Exterior Wall - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Crea una nueva hoja con el nombre 'Planos de Planta'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Planos de Planta\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Create a new sheet with the name 'Floor Plans'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Floor Plans\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Coloca la vista 'Nivel 1' en la hoja 'Planos de Planta' en el centro.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Planos de Planta\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Nivel 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Place the 'Level 1' view on the 'Floor Plans' sheet at its center.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Floor Plans\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Level 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Establece el nivel de detalle de la vista activa a 'Fino'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Set the detail level of the active view to 'Fine'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Renombrar el nivel 'Nivel 1' a 'Planta Baja'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nif(levelToRename != null) levelToRename.Name = \"Planta Baja\";"}
{"prompt":"Rename the level 'Level 1' to 'Ground Floor'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nif(levelToRename != null) levelToRename.Name = \"Ground Floor\";"}
{"prompt":"Crea un pilar estructural con una sección de 300x300mm en (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Create a structural column with a 300x300mm section at (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Alinea todos los muros con el eje '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Align all walls to grid '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Crea una masa in-place.","completion":"using (Transaction t = new Transaction(doc, \"Crear Masa In-Place\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Create an in-place mass.","completion":"using (Transaction t = new Transaction(doc, \"Create In-Place Mass\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Aplica un material llamado 'Hormigón in situ' a todos los suelos.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Hormigón in situ\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Apply a material named 'Cast-in-place Concrete' to all floors.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Cast-in-place Concrete\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Borra todos los grupos del modelo.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Delete all groups from the model.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Crea una nueva hoja y nómbrala usando el número de la siguiente hoja disponible.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Create a new sheet and name it using the next available sheet number.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Rota la vista activa 90 grados.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Rotate the active view by 90 degrees.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Crea una vista de detalle (callout) que siga la forma de un polígono.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Create a detail callout view that follows the shape of a polygon.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Crea una masa conceptual cónica.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Create a conical conceptual mass.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Aplica un material a todas las capas de un tipo de muro.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Apply a material to all layers of a wall type.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Encuentra todos los elementos dentro de un 'Scope Box' específico.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zona A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Find all elements within a specific 'Scope Box'.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zone A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Crea una vista de plano estructural para el Nivel 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Plano Estructural Nivel 2\";\n}"}
{"prompt":"Create a structural plan view for Level 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Structural Plan Level 2\";\n}"}
{"prompt":"Cambia el color de la línea de todas las tuberías sanitarias a verde.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Change the line color of all sanitary pipes to green.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Oculta todos los elementos excepto los muros en la vista actual.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Hide all elements except walls in the current view.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Encuentra y selecciona todas las familias no utilizadas en el proyecto.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Find and select all unused families in the project.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Exporta un listado de todas las vistas y sus plantillas aplicadas a CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Export a list of all views and their applied templates to CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Crea una cortina mural rectangular del Nivel 1 al Nivel 2 entre (0,0) y (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Create a rectangular curtain wall from Level 1 to Level 2 between (0,0) and (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Añade rejillas U y V cada 2 m a un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Add U and V gridlines every 2m to a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Carga la familia 'LightingFixture.rfa' e inserta una instancia en coordenadas (2,2,3) en Nivel 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Load the 'LightingFixture.rfa' family and insert an instance at (2,2,3) on Level 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Crea un techo esquemático rectangular en 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Create a schematic rectangular roof at 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Genera una losa de cimentación de 1m de espesor.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Create a 1m thick structural footing slab.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Exporta todos los muros con 'Mark' a un archivo CSV.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Export all walls with a 'Mark' to a CSV file.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Create an intermediate level named 'Mezzanine' halfway between Level 1 and Level 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Cambia el material de todos los muros a 'Acero'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Acero\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Change the material of all walls to 'Steel'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Steel\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Éxito\", $\"Se eliminaron {unusedWallTypes.Count} tipos de muro no utilizados.\");\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Success\", $\"Deleted {unusedWallTypes.Count} unused wall types.\");\n}"}
{"prompt":"Añade una línea de rejilla U en un muro cortina a 3m desde el origen.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Add a U grid line to a curtain wall at 3m from the origin.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Añade una línea de rejilla V en un muro cortina a 2m de altura.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Add a V grid line to a curtain wall at 2m height.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Activa todos los segmentos en la primera línea de rejilla U.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Activate all segments on the first U grid line.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Añade montantes en la línea de rejilla U seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla de muro cortina\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Add mullions to the selected U grid line.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a curtain grid line\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Aísla la rejilla V seleccionada y añade solo un segmento.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla V\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Isolate the selected V gridline and add only one segment.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a V grid line\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Crea una nueva fase 'Fase 3 - Ejecución'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Fase 3 - Ejecución\";"}
{"prompt":"Create a new phase 'Phase 3 - Execution'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Phase 3 - Execution\";"}
{"prompt":"Asigna la demolición de los muros seleccionados a la 'Fase 3 - Ejecución'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Fase 3 - Ejecución\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Assign the demolition of selected walls to 'Phase 3 - Execution'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Phase 3 - Execution\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Cambia el primer tipo de muro curvo a un tipo estructural.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curved);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Change the first curved wall type to a structural type.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curtain);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Cambia el material de los paneles de muro cortina a 'Vidrio' si no tienen material.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Set curtain panel material to 'Glass' if unassigned.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 200mm' y nómbralo 'Muro_Dibujo'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Genérico - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Muro_Dibujo\");"}
{"prompt":"Duplicate wall type 'Generic - 200mm' and name it 'Drawing_Wall'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Generic - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Drawing_Wall\");"}
{"prompt":"Exporta los IDs y las elevaciones de los niveles a un archivo CSV.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Export level IDs and elevations to a CSV file.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Elimina todos los montantes (mullions) desbloqueados de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Delete all unlocked mullions from a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Crea un nuevo tipo de muro llamado 'Muro Genérico - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Muro Genérico - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Create a new wall type named 'Generic Wall - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Generic Wall - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Change the type of all selected walls to 'Exterior Wall - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Exterior Wall - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Crea una nueva hoja con el nombre 'Planos de Planta'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Planos de Planta\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Create a new sheet with the name 'Floor Plans'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Floor Plans\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Coloca la vista 'Nivel 1' en la hoja 'Planos de Planta' en el centro.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Planos de Planta\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Nivel 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Place the 'Level 1' view on the 'Floor Plans' sheet at its center.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Floor Plans\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Level 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Establece el nivel de detalle de la vista activa a 'Fino'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Set the detail level of the active view to 'Fine'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Renombrar el nivel 'Nivel 1' a 'Planta Baja'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nif(levelToRename != null) levelToRename.Name = \"Planta Baja\";"}
{"prompt":"Rename the level 'Level 1' to 'Ground Floor'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nif(levelToRename != null) levelToRename.Name = \"Ground Floor\";"}
{"prompt":"Crea un pilar estructural con una sección de 300x300mm en (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Create a structural column with a 300x300mm section at (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Alinea todos los muros con el eje '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Align all walls to grid '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Crea una masa in-place.","completion":"using (Transaction t = new Transaction(doc, \"Crear Masa In-Place\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Create an in-place mass.","completion":"using (Transaction t = new Transaction(doc, \"Create In-Place Mass\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Aplica un material llamado 'Hormigón in situ' a todos los suelos.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Hormigón in situ\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Apply a material named 'Cast-in-place Concrete' to all floors.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Cast-in-place Concrete\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Borra todos los grupos del modelo.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Delete all groups from the model.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Crea una nueva hoja y nómbrala usando el número de la siguiente hoja disponible.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Create a new sheet and name it using the next available sheet number.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Rota la vista activa 90 grados.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Rotate the active view by 90 degrees.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Crea una vista de detalle (callout) que siga la forma de un polígono.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Create a detail callout view that follows the shape of a polygon.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Crea una masa conceptual cónica.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Create a conical conceptual mass.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Aplica un material a todas las capas de un tipo de muro.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Apply a material to all layers of a wall type.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Encuentra todos los elementos dentro de un 'Scope Box' específico.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zona A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Find all elements within a specific 'Scope Box'.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zone A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Crea una vista de plano estructural para el Nivel 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Plano Estructural Nivel 2\";\n}"}
{"prompt":"Create a structural plan view for Level 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Structural Plan Level 2\";\n}"}
{"prompt":"Cambia el color de la línea de todas las tuberías sanitarias a verde.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Change the line color of all sanitary pipes to green.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Oculta todos los elementos excepto los muros en la vista actual.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Hide all elements except walls in the current view.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Encuentra y selecciona todas las familias no utilizadas en el proyecto.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Find and select all unused families in the project.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Exporta un listado de todas las vistas y sus plantillas aplicadas a CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Export a list of all views and their applied templates to CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Crea una cortina mural rectangular del Nivel 1 al Nivel 2 entre (0,0) y (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Create a rectangular curtain wall from Level 1 to Level 2 between (0,0) and (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Añade rejillas U y V cada 2 m a un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Add U and V gridlines every 2m to a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Carga la familia 'LightingFixture.rfa' e inserta una instancia en coordenadas (2,2,3) en Nivel 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Load the 'LightingFixture.rfa' family and insert an instance at (2,2,3) on Level 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Crea un techo esquemático rectangular en 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Create a schematic rectangular roof at 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Genera una losa de cimentación de 1m de espesor.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Create a 1m thick structural footing slab.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Exporta todos los muros con 'Mark' a un archivo CSV.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Export all walls with a 'Mark' to a CSV file.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Create an intermediate level named 'Mezzanine' halfway between Level 1 and Level 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Cambia el material de todos los muros a 'Acero'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Acero\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Change the material of all walls to 'Steel'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Steel\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Éxito\", $\"Se eliminaron {unusedWallTypes.Count} tipos de muro no utilizados.\");\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Success\", $\"Deleted {unusedWallTypes.Count} unused wall types.\");\n}"}
{"prompt":"Añade una línea de rejilla U en un muro cortina a 3m desde el origen.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Add a U grid line to a curtain wall at 3m from the origin.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Añade una línea de rejilla V en un muro cortina a 2m de altura.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Add a V grid line to a curtain wall at 2m height.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Activa todos los segmentos en la primera línea de rejilla U.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Activate all segments on the first U grid line.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Añade montantes en la línea de rejilla U seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla de muro cortina\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Add mullions to the selected U grid line.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a curtain grid line\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Aísla la rejilla V seleccionada y añade solo un segmento.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla V\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Isolate the selected V gridline and add only one segment.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a V grid line\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Crea una nueva fase 'Fase 3 - Ejecución'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Fase 3 - Ejecución\";"}
{"prompt":"Create a new phase 'Phase 3 - Execution'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Phase 3 - Execution\";"}
{"prompt":"Asigna la demolición de los muros seleccionados a la 'Fase 3 - Ejecución'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Fase 3 - Ejecución\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Assign the demolition of selected walls to 'Phase 3 - Execution'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Phase 3 - Execution\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Cambia el primer tipo de muro curvo a un tipo estructural.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curved);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Change the first curved wall type to a structural type.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curtain);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Cambia el material de los paneles de muro cortina a 'Vidrio' si no tienen material.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Set curtain panel material to 'Glass' if unassigned.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 200mm' y nómbralo 'Muro_Dibujo'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Genérico - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Muro_Dibujo\");"}
{"prompt":"Duplicate wall type 'Generic - 200mm' and name it 'Drawing_Wall'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Generic - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Drawing_Wall\");"}
{"prompt":"Exporta los IDs y las elevaciones de los niveles a un archivo CSV.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Export level IDs and elevations to a CSV file.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Elimina todos los montantes (mullions) desbloqueados de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Delete all unlocked mullions from a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Crea un nuevo tipo de muro llamado 'Muro Genérico - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Muro Genérico - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Create a new wall type named 'Generic Wall - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Generic Wall - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Change the type of all selected walls to 'Exterior Wall - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Exterior Wall - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Crea una nueva hoja con el nombre 'Planos de Planta'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Planos de Planta\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Create a new sheet with the name 'Floor Plans'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Floor Plans\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Coloca la vista 'Nivel 1' en la hoja 'Planos de Planta' en el centro.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Planos de Planta\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Nivel 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Place the 'Level 1' view on the 'Floor Plans' sheet at its center.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Floor Plans\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Level 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Establece el nivel de detalle de la vista activa a 'Fino'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Set the detail level of the active view to 'Fine'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Renombrar el nivel 'Nivel 1' a 'Planta Baja'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nif(levelToRename != null) levelToRename.Name = \"Planta Baja\";"}
{"prompt":"Rename the level 'Level 1' to 'Ground Floor'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nif(levelToRename != null) levelToRename.Name = \"Ground Floor\";"}
{"prompt":"Crea un pilar estructural con una sección de 300x300mm en (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Create a structural column with a 300x300mm section at (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Alinea todos los muros con el eje '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Align all walls to grid '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Crea una masa in-place.","completion":"using (Transaction t = new Transaction(doc, \"Crear Masa In-Place\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Create an in-place mass.","completion":"using (Transaction t = new Transaction(doc, \"Create In-Place Mass\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Aplica un material llamado 'Hormigón in situ' a todos los suelos.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Hormigón in situ\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Apply a material named 'Cast-in-place Concrete' to all floors.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Cast-in-place Concrete\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Borra todos los grupos del modelo.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Delete all groups from the model.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Crea una nueva hoja y nómbrala usando el número de la siguiente hoja disponible.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Create a new sheet and name it using the next available sheet number.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Rota la vista activa 90 grados.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Rotate the active view by 90 degrees.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Crea una vista de detalle (callout) que siga la forma de un polígono.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Create a detail callout view that follows the shape of a polygon.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Crea una masa conceptual cónica.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Create a conical conceptual mass.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Aplica un material a todas las capas de un tipo de muro.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Apply a material to all layers of a wall type.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Encuentra todos los elementos dentro de un 'Scope Box' específico.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zona A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Find all elements within a specific 'Scope Box'.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zone A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Crea una vista de plano estructural para el Nivel 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Plano Estructural Nivel 2\";\n}"}
{"prompt":"Create a structural plan view for Level 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Structural Plan Level 2\";\n}"}
{"prompt":"Cambia el color de la línea de todas las tuberías sanitarias a verde.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Change the line color of all sanitary pipes to green.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Oculta todos los elementos excepto los muros en la vista actual.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Hide all elements except walls in the current view.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Encuentra y selecciona todas las familias no utilizadas en el proyecto.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Find and select all unused families in the project.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Exporta un listado de todas las vistas y sus plantillas aplicadas a CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Export a list of all views and their applied templates to CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Crea una cortina mural rectangular del Nivel 1 al Nivel 2 entre (0,0) y (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Create a rectangular curtain wall from Level 1 to Level 2 between (0,0) and (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Añade rejillas U y V cada 2 m a un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Add U and V gridlines every 2m to a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Carga la familia 'LightingFixture.rfa' e inserta una instancia en coordenadas (2,2,3) en Nivel 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Load the 'LightingFixture.rfa' family and insert an instance at (2,2,3) on Level 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Crea un techo esquemático rectangular en 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Create a schematic rectangular roof at 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Genera una losa de cimentación de 1m de espesor.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Create a 1m thick structural footing slab.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Exporta todos los muros con 'Mark' a un archivo CSV.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Export all walls with a 'Mark' to a CSV file.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Create an intermediate level named 'Mezzanine' halfway between Level 1 and Level 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Cambia el material de todos los muros a 'Acero'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Acero\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Change the material of all walls to 'Steel'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Steel\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Éxito\", $\"Se eliminaron {unusedWallTypes.Count} tipos de muro no utilizados.\");\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Success\", $\"Deleted {unusedWallTypes.Count} unused wall types.\");\n}"}
{"prompt":"Añade una línea de rejilla U en un muro cortina a 3m desde el origen.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Add a U grid line to a curtain wall at 3m from the origin.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Añade una línea de rejilla V en un muro cortina a 2m de altura.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Add a V grid line to a curtain wall at 2m height.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Activa todos los segmentos en la primera línea de rejilla U.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Activate all segments on the first U grid line.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Añade montantes en la línea de rejilla U seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla de muro cortina\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Add mullions to the selected U grid line.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a curtain grid line\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Aísla la rejilla V seleccionada y añade solo un segmento.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla V\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Isolate the selected V gridline and add only one segment.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a V grid line\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Crea una nueva fase 'Fase 3 - Ejecución'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Fase 3 - Ejecución\";"}
{"prompt":"Create a new phase 'Phase 3 - Execution'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Phase 3 - Execution\";"}
{"prompt":"Asigna la demolición de los muros seleccionados a la 'Fase 3 - Ejecución'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Fase 3 - Ejecución\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Assign the demolition of selected walls to 'Phase 3 - Execution'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Phase 3 - Execution\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Cambia el primer tipo de muro curvo a un tipo estructural.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curved);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Change the first curved wall type to a structural type.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curtain);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Cambia el material de los paneles de muro cortina a 'Vidrio' si no tienen material.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Set curtain panel material to 'Glass' if unassigned.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 200mm' y nómbralo 'Muro_Dibujo'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Genérico - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Muro_Dibujo\");"}
{"prompt":"Duplicate wall type 'Generic - 200mm' and name it 'Drawing_Wall'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Generic - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Drawing_Wall\");"}
{"prompt":"Exporta los IDs y las elevaciones de los niveles a un archivo CSV.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Export level IDs and elevations to a CSV file.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Elimina todos los montantes (mullions) desbloqueados de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Delete all unlocked mullions from a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Crea un nuevo tipo de muro llamado 'Muro Genérico - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Muro Genérico - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Create a new wall type named 'Generic Wall - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Generic Wall - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Change the type of all selected walls to 'Exterior Wall - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Exterior Wall - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Crea una nueva hoja con el nombre 'Planos de Planta'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Planos de Planta\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Create a new sheet with the name 'Floor Plans'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Floor Plans\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Coloca la vista 'Nivel 1' en la hoja 'Planos de Planta' en el centro.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Planos de Planta\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Nivel 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Place the 'Level 1' view on the 'Floor Plans' sheet at its center.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Floor Plans\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Level 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Establece el nivel de detalle de la vista activa a 'Fino'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Set the detail level of the active view to 'Fine'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Renombrar el nivel 'Nivel 1' a 'Planta Baja'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nif(levelToRename != null) levelToRename.Name = \"Planta Baja\";"}
{"prompt":"Rename the level 'Level 1' to 'Ground Floor'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nif(levelToRename != null) levelToRename.Name = \"Ground Floor\";"}
{"prompt":"Crea un pilar estructural con una sección de 300x300mm en (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Create a structural column with a 300x300mm section at (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Alinea todos los muros con el eje '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Align all walls to grid '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Crea una masa in-place.","completion":"using (Transaction t = new Transaction(doc, \"Crear Masa In-Place\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Create an in-place mass.","completion":"using (Transaction t = new Transaction(doc, \"Create In-Place Mass\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Aplica un material llamado 'Hormigón in situ' a todos los suelos.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Hormigón in situ\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Apply a material named 'Cast-in-place Concrete' to all floors.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Cast-in-place Concrete\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Borra todos los grupos del modelo.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Delete all groups from the model.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Crea una nueva hoja y nómbrala usando el número de la siguiente hoja disponible.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Create a new sheet and name it using the next available sheet number.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Rota la vista activa 90 grados.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Rotate the active view by 90 degrees.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Crea una vista de detalle (callout) que siga la forma de un polígono.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Create a detail callout view that follows the shape of a polygon.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Crea una masa conceptual cónica.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Create a conical conceptual mass.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Aplica un material a todas las capas de un tipo de muro.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Apply a material to all layers of a wall type.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Encuentra todos los elementos dentro de un 'Scope Box' específico.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zona A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Find all elements within a specific 'Scope Box'.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zone A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Crea una vista de plano estructural para el Nivel 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Plano Estructural Nivel 2\";\n}"}
{"prompt":"Create a structural plan view for Level 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Structural Plan Level 2\";\n}"}
{"prompt":"Cambia el color de la línea de todas las tuberías sanitarias a verde.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Change the line color of all sanitary pipes to green.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Oculta todos los elementos excepto los muros en la vista actual.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Hide all elements except walls in the current view.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Encuentra y selecciona todas las familias no utilizadas en el proyecto.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Find and select all unused families in the project.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Exporta un listado de todas las vistas y sus plantillas aplicadas a CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Export a list of all views and their applied templates to CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Crea una cortina mural rectangular del Nivel 1 al Nivel 2 entre (0,0) y (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Create a rectangular curtain wall from Level 1 to Level 2 between (0,0) and (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Añade rejillas U y V cada 2 m a un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Add U and V gridlines every 2m to a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Carga la familia 'LightingFixture.rfa' e inserta una instancia en coordenadas (2,2,3) en Nivel 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Load the 'LightingFixture.rfa' family and insert an instance at (2,2,3) on Level 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Crea un techo esquemático rectangular en 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Create a schematic rectangular roof at 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Genera una losa de cimentación de 1m de espesor.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Create a 1m thick structural footing slab.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Exporta todos los muros con 'Mark' a un archivo CSV.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Export all walls with a 'Mark' to a CSV file.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Create an intermediate level named 'Mezzanine' halfway between Level 1 and Level 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Cambia el material de todos los muros a 'Acero'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Acero\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Change the material of all walls to 'Steel'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Steel\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Éxito\", $\"Se eliminaron {unusedWallTypes.Count} tipos de muro no utilizados.\");\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Success\", $\"Deleted {unusedWallTypes.Count} unused wall types.\");\n}"}
{"prompt":"Añade una línea de rejilla U en un muro cortina a 3m desde el origen.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Add a U grid line to a curtain wall at 3m from the origin.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Añade una línea de rejilla V en un muro cortina a 2m de altura.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Add a V grid line to a curtain wall at 2m height.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Activa todos los segmentos en la primera línea de rejilla U.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Activate all segments on the first U grid line.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Añade montantes en la línea de rejilla U seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla de muro cortina\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Add mullions to the selected U grid line.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a curtain grid line\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Aísla la rejilla V seleccionada y añade solo un segmento.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla V\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Isolate the selected V gridline and add only one segment.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a V grid line\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Crea una nueva fase 'Fase 3 - Ejecución'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Fase 3 - Ejecución\";"}
{"prompt":"Create a new phase 'Phase 3 - Execution'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Phase 3 - Execution\";"}
{"prompt":"Asigna la demolición de los muros seleccionados a la 'Fase 3 - Ejecución'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Fase 3 - Ejecución\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Assign the demolition of selected walls to 'Phase 3 - Execution'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Phase 3 - Execution\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Cambia el primer tipo de muro curvo a un tipo estructural.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curved);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Change the first curved wall type to a structural type.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curtain);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Cambia el material de los paneles de muro cortina a 'Vidrio' si no tienen material.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Set curtain panel material to 'Glass' if unassigned.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 200mm' y nómbralo 'Muro_Dibujo'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Genérico - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Muro_Dibujo\");"}
{"prompt":"Duplicate wall type 'Generic - 200mm' and name it 'Drawing_Wall'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Generic - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Drawing_Wall\");"}
{"prompt":"Exporta los IDs y las elevaciones de los niveles a un archivo CSV.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Export level IDs and elevations to a CSV file.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Elimina todos los montantes (mullions) desbloqueados de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Delete all unlocked mullions from a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Crea un nuevo tipo de muro llamado 'Muro Genérico - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Muro Genérico - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Create a new wall type named 'Generic Wall - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Generic Wall - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Change the type of all selected walls to 'Exterior Wall - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Exterior Wall - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Crea una nueva hoja con el nombre 'Planos de Planta'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Planos de Planta\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Create a new sheet with the name 'Floor Plans'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Floor Plans\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Coloca la vista 'Nivel 1' en la hoja 'Planos de Planta' en el centro.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Planos de Planta\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Nivel 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Place the 'Level 1' view on the 'Floor Plans' sheet at its center.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Floor Plans\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Level 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Establece el nivel de detalle de la vista activa a 'Fino'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Set the detail level of the active view to 'Fine'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Renombrar el nivel 'Nivel 1' a 'Planta Baja'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nif(levelToRename != null) levelToRename.Name = \"Planta Baja\";"}
{"prompt":"Rename the level 'Level 1' to 'Ground Floor'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nif(levelToRename != null) levelToRename.Name = \"Ground Floor\";"}
{"prompt":"Crea un pilar estructural con una sección de 300x300mm en (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Create a structural column with a 300x300mm section at (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Alinea todos los muros con el eje '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Align all walls to grid '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Crea una masa in-place.","completion":"using (Transaction t = new Transaction(doc, \"Crear Masa In-Place\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Create an in-place mass.","completion":"using (Transaction t = new Transaction(doc, \"Create In-Place Mass\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Aplica un material llamado 'Hormigón in situ' a todos los suelos.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Hormigón in situ\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Apply a material named 'Cast-in-place Concrete' to all floors.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Cast-in-place Concrete\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Borra todos los grupos del modelo.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Delete all groups from the model.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Crea una nueva hoja y nómbrala usando el número de la siguiente hoja disponible.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Create a new sheet and name it using the next available sheet number.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Rota la vista activa 90 grados.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Rotate the active view by 90 degrees.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Crea una vista de detalle (callout) que siga la forma de un polígono.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Create a detail callout view that follows the shape of a polygon.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Crea una masa conceptual cónica.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Create a conical conceptual mass.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Aplica un material a todas las capas de un tipo de muro.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Apply a material to all layers of a wall type.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Encuentra todos los elementos dentro de un 'Scope Box' específico.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zona A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Find all elements within a specific 'Scope Box'.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zone A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Crea una vista de plano estructural para el Nivel 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Plano Estructural Nivel 2\";\n}"}
{"prompt":"Create a structural plan view for Level 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Structural Plan Level 2\";\n}"}
{"prompt":"Cambia el color de la línea de todas las tuberías sanitarias a verde.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Change the line color of all sanitary pipes to green.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Oculta todos los elementos excepto los muros en la vista actual.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Hide all elements except walls in the current view.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Encuentra y selecciona todas las familias no utilizadas en el proyecto.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Find and select all unused families in the project.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Exporta un listado de todas las vistas y sus plantillas aplicadas a CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Export a list of all views and their applied templates to CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Crea una cortina mural rectangular del Nivel 1 al Nivel 2 entre (0,0) y (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Create a rectangular curtain wall from Level 1 to Level 2 between (0,0) and (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Añade rejillas U y V cada 2 m a un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Add U and V gridlines every 2m to a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Carga la familia 'LightingFixture.rfa' e inserta una instancia en coordenadas (2,2,3) en Nivel 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Load the 'LightingFixture.rfa' family and insert an instance at (2,2,3) on Level 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Crea un techo esquemático rectangular en 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Create a schematic rectangular roof at 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Genera una losa de cimentación de 1m de espesor.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Create a 1m thick structural footing slab.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Exporta todos los muros con 'Mark' a un archivo CSV.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Export all walls with a 'Mark' to a CSV file.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Create an intermediate level named 'Mezzanine' halfway between Level 1 and Level 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Cambia el material de todos los muros a 'Acero'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Acero\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Change the material of all walls to 'Steel'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Steel\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Éxito\", $\"Se eliminaron {unusedWallTypes.Count} tipos de muro no utilizados.\");\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Success\", $\"Deleted {unusedWallTypes.Count} unused wall types.\");\n}"}
{"prompt":"Añade una línea de rejilla U en un muro cortina a 3m desde el origen.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Add a U grid line to a curtain wall at 3m from the origin.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Añade una línea de rejilla V en un muro cortina a 2m de altura.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Add a V grid line to a curtain wall at 2m height.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Activa todos los segmentos en la primera línea de rejilla U.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Activate all segments on the first U grid line.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Añade montantes en la línea de rejilla U seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla de muro cortina\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Add mullions to the selected U grid line.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a curtain grid line\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Aísla la rejilla V seleccionada y añade solo un segmento.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla V\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Isolate the selected V gridline and add only one segment.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a V grid line\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Crea una nueva fase 'Fase 3 - Ejecución'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Fase 3 - Ejecución\";"}
{"prompt":"Create a new phase 'Phase 3 - Execution'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Phase 3 - Execution\";"}
{"prompt":"Asigna la demolición de los muros seleccionados a la 'Fase 3 - Ejecución'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Fase 3 - Ejecución\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Assign the demolition of selected walls to 'Phase 3 - Execution'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Phase 3 - Execution\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Cambia el primer tipo de muro curvo a un tipo estructural.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curved);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Change the first curved wall type to a structural type.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curtain);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Cambia el material de los paneles de muro cortina a 'Vidrio' si no tienen material.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Set curtain panel material to 'Glass' if unassigned.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 200mm' y nómbralo 'Muro_Dibujo'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Genérico - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Muro_Dibujo\");"}
{"prompt":"Duplicate wall type 'Generic - 200mm' and name it 'Drawing_Wall'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Generic - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Drawing_Wall\");"}
{"prompt":"Exporta los IDs y las elevaciones de los niveles a un archivo CSV.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Export level IDs and elevations to a CSV file.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Elimina todos los montantes (mullions) desbloqueados de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Delete all unlocked mullions from a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Crea un nuevo tipo de muro llamado 'Muro Genérico - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Muro Genérico - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Create a new wall type named 'Generic Wall - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Generic Wall - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Change the type of all selected walls to 'Exterior Wall - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Exterior Wall - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Crea una nueva hoja con el nombre 'Planos de Planta'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Planos de Planta\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Create a new sheet with the name 'Floor Plans'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Floor Plans\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Coloca la vista 'Nivel 1' en la hoja 'Planos de Planta' en el centro.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Planos de Planta\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Nivel 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Place the 'Level 1' view on the 'Floor Plans' sheet at its center.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Floor Plans\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Level 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Establece el nivel de detalle de la vista activa a 'Fino'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Set the detail level of the active view to 'Fine'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Renombrar el nivel 'Nivel 1' a 'Planta Baja'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nif(levelToRename != null) levelToRename.Name = \"Planta Baja\";"}
{"prompt":"Rename the level 'Level 1' to 'Ground Floor'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nif(levelToRename != null) levelToRename.Name = \"Ground Floor\";"}
{"prompt":"Crea un pilar estructural con una sección de 300x300mm en (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Create a structural column with a 300x300mm section at (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Alinea todos los muros con el eje '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Align all walls to grid '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Crea una masa in-place.","completion":"using (Transaction t = new Transaction(doc, \"Crear Masa In-Place\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Create an in-place mass.","completion":"using (Transaction t = new Transaction(doc, \"Create In-Place Mass\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Aplica un material llamado 'Hormigón in situ' a todos los suelos.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Hormigón in situ\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Apply a material named 'Cast-in-place Concrete' to all floors.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Cast-in-place Concrete\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Borra todos los grupos del modelo.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Delete all groups from the model.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Crea una nueva hoja y nómbrala usando el número de la siguiente hoja disponible.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Create a new sheet and name it using the next available sheet number.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Rota la vista activa 90 grados.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Rotate the active view by 90 degrees.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Crea una vista de detalle (callout) que siga la forma de un polígono.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Create a detail callout view that follows the shape of a polygon.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Crea una masa conceptual cónica.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Create a conical conceptual mass.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Aplica un material a todas las capas de un tipo de muro.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Apply a material to all layers of a wall type.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Encuentra todos los elementos dentro de un 'Scope Box' específico.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zona A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Find all elements within a specific 'Scope Box'.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zone A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Crea una vista de plano estructural para el Nivel 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Plano Estructural Nivel 2\";\n}"}
{"prompt":"Create a structural plan view for Level 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Structural Plan Level 2\";\n}"}
{"prompt":"Cambia el color de la línea de todas las tuberías sanitarias a verde.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Change the line color of all sanitary pipes to green.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Oculta todos los elementos excepto los muros en la vista actual.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Hide all elements except walls in the current view.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Encuentra y selecciona todas las familias no utilizadas en el proyecto.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Find and select all unused families in the project.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Exporta un listado de todas las vistas y sus plantillas aplicadas a CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Export a list of all views and their applied templates to CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Crea una cortina mural rectangular del Nivel 1 al Nivel 2 entre (0,0) y (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Create a rectangular curtain wall from Level 1 to Level 2 between (0,0) and (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Añade rejillas U y V cada 2 m a un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Add U and V gridlines every 2m to a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Carga la familia 'LightingFixture.rfa' e inserta una instancia en coordenadas (2,2,3) en Nivel 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Load the 'LightingFixture.rfa' family and insert an instance at (2,2,3) on Level 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Crea un techo esquemático rectangular en 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Create a schematic rectangular roof at 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Genera una losa de cimentación de 1m de espesor.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Create a 1m thick structural footing slab.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Exporta todos los muros con 'Mark' a un archivo CSV.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Export all walls with a 'Mark' to a CSV file.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Create an intermediate level named 'Mezzanine' halfway between Level 1 and Level 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Cambia el material de todos los muros a 'Acero'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Acero\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Change the material of all walls to 'Steel'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Steel\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Éxito\", $\"Se eliminaron {unusedWallTypes.Count} tipos de muro no utilizados.\");\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Success\", $\"Deleted {unusedWallTypes.Count} unused wall types.\");\n}"}
{"prompt":"Añade una línea de rejilla U en un muro cortina a 3m desde el origen.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Add a U grid line to a curtain wall at 3m from the origin.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Añade una línea de rejilla V en un muro cortina a 2m de altura.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Add a V grid line to a curtain wall at 2m height.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Activa todos los segmentos en la primera línea de rejilla U.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Activate all segments on the first U grid line.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Añade montantes en la línea de rejilla U seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla de muro cortina\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Add mullions to the selected U grid line.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a curtain grid line\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Aísla la rejilla V seleccionada y añade solo un segmento.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla V\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Isolate the selected V gridline and add only one segment.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a V grid line\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Crea una nueva fase 'Fase 3 - Ejecución'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Fase 3 - Ejecución\";"}
{"prompt":"Create a new phase 'Phase 3 - Execution'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Phase 3 - Execution\";"}
{"prompt":"Asigna la demolición de los muros seleccionados a la 'Fase 3 - Ejecución'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Fase 3 - Ejecución\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Assign the demolition of selected walls to 'Phase 3 - Execution'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Phase 3 - Execution\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Cambia el primer tipo de muro curvo a un tipo estructural.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curved);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Change the first curved wall type to a structural type.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curtain);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Cambia el material de los paneles de muro cortina a 'Vidrio' si no tienen material.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Set curtain panel material to 'Glass' if unassigned.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 200mm' y nómbralo 'Muro_Dibujo'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Genérico - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Muro_Dibujo\");"}
{"prompt":"Duplicate wall type 'Generic - 200mm' and name it 'Drawing_Wall'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Generic - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Drawing_Wall\");"}
{"prompt":"Exporta los IDs y las elevaciones de los niveles a un archivo CSV.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Export level IDs and elevations to a CSV file.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Elimina todos los montantes (mullions) desbloqueados de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Delete all unlocked mullions from a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Crea un nuevo tipo de muro llamado 'Muro Genérico - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Muro Genérico - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Create a new wall type named 'Generic Wall - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Generic Wall - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Change the type of all selected walls to 'Exterior Wall - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Exterior Wall - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Crea una nueva hoja con el nombre 'Planos de Planta'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Planos de Planta\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Create a new sheet with the name 'Floor Plans'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Floor Plans\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Coloca la vista 'Nivel 1' en la hoja 'Planos de Planta' en el centro.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Planos de Planta\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Nivel 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Place the 'Level 1' view on the 'Floor Plans' sheet at its center.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Floor Plans\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Level 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Establece el nivel de detalle de la vista activa a 'Fino'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Set the detail level of the active view to 'Fine'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Renombrar el nivel 'Nivel 1' a 'Planta Baja'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nif(levelToRename != null) levelToRename.Name = \"Planta Baja\";"}
{"prompt":"Rename the level 'Level 1' to 'Ground Floor'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nif(levelToRename != null) levelToRename.Name = \"Ground Floor\";"}
{"prompt":"Crea un pilar estructural con una sección de 300x300mm en (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Create a structural column with a 300x300mm section at (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Alinea todos los muros con el eje '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Align all walls to grid '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Crea una masa in-place.","completion":"using (Transaction t = new Transaction(doc, \"Crear Masa In-Place\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Create an in-place mass.","completion":"using (Transaction t = new Transaction(doc, \"Create In-Place Mass\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Aplica un material llamado 'Hormigón in situ' a todos los suelos.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Hormigón in situ\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Apply a material named 'Cast-in-place Concrete' to all floors.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Cast-in-place Concrete\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Borra todos los grupos del modelo.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Delete all groups from the model.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Crea una nueva hoja y nómbrala usando el número de la siguiente hoja disponible.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Create a new sheet and name it using the next available sheet number.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Rota la vista activa 90 grados.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Rotate the active view by 90 degrees.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Crea una vista de detalle (callout) que siga la forma de un polígono.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Create a detail callout view that follows the shape of a polygon.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Crea una masa conceptual cónica.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Create a conical conceptual mass.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Aplica un material a todas las capas de un tipo de muro.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Apply a material to all layers of a wall type.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Encuentra todos los elementos dentro de un 'Scope Box' específico.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zona A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Find all elements within a specific 'Scope Box'.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zone A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Crea una vista de plano estructural para el Nivel 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Plano Estructural Nivel 2\";\n}"}
{"prompt":"Create a structural plan view for Level 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Structural Plan Level 2\";\n}"}
{"prompt":"Cambia el color de la línea de todas las tuberías sanitarias a verde.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Change the line color of all sanitary pipes to green.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Oculta todos los elementos excepto los muros en la vista actual.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Hide all elements except walls in the current view.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Encuentra y selecciona todas las familias no utilizadas en el proyecto.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Find and select all unused families in the project.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Exporta un listado de todas las vistas y sus plantillas aplicadas a CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Export a list of all views and their applied templates to CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Crea una cortina mural rectangular del Nivel 1 al Nivel 2 entre (0,0) y (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Create a rectangular curtain wall from Level 1 to Level 2 between (0,0) and (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Añade rejillas U y V cada 2 m a un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Add U and V gridlines every 2m to a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Carga la familia 'LightingFixture.rfa' e inserta una instancia en coordenadas (2,2,3) en Nivel 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Load the 'LightingFixture.rfa' family and insert an instance at (2,2,3) on Level 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Crea un techo esquemático rectangular en 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Create a schematic rectangular roof at 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Genera una losa de cimentación de 1m de espesor.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Create a 1m thick structural footing slab.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Exporta todos los muros con 'Mark' a un archivo CSV.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Export all walls with a 'Mark' to a CSV file.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Create an intermediate level named 'Mezzanine' halfway between Level 1 and Level 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Cambia el material de todos los muros a 'Acero'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Acero\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Change the material of all walls to 'Steel'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Steel\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Éxito\", $\"Se eliminaron {unusedWallTypes.Count} tipos de muro no utilizados.\");\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Success\", $\"Deleted {unusedWallTypes.Count} unused wall types.\");\n}"}
{"prompt":"Añade una línea de rejilla U en un muro cortina a 3m desde el origen.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Add a U grid line to a curtain wall at 3m from the origin.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Añade una línea de rejilla V en un muro cortina a 2m de altura.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Add a V grid line to a curtain wall at 2m height.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Activa todos los segmentos en la primera línea de rejilla U.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Activate all segments on the first U grid line.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Añade montantes en la línea de rejilla U seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla de muro cortina\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Add mullions to the selected U grid line.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a curtain grid line\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Aísla la rejilla V seleccionada y añade solo un segmento.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla V\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Isolate the selected V gridline and add only one segment.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a V grid line\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Crea una nueva fase 'Fase 3 - Ejecución'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Fase 3 - Ejecución\";"}
{"prompt":"Create a new phase 'Phase 3 - Execution'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Phase 3 - Execution\";"}
{"prompt":"Asigna la demolición de los muros seleccionados a la 'Fase 3 - Ejecución'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Fase 3 - Ejecución\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Assign the demolition of selected walls to 'Phase 3 - Execution'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Phase 3 - Execution\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Cambia el primer tipo de muro curvo a un tipo estructural.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curved);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Change the first curved wall type to a structural type.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curtain);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Cambia el material de los paneles de muro cortina a 'Vidrio' si no tienen material.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Set curtain panel material to 'Glass' if unassigned.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 200mm' y nómbralo 'Muro_Dibujo'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Genérico - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Muro_Dibujo\");"}
{"prompt":"Duplicate wall type 'Generic - 200mm' and name it 'Drawing_Wall'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Generic - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Drawing_Wall\");"}
{"prompt":"Exporta los IDs y las elevaciones de los niveles a un archivo CSV.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Export level IDs and elevations to a CSV file.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Elimina todos los montantes (mullions) desbloqueados de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Delete all unlocked mullions from a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Crea un nuevo tipo de muro llamado 'Muro Genérico - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Muro Genérico - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Create a new wall type named 'Generic Wall - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Generic Wall - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Change the type of all selected walls to 'Exterior Wall - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Exterior Wall - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Crea una nueva hoja con el nombre 'Planos de Planta'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Planos de Planta\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Create a new sheet with the name 'Floor Plans'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Floor Plans\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Coloca la vista 'Nivel 1' en la hoja 'Planos de Planta' en el centro.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Planos de Planta\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Nivel 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Place the 'Level 1' view on the 'Floor Plans' sheet at its center.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Floor Plans\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Level 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Establece el nivel de detalle de la vista activa a 'Fino'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Set the detail level of the active view to 'Fine'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Renombrar el nivel 'Nivel 1' a 'Planta Baja'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nif(levelToRename != null) levelToRename.Name = \"Planta Baja\";"}
{"prompt":"Rename the level 'Level 1' to 'Ground Floor'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nif(levelToRename != null) levelToRename.Name = \"Ground Floor\";"}
{"prompt":"Crea un pilar estructural con una sección de 300x300mm en (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Create a structural column with a 300x300mm section at (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Alinea todos los muros con el eje '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Align all walls to grid '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Crea una masa in-place.","completion":"using (Transaction t = new Transaction(doc, \"Crear Masa In-Place\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Create an in-place mass.","completion":"using (Transaction t = new Transaction(doc, \"Create In-Place Mass\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Aplica un material llamado 'Hormigón in situ' a todos los suelos.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Hormigón in situ\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Apply a material named 'Cast-in-place Concrete' to all floors.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Cast-in-place Concrete\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Borra todos los grupos del modelo.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Delete all groups from the model.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Crea una nueva hoja y nómbrala usando el número de la siguiente hoja disponible.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Create a new sheet and name it using the next available sheet number.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Rota la vista activa 90 grados.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Rotate the active view by 90 degrees.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Crea una vista de detalle (callout) que siga la forma de un polígono.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Create a detail callout view that follows the shape of a polygon.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Crea una masa conceptual cónica.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Create a conical conceptual mass.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Aplica un material a todas las capas de un tipo de muro.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Apply a material to all layers of a wall type.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Encuentra todos los elementos dentro de un 'Scope Box' específico.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zona A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Find all elements within a specific 'Scope Box'.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zone A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Crea una vista de plano estructural para el Nivel 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Plano Estructural Nivel 2\";\n}"}
{"prompt":"Create a structural plan view for Level 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Structural Plan Level 2\";\n}"}
{"prompt":"Cambia el color de la línea de todas las tuberías sanitarias a verde.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Change the line color of all sanitary pipes to green.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Oculta todos los elementos excepto los muros en la vista actual.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Hide all elements except walls in the current view.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Encuentra y selecciona todas las familias no utilizadas en el proyecto.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Find and select all unused families in the project.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Exporta un listado de todas las vistas y sus plantillas aplicadas a CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Export a list of all views and their applied templates to CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Crea una cortina mural rectangular del Nivel 1 al Nivel 2 entre (0,0) y (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Create a rectangular curtain wall from Level 1 to Level 2 between (0,0) and (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Añade rejillas U y V cada 2 m a un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Add U and V gridlines every 2m to a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Carga la familia 'LightingFixture.rfa' e inserta una instancia en coordenadas (2,2,3) en Nivel 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Load the 'LightingFixture.rfa' family and insert an instance at (2,2,3) on Level 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Crea un techo esquemático rectangular en 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Create a schematic rectangular roof at 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Genera una losa de cimentación de 1m de espesor.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Create a 1m thick structural footing slab.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Exporta todos los muros con 'Mark' a un archivo CSV.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Export all walls with a 'Mark' to a CSV file.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Create an intermediate level named 'Mezzanine' halfway between Level 1 and Level 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Cambia el material de todos los muros a 'Acero'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Acero\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Change the material of all walls to 'Steel'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Steel\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Éxito\", $\"Se eliminaron {unusedWallTypes.Count} tipos de muro no utilizados.\");\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Success\", $\"Deleted {unusedWallTypes.Count} unused wall types.\");\n}"}
{"prompt":"Añade una línea de rejilla U en un muro cortina a 3m desde el origen.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Add a U grid line to a curtain wall at 3m from the origin.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Añade una línea de rejilla V en un muro cortina a 2m de altura.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Add a V grid line to a curtain wall at 2m height.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Activa todos los segmentos en la primera línea de rejilla U.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Activate all segments on the first U grid line.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Añade montantes en la línea de rejilla U seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla de muro cortina\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Add mullions to the selected U grid line.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a curtain grid line\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Aísla la rejilla V seleccionada y añade solo un segmento.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla V\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Isolate the selected V gridline and add only one segment.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a V grid line\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Crea una nueva fase 'Fase 3 - Ejecución'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Fase 3 - Ejecución\";"}
{"prompt":"Create a new phase 'Phase 3 - Execution'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Phase 3 - Execution\";"}
{"prompt":"Asigna la demolición de los muros seleccionados a la 'Fase 3 - Ejecución'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Fase 3 - Ejecución\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Assign the demolition of selected walls to 'Phase 3 - Execution'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Phase 3 - Execution\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Cambia el primer tipo de muro curvo a un tipo estructural.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curved);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Change the first curved wall type to a structural type.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curtain);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Cambia el material de los paneles de muro cortina a 'Vidrio' si no tienen material.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Set curtain panel material to 'Glass' if unassigned.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 200mm' y nómbralo 'Muro_Dibujo'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Genérico - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Muro_Dibujo\");"}
{"prompt":"Duplicate wall type 'Generic - 200mm' and name it 'Drawing_Wall'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Generic - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Drawing_Wall\");"}
{"prompt":"Exporta los IDs y las elevaciones de los niveles a un archivo CSV.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Export level IDs and elevations to a CSV file.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Elimina todos los montantes (mullions) desbloqueados de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Delete all unlocked mullions from a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Crea un nuevo tipo de muro llamado 'Muro Genérico - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Muro Genérico - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Create a new wall type named 'Generic Wall - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Generic Wall - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Change the type of all selected walls to 'Exterior Wall - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Exterior Wall - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Crea una nueva hoja con el nombre 'Planos de Planta'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Planos de Planta\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Create a new sheet with the name 'Floor Plans'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Floor Plans\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Coloca la vista 'Nivel 1' en la hoja 'Planos de Planta' en el centro.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Planos de Planta\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Nivel 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Place the 'Level 1' view on the 'Floor Plans' sheet at its center.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Floor Plans\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Level 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Establece el nivel de detalle de la vista activa a 'Fino'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Set the detail level of the active view to 'Fine'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Renombrar el nivel 'Nivel 1' a 'Planta Baja'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nif(levelToRename != null) levelToRename.Name = \"Planta Baja\";"}
{"prompt":"Rename the level 'Level 1' to 'Ground Floor'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nif(levelToRename != null) levelToRename.Name = \"Ground Floor\";"}
{"prompt":"Crea un pilar estructural con una sección de 300x300mm en (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Create a structural column with a 300x300mm section at (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Alinea todos los muros con el eje '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Align all walls to grid '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Crea una masa in-place.","completion":"using (Transaction t = new Transaction(doc, \"Crear Masa In-Place\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Create an in-place mass.","completion":"using (Transaction t = new Transaction(doc, \"Create In-Place Mass\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Aplica un material llamado 'Hormigón in situ' a todos los suelos.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Hormigón in situ\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Apply a material named 'Cast-in-place Concrete' to all floors.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Cast-in-place Concrete\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Borra todos los grupos del modelo.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Delete all groups from the model.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Crea una nueva hoja y nómbrala usando el número de la siguiente hoja disponible.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Create a new sheet and name it using the next available sheet number.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Rota la vista activa 90 grados.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Rotate the active view by 90 degrees.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Crea una vista de detalle (callout) que siga la forma de un polígono.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Create a detail callout view that follows the shape of a polygon.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Crea una masa conceptual cónica.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Create a conical conceptual mass.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Aplica un material a todas las capas de un tipo de muro.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Apply a material to all layers of a wall type.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Encuentra todos los elementos dentro de un 'Scope Box' específico.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zona A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Find all elements within a specific 'Scope Box'.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zone A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Crea una vista de plano estructural para el Nivel 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Plano Estructural Nivel 2\";\n}"}
{"prompt":"Create a structural plan view for Level 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Structural Plan Level 2\";\n}"}
{"prompt":"Cambia el color de la línea de todas las tuberías sanitarias a verde.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Change the line color of all sanitary pipes to green.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Oculta todos los elementos excepto los muros en la vista actual.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Hide all elements except walls in the current view.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Encuentra y selecciona todas las familias no utilizadas en el proyecto.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Find and select all unused families in the project.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Exporta un listado de todas las vistas y sus plantillas aplicadas a CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Export a list of all views and their applied templates to CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Crea una cortina mural rectangular del Nivel 1 al Nivel 2 entre (0,0) y (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Create a rectangular curtain wall from Level 1 to Level 2 between (0,0) and (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Añade rejillas U y V cada 2 m a un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Add U and V gridlines every 2m to a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Carga la familia 'LightingFixture.rfa' e inserta una instancia en coordenadas (2,2,3) en Nivel 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Load the 'LightingFixture.rfa' family and insert an instance at (2,2,3) on Level 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Crea un techo esquemático rectangular en 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Create a schematic rectangular roof at 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Genera una losa de cimentación de 1m de espesor.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Create a 1m thick structural footing slab.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Exporta todos los muros con 'Mark' a un archivo CSV.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Export all walls with a 'Mark' to a CSV file.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Create an intermediate level named 'Mezzanine' halfway between Level 1 and Level 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Cambia el material de todos los muros a 'Acero'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Acero\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Change the material of all walls to 'Steel'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Steel\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Éxito\", $\"Se eliminaron {unusedWallTypes.Count} tipos de muro no utilizados.\");\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Success\", $\"Deleted {unusedWallTypes.Count} unused wall types.\");\n}"}
{"prompt":"Añade una línea de rejilla U en un muro cortina a 3m desde el origen.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Add a U grid line to a curtain wall at 3m from the origin.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Añade una línea de rejilla V en un muro cortina a 2m de altura.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Add a V grid line to a curtain wall at 2m height.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Activa todos los segmentos en la primera línea de rejilla U.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Activate all segments on the first U grid line.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Añade montantes en la línea de rejilla U seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla de muro cortina\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Add mullions to the selected U grid line.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a curtain grid line\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Aísla la rejilla V seleccionada y añade solo un segmento.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla V\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Isolate the selected V gridline and add only one segment.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a V grid line\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Crea una nueva fase 'Fase 3 - Ejecución'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Fase 3 - Ejecución\";"}
{"prompt":"Create a new phase 'Phase 3 - Execution'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Phase 3 - Execution\";"}
{"prompt":"Asigna la demolición de los muros seleccionados a la 'Fase 3 - Ejecución'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Fase 3 - Ejecución\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Assign the demolition of selected walls to 'Phase 3 - Execution'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Phase 3 - Execution\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Cambia el primer tipo de muro curvo a un tipo estructural.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curved);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Change the first curved wall type to a structural type.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curtain);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Cambia el material de los paneles de muro cortina a 'Vidrio' si no tienen material.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Set curtain panel material to 'Glass' if unassigned.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 200mm' y nómbralo 'Muro_Dibujo'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Genérico - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Muro_Dibujo\");"}
{"prompt":"Duplicate wall type 'Generic - 200mm' and name it 'Drawing_Wall'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Generic - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Drawing_Wall\");"}
{"prompt":"Exporta los IDs y las elevaciones de los niveles a un archivo CSV.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Export level IDs and elevations to a CSV file.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Elimina todos los montantes (mullions) desbloqueados de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Delete all unlocked mullions from a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Crea un nuevo tipo de muro llamado 'Muro Genérico - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Muro Genérico - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Create a new wall type named 'Generic Wall - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Generic Wall - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Change the type of all selected walls to 'Exterior Wall - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Exterior Wall - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Crea una nueva hoja con el nombre 'Planos de Planta'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Planos de Planta\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Create a new sheet with the name 'Floor Plans'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Floor Plans\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Coloca la vista 'Nivel 1' en la hoja 'Planos de Planta' en el centro.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Planos de Planta\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Nivel 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Place the 'Level 1' view on the 'Floor Plans' sheet at its center.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Floor Plans\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Level 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Establece el nivel de detalle de la vista activa a 'Fino'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Set the detail level of the active view to 'Fine'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Renombrar el nivel 'Nivel 1' a 'Planta Baja'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nif(levelToRename != null) levelToRename.Name = \"Planta Baja\";"}
{"prompt":"Rename the level 'Level 1' to 'Ground Floor'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nif(levelToRename != null) levelToRename.Name = \"Ground Floor\";"}
{"prompt":"Crea un pilar estructural con una sección de 300x300mm en (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Create a structural column with a 300x300mm section at (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Alinea todos los muros con el eje '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Align all walls to grid '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Crea una masa in-place.","completion":"using (Transaction t = new Transaction(doc, \"Crear Masa In-Place\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Create an in-place mass.","completion":"using (Transaction t = new Transaction(doc, \"Create In-Place Mass\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Aplica un material llamado 'Hormigón in situ' a todos los suelos.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Hormigón in situ\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Apply a material named 'Cast-in-place Concrete' to all floors.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Cast-in-place Concrete\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Borra todos los grupos del modelo.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Delete all groups from the model.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Crea una nueva hoja y nómbrala usando el número de la siguiente hoja disponible.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Create a new sheet and name it using the next available sheet number.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Rota la vista activa 90 grados.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Rotate the active view by 90 degrees.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Crea una vista de detalle (callout) que siga la forma de un polígono.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Create a detail callout view that follows the shape of a polygon.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Crea una masa conceptual cónica.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Create a conical conceptual mass.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Aplica un material a todas las capas de un tipo de muro.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Apply a material to all layers of a wall type.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Encuentra todos los elementos dentro de un 'Scope Box' específico.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zona A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Find all elements within a specific 'Scope Box'.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zone A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Crea una vista de plano estructural para el Nivel 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Plano Estructural Nivel 2\";\n}"}
{"prompt":"Create a structural plan view for Level 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Structural Plan Level 2\";\n}"}
{"prompt":"Cambia el color de la línea de todas las tuberías sanitarias a verde.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Change the line color of all sanitary pipes to green.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Oculta todos los elementos excepto los muros en la vista actual.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Hide all elements except walls in the current view.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Encuentra y selecciona todas las familias no utilizadas en el proyecto.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Find and select all unused families in the project.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Exporta un listado de todas las vistas y sus plantillas aplicadas a CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Export a list of all views and their applied templates to CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Crea una cortina mural rectangular del Nivel 1 al Nivel 2 entre (0,0) y (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Create a rectangular curtain wall from Level 1 to Level 2 between (0,0) and (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Añade rejillas U y V cada 2 m a un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Add U and V gridlines every 2m to a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Carga la familia 'LightingFixture.rfa' e inserta una instancia en coordenadas (2,2,3) en Nivel 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Load the 'LightingFixture.rfa' family and insert an instance at (2,2,3) on Level 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Crea un techo esquemático rectangular en 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Create a schematic rectangular roof at 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Genera una losa de cimentación de 1m de espesor.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Create a 1m thick structural footing slab.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Exporta todos los muros con 'Mark' a un archivo CSV.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Export all walls with a 'Mark' to a CSV file.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Create an intermediate level named 'Mezzanine' halfway between Level 1 and Level 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Cambia el material de todos los muros a 'Acero'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Acero\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Change the material of all walls to 'Steel'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Steel\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Éxito\", $\"Se eliminaron {unusedWallTypes.Count} tipos de muro no utilizados.\");\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Success\", $\"Deleted {unusedWallTypes.Count} unused wall types.\");\n}"}
{"prompt":"Añade una línea de rejilla U en un muro cortina a 3m desde el origen.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Add a U grid line to a curtain wall at 3m from the origin.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Añade una línea de rejilla V en un muro cortina a 2m de altura.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Add a V grid line to a curtain wall at 2m height.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Activa todos los segmentos en la primera línea de rejilla U.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Activate all segments on the first U grid line.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Añade montantes en la línea de rejilla U seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla de muro cortina\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Add mullions to the selected U grid line.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a curtain grid line\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Aísla la rejilla V seleccionada y añade solo un segmento.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla V\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Isolate the selected V gridline and add only one segment.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a V grid line\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Crea una nueva fase 'Fase 3 - Ejecución'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Fase 3 - Ejecución\";"}
{"prompt":"Create a new phase 'Phase 3 - Execution'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Phase 3 - Execution\";"}
{"prompt":"Asigna la demolición de los muros seleccionados a la 'Fase 3 - Ejecución'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Fase 3 - Ejecución\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Assign the demolition of selected walls to 'Phase 3 - Execution'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Phase 3 - Execution\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Cambia el primer tipo de muro curvo a un tipo estructural.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curved);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Change the first curved wall type to a structural type.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curtain);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Cambia el material de los paneles de muro cortina a 'Vidrio' si no tienen material.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Set curtain panel material to 'Glass' if unassigned.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 200mm' y nómbralo 'Muro_Dibujo'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Genérico - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Muro_Dibujo\");"}
{"prompt":"Duplicate wall type 'Generic - 200mm' and name it 'Drawing_Wall'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Generic - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Drawing_Wall\");"}
{"prompt":"Exporta los IDs y las elevaciones de los niveles a un archivo CSV.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Export level IDs and elevations to a CSV file.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Elimina todos los montantes (mullions) desbloqueados de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Delete all unlocked mullions from a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Crea un nuevo tipo de muro llamado 'Muro Genérico - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Muro Genérico - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Create a new wall type named 'Generic Wall - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Generic Wall - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Change the type of all selected walls to 'Exterior Wall - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Exterior Wall - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Crea una nueva hoja con el nombre 'Planos de Planta'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Planos de Planta\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Create a new sheet with the name 'Floor Plans'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Floor Plans\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Coloca la vista 'Nivel 1' en la hoja 'Planos de Planta' en el centro.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Planos de Planta\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Nivel 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Place the 'Level 1' view on the 'Floor Plans' sheet at its center.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Floor Plans\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Level 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Establece el nivel de detalle de la vista activa a 'Fino'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Set the detail level of the active view to 'Fine'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Renombrar el nivel 'Nivel 1' a 'Planta Baja'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nif(levelToRename != null) levelToRename.Name = \"Planta Baja\";"}
{"prompt":"Rename the level 'Level 1' to 'Ground Floor'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nif(levelToRename != null) levelToRename.Name = \"Ground Floor\";"}
{"prompt":"Crea un pilar estructural con una sección de 300x300mm en (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Create a structural column with a 300x300mm section at (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Alinea todos los muros con el eje '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Align all walls to grid '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Crea una masa in-place.","completion":"using (Transaction t = new Transaction(doc, \"Crear Masa In-Place\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Create an in-place mass.","completion":"using (Transaction t = new Transaction(doc, \"Create In-Place Mass\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Aplica un material llamado 'Hormigón in situ' a todos los suelos.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Hormigón in situ\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Apply a material named 'Cast-in-place Concrete' to all floors.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Cast-in-place Concrete\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Borra todos los grupos del modelo.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Delete all groups from the model.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Crea una nueva hoja y nómbrala usando el número de la siguiente hoja disponible.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Create a new sheet and name it using the next available sheet number.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Rota la vista activa 90 grados.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Rotate the active view by 90 degrees.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Crea una vista de detalle (callout) que siga la forma de un polígono.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Create a detail callout view that follows the shape of a polygon.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Crea una masa conceptual cónica.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Create a conical conceptual mass.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Aplica un material a todas las capas de un tipo de muro.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Apply a material to all layers of a wall type.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Encuentra todos los elementos dentro de un 'Scope Box' específico.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zona A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Find all elements within a specific 'Scope Box'.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zone A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Crea una vista de plano estructural para el Nivel 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Plano Estructural Nivel 2\";\n}"}
{"prompt":"Create a structural plan view for Level 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Structural Plan Level 2\";\n}"}
{"prompt":"Cambia el color de la línea de todas las tuberías sanitarias a verde.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Change the line color of all sanitary pipes to green.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Oculta todos los elementos excepto los muros en la vista actual.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Hide all elements except walls in the current view.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Encuentra y selecciona todas las familias no utilizadas en el proyecto.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Find and select all unused families in the project.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Exporta un listado de todas las vistas y sus plantillas aplicadas a CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Export a list of all views and their applied templates to CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Crea una cortina mural rectangular del Nivel 1 al Nivel 2 entre (0,0) y (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Create a rectangular curtain wall from Level 1 to Level 2 between (0,0) and (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Añade rejillas U y V cada 2 m a un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Add U and V gridlines every 2m to a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Carga la familia 'LightingFixture.rfa' e inserta una instancia en coordenadas (2,2,3) en Nivel 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Load the 'LightingFixture.rfa' family and insert an instance at (2,2,3) on Level 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Crea un techo esquemático rectangular en 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Create a schematic rectangular roof at 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Genera una losa de cimentación de 1m de espesor.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Create a 1m thick structural footing slab.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Exporta todos los muros con 'Mark' a un archivo CSV.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Export all walls with a 'Mark' to a CSV file.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Create an intermediate level named 'Mezzanine' halfway between Level 1 and Level 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Cambia el material de todos los muros a 'Acero'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Acero\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Change the material of all walls to 'Steel'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Steel\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Éxito\", $\"Se eliminaron {unusedWallTypes.Count} tipos de muro no utilizados.\");\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Success\", $\"Deleted {unusedWallTypes.Count} unused wall types.\");\n}"}
{"prompt":"Añade una línea de rejilla U en un muro cortina a 3m desde el origen.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Add a U grid line to a curtain wall at 3m from the origin.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Añade una línea de rejilla V en un muro cortina a 2m de altura.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Add a V grid line to a curtain wall at 2m height.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Activa todos los segmentos en la primera línea de rejilla U.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Activate all segments on the first U grid line.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Añade montantes en la línea de rejilla U seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla de muro cortina\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Add mullions to the selected U grid line.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a curtain grid line\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Aísla la rejilla V seleccionada y añade solo un segmento.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla V\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Isolate the selected V gridline and add only one segment.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a V grid line\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Crea una nueva fase 'Fase 3 - Ejecución'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Fase 3 - Ejecución\";"}
{"prompt":"Create a new phase 'Phase 3 - Execution'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Phase 3 - Execution\";"}
{"prompt":"Asigna la demolición de los muros seleccionados a la 'Fase 3 - Ejecución'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Fase 3 - Ejecución\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Assign the demolition of selected walls to 'Phase 3 - Execution'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Phase 3 - Execution\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Cambia el primer tipo de muro curvo a un tipo estructural.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curved);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Change the first curved wall type to a structural type.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curtain);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Cambia el material de los paneles de muro cortina a 'Vidrio' si no tienen material.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Set curtain panel material to 'Glass' if unassigned.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 200mm' y nómbralo 'Muro_Dibujo'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Genérico - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Muro_Dibujo\");"}
{"prompt":"Duplicate wall type 'Generic - 200mm' and name it 'Drawing_Wall'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Generic - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Drawing_Wall\");"}
{"prompt":"Exporta los IDs y las elevaciones de los niveles a un archivo CSV.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Export level IDs and elevations to a CSV file.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Elimina todos los montantes (mullions) desbloqueados de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Delete all unlocked mullions from a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Crea un nuevo tipo de muro llamado 'Muro Genérico - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Muro Genérico - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Create a new wall type named 'Generic Wall - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Generic Wall - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Change the type of all selected walls to 'Exterior Wall - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Exterior Wall - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Crea una nueva hoja con el nombre 'Planos de Planta'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Planos de Planta\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Create a new sheet with the name 'Floor Plans'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Floor Plans\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Coloca la vista 'Nivel 1' en la hoja 'Planos de Planta' en el centro.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Planos de Planta\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Nivel 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Place the 'Level 1' view on the 'Floor Plans' sheet at its center.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Floor Plans\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Level 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Establece el nivel de detalle de la vista activa a 'Fino'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Set the detail level of the active view to 'Fine'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Renombrar el nivel 'Nivel 1' a 'Planta Baja'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nif(levelToRename != null) levelToRename.Name = \"Planta Baja\";"}
{"prompt":"Rename the level 'Level 1' to 'Ground Floor'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nif(levelToRename != null) levelToRename.Name = \"Ground Floor\";"}
{"prompt":"Crea un pilar estructural con una sección de 300x300mm en (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Create a structural column with a 300x300mm section at (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Alinea todos los muros con el eje '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Align all walls to grid '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Crea una masa in-place.","completion":"using (Transaction t = new Transaction(doc, \"Crear Masa In-Place\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Create an in-place mass.","completion":"using (Transaction t = new Transaction(doc, \"Create In-Place Mass\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Aplica un material llamado 'Hormigón in situ' a todos los suelos.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Hormigón in situ\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Apply a material named 'Cast-in-place Concrete' to all floors.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Cast-in-place Concrete\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Borra todos los grupos del modelo.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Delete all groups from the model.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Crea una nueva hoja y nómbrala usando el número de la siguiente hoja disponible.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Create a new sheet and name it using the next available sheet number.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Rota la vista activa 90 grados.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Rotate the active view by 90 degrees.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Crea una vista de detalle (callout) que siga la forma de un polígono.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Create a detail callout view that follows the shape of a polygon.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Crea una masa conceptual cónica.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Create a conical conceptual mass.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Aplica un material a todas las capas de un tipo de muro.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Apply a material to all layers of a wall type.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Encuentra todos los elementos dentro de un 'Scope Box' específico.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zona A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Find all elements within a specific 'Scope Box'.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zone A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Crea una vista de plano estructural para el Nivel 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Plano Estructural Nivel 2\";\n}"}
{"prompt":"Create a structural plan view for Level 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Structural Plan Level 2\";\n}"}
{"prompt":"Cambia el color de la línea de todas las tuberías sanitarias a verde.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Change the line color of all sanitary pipes to green.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Oculta todos los elementos excepto los muros en la vista actual.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Hide all elements except walls in the current view.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Encuentra y selecciona todas las familias no utilizadas en el proyecto.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Find and select all unused families in the project.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Exporta un listado de todas las vistas y sus plantillas aplicadas a CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Export a list of all views and their applied templates to CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Crea una cortina mural rectangular del Nivel 1 al Nivel 2 entre (0,0) y (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Create a rectangular curtain wall from Level 1 to Level 2 between (0,0) and (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Añade rejillas U y V cada 2 m a un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Add U and V gridlines every 2m to a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Carga la familia 'LightingFixture.rfa' e inserta una instancia en coordenadas (2,2,3) en Nivel 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Load the 'LightingFixture.rfa' family and insert an instance at (2,2,3) on Level 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Crea un techo esquemático rectangular en 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Create a schematic rectangular roof at 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Genera una losa de cimentación de 1m de espesor.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Create a 1m thick structural footing slab.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Exporta todos los muros con 'Mark' a un archivo CSV.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Export all walls with a 'Mark' to a CSV file.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Create an intermediate level named 'Mezzanine' halfway between Level 1 and Level 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Cambia el material de todos los muros a 'Acero'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Acero\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Change the material of all walls to 'Steel'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Steel\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Éxito\", $\"Se eliminaron {unusedWallTypes.Count} tipos de muro no utilizados.\");\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Success\", $\"Deleted {unusedWallTypes.Count} unused wall types.\");\n}"}
{"prompt":"Añade una línea de rejilla U en un muro cortina a 3m desde el origen.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Add a U grid line to a curtain wall at 3m from the origin.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Añade una línea de rejilla V en un muro cortina a 2m de altura.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Add a V grid line to a curtain wall at 2m height.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Activa todos los segmentos en la primera línea de rejilla U.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Activate all segments on the first U grid line.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Añade montantes en la línea de rejilla U seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla de muro cortina\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Add mullions to the selected U grid line.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a curtain grid line\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Aísla la rejilla V seleccionada y añade solo un segmento.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla V\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Isolate the selected V gridline and add only one segment.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a V grid line\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Crea una nueva fase 'Fase 3 - Ejecución'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Fase 3 - Ejecución\";"}
{"prompt":"Create a new phase 'Phase 3 - Execution'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Phase 3 - Execution\";"}
{"prompt":"Asigna la demolición de los muros seleccionados a la 'Fase 3 - Ejecución'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Fase 3 - Ejecución\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Assign the demolition of selected walls to 'Phase 3 - Execution'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Phase 3 - Execution\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Cambia el primer tipo de muro curvo a un tipo estructural.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curved);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Change the first curved wall type to a structural type.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curtain);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Cambia el material de los paneles de muro cortina a 'Vidrio' si no tienen material.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Set curtain panel material to 'Glass' if unassigned.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 200mm' y nómbralo 'Muro_Dibujo'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Genérico - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Muro_Dibujo\");"}
{"prompt":"Duplicate wall type 'Generic - 200mm' and name it 'Drawing_Wall'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Generic - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Drawing_Wall\");"}
{"prompt":"Exporta los IDs y las elevaciones de los niveles a un archivo CSV.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Export level IDs and elevations to a CSV file.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Elimina todos los montantes (mullions) desbloqueados de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Delete all unlocked mullions from a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Crea un nuevo tipo de muro llamado 'Muro Genérico - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Muro Genérico - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Create a new wall type named 'Generic Wall - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Generic Wall - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Change the type of all selected walls to 'Exterior Wall - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Exterior Wall - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Crea una nueva hoja con el nombre 'Planos de Planta'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Planos de Planta\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Create a new sheet with the name 'Floor Plans'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Floor Plans\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Coloca la vista 'Nivel 1' en la hoja 'Planos de Planta' en el centro.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Planos de Planta\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Nivel 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Place the 'Level 1' view on the 'Floor Plans' sheet at its center.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Floor Plans\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Level 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Establece el nivel de detalle de la vista activa a 'Fino'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Set the detail level of the active view to 'Fine'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Renombrar el nivel 'Nivel 1' a 'Planta Baja'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nif(levelToRename != null) levelToRename.Name = \"Planta Baja\";"}
{"prompt":"Rename the level 'Level 1' to 'Ground Floor'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nif(levelToRename != null) levelToRename.Name = \"Ground Floor\";"}
{"prompt":"Crea un pilar estructural con una sección de 300x300mm en (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Create a structural column with a 300x300mm section at (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Alinea todos los muros con el eje '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Align all walls to grid '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Crea una masa in-place.","completion":"using (Transaction t = new Transaction(doc, \"Crear Masa In-Place\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Create an in-place mass.","completion":"using (Transaction t = new Transaction(doc, \"Create In-Place Mass\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Aplica un material llamado 'Hormigón in situ' a todos los suelos.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Hormigón in situ\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Apply a material named 'Cast-in-place Concrete' to all floors.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Cast-in-place Concrete\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Borra todos los grupos del modelo.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Delete all groups from the model.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Crea una nueva hoja y nómbrala usando el número de la siguiente hoja disponible.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Create a new sheet and name it using the next available sheet number.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Rota la vista activa 90 grados.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Rotate the active view by 90 degrees.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Crea una vista de detalle (callout) que siga la forma de un polígono.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Create a detail callout view that follows the shape of a polygon.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Crea una masa conceptual cónica.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Create a conical conceptual mass.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Aplica un material a todas las capas de un tipo de muro.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Apply a material to all layers of a wall type.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Encuentra todos los elementos dentro de un 'Scope Box' específico.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zona A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Find all elements within a specific 'Scope Box'.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zone A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Crea una vista de plano estructural para el Nivel 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Plano Estructural Nivel 2\";\n}"}
{"prompt":"Create a structural plan view for Level 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Structural Plan Level 2\";\n}"}
{"prompt":"Cambia el color de la línea de todas las tuberías sanitarias a verde.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Change the line color of all sanitary pipes to green.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Oculta todos los elementos excepto los muros en la vista actual.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Hide all elements except walls in the current view.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Encuentra y selecciona todas las familias no utilizadas en el proyecto.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Find and select all unused families in the project.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Exporta un listado de todas las vistas y sus plantillas aplicadas a CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Export a list of all views and their applied templates to CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Crea una cortina mural rectangular del Nivel 1 al Nivel 2 entre (0,0) y (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Create a rectangular curtain wall from Level 1 to Level 2 between (0,0) and (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Añade rejillas U y V cada 2 m a un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Add U and V gridlines every 2m to a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Carga la familia 'LightingFixture.rfa' e inserta una instancia en coordenadas (2,2,3) en Nivel 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Load the 'LightingFixture.rfa' family and insert an instance at (2,2,3) on Level 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Crea un techo esquemático rectangular en 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Create a schematic rectangular roof at 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Genera una losa de cimentación de 1m de espesor.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Create a 1m thick structural footing slab.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Exporta todos los muros con 'Mark' a un archivo CSV.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Export all walls with a 'Mark' to a CSV file.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Create an intermediate level named 'Mezzanine' halfway between Level 1 and Level 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Cambia el material de todos los muros a 'Acero'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Acero\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Change the material of all walls to 'Steel'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Steel\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Éxito\", $\"Se eliminaron {unusedWallTypes.Count} tipos de muro no utilizados.\");\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Success\", $\"Deleted {unusedWallTypes.Count} unused wall types.\");\n}"}
{"prompt":"Añade una línea de rejilla U en un muro cortina a 3m desde el origen.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Add a U grid line to a curtain wall at 3m from the origin.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Añade una línea de rejilla V en un muro cortina a 2m de altura.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Add a V grid line to a curtain wall at 2m height.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Activa todos los segmentos en la primera línea de rejilla U.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Activate all segments on the first U grid line.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Añade montantes en la línea de rejilla U seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla de muro cortina\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Add mullions to the selected U grid line.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a curtain grid line\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Aísla la rejilla V seleccionada y añade solo un segmento.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla V\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Isolate the selected V gridline and add only one segment.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a V grid line\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Crea una nueva fase 'Fase 3 - Ejecución'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Fase 3 - Ejecución\";"}
{"prompt":"Create a new phase 'Phase 3 - Execution'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Phase 3 - Execution\";"}
{"prompt":"Asigna la demolición de los muros seleccionados a la 'Fase 3 - Ejecución'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Fase 3 - Ejecución\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Assign the demolition of selected walls to 'Phase 3 - Execution'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Phase 3 - Execution\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Cambia el primer tipo de muro curvo a un tipo estructural.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curved);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Change the first curved wall type to a structural type.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curtain);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Cambia el material de los paneles de muro cortina a 'Vidrio' si no tienen material.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Set curtain panel material to 'Glass' if unassigned.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 200mm' y nómbralo 'Muro_Dibujo'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Genérico - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Muro_Dibujo\");"}
{"prompt":"Duplicate wall type 'Generic - 200mm' and name it 'Drawing_Wall'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Generic - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Drawing_Wall\");"}
{"prompt":"Exporta los IDs y las elevaciones de los niveles a un archivo CSV.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Export level IDs and elevations to a CSV file.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Elimina todos los montantes (mullions) desbloqueados de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Delete all unlocked mullions from a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Crea un nuevo tipo de muro llamado 'Muro Genérico - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Muro Genérico - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Create a new wall type named 'Generic Wall - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Generic Wall - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Change the type of all selected walls to 'Exterior Wall - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Exterior Wall - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Crea una nueva hoja con el nombre 'Planos de Planta'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Planos de Planta\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Create a new sheet with the name 'Floor Plans'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Floor Plans\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Coloca la vista 'Nivel 1' en la hoja 'Planos de Planta' en el centro.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Planos de Planta\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Nivel 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Place the 'Level 1' view on the 'Floor Plans' sheet at its center.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Floor Plans\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Level 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Establece el nivel de detalle de la vista activa a 'Fino'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Set the detail level of the active view to 'Fine'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Renombrar el nivel 'Nivel 1' a 'Planta Baja'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nif(levelToRename != null) levelToRename.Name = \"Planta Baja\";"}
{"prompt":"Rename the level 'Level 1' to 'Ground Floor'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nif(levelToRename != null) levelToRename.Name = \"Ground Floor\";"}
{"prompt":"Crea un pilar estructural con una sección de 300x300mm en (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Create a structural column with a 300x300mm section at (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Alinea todos los muros con el eje '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Align all walls to grid '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Crea una masa in-place.","completion":"using (Transaction t = new Transaction(doc, \"Crear Masa In-Place\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Create an in-place mass.","completion":"using (Transaction t = new Transaction(doc, \"Create In-Place Mass\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Aplica un material llamado 'Hormigón in situ' a todos los suelos.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Hormigón in situ\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Apply a material named 'Cast-in-place Concrete' to all floors.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Cast-in-place Concrete\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Borra todos los grupos del modelo.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Delete all groups from the model.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Crea una nueva hoja y nómbrala usando el número de la siguiente hoja disponible.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Create a new sheet and name it using the next available sheet number.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Rota la vista activa 90 grados.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Rotate the active view by 90 degrees.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Crea una vista de detalle (callout) que siga la forma de un polígono.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Create a detail callout view that follows the shape of a polygon.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Crea una masa conceptual cónica.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Create a conical conceptual mass.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Aplica un material a todas las capas de un tipo de muro.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Apply a material to all layers of a wall type.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Encuentra todos los elementos dentro de un 'Scope Box' específico.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zona A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Find all elements within a specific 'Scope Box'.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zone A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Crea una vista de plano estructural para el Nivel 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Plano Estructural Nivel 2\";\n}"}
{"prompt":"Create a structural plan view for Level 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Structural Plan Level 2\";\n}"}
{"prompt":"Cambia el color de la línea de todas las tuberías sanitarias a verde.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Change the line color of all sanitary pipes to green.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Oculta todos los elementos excepto los muros en la vista actual.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Hide all elements except walls in the current view.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Encuentra y selecciona todas las familias no utilizadas en el proyecto.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Find and select all unused families in the project.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Exporta un listado de todas las vistas y sus plantillas aplicadas a CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Export a list of all views and their applied templates to CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Crea una cortina mural rectangular del Nivel 1 al Nivel 2 entre (0,0) y (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Create a rectangular curtain wall from Level 1 to Level 2 between (0,0) and (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Añade rejillas U y V cada 2 m a un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Add U and V gridlines every 2m to a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Carga la familia 'LightingFixture.rfa' e inserta una instancia en coordenadas (2,2,3) en Nivel 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Load the 'LightingFixture.rfa' family and insert an instance at (2,2,3) on Level 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Crea un techo esquemático rectangular en 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Create a schematic rectangular roof at 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Genera una losa de cimentación de 1m de espesor.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Create a 1m thick structural footing slab.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Exporta todos los muros con 'Mark' a un archivo CSV.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Export all walls with a 'Mark' to a CSV file.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Create an intermediate level named 'Mezzanine' halfway between Level 1 and Level 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Cambia el material de todos los muros a 'Acero'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Acero\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Change the material of all walls to 'Steel'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Steel\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Éxito\", $\"Se eliminaron {unusedWallTypes.Count} tipos de muro no utilizados.\");\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Success\", $\"Deleted {unusedWallTypes.Count} unused wall types.\");\n}"}
{"prompt":"Añade una línea de rejilla U en un muro cortina a 3m desde el origen.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Add a U grid line to a curtain wall at 3m from the origin.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Añade una línea de rejilla V en un muro cortina a 2m de altura.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Add a V grid line to a curtain wall at 2m height.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Activa todos los segmentos en la primera línea de rejilla U.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Activate all segments on the first U grid line.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Añade montantes en la línea de rejilla U seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla de muro cortina\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Add mullions to the selected U grid line.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a curtain grid line\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Aísla la rejilla V seleccionada y añade solo un segmento.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla V\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Isolate the selected V gridline and add only one segment.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a V grid line\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Crea una nueva fase 'Fase 3 - Ejecución'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Fase 3 - Ejecución\";"}
{"prompt":"Create a new phase 'Phase 3 - Execution'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Phase 3 - Execution\";"}
{"prompt":"Asigna la demolición de los muros seleccionados a la 'Fase 3 - Ejecución'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Fase 3 - Ejecución\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Assign the demolition of selected walls to 'Phase 3 - Execution'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Phase 3 - Execution\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Cambia el primer tipo de muro curvo a un tipo estructural.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curved);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Change the first curved wall type to a structural type.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curtain);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Cambia el material de los paneles de muro cortina a 'Vidrio' si no tienen material.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Set curtain panel material to 'Glass' if unassigned.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 200mm' y nómbralo 'Muro_Dibujo'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Genérico - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Muro_Dibujo\");"}
{"prompt":"Duplicate wall type 'Generic - 200mm' and name it 'Drawing_Wall'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Generic - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Drawing_Wall\");"}
{"prompt":"Exporta los IDs y las elevaciones de los niveles a un archivo CSV.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Export level IDs and elevations to a CSV file.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Elimina todos los montantes (mullions) desbloqueados de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Delete all unlocked mullions from a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Crea un nuevo tipo de muro llamado 'Muro Genérico - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Muro Genérico - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Create a new wall type named 'Generic Wall - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Generic Wall - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Change the type of all selected walls to 'Exterior Wall - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Exterior Wall - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Crea una nueva hoja con el nombre 'Planos de Planta'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Planos de Planta\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Create a new sheet with the name 'Floor Plans'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Floor Plans\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Coloca la vista 'Nivel 1' en la hoja 'Planos de Planta' en el centro.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Planos de Planta\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Nivel 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Place the 'Level 1' view on the 'Floor Plans' sheet at its center.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Floor Plans\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Level 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Establece el nivel de detalle de la vista activa a 'Fino'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Set the detail level of the active view to 'Fine'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Renombrar el nivel 'Nivel 1' a 'Planta Baja'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nif(levelToRename != null) levelToRename.Name = \"Planta Baja\";"}
{"prompt":"Rename the level 'Level 1' to 'Ground Floor'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nif(levelToRename != null) levelToRename.Name = \"Ground Floor\";"}
{"prompt":"Crea un pilar estructural con una sección de 300x300mm en (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Create a structural column with a 300x300mm section at (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Alinea todos los muros con el eje '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Align all walls to grid '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Crea una masa in-place.","completion":"using (Transaction t = new Transaction(doc, \"Crear Masa In-Place\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Create an in-place mass.","completion":"using (Transaction t = new Transaction(doc, \"Create In-Place Mass\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Aplica un material llamado 'Hormigón in situ' a todos los suelos.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Hormigón in situ\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Apply a material named 'Cast-in-place Concrete' to all floors.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Cast-in-place Concrete\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Borra todos los grupos del modelo.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Delete all groups from the model.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Crea una nueva hoja y nómbrala usando el número de la siguiente hoja disponible.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Create a new sheet and name it using the next available sheet number.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Rota la vista activa 90 grados.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Rotate the active view by 90 degrees.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Crea una vista de detalle (callout) que siga la forma de un polígono.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Create a detail callout view that follows the shape of a polygon.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Crea una masa conceptual cónica.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Create a conical conceptual mass.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Aplica un material a todas las capas de un tipo de muro.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Apply a material to all layers of a wall type.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Encuentra todos los elementos dentro de un 'Scope Box' específico.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zona A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Find all elements within a specific 'Scope Box'.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zone A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(scopeBox.get_BoundingBox(null).Min, scopeBox.get_BoundingBox(null).Max));\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Crea una vista de plano estructural para el Nivel 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Plano Estructural Nivel 2\";\n}"}
{"prompt":"Create a structural plan view for Level 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Structural Plan Level 2\";\n}"}
{"prompt":"Cambia el color de la línea de todas las tuberías sanitarias a verde.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Change the line color of all sanitary pipes to green.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Oculta todos los elementos excepto los muros en la vista actual.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Hide all elements except walls in the current view.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Encuentra y selecciona todas las familias no utilizadas en el proyecto.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Find and select all unused families in the project.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Exporta un listado de todas las vistas y sus plantillas aplicadas a CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Export a list of all views and their applied templates to CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Crea una cortina mural rectangular del Nivel 1 al Nivel 2 entre (0,0) y (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Create a rectangular curtain wall from Level 1 to Level 2 between (0,0) and (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Añade rejillas U y V cada 2 m a un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Add U and V gridlines every 2m to a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Carga la familia 'LightingFixture.rfa' e inserta una instancia en coordenadas (2,2,3) en Nivel 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Load the 'LightingFixture.rfa' family and insert an instance at (2,2,3) on Level 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Crea un techo esquemático rectangular en 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Create a schematic rectangular roof at 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Genera una losa de cimentación de 1m de espesor.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Create a 1m thick structural footing slab.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Exporta todos los muros con 'Mark' a un archivo CSV.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Export all walls with a 'Mark' to a CSV file.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Create an intermediate level named 'Mezzanine' halfway between Level 1 and Level 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Cambia el material de todos los muros a 'Acero'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Acero\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Change the material of all walls to 'Steel'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Steel\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Éxito\", $\"Se eliminaron {unusedWallTypes.Count} tipos de muro no utilizados.\");\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Success\", $\"Deleted {unusedWallTypes.Count} unused wall types.\");\n}"}
{"prompt":"Añade una línea de rejilla U en un muro cortina a 3m desde el origen.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Add a U grid line to a curtain wall at 3m from the origin.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Añade una línea de rejilla V en un muro cortina a 2m de altura.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Add a V grid line to a curtain wall at 2m height.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Activa todos los segmentos en la primera línea de rejilla U.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Activate all segments on the first U grid line.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Añade montantes en la línea de rejilla U seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla de muro cortina\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Add mullions to the selected U grid line.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a curtain grid line\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Aísla la rejilla V seleccionada y añade solo un segmento.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla V\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Isolate the selected V gridline and add only one segment.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a V grid line\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Crea una nueva fase 'Fase 3 - Ejecución'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Fase 3 - Ejecución\";"}
{"prompt":"Create a new phase 'Phase 3 - Execution'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Phase 3 - Execution\";"}
{"prompt":"Asigna la demolición de los muros seleccionados a la 'Fase 3 - Ejecución'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Fase 3 - Ejecución\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Assign the demolition of selected walls to 'Phase 3 - Execution'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Phase 3 - Execution\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Cambia el primer tipo de muro curvo a un tipo estructural.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curved);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Change the first curved wall type to a structural type.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curtain);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Cambia el material de los paneles de muro cortina a 'Vidrio' si no tienen material.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Set curtain panel material to 'Glass' if unassigned.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 200mm' y nómbralo 'Muro_Dibujo'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Genérico - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Muro_Dibujo\");"}
{"prompt":"Duplicate wall type 'Generic - 200mm' and name it 'Drawing_Wall'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Generic - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Drawing_Wall\");"}
{"prompt":"Exporta los IDs y las elevaciones de los niveles a un archivo CSV.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Export level IDs and elevations to a CSV file.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Elimina todos los montantes (mullions) desbloqueados de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Delete all unlocked mullions from a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Crea un nuevo tipo de muro llamado 'Muro Genérico - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Muro Genérico - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Create a new wall type named 'Generic Wall - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Generic Wall - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Change the type of all selected walls to 'Exterior Wall - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Exterior Wall - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
