{"prompt":"Crea un muro de 5 metros de largo y 3 metros de alto.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nLine line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\nWall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);"}
{"prompt":"Create a wall 5 meters long and 3 meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nLine line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\nWall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);"}
{"prompt":"Dibuja una pared de 5m de largo por 3m de altura.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nLine line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\nWall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);"}
{"prompt":"Inserta una ventana de 1 metro de ancho y 1.2 metros de alto en un muro.","completion":"FamilySymbol windowSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nLevel level = doc.GetElement(hostWall.LevelId) as Level;\nXYZ insertionPoint = (hostWall.Location as LocationCurve).Curve.Evaluate(0.5, true);\ndoc.Create.NewFamilyInstance(insertionPoint, windowSymbol, hostWall, level, StructuralType.NonStructural);"}
{"prompt":"Insert a window 1m wide and 1.2m high into a wall.","completion":"FamilySymbol windowSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nLevel level = doc.GetElement(hostWall.LevelId) as Level;\nXYZ insertionPoint = (hostWall.Location as LocationCurve).Curve.Evaluate(0.5, true);\ndoc.Create.NewFamilyInstance(insertionPoint, windowSymbol, hostWall, level, StructuralType.NonStructural);"}
{"prompt":"Coloca una ventana de 1x1.2 metros en la pared más cercana.","completion":"FamilySymbol windowSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nLevel level = doc.GetElement(hostWall.LevelId) as Level;\nXYZ insertionPoint = (hostWall.Location as LocationCurve).Curve.Evaluate(0.5, true);\ndoc.Create.NewFamilyInstance(insertionPoint, windowSymbol, hostWall, level, StructuralType.NonStructural);"}
{"prompt":"Crea una columna estructural en la posición X=10, Y=5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\ndoc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0), columnSymbol, level, StructuralType.Column);"}
{"prompt":"Create a structural column at position X=10, Y=5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\ndoc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0), columnSymbol, level, StructuralType.Column);"}
{"prompt":"Pon un pilar estructural en las coordenadas 10,5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\ndoc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0), columnSymbol, level, StructuralType.Column);"}
{"prompt":"Genera un piso rectangular de 10×8 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\ndouble width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\ndouble length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\nCurveLoop loop = new CurveLoop();\nloop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\nloop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\nloop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\nloop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\nFloor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);"}
{"prompt":"Generate a rectangular floor of 10x8 meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\ndouble width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\ndouble length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\nCurveLoop loop = new CurveLoop();\nloop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\nloop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\nloop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\nloop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\nFloor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);"}
{"prompt":"Crea un suelo con un contorno de 10 por 8 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\ndouble width = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\ndouble length = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\nCurveLoop loop = new CurveLoop();\nloop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(width,0,0)));\nloop.Append(Line.CreateBound(new XYZ(width,0,0), new XYZ(width,length,0)));\nloop.Append(Line.CreateBound(new XYZ(width,length,0), new XYZ(0,length,0)));\nloop.Append(Line.CreateBound(new XYZ(0,length,0), new XYZ(0,0,0)));\nFloor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);"}
{"prompt":"Crea un muro cortina de 6 metros de ancho y 4 metros de alto.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nLine baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\nWall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);"}
{"prompt":"Create a curtain wall 6 meters wide and 4 meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nLine baseLine = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\nWall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);"}
{"prompt":"Crea 8 ejes horizontales separados por 10 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create 8 horizontal grids spaced 10 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Genera ocho rejillas horizontales con una separación de 10m.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea 4 ejes en sentido vertical separados 10 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<4; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create 4 vertical grids spaced 10 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<4; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea columnas en cada intersección de ejes.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\nfor (int i = 0; i < grids.Count; i++)\n{\n    for (int j = i + 1; j < grids.Count; j++)\n    {\n        IntersectionResultArray results;\n        grids[i].Curve.Intersect(grids[j].Curve, out results);\n        if(results != null)\n        {\n             foreach (IntersectionResult ir in results)\n             {\n                 doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n             }\n        }\n    }\n}"}
{"prompt":"Create columns at each grid intersection.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\nfor (int i = 0; i < grids.Count; i++)\n{\n    for (int j = i + 1; j < grids.Count; j++)\n    {\n        IntersectionResultArray results;\n        grids[i].Curve.Intersect(grids[j].Curve, out results);\n        if(results != null)\n        {\n             foreach (IntersectionResult ir in results)\n             {\n                 doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n             }\n        }\n    }\n}"}
{"prompt":"Coloca pilares en todos los cruces de la rejilla.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\nfor (int i = 0; i < grids.Count; i++)\n{\n    for (int j = i + 1; j < grids.Count; j++)\n    {\n        IntersectionResultArray results;\n        grids[i].Curve.Intersect(grids[j].Curve, out results);\n        if(results != null)\n        {\n             foreach (IntersectionResult ir in results)\n             {\n                 doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n             }\n        }\n    }\n}"}
{"prompt":"Crea vigas entre las columnas alineadas horizontalmente.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\nfor(int i=0; i < columns.Count - 1; i++)\n{\n    LocationPoint p1 = columns[i].Location as LocationPoint;\n    LocationPoint p2 = columns[i+1].Location as LocationPoint;\n    if (Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n    {\n        Line line = Line.CreateBound(p1.Point, p2.Point);\n        doc.Create.NewFamilyInstance(line, beamSymbol, level, StructuralType.Beam);\n    }\n}"}
{"prompt":"Create beams between horizontally aligned columns.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nList<FamilyInstance> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\nfor(int i=0; i < columns.Count - 1; i++)\n{\n    LocationPoint p1 = columns[i].Location as LocationPoint;\n    LocationPoint p2 = columns[i+1].Location as LocationPoint;\n    if (Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n    {\n        Line line = Line.CreateBound(p1.Point, p2.Point);\n        doc.Create.NewFamilyInstance(line, beamSymbol, level, StructuralType.Beam);\n    }\n}"}
{"prompt":"Acota la longitud de un muro seleccionado por el usuario.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro para acotar\");\nWall wall = doc.GetElement(wallRef) as Wall;\nLocationCurve locCurve = wall.Location as LocationCurve;\nLine wallLine = locCurve.Curve as Line;\nReferenceArray refs = new ReferenceArray();\nrefs.Append(wallLine.GetEndPointReference(0));\nrefs.Append(wallLine.GetEndPointReference(1));\nXYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\nXYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\nLine dimLine = Line.CreateBound(pt1, pt2);\ndoc.Create.NewDimension(doc.ActiveView, dimLine, refs);"}
{"prompt":"Dimension the length of a user-selected wall.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall to dimension\");\nWall wall = doc.GetElement(wallRef) as Wall;\nLocationCurve locCurve = wall.Location as LocationCurve;\nLine wallLine = locCurve.Curve as Line;\nReferenceArray refs = new ReferenceArray();\nrefs.Append(wallLine.GetEndPointReference(0));\nrefs.Append(wallLine.GetEndPointReference(1));\nXYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\nXYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\nLine dimLine = Line.CreateBound(pt1, pt2);\ndoc.Create.NewDimension(doc.ActiveView, dimLine, refs);"}
{"prompt":"Crea una puerta de 0.9m de ancho y 2.1m de alto en el muro.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol doorSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = doc.GetElement(hostWall.LevelId) as Level;\nXYZ insertionPoint = (hostWall.Location as LocationCurve).Curve.Evaluate(0.5, true);\ndoc.Create.NewFamilyInstance(insertionPoint, doorSymbol, hostWall, level, StructuralType.NonStructural);"}
{"prompt":"Create a door 0.9m wide and 2.1m high in the wall.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol doorSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = doc.GetElement(hostWall.LevelId) as Level;\nXYZ insertionPoint = (hostWall.Location as LocationCurve).Curve.Evaluate(0.5, true);\ndoc.Create.NewFamilyInstance(insertionPoint, doorSymbol, hostWall, level, StructuralType.NonStructural);"}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 4' a una elevación de 12 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nnewLevel.Name = \"Nivel 4\";"}
{"prompt":"Create a new Level named 'Level 4' at an elevation of 12 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nnewLevel.Name = \"Level 4\";"}
{"prompt":"Inserta una armadura (truss) de 6 metros entre dos puntos.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Trusses).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLine trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 10, 0));\ndoc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);"}
{"prompt":"Insert a 6-meter truss between two points.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Trusses).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLine trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 10, 0));\ndoc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);"}
{"prompt":"Crea una tubería con un diámetro de 150mm.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\nXYZ p1 = new XYZ(0,0,0);\nXYZ p2=new XYZ(5,0,0);\nPipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\npipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(150, UnitTypeId.Millimeters));"}
{"prompt":"Create a pipe with a 150mm diameter.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\nXYZ p1 = new XYZ(0,0,0);\nXYZ p2=new XYZ(5,0,0);\nPipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\npipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(150, UnitTypeId.Millimeters));"}
{"prompt":"Añade una etiqueta a la columna más cercana al origen.","completion":"View activeView = doc.ActiveView;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => (c.Location as LocationPoint).Point.DistanceTo(XYZ.Zero)).FirstOrDefault();\nLocationPoint loc = column.Location as LocationPoint;\nIndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);"}
{"prompt":"Add a tag to the column closest to the origin.","completion":"View activeView = doc.ActiveView;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => (c.Location as LocationPoint).Point.DistanceTo(XYZ.Zero)).FirstOrDefault();\nLocationPoint loc = column.Location as LocationPoint;\nIndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);"}
{"prompt":"Crea una escalera entre Nivel 1 y Nivel 2.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\nStairs.Create(doc, bottomLevel.Id, topLevel.Id);"}
{"prompt":"Create a stair between Level 1 and Level 2.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\nStairs.Create(doc, bottomLevel.Id, topLevel.Id);"}
{"prompt":"Modela un barandal en una escalera existente.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\nRailing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);"}
{"prompt":"Model a railing on an existing staircase.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfClass(typeof(Stairs)).FirstOrDefault() as Stairs;\nRailing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);"}
{"prompt":"Coloca un mueble en las coordenadas (2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\ndoc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), furnitureSymbol, level, StructuralType.NonStructural);"}
{"prompt":"Place a piece of furniture at coordinates (2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\ndoc.Create.NewFamilyInstance(new XYZ(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0), furnitureSymbol, level, StructuralType.NonStructural);"}
{"prompt":"Crea una cimentación de viga de 8 metros de largo.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLine line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), 0, 0));\ndoc.Create.NewFamilyInstance(line, foundationSymbol, level, StructuralType.Footing);"}
{"prompt":"Create an 8-meter long foundation beam.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLine line = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), 0, 0));\ndoc.Create.NewFamilyInstance(line, foundationSymbol, level, StructuralType.Footing);"}
{"prompt":"Añade refuerzo a una columna.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nRebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);"}
{"prompt":"Add reinforcement to a column.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault() as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nRebar.CreateFromRebarShape(doc, shape, barType, column, column.GetTransform().Origin, XYZ.BasisX, XYZ.BasisY);"}
{"prompt":"Fija el elemento seleccionado para que no se mueva.","completion":"UIDocument uidoc = new UIDocument(doc);\nElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\nElement elementToPin = doc.GetElement(selectedId);\nelementToPin.Pinned = true;"}
{"prompt":"Pin the selected element so it cannot be moved.","completion":"UIDocument uidoc = new UIDocument(doc);\nElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\nElement elementToPin = doc.GetElement(selectedId);\nelementToPin.Pinned = true;"}
{"prompt":"Crea un conducto eléctrico de 1 pulgada de diámetro.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nElementId conduitTypeId = Conduit.GetDefaultConduitTypeId(doc);\nXYZ start = new XYZ(0,0,3);\nXYZ end = new XYZ(5,0,3);\nConduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\nconduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Inches));"}
{"prompt":"Create an electrical conduit with a 1-inch diameter.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nElementId conduitTypeId = Conduit.GetDefaultConduitTypeId(doc);\nXYZ start = new XYZ(0,0,3);\nXYZ end = new XYZ(5,0,3);\nConduit conduit = Conduit.Create(doc, conduitTypeId, start, end, level.Id);\nconduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Inches));"}

{"prompt":"Genera un equipo eléctrico en X=1,Y=1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nXYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), 0);\ndoc.Create.NewFamilyInstance(point, panelSymbol, level, StructuralType.NonStructural);"}
{"prompt":"Generate an electrical panel at X=1,Y=1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nXYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), 0);\ndoc.Create.NewFamilyInstance(point, panelSymbol, level, StructuralType.NonStructural);"}
{"prompt":"Crea un nuevo nivel 'Nivel 3' a una elevación de 12 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nnewLevel.Name = \"Nivel 3\";"}
{"prompt":"Create a new level 'Level 3' at an elevation of 12 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nnewLevel.Name = \"Level 3\";"}
{"prompt":"Añade un nivel llamado 'Nivel Azotea' a 15.5 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nnewLevel.Name = \"Nivel Azotea\";"}
{"prompt":"Crea un muro en el Nivel 1 que vaya de (0,0,0) a (10,0,0) con una altura de 4 metros.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nXYZ p1 = new XYZ(0, 0, 0);\nXYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0);\nLine wallCurve = Line.CreateBound(p1, p2);\ndouble height = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nWall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);"}
{"prompt":"Create a wall on Level 1 from (0,0,0) to (10,0,0) with a height of 4 meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nXYZ p1 = new XYZ(0, 0, 0);\nXYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0);\nLine wallCurve = Line.CreateBound(p1, p2);\ndouble height = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nWall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);"}
{"prompt":"Dibuja un conducto de ventilación rectangular de 300x200 milímetros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nDuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).FirstOrDefault(d=>d.Shape==ConnectorProfileType.Rectangular) as DuctType;\nMEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s=>s.SystemClassification==MEPSystemClassification.SupplyAir);\nXYZ p1 = new XYZ(0,0,3); XYZ p2 = new XYZ(10,0,3);\nDuct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\nduct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM).Set(UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\nduct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM).Set(UnitUtils.ConvertToInternalUnits(200, UnitTypeId.Millimeters));"}
{"prompt":"Draw a 300x200 millimeter rectangular ventilation duct.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nDuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).FirstOrDefault(d=>d.Shape==ConnectorProfileType.Rectangular) as DuctType;\nMEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s=>s.SystemClassification==MEPSystemClassification.SupplyAir);\nXYZ p1 = new XYZ(0,0,3); XYZ p2 = new XYZ(10,0,3);\nDuct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\nduct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM).Set(UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\nduct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM).Set(UnitUtils.ConvertToInternalUnits(200, UnitTypeId.Millimeters));"}
{"prompt":"Coloca un terminal de aire en el extremo de un conducto.","completion":"FamilySymbol terminalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctTerminal).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nDuct duct = new FilteredElementCollector(doc).OfClass(typeof(Duct)).FirstOrDefault() as Duct;\nConnector connector = duct.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\ndoc.Create.NewFamilyInstance(connector, terminalSymbol);"}
{"prompt":"Place an air terminal at the end of a duct.","completion":"FamilySymbol terminalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctTerminal).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nDuct duct = new FilteredElementCollector(doc).OfClass(typeof(Duct)).FirstOrDefault() as Duct;\nConnector connector = duct.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\ndoc.Create.NewFamilyInstance(connector, terminalSymbol);"}
{"prompt":"Importa una topografía desde un archivo CSV.","completion":"string filePath = \"C:/Rutas/Comunes/terreno.csv\";\nTopographySurface.Create(doc, filePath, new CSVImportOptions());"}
{"prompt":"Import a topography from a CSV file.","completion":"string filePath = \"C:/Common/Paths/terrain.csv\";\nTopographySurface.Create(doc, filePath, new CSVImportOptions());"}
{"prompt":"Exporta el modelo actual a un archivo NWC.","completion":"string folderPath = \"C:/exports/\";\nstring fileName = doc.Title + \".nwc\";\nNavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Export the current model to an NWC file.","completion":"string folderPath = \"C:/exports/\";\nstring fileName = doc.Title + \".nwc\";\nNavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Rellena el parámetro de material de todos los muros con 'Concreto'.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concreto\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(Wall w in walls)\n{\n    Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n    if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n}"}
{"prompt":"Fill the material parameter of all walls with 'Concrete'.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concrete\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(Wall w in walls)\n{\n    Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n    if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n}"}
{"prompt":"Crea un nuevo tipo de muro de 25cm llamado 'Muro Estructural 25cm'.","completion":"string newTypeName = \"Muro Estructural 25cm\";\nWallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\nCompoundStructure cs = newWallType.GetCompoundStructure();\nint coreLayerIndex = cs.GetFirstCoreLayerIndex();\ncs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\ncs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(0.25, UnitTypeId.Meters));\nnewWallType.SetCompoundStructure(cs);"}
{"prompt":"Create a new 25cm wall type named 'Structural Wall 25cm'.","completion":"string newTypeName = \"Structural Wall 25cm\";\nWallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\nCompoundStructure cs = newWallType.GetCompoundStructure();\nint coreLayerIndex = cs.GetFirstCoreLayerIndex();\ncs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\ncs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(0.25, UnitTypeId.Meters));\nnewWallType.SetCompoundStructure(cs);"}
{"prompt":"Carga la familia 'Mesa.rfa' y colócala en (5,5,0) en el Nivel 1.","completion":"string familyPath = \"C:/Rutas/Comunes/Mesa.rfa\";\nFamily deskFamily;\ndoc.LoadFamily(familyPath, out deskFamily);\nFamilySymbol deskSymbol = doc.GetElement(deskFamily.GetFamilySymbolIds().First()) as FamilySymbol;\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nXYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\ndoc.Create.NewFamilyInstance(point, deskSymbol, level1, StructuralType.NonStructural);"}
{"prompt":"Load the 'Table.rfa' family and place it at (5,5,0) on Level 1.","completion":"string familyPath = \"C:/Common/Paths/Table.rfa\";\nFamily tableFamily;\ndoc.LoadFamily(familyPath, out tableFamily);\nFamilySymbol tableSymbol = doc.GetElement(tableFamily.GetFamilySymbolIds().First()) as FamilySymbol;\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nXYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\ndoc.Create.NewFamilyInstance(point, tableSymbol, level1, StructuralType.NonStructural);"}
{"prompt":"Modela un plafón a 2.8 metros de altura en Nivel 1.","completion":"CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nCurveLoop profile = new CurveLoop();\nprofile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0)));\nprofile.Append(Line.CreateBound(new XYZ(10,0,0), new XYZ(10,10,0)));\nprofile.Append(Line.CreateBound(new XYZ(10,10,0), new XYZ(0,10,0)));\nprofile.Append(Line.CreateBound(new XYZ(0,10,0), new XYZ(0,0,0)));\nCeiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\nParameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\nheightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));"}
{"prompt":"Model a ceiling at a height of 2.8 meters on Level 1.","completion":"CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nCurveLoop profile = new CurveLoop();\nprofile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0)));\nprofile.Append(Line.CreateBound(new XYZ(10,0,0), new XYZ(10,10,0)));\nprofile.Append(Line.CreateBound(new XYZ(10,10,0), new XYZ(0,10,0)));\nprofile.Append(Line.CreateBound(new XYZ(0,10,0), new XYZ(0,0,0)));\nCeiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\nParameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\nheightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));"}
{"prompt":"Crea una nueva habitación en el Nivel 1 en el punto (10, 10).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nUV point = new UV(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\nRoom room = doc.Create.NewRoom(level1, point);"}
{"prompt":"Create a new room on Level 1 at point (10, 10).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nUV point = new UV(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\nRoom room = doc.Create.NewRoom(level1, point);"}
{"prompt":"Crea un techo por contorno en el 'Nivel de Cubierta'.","completion":"Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel de Cubierta\") as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nCurveLoop roofProfile = new CurveLoop();\nroofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20,0,0)));\nroofProfile.Append(Line.CreateBound(new XYZ(20,0,0), new XYZ(20,30,0)));\nroofProfile.Append(Line.CreateBound(new XYZ(20,30,0), new XYZ(0,30,0)));\nroofProfile.Append(Line.CreateBound(new XYZ(0,30,0), new XYZ(0,0,0)));\nModelCurveArray mapping = new ModelCurveArray();\ndoc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);"}
{"prompt":"Create a roof by footprint on the 'Roof Level'.","completion":"Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Roof Level\") as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nCurveLoop roofProfile = new CurveLoop();\nroofProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(20,0,0)));\nroofProfile.Append(Line.CreateBound(new XYZ(20,0,0), new XYZ(20,30,0)));\nroofProfile.Append(Line.CreateBound(new XYZ(20,30,0), new XYZ(0,30,0)));\nroofProfile.Append(Line.CreateBound(new XYZ(0,30,0), new XYZ(0,0,0)));\nModelCurveArray mapping = new ModelCurveArray();\ndoc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);"}
{"prompt":"Elimina todas las líneas de detalle en la vista activa.","completion":"ICollection<ElementId> detailLines = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(DetailLine)).ToElementIds();\ndoc.Delete(detailLines);"}
{"prompt":"Delete all detail lines in the active view.","completion":"ICollection<ElementId> detailLines = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(DetailLine)).ToElementIds();\ndoc.Delete(detailLines);"}
{"prompt":"Une la geometría de una columna y un suelo que se cruzan.","completion":"Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\nJoinGeometryUtils.JoinGeometry(doc, column, floor);"}
{"prompt":"Join the geometry of an intersecting column and floor.","completion":"Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\nJoinGeometryUtils.JoinGeometry(doc, column, floor);"}
{"prompt":"Rota el norte del proyecto 30 grados en sentido horario.","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsSurveyPoint);\ndouble angleInDegrees = 30.0;\ndouble angleInRadians = -(angleInDegrees * Math.PI / 180.0);\nLine axis = Line.CreateBound(projectBasePoint.Position, projectBasePoint.Position + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);"}
{"prompt":"Rotate project north 30 degrees clockwise.","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsSurveyPoint);\ndouble angleInDegrees = 30.0;\ndouble angleInRadians = -(angleInDegrees * Math.PI / 180.0);\nLine axis = Line.CreateBound(projectBasePoint.Position, projectBasePoint.Position + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angleInRadians);"}
{"prompt":"Pinta la cara interior de los muros exteriores con 'Pintura Blanca'.","completion":"Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Pintura Blanca\") as Material;\nvar exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior).ToList();\nforeach (Wall w in exteriorWalls)\n{\n    Face interiorFace = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior).FirstOrDefault();\n    if (interiorFace != null) doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n}"}
{"prompt":"Paint the interior face of exterior walls with 'White Paint'.","completion":"Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"White Paint\") as Material;\nvar exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior).ToList();\nforeach (Wall w in exteriorWalls)\n{\n    Face interiorFace = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior).FirstOrDefault();\n    if (interiorFace != null) doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n}"}
{"prompt":"Obtén el elemento anfitrión de la primera ventana que encuentres.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nElement hostElement = windowInstance.Host;"}
{"prompt":"Get the host element of the first window found.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nElement hostElement = windowInstance.Host;"}
{"prompt":"Calcula la longitud total de todos los ductos de Suministro de Aire.","completion":"List<Duct> ducts = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctCurves).WhereElementIsNotElementType().Cast<Duct>().Where(d => d.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString() == \"SupplyAir\").ToList();\ndouble totalLength = 0.0;\nforeach (Duct d in ducts)\n{\n    totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}"}
{"prompt":"Calculate the total length of all Supply Air ducts.","completion":"List<Duct> ducts = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctCurves).WhereElementIsNotElementType().Cast<Duct>().Where(d => d.get_Parameter(BuiltInParameter.RBS_SYSTEM_CLASSIFICATION_PARAM).AsString() == \"SupplyAir\").ToList();\ndouble totalLength = 0.0;\nforeach (Duct d in ducts)\n{\n    totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}"}
{"prompt":"Añade una línea de rejilla horizontal a un muro cortina a 1.5 metros de altura.","completion":"Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.CurtainGrid != null) as Wall;\nCurtainGrid cg = cw.CurtainGrid;\ncg.AddGridLine(false, new XYZ(0,0, UnitUtils.ConvertToInternalUnits(1.5, UnitTypeId.Meters)), false);"}
{"prompt":"Add a horizontal grid line to a curtain wall at a height of 1.5 meters.","completion":"Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.CurtainGrid != null) as Wall;\nCurtainGrid cg = cw.CurtainGrid;\ncg.AddGridLine(false, new XYZ(0,0, UnitUtils.ConvertToInternalUnits(1.5, UnitTypeId.Meters)), false);"}
{"prompt":"Encuentra un muro buscando el valor 'W-01' en su parámetro de Marca.","completion":"string markValue = \"W-01\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue, false);\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().WherePasses(filter).FirstOrDefault() as Wall;"}
{"prompt":"Find a wall by searching for the value 'W-01' in its Mark parameter.","completion":"string markValue = \"W-01\";\nElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, markValue, false);\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().WherePasses(filter).FirstOrDefault() as Wall;"}
{"prompt":"Alinea las líneas de centro de dos muros seleccionados por el usuario.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer muro (el que se moverá)\");\nReference r2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo muro (el de referencia)\");\nWall w1 = doc.GetElement(r1) as Wall;\nWall w2 = doc.GetElement(r2) as Wall;\nLocationCurve lc1 = w1.Location as LocationCurve;\nLocationCurve lc2 = w2.Location as LocationCurve;\ndoc.Create.NewAlignment(doc.ActiveView, lc1.Curve.Reference, lc2.Curve.Reference);"}
{"prompt":"Align the centerlines of two user-selected walls.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first wall (the one that will move)\");\nReference r2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second wall (the reference)\");\nWall w1 = doc.GetElement(r1) as Wall;\nWall w2 = doc.GetElement(r2) as Wall;\nLocationCurve lc1 = w1.Location as LocationCurve;\nLocationCurve lc2 = w2.Location as LocationCurve;\ndoc.Create.NewAlignment(doc.ActiveView, lc1.Curve.Reference, lc2.Curve.Reference);"}
{"prompt":"Crea una superficie topográfica a partir de una lista de 4 puntos.","completion":"IList<XYZ> points = new List<XYZ>\n{\n    new XYZ(0, 0, 0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters))\n};\nTopographySurface.Create(doc, points);"}
{"prompt":"Create a topography surface from a list of 4 points.","completion":"IList<XYZ> points = new List<XYZ>\n{\n    new XYZ(0, 0, 0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters))\n};\nTopographySurface.Create(doc, points);"}
{"prompt":"Calcula el volumen total de las barras de refuerzo de 12mm.","completion":"double totalVolume = 0;\nRebarBarType barType12mm = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).Cast<RebarBarType>().FirstOrDefault(bt => bt.BarDiameter == UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Millimeters));\nvar rebars = new FilteredElementCollector(doc).OfClass(typeof(Rebar)).Where(r => (r as Rebar).GetTypeId() == barType12mm.Id).Cast<Rebar>();\nforeach (Rebar r in rebars)\n{\n    totalVolume += r.GetVolume();\n}"}
{"prompt":"Calculate the total volume of 12mm rebar.","completion":"double totalVolume = 0;\nRebarBarType barType12mm = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).Cast<RebarBarType>().FirstOrDefault(bt => bt.BarDiameter == UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Millimeters));\nvar rebars = new FilteredElementCollector(doc).OfClass(typeof(Rebar)).Where(r => (r as Rebar).GetTypeId() == barType12mm.Id).Cast<Rebar>();\nforeach (Rebar r in rebars)\n{\n    totalVolume += r.GetVolume();\n}"}
{"prompt":"Cambia el nombre de todas las vistas de planta para que empiecen con 'ARQ_'.","completion":"string prefix = \"ARQ_\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}

{"prompt":"Rename all plan views to start with 'ARCH_'.","completion":"string prefix = \"ARCH_\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Añade el prefijo 'PLANTA-' a todas las vistas de plano.","completion":"string prefix = \"PLANTA-\";\nList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate).ToList();\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Crea una copia de la vista activa y nómbrala 'Copia de Trabajo'.","completion":"View activeView = doc.ActiveView;\nElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\nView newView = doc.GetElement(newViewId) as View;\nnewView.Name = \"Copia de Trabajo\";"}
{"prompt":"Duplicate the active view and name it 'Working Copy'.","completion":"View activeView = doc.ActiveView;\nElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\nView newView = doc.GetElement(newViewId) as View;\nnewView.Name = \"Working Copy\";"}
{"prompt":"Crea una vista 3D por defecto.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\nView3D view3d = View3D.CreateIsometric(doc, vft.Id);"}
{"prompt":"Create a default 3D view.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\nView3D view3d = View3D.CreateIsometric(doc, vft.Id);"}
{"prompt":"Crea una losa inclinada con una pendiente del 2% sobre un área de 8x6 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nXYZ p1 = new XYZ(0,0,0);\nXYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0);\nCurveLoop profile = CurveLoop.CreateViaRectangle(p1, p2);\nFloor slopedSlab = Floor.Create(doc, new List<CurveLoop>{profile}, floorType.Id, level.Id);\nslopedSlab.get_Parameter(BuiltInParameter.ROOF_SLOPE).Set(0.02);"}
{"prompt":"Create a sloped slab with a 2% slope over an 8x6 meter area.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nXYZ p1 = new XYZ(0,0,0);\nXYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0);\nCurveLoop profile = CurveLoop.CreateViaRectangle(p1, p2);\nFloor slopedSlab = Floor.Create(doc, new List<CurveLoop>{profile}, floorType.Id, level.Id);\nslopedSlab.get_Parameter(BuiltInParameter.ROOF_SLOPE).Set(0.02);"}
{"prompt":"Añade un codo de 90 grados entre dos tuberías.","completion":"List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Take(2).ToList();\nConnector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\nConnector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\ndoc.Create.NewElbowFitting(c1, c2);"}
{"prompt":"Add a 90-degree elbow between two pipes.","completion":"List<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Take(2).ToList();\nConnector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\nConnector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\ndoc.Create.NewElbowFitting(c1, c2);"}
{"prompt":"Coloca una cota de elevación en el Nivel 1.","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nReference levelRef = new Reference(lvl1);\nXYZ origin = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), lvl1.Elevation);\nXYZ leaderEnd = origin + new XYZ(2,2,0);\ndoc.Create.NewSpotElevation(doc.ActiveView, levelRef, origin, origin, leaderEnd, true, true);"}
{"prompt":"Place a spot elevation on Level 1.","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nReference levelRef = new Reference(lvl1);\nXYZ origin = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), lvl1.Elevation);\nXYZ leaderEnd = origin + new XYZ(2,2,0);\ndoc.Create.NewSpotElevation(doc.ActiveView, levelRef, origin, origin, leaderEnd, true, true);"}
{"prompt":"Exporta la vista 3D activa a NWC para Navisworks.","completion":"View3D view3d = doc.ActiveView as View3D;\nstring folderPath = \"C:/RevitExports/\";\nstring fileName = view3d.Name + \".nwc\";\nNavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.View;\noptions.ViewId = view3d.Id;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Export the current 3D view to NWC for Navisworks.","completion":"View3D view3d = doc.ActiveView as View3D;\nstring folderPath = \"C:/RevitExports/\";\nstring fileName = view3d.Name + \".nwc\";\nNavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.View;\noptions.ViewId = view3d.Id;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Aplica refuerzo a una viga con estribos espaciados cada 30 cm.","completion":"RebarBarType stirrupType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault(s => s.RebarStyle == RebarStyle.StirrupTie) as RebarShape;\nFamilyInstance beam = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nIList<Curve> curves = new List<Curve>();\ncurves.Add(Line.CreateBound(new XYZ(0,0,0), new XYZ(1,0,0)));\nRebar rebar = Rebar.CreateFromCurves(doc, RebarStyle.StirrupTie, stirrupType, null, null, beam, XYZ.BasisZ, curves, RebarHookOrientation.Right, RebarHookOrientation.Right, true, true);\nrebar.GetRebarLayoutRule().SetLayoutAsMaximumSpacing(UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters), rebar.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble(), true, true, true);"}
{"prompt":"Apply beam reinforcement with stirrups spaced every 30 cm.","completion":"RebarBarType stirrupType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault(s => s.RebarStyle == RebarStyle.StirrupTie) as RebarShape;\nFamilyInstance beam = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nIList<Curve> curves = new List<Curve>();\ncurves.Add(Line.CreateBound(new XYZ(0,0,0), new XYZ(1,0,0)));\nRebar rebar = Rebar.CreateFromCurves(doc, RebarStyle.StirrupTie, stirrupType, null, null, beam, XYZ.BasisZ, curves, RebarHookOrientation.Right, RebarHookOrientation.Right, true, true);\nrebar.GetRebarLayoutRule().SetLayoutAsMaximumSpacing(UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters), rebar.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble(), true, true, true);"}
{"prompt":"Obtén todas las habitaciones que están en el Nivel 3.","completion":"Level level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 3\") as Level;\nList<Element> roomsOnLevel3 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level3.Id).ToList();"}
{"prompt":"Get all rooms on Level 3.","completion":"Level level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nList<Element> roomsOnLevel3 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level3.Id).ToList();"}
{"prompt":"Crea una vista de sección llamada 'Sección Longitudinal'.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\nBoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\nsectionBox.Min = new XYZ(-10, -1, 0);\nsectionBox.Max = new XYZ(10, 1, 10);\nTransform transform = Transform.Identity;\nsectionBox.Transform = transform;\nViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\nsectionView.Name = \"Sección Longitudinal\";"}
{"prompt":"Create a section view named 'Longitudinal Section'.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\nBoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\nsectionBox.Min = new XYZ(-10, -1, 0);\nsectionBox.Max = new XYZ(10, 1, 10);\nTransform transform = Transform.Identity;\nsectionBox.Transform = transform;\nViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\nsectionView.Name = \"Longitudinal Section\";"}
{"prompt":"Cambia el nivel de detalle de la vista activa a 'Medio'.","completion":"View activeView = doc.ActiveView;\nactiveView.DetailLevel = ViewDetailLevel.Medium;"}
{"prompt":"Change the detail level of the active view to 'Medium'.","completion":"View activeView = doc.ActiveView;\nactiveView.DetailLevel = ViewDetailLevel.Medium;"}
{"prompt":"Genera un grupo a partir de la selección actual y muévelo 10 metros a la derecha.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nGroup group = doc.Create.NewGroup(selectedIds);\nXYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0);\nElementTransformUtils.MoveElement(doc, group.Id, translation);"}
{"prompt":"Create a group from the current selection and move it 10 meters to the right.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nGroup group = doc.Create.NewGroup(selectedIds);\nXYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0);\nElementTransformUtils.MoveElement(doc, group.Id, translation);"}
{"prompt":"Obtén todas las instancias de la categoría Mobiliario.","completion":"List<Element> furnitureInstances = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToList();"}
{"prompt":"Get all instances of the Furniture category.","completion":"List<Element> furnitureInstances = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToList();"}
{"prompt":"Ajusta la región de recorte de la vista a un rectángulo de (0,0) a (20,20).","completion":"View view = doc.ActiveView;\nBoundingBoxXYZ cropBox = view.CropBox;\nXYZ minPoint = new XYZ(UnitUtils.ConvertToInternalUnits(0, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(0, UnitTypeId.Meters), cropBox.Min.Z);\nXYZ maxPoint = new XYZ(UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters), cropBox.Max.Z);\ncropBox.Min = minPoint;\ncropBox.Max = maxPoint;\nview.CropBox = cropBox;"}
{"prompt":"Adjust the view's crop region to a rectangle from (0,0) to (20,20).","completion":"View view = doc.ActiveView;\nBoundingBoxXYZ cropBox = view.CropBox;\nXYZ minPoint = new XYZ(UnitUtils.ConvertToInternalUnits(0, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(0, UnitTypeId.Meters), cropBox.Min.Z);\nXYZ maxPoint = new XYZ(UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters), cropBox.Max.Z);\ncropBox.Min = minPoint;\ncropBox.Max = maxPoint;\nview.CropBox = cropBox;"}
{"prompt":"Dibuja una curva spline que pase por tres puntos.","completion":"IList<XYZ> points = new List<XYZ>\n{\n    new XYZ(0,0,0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0)\n};\nNurbSpline spline = NurbSpline.Create(points);\nPlane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, XYZ.Zero);\nSketchPlane sp = SketchPlane.Create(doc, plane);\ndoc.Create.NewModelCurve(spline, sp);"}
{"prompt":"Draw a spline curve passing through three points.","completion":"IList<XYZ> points = new List<XYZ>\n{\n    new XYZ(0,0,0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0)\n};\nNurbSpline spline = NurbSpline.Create(points);\nPlane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, XYZ.Zero);\nSketchPlane sp = SketchPlane.Create(doc, plane);\ndoc.Create.NewModelCurve(spline, sp);"}
{"prompt":"Activa todos los símbolos de familia cargados en el proyecto.","completion":"List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) \n    {\n        sym.Activate();\n    }\n}"}
{"prompt":"Activate all family symbols loaded in the project.","completion":"List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) \n    {\n        sym.Activate();\n    }\n}"}
{"prompt":"Crea un filtro de vista para ocultar muros demolidos.","completion":"Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).FirstOrDefault(p => p.Name.Contains(\"Demolished\") || p.Name.Contains(\"Demolición\"));\nElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\nFilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\nElementFilter filter = new ElementParameterFilter(rule);\nParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Filtro Demolición\", new List<ElementId>{ new ElementId(BuiltInCategory.OST_Walls) }, filter);\ndoc.ActiveView.AddFilter(pfe.Id);\ndoc.ActiveView.SetFilterVisibility(pfe.Id, false);"}
{"prompt":"Create a view filter to hide demolished walls.","completion":"Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).FirstOrDefault(p => p.Name.Contains(\"Demolished\") || p.Name.Contains(\"Demolición\"));\nElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\nFilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\nElementFilter filter = new ElementParameterFilter(rule);\nParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Demolition Filter\", new List<ElementId>{ new ElementId(BuiltInCategory.OST_Walls) }, filter);\ndoc.ActiveView.AddFilter(pfe.Id);\ndoc.ActiveView.SetFilterVisibility(pfe.Id, false);"}
{"prompt":"Aplica un color rojo a todas las ventanas en la vista activa.","completion":"View activeView = doc.ActiveView;\nOverrideGraphicSettings ogs = new OverrideGraphicSettings();\nogs.SetProjectionLineColor(new Color(255, 0, 0));\nICollection<ElementId> windows = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().ToElementIds();\nforeach (ElementId windowId in windows)\n{\n    activeView.SetElementOverrides(windowId, ogs);\n}"}
{"prompt":"Apply a red color to all windows in the active view.","completion":"View activeView = doc.ActiveView;\nOverrideGraphicSettings ogs = new OverrideGraphicSettings();\nogs.SetProjectionLineColor(new Color(255, 0, 0));\nICollection<ElementId> windows = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().ToElementIds();\nforeach (ElementId windowId in windows)\n{\n    activeView.SetElementOverrides(windowId, ogs);\n}"}
{"prompt":"Crea un Path of Travel entre los puntos (1,1) y (10,10) en la vista de planta.","completion":"ViewPlan viewPlan = doc.ActiveView as ViewPlan;\nXYZ startPoint = new XYZ(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), viewPlan.GenLevel.Elevation);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), viewPlan.GenLevel.Elevation);\nPathOfTravel.Create(viewPlan, startPoint, endPoint);"}
{"prompt":"Create a Path of Travel between points (1,1) and (10,10) in the plan view.","completion":"ViewPlan viewPlan = doc.ActiveView as ViewPlan;\nXYZ startPoint = new XYZ(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), viewPlan.GenLevel.Elevation);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), viewPlan.GenLevel.Elevation);\nPathOfTravel.Create(viewPlan, startPoint, endPoint);"}
{"prompt":"Inserta una nota de texto con 'Revisar' en la vista actual.","completion":"View activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\nXYZ position = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nTextNote.Create(doc, activeView.Id, position, \"Revisar\", defaultTypeId);"}
{"prompt":"Insert a text note with 'Review' in the current view.","completion":"View activeView = doc.ActiveView;\nElementId defaultTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);\nXYZ position = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nTextNote.Create(doc, activeView.Id, position, \"Review\", defaultTypeId);"}
{"prompt":"Mueve un elemento seleccionado a la posición (5,5).","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para mover\");\nElement elem = doc.GetElement(pickedRef);\nLocationPoint lp = elem.Location as LocationPoint;\nXYZ newPosition = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), lp.Point.Z);\nlp.Point = newPosition;"}
{"prompt":"Move a selected element to position (5,5).","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to move\");\nElement elem = doc.GetElement(pickedRef);\nLocationPoint lp = elem.Location as LocationPoint;\nXYZ newPosition = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), lp.Point.Z);\nlp.Point = newPosition;"}
{"prompt":"Dibuja una región rellena con patrón diagonal.","completion":"View activeView = doc.ActiveView;\nFillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.GetFillPattern().IsSolidFill == false) as FillPatternElement;\nFilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\nFilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\nnewType.ForegroundPatternId = fillPattern.Id;\nCurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(5,5,0));\nFilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop>{profile});"}
{"prompt":"Draw a filled region with a diagonal pattern.","completion":"View activeView = doc.ActiveView;\nFillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.GetFillPattern().IsSolidFill == false) as FillPatternElement;\nFilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\nFilledRegionType newType = filledRegionType.Duplicate(\"Temp Diagonal Region\") as FilledRegionType;\nnewType.ForegroundPatternId = fillPattern.Id;\nCurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(5,5,0));\nFilledRegion.Create(doc, newType.Id, activeView.Id, new List<CurveLoop>{profile});"}
{"prompt":"Crea un nuevo parámetro de proyecto de tipo texto, llamado 'Clasificación de Espacio', y aplícalo a la categoría de habitaciones.","completion":"string paramName = \"Clasificación de Espacio\";\nCategory roomCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Rooms);\nCategorySet catSet = doc.Application.Create.NewCategorySet();\ncatSet.Insert(roomCat);\nDefinitionFile sharedParamFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = sharedParamFile.Groups.get_Item(\"CustomParams\");\nif(group == null) group = sharedParamFile.Groups.Create(\"CustomParams\");\nDefinition definition = group.Definitions.get_Item(paramName);\nif(definition == null) definition = group.Definitions.Create(new ExternalDefinitionCreationOptions(paramName, SpecTypeId.String.Text));\nInstanceBinding binding = doc.Application.Create.NewInstanceBinding(catSet);\ndoc.ParameterBindings.Insert(definition, binding, BuiltInParameterGroup.PG_IDENTITY_DATA);"}
{"prompt":"Create a text project parameter named 'Space Classification' and apply it to the Rooms category.","completion":"string paramName = \"Space Classification\";\nCategory roomCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Rooms);\nCategorySet catSet = doc.Application.Create.NewCategorySet();\ncatSet.Insert(roomCat);\nDefinitionFile sharedParamFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = sharedParamFile.Groups.get_Item(\"CustomParams\");\nif(group == null) group = sharedParamFile.Groups.Create(\"CustomParams\");\nDefinition definition = group.Definitions.get_Item(paramName);\nif(definition == null) definition = group.Definitions.Create(new ExternalDefinitionCreationOptions(paramName, SpecTypeId.String.Text));\nInstanceBinding binding = doc.Application.Create.NewInstanceBinding(catSet);\ndoc.ParameterBindings.Insert(definition, binding, BuiltInParameterGroup.PG_IDENTITY_DATA);"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 1 a 'Clasificación Fuego - 90 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nList<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\nforeach(FamilyInstance door in doorsOnLevel1)\n{\n    Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n    commentsParam.Set(\"Clasificación Fuego - 90 min\");\n}"}
{"prompt":"Set the 'Comments' parameter for all doors on Level 1 to 'Fire Rating - 90 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nList<FamilyInstance> doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id).ToList();\nforeach(FamilyInstance door in doorsOnLevel1)\n{\n    Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n    commentsParam.Set(\"Fire Rating - 90 min\");\n}"}
{"prompt":"Exporta cada tabla de planificación a un archivo CSV individual.","completion":"string exportPath = \"C:/RevitExports/\";\nList<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => !vs.IsTemplate).ToList();\nViewScheduleExportOptions options = new ViewScheduleExportOptions();\noptions.FieldDelimiter = \",\";\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Export(exportPath, schedule.Name + \".csv\", options);\n}"}
{"prompt":"Export each schedule to an individual CSV file.","completion":"string exportPath = \"C:/RevitExports/\";\nList<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => !vs.IsTemplate).ToList();\nViewScheduleExportOptions options = new ViewScheduleExportOptions();\noptions.FieldDelimiter = \",\";\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Export(exportPath, schedule.Name + \".csv\", options);\n}"}

{"prompt":"Exporta el modelo a formato IFC4 para coordinación.","completion":"string folderPath = \"C:/RevitExports/\";\nstring fileName = doc.Title + \"-Coordination.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Export the model to IFC4 format for coordination.","completion":"string folderPath = \"C:/RevitExports/\";\nstring fileName = doc.Title + \"-Coordination.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Vincula un archivo DWG como referencia en la vista activa.","completion":"string filePath = \"C:/CAD_Files/Base_Plan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.ColorMode = ImportColorMode.Preserved;\nElementId linkedFileId;\ndoc.Link(filePath, options, doc.ActiveView, out linkedFileId);"}
{"prompt":"Link a DWG file as a reference in the active view.","completion":"string filePath = \"C:/CAD_Files/Base_Plan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.ColorMode = ImportColorMode.Preserved;\nElementId linkedFileId;\ndoc.Link(filePath, options, doc.ActiveView, out linkedFileId);"}
{"prompt":"Exporta todas las hojas de un conjunto a un único PDF.","completion":"ViewSheetSet sheetSet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheetSet)).FirstOrDefault() as ViewSheetSet;\nstring folderPath = \"C:/RevitExports/\";\nPDFExportOptions options = new PDFExportOptions();\noptions.Combine = true;\noptions.FileName = sheetSet.Name;\nList<ElementId> sheetIds = sheetSet.Views.Cast<ViewSheet>().Select(s => s.Id).ToList();\ndoc.Export(folderPath, sheetIds, options);"}
{"prompt":"Export all sheets in a set to a single combined PDF.","completion":"ViewSheetSet sheetSet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheetSet)).FirstOrDefault() as ViewSheetSet;\nstring folderPath = \"C:/RevitExports/\";\nPDFExportOptions options = new PDFExportOptions();\noptions.Combine = true;\noptions.FileName = sheetSet.Name;\nList<ElementId> sheetIds = sheetSet.Views.Cast<ViewSheet>().Select(s => s.Id).ToList();\ndoc.Export(folderPath, sheetIds, options);"}
{"prompt":"Crea una 'Caja de Referencia' (Scope Box) para el Bloque A.","completion":"string boxName = \"Bloque A\";\nBoundingBoxXYZ scopeBoxVolume = new BoundingBoxXYZ();\nscopeBoxVolume.Min = new XYZ(0,0,0);\nscopeBoxVolume.Max = new XYZ(UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(40, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\nScopeBox box = ScopeBox.Create(doc, scopeBoxVolume);\nbox.Name = boxName;"}
{"prompt":"Create a Scope Box for Block A.","completion":"string boxName = \"Block A\";\nBoundingBoxXYZ scopeBoxVolume = new BoundingBoxXYZ();\nscopeBoxVolume.Min = new XYZ(0,0,0);\nscopeBoxVolume.Max = new XYZ(UnitUtils.ConvertToInternalUnits(50, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(40, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters));\nScopeBox box = ScopeBox.Create(doc, scopeBoxVolume);\nbox.Name = boxName;"}
{"prompt":"Crea un barrido de muro en el primer muro que encuentres.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallSweepType sweepType = new FilteredElementCollector(doc).OfClass(typeof(WallSweepType)).FirstOrDefault() as WallSweepType;\nWallSweepInfo info = new WallSweepInfo(true, WallSweepType.Sweep);\ninfo.Distance = 0;\nWallSweep.Create(doc, wall.Id, sweepType.Id, info);"}
{"prompt":"Create a wall sweep on the first wall found.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallSweepType sweepType = new FilteredElementCollector(doc).OfClass(typeof(WallSweepType)).FirstOrDefault() as WallSweepType;\nWallSweepInfo info = new WallSweepInfo(true, WallSweepType.Sweep);\ninfo.Distance = 0;\nWallSweep.Create(doc, wall.Id, sweepType.Id, info);"}
{"prompt":"Obtén el espacio MEP asociado a la habitación 'Oficina 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Oficina 101\") as Room;\nMEPSpace space = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_MEPSpaces).Cast<MEPSpace>().FirstOrDefault(s => s.Room != null && s.Room.Id == room.Id);"}
{"prompt":"Get the MEP space associated with the room 'Office 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 101\") as Room;\nMEPSpace space = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_MEPSpaces).Cast<MEPSpace>().FirstOrDefault(s => s.Room != null && s.Room.Id == room.Id);"}
{"prompt":"Crea un nuevo material llamado 'Roble Oscuro' con un patrón de superficie de madera.","completion":"string materialName = \"Roble Oscuro\";\nElementId materialId = Material.Create(doc, materialName);\nMaterial material = doc.GetElement(materialId) as Material;\nFillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Wood\") || p.Name.Contains(\"Madera\")) as FillPatternElement;\nmaterial.SurfaceForegroundPatternId = fillPattern.Id;\nmaterial.Color = new Color(139, 69, 19);"}
{"prompt":"Create a new material named 'Dark Oak' with a wood surface pattern.","completion":"string materialName = \"Dark Oak\";\nElementId materialId = Material.Create(doc, materialName);\nMaterial material = doc.GetElement(materialId) as Material;\nFillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Wood\") || p.Name.Contains(\"Madera\")) as FillPatternElement;\nmaterial.SurfaceForegroundPatternId = fillPattern.Id;\nmaterial.Color = new Color(139, 69, 19);"}
{"prompt":"Establece la configuración de sol y sombra para la vista 3D activa a una fecha y hora.","completion":"View3D view3D = doc.ActiveView as View3D;\nSunAndShadowSettings settings = view3D.SunAndShadowSettings;\nsettings.SunAndShadowType = SunAndShadowType.Still;\nsettings.SetTimeAndDate(new DateTime(2024, 6, 21, 15, 30, 0));\nview3D.ShadowsOn = true;"}
{"prompt":"Set the sun and shadow settings for the active 3D view to a specific date and time.","completion":"View3D view3D = doc.ActiveView as View3D;\nSunAndShadowSettings settings = view3D.SunAndShadowSettings;\nsettings.SunAndShadowType = SunAndShadowType.Still;\nsettings.SetTimeAndDate(new DateTime(2024, 6, 21, 15, 30, 0));\nview3D.ShadowsOn = true;"}
{"prompt":"Crea una abertura rectangular en un suelo.","completion":"Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nXYZ p1 = new XYZ(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), 0);\nXYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0);\nCurveLoop profile = CurveLoop.CreateViaRectangle(p1, p2);\ndoc.Create.NewOpening(floor, profile, true);"}
{"prompt":"Create a rectangular opening in a floor.","completion":"Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nXYZ p1 = new XYZ(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters), 0);\nXYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0);\nCurveLoop profile = CurveLoop.CreateViaRectangle(p1, p2);\ndoc.Create.NewOpening(floor, profile, true);"}
{"prompt":"Cambia el estilo visual de la vista activa a 'Línea Oculta'.","completion":"View activeView = doc.ActiveView;\nactiveView.DisplayStyle = DisplayStyle.HLR;"}
{"prompt":"Change the visual style of the active view to 'Hidden Line'.","completion":"View activeView = doc.ActiveView;\nactiveView.DisplayStyle = DisplayStyle.HLR;"}
{"prompt":"Duplica la vista 'Nivel 1' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 1\") as ViewPlan;\nElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);"}
{"prompt":"Duplicate the 'Level 1' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 1\") as ViewPlan;\nElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);"}
{"prompt":"Coloca una cámara en la vista activa.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\nView3D cameraView = View3D.CreatePerspective(doc, vft.Id);\ncameraView.Name = \"Nueva Vista de Cámara\";\nXYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\nXYZ upDir = XYZ.BasisZ;\nXYZ forwardDir = XYZ.Zero - eyePos;\nViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\ncameraView.SetOrientation(orientation);"}
{"prompt":"Place a camera in the active view.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\nView3D cameraView = View3D.CreatePerspective(doc, vft.Id);\ncameraView.Name = \"New Camera View\";\nXYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\nXYZ upDir = XYZ.BasisZ;\nXYZ forwardDir = XYZ.Zero - eyePos;\nViewOrientation3D orientation = new ViewOrientation3D(eyePos, upDir, forwardDir);\ncameraView.SetOrientation(orientation);"}
{"prompt":"Obtén todas las habitaciones en el Nivel 'Planta Baja'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Planta Baja\") as Level;\nList<Element> roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();"}
{"prompt":"Get all rooms on the 'Ground Floor' Level.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Ground Floor\") as Level;\nList<Element> roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();"}
{"prompt":"Cambia el nivel de detalle de la vista actual a 'Bajo'.","completion":"View activeView = doc.ActiveView;\nactiveView.DetailLevel = ViewDetailLevel.Coarse;"}
{"prompt":"Change the detail level of the current view to 'Coarse'.","completion":"View activeView = doc.ActiveView;\nactiveView.DetailLevel = ViewDetailLevel.Coarse;"}
{"prompt":"Crea un SketchPlane en el Nivel 2.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nPlane plane = Plane.CreateByNormalAndOrigin(level2.GetPlane().Normal, level2.GetPlane().Origin);\nSketchPlane skp = SketchPlane.Create(doc, plane);"}
{"prompt":"Create a SketchPlane on Level 2.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nPlane plane = Plane.CreateByNormalAndOrigin(level2.GetPlane().Normal, level2.GetPlane().Origin);\nSketchPlane skp = SketchPlane.Create(doc, plane);"}
{"prompt":"Activa todos los FamilySymbol del proyecto.","completion":"List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (FamilySymbol sym in symbols)\n{\n    if (!sym.IsActive)\n    {\n        sym.Activate();\n    }\n}"}
{"prompt":"Activate all FamilySymbols in the project.","completion":"List<FamilySymbol> symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nforeach (FamilySymbol sym in symbols)\n{\n    if (!sym.IsActive)\n    {\n        sym.Activate();\n    }\n}"}
{"prompt":"Inicia y confirma una transacción para 'Modificar Proyecto'.","completion":""}
{"prompt":"Start and commit a transaction for 'Modify Project'.","completion":""}
{"prompt":"Crea un DirectShape con forma de caja de 2x2x2 metros.","completion":"TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\nds.SetShape(result.GetGeometricalObjects());\nds.Name = \"Caja DirectShape\";"}
{"prompt":"Create a DirectShape with a 2x2x2 meter box shape.","completion":"TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\ndouble size = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nXYZ p0=new XYZ(0,0,0); XYZ p1=new XYZ(size,0,0); XYZ p2=new XYZ(size,size,0); XYZ p3=new XYZ(0,size,0);\nXYZ p4=new XYZ(0,0,size); XYZ p5=new XYZ(size,0,size); XYZ p6=new XYZ(size,size,size); XYZ p7=new XYZ(0,size,size);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p7,p6,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p4,p5,p1}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p1,p5,p6,p2}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p2,p6,p7,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p3,p7,p4,p0}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\nds.SetShape(result.GetGeometricalObjects());\nds.Name = \"DirectShape Box\";"}
{"prompt":"Crea un nuevo parámetro compartido de tipo entero llamado 'Capacidad' y aplícalo a la categoría de mobiliario.","completion":"string paramName = \"Capacidad\";\nstring groupName = \"CustomData\";\nDefinitionFile sharedParamFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = sharedParamFile.Groups.get_Item(groupName) ?? sharedParamFile.Groups.Create(groupName);\nDefinition definition = group.Definitions.get_Item(paramName);\nif(definition == null)\n{\n    ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(paramName, SpecTypeId.Int.Integer);\n    definition = group.Definitions.Create(options);\n}\nCategory cat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nCategorySet catSet = doc.Application.Create.NewCategorySet();\ncatSet.Insert(cat);\nInstanceBinding binding = doc.Application.Create.NewInstanceBinding(catSet);\ndoc.ParameterBindings.Insert(definition, binding, BuiltInParameterGroup.PG_DATA);"}
{"prompt":"Create a new shared integer parameter named 'Capacity' and apply it to the furniture category.","completion":"string paramName = \"Capacity\";\nstring groupName = \"CustomData\";\nDefinitionFile sharedParamFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = sharedParamFile.Groups.get_Item(groupName) ?? sharedParamFile.Greate(groupName);\nDefinition definition = group.Definitions.get_Item(paramName);\nif(definition == null)\n{\n    ExternalDefinitionCreationOptions options = new ExternalDefinitionCreationOptions(paramName, SpecTypeId.Int.Integer);\n    definition = group.Definitions.Create(options);\n}\nCategory cat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nCategorySet catSet = doc.Application.Create.NewCategorySet();\ncatSet.Insert(cat);\nInstanceBinding binding = doc.Application.Create.NewInstanceBinding(catSet);\ndoc.ParameterBindings.Insert(definition, binding, BuiltInParameterGroup.PG_DATA);"}
{"prompt":"Mueve un muro 5 metros a la derecha.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nXYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\nElementTransformUtils.MoveElement(doc, wall.Id, translation);"}
{"prompt":"Move a wall 5 meters to the right.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nXYZ translation = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0);\nElementTransformUtils.MoveElement(doc, wall.Id, translation);"}
{"prompt":"Cambia la visibilidad de los muros cortados en la vista activa para que no sean visibles.","completion":"View activeView = doc.ActiveView;\nElementId wallCategoryId = new ElementId(BuiltInCategory.OST_Walls);\nOverrideGraphicSettings ogs = activeView.GetCategoryOverrides(wallCategoryId) ?? new OverrideGraphicSettings();\nogs.SetCutPatternVisible(false);\nactiveView.SetCategoryOverrides(wallCategoryId, ogs);"}
{"prompt":"Change the visibility of cut walls in the active view to not be visible.","completion":"View activeView = doc.ActiveView;\nElementId wallCategoryId = new ElementId(BuiltInCategory.OST_Walls);\nOverrideGraphicSettings ogs = activeView.GetCategoryOverrides(wallCategoryId) ?? new OverrideGraphicSettings();\nogs.SetCutPatternVisible(false);\nactiveView.SetCategoryOverrides(wallCategoryId, ogs);"}
{"prompt":"Exporta el documento a un archivo IFC con la versión IFC4x3.","completion":"string folderPath = \"C:/RevitExports/\";\nstring fileName = doc.Title + \"_IFC4x3.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4x3;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Export the document to an IFC file with version IFC4x3.","completion":"string folderPath = \"C:/RevitExports/\";\nstring fileName = doc.Title + \"_IFC4x3.ifc\";\nIFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4x3;\ndoc.Export(folderPath, fileName, options);"}
{"prompt":"Duplica el tipo de muro 'Basic Wall' y renómbralo.","completion":"string typeToDuplicate = \"Basic Wall\";\nstring newTypeName = \"Basic Wall Copy\";\nWallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==typeToDuplicate);\nWallType newWt = wt.Duplicate(newTypeName) as WallType;"}
{"prompt":"Duplicate the 'Basic Wall' type and rename it.","completion":"string typeToDuplicate = \"Basic Wall\";\nstring newTypeName = \"Basic Wall Copy\";\nWallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==typeToDuplicate);\nWallType newWt = wt.Duplicate(newTypeName) as WallType;"}
{"prompt":"Crea una nueva vista 3D orientada desde el punto (10,10,10) mirando hacia el origen.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v=>v.ViewFamily==ViewFamily.ThreeDimensional);\nView3D view = View3D.CreateIsometric(doc, vft.Id);\nXYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\nXYZ upDir = XYZ.BasisZ;\nXYZ forwardDir = XYZ.Zero - eyePos;\nViewOrientation3D vo = new ViewOrientation3D(eyePos, upDir, forwardDir);\nview.SetOrientation(vo);\nview.Name = \"Vista desde (10,10,10)\";"}
{"prompt":"Create a new 3D view oriented from point (10,10,10) looking at the origin.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v=>v.ViewFamily==ViewFamily.ThreeDimensional);\nView3D view = View3D.CreateIsometric(doc, vft.Id);\nXYZ eyePos = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\nXYZ upDir = XYZ.BasisZ;\nXYZ forwardDir = XYZ.Zero - eyePos;\nViewOrientation3D vo = new ViewOrientation3D(eyePos, upDir, forwardDir);\nview.SetOrientation(vo);\nview.Name = \"View from (10,10,10)\";"}

{"prompt":"Crea un texto de modelo en la vista activa que diga 'PROYECTO BIM'.","completion":"SketchPlane sp = doc.ActiveView.SketchPlane;\ndouble height = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\nModelText.Create(doc, \"PROYECTO BIM\", sp.GetPlane(), new XYZ(0,0,0), height);"}
{"prompt":"Create a model text in the active view that says 'BIM PROJECT'.","completion":"SketchPlane sp = doc.ActiveView.SketchPlane;\ndouble height = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\nModelText.Create(doc, \"BIM PROJECT\", sp.GetPlane(), new XYZ(0,0,0), height);"}
{"prompt":"Añade un material llamado 'Vidrio Reflectante' con 80% de reflectividad.","completion":"string materialName = \"Vidrio Reflectante\";\nElementId materialId = Material.Create(doc, materialName);\nMaterial material = doc.GetElement(materialId) as Material;\nAppearanceAssetElement appearanceAsset = new FilteredElementCollector(doc).OfClass(typeof(AppearanceAssetElement)).Cast<AppearanceAssetElement>().FirstOrDefault(a => a.Name.Contains(\"Glass\"));\nAppearanceAssetElement newAsset = appearanceAsset.Duplicate(materialName + \"_Asset\");\nusing(AppearanceAssetEditScope scope = new AppearanceAssetEditScope(newAsset))\n{\n    Asset editableAsset = scope.Start();\n    AssetPropertyDouble reflectivity = editableAsset.FindByName(\"generic_reflectivity\") as AssetPropertyDouble;\n    reflectivity.Value = 0.8;\n    scope.Commit(true);\n}\nmaterial.AppearanceAssetId = newAsset.Id;"}
{"prompt":"Add a material named 'Reflective Glass' with 80% reflectivity.","completion":"string materialName = \"Reflective Glass\";\nElementId materialId = Material.Create(doc, materialName);\nMaterial material = doc.GetElement(materialId) as Material;\nAppearanceAssetElement appearanceAsset = new FilteredElementCollector(doc).OfClass(typeof(AppearanceAssetElement)).Cast<AppearanceAssetElement>().FirstOrDefault(a => a.Name.Contains(\"Glass\"));\nAppearanceAssetElement newAsset = appearanceAsset.Duplicate(materialName + \"_Asset\");\nusing(AppearanceAssetEditScope scope = new AppearanceAssetEditScope(newAsset))\n{\n    Asset editableAsset = scope.Start();\n    AssetPropertyDouble reflectivity = editableAsset.FindByName(\"generic_reflectivity\") as AssetPropertyDouble;\n    reflectivity.Value = 0.8;\n    scope.Commit(true);\n}\nmaterial.AppearanceAssetId = newAsset.Id;"}
{"prompt":"Crea una topografía DirectShape a partir de una lista de puntos.","completion":"List<XYZ> points = new List<XYZ>\n{\n    new XYZ(0,0,0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0)\n};\nTessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[0], points[1], points[2]}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[1], points[3], points[2]}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_Topography));\nds.SetShape(result.GetGeometricalObjects());\nds.Name = \"Topografía DirectShape\";"}
{"prompt":"Create a DirectShape topography from a list of points.","completion":"List<XYZ> points = new List<XYZ>\n{\n    new XYZ(0,0,0),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters)),\n    new XYZ(0, UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)),\n    new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0)\n};\nTessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[0], points[1], points[2]}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[1], points[3], points[2]}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_Topography));\nds.SetShape(result.GetGeometricalObjects());\nds.Name = \"Topography DirectShape\";"}
{"prompt":"Carga un enlace DWG preservando los colores.","completion":"string filePath = \"C:/CAD/Planos.dwg\";\nDWGImportOptions opts = new DWGImportOptions();\nopts.ColorMode = ImportColorMode.Preserved;\nElementId linkId;\ndoc.Link(filePath, opts, doc.ActiveView, out linkId);"}
{"prompt":"Load a DWG link, preserving its colors.","completion":"string filePath = \"C:/CAD/Plans.dwg\";\nDWGImportOptions opts = new DWGImportOptions();\nopts.ColorMode = ImportColorMode.Preserved;\nElementId linkId;\ndoc.Link(filePath, opts, doc.ActiveView, out linkId);"}
{"prompt":"Obtén todas las vistas de planta y muestra sus nombres.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().ToList();\nStringBuilder viewNames = new StringBuilder();\nforeach(var vp in planViews)\n{\n    viewNames.AppendLine(vp.Name);\n}"}
{"prompt":"Get all plan views and list their names.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().ToList();\nStringBuilder viewNames = new StringBuilder();\nforeach(var vp in planViews)\n{\n    viewNames.AppendLine(vp.Name);\n}"}
{"prompt":"Crea un nuevo nivel llamado 'Mezzanine' a 7.5 metros de elevación.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nnewLevel.Name = levelName;"}
{"prompt":"Create a new level named 'Mezzanine' at 7.5 meters elevation.","completion":"string levelName = \"Mezzanine\";\ndouble elevation = UnitUtils.ConvertToInternalUnits(7.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nnewLevel.Name = levelName;"}
{"prompt":"Define un filtro de vista para ocultar las líneas de detalle.","completion":"string filterName = \"Ocultar Líneas de Detalle\";\nICollection<ElementId> catsToHide = new List<ElementId>{new ElementId(BuiltInCategory.OST_Lines)};\nElementFilter filter = new ElementCategoryFilter(new ElementId(BuiltInCategory.OST_Lines));\nParameterFilterElement pfe = ParameterFilterElement.Create(doc, filterName, catsToHide, filter);\ndoc.ActiveView.AddFilter(pfe.Id);\ndoc.ActiveView.SetFilterVisibility(pfe.Id, false);"}
{"prompt":"Define a view filter to hide detail lines.","completion":"string filterName = \"Hide Detail Lines\";\nICollection<ElementId> catsToHide = new List<ElementId>{new ElementId(BuiltInCategory.OST_Lines)};\nElementFilter filter = new ElementCategoryFilter(new ElementId(BuiltInCategory.OST_Lines));\nParameterFilterElement pfe = ParameterFilterElement.Create(doc, filterName, catsToHide, filter);\ndoc.ActiveView.AddFilter(pfe.Id);\ndoc.ActiveView.SetFilterVisibility(pfe.Id, false);"}
{"prompt":"Crea una vista de sección usando una caja de 10x10x3 metros.","completion":"ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\nBoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\nsectionBox.Min = new XYZ(0,0,0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\nTransform transform = Transform.Identity;\nsectionBox.Transform = transform;\nViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);"}
{"prompt":"Create a section view using a 10x10x3 meter box.","completion":"ViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\nBoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\nsectionBox.Min = new XYZ(0,0,0);\nsectionBox.Max = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\nTransform transform = Transform.Identity;\nsectionBox.Transform = transform;\nViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);"}
{"prompt":"Crea un workset llamado 'Estructura'.","completion":"string wsName = \"Estructura\";\nWorkset.Create(doc, wsName);"}
{"prompt":"Create a new workset named 'Structure'.","completion":"string wsName = \"Structure\";\nWorkset.Create(doc, wsName);"}
{"prompt":"Asigna todos los muros al workset 'Estructura'.","completion":"Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w => w.Name == \"Estructura\");\nICollection<ElementId> wallIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().ToElementIds();\nWorksharingUtils.ChangeWorkset(doc, wallIds, ws.Id);"}
{"prompt":"Assign all walls to the 'Structure' workset.","completion":"Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w => w.Name == \"Structure\");\nICollection<ElementId> wallIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().ToElementIds();\nWorksharingUtils.ChangeWorkset(doc, wallIds, ws.Id);"}
{"prompt":"Crea un techo por extrusión con una pendiente del 10%.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nCurveLoop profile = new CurveLoop();\nprofile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,1)));\nprofile.Append(Line.CreateBound(new XYZ(10,0,1), new XYZ(10,0,0)));\nprofile.Append(Line.CreateBound(new XYZ(10,0,0), new XYZ(0,0,0)));\nPlane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\nReferencePlane refPlane = ReferencePlane.Create(doc, plane);\nExtrusionRoof extrusionRoof = doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10);\nextrusionRoof.get_Parameter(BuiltInParameter.ROOF_SLOPE).Set(0.1);"}
{"prompt":"Create an extrusion roof with a 10% slope.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nCurveLoop profile = new CurveLoop();\nprofile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,1)));\nprofile.Append(Line.CreateBound(new XYZ(10,0,1), new XYZ(10,0,0)));\nprofile.Append(Line.CreateBound(new XYZ(10,0,0), new XYZ(0,0,0)));\nPlane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, XYZ.Zero);\nReferencePlane refPlane = ReferencePlane.Create(doc, plane);\nExtrusionRoof extrusionRoof = doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10);\nextrusionRoof.get_Parameter(BuiltInParameter.ROOF_SLOPE).Set(0.1);"}
{"prompt":"Obtén la tabla de planificación 'Muros' y exporta sus datos a un archivo CSV.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s=>s.Name==\"Muros\");\nstring folderPath = \"C:/RevitExports/\";\nViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\nschedule.Export(folderPath, \"Muros.csv\", options);"}
{"prompt":"Get the 'Walls' schedule and export its data to CSV.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s=>s.Name==\"Walls\");\nstring folderPath = \"C:/RevitExports/\";\nViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\nschedule.Export(folderPath, \"Walls.csv\", options);"}
{"prompt":"Permite al usuario seleccionar un muro y resáltalo en la vista.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Por favor, selecciona un muro\");\nuidoc.Selection.SetElementIds(new List<ElementId>{pickedRef.ElementId});\nuidoc.ShowElements(pickedRef.ElementId);"}
{"prompt":"Allow the user to select a wall and highlight it in the view.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Please select a wall\");\nuidoc.Selection.SetElementIds(new List<ElementId>{pickedRef.ElementId});\nuidoc.ShowElements(pickedRef.ElementId);"}
{"prompt":"Crea una nueva hoja A1 usando el primer cajetín disponible.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\nsheet.Name = \"A1 - Nueva Hoja\";\nsheet.SheetNumber = \"A1\";"}
{"prompt":"Create a new A1 sheet using the first available title block.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\nsheet.Name = \"A1 - New Sheet\";\nsheet.SheetNumber = \"A1\";"}
{"prompt":"Coloca la vista 'Nivel 1' en el centro de la hoja activa.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 1\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\nBoundingBoxUV sheetBox = activeSheet.Outline;\nXYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) / 2, (sheetBox.Min.V + sheetBox.Max.V) / 2, 0);\nViewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);"}
{"prompt":"Place the 'Level 1' view in the center of the active sheet.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 1\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\nBoundingBoxUV sheetBox = activeSheet.Outline;\nXYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) / 2, (sheetBox.Min.V + sheetBox.Max.V) / 2, 0);\nViewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);"}
{"prompt":"Aplica la plantilla de vista 'Plantilla Arquitectónica' a la vista activa.","completion":"View activeView = doc.ActiveView;\nView viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.IsTemplate && v.Name == \"Plantilla Arquitectónica\");\nactiveView.ViewTemplateId = viewTemplate.Id;"}
{"prompt":"Apply the 'Architectural Template' view template to the active view.","completion":"View activeView = doc.ActiveView;\nView viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.IsTemplate && v.Name == \"Architectural Template\");\nactiveView.ViewTemplateId = viewTemplate.Id;"}
{"prompt":"Crea un circuito eléctrico conectando luminarias a un panel.","completion":"FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nICollection<ElementId> fixtures = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds();\nElectricalSystem.Create(doc, fixtures, panel, ElectricalSystemType.PowerCircuit);"}
{"prompt":"Create an electrical circuit connecting light fixtures to a panel.","completion":"FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nICollection<ElementId> fixtures = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds();\nElectricalSystem.Create(doc, fixtures, panel, ElectricalSystemType.PowerCircuit);"}
{"prompt":"Modela una bandeja de cables entre dos puntos.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nXYZ p1 = new XYZ(0,10,3); \nXYZ p2 = new XYZ(15,10,3);\nCableTray.Create(doc, trayType.Id, p1, p2, level.Id);"}
{"prompt":"Model a cable tray between two points.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nXYZ p1 = new XYZ(0,10,3); \nXYZ p2 = new XYZ(15,10,3);\nCableTray.Create(doc, trayType.Id, p1, p2, level.Id);"}
{"prompt":"Encuentra todas las colisiones entre tuberías y vigas.","completion":"ICollection<ElementId> pipeIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WhereElementIsNotElementType().ToElementIds();\nElementIntersectsElementFilter clashFilter = new ElementIntersectsElementFilter(new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().ToElementIds());\nICollection<ElementId> clashingPipeIds = new FilteredElementCollector(doc, pipeIds).WherePasses(clashFilter).ToElementIds();\nUIDocument uidoc = new UIDocument(doc);\nuidoc.Selection.SetElementIds(clashingPipeIds);"}
{"prompt":"Find all clashes between pipes and beams.","completion":"ICollection<ElementId> pipeIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WhereElementIsNotElementType().ToElementIds();\nElementIntersectsElementFilter clashFilter = new ElementIntersectsElementFilter(new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().ToElementIds());\nICollection<ElementId> clashingPipeIds = new FilteredElementCollector(doc, pipeIds).WherePasses(clashFilter).ToElementIds();\nUIDocument uidoc = new UIDocument(doc);\nuidoc.Selection.SetElementIds(clashingPipeIds);"}
{"prompt":"Crea un parámetro global de longitud llamado 'AnchoCorredor' con valor de 1.2m.","completion":"string paramName = \"AnchoCorredor\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\ngp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters)));"}
{"prompt":"Create a global length parameter named 'CorridorWidth' with a value of 1.2m.","completion":"string paramName = \"CorridorWidth\";\nGlobalParameter gp = GlobalParameter.Create(doc, paramName, SpecTypeId.Length);\ngp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters)));"}
{"prompt":"Obtén la geometría sólida de un elemento seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para obtener su geometría\");\nElement elem = doc.GetElement(pickedRef);\nOptions opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\nGeometryElement geoElem = elem.get_Geometry(opt);\nList<Solid> solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();"}
{"prompt":"Get the solid geometry of a selected element.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to get its geometry\");\nElement elem = doc.GetElement(pickedRef);\nOptions opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\nGeometryElement geoElem = elem.get_Geometry(opt);\nList<Solid> solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();"}
{"prompt":"Alinea la cara de un muro con la cara de otro.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara de destino (estática)\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara a mover\");\ndoc.Create.NewAlignment(doc.ActiveView, ref1, ref2);"}
{"prompt":"Align the face of one wall with the face of another.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Face, \"Select the target face (stationary)\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Face, \"Select the face to move\");\ndoc.Create.NewAlignment(doc.ActiveView, ref1, ref2);"}
{"prompt":"Cambia el tipo de todas las ventanas de 'Fijo' a 'Abatible'.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Abatible\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Fijo\"));\nList<FamilyInstance> windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Id == oldType.Id).ToList();\nforeach (FamilyInstance window in windowsToChange)\n{\n    window.Symbol = newType;\n}"}
{"prompt":"Change the type of all 'Fixed' windows to 'Casement'.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Casement\"));\nFamilySymbol oldType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Fixed\"));\nList<FamilyInstance> windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Id == oldType.Id).ToList();\nforeach (FamilyInstance window in windowsToChange)\n{\n    window.Symbol = newType;\n}"}
{"prompt":"Recarga el vínculo de Revit 'Estructura_LINK.rvt'.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"Estructura_LINK.rvt\");\nlinkType.Reload();"}
{"prompt":"Reload the Revit link 'Structure_LINK.rvt'.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"Structure_LINK.rvt\");\nlinkType.Reload();"}
{"prompt":"Crea una vista de planta para el 'Nivel 3'.","completion":"string levelName = \"Nivel 3\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\nViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);"}
{"prompt":"Create a floor plan view for 'Level 3'.","completion":"string levelName = \"Nivel 3\";\nLevel level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\nViewPlan viewPlan = ViewPlan.Create(doc, vft.Id, level3.Id);"}

{"prompt":"Calcula y muestra el área total de todas las habitaciones.","completion":"double totalArea = 0.0;\nList<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nforeach (Room room in rooms)\n{\n    totalArea += room.Area;\n}"}
{"prompt":"Calculate and display the total area of all rooms.","completion":"double totalArea = 0.0;\nList<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nforeach (Room room in rooms)\n{\n    totalArea += room.Area;\n}"}
{"prompt":"Exporta una lista de familias y sus tipos a un archivo de texto.","completion":"string folderPath = \"C:/RevitExports/\";\nstring filePath = System.IO.Path.Combine(folderPath, \"FamilyList.txt\");\nList<string> lines = new List<string>();\nList<Family> families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().ToList();\nforeach (Family fam in families)\n{\n    lines.Add($\"Familia: {fam.Name}\");\n    foreach (ElementId symbolId in fam.GetFamilySymbolIds())\n    {\n        FamilySymbol sym = doc.GetElement(symbolId) as FamilySymbol;\n        lines.Add($\"\\tTipo: {sym.Name}\");\n    }\n}\nSystem.IO.File.WriteAllLines(filePath, lines);"}
{"prompt":"Export a list of families and their types to a text file.","completion":"string folderPath = \"C:/RevitExports/\";\nstring filePath = System.IO.Path.Combine(folderPath, \"FamilyList.txt\");\nList<string> lines = new List<string>();\nList<Family> families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().ToList();\nforeach (Family fam in families)\n{\n    lines.Add($\"Family: {fam.Name}\");\n    foreach (ElementId symbolId in fam.GetFamilySymbolIds())\n    {\n        FamilySymbol sym = doc.GetElement(symbolId) as FamilySymbol;\n        lines.Add($\"\\tType: {sym.Name}\");\n    }\n}\nSystem.IO.File.WriteAllLines(filePath, lines);"}
{"prompt":"Cambia un panel de vidrio de un muro cortina por un panel sólido.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nPanelType solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(PanelType)).Cast<PanelType>().FirstOrDefault(pt => pt.Name.Contains(\"Solid\") || pt.Name.Contains(\"Sólido\"));\nCurtainGrid grid = curtainWall.CurtainGrid;\nElementId panelIdToChange = grid.GetPanelIds().First();\nPanel panelToChange = doc.GetElement(panelIdToChange) as Panel;\npanelToChange.ChangeTypeId(solidPanelType.Id);"}
{"prompt":"Change a glass panel in a curtain wall to a solid panel.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nPanelType solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(PanelType)).Cast<PanelType>().FirstOrDefault(pt => pt.Name.Contains(\"Solid\"));\nCurtainGrid grid = curtainWall.CurtainGrid;\nElementId panelIdToChange = grid.GetPanelIds().First();\nPanel panelToChange = doc.GetElement(panelIdToChange) as Panel;\npanelToChange.ChangeTypeId(solidPanelType.Id);"}
{"prompt":"Obtén las coordenadas del punto base y del punto de reconocimiento.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsSurveyPoint);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsSurveyPoint);\nXYZ surveyCoords = surveyPoint.Position;\nXYZ projectCoords = projectBasePoint.Position;"}
{"prompt":"Get the coordinates of the project base point and the survey point.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsSurveyPoint);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsSurveyPoint);\nXYZ surveyCoords = surveyPoint.Position;\nXYZ projectCoords = projectBasePoint.Position;"}
{"prompt":"Crea una región rellena con un patrón de 'Concreto'.","completion":"FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\") || frt.Name.Contains(\"Concreto\"));\nCurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(5,5,0));\nFilledRegion.Create(doc, regionType.Id, doc.ActiveView.Id, new List<CurveLoop>{profile});"}
{"prompt":"Create a filled region with a 'Concrete' pattern.","completion":"FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\"));\nCurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(5,5,0));\nFilledRegion.Create(doc, regionType.Id, doc.ActiveView.Id, new List<CurveLoop>{profile});"}
{"prompt":"Encuentra el elemento de pórtico estructural con la marca 'B-101'.","completion":"string markValue = \"B-101\";\nElement framingElement = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().FirstOrDefault(e => e.get_Parameter(BuiltInParameter.ALL_MODEL_MARK).AsString() == markValue);\nUIDocument uidoc = new UIDocument(doc);\nuidoc.Selection.SetElementIds(new List<ElementId>{framingElement.Id});"}
{"prompt":"Find the structural framing element with the mark 'B-101'.","completion":"string markValue = \"B-101\";\nElement framingElement = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().FirstOrDefault(e => e.get_Parameter(BuiltInParameter.ALL_MODEL_MARK).AsString() == markValue);\nUIDocument uidoc = new UIDocument(doc);\nuidoc.Selection.SetElementIds(new List<ElementId>{framingElement.Id});"}
{"prompt":"Crea una losa de cimentación de 20x15 metros.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundations);\nXYZ p1 = new XYZ(0,0,0);\nXYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters), 0);\nCurveLoop profile = CurveLoop.CreateViaRectangle(p1, p2);\nFloor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);"}
{"prompt":"Create a 20x15 meter foundation slab.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundations);\nXYZ p1 = new XYZ(0,0,0);\nXYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters), 0);\nCurveLoop profile = CurveLoop.CreateViaRectangle(p1, p2);\nFloor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);"}
{"prompt":"Añade montantes a todas las líneas de rejilla de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nCurtainGrid grid = curtainWall.CurtainGrid;\nforeach (ElementId gridLineId in grid.GetVGridLineIds())\n{\n    CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n    if(!line.MullionOnLine) line.AddMullions(mullionType, false);\n}\nforeach (ElementId gridLineId in grid.GetUGridLineIds())\n{\n    CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n    if(!line.MullionOnLine) line.AddMullions(mullionType, false);\n}"}
{"prompt":"Add mullions to all grid lines of a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nCurtainGrid grid = curtainWall.CurtainGrid;\nforeach (ElementId gridLineId in grid.GetVGridLineIds())\n{\n    CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n    if(!line.MullionOnLine) line.AddMullions(mullionType, false);\n}\nforeach (ElementId gridLineId in grid.GetUGridLineIds())\n{\n    CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n    if(!line.MullionOnLine) line.AddMullions(mullionType, false);\n}"}
{"prompt":"Rota el elemento seleccionado 45 grados alrededor de su centro.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\ndouble angle = 45 * Math.PI / 180.0;\nElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);"}
{"prompt":"Rotate the selected element 45 degrees about its center.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\ndouble angle = 45 * Math.PI / 180.0;\nElementTransformUtils.RotateElement(doc, elem.Id, axis, angle);"}
{"prompt":"Crea una apertura de hueco (shaft) que atraviese desde el Nivel 1 al Nivel 3.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 3\") as Level;\nXYZ p1 = new XYZ(5,5,0);\nXYZ p2 = new XYZ(8,8,0);\nCurveLoop profile = CurveLoop.CreateViaRectangle(p1, p2);\ndoc.Create.NewOpening(bottomLevel, topLevel, profile, true);"}
{"prompt":"Create a shaft opening that passes through from Level 1 to Level 3.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nXYZ p1 = new XYZ(5,5,0);\nXYZ p2 = new XYZ(8,8,0);\nCurveLoop profile = CurveLoop.CreateViaRectangle(p1, p2);\ndoc.Create.NewOpening(bottomLevel, topLevel, profile, true);"}
{"prompt":"Muestra un cuadro de diálogo con opciones 'Sí' y 'No'.","completion":""}
{"prompt":"Display a dialog box with 'Yes' and 'No' options.","completion":""}
{"prompt":"Sincroniza el modelo local con el central, añadiendo el comentario 'Actualización de diseño'.","completion":"TransactWithCentralOptions tco = new TransactWithCentralOptions();\nSynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\nswcOpts.SetComment(\"Actualización de diseño\");\nswcOpts.SaveLocalAfter = true;\ndoc.SyncWithCentral(tco, swcOpts);"}
{"prompt":"Synchronize the local model with the central model, adding the comment 'Design update'.","completion":"TransactWithCentralOptions tco = new TransactWithCentralOptions();\nSynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\nswcOpts.SetComment(\"Design update\");\nswcOpts.SaveLocalAfter = true;\ndoc.SyncWithCentral(tco, swcOpts);"}
{"prompt":"Obtén la curva del modelo analítico de una viga.","completion":"FamilyInstance beam = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nAnalyticalModel am = beam.GetAnalyticalModel();\nCurve analyticalCurve = am.GetCurve();"}
{"prompt":"Get the analytical model curve of a beam.","completion":"FamilyInstance beam = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nAnalyticalModel am = beam.GetAnalyticalModel();\nCurve analyticalCurve = am.GetCurve();"}
{"prompt":"Crea una nota de texto con una flecha apuntando a un elemento seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference target = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para anotar\");\nXYZ textLocation = uidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\nTextNoteOptions opts = new TextNoteOptions(doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType));\nopts.HorizontalAlignment = HorizontalTextAlignment.Left;\nTextNote note = TextNote.Create(doc, doc.ActiveView.Id, textLocation, \"Revisar este elemento\", opts);\nnote.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L, target.GlobalPoint);"}
{"prompt":"Create a text note with a leader pointing to a selected element.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference target = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\nXYZ textLocation = uidoc.Selection.PickPoint(\"Choose the text location\");\nTextNoteOptions opts = new TextNoteOptions(doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType));\nopts.HorizontalAlignment = HorizontalTextAlignment.Left;\nTextNote note = TextNote.Create(doc, doc.ActiveView.Id, \"Review this element\", textLocation, opts);\nnote.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L, target.GlobalPoint);"}
{"prompt":"Conecta dos bandejas de cables con un codo.","completion":"List<CableTray> trays = new FilteredElementCollector(doc).OfClass(typeof(CableTray)).Take(2).ToList();\nConnector c1 = trays[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\nConnector c2 = trays[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\ndoc.Create.NewUnionFitting(c1, c2);"}
{"prompt":"Connect two cable trays with an elbow fitting.","completion":"List<CableTray> trays = new FilteredElementCollector(doc).OfClass(typeof(CableTray)).Take(2).ToList();\nConnector c1 = trays[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\nConnector c2 = trays[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\ndoc.Create.NewUnionFitting(c1, c2);"}
{"prompt":"Crea una vista 3D axonométrica orientada al Noroeste.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\nView3D view3d = View3D.CreateIsometric(doc, vft.Id);\nXYZ eye = new XYZ(-1, 1, 1);\nXYZ up = new XYZ(0, 0, 1);\nXYZ forward = new XYZ(1, -1, -1);\nview3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\nview3d.Name = \"Vista 3D Noroeste\";"}
{"prompt":"Create an axonometric 3D view oriented to the Northwest.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\nView3D view3d = View3D.CreateIsometric(doc, vft.Id);\nXYZ eye = new XYZ(-1, 1, 1);\nXYZ up = new XYZ(0, 0, 1);\nXYZ forward = new XYZ(1, -1, -1);\nview3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\nview3d.Name = \"3D View Northwest\";"}
{"prompt":"Encuentra todas las puertas en el Nivel 1 usando un filtro combinado.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\nElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\nLogicalAndFilter combinedFilter = new LogicalAndFilter(categoryFilter, levelFilter);\nList<Element> doors = new FilteredElementCollector(doc).WherePasses(combinedFilter).ToList();"}
{"prompt":"Find all doors on Level 1 using a combined filter.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\nElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\nLogicalAndFilter combinedFilter = new LogicalAndFilter(categoryFilter, levelFilter);\nList<Element> doors = new FilteredElementCollector(doc).WherePasses(combinedFilter).ToList();"}
{"prompt":"Crea un texto de modelo 3D que diga 'TORRE A'.","completion":"Level baseLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nXYZ origin = new XYZ(0,0,baseLevel.Elevation);\nPlane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, origin);\nSketchPlane sp = SketchPlane.Create(doc, plane);\nModelText.Create(doc, \"TORRE A\", sp.GetPlane(), origin, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters));"}
{"prompt":"Create a 3D model text that says 'TOWER A'.","completion":"Level baseLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nXYZ origin = new XYZ(0,0,baseLevel.Elevation);\nPlane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, origin);\nSketchPlane sp = SketchPlane.Create(doc, plane);\nModelText.Create(doc, \"TOWER A\", sp.GetPlane(), origin, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters));"}
{"prompt":"Exporta todas las advertencias del proyecto a un archivo de texto.","completion":"string folderPath = \"C:/RevitExports/\";\nstring filePath = System.IO.Path.Combine(folderPath, \"ProjectWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\nSystem.IO.File.WriteAllLines(filePath, warningDescriptions);"}
{"prompt":"Export all project warnings to a text file.","completion":"string folderPath = \"C:/RevitExports/\";\nstring filePath = System.IO.Path.Combine(folderPath, \"ProjectWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\nSystem.IO.File.WriteAllLines(filePath, warningDescriptions);"}
{"prompt":"Agrupa una tabla de planificación de habitaciones por Nivel.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(vs => vs.Definition.CategoryId.IntegerValue == (int)BuiltInCategory.OST_Rooms);\nScheduleDefinition def = schedule.Definition;\nSchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ROOM_LEVEL_ID);\nScheduleSortGroupField sortGroupField = new ScheduleSortGroupField(levelField.FieldId);\nsortGroupField.ShowHeader = true;\ndef.AddSortGroupField(sortGroupField);\ndef.IsItemized = false;"}
{"prompt":"Group a room schedule by Level.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(vs => vs.Definition.CategoryId.IntegerValue == (int)BuiltInCategory.OST_Rooms);\nScheduleDefinition def = schedule.Definition;\nSchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ROOM_LEVEL_ID);\nScheduleSortGroupField sortGroupField = new ScheduleSortGroupField(levelField.FieldId);\nsortGroupField.ShowHeader = true;\ndef.AddSortGroupField(sortGroupField);\ndef.IsItemized = false;"}
{"prompt":"Obtén todos los muros de un modelo vinculado que se cruzan con una caja de delimitación.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\nDocument linkDoc = linkInstance.GetLinkDocument();\nBoundingBoxXYZ bbox = new BoundingBoxXYZ();\nbbox.Min = new XYZ(0,0,0);\nbbox.Max = new XYZ(50,50,10);\nBoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(bbox.Min, bbox.Max));\nList<Element> linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToList();"}
{"prompt":"Get all walls from a linked model that intersect with a bounding box.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\nDocument linkDoc = linkInstance.GetLinkDocument();\nBoundingBoxXYZ bbox = new BoundingBoxXYZ();\nbbox.Min = new XYZ(0,0,0);\nbbox.Max = new XYZ(50,50,10);\nBoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(bbox.Min, bbox.Max));\nList<Element> linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToList();"}
{"prompt":"Desune la geometría de dos elementos previamente unidos.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer elemento\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo elemento\");\nElement e1 = doc.GetElement(ref1.ElementId);\nElement e2 = doc.GetElement(ref2.ElementId);\nJoinGeometryUtils.UnjoinGeometry(doc, e1, e2);"}
{"prompt":"Unjoin the geometry of two previously joined elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first element\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second element\");\nElement e1 = doc.GetElement(ref1.ElementId);\nElement e2 = doc.GetElement(ref2.ElementId);\nJoinGeometryUtils.UnjoinGeometry(doc, e1, e2);"}
{"prompt":"Coloca una cota de elevación en la cara superior de un suelo.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference faceRef = uidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara superior del suelo\");\nXYZ pointOnFace = faceRef.GlobalPoint;\nXYZ leaderEnd = pointOnFace + new XYZ(1,1,0);\ndoc.Create.NewSpotElevation(doc.ActiveView, faceRef, pointOnFace, pointOnFace, leaderEnd, true, true);"}
{"prompt":"Place a spot elevation on the top face of a floor.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference faceRef = uidoc.Selection.PickObject(ObjectType.Face, \"Select the top face of the floor\");\nXYZ pointOnFace = faceRef.GlobalPoint;\nXYZ leaderEnd = pointOnFace + new XYZ(1,1,0);\ndoc.Create.NewSpotElevation(doc.ActiveView, faceRef, pointOnFace, pointOnFace, leaderEnd, true, true);"}
{"prompt":"Verifica si una tubería está conectada en ambos extremos.","completion":"Pipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nbool isFullyConnected = pipe.ConnectorManager.UnusedConnectors.IsEmpty;"}
{"prompt":"Check if a pipe is connected at both ends.","completion":"Pipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nbool isFullyConnected = pipe.ConnectorManager.UnusedConnectors.IsEmpty;"}
{"prompt":"Dentro del editor de familias, crea un plano de referencia vertical llamado 'Eje Central'.","completion":"string rpName = \"Eje Central\";\nXYZ start = new XYZ(0, -5, 0);\nXYZ end = new XYZ(0, 5, 0);\nXYZ normal = start.CrossProduct(end);\nReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, doc.ActiveView);\nrp.Name = rpName;"}
{"prompt":"Inside the family editor, create a vertical reference plane named 'Center Axis'.","completion":"string rpName = \"Center Axis\";\nXYZ start = new XYZ(0, -5, 0);\nXYZ end = new XYZ(0, 5, 0);\nXYZ normal = start.CrossProduct(end);\nReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, doc.ActiveView);\nrp.Name = rpName;"}

{"prompt":"Averigua quién es el propietario de un elemento seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento\");\nWorksharingTooltipInfo info = WorksharingUtils.GetWorksharingTooltipInfo(doc, pickedRef.ElementId);"}
{"prompt":"Find out who the owner of a selected element is.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element\");\nWorksharingTooltipInfo info = WorksharingUtils.GetWorksharingTooltipInfo(doc, pickedRef.ElementId);"}
{"prompt":"Aísla temporalmente un elemento seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToIsolate = uidoc.Selection.GetElementIds();\ndoc.ActiveView.IsolateElementsTemporary(idsToIsolate);"}
{"prompt":"Temporarily isolate a selected element.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToIsolate = uidoc.Selection.GetElementIds();\ndoc.ActiveView.IsolateElementsTemporary(idsToIsolate);"}
{"prompt":"Crea un componente de detalle repetitivo a lo largo de una línea.","completion":"DetailComponentType dct = new FilteredElementCollector(doc).OfClass(typeof(DetailComponentType)).FirstOrDefault() as DetailComponentType;\nLine path = Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0));\nRepeatingDetailComponent.Create(doc, doc.ActiveView.Id, dct.Id, path);"}
{"prompt":"Create a repeating detail component along a line.","completion":"DetailComponentType dct = new FilteredElementCollector(doc).OfClass(typeof(DetailComponentType)).FirstOrDefault() as DetailComponentType;\nLine path = Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters),0,0));\nRepeatingDetailComponent.Create(doc, doc.ActiveView.Id, dct.Id, path);"}
{"prompt":"Crea un nuevo panel en la cinta de opciones llamado 'Mis Herramientas' con un botón.","completion":""}
{"prompt":"Create a new Ribbon panel named 'My Tools' with a button.","completion":""}
{"prompt":"Cambia el tipo de una losa por uno que contenga 'Concreto'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concreto\") || ft.Name.Contains(\"Concrete\"));\nfloorToChange.ChangeTypeId(newType.Id);"}
{"prompt":"Change the type of a floor to one that contains 'Concrete'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concrete\"));\nfloorToChange.ChangeTypeId(newType.Id);"}
{"prompt":"Obtén todas las subcategorías de la categoría Muros.","completion":"Category wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategoryNameMap subcategories = wallCat.SubCategories;"}
{"prompt":"Get all subcategories from the Walls category.","completion":"Category wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategoryNameMap subcategories = wallCat.SubCategories;"}
{"prompt":"Crea un parámetro de proyecto de tipo URL llamado 'Enlace a Especificaciones'.","completion":"string paramName = \"Enlace a Especificaciones\";\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = defFile.Groups.get_Item(\"Documentation\") ?? defFile.Groups.Create(\"Documentation\");\nDefinition definition = group.Definitions.get_Item(paramName) ?? group.Definitions.Create(new ExternalDefinitionCreationOptions(paramName, SpecTypeId.Url));\nCategory wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategorySet catSet = doc.Application.Create.NewCategorySet();\ncatSet.Insert(wallCat);\nInstanceBinding binding = doc.Application.Create.NewInstanceBinding(catSet);\ndoc.ParameterBindings.Insert((ExternalDefinition)definition, binding, BuiltInParameterGroup.PG_DATA);"}
{"prompt":"Create a URL type project parameter named 'Link to Specifications'.","completion":"string paramName = \"Link to Specifications\";\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = defFile.Groups.get_Item(\"Documentation\") ?? defFile.Groups.Create(\"Documentation\");\nDefinition definition = group.Definitions.get_Item(paramName) ?? group.Definitions.Create(new ExternalDefinitionCreationOptions(paramName, SpecTypeId.Url));\nCategory wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategorySet catSet = doc.Application.Create.NewCategorySet();\ncatSet.Insert(wallCat);\nInstanceBinding binding = doc.Application.Create.NewInstanceBinding(catSet);\ndoc.ParameterBindings.Insert((ExternalDefinition)definition, binding, BuiltInParameterGroup.PG_DATA);"}
{"prompt":"Crea una nueva vista de alzado mirando al sur.","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20, 0), 100);\nView aev = marker.CreateElevation(doc, doc.ActiveView.Id, 0);\naev.Name = \"Alzado Sur\";"}
{"prompt":"Create a new elevation view looking south.","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20, 0), 100);\nView aev = marker.CreateElevation(doc, doc.ActiveView.Id, 0);\naev.Name = \"South Elevation\";"}
{"prompt":"Exporta la geometría de un elemento seleccionado a un archivo SAT.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para exportar\");\nElement elem = doc.GetElement(pickedRef);\nstring folderPath = \"C:/RevitExports/\";\nstring fileName = elem.Name + \".sat\";\nSATExportOptions options = new SATExportOptions();\ndoc.Export(folderPath, fileName, new List<ElementId>{elem.Id}, options);"}
{"prompt":"Export the geometry of a selected element to an SAT file.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to export\");\nElement elem = doc.GetElement(pickedRef);\nstring folderPath = \"C:/RevitExports/\";\nstring fileName = elem.Name + \".sat\";\nSATExportOptions options = new SATExportOptions();\ndoc.Export(folderPath, fileName, new List<ElementId>{elem.Id}, options);"}
{"prompt":"Obtén el tipo de sistema de una tubería seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una tubería\");\nPipe pipe = doc.GetElement(pickedRef.ElementId) as Pipe;\nPipingSystemType systemType = doc.GetElement(pipe.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId()) as PipingSystemType;"}
{"prompt":"Get the system type of a selected pipe.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a pipe\");\nPipe pipe = doc.GetElement(pickedRef.ElementId) as Pipe;\nPipingSystemType systemType = doc.GetElement(pipe.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId()) as PipingSystemType;"}
{"prompt":"Crea un nuevo tipo de tubería con material de Cobre.","completion":"string newTypeName = \"Tubería de Cobre\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial copper = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Copper\") || m.Name.Contains(\"Cobre\")) as Material;\nPipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\nnewType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM).Set(copper.Id);"}
{"prompt":"Create a new pipe type with Copper material.","completion":"string newTypeName = \"Copper Pipe\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial copper = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Copper\")) as Material;\nPipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\nnewType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM).Set(copper.Id);"}
{"prompt":"Oculta un elemento seleccionado en la vista activa.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToHide = uidoc.Selection.GetElementIds();\ndoc.ActiveView.HideElements(idsToHide);"}
{"prompt":"Hide a selected element in the active view.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToHide = uidoc.Selection.GetElementIds();\ndoc.ActiveView.HideElements(idsToHide);"}
{"prompt":"Cambia el nombre de la familia de una puerta seleccionada a 'Puerta_Nueva'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una puerta\");\nFamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\nFamily family = door.Symbol.Family;\nfamily.Name = \"Puerta_Nueva\";"}
{"prompt":"Change the family name of a selected door to 'New_Door'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a door\");\nFamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\nFamily family = door.Symbol.Family;\nfamily.Name = \"New_Door\";"}
{"prompt":"Crea una nueva hoja A2 con el número 'A-201'.","completion":"string sheetNumber = \"A-201\";\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\nsheet.Name = \"Detalles Constructivos\";\nsheet.SheetNumber = sheetNumber;"}
{"prompt":"Create a new A2 sheet with the number 'A-201'.","completion":"string sheetNumber = \"A-201\";\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\nsheet.Name = \"Construction Details\";\nsheet.SheetNumber = sheetNumber;"}
{"prompt":"Coloca todos los elementos seleccionados en el workset 'Fachada'.","completion":"UIDocument uidoc = new UIDocument(doc);\nWorkset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Fachada\");\nif(workset == null) workset = Workset.Create(doc, \"Fachada\");\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWorksharingUtils.ChangeWorkset(doc, selectedIds, workset.Id);"}
{"prompt":"Place all selected elements on the 'Facade' workset.","completion":"UIDocument uidoc = new UIDocument(doc);\nWorkset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Facade\");\nif(workset == null) workset = Workset.Create(doc, \"Facade\");\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWorksharingUtils.ChangeWorkset(doc, selectedIds, workset.Id);"}
{"prompt":"Crea una nueva revisión y aplícala a la hoja activa.","completion":"Revision rev = Revision.Create(doc);\nrev.Description = \"Emitido para Construcción\";\nrev.RevisionDate = DateTime.Now.ToString(\"yyyy-MM-dd\");\nrev.IssuedBy = \"Departamento BIM\";\nViewSheet sheet = doc.ActiveView as ViewSheet;\nICollection<ElementId> revisions = sheet.GetAdditionalRevisionIds();\nrevisions.Add(rev.Id);\nsheet.SetAdditionalRevisionIds(revisions);"}
{"prompt":"Create a new revision and apply it to the active sheet.","completion":"Revision rev = Revision.Create(doc);\nrev.Description = \"Issued for Construction\";\nrev.RevisionDate = DateTime.Now.ToString(\"yyyy-MM-dd\");\nrev.IssuedBy = \"BIM Department\";\nViewSheet sheet = doc.ActiveView as ViewSheet;\nICollection<ElementId> revisions = sheet.GetAdditionalRevisionIds();\nrevisions.Add(rev.Id);\nsheet.SetAdditionalRevisionIds(revisions);"}
{"prompt":"Crea una dimensión radial para un muro curvo.","completion":"Wall curvedWall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.Location is LocationCurve && (w.Location as LocationCurve).Curve is Arc);\nArc arc = (curvedWall.Location as LocationCurve).Curve as Arc;\nXYZ leaderEndPoint = arc.Center + new XYZ(arc.Radius + 5, 0, 0);\ndoc.Create.NewRadialDimension(doc.ActiveView, new Reference(arc), leaderEndPoint, arc.Radius);"}
{"prompt":"Create a radial dimension for a curved wall.","completion":"Wall curvedWall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.Location is LocationCurve && (w.Location as LocationCurve).Curve is Arc);\nArc arc = (curvedWall.Location as LocationCurve).Curve as Arc;\nXYZ leaderEndPoint = arc.Center + new XYZ(arc.Radius + 5, 0, 0);\ndoc.Create.NewRadialDimension(doc.ActiveView, new Reference(arc), leaderEndPoint, arc.Radius);"}
{"prompt":"Encuentra el host de una luminaria basada en cara.","completion":"FamilyInstance lightFixture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().FirstOrDefault(fi => fi.HostFace != null) as FamilyInstance;\nReference hostFaceRef = lightFixture.HostFace;\nElement host = doc.GetElement(hostFaceRef.ElementId);"}
{"prompt":"Find the host of a face-based light fixture.","completion":"FamilyInstance lightFixture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().FirstOrDefault(fi => fi.HostFace != null) as FamilyInstance;\nReference hostFaceRef = lightFixture.HostFace;\nElement host = doc.GetElement(hostFaceRef.ElementId);"}
{"prompt":"Obtén todas las subcategorías de la categoría Puertas.","completion":"Category doorCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors);\nCategoryNameMap subcategories = doorCat.SubCategories;"}
{"prompt":"Get all subcategories from the Doors category.","completion":"Category doorCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors);\nCategoryNameMap subcategories = doorCat.SubCategories;"}
{"prompt":"Crea una nueva vista de alzado mirando al norte.","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20, 0), 100);\nView aev = marker.CreateElevation(doc, doc.ActiveView.Id, 2);\naev.Name = \"Alzado Norte\";"}
{"prompt":"Create a new elevation view looking north.","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20, 0), 100);\nView aev = marker.CreateElevation(doc, doc.ActiveView.Id, 2);\naev.Name = \"North Elevation\";"}
{"prompt":"Cambia el nombre de todas las tablas que contienen 'Puertas' por 'Listado de Puertas'.","completion":"List<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"Puertas\")).ToList();\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"Puertas\", \"Listado de Puertas\");\n}"}
{"prompt":"Rename all schedules containing 'Doors' to 'Door Schedule'.","completion":"List<ViewSchedule> schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"Doors\")).ToList();\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"Doors\", \"Door Schedule\");\n}"}
{"prompt":"Crea un nuevo tipo de cota lineal con texto azul y tamaño 2mm.","completion":"string newTypeName = \"Cota Azul 2mm\";\nDimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\nDimensionType newDimType = linearDimType.Duplicate(newTypeName) as DimensionType;\nnewDimType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(0,0,255).GetElementId());\nnewDimType.get_Parameter(BuiltInParameter.TEXT_SIZE).Set(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Millimeters));"}
{"prompt":"Create a new linear dimension type with blue text and 2mm size.","completion":"string newTypeName = \"Blue Dimension 2mm\";\nDimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\nDimensionType newDimType = linearDimType.Duplicate(newTypeName) as DimensionType;\nnewDimType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(0,0,255).GetElementId());\nnewDimType.get_Parameter(BuiltInParameter.TEXT_SIZE).Set(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Millimeters));"}
{"prompt":"Reporta el número total de advertencias en el proyecto.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();"}
{"prompt":"Report the total number of warnings in the project.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();"}
{"prompt":"Mueve todos los elementos seleccionados 3 metros hacia arriba.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nXYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\nElementTransformUtils.MoveElements(doc, selectedIds, translation);"}
{"prompt":"Move all selected elements 3 meters up.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nXYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\nElementTransformUtils.MoveElements(doc, selectedIds, translation);"}
{"prompt":"Exporta todos los tipos de familia de la categoría 'Mobiliario' a un archivo de texto.","completion":"List<Element> furnitureTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().ToList();\nList<string> typeNames = new List<string>();\nforeach(Element type in furnitureTypes)\n{\n    typeNames.Add(type.Name);\n}"}
{"prompt":"Export all family types from the 'Furniture' category to a text file.","completion":"List<Element> furnitureTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().ToList();\nList<string> typeNames = new List<string>();\nforeach(Element type in furnitureTypes)\n{\n    typeNames.Add(type.Name);\n}"}

{"prompt":"Copia todos los muros del Nivel 1 al Nivel 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nICollection<ElementId> wallsToCopy = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level1.Id).ToElementIds();\ndouble elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\nXYZ translation = new XYZ(0, 0, elevationDiff);\nElementTransformUtils.CopyElements(doc, wallsToCopy, translation);"}
{"prompt":"Copy all walls from Level 1 to Level 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nICollection<ElementId> wallsToCopy = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level1.Id).ToElementIds();\ndouble elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\nXYZ translation = new XYZ(0, 0, elevationDiff);\nElementTransformUtils.CopyElements(doc, wallsToCopy, translation);"}
{"prompt":"Encuentra todos los muros que miden más de 3 metros de alto.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nList<ElementId> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds().ToList();"}
{"prompt":"Find all walls taller than 3 meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nList<ElementId> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds().ToList();"}
{"prompt":"Selecciona un muro y encuentra todas las tuberías que lo atraviesan.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nElement wall = doc.GetElement(wallRef);\nElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\nList<ElementId> intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds().ToList();"}
{"prompt":"Select a wall and find all pipes passing through it.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\nElement wall = doc.GetElement(wallRef);\nElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\nList<ElementId> intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds().ToList();"}
{"prompt":"Crea una nota de texto que apunte al elemento seleccionado y diga 'REVISAR CLASH'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference targetRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\nXYZ textLocation = uidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\nTextNoteOptions opts = new TextNoteOptions(doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType));\nTextNote note = TextNote.Create(doc, doc.ActiveView.Id, textLocation, \"REVISAR CLASH\", opts);\nnote.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L, targetRef.GlobalPoint);"}
{"prompt":"Create a text note pointing to the selected element that says 'REVIEW CLASH'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference targetRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\nXYZ textLocation = uidoc.Selection.PickPoint(\"Choose the text location\");\nTextNoteOptions opts = new TextNoteOptions(doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType));\nTextNote note = TextNote.Create(doc, doc.ActiveView.Id, \"REVIEW CLASH\", textLocation, opts);\nnote.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L, targetRef.GlobalPoint);"}
{"prompt":"Oculta todos los muros que sean más cortos de 2 metros.","completion":"double lengthThreshold = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nList<ElementId> shortWallIds = new List<ElementId>();\nforeach(Wall wall in walls)\n{\n    if(wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble() < lengthThreshold)\n    {\n        shortWallIds.Add(wall.Id);\n    }\n}\ndoc.ActiveView.HideElements(shortWallIds);"}
{"prompt":"Hide all walls shorter than 2 meters.","completion":"double lengthThreshold = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nList<ElementId> shortWallIds = new List<ElementId>();\nforeach(Wall wall in walls)\n{\n    if(wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble() < lengthThreshold)\n    {\n        shortWallIds.Add(wall.Id);\n    }\n}\ndoc.ActiveView.HideElements(shortWallIds);"}
{"prompt":"Crea una familia 'in-situ' para un mostrador de recepción personalizado usando una extrusión.","completion":""}
{"prompt":"Create an in-place family for a custom reception desk using an extrusion.","completion":""}
{"prompt":"Modifica el tipo de muro de un muro existente a uno que contenga 'Aislamiento Térmico'.","completion":"Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(x => x.Name.Contains(\"Aislamiento Térmico\") || x.Name.Contains(\"Insulation\"));\nwallToChange.ChangeTypeId(newType.Id);"}
{"prompt":"Change the wall type of an existing wall to one containing 'Thermal Insulation'.","completion":"Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(x => x.Name.Contains(\"Thermal Insulation\"));\nwallToChange.ChangeTypeId(newType.Id);"}
{"prompt":"Crea una apertura de hueco vertical (shaft) desde el nivel base hasta el nivel más alto.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\nXYZ p1 = new XYZ(2,2,0);\nXYZ p2 = new XYZ(5,5,0);\nCurveLoop profile = CurveLoop.CreateViaRectangle(p1, p2);\ndoc.Create.NewOpening(bottomLevel, topLevel, profile, true);"}
{"prompt":"Create a vertical shaft opening from the base level to the top level.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.ProjectElevation).FirstOrDefault();\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.ProjectElevation).FirstOrDefault();\nXYZ p1 = new XYZ(2,2,0);\nXYZ p2 = new XYZ(5,5,0);\nCurveLoop profile = CurveLoop.CreateViaRectangle(p1, p2);\ndoc.Create.NewOpening(bottomLevel, topLevel, profile, true);"}
{"prompt":"Obtén todos los materiales y sus volúmenes de un muro compuesto seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nWall wall = doc.GetElement(pickedRef) as Wall;\ndouble wallArea = wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED).AsDouble();\nCompoundStructure cs = wall.WallType.GetCompoundStructure();\nDictionary<string, double> materialVolumes = new Dictionary<string, double>();\nfor(int i = 0; i < cs.GetLayerCount(); i++)\n{\n    CompoundStructureLayer layer = cs.GetLayer(i);\n    Material material = doc.GetElement(layer.MaterialId) as Material;\n    if(material != null)\n    {\n        double volume = layer.Width * wallArea;\n        materialVolumes[material.Name] = volume;\n    }\n}"}
{"prompt":"Get all materials and their volumes from a selected compound wall.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\nWall wall = doc.GetElement(pickedRef) as Wall;\ndouble wallArea = wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED).AsDouble();\nCompoundStructure cs = wall.WallType.GetCompoundStructure();\nDictionary<string, double> materialVolumes = new Dictionary<string, double>();\nfor(int i = 0; i < cs.GetLayerCount(); i++)\n{\n    CompoundStructureLayer layer = cs.GetLayer(i);\n    Material material = doc.GetElement(layer.MaterialId) as Material;\n    if(material != null)\n    {\n        double volume = layer.Width * wallArea;\n        materialVolumes[material.Name] = volume;\n    }\n}"}
{"prompt":"Muestra un cuadro de diálogo con las opciones 'Sí', 'No' y 'Cancelar'.","completion":""}
{"prompt":"Display a dialog box with 'Yes', 'No', and 'Cancel' options.","completion":""}
{"prompt":"Abre una familia, añade un parámetro de tipo 'Código de Material' y guárdala.","completion":""}
{"prompt":"Open a family, add a type parameter 'Material Code', and save it.","completion":""}
{"prompt":"Encuentra todas las puertas del Nivel 2 que sean de la familia 'Puerta Sencilla'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\nElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\nFamilyNameRule famNameRule = new FamilyNameRule(new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM)), new FilterStringEquals(), \"Puerta Sencilla\");\nElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\nLogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\nList<Element> doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();"}
{"prompt":"Find all doors on Level 2 that belong to the 'Single-Flush' family.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\nElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\nFamilyNameRule famNameRule = new FamilyNameRule(new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM)), new FilterStringEquals(), \"Single-Flush\");\nElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\nLogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\nList<Element> doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();"}
{"prompt":"Exporta todas las advertencias del proyecto a un archivo de texto.","completion":"string folderPath = \"C:/RevitExports/\";\nstring filePath = System.IO.Path.Combine(folderPath, \"ProjectWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\nSystem.IO.File.WriteAllLines(filePath, warningDescriptions);"}
{"prompt":"Export all project warnings to a text file.","completion":"string folderPath = \"C:/RevitExports/\";\nstring filePath = System.IO.Path.Combine(folderPath, \"ProjectWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\nSystem.IO.File.WriteAllLines(filePath, warningDescriptions);"}
{"prompt":"Desune la geometría de dos elementos seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer elemento\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo elemento\");\nElement e1 = doc.GetElement(ref1.ElementId);\nElement e2 = doc.GetElement(ref2.ElementId);\nJoinGeometryUtils.UnjoinGeometry(doc, e1, e2);"}
{"prompt":"Unjoin the geometry of two selected elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first element\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second element\");\nElement e1 = doc.GetElement(ref1.ElementId);\nElement e2 = doc.GetElement(ref2.ElementId);\nJoinGeometryUtils.UnjoinGeometry(doc, e1, e2);"}
{"prompt":"Dentro del editor de familias, crea un nuevo plano de referencia horizontal.","completion":"string rpName = \"Plano Horizontal\";\nXYZ start = new XYZ(-5, 0, 0);\nXYZ end = new XYZ(5, 0, 0);\nXYZ normal = XYZ.BasisY;\nReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, doc.ActiveView);\nrp.Name = rpName;"}
{"prompt":"Inside the family editor, create a new horizontal reference plane.","completion":"string rpName = \"Horizontal Plane\";\nXYZ start = new XYZ(-5, 0, 0);\nXYZ end = new XYZ(5, 0, 0);\nXYZ normal = XYZ.BasisY;\nReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, doc.ActiveView);\nrp.Name = rpName;"}
{"prompt":"Aísla temporalmente la categoría de Puertas en la vista activa.","completion":"ElementId doorCategoryId = new ElementId(BuiltInCategory.OST_Doors);\nICollection<ElementId> categoryIds = new List<ElementId> { doorCategoryId };\ndoc.ActiveView.IsolateCategoriesTemporary(categoryIds);"}
{"prompt":"Temporarily isolate the Doors category in the active view.","completion":"ElementId doorCategoryId = new ElementId(BuiltInCategory.OST_Doors);\nICollection<ElementId> categoryIds = new List<ElementId> { doorCategoryId };\ndoc.ActiveView.IsolateCategoriesTemporary(categoryIds);"}
{"prompt":"Cambia el tipo de una losa seleccionada a 'Concreto 15cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\nFloor floorToChange = doc.GetElement(pickedRef) as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 15cm\");\nfloorToChange.ChangeTypeId(newType.Id);"}
{"prompt":"Change the type of a selected floor to 'Concrete 15cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\nFloor floorToChange = doc.GetElement(pickedRef) as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 15cm\");\nfloorToChange.ChangeTypeId(newType.Id);"}
{"prompt":"Añade un punto al Path of Travel seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un Path of Travel\");\nPathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\nIList<XYZ> points = pot.GetPath();\nXYZ midPoint = (points[0] + points[1]) / 2;\npoints.Insert(1, midPoint); \npot.Update(points);"}
{"prompt":"Add a point to the selected Path of Travel.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a Path of Travel\");\nPathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\nIList<XYZ> points = pot.GetPath();\nXYZ midPoint = (points[0] + points[1]) / 2;\npoints.Insert(1, midPoint);\npot.Update(points);"}
{"prompt":"Comprueba si la vista activa es una vista de plano.","completion":"View activeView = doc.ActiveView;\nbool isPlanView = activeView.ViewType == ViewType.FloorPlan \n    || activeView.ViewType == ViewType.CeilingPlan \n    || activeView.ViewType == ViewType.AreaPlan \n    || activeView.ViewType == ViewType.EngineeringPlan;"}
{"prompt":"Check if the active view is a plan view.","completion":"View activeView = doc.ActiveView;\nbool isPlanView = activeView.ViewType == ViewType.FloorPlan \n    || activeView.ViewType == ViewType.CeilingPlan \n    || activeView.ViewType == ViewType.AreaPlan \n    || activeView.ViewType == ViewType.EngineeringPlan;"}
{"prompt":"Crea un nuevo tipo de tubería llamado 'Tubería de Acero' con material 'Acero, Carbono'.","completion":"string newTypeName = \"Tubería de Acero\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Acero, Carbono\") as Material;\nPipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\nnewType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM).Set(steel.Id);"}
{"prompt":"Create a new pipe type named 'Steel Pipe' with 'Steel, Carbon' material.","completion":"string newTypeName = \"Steel Pipe\";\nPipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nMaterial steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Steel, Carbon\") as Material;\nPipeType newType = pipeTypeToDuplicate.Duplicate(newTypeName) as PipeType;\nnewType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM).Set(steel.Id);"}
{"prompt":"Crea una nueva hoja A1 y coloca la vista 'Planta Baja' en ella.","completion":"string sheetNumber = \"A-101\";\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A1\")) as FamilySymbol;\nView viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Planta Baja\") as View;\nViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\nnewSheet.Name = \"Planta Arquitectónica - Planta Baja\";\nnewSheet.SheetNumber = sheetNumber;\nBoundingBoxUV sheetBox = newSheet.Outline;\nXYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\nViewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);"}
{"prompt":"Create a new A1 sheet and place the 'Ground Floor' view on it.","completion":"string sheetNumber = \"A-101\";\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A1\")) as FamilySymbol;\nView viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Ground Floor\") as View;\nViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\nnewSheet.Name = \"Architectural Plan - Ground Floor\";\nnewSheet.SheetNumber = sheetNumber;\nBoundingBoxUV sheetBox = newSheet.Outline;\nXYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\nViewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-60' y asigna '60 min' al parámetro 'Fire Rating'.","completion":"string newTypeName = \"Puerta RF-60\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\nParameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\nfireRatingParam.Set(\"60 min\");"}
{"prompt":"Create a new door type named 'FR-60 Door' and set the 'Fire Rating' parameter to '60 min'.","completion":"string newTypeName = \"FR-60 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\nParameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\nfireRatingParam.Set(\"60 min\");"}
{"prompt":"Encuentra todos los muros que no están asociados a ningún nivel.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Find all walls that are not associated with any level.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}

{"prompt":"Crea un nuevo tipo de texto de 3mm de color azul.","completion":"string newTypeName = \"3mm Azul\";\nTextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nTextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\nnewType.get_Parameter(BuiltInParameter.TEXT_SIZE).Set(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Millimeters));\nnewType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(0,0,255).GetElementId());"}
{"prompt":"Create a new 3mm text type in blue color.","completion":"string newTypeName = \"3mm Blue\";\nTextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nTextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\nnewType.get_Parameter(BuiltInParameter.TEXT_SIZE).Set(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Millimeters));\nnewType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(0,0,255).GetElementId());"}
{"prompt":"Crea una vista de sección entre los puntos (0,0,0) y (10,10,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\nXYZ p1 = new XYZ(0,0,0);\nXYZ p2 = new XYZ(10,10,0);\nXYZ midPoint = (p1 + p2) / 2;\nXYZ direction = (p2 - p1).Normalize();\nXYZ up = XYZ.BasisZ;\nXYZ viewdir = up.CrossProduct(direction);\nBoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\nTransform t = Transform.Identity;\nt.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(-p1.DistanceTo(p2)/2, -10, 0);\nsectionBox.Max = new XYZ(p1.DistanceTo(p2)/2, 10, 20);\nViewSection.CreateSection(doc, vft.Id, sectionBox);"}
{"prompt":"Create a section view between points (0,0,0) and (10,10,0).","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\nXYZ p1 = new XYZ(0,0,0);\nXYZ p2 = new XYZ(10,10,0);\nXYZ midPoint = (p1 + p2) / 2;\nXYZ direction = (p2 - p1).Normalize();\nXYZ up = XYZ.BasisZ;\nXYZ viewdir = up.CrossProduct(direction);\nBoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\nTransform t = Transform.Identity;\nt.Origin = midPoint;\nt.BasisX = direction;\nt.BasisY = up;\nt.BasisZ = viewdir;\nsectionBox.Transform = t;\nsectionBox.Min = new XYZ(-p1.DistanceTo(p2)/2, -10, 0);\nsectionBox.Max = new XYZ(p1.DistanceTo(p2)/2, 10, 20);\nViewSection.CreateSection(doc, vft.Id, sectionBox);"}
{"prompt":"Aplica aislamiento térmico de 25mm a todas las tuberías de agua caliente.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\") || s.Name.Contains(\"Agua Caliente\"));\nList<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == hotWaterSystem.Id).ToList();\nforeach(Pipe p in pipes)\n{\n    PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Millimeters));\n}"}
{"prompt":"Apply 25mm thermal insulation to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\nList<Pipe> pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == hotWaterSystem.Id).ToList();\nforeach(Pipe p in pipes)\n{\n    PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Millimeters));\n}"}
{"prompt":"Genera sombras en la vista 3D para el solsticio de verano al mediodía.","completion":"View3D view3d = new FilteredElementCollector(doc).OfClass(typeof(View3D)).FirstOrDefault(v => !v.IsTemplate) as View3D;\nSunAndShadowSettings sunSettings = view3d.SunAndShadowSettings;\nsunSettings.SunAndShadowType = SunAndShadowType.Still;\nsunSettings.SetTimeAndDate(new DateTime(DateTime.Now.Year, 6, 21, 12, 0, 0));\nview3d.ShadowsOn = true;"}
{"prompt":"Generate shadows in the 3D view for the summer solstice at noon.","completion":"View3D view3d = new FilteredElementCollector(doc).OfClass(typeof(View3D)).FirstOrDefault(v => !v.IsTemplate) as View3D;\nSunAndShadowSettings sunSettings = view3d.SunAndShadowSettings;\nsunSettings.SunAndShadowType = SunAndShadowType.Still;\nsunSettings.SetTimeAndDate(new DateTime(DateTime.Now.Year, 6, 21, 12, 0, 0));\nview3d.ShadowsOn = true;"}
{"prompt":"Crea un suelo con un hueco circular en el centro.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nCurveLoop outerLoop = CurveLoop.CreateViaRectangle(new XYZ(-10,-10,0), new XYZ(10,10,0));\nXYZ center = XYZ.Zero;\ndouble radius = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nCurveLoop innerLoop = CurveLoop.CreateViaThruPoints(new List<XYZ> { center + new XYZ(radius,0,0), center + new XYZ(0,radius,0), center - new XYZ(radius,0,0), center - new XYZ(0,radius,0), center + new XYZ(radius,0,0) });\nFloor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);"}
{"prompt":"Create a floor with a circular hole in the center.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nCurveLoop outerLoop = CurveLoop.CreateViaRectangle(new XYZ(-10,-10,0), new XYZ(10,10,0));\nXYZ center = XYZ.Zero;\ndouble radius = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nCurveLoop innerLoop = CurveLoop.CreateViaThruPoints(new List<XYZ> { center + new XYZ(radius,0,0), center + new XYZ(0,radius,0), center - new XYZ(radius,0,0), center - new XYZ(0,radius,0), center + new XYZ(radius,0,0) });\nFloor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);"}
{"prompt":"Oculta todas las categorías de anotación en la vista activa.","completion":"ICollection<Category> categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(doc.ActiveView))\n    {\n         doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Hide all annotation categories in the active view.","completion":"ICollection<Category> categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Annotation && cat.get_AllowsVisibilityControl(doc.ActiveView))\n    {\n         doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Encuentra todas las vistas que no tienen una plantilla de vista asignada.","completion":"List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId).ToList();"}
{"prompt":"Find all views that do not have an assigned view template.","completion":"List<View> viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId).ToList();"}
{"prompt":"Establece el parámetro 'Marca' de todos los muros seleccionados a 'M-EXT-01'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nforeach(ElementId id in selectedIds)\n{\n    Element elem = doc.GetElement(id);\n    if(elem is Wall)\n    {\n        elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK)?.Set(\"M-EXT-01\");\n    }\n}"}
{"prompt":"Set the 'Mark' parameter of all selected walls to 'W-EXT-01'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nforeach(ElementId id in selectedIds)\n{\n    Element elem = doc.GetElement(id);\n    if(elem is Wall)\n    {\n        elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK)?.Set(\"W-EXT-01\");\n    }\n}"}
{"prompt":"Crea 5 worksets para las disciplinas de ingeniería.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}"}
{"prompt":"Create 5 worksets for engineering disciplines.","completion":"List<string> worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}"}
{"prompt":"Encuentra todas las familias de anotación y muestra sus nombres.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}
{"prompt":"Find all annotation families and display their names.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}
{"prompt":"Ajusta todas las ventanas para que tengan la altura del antepecho a 900mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Set the sill height of all windows to 900mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Exporta todas las vistas 3D que empiezan con 'Coord' a imágenes PNG.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\nstring folderPath = \"C:/RevitExports/\";\nImageExportOptions options = new ImageExportOptions();\noptions.FilePath = System.IO.Path.Combine(folderPath, \"CoordView_\");\noptions.ImageFileType = ImageFileType.PNG;\noptions.ZoomType = ZoomFitType.FitToPage;\noptions.ExportRange = ExportRange.SetOfViews;\noptions.SetViews(viewsToExport);\ndoc.ExportImage(options);"}
{"prompt":"Export all 3D views starting with 'Coord' to PNG images.","completion":"List<ElementId> viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\") && !v.IsTemplate).Select(v => v.Id).ToList();\nstring folderPath = \"C:/RevitExports/\";\nImageExportOptions options = new ImageExportOptions();\noptions.FilePath = System.IO.Path.Combine(folderPath, \"CoordView_\");\noptions.ImageFileType = ImageFileType.PNG;\noptions.ZoomType = ZoomFitType.FitToPage;\noptions.ExportRange = ExportRange.SetOfViews;\noptions.SetViews(viewsToExport);\ndoc.ExportImage(options);"}
{"prompt":"Crea una viga estructural entre (0,0,3) y (5,0,3) en el Nivel 2.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 2\");\nif(!beamType.IsActive) beamType.Activate();\nXYZ start = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\nXYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\nLine beamCurve = Line.CreateBound(start, end);\ndoc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);"}
{"prompt":"Create a structural beam between (0,0,3) and (5,0,3) on Level 2.","completion":"FamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nif(!beamType.IsActive) beamType.Activate();\nXYZ start = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\nXYZ end = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\nLine beamCurve = Line.CreateBound(start, end);\ndoc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);"}
{"prompt":"Crea un nuevo parámetro de proyecto compartido de texto llamado 'Notas Adicionales' para muros y puertas.","completion":"string paramName = \"Notas Adicionales\";\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = defFile.Groups.get_Item(\"General\") ?? defFile.Groups.Create(\"General\");\nDefinition definition = group.Definitions.get_Item(paramName) ?? group.Definitions.Create(new ExternalDefinitionCreationOptions(paramName, SpecTypeId.String.Text));\nCategorySet categories = doc.Application.Create.NewCategorySet();\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\nInstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\ndoc.ParameterBindings.Insert((ExternalDefinition)definition, binding, BuiltInParameterGroup.PG_DATA);"}
{"prompt":"Create a new shared text project parameter named 'Additional Notes' for walls and doors.","completion":"string paramName = \"Additional Notes\";\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = defFile.Groups.get_Item(\"General\") ?? defFile.Groups.Create(\"General\");\nDefinition definition = group.Definitions.get_Item(paramName) ?? group.Definitions.Create(new ExternalDefinitionCreationOptions(paramName, SpecTypeId.String.Text));\nCategorySet categories = doc.Application.Create.NewCategorySet();\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\nInstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\ndoc.ParameterBindings.Insert((ExternalDefinition)definition, binding, BuiltInParameterGroup.PG_DATA);"}
{"prompt":"Crea un nivel 'Roof Terrace' a 15m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;"}
{"prompt":"Create a 'Roof Terrace' level at 15m.","completion":"string levelName = \"Roof Terrace\";\ndouble elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elev);\nnewLevel.Name = levelName;"}
{"prompt":"Coloca postes de iluminación cada 10m en un camino de 100m.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(!lightSymbol.IsActive) lightSymbol.Activate();\ndouble spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i <= 10; i++)\n{\n    XYZ point = new XYZ(i * spacing, 0, 0);\n    doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Place lighting posts every 10m along a 100m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\") || s.Name.Contains(\"Pole\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(!lightSymbol.IsActive) lightSymbol.Activate();\ndouble spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i <= 10; i++)\n{\n    XYZ point = new XYZ(i * spacing, 0, 0);\n    doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Genera una cuadrícula de columnas 5x5 con separación de 8 metros.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(!columnSymbol.IsActive) columnSymbol.Activate();\ndouble spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\nfor(int i=0; i<5; i++)\n{\n    for(int j=0; j<5; j++)\n    {\n        doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n    }\n}"}
{"prompt":"Generate a 5x5 column grid with 8-meter spacing.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(!columnSymbol.IsActive) columnSymbol.Activate();\ndouble spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\nfor(int i=0; i<5; i++)\n{\n    for(int j=0; j<5; j++)\n    {\n        doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n    }\n}"}
{"prompt":"Crea una habitación circular con un radio de 5 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nViewPlan planView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.GenLevel.Id == level.Id) as ViewPlan;\ndouble radius = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\nCurveLoop profile = CurveLoop.CreateViaThruPoints(new List<XYZ> { new XYZ(radius,0,0), new XYZ(0,radius,0), new XYZ(-radius,0,0), new XYZ(0,-radius,0), new XYZ(radius,0,0) });\nICollection<ElementId> sepLines = doc.Create.NewRoomBoundaryLines(planView.SketchPlane, profile, planView);\ndoc.Create.NewRoom(level, new UV(0,0));"}
{"prompt":"Create a circular room with a 5-meter radius.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nViewPlan planView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.GenLevel.Id == level.Id) as ViewPlan;\ndouble radius = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\nCurveLoop profile = CurveLoop.CreateViaThruPoints(new List<XYZ> { new XYZ(radius,0,0), new XYZ(0,radius,0), new XYZ(-radius,0,0), new XYZ(0,-radius,0), new XYZ(radius,0,0) });\nICollection<ElementId> sepLines = doc.Create.NewRoomBoundaryLines(planView.SketchPlane, profile, planView);\ndoc.Create.NewRoom(level, new UV(0,0));"}
{"prompt":"Importa topografía georreferenciada desde un archivo LandXML.","completion":"string filePath = \"C:/CAD/site.xml\";\nLandXMLImportOptions options = new LandXMLImportOptions();\noptions.XYLengthUnit = XYLengthUnit.Meter;\ndoc.Import(filePath, options);"}
{"prompt":"Import a georeferenced survey from a LandXML file.","completion":"string filePath = \"C:/CAD/site.xml\";\nLandXMLImportOptions options = new LandXMLImportOptions();\noptions.XYLengthUnit = XYLengthUnit.Meter;\ndoc.Import(filePath, options);"}
{"prompt":"Crea una vista de plano de plafón reflejado para el Nivel 1.","completion":"string levelName = \"Nivel 1\";\nstring viewName = \"Plano de Plafón Nivel 1\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\nrcp.Name = viewName;"}
{"prompt":"Create a Reflected Ceiling Plan view for Level 1.","completion":"string levelName = \"Level 1\";\nstring viewName = \"Level 1 Ceiling Plan\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == levelName) as Level;\nViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\nrcp.Name = viewName;"}
{"prompt":"Añade un plano de referencia horizontal llamado 'Eje Central A'.","completion":"string rpName = \"Eje Central A\";\nReferencePlane rp = ReferencePlane.Create(doc, XYZ.Zero, XYZ.BasisX, XYZ.BasisZ, doc.ActiveView);\nrp.Name = rpName;"}
{"prompt":"Add a horizontal reference plane named 'Centerline A'.","completion":"string rpName = \"Centerline A\";\nReferencePlane rp = ReferencePlane.Create(doc, XYZ.Zero, XYZ.BasisX, XYZ.BasisZ, doc.ActiveView);\nrp.Name = rpName;"}
{"prompt":"Duplica el nivel 1 con un desfase de 3m y llámalo 'Mezanine'.","completion":"string levelName = \"Mezanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\ndouble newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, newElevation);\nnewLevel.Name = levelName;"}
{"prompt":"Duplicate level 1 with a 3m offset and name it 'Mezzanine'.","completion":"string levelName = \"Mezzanine\";\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\ndouble newElevation = level1.ProjectElevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, newElevation);\nnewLevel.Name = levelName;"}
{"prompt":"Etiqueta todas las habitaciones con su área.","completion":"View activeView = doc.ActiveView;\nList<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nforeach(Room room in rooms)\n{\n    if(room.Location != null)\n    {\n        doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(room.Location.Point.X, room.Location.Point.Y), activeView.Id);\n    }\n}"}
{"prompt":"Tag all rooms with their area.","completion":"View activeView = doc.ActiveView;\nList<Room> rooms = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();\nforeach(Room room in rooms)\n{\n    if(room.Location != null)\n    {\n        doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(room.Location.Point.X, room.Location.Point.Y), activeView.Id);\n    }\n}"}
{"prompt":"Exporta una lista de materiales a un archivo de texto.","completion":"string folderPath = \"C:/RevitExports/\";\nstring filePath = System.IO.Path.Combine(folderPath, \"materials.txt\");\nList<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\nSystem.IO.File.WriteAllLines(filePath, materialNames);"}
{"prompt":"Export a list of materials to a text file.","completion":"string folderPath = \"C:/RevitExports/\";\nstring filePath = System.IO.Path.Combine(folderPath, \"materials.txt\");\nList<Material> materials = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().ToList();\nList<string> materialNames = new List<string>();\nforeach(Material m in materials)\n{\n    materialNames.Add(m.Name);\n}\nSystem.IO.File.WriteAllLines(filePath, materialNames);"}
{"prompt":"Aísla temporalmente todo el mobiliario en la vista activa.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\ndoc.ActiveView.IsolateElementsTemporary(furnitureIds);"}
{"prompt":"Temporarily isolate all furniture in the active view.","completion":"ICollection<ElementId> furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\ndoc.ActiveView.IsolateElementsTemporary(furnitureIds);"}

{"prompt":"Coloca un ducto redondo de 200mm de diámetro.","completion":"DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).FirstOrDefault(dt => dt.Shape == ConnectorProfileType.Round) as DuctType;\nMEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(st => st.SystemClassification == MEPSystemClassification.SupplyAir);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nDuct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, new XYZ(0,0,3), new XYZ(10,0,3));\nduct.get_Parameter(BuiltInParameter.RBS_CURVE_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(200, UnitTypeId.Millimeters));"}
{"prompt":"Place a 200mm diameter round duct.","completion":"DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).FirstOrDefault(dt => dt.Shape == ConnectorProfileType.Round) as DuctType;\nMEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(st => st.SystemClassification == MEPSystemClassification.SupplyAir);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nDuct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, new XYZ(0,0,3), new XYZ(10,0,3));\nduct.get_Parameter(BuiltInParameter.RBS_CURVE_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(200, UnitTypeId.Millimeters));"}
{"prompt":"Crea un suelo con un contorno definido por el usuario.","completion":"UIDocument uidoc = new UIDocument(doc);\nIList<Reference> pickedRefs = uidoc.Selection.PickObjects(ObjectType.Element, \"Selecciona las líneas de contorno cerradas\");\nCurveLoop profile = new CurveLoop();\nforeach(Reference r in pickedRefs)\n{\n    ModelCurve mc = doc.GetElement(r) as ModelCurve;\n    profile.Append(mc.GeometryCurve);\n}\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nLevel level = doc.ActiveView.GenLevel;\nFloor.Create(doc, new List<CurveLoop>{profile}, floorType.Id, level.Id);"}
{"prompt":"Create a floor with a user-defined boundary.","completion":"UIDocument uidoc = new UIDocument(doc);\nIList<Reference> pickedRefs = uidoc.Selection.PickObjects(ObjectType.Element, \"Select the closed boundary lines\");\nCurveLoop profile = new CurveLoop();\nforeach(Reference r in pickedRefs)\n{\n    ModelCurve mc = doc.GetElement(r) as ModelCurve;\n    profile.Append(mc.GeometryCurve);\n}\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nLevel level = doc.ActiveView.GenLevel;\nFloor.Create(doc, new List<CurveLoop>{profile}, floorType.Id, level.Id);"}
{"prompt":"Encuentra todos los elementos dentro de la habitación 'Sala de Juntas'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Sala de Juntas\") as Room;\nElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(room);\nList<Element> elementsInRoom = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(filter).WhereElementIsNotElementType().ToList();"}
{"prompt":"Find all elements inside the 'Conference Room'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Conference Room\") as Room;\nElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(room);\nList<Element> elementsInRoom = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(filter).WhereElementIsNotElementType().ToList();"}
{"prompt":"Exporta todos los muros con un parámetro de Marca a un archivo CSV.","completion":"string folderPath = \"C:/RevitExports/\";\nstring filePath = System.IO.Path.Combine(folderPath, \"walls_mark.csv\");\nList<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nList<string> lines = new List<string>{\"ElementId,Mark\"};\nforeach(var w in walls)\n{\n    Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n    if(p != null && p.HasValue)\n    {\n        lines.Add($\"{w.Id.IntegerValue},{p.AsString()}\");\n    }\n}\nSystem.IO.File.WriteAllLines(filePath, lines);"}
{"prompt":"Export all walls with a Mark parameter to a CSV file.","completion":"string folderPath = \"C:/RevitExports/\";\nstring filePath = System.IO.Path.Combine(folderPath, \"walls_mark.csv\");\nList<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nList<string> lines = new List<string>{\"ElementId,Mark\"};\nforeach(var w in walls)\n{\n    Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n    if(p != null && p.HasValue)\n    {\n        lines.Add($\"{w.Id.IntegerValue},{p.AsString()}\");\n    }\n}\nSystem.IO.File.WriteAllLines(filePath, lines);"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 300mm' con un grosor de 30cm.","completion":"string newTypeName = \"Muro Genérico 300mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\nCompoundStructure cs = newWallType.GetCompoundStructure();\ncs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\nnewWallType.SetCompoundStructure(cs);"}
{"prompt":"Create a new wall type 'Generic Wall 300mm' with a thickness of 30cm.","completion":"string newTypeName = \"Generic Wall 300mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\nCompoundStructure cs = newWallType.GetCompoundStructure();\ncs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\nnewWallType.SetCompoundStructure(cs);"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior\");\nforeach(ElementId id in selectedIds)\n{\n    Wall wall = doc.GetElement(id) as Wall;\n    if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n}"}
{"prompt":"Change the type of all selected walls to 'Exterior Wall'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Exterior Wall\");\nforeach(ElementId id in selectedIds)\n{\n    Wall wall = doc.GetElement(id) as Wall;\n    if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n}"}
{"prompt":"Renombrar el Nivel 'Nivel 1' a 'Planta Baja'.","completion":"string oldName = \"Nivel 1\";\nstring newName = \"Planta Baja\";\nLevel levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == oldName);\nlevelToRename.Name = newName;"}
{"prompt":"Rename the 'Level 1' level to 'Ground Floor'.","completion":"string oldName = \"Level 1\";\nstring newName = \"Ground Floor\";\nLevel levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == oldName);\nlevelToRename.Name = newName;"}
{"prompt":"Crea un pilar estructural de 300x300mm en la coordenada (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(!columnType.IsActive) columnType.Activate();\nXYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0);\ndoc.Create.NewFamilyInstance(point, columnType, level, StructuralType.Column);"}
{"prompt":"Create a 300x300mm structural column at coordinate (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(!columnType.IsActive) columnType.Activate();\nXYZ point = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0);\ndoc.Create.NewFamilyInstance(point, columnType, level, StructuralType.Column);"}
{"prompt":"Alinea todos los muros seleccionados con el eje '1'.","completion":"UIDocument uidoc = new UIDocument(doc);\nGrid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nICollection<ElementId> selectedWallIds = uidoc.Selection.GetElementIds();\nforeach(ElementId wallId in selectedWallIds)\n{\n    Wall wall = doc.GetElement(wallId) as Wall;\n    if (wall != null)\n    {\n        doc.Create.NewAlignment(doc.ActiveView, new Reference(wall), new Reference(targetGrid));\n    }\n}"}
{"prompt":"Align all selected walls with grid '1'.","completion":"UIDocument uidoc = new UIDocument(doc);\nGrid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nICollection<ElementId> selectedWallIds = uidoc.Selection.GetElementIds();\nforeach(ElementId wallId in selectedWallIds)\n{\n    Wall wall = doc.GetElement(wallId) as Wall;\n    if (wall != null)\n    {\n        doc.Create.NewAlignment(doc.ActiveView, new Reference(wall), new Reference(targetGrid));\n    }\n}"}
{"prompt":"Aplica el material 'Hormigón' a todos los suelos del proyecto.","completion":""}
{"prompt":"Apply the 'Concrete' material to all floors in the project.","completion":""}
{"prompt":"Borra todos los grupos de anotación del modelo.","completion":"List<ElementId> annotationGroups = new FilteredElementCollector(doc).OfClass(typeof(Group)).Cast<Group>().Where(g => g.Category != null && g.Category.CategoryType == CategoryType.Annotation).Select(g => g.Id).ToList();\ndoc.Delete(annotationGroups);"}
{"prompt":"Delete all annotation groups from the model.","completion":"List<ElementId> annotationGroups = new FilteredElementCollector(doc).OfClass(typeof(Group)).Cast<Group>().Where(g => g.Category != null && g.Category.CategoryType == CategoryType.Annotation).Select(g => g.Id).ToList();\ndoc.Delete(annotationGroups);"}
{"prompt":"Obtén la geometría sólida de un pilar seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un pilar\");\nElement elem = doc.GetElement(pickedRef);\nOptions opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\nGeometryElement geoElem = elem.get_Geometry(opt);\nSolid solid = geoElem.OfType<Solid>().FirstOrDefault(s => s.Volume > 0);"}
{"prompt":"Get the solid geometry of a selected column.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a column\");\nElement elem = doc.GetElement(pickedRef);\nOptions opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\nGeometryElement geoElem = elem.get_Geometry(opt);\nSolid solid = geoElem.OfType<Solid>().FirstOrDefault(s => s.Volume > 0);"}
{"prompt":"Crea una dimensión alineada entre dos muros paralelos.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer muro\");\nReference r2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo muro\");\nWall w1 = doc.GetElement(r1) as Wall;\nWall w2 = doc.GetElement(r2) as Wall;\nLine l1 = (w1.Location as LocationCurve).Curve as Line;\nLine l2 = (w2.Location as LocationCurve).Curve as Line;\nReferenceArray refs = new ReferenceArray();\nrefs.Append(r1);\nrefs.Append(r2);\nLine dimLine = Line.CreateBound(l1.GetEndPoint(0) + l1.Direction.Normalize() * 2, l2.GetEndPoint(0) + l2.Direction.Normalize() * 2);\ndoc.Create.NewDimension(doc.ActiveView, dimLine, refs);"}
{"prompt":"Create an aligned dimension between two parallel walls.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first wall\");\nReference r2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second wall\");\nWall w1 = doc.GetElement(r1) as Wall;\nWall w2 = doc.GetElement(r2) as Wall;\nLine l1 = (w1.Location as LocationCurve).Curve as Line;\nLine l2 = (w2.Location as LocationCurve).Curve as Line;\nReferenceArray refs = new ReferenceArray();\nrefs.Append(r1);\nrefs.Append(r2);\nLine dimLine = Line.CreateBound(l1.GetEndPoint(0) + l1.Direction.Normalize() * 2, l2.GetEndPoint(0) + l2.Direction.Normalize() * 2);\ndoc.Create.NewDimension(doc.ActiveView, dimLine, refs);"}
{"prompt":"Asigna todos los muros seleccionados para ser demolidos en la 'Fase de Demolición'.","completion":"Phase demoPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).FirstOrDefault(p => p.Name.Contains(\"Demolición\") || p.Name.Contains(\"Demolition\")) as Phase;\nUIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nforeach(ElementId id in selectedIds)\n{\n    Element elem = doc.GetElement(id);\n    if(elem is Wall) elem.DemolishedPhaseId = demoPhase.Id;\n}"}
{"prompt":"Assign all selected walls to be demolished in the 'Demolition Phase'.","completion":"Phase demoPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).FirstOrDefault(p => p.Name.Contains(\"Demolition\")) as Phase;\nUIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nforeach(ElementId id in selectedIds)\n{\n    Element elem = doc.GetElement(id);\n    if(elem is Wall) elem.DemolishedPhaseId = demoPhase.Id;\n}"}
{"prompt":"Obtén el anfitrión de una luminaria seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una luminaria\");\nFamilyInstance fixture = doc.GetElement(pickedRef) as FamilyInstance;\nElement host = fixture.Host;"}
{"prompt":"Get the host of a selected light fixture.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a light fixture\");\nFamilyInstance fixture = doc.GetElement(pickedRef) as FamilyInstance;\nElement host = fixture.Host;"}
{"prompt":"Crea un nuevo tipo de rejilla con color de línea azul.","completion":"string newTypeName = \"Eje Azul\";\nGridType gridType = new FilteredElementCollector(doc).OfClass(typeof(GridType)).FirstOrDefault() as GridType;\nGridType newGridType = gridType.Duplicate(newTypeName) as GridType;\nnewGridType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(0, 0, 255).GetElementId());"}
{"prompt":"Create a new grid type with a blue line color.","completion":"string newTypeName = \"Blue Grid\";\nGridType gridType = new FilteredElementCollector(doc).OfClass(typeof(GridType)).FirstOrDefault() as GridType;\nGridType newGridType = gridType.Duplicate(newTypeName) as GridType;\nnewGridType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(0, 0, 255).GetElementId());"}
{"prompt":"Calcula el volumen total de hormigón en todos los pilares estructurales.","completion":"double totalVolume = 0.0;\nList<Element> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().ToList();\nforeach(Element col in columns)\n{\n    Parameter volParam = col.get_Parameter(BuiltInParameter.HOST_VOLUME_COMPUTED);\n    totalVolume += volParam.AsDouble();\n}"}
{"prompt":"Calculate the total concrete volume in all structural columns.","completion":"double totalVolume = 0.0;\nList<Element> columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().ToList();\nforeach(Element col in columns)\n{\n    Parameter volParam = col.get_Parameter(BuiltInParameter.HOST_VOLUME_COMPUTED);\n    totalVolume += volParam.AsDouble();\n}"}
{"prompt":"Aplica un desfase de 30cm desde el nivel a todos los suelos seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\ndouble offset = UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters);\nforeach(ElementId id in selectedIds)\n{\n    Floor floor = doc.GetElement(id) as Floor;\n    if(floor != null)\n    {\n        floor.get_Parameter(BuiltInParameter.FLOOR_HEIGHTABOVELEVEL_PARAM)?.Set(offset);\n    }\n}"}
{"prompt":"Apply a 30cm offset from the level to all selected floors.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\ndouble offset = UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters);\nforeach(ElementId id in selectedIds)\n{\n    Floor floor = doc.GetElement(id) as Floor;\n    if(floor != null)\n    {\n        floor.get_Parameter(BuiltInParameter.FLOOR_HEIGHTABOVELEVEL_PARAM)?.Set(offset);\n    }\n}"}
{"prompt":"Crea una opción de diseño principal llamada 'Alternativa Fachada'.","completion":"string setName = \"Conjunto Fachada\";\nstring optionName = \"Alternativa Fachada\";\nDesignOptionSet optionSet = DesignOptionSet.GetDesignOptionSet(doc, setName) ?? DesignOptionSet.Create(doc, setName);\nDesignOption.Create(doc, optionName, optionSet.Id);"}
{"prompt":"Create a main design option named 'Facade Alternative'.","completion":"string setName = \"Facade Set\";\nstring optionName = \"Facade Alternative\";\nDesignOptionSet optionSet = DesignOptionSet.GetDesignOptionSet(doc, setName) ?? DesignOptionSet.Create(doc, setName);\nDesignOption.Create(doc, optionName, optionSet.Id);"}
{"prompt":"Crea una vista de leyenda para tipos de muro.","completion":"string legendName = \"Leyenda de Tipos de Muro\";\nViewFamilyType legendVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Legend);\nViewLegend legendView = ViewLegend.Create(doc, legendVFT.Id);\nlegendView.Name = legendName;"}
{"prompt":"Create a legend view for wall types.","completion":"string legendName = \"Wall Type Legend\";\nViewFamilyType legendVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Legend);\nViewLegend legendView = ViewLegend.Create(doc, legendVFT.Id);\nlegendView.Name = legendName;"}
{"prompt":"Rota la vista activa 45 grados.","completion":"View activeView = doc.ActiveView;\nParameter rotationParam = activeView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED);\ndouble currentRotation = rotationParam.AsDouble();\nrotationParam.Set(currentRotation + (45 * Math.PI / 180.0));"}
{"prompt":"Rotate the active view by 45 degrees.","completion":"View activeView = doc.ActiveView;\nParameter rotationParam = activeView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED);\ndouble currentRotation = rotationParam.AsDouble();\nrotationParam.Set(currentRotation + (45 * Math.PI / 180.0));"}
{"prompt":"Crea una vista de detalle (callout) rectangular.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nXYZ p1 = new XYZ(0,0,0);\nXYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nElementId viewFamilyTypeId = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Detail).Id;\nViewSection.CreateCallout(doc, planView.Id, viewFamilyTypeId, p1, p2);"}
{"prompt":"Create a rectangular callout view.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nXYZ p1 = new XYZ(0,0,0);\nXYZ p2 = new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nElementId viewFamilyTypeId = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Detail).Id;\nViewSection.CreateCallout(doc, planView.Id, viewFamilyTypeId, p1, p2);"}
{"prompt":"Añade las luminarias seleccionadas al primer circuito eléctrico disponible.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedFixtures = uidoc.Selection.GetElementIds();\nElectricalSystem circuit = new FilteredElementCollector(doc).OfClass(typeof(ElectricalSystem)).FirstOrDefault() as ElectricalSystem;\ncircuit.Add(selectedFixtures);"}
{"prompt":"Add the selected light fixtures to the first available electrical circuit.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedFixtures = uidoc.Selection.GetElementIds();\nElectricalSystem circuit = new FilteredElementCollector(doc).OfClass(typeof(ElectricalSystem)).FirstOrDefault() as ElectricalSystem;\ncircuit.Add(selectedFixtures);"}
{"prompt":"Resuelve la primera advertencia del proyecto eliminando los elementos.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();\nFailureMessage firstWarning = warnings.First();\nICollection<ElementId> failingElements = firstWarning.GetFailingElements();\ndoc.Delete(failingElements);"}
{"prompt":"Resolve the first project warning by deleting the elements.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();\nFailureMessage firstWarning = warnings.First();\nICollection<ElementId> failingElements = firstWarning.GetFailingElements();\ndoc.Delete(failingElements);"}
{"prompt":"Crea una nueva hoja A0 y coloca la vista 'Vista 3D General' en ella.","completion":"string sheetNumber = \"G-001\";\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A0\")) as FamilySymbol;\nView viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(View3D)).FirstOrDefault(v => v.Name == \"Vista 3D General\") as View;\nViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\nnewSheet.Name = \"Perspectiva General\";\nnewSheet.SheetNumber = sheetNumber;\nBoundingBoxUV sheetBox = newSheet.Outline;\nXYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\nViewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);"}
{"prompt":"Create a new A0 sheet and place the 'General 3D View' on it.","completion":"string sheetNumber = \"G-001\";\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A0\")) as FamilySymbol;\nView viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(View3D)).FirstOrDefault(v => v.Name == \"General 3D View\") as View;\nViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\nnewSheet.Name = \"General Perspective\";\nnewSheet.SheetNumber = sheetNumber;\nBoundingBoxUV sheetBox = newSheet.Outline;\nXYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\nViewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);"}

{"prompt":"Cambia el grosor de la capa núcleo de un tipo de muro a 200mm.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nCompoundStructure cs = wallType.GetCompoundStructure();\nint coreIndex = cs.GetFirstCoreLayerIndex();\ncs.SetLayerWidth(coreIndex, UnitUtils.ConvertToInternalUnits(200, UnitTypeId.Millimeters));\nwallType.SetCompoundStructure(cs);"}
{"prompt":"Change the core layer thickness of a wall type to 200mm.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nCompoundStructure cs = wallType.GetCompoundStructure();\nint coreIndex = cs.GetFirstCoreLayerIndex();\ncs.SetLayerWidth(coreIndex, UnitUtils.ConvertToInternalUnits(200, UnitTypeId.Millimeters));\nwallType.SetCompoundStructure(cs);"}
{"prompt":"Obtén todos los muros de un modelo de Revit vinculado.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\nDocument linkDoc = linkInstance.GetLinkDocument();\nList<Wall> linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();"}
{"prompt":"Get all walls from a linked Revit model.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\nDocument linkDoc = linkInstance.GetLinkDocument();\nList<Wall> linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();"}
{"prompt":"Aplica un color de relleno sólido rojo a todos los muros en la vista activa.","completion":"View activeView = doc.ActiveView;\nFillPatternElement solidFill = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.GetFillPattern().IsSolidFill) as FillPatternElement;\nOverrideGraphicSettings ogs = new OverrideGraphicSettings();\nogs.SetSurfaceForegroundPatternId(solidFill.Id);\nogs.SetSurfaceForegroundPatternColor(new Color(255, 0, 0));\nactiveView.SetCategoryOverrides(new ElementId(BuiltInCategory.OST_Walls), ogs);"}
{"prompt":"Apply a red solid fill color to all walls in the active view.","completion":"View activeView = doc.ActiveView;\nFillPatternElement solidFill = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.GetFillPattern().IsSolidFill) as FillPatternElement;\nOverrideGraphicSettings ogs = new OverrideGraphicSettings();\nogs.SetSurfaceForegroundPatternId(solidFill.Id);\nogs.SetSurfaceForegroundPatternColor(new Color(255, 0, 0));\nactiveView.SetCategoryOverrides(new ElementId(BuiltInCategory.OST_Walls), ogs);"}
{"prompt":"Exporta todos los elementos con la marca 'Revisar' a un archivo de texto.","completion":"string folderPath = \"C:/RevitExports/\";\nstring filePath = System.IO.Path.Combine(folderPath, \"review_elements.txt\");\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.ALL_MODEL_MARK));\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Revisar\", false);\nList<Element> elementsToReview = new FilteredElementCollector(doc).WherePasses(new ElementParameterFilter(rule)).ToList();\nList<string> lines = new List<string>();\nforeach(Element e in elementsToReview) \n{\n    lines.Add($\"{e.Id} - {e.Name}\");\n}\nSystem.IO.File.WriteAllLines(filePath, lines);"}
{"prompt":"Export all elements with the 'Review' mark to a text file.","completion":"string folderPath = \"C:/RevitExports/\";\nstring filePath = System.IO.Path.Combine(folderPath, \"review_elements.txt\");\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.ALL_MODEL_MARK));\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Review\", false);\nList<Element> elementsToReview = new FilteredElementCollector(doc).WherePasses(new ElementParameterFilter(rule)).ToList();\nList<string> lines = new List<string>();\nforeach(Element e in elementsToReview) \n{\n    lines.Add($\"{e.Id} - {e.Name}\");\n}\nSystem.IO.File.WriteAllLines(filePath, lines);"}
{"prompt":"Crea un nuevo sistema de tuberías de agua fría.","completion":"string systemName = \"Nuevo Sistema de Agua Fría\";\nPipingSystemType chilledWaterSystemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.ChilledWater);\nPipingSystem.Create(doc, chilledWaterSystemType.Id, systemName);"}
{"prompt":"Create a new chilled water piping system.","completion":"string systemName = \"New Chilled Water System\";\nPipingSystemType chilledWaterSystemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.ChilledWater);\nPipingSystem.Create(doc, chilledWaterSystemType.Id, systemName);"}
{"prompt":"Añade una etiqueta de tipo a la primera viga que encuentres.","completion":"FamilyInstance beam = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nLocationCurve lc = beam.Location as LocationCurve;\nIndependentTag.Create(doc, doc.ActiveView.Id, new Reference(beam), false, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, lc.Curve.Evaluate(0.5, true));"}
{"prompt":"Add a type tag to the first beam found.","completion":"FamilyInstance beam = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nLocationCurve lc = beam.Location as LocationCurve;\nIndependentTag.Create(doc, doc.ActiveView.Id, new Reference(beam), false, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, lc.Curve.Evaluate(0.5, true));"}
{"prompt":"Obtén el área de una cara de muro seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedFaceRef = uidoc.Selection.PickObject(ObjectType.Face, \"Selecciona una cara de muro\");\nElement elem = doc.GetElement(pickedFaceRef);\nFace face = elem.GetGeometryObjectFromReference(pickedFaceRef) as Face;\ndouble area = face.Area;"}
{"prompt":"Get the area of a selected wall face.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedFaceRef = uidoc.Selection.PickObject(ObjectType.Face, \"Select a wall face\");\nElement elem = doc.GetElement(pickedFaceRef);\nFace face = elem.GetGeometryObjectFromReference(pickedFaceRef) as Face;\ndouble area = face.Area;"}
{"prompt":"Crea una masa de barrido (sweep) a lo largo de una línea.","completion":""}
{"prompt":"Create a sweep mass along a line.","completion":""}
{"prompt":"Etiqueta todas las ventanas en la vista activa por categoría.","completion":"List<FamilyInstance> windows = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    LocationPoint loc = window.Location as LocationPoint;\n    if(loc != null) \n    {\n        IndependentTag.Create(doc, doc.ActiveView.Id, new Reference(window), false, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n    }\n}"}
{"prompt":"Tag all windows in the active view by category.","completion":"List<FamilyInstance> windows = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    LocationPoint loc = window.Location as LocationPoint;\n    if(loc != null) \n    {\n        IndependentTag.Create(doc, doc.ActiveView.Id, new Reference(window), false, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n    }\n}"}
{"prompt":"Elimina todos los elementos seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\ndoc.Delete(selectedIds);"}
{"prompt":"Delete all selected elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\ndoc.Delete(selectedIds);"}
{"prompt":"Añade montantes a todas las líneas de rejilla de un muro cortina seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro cortina\");\nWall curtainWall = doc.GetElement(pickedRef) as Wall;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nCurtainGrid grid = curtainWall.CurtainGrid;\nforeach (ElementId gridLineId in grid.GetVGridLineIds()) \n{\n    CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n    if(!line.MullionOnLine) line.AddMullions(mullionType, false);\n}\nforeach (ElementId gridLineId in grid.GetUGridLineIds()) \n{\n    CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n    if(!line.MullionOnLine) line.AddMullions(mullionType, false);\n}"}
{"prompt":"Add mullions to all grid lines of a selected curtain wall.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a curtain wall\");\nWall curtainWall = doc.GetElement(pickedRef) as Wall;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nCurtainGrid grid = curtainWall.CurtainGrid;\nforeach (ElementId gridLineId in grid.GetVGridLineIds()) \n{\n    CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n    if(!line.MullionOnLine) line.AddMullions(mullionType, false);\n}\nforeach (ElementId gridLineId in grid.GetUGridLineIds()) \n{\n    CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n    if(!line.MullionOnLine) line.AddMullions(mullionType, false);\n}"}
{"prompt":"Rota un elemento seleccionado 90 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, Math.PI / 2.0);"}
{"prompt":"Rotate a selected element 90 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, Math.PI / 2.0);"}
{"prompt":"Crea un sistema de vigas en un forjado seleccionado.","completion":""}
{"prompt":"Create a beam system on a selected floor slab.","completion":""}
{"prompt":"Exporta una lista de todas las advertencias del proyecto a un archivo de texto en el escritorio.","completion":"string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nstring filePath = System.IO.Path.Combine(desktopPath, \"RevitWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\nSystem.IO.File.WriteAllLines(filePath, warningDescriptions);"}
{"prompt":"Export a list of all project warnings to a text file on the desktop.","completion":"string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nstring filePath = System.IO.Path.Combine(desktopPath, \"RevitWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\nSystem.IO.File.WriteAllLines(filePath, warningDescriptions);"}
{"prompt":"Crea una vista de borrador (drafting view) llamada 'Detalles Típicos'.","completion":"string viewName = \"Detalles Típicos\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Drafting);\nViewDrafting draftingView = ViewDrafting.Create(doc, vft.Id);\ndraftingView.Name = viewName;"}
{"prompt":"Create a drafting view named 'Typical Details'.","completion":"string viewName = \"Typical Details\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Drafting);\nViewDrafting draftingView = ViewDrafting.Create(doc, vft.Id);\ndraftingView.Name = viewName;"}
{"prompt":"Muestra un diálogo para que el usuario introduzca un texto.","completion":""}
{"prompt":"Show a dialog for the user to input text.","completion":""}
{"prompt":"Cambia el tipo de todas las columnas seleccionadas a 'Columna de Hormigón 450x450'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nFamilySymbol targetType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Columna de Hormigón 450x450\");\nforeach(ElementId id in selectedIds)\n{\n    FamilyInstance fi = doc.GetElement(id) as FamilyInstance;\n    if(fi != null && fi.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralColumns)\n    {\n        fi.Symbol = targetType;\n    }\n}"}
{"prompt":"Change the type of all selected columns to 'Concrete Column 450x450'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nFamilySymbol targetType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Concrete Column 450x450\");\nforeach(ElementId id in selectedIds)\n{\n    FamilyInstance fi = doc.GetElement(id) as FamilyInstance;\n    if(fi != null && fi.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralColumns)\n    {\n        fi.Symbol = targetType;\n    }\n}"}
{"prompt":"Crea un suelo siguiendo el contorno de una habitación seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference roomRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una habitación\");\nRoom room = doc.GetElement(roomRef) as Room;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nIList<IList<BoundarySegment>> segments = room.GetBoundarySegments(new SpatialElementBoundaryOptions());\nCurveLoop profile = new CurveLoop();\nforeach(BoundarySegment seg in segments.First()) \n{\n    profile.Append(seg.GetCurve());\n}\nFloor.Create(doc, new List<CurveLoop>{profile}, floorType.Id, room.LevelId);"}
{"prompt":"Create a floor following the boundary of a selected room.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference roomRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a room\");\nRoom room = doc.GetElement(roomRef) as Room;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nIList<IList<BoundarySegment>> segments = room.GetBoundarySegments(new SpatialElementBoundaryOptions());\nCurveLoop profile = new CurveLoop();\nforeach(BoundarySegment seg in segments.First()) \n{\n    profile.Append(seg.GetCurve());\n}\nFloor.Create(doc, new List<CurveLoop>{profile}, floorType.Id, room.LevelId);"}
{"prompt":"Encuentra todas las familias que contienen 'Genérico' en su nombre.","completion":"List<Family> genericFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Genérico\") || f.Name.Contains(\"Generic\")).ToList();"}
{"prompt":"Find all families containing 'Generic' in their name.","completion":"List<Family> genericFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Generic\")).ToList();"}
{"prompt":"Aplica un desfase de -10cm a todos los muros seleccionados desde su línea de ubicación.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\ndouble offset = UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Centimeters);\nforeach(ElementId id in selectedIds)\n{\n    Wall wall = doc.GetElement(id) as Wall;\n    if(wall != null)\n    {\n        wall.get_Parameter(BuiltInParameter.WALL_BASE_OFFSET).Set(offset);\n    }\n}"}
{"prompt":"Apply a -10cm offset to all selected walls from their location line.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\ndouble offset = UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Centimeters);\nforeach(ElementId id in selectedIds)\n{\n    Wall wall = doc.GetElement(id) as Wall;\n    if(wall != null)\n    {\n        wall.get_Parameter(BuiltInParameter.WALL_BASE_OFFSET).Set(offset);\n    }\n}"}
{"prompt":"Duplica la vista activa con detalles.","completion":"View activeView = doc.ActiveView;\nElementId newViewId = activeView.Duplicate(ViewDuplicateOption.WithDetailing);"}
{"prompt":"Duplicate the active view with detailing.","completion":"View activeView = doc.ActiveView;\nElementId newViewId = activeView.Duplicate(ViewDuplicateOption.WithDetailing);"}
{"prompt":"Establece la escala de la vista activa a 1:50.","completion":"View activeView = doc.ActiveView;\nactiveView.Scale = 50;"}
{"prompt":"Set the active view's scale to 1:50.","completion":"View activeView = doc.ActiveView;\nactiveView.Scale = 50;"}
{"prompt":"Crea un nuevo tipo de suelo 'Suelo Genérico 30cm'.","completion":"string newTypeName = \"Suelo Genérico 30cm\";\nFloorType floorTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nFloorType newType = floorTypeToDuplicate.Duplicate(newTypeName) as FloorType;\nCompoundStructure cs = newType.GetCompoundStructure();\ncs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\nnewType.SetCompoundStructure(cs);"}
{"prompt":"Create a new floor type 'Generic Floor 30cm'.","completion":"string newTypeName = \"Generic Floor 30cm\";\nFloorType floorTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nFloorType newType = floorTypeToDuplicate.Duplicate(newTypeName) as FloorType;\nCompoundStructure cs = newType.GetCompoundStructure();\ncs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\nnewType.SetCompoundStructure(cs);"}
{"prompt":"Haz que todos los muros seleccionados sean estructurales.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nforeach(ElementId id in selectedIds)\n{\n    Wall wall = doc.GetElement(id) as Wall;\n    if(wall != null) \n    {\n        wall.get_Parameter(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT).Set(1);\n    }\n}"}
{"prompt":"Make all selected walls structural.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nforeach(ElementId id in selectedIds)\n{\n    Wall wall = doc.GetElement(id) as Wall;\n    if(wall != null) \n    {\n        wall.get_Parameter(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT).Set(1);\n    }\n}"}

{"prompt":"Crea un nuevo tipo de muro con una capa de acabado de 2cm.","completion":""}
{"prompt":"Create a new wall type with a 2cm finish layer.","completion":""}
{"prompt":"Obtén la longitud total de todos los muros del proyecto.","completion":"double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    totalLength += wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}"}
{"prompt":"Get the total length of all walls in the project.","completion":"double totalLength = 0.0;\nList<Wall> walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach (Wall wall in walls)\n{\n    totalLength += wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}"}
{"prompt":"Crea un filtro de vista que muestre solo las puertas con resistencia al fuego.","completion":"string filterName = \"Filtro Puertas RF\";\nElementId fireRatingParamId = new ElementId(BuiltInParameter.FIRE_RATING);\nFilterRule rule = ParameterFilterRuleFactory.CreateHasValueRule(fireRatingParamId);\nElementFilter filter = new ElementParameterFilter(rule);\nParameterFilterElement pfe = ParameterFilterElement.Create(doc, filterName, new List<ElementId>{new ElementId(BuiltInCategory.OST_Doors)}, filter);\ndoc.ActiveView.AddFilter(pfe.Id);"}
{"prompt":"Create a view filter that shows only fire-rated doors.","completion":"string filterName = \"Fire Rated Doors Filter\";\nElementId fireRatingParamId = new ElementId(BuiltInParameter.FIRE_RATING);\nFilterRule rule = ParameterFilterRuleFactory.CreateHasValueRule(fireRatingParamId);\nElementFilter filter = new ElementParameterFilter(rule);\nParameterFilterElement pfe = ParameterFilterElement.Create(doc, filterName, new List<ElementId>{new ElementId(BuiltInCategory.OST_Doors)}, filter);\ndoc.ActiveView.AddFilter(pfe.Id);"}
{"prompt":"Añade un refuerzo de área a una losa seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference floorRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\nFloor floor = doc.GetElement(floorRef) as Floor;\nAreaReinforcementType reinforcementType = new FilteredElementCollector(doc).OfClass(typeof(AreaReinforcementType)).FirstOrDefault() as AreaReinforcementType;\nIList<Curve> profile = floor.GetBoundary(false).First();\nAreaReinforcement.Create(doc, floor, profile, reinforcementType.Id);"}
{"prompt":"Add area reinforcement to a selected slab.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference floorRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a slab\");\nFloor floor = doc.GetElement(floorRef) as Floor;\nAreaReinforcementType reinforcementType = new FilteredElementCollector(doc).OfClass(typeof(AreaReinforcementType)).FirstOrDefault() as AreaReinforcementType;\nIList<Curve> profile = floor.GetBoundary(false).First();\nAreaReinforcement.Create(doc, floor, profile, reinforcementType.Id);"}
{"prompt":"Rota el norte real 15 grados en sentido antihorario.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => bp.IsSurveyPoint);\ndouble angle = 15 * Math.PI / 180.0;\nLine axis = Line.CreateBound(XYZ.Zero, XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, surveyPoint.Id, axis, angle);"}
{"prompt":"Rotate True North 15 degrees counter-clockwise.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => bp.IsSurveyPoint);\ndouble angle = 15 * Math.PI / 180.0;\nLine axis = Line.CreateBound(XYZ.Zero, XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, surveyPoint.Id, axis, angle);"}
{"prompt":"Coloca una etiqueta de material en una cara de muro.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference faceRef = uidoc.Selection.PickObject(ObjectType.Face, \"Selecciona una cara para etiquetar\");\nXYZ point = uidoc.Selection.PickPoint(\"Selecciona la ubicación de la etiqueta\");\nMaterialTag.Create(doc, doc.ActiveView.Id, faceRef, point, TagOrientation.Horizontal);"}
{"prompt":"Place a material tag on a wall face.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference faceRef = uidoc.Selection.PickObject(ObjectType.Face, \"Select a face to tag\");\nXYZ point = uidoc.Selection.PickPoint(\"Select the tag location\");\nMaterialTag.Create(doc, doc.ActiveView.Id, faceRef, point, TagOrientation.Horizontal);"}
{"prompt":"Crea un grupo de detalles con los elementos de detalle seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nList<ElementId> detailIds = selectedIds.Where(id => doc.GetElement(id).Category.CategoryType == CategoryType.Annotation).ToList();\nGroup group = doc.Create.NewGroup(detailIds);\ngroup.Name = \"Detalle Típico 1\";"}
{"prompt":"Create a detail group with the selected detail items.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nList<ElementId> detailIds = selectedIds.Where(id => doc.GetElement(id).Category.CategoryType == CategoryType.Annotation).ToList();\nGroup group = doc.Create.NewGroup(detailIds);\ngroup.Name = \"Typical Detail 1\";"}
{"prompt":"Encuentra todas las vistas de sección en el proyecto.","completion":"List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}
{"prompt":"Find all section views in the project.","completion":"List<ViewSection> sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}
{"prompt":"Cambia el nombre de todas las familias cargadas que contengan 'Métrica' a 'Imperial'.","completion":"List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Métrica\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"Métrica\", \"Imperial\");\n}"}
{"prompt":"Rename all loaded families containing 'Metric' to 'Imperial'.","completion":"List<Family> familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Metric\")).ToList();\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"Metric\", \"Imperial\");\n}"}
{"prompt":"Crea una nueva tabla de planificación para ventanas que incluya Marca de Tipo, Ancho y Alto.","completion":"string scheduleName = \"Tabla de Ventanas\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\nschedule.Name = scheduleName;\nScheduleDefinition def = schedule.Definition;\nSchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\nSchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\nSchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\ndef.AddField(typeMarkField);\ndef.AddField(widthField);\ndef.AddField(heightField);"}
{"prompt":"Create a new window schedule that includes Type Mark, Width, and Height.","completion":"string scheduleName = \"Window Schedule\";\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\nschedule.Name = scheduleName;\nScheduleDefinition def = schedule.Definition;\nSchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_TYPE_MARK);\nSchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_WIDTH_PARAM);\nSchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_HEIGHT_PARAM);\ndef.AddField(typeMarkField);\ndef.AddField(widthField);\ndef.AddField(heightField);"}
{"prompt":"Desoculta todos los elementos en la vista activa.","completion":"ElementIsHiddenFilter filter = new ElementIsHiddenFilter(false);\nList<ElementId> hiddenIds = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(filter).ToElementIds().ToList();\ndoc.ActiveView.UnhideElements(hiddenIds);"}
{"prompt":"Unhide all elements in the active view.","completion":"ElementIsHiddenFilter filter = new ElementIsHiddenFilter(false);\nList<ElementId> hiddenIds = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(filter).ToElementIds().ToList();\ndoc.ActiveView.UnhideElements(hiddenIds);"}
{"prompt":"Crea un refuerzo de trayectoria en una viga seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference beamRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una viga\");\nFamilyInstance beam = doc.GetElement(beamRef) as FamilyInstance;\nPathReinforcementType pathType = new FilteredElementCollector(doc).OfClass(typeof(PathReinforcementType)).FirstOrDefault() as PathReinforcementType;\nLocationCurve lc = beam.Location as LocationCurve;\nPathReinforcement.Create(doc, beam, new List<Curve>{lc.Curve}, false, pathType.Id, 0, 0);"}
{"prompt":"Create path reinforcement on a selected beam.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference beamRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a beam\");\nFamilyInstance beam = doc.GetElement(beamRef) as FamilyInstance;\nPathReinforcementType pathType = new FilteredElementCollector(doc).OfClass(typeof(PathReinforcementType)).FirstOrDefault() as PathReinforcementType;\nLocationCurve lc = beam.Location as LocationCurve;\nPathReinforcement.Create(doc, beam, new List<Curve>{lc.Curve}, false, pathType.Id, 0, 0);"}
{"prompt":"Crea un ensamblaje a partir de los elementos seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nAssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\nassemblyInstance.Name = \"Nuevo Ensamblaje\";"}
{"prompt":"Create an assembly from the selected elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nAssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\nassemblyInstance.Name = \"New Assembly\";"}
{"prompt":"Añade un punto de referencia en las coordenadas (1,2,3) dentro del editor de familias.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));"}
{"prompt":"Add a reference point at coordinates (1,2,3) inside the family editor.","completion":"doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));"}
{"prompt":"Crea un esquema de área llamado 'Zonas de Alquiler'.","completion":"string schemeName = \"Zonas de Alquiler\";\nAreaScheme.Create(doc, schemeName);"}
{"prompt":"Create an area scheme named 'Lease Zones'.","completion":"string schemeName = \"Lease Zones\";\nAreaScheme.Create(doc, schemeName);"}
{"prompt":"Duplica la vista de planta 'Nivel 2' y conviértela en una plantilla de vista.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 2\") as ViewPlan;\nstring templateName = \"Plantilla Nivel 2\";\nElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.Duplicate);\nView newView = doc.GetElement(newViewId);\nnewView.IsTemplate = true;\nnewView.Name = templateName;"}
{"prompt":"Duplicate the 'Level 2' plan view and make it a view template.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 2\") as ViewPlan;\nstring templateName = \"Level 2 Template\";\nElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.Duplicate);\nView newView = doc.GetElement(newViewId);\nnewView.IsTemplate = true;\nnewView.Name = templateName;"}
{"prompt":"Crea una vista 3D con la caja de sección activada.","completion":"string viewName = \"Vista 3D con Caja de Sección\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\nView3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\nview3d.Name = viewName;\nview3d.IsSectionBoxActive = true;"}
{"prompt":"Create a 3D view with the section box enabled.","completion":"string viewName = \"3D View with Section Box\";\nViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\nView3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\nview3d.Name = viewName;\nview3d.IsSectionBoxActive = true;"}
{"prompt":"Importa un archivo CAD llamado 'BasePlan.dwg' en la vista actual.","completion":"string filePath = \"C:/CAD/BasePlan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\ndoc.Import(filePath, options, doc.ActiveView, out importId);"}
{"prompt":"Import a CAD file named 'BasePlan.dwg' into the current view.","completion":"string filePath = \"C:/CAD/BasePlan.dwg\";\nDWGImportOptions options = new DWGImportOptions();\noptions.Placement = ImportPlacement.Origin;\nElementId importId;\ndoc.Import(filePath, options, doc.ActiveView, out importId);"}
{"prompt":"Mueve el punto base del proyecto 100 metros hacia el norte.","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsSurveyPoint);\nXYZ translation = new XYZ(0, UnitUtils.ConvertToInternalUnits(100, UnitTypeId.Meters), 0);\nElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);"}
{"prompt":"Move the project base point 100 meters to the north.","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsSurveyPoint);\nXYZ translation = new XYZ(0, UnitUtils.ConvertToInternalUnits(100, UnitTypeId.Meters), 0);\nElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);"}
{"prompt":"Encuentra todos los muros con el comentario 'Revisar'.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Revisar\", false);\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Find all walls with the comment 'Review'.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringContains();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Review\", false);\nElementFilter filter = new ElementParameterFilter(rule);\nList<Element> wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToList();"}
{"prompt":"Crea un espacio MEP para cada habitación en el Nivel 1.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nList<Room> roomsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level1.Id).Cast<Room>().ToList();\nforeach(Room room in roomsOnLevel1)\n{\n    MEPSpace.Create(doc, room, null);\n}"}
{"prompt":"Create an MEP space for each room on Level 1.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nList<Room> roomsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level1.Id).Cast<Room>().ToList();\nforeach(Room room in roomsOnLevel1)\n{\n    MEPSpace.Create(doc, room, null);\n}"}
{"prompt":"Crea un DirectShape esférico con un radio de 5 metros.","completion":"double radius = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\nList<GeometryObject> solids = new List<GeometryObject>();\nFrame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\nArc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.XVec, frame.YVec);\nLine line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\nCurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\nSolid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\nsolids.Add(sphere);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\nds.SetShape(solids);\nds.Name = \"Esfera DirectShape\";"}
{"prompt":"Create a spherical DirectShape with a 5-meter radius.","completion":"double radius = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\nList<GeometryObject> solids = new List<GeometryObject>();\nFrame frame = new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ);\nArc arc = Arc.Create(frame.Origin, radius, 0, Math.PI, frame.XVec, frame.YVec);\nLine line = Line.CreateBound(arc.GetEndPoint(1), arc.GetEndPoint(0));\nCurveLoop profile = CurveLoop.Create(new List<Curve> { arc, line });\nSolid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, new List<CurveLoop> { profile }, 0, 2 * Math.PI);\nsolids.Add(sphere);\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\nds.SetShape(solids);\nds.Name = \"Sphere DirectShape\";"}
{"prompt":"Asigna el material 'Acero' a la primera capa de un tipo de muro.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.GetCompoundStructure() != null) as WallType;\nMaterial steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Steel\") || m.Name.Contains(\"Acero\")) as Material;\nCompoundStructure cs = wallType.GetCompoundStructure();\ncs.SetMaterialId(0, steel.Id);\nwallType.SetCompoundStructure(cs);"}
{"prompt":"Assign the 'Steel' material to the first layer of a wall type.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.GetCompoundStructure() != null) as WallType;\nMaterial steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Steel\")) as Material;\nCompoundStructure cs = wallType.GetCompoundStructure();\ncs.SetMaterialId(0, steel.Id);\nwallType.SetCompoundStructure(cs);"}
{"prompt":"Cambia el nombre de la vista activa a 'Vista de Trabajo'.","completion":"string newName = \"Vista de Trabajo\";\ndoc.ActiveView.Name = newName;"}
{"prompt":"Rename the active view to 'Working View'.","completion":"string newName = \"Working View\";\ndoc.ActiveView.Name = newName;"}
{"prompt":"Crea una vista 3D orientada desde el sureste.","completion":"string viewName = \"Vista 3D Sureste\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\nView3D view3d = View3D.CreateIsometric(doc, vft.Id);\nXYZ eye = new XYZ(1, -1, 1);\nXYZ up = new XYZ(0, 0, 1);\nXYZ forward = new XYZ(-1, 1, -1);\nview3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\nview3d.Name = viewName;"}
{"prompt":"Create a 3D view oriented from the southeast.","completion":"string viewName = \"3D View Southeast\";\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\nView3D view3d = View3D.CreateIsometric(doc, vft.Id);\nXYZ eye = new XYZ(1, -1, 1);\nXYZ up = new XYZ(0, 0, 1);\nXYZ forward = new XYZ(-1, 1, -1);\nview3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\nview3d.Name = viewName;"}

{"prompt":"Encuentra todas las familias de anotación y cuenta cuántas hay.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}
{"prompt":"Find all annotation families and count how many there are.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}
{"prompt":"Ajusta todas las ventanas para que la altura del antepecho sea 1 metro.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM).Set(sillHeight);\n}"}
{"prompt":"Set the sill height of all windows to 1 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM).Set(sillHeight);\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-90' y establece su resistencia al fuego a '90 min'.","completion":"string newTypeName = \"Puerta RF-90\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\nParameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\nfireRatingParam.Set(\"90 min\");"}
{"prompt":"Create a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"string newTypeName = \"FR-90 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\nParameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\nfireRatingParam.Set(\"90 min\");"}
{"prompt":"Copia todos los elementos del Nivel 1 al Nivel 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\ndouble elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\nXYZ translation = new XYZ(0, 0, elevationDiff);\nElementTransformUtils.CopyElements(doc, elementsToCopy, translation);"}
{"prompt":"Copy all elements from Level 1 to Level 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\ndouble elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\nXYZ translation = new XYZ(0, 0, elevationDiff);\nElementTransformUtils.CopyElements(doc, elementsToCopy, translation);"}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"string newTypeName = \"5mm Verde\";\nTextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nTextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\nnewType.get_Parameter(BuiltInParameter.TEXT_SIZE).Set(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Millimeters));\nnewType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(0,255,0).GetElementId());"}
{"prompt":"Create a new 5mm text type in green color.","completion":"string newTypeName = \"5mm Green\";\nTextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nTextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\nnewType.get_Parameter(BuiltInParameter.TEXT_SIZE).Set(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Millimeters));\nnewType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(0,255,0).GetElementId());"}
{"prompt":"Encuentra todos los muros con más de 4 metros de altura.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Find all walls taller than 4 meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Aplica un desfase de -10cm a todos los muros seleccionados desde su línea de ubicación.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\ndouble offset = UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Centimeters);\nforeach(ElementId id in selectedIds)\n{\n    Wall wall = doc.GetElement(id) as Wall;\n    wall.get_Parameter(BuiltInParameter.WALL_BASE_OFFSET).Set(offset);\n}"}
{"prompt":"Apply a -10cm offset to all selected walls from their location line.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\ndouble offset = UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Centimeters);\nforeach(ElementId id in selectedIds)\n{\n    Wall wall = doc.GetElement(id) as Wall;\n    wall.get_Parameter(BuiltInParameter.WALL_BASE_OFFSET).Set(offset);\n}"}
{"prompt":"Duplica la vista activa con detalles.","completion":"View activeView = doc.ActiveView;\nElementId newViewId = activeView.Duplicate(ViewDuplicateOption.WithDetailing);"}
{"prompt":"Duplicate the active view with detailing.","completion":"View activeView = doc.ActiveView;\nElementId newViewId = activeView.Duplicate(ViewDuplicateOption.WithDetailing);"}
{"prompt":"Establece la escala de la vista activa a 1:50.","completion":"View activeView = doc.ActiveView;\nactiveView.Scale = 50;"}
{"prompt":"Set the active view's scale to 1:50.","completion":"View activeView = doc.ActiveView;\nactiveView.Scale = 50;"}
{"prompt":"Crea un nuevo tipo de suelo 'Suelo Genérico 30cm'.","completion":"string newTypeName = \"Suelo Genérico 30cm\";\nFloorType floorTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nFloorType newType = floorTypeToDuplicate.Duplicate(newTypeName) as FloorType;\nCompoundStructure cs = newType.GetCompoundStructure();\ncs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\nnewType.SetCompoundStructure(cs);"}
{"prompt":"Create a new floor type 'Generic Floor 30cm'.","completion":"string newTypeName = \"Generic Floor 30cm\";\nFloorType floorTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nFloorType newType = floorTypeToDuplicate.Duplicate(newTypeName) as FloorType;\nCompoundStructure cs = newType.GetCompoundStructure();\ncs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\nnewType.SetCompoundStructure(cs);"}
{"prompt":"Haz que todos los muros seleccionados sean estructurales.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nforeach(ElementId id in selectedIds)\n{\n    Wall wall = doc.GetElement(id) as Wall;\n    wall.get_Parameter(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT).Set(1);\n}"}
{"prompt":"Make all selected walls structural.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nforeach(ElementId id in selectedIds)\n{\n    Wall wall = doc.GetElement(id) as Wall;\n    wall.get_Parameter(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT).Set(1);\n}"}
{"prompt":"Obtén todos los muros del Nivel 1 que son estructurales.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\nElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\nFilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\nElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\nLogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\nList<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();"}
{"prompt":"Get all walls on Level 1 that are structural.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\nElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\nFilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\nElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\nLogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\nList<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();"}
{"prompt":"Crea una nueva tabla de planificación para Pilares Estructurales.","completion":"string scheduleName = \"Tabla de Pilares Estructurales\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Create a new schedule for Structural Columns.","completion":"string scheduleName = \"Structural Column Schedule\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Añade los campos 'Nivel', 'Marca' y 'Volumen' a la tabla de pilares.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\") || s.Name.Contains(\"Column\"));\nScheduleDefinition def = schedule.Definition;\nSchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\nSchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\nSchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\ndef.AddField(levelField);\ndef.AddField(markField);\ndef.AddField(volumeField);"}
{"prompt":"Add the 'Level', 'Mark', and 'Volume' fields to the column schedule.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Column\"));\nScheduleDefinition def = schedule.Definition;\nSchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\nSchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\nSchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\ndef.AddField(levelField);\ndef.AddField(markField);\ndef.AddField(volumeField);"}
{"prompt":"Crea una nueva hoja A3 y colócale una leyenda.","completion":"string sheetNumber = \"G-002\";\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A3\")) as FamilySymbol;\nViewLegend legendView = new FilteredElementCollector(doc).OfClass(typeof(ViewLegend)).FirstOrDefault() as ViewLegend;\nViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\nnewSheet.Name = \"Leyendas\";\nnewSheet.SheetNumber = sheetNumber;\nXYZ centerPoint = (newSheet.Outline.Min + newSheet.Outline.Max) / 2;\nViewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);"}
{"prompt":"Create a new A3 sheet and place a legend on it.","completion":"string sheetNumber = \"G-002\";\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A3\")) as FamilySymbol;\nViewLegend legendView = new FilteredElementCollector(doc).OfClass(typeof(ViewLegend)).FirstOrDefault() as ViewLegend;\nViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\nnewSheet.Name = \"Legends\";\nnewSheet.SheetNumber = sheetNumber;\nXYZ centerPoint = (newSheet.Outline.Min + newSheet.Outline.Max) / 2;\nViewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);"}
{"prompt":"Obtén todas las familias de puertas cargadas en el proyecto.","completion":"List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Get all door families loaded in the project.","completion":"List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Aplica el estilo visual 'Rayos X' a la vista 3D activa.","completion":""}
{"prompt":"Apply the 'X-Ray' visual style to the active 3D view.","completion":""}
{"prompt":"Crea una losa de cimentación estructural de 40cm de espesor.","completion":"string newTypeName = \"Losa Cimentación 40cm\";\nLevel foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nFloorType newSlabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == newTypeName);\nif (newSlabType == null)\n{\n    FloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundations);\n    newSlabType = slabTypeToDuplicate.Duplicate(newTypeName) as FloorType;\n    CompoundStructure cs = newSlabType.GetCompoundStructure();\n    cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(40, UnitTypeId.Centimeters));\n    newSlabType.SetCompoundStructure(cs);\n}\nCurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(10,10,0));\nFloor.Create(doc, new List<CurveLoop>{profile}, newSlabType.Id, foundationLevel.Id);"}
{"prompt":"Create a structural foundation slab 40cm thick.","completion":"string newTypeName = \"Foundation Slab 40cm\";\nLevel foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nFloorType newSlabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == newTypeName);\nif (newSlabType == null)\n{\n    FloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundations);\n    newSlabType = slabTypeToDuplicate.Duplicate(newTypeName) as FloorType;\n    CompoundStructure cs = newSlabType.GetCompoundStructure();\n    cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(40, UnitTypeId.Centimeters));\n    newSlabType.SetCompoundStructure(cs);\n}\nCurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(10,10,0));\nFloor.Create(doc, new List<CurveLoop>{profile}, newSlabType.Id, foundationLevel.Id);"}
{"prompt":"Crea un techo por extrusión con un perfil en arco.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nCurveLoop profile = new CurveLoop();\nprofile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\nReferencePlane refPlane = ReferencePlane.Create(doc, new XYZ(0,0,level.ProjectElevation), XYZ.BasisY, doc.ActiveView);\ndoc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);"}
{"prompt":"Create an extrusion roof with an arc profile.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nCurveLoop profile = new CurveLoop();\nprofile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\nReferencePlane refPlane = ReferencePlane.Create(doc, new XYZ(0,0,level.ProjectElevation), XYZ.BasisY, doc.ActiveView);\ndoc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);"}
{"prompt":"Oculta todos los elementos de anotación en la vista activa.","completion":"List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n{\n    BuiltInCategory.OST_GenericAnnotation,\n    BuiltInCategory.OST_TextNotes,\n    BuiltInCategory.OST_Tags,\n    BuiltInCategory.OST_Dimensions,\n    BuiltInCategory.OST_DetailComponents\n};\nElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\nICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\ndoc.ActiveView.HideElements(elementsToHide);"}
{"prompt":"Hide all annotation elements in the active view.","completion":"List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n{\n    BuiltInCategory.OST_GenericAnnotation,\n    BuiltInCategory.OST_TextNotes,\n    BuiltInCategory.OST_Tags,\n    BuiltInCategory.OST_Dimensions,\n    BuiltInCategory.OST_DetailComponents\n};\nElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\nICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\ndoc.ActiveView.HideElements(elementsToHide);"}

{"prompt":"Encuentra todas las familias de anotación y cuenta cuántas hay.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}
{"prompt":"Find all annotation families and count how many there are.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}
{"prompt":"Ajusta todas las ventanas para que la altura del antepecho sea 1 metro.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Set the sill height of all windows to 1 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-90' y establece su resistencia al fuego a '90 min'.","completion":"string newTypeName = \"Puerta RF-90\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\nParameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\nfireRatingParam.Set(\"90 min\");"}
{"prompt":"Create a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"string newTypeName = \"FR-90 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\nParameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\nfireRatingParam.Set(\"90 min\");"}
{"prompt":"Encuentra todos los muros que no tienen nivel base asignado.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Find all walls that have no base level assigned.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\ndoc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);"}
{"prompt":"Set the visibility of the 'Furniture' category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\ndoc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\ndoc.Delete(unusedWallTypes);"}
{"prompt":"Delete all unused wall types in the project.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\ndoc.Delete(unusedWallTypes);"}
{"prompt":"Crea 10 worksets de arquitectura.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_MAM\", \"TAD_ARQ_ACA\", \"TAD_ARQ_PLA\", \"TAD_ARQ_PSO\", \"TAD_ARQ_HRE\", \"TAD_ARQ_ALU\", \"TAD_ARQ_CAR\", \"TAD_ARQ_MOB\", \"TAD_ARQ_PLO\", \"TAD_ARQ_EXT\" };\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}"}
{"prompt":"Create 10 architectural worksets.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_WALLS\", \"TAD_ARQ_FINISHES\", \"TAD_ARQ_CEILINGS\", \"TAD_ARQ_FLOORS\", \"TAD_ARQ_RAILINGS\", \"TAD_ARQ_WINDOWS\", \"TAD_ARQ_CARPENTRY\", \"TAD_ARQ_FURNITURE\", \"TAD_ARQ_PLUMBING\", \"TAD_ARQ_EXTERIOR\" };\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}"}
{"prompt":"Genera un reporte con el área de todas las habitaciones del proyecto.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}
{"prompt":"Generate a report with the area of all rooms in the project.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}
{"prompt":"Crea un muro en Nivel 1 de (0,0,0) a (5,0,0) con 5m de alto.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nLine wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\ndouble height = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\nWall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);"}
{"prompt":"Crea un nuevo parámetro de proyecto compartido de texto llamado 'Notas Adicionales' para muros y puertas.","completion":"string paramName = \"Notas Adicionales\";\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = defFile.Groups.get_Item(\"General\") ?? defFile.Groups.Create(\"General\");\nDefinition definition = group.Definitions.get_Item(paramName) ?? group.Definitions.Create(new ExternalDefinitionCreationOptions(paramName, SpecTypeId.String.Text));\nCategorySet categories = doc.Application.Create.NewCategorySet();\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\nInstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\ndoc.ParameterBindings.Insert((ExternalDefinition)definition, binding, BuiltInParameterGroup.PG_DATA);"}
{"prompt":"Create a new shared text project parameter named 'Additional Notes' for walls and doors.","completion":"string paramName = \"Additional Notes\";\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = defFile.Groups.get_Item(\"General\") ?? defFile.Groups.Create(\"General\");\nDefinition definition = group.Definitions.get_Item(paramName) ?? group.Definitions.Create(new ExternalDefinitionCreationOptions(paramName, SpecTypeId.String.Text));\nCategorySet categories = doc.Application.Create.NewCategorySet();\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\nInstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\ndoc.ParameterBindings.Insert((ExternalDefinition)definition, binding, BuiltInParameterGroup.PG_DATA);"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 300mm' con un grosor de 30cm.","completion":"string newTypeName = \"Muro Genérico 300mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\nCompoundStructure cs = newWallType.GetCompoundStructure();\ncs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\nnewWallType.SetCompoundStructure(cs);"}
{"prompt":"Create a new wall type 'Generic Wall 300mm' with a thickness of 30cm.","completion":"string newTypeName = \"Generic Wall 300mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\nCompoundStructure cs = newWallType.GetCompoundStructure();\ncs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\nnewWallType.SetCompoundStructure(cs);"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior\");\nforeach(ElementId id in selectedIds)\n{\n    Wall wall = doc.GetElement(id) as Wall;\n    if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n}"}
{"prompt":"Crea un muro del tipo 'Genérico - 200mm' en el 'Nivel 1' desde (0,0) hasta (10,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Genérico - 200mm\") as WallType;\nXYZ startPoint = new XYZ(0, 0, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nWall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);"}
{"prompt":"Create a 'Generic - 200mm' wall on 'Level 1' from (0,0) to (10,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Generic - 200mm\") as WallType;\nXYZ startPoint = new XYZ(0, 0, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nWall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);"}
{"prompt":"Crea un nuevo nivel llamado 'Planta Sótano' a una elevación de -4.5 metros.","completion":"string levelName = \"Planta Sótano\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Create a new level named 'Basement Floor' at an elevation of -4.5 meters.","completion":"string levelName = \"Basement Floor\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 101' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Crea una rejilla de 5 ejes horizontales y 5 verticales, espaciados 6 metros.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint count = 5;\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((count - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create a grid of 5 horizontal and 5 vertical grids, spaced 6 meters apart.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint count = 5;\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((count - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea un pilar del tipo 'Hormigón-Rectangular 30x60' en cada intersección de la rejilla.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Hormigón-Rectangular 30x60\") as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\nif (!columnSymbol.IsActive) columnSymbol.Activate();\nfor (int i = 0; i < grids.Count; i++)\n{\n    for (int j = i + 1; j < grids.Count; j++)\n    {\n        IntersectionResultArray results;\n        grids[i].Curve.Intersect(grids[j].Curve, out results);\n        if (results != null)\n        {\n            foreach (IntersectionResult ir in results)\n            {\n                doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n            }\n        }\n    }\n}"}
{"prompt":"Create a 'Concrete-Rectangular 30x60' column at each grid intersection.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Concrete-Rectangular 30x60\") as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\nif (!columnSymbol.IsActive) columnSymbol.Activate();\nfor (int i = 0; i < grids.Count; i++)\n{\n    for (int j = i + 1; j < grids.Count; j++)\n    {\n        IntersectionResultArray results;\n        grids[i].Curve.Intersect(grids[j].Curve, out results);\n        if (results != null)\n        {\n            foreach (IntersectionResult ir in results)\n            {\n                doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n            }\n        }\n    }\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 150mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 150mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nWallType newType = originalType.Duplicate(newName) as WallType;"}
{"prompt":"Duplicate the 'Generic - 150mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 150mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\nWallType newType = originalType.Duplicate(newName) as WallType;"}
{"prompt":"Crea un tipo de muro 'Muro-Doble' de 30cm y luego crea un muro de ese tipo.","completion":"string newTypeName = \"Muro-Doble\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == newTypeName) as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(0.3, UnitTypeId.Meters));\n    newWallType.SetCompoundStructure(cs);\n}\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nLine wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\nWall.Create(doc, wallCurve, newWallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);"}
{"prompt":"Create a 30cm 'Double-Wall' type and then create a wall of that type.","completion":"string newTypeName = \"Double-Wall\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == newTypeName) as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(0.3, UnitTypeId.Meters));\n    newWallType.SetCompoundStructure(cs);\n}\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nLine wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\nWall.Create(doc, wallCurve, newWallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);"}
{"prompt":"Selecciona todos los muros del 'Nivel 2' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nList<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\nforeach(Wall wall in wallsOnLevel2)\n{\n    wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(\"REVISAR AISLAMIENTO\");\n}"}
{"prompt":"Select all walls on 'Level 2' and change their comment to 'REVIEW INSULATION'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nList<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\nforeach(Wall wall in wallsOnLevel2)\n{\n    wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(\"REVIEW INSULATION\");\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-90' y establece su resistencia al fuego a '90 min'.","completion":"string newTypeName = \"Puerta RF-90\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\nParameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\nfireRatingParam.Set(\"90 min\");"}
{"prompt":"Create a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"string newTypeName = \"FR-90 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\nParameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\nfireRatingParam.Set(\"90 min\");"}
{"prompt":"Copia todos los elementos del Nivel 1 al Nivel 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\ndouble elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\nXYZ translation = new XYZ(0, 0, elevationDiff);\nElementTransformUtils.CopyElements(doc, elementsToCopy, translation);"}
{"prompt":"Copy all elements from Level 1 to Level 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nICollection<ElementId> elementsToCopy = new FilteredElementCollector(doc, level1.Id).WhereElementIsNotElementType().ToElementIds();\ndouble elevationDiff = level2.ProjectElevation - level1.ProjectElevation;\nXYZ translation = new XYZ(0, 0, elevationDiff);\nElementTransformUtils.CopyElements(doc, elementsToCopy, translation);"}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"string newTypeName = \"5mm Verde\";\nTextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nTextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\nnewType.get_Parameter(BuiltInParameter.TEXT_SIZE).Set(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Millimeters));\nnewType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(0,255,0).GetElementId());"}
{"prompt":"Create a new 5mm text type in green color.","completion":"string newTypeName = \"5mm Green\";\nTextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nTextNoteType newType = defaultType.Duplicate(newTypeName) as TextNoteType;\nnewType.get_Parameter(BuiltInParameter.TEXT_SIZE).Set(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Millimeters));\nnewType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(0,255,0).GetElementId());"}
{"prompt":"Encuentra todos los muros con más de 4 metros de altura.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Find all walls taller than 4 meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nList<Element> tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Encuentra todos los muros que no tienen nivel base asignado.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Find all walls that have no base level assigned.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\ndoc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);"}
{"prompt":"Set the visibility of the 'Furniture' category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\ndoc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\ndoc.Delete(unusedWallTypes);"}
{"prompt":"Delete all unused wall types in the project.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\ndoc.Delete(unusedWallTypes);"}
{"prompt":"Genera un reporte con el área de todas las habitaciones del proyecto.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}
{"prompt":"Generate a report with the area of all rooms in the project.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}
{"prompt":"Obtén todos los muros del Nivel 1 que son estructurales.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\nElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\nFilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\nElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\nLogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\nList<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();"}
{"prompt":"Get all walls on Level 1 that are structural.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\nElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\nFilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\nElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\nLogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\nList<Element> structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();"}
{"prompt":"Crea una nueva tabla de planificación para Pilares Estructurales.","completion":"string scheduleName = \"Tabla de Pilares Estructurales\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Create a new schedule for Structural Columns.","completion":"string scheduleName = \"Structural Column Schedule\";\nElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = scheduleName;"}
{"prompt":"Añade los campos 'Nivel', 'Marca' y 'Volumen' a la tabla de pilares.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\") || s.Name.Contains(\"Column\"));\nScheduleDefinition def = schedule.Definition;\nSchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\nSchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\nSchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\ndef.AddField(levelField);\ndef.AddField(markField);\ndef.AddField(volumeField);"}
{"prompt":"Add the 'Level', 'Mark', and 'Volume' fields to the column schedule.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Column\"));\nScheduleDefinition def = schedule.Definition;\nSchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.FAMILY_LEVEL_PARAM);\nSchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.ALL_MODEL_MARK);\nSchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId.IntegerValue == (int)BuiltInParameter.HOST_VOLUME_COMPUTED);\ndef.AddField(levelField);\ndef.AddField(markField);\ndef.AddField(volumeField);"}
{"prompt":"Crea una nueva hoja A3 y colócale una leyenda.","completion":"string sheetNumber = \"G-002\";\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A3\")) as FamilySymbol;\nViewLegend legendView = new FilteredElementCollector(doc).OfClass(typeof(ViewLegend)).FirstOrDefault() as ViewLegend;\nViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\nnewSheet.Name = \"Leyendas\";\nnewSheet.SheetNumber = sheetNumber;\nXYZ centerPoint = (newSheet.Outline.Min + newSheet.Outline.Max) / 2;\nViewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);"}
{"prompt":"Create a new A3 sheet and place a legend on it.","completion":"string sheetNumber = \"G-002\";\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A3\")) as FamilySymbol;\nViewLegend legendView = new FilteredElementCollector(doc).OfClass(typeof(ViewLegend)).FirstOrDefault() as ViewLegend;\nViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\nnewSheet.Name = \"Legends\";\nnewSheet.SheetNumber = sheetNumber;\nXYZ centerPoint = (newSheet.Outline.Min + newSheet.Outline.Max) / 2;\nViewport.Create(doc, newSheet.Id, legendView.Id, centerPoint);"}
{"prompt":"Obtén todas las familias de puertas cargadas en el proyecto.","completion":"List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Get all door families loaded in the project.","completion":"List<Family> doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Aplica el estilo visual 'Rayos X' a la vista 3D activa.","completion":""}
{"prompt":"Apply the 'X-Ray' visual style to the active 3D view.","completion":""}
{"prompt":"Crea una losa de cimentación estructural de 40cm de espesor.","completion":"string newTypeName = \"Losa Cimentación 40cm\";\nLevel foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nFloorType newSlabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == newTypeName);\nif (newSlabType == null)\n{\n    FloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundations);\n    newSlabType = slabTypeToDuplicate.Duplicate(newTypeName) as FloorType;\n    CompoundStructure cs = newSlabType.GetCompoundStructure();\n    cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(40, UnitTypeId.Centimeters));\n    newSlabType.SetCompoundStructure(cs);\n}\nCurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(10,10,0));\nFloor.Create(doc, new List<CurveLoop>{profile}, newSlabType.Id, foundationLevel.Id);"}
{"prompt":"Create a structural foundation slab 40cm thick.","completion":"string newTypeName = \"Foundation Slab 40cm\";\nLevel foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nFloorType newSlabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == newTypeName);\nif (newSlabType == null)\n{\n    FloorType slabTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundations);\n    newSlabType = slabTypeToDuplicate.Duplicate(newTypeName) as FloorType;\n    CompoundStructure cs = newSlabType.GetCompoundStructure();\n    cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(40, UnitTypeId.Centimeters));\n    newSlabType.SetCompoundStructure(cs);\n}\nCurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(10,10,0));\nFloor.Create(doc, new List<CurveLoop>{profile}, newSlabType.Id, foundationLevel.Id);"}
{"prompt":"Crea un techo por extrusión con un perfil en arco.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nCurveLoop profile = new CurveLoop();\nprofile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\nReferencePlane refPlane = ReferencePlane.Create(doc, new XYZ(0,0,level.ProjectElevation), XYZ.BasisY, doc.ActiveView);\ndoc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);"}
{"prompt":"Create an extrusion roof with an arc profile.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nCurveLoop profile = new CurveLoop();\nprofile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\nReferencePlane refPlane = ReferencePlane.Create(doc, new XYZ(0,0,level.ProjectElevation), XYZ.BasisY, doc.ActiveView);\ndoc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);"}
{"prompt":"Oculta todos los elementos de anotación en la vista activa.","completion":"List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n{\n    BuiltInCategory.OST_GenericAnnotation,\n    BuiltInCategory.OST_TextNotes,\n    BuiltInCategory.OST_Tags,\n    BuiltInCategory.OST_Dimensions,\n    BuiltInCategory.OST_DetailComponents\n};\nElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\nICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\ndoc.ActiveView.HideElements(elementsToHide);"}
{"prompt":"Hide all annotation elements in the active view.","completion":"List<BuiltInCategory> annotationCategories = new List<BuiltInCategory>\n{\n    BuiltInCategory.OST_GenericAnnotation,\n    BuiltInCategory.OST_TextNotes,\n    BuiltInCategory.OST_Tags,\n    BuiltInCategory.OST_Dimensions,\n    BuiltInCategory.OST_DetailComponents\n};\nElementMulticategoryFilter multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\nICollection<ElementId> elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\ndoc.ActiveView.HideElements(elementsToHide);"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-01'.","completion":"List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"WM-01\");\n  }\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"WM-01\");\n  }\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"string newLevelName = \"Mezzanine\";\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\ndouble midElevation = (lvl1.ProjectElevation + lvl2.ProjectElevation) / 2.0;\nLevel.Create(doc, midElevation).Name = newLevelName;"}

{"prompt":"Encuentra todas las familias de anotación y cuenta cuántas hay.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}
{"prompt":"Find all annotation families and count how many there are.","completion":"List<Family> annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation).ToList();"}
{"prompt":"Ajusta todas las ventanas para que la altura del antepecho sea 1 metro.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Set the sill height of all windows to 1 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\nList<FamilyInstance> windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().ToList();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-90' y establece su resistencia al fuego a '90 min'.","completion":"string newTypeName = \"Puerta RF-90\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\nParameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\nfireRatingParam.Set(\"90 min\");"}
{"prompt":"Create a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"string newTypeName = \"FR-90 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\nParameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\nfireRatingParam.Set(\"90 min\");"}
{"prompt":"Encuentra todos los muros que no tienen nivel base asignado.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Find all walls that have no base level assigned.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\ndoc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);"}
{"prompt":"Set the visibility of the 'Furniture' category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\ndoc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\ndoc.Delete(unusedWallTypes);"}
{"prompt":"Delete all unused wall types in the project.","completion":"ICollection<ElementId> allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nICollection<ElementId> usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nList<ElementId> unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\ndoc.Delete(unusedWallTypes);"}
{"prompt":"Crea 10 worksets de arquitectura.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_MAM\", \"TAD_ARQ_ACA\", \"TAD_ARQ_PLA\", \"TAD_ARQ_PSO\", \"TAD_ARQ_HRE\", \"TAD_ARQ_ALU\", \"TAD_ARQ_CAR\", \"TAD_ARQ_MOB\", \"TAD_ARQ_PLO\", \"TAD_ARQ_EXT\" };\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}"}
{"prompt":"Create 10 architectural worksets.","completion":"List<string> worksetNames = new List<string> { \"TAD_ARQ_WALLS\", \"TAD_ARQ_FINISHES\", \"TAD_ARQ_CEILINGS\", \"TAD_ARQ_FLOORS\", \"TAD_ARQ_RAILINGS\", \"TAD_ARQ_WINDOWS\", \"TAD_ARQ_CARPENTRY\", \"TAD_ARQ_FURNITURE\", \"TAD_ARQ_PLUMBING\", \"TAD_ARQ_EXTERIOR\" };\nforeach(string name in worksetNames)\n{\n    Workset.Create(doc, name);\n}"}
{"prompt":"Genera un reporte con el área de todas las habitaciones del proyecto.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}
{"prompt":"Generate a report with the area of all rooms in the project.","completion":"List<Room> rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().ToList();"}
{"prompt":"Crea un muro en Nivel 1 de (0,0,0) a (5,0,0) con 5m de alto.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nLine wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\ndouble height = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\nWall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);"}
{"prompt":"Crea un nuevo parámetro de proyecto compartido de texto llamado 'Notas Adicionales' para muros y puertas.","completion":"string paramName = \"Notas Adicionales\";\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = defFile.Groups.get_Item(\"General\") ?? defFile.Groups.Create(\"General\");\nDefinition definition = group.Definitions.get_Item(paramName) ?? group.Definitions.Create(new ExternalDefinitionCreationOptions(paramName, SpecTypeId.String.Text));\nCategorySet categories = doc.Application.Create.NewCategorySet();\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\nInstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\ndoc.ParameterBindings.Insert((ExternalDefinition)definition, binding, BuiltInParameterGroup.PG_DATA);"}
{"prompt":"Create a new shared text project parameter named 'Additional Notes' for walls and doors.","completion":"string paramName = \"Additional Notes\";\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = defFile.Groups.get_Item(\"General\") ?? defFile.Groups.Create(\"General\");\nDefinition definition = group.Definitions.get_Item(paramName) ?? group.Definitions.Create(new ExternalDefinitionCreationOptions(paramName, SpecTypeId.String.Text));\nCategorySet categories = doc.Application.Create.NewCategorySet();\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\nInstanceBinding binding = doc.Application.Create.NewInstanceBinding(categories);\ndoc.ParameterBindings.Insert((ExternalDefinition)definition, binding, BuiltInParameterGroup.PG_DATA);"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 300mm' con un grosor de 30cm.","completion":"string newTypeName = \"Muro Genérico 300mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\nCompoundStructure cs = newWallType.GetCompoundStructure();\ncs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\nnewWallType.SetCompoundStructure(cs);"}
{"prompt":"Create a new wall type 'Generic Wall 300mm' with a thickness of 30cm.","completion":"string newTypeName = \"Generic Wall 300mm\";\nWallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nWallType newWallType = oldWallType.Duplicate(newTypeName) as WallType;\nCompoundStructure cs = newWallType.GetCompoundStructure();\ncs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\nnewWallType.SetCompoundStructure(cs);"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nWallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior\");\nforeach(ElementId id in selectedIds)\n{\n    Wall wall = doc.GetElement(id) as Wall;\n    if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n}"}
{"prompt":"Crea un muro del tipo 'Genérico - 200mm' en el 'Nivel 1' desde (0,0) hasta (10,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Genérico - 200mm\") as WallType;\nXYZ startPoint = new XYZ(0, 0, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nWall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);"}
{"prompt":"Create a 'Generic - 200mm' wall on 'Level 1' from (0,0) to (10,5).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Generic - 200mm\") as WallType;\nXYZ startPoint = new XYZ(0, 0, 0);\nXYZ endPoint = new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0);\nLine wallCurve = Line.CreateBound(startPoint, endPoint);\ndouble height = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nWall.Create(doc, wallCurve, wallType.Id, level.Id, height, 0, false, false);"}
{"prompt":"Crea un nuevo nivel llamado 'Planta Sótano' a una elevación de -4.5 metros.","completion":"string levelName = \"Planta Sótano\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Create a new level named 'Basement Floor' at an elevation of -4.5 meters.","completion":"string levelName = \"Basement Floor\";\ndouble elevationInternal = UnitUtils.ConvertToInternalUnits(-4.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevationInternal);\nnewLevel.Name = levelName;"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 101' room.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 101\") as Room;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\nLocationPoint roomCenter = room.Location as LocationPoint;\nif(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\ndoc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);"}
{"prompt":"Crea una rejilla de 5 ejes horizontales y 5 verticales, espaciados 6 metros.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint count = 5;\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((count - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create a grid of 5 horizontal and 5 vertical grids, spaced 6 meters apart.","completion":"double spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint count = 5;\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((count - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea un pilar del tipo 'Hormigón-Rectangular 30x60' en cada intersección de la rejilla.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Hormigón-Rectangular 30x60\") as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\nif (!columnSymbol.IsActive) columnSymbol.Activate();\nfor (int i = 0; i < grids.Count; i++)\n{\n    for (int j = i + 1; j < grids.Count; j++)\n    {\n        IntersectionResultArray results;\n        grids[i].Curve.Intersect(grids[j].Curve, out results);\n        if (results != null)\n        {\n            foreach (IntersectionResult ir in results)\n            {\n                doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n            }\n        }\n    }\n}"}
{"prompt":"Create a 'Concrete-Rectangular 30x60' column at each grid intersection.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Concrete-Rectangular 30x60\") as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nList<Grid> grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\nif (!columnSymbol.IsActive) columnSymbol.Activate();\nfor (int i = 0; i < grids.Count; i++)\n{\n    for (int j = i + 1; j < grids.Count; j++)\n    {\n        IntersectionResultArray results;\n        grids[i].Curve.Intersect(grids[j].Curve, out results);\n        if (results != null)\n        {\n            foreach (IntersectionResult ir in results)\n            {\n                doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n            }\n        }\n    }\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 150mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"string originalName = \"Genérico - 150mm\";\nstring newName = \"Interior - 15cm Yeso\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\noriginalType.Duplicate(newName);"}
{"prompt":"Duplicate the 'Generic - 150mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"string originalName = \"Generic - 150mm\";\nstring newName = \"Interior - 15cm Plaster\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\noriginalType.Duplicate(newName);"}
{"prompt":"Crea un tipo de muro 'Muro-Doble' de 30cm y luego crea un muro de ese tipo.","completion":"string newTypeName = \"Muro-Doble\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == newTypeName) as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(0.3, UnitTypeId.Meters));\n    newWallType.SetCompoundStructure(cs);\n}\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nLine wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\nWall.Create(doc, wallCurve, newWallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);"}
{"prompt":"Create a 30cm 'Double-Wall' type and then create a wall of that type.","completion":"string newTypeName = \"Double-Wall\";\nWallType newWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == newTypeName) as WallType;\nif (newWallType == null)\n{\n    WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    newWallType = wallTypeToDuplicate.Duplicate(newTypeName) as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(0.3, UnitTypeId.Meters));\n    newWallType.SetCompoundStructure(cs);\n}\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nLine wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\nWall.Create(doc, wallCurve, newWallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);"}
{"prompt":"Selecciona todos los muros del 'Nivel 2' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nList<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\nforeach(Wall wall in wallsOnLevel2)\n{\n    wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(\"REVISAR AISLAMIENTO\");\n}"}
{"prompt":"Select all walls on 'Level 2' and change their comment to 'REVIEW INSULATION'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nList<Wall> wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id).Cast<Wall>().ToList();\nforeach(Wall wall in wallsOnLevel2)\n{\n    wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS).Set(\"REVIEW INSULATION\");\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-90' y establece su resistencia al fuego a '90 min'.","completion":"string newTypeName = \"Puerta RF-90\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\nParameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\nfireRatingParam.Set(\"90 min\");"}
{"prompt":"Create a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"string newTypeName = \"FR-90 Door\";\nFamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nFamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(newTypeName) as FamilySymbol;\nParameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\nfireRatingParam.Set(\"90 min\");"}
{"prompt":"Crea una nueva vista de alzado mirando al sur.","completion":"string viewName = \"Alzado Sur (Nuevo)\";\nViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20, 0), 100);\nView aev = marker.CreateElevation(doc, doc.ActiveView.Id, 0);\naev.Name = viewName;"}
{"prompt":"Create a new elevation view looking south.","completion":"string viewName = \"South Elevation (New)\";\nViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, -20, 0), 100);\nView aev = marker.CreateElevation(doc, doc.ActiveView.Id, 0);\naev.Name = viewName;"}
{"prompt":"Cambia el tipo de una losa por uno que contenga 'Concreto'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concreto\") || ft.Name.Contains(\"Concrete\"));\nfloorToChange.ChangeTypeId(newType.Id);"}
{"prompt":"Change the type of a floor to one that contains 'Concrete'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concrete\"));\nfloorToChange.ChangeTypeId(newType.Id);"}
{"prompt":"Añade montantes a todas las líneas de rejilla de un muro cortina seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro cortina\");\nWall curtainWall = doc.GetElement(pickedRef) as Wall;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nCurtainGrid grid = curtainWall.CurtainGrid;\nforeach (ElementId gridLineId in grid.GetVGridLineIds()) \n{\n    CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n    if(!line.MullionOnLine) line.AddMullions(mullionType, false);\n}\nforeach (ElementId gridLineId in grid.GetUGridLineIds()) \n{\n    CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n    if(!line.MullionOnLine) line.AddMullions(mullionType, false);\n}"}
{"prompt":"Add mullions to all grid lines of a selected curtain wall.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a curtain wall\");\nWall curtainWall = doc.GetElement(pickedRef) as Wall;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nCurtainGrid grid = curtainWall.CurtainGrid;\nforeach (ElementId gridLineId in grid.GetVGridLineIds()) \n{\n    CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n    if(!line.MullionOnLine) line.AddMullions(mullionType, false);\n}\nforeach (ElementId gridLineId in grid.GetUGridLineIds()) \n{\n    CurtainGridLine line = doc.GetElement(gridLineId) as CurtainGridLine;\n    if(!line.MullionOnLine) line.AddMullions(mullionType, false);\n}"}
{"prompt":"Rota un elemento seleccionado 90 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para rotar\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI / 2.0);"}
{"prompt":"Rotate a selected element 90 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to rotate\");\nElement elem = doc.GetElement(pickedRef.ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nLine axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\nElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI / 2.0);"}
{"prompt":"Crea un sistema de vigas en un forjado seleccionado.","completion":""}
{"prompt":"Create a beam system on a selected floor slab.","completion":""}
{"prompt":"Exporta una lista de todas las advertencias del proyecto a un archivo de texto en el escritorio.","completion":"string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nstring filePath = System.IO.Path.Combine(desktopPath, \"RevitWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\nSystem.IO.File.WriteAllLines(filePath, warningDescriptions);"}
{"prompt":"Export a list of all project warnings to a text file on the desktop.","completion":"string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nstring filePath = System.IO.Path.Combine(desktopPath, \"RevitWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nList<string> warningDescriptions = warnings.Select(w => w.GetDescriptionText()).ToList();\nSystem.IO.File.WriteAllLines(filePath, warningDescriptions);"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-01'.","completion":"List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"WM-01\");\n  }\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"List<Wall> walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>().ToList();\nforeach(var w in walls)\n{\n  Parameter p = w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n  if(p != null && !p.IsReadOnly && string.IsNullOrEmpty(p.AsString()))\n  {\n      p.Set(\"WM-01\");\n  }\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"string newLevelName = \"Mezzanine\";\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\ndouble midElevation = (lvl1.ProjectElevation + lvl2.ProjectElevation) / 2.0;\nLevel.Create(doc, midElevation).Name = newLevelName;"}
{"prompt":"Create an intermediate level named 'Mezzanine' halfway between Level 1 and Level 2.","completion":"string newLevelName = \"Mezzanine\";\nLevel lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\ndouble midElevation = (lvl1.ProjectElevation + lvl2.ProjectElevation) / 2.0;\nLevel.Create(doc, midElevation).Name = newLevelName;"}
{"prompt":"Cambia el material de todos los muros a 'Acero'.","completion":""}
{"prompt":"Change the material of all walls to 'Steel'.","completion":""}
{"prompt":"Añade una línea de rejilla U en un muro cortina a 3m desde el origen.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nCurtainGrid grid = curtainWall.CurtainGrid;\ngrid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);"}
{"prompt":"Add a U grid line to a curtain wall at 3m from the origin.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nCurtainGrid grid = curtainWall.CurtainGrid;\ngrid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);"}
{"prompt":"Añade una línea de rejilla V en un muro cortina a 2m de altura.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nCurtainGrid grid = curtainWall.CurtainGrid;\ngrid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);"}
{"prompt":"Add a V grid line to a curtain wall at 2m height.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nCurtainGrid grid = curtainWall.CurtainGrid;\ngrid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);"}
{"prompt":"Activa todos los segmentos en la primera línea de rejilla U.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nCurtainGrid grid = curtainWall.CurtainGrid;\nElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\nCurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\nuLine.AddAllSegments();"}
{"prompt":"Activate all segments on the first U grid line.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nCurtainGrid grid = curtainWall.CurtainGrid;\nElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\nCurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\nuLine.AddAllSegments();"}
{"prompt":"Añade montantes en la línea de rejilla U seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla de muro cortina\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\ngridLine.AddMullions(gridLine.FullCurve, mullionType, false);"}
{"prompt":"Add mullions to the selected U grid line.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a curtain grid line\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\ngridLine.AddMullions(gridLine.FullCurve, mullionType, false);"}
{"prompt":"Aísla la rejilla V seleccionada y añade solo un segmento.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla V\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nCurve segment = vLine.GetSegmentCurves().FirstOrDefault();\nvLine.AddSegment(segment);"}
{"prompt":"Isolate the selected V gridline and add only one segment.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a V grid line\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nCurve segment = vLine.GetSegmentCurves().FirstOrDefault();\nvLine.AddSegment(segment);"}
{"prompt":"¿Cuántas puertas hay en el 'Nivel 1'?","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\nElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\nLogicalAndFilter andFilter = new LogicalAndFilter(categoryFilter, levelFilter);\nint doorCount = new FilteredElementCollector(doc).WherePasses(andFilter).GetElementCount();"}
{"prompt":"How many doors are on 'Level 1'?","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\nElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\nLogicalAndFilter andFilter = new LogicalAndFilter(categoryFilter, levelFilter);\nint doorCount = new FilteredElementCollector(doc).WherePasses(andFilter).GetElementCount();"}
{"prompt":"Selecciona todos los muros estructurales del Nivel 2 que sean más largos de 10 metros.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\nElementLevelFilter lvlFilter = new ElementLevelFilter(level2.Id);\nFilterRule structRule = ParameterFilterRuleFactory.CreateEqualsRule(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT), 1);\nElementParameterFilter structFilter = new ElementParameterFilter(structRule);\nFilterRule lengthRule = ParameterFilterRuleFactory.CreateGreaterRule(new ElementId(BuiltInParameter.CURVE_ELEM_LENGTH), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\nElementParameterFilter lengthFilter = new ElementParameterFilter(lengthRule);\nLogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, lvlFilter, structFilter, lengthFilter });\nICollection<ElementId> wallIds = new FilteredElementCollector(doc).WherePasses(andFilter).ToElementIds();\nnew UIDocument(doc).Selection.SetElementIds(wallIds);"}
{"prompt":"Select all structural walls on Level 2 that are longer than 10 meters.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\nElementLevelFilter lvlFilter = new ElementLevelFilter(level2.Id);\nFilterRule structRule = ParameterFilterRuleFactory.CreateEqualsRule(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT), 1);\nElementParameterFilter structFilter = new ElementParameterFilter(structRule);\nFilterRule lengthRule = ParameterFilterRuleFactory.CreateGreaterRule(new ElementId(BuiltInParameter.CURVE_ELEM_LENGTH), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters));\nElementParameterFilter lengthFilter = new ElementParameterFilter(lengthRule);\nLogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, lvlFilter, structFilter, lengthFilter });\nICollection<ElementId> wallIds = new FilteredElementCollector(doc).WherePasses(andFilter).ToElementIds();\nnew UIDocument(doc).Selection.SetElementIds(wallIds);"}
{"prompt":"Permíteme seleccionar dos puntos y dibuja una viga entre ellos.","completion":"UIDocument uidoc = new UIDocument(doc);\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = doc.ActiveView.GenLevel;\nXYZ p1 = uidoc.Selection.PickPoint(\"Selecciona el punto de inicio de la viga\");\nXYZ p2 = uidoc.Selection.PickPoint(\"Selecciona el punto final de la viga\");\nLine beamCurve = Line.CreateBound(p1, p2);\nif(!beamType.IsActive) beamType.Activate();\ndoc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);"}
{"prompt":"Let me select two points and draw a beam between them.","completion":"UIDocument uidoc = new UIDocument(doc);\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = doc.ActiveView.GenLevel;\nXYZ p1 = uidoc.Selection.PickPoint(\"Select the beam start point\");\nXYZ p2 = uidoc.Selection.PickPoint(\"Select the beam end point\");\nLine beamCurve = Line.CreateBound(p1, p2);\nif(!beamType.IsActive) beamType.Activate();\ndoc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);"}
{"prompt":"Crea un muro del tipo 'EXT-Ladrillo', y si no existe, créalo primero.","completion":"string wallTypeName = \"EXT-Ladrillo\";\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == wallTypeName) as WallType;\nif (wallType == null)\n{\n    WallType template = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    wallType = template.Duplicate(wallTypeName) as WallType;\n}\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nLine wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0));\nWall.Create(doc, wallCurve, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);"}
{"prompt":"Create a wall of type 'EXT-Brick', and if it doesn't exist, create it first.","completion":"string wallTypeName = \"EXT-Brick\";\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == wallTypeName) as WallType;\nif (wallType == null)\n{\n    WallType template = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    wallType = template.Duplicate(wallTypeName) as WallType;\n}\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nLine wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0));\nWall.Create(doc, wallCurve, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);"}
{"prompt":"¿Cuál es el volumen total de hormigón en los forjados?","completion":"List<Floor> floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>().ToList();\ndouble totalVolume = 0.0;\nforeach(Element floor in floors)\n{\n    Parameter volumeParam = floor.get_Parameter(BuiltInParameter.HOST_VOLUME_COMPUTED);\n    totalVolume += volumeParam.AsDouble();\n}"}
{"prompt":"What is the total volume of concrete in the floors?","completion":"List<Floor> floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>().ToList();\ndouble totalVolume = 0.0;\nforeach(Element floor in floors)\n{\n    Parameter volumeParam = floor.get_Parameter(BuiltInParameter.HOST_VOLUME_COMPUTED);\n    totalVolume += volumeParam.AsDouble();\n}"}
{"prompt":"Aplica el material 'Pintura Roja' a todas las caras de los muros seleccionados.","completion":"Material redPaint = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Pintura Roja\") as Material;\nUIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nforeach(ElementId id in selectedIds)\n{\n    Wall wall = doc.GetElement(id) as Wall;\n    if(wall != null)\n    {\n        IList<Face> faces = HostObjectUtils.GetSideFaces(wall, ShellLayerType.Interior);\n        foreach(Face f in faces) { doc.Paint(wall.Id, f, redPaint.Id); }\n        faces = HostObjectUtils.GetSideFaces(wall, ShellLayerType.Exterior);\n        foreach(Face f in faces) { doc.Paint(wall.Id, f, redPaint.Id); }\n    }\n}"}
{"prompt":"Apply the 'Red Paint' material to all faces of the selected walls.","completion":"Material redPaint = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Red Paint\") as Material;\nUIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nforeach(ElementId id in selectedIds)\n{\n    Wall wall = doc.GetElement(id) as Wall;\n    if(wall != null)\n    {\n        IList<Face> faces = HostObjectUtils.GetSideFaces(wall, ShellLayerType.Interior);\n        foreach(Face f in faces) { doc.Paint(wall.Id, f, redPaint.Id); }\n        faces = HostObjectUtils.GetSideFaces(wall, ShellLayerType.Exterior);\n        foreach(Face f in faces) { doc.Paint(wall.Id, f, redPaint.Id); }\n    }\n}"}
{"prompt":"Crea una nueva hoja A1 para cada vista de planta en el proyecto.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Where(v => !v.IsTemplate).Cast<ViewPlan>().ToList();\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A1\")) as FamilySymbol;\nint sheetCounter = 101;\nforeach(ViewPlan view in planViews)\n{\n    string sheetNumber = $\"A-{sheetCounter++}\";\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = view.Name;\n    newSheet.SheetNumber = sheetNumber;\n    if(Viewport.CanAddViewToSheet(doc, newSheet.Id, view.Id))\n    {\n        Viewport.Create(doc, newSheet.Id, view.Id, new XYZ(0.5, 0.5, 0));\n    }\n}"}
{"prompt":"Create a new A1 sheet for each floor plan view in the project.","completion":"List<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Where(v => !v.IsTemplate).Cast<ViewPlan>().ToList();\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A1\")) as FamilySymbol;\nint sheetCounter = 101;\nforeach(ViewPlan view in planViews)\n{\n    string sheetNumber = $\"A-{sheetCounter++}\";\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = view.Name;\n    newSheet.SheetNumber = sheetNumber;\n    if(Viewport.CanAddViewToSheet(doc, newSheet.Id, view.Id))\n    {\n        Viewport.Create(doc, newSheet.Id, view.Id, new XYZ(0.5, 0.5, 0));\n    }\n}"}
{"prompt":"Encuentra todos los muros que no están asociados a ningún nivel.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Find all walls that are not associated with any level.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nList<Element> unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();"}
{"prompt":"Crea una nueva fase 'Fase 3 - Ejecución'.","completion":"string phaseName = \"Fase 3 - Ejecución\";\nPhase lastPhase = doc.Phases.Cast<Phase>().LastOrDefault();\nPhase newPhase = doc.Phases.CreateAfter(lastPhase.Id);\nnewPhase.Name = phaseName;"}
{"prompt":"Create a new phase 'Phase 3 - Execution'.","completion":"string phaseName = \"Phase 3 - Execution\";\nPhase lastPhase = doc.Phases.Cast<Phase>().LastOrDefault();\nPhase newPhase = doc.Phases.CreateAfter(lastPhase.Id);\nnewPhase.Name = phaseName;"}
{"prompt":"Asigna la demolición de los muros seleccionados a la 'Fase 3 - Ejecución'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Fase 3 - Ejecución\");\nUIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nforeach(ElementId id in selectedIds)\n{\n    Element elem = doc.GetElement(id);\n    if(elem is Wall)\n    {\n        elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Assign the demolition of selected walls to 'Phase 3 - Execution'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Phase 3 - Execution\");\nUIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nforeach(ElementId id in selectedIds)\n{\n    Element elem = doc.GetElement(id);\n    if(elem is Wall)\n    {\n        elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Cambia el primer tipo de muro curvo a un tipo estructural.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curved);\nParameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\np.Set((int)WallFunction.Structural);"}
{"prompt":"Change the first curved wall type to a structural type.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curtain);\nParameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\np.Set((int)WallFunction.Structural);"}
{"prompt":"Cambia el material de los paneles de muro cortina a 'Vidrio' si no tienen material.","completion":""}
{"prompt":"Set curtain panel material to 'Glass' if unassigned.","completion":""}
{"prompt":"Duplica el tipo de muro 'Genérico - 200mm' y nómbralo 'Muro_Dibujo'.","completion":"string originalName = \"Genérico - 200mm\";\nstring newName = \"Muro_Dibujo\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\noriginalType.Duplicate(newName);"}
{"prompt":"Duplicate wall type 'Generic - 200mm' and name it 'Drawing_Wall'.","completion":"string originalName = \"Generic - 200mm\";\nstring newName = \"Drawing_Wall\";\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == originalName) as WallType;\noriginalType.Duplicate(newName);"}
{"prompt":"Exporta los IDs y las elevaciones de los niveles a un archivo CSV.","completion":"string folderPath = \"C:/RevitExports/\";\nstring filePath = System.IO.Path.Combine(folderPath, \"levels.csv\");\nList<Level> levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().ToList();\nList<string> lines = new List<string>{\"Id,Name,Elevation_m\"};\nforeach(var l in levels)\n{\n    lines.Add($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.ProjectElevation, UnitTypeId.Meters):F2}\");\n}\nSystem.IO.File.WriteAllLines(filePath, lines);"}
{"prompt":"Export level IDs and elevations to a CSV file.","completion":"string folderPath = \"C:/RevitExports/\";\nstring filePath = System.IO.Path.Combine(folderPath, \"levels.csv\");\nList<Level> levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().ToList();\nList<string> lines = new List<string>{\"Id,Name,Elevation_m\"};\nforeach(var l in levels)\n{\n    lines.Add($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.ProjectElevation, UnitTypeId.Meters):F2}\");\n}\nSystem.IO.File.WriteAllLines(filePath, lines);"}
{"prompt":"Elimina todos los montantes (mullions) desbloqueados de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nICollection<ElementId> unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\ndoc.Delete(unlockedMullionIds);"}
{"prompt":"Delete all unlocked mullions from a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nICollection<ElementId> unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\ndoc.Delete(unlockedMullionIds);"}
{"prompt":"Coloca la vista 'Nivel 1' en la hoja 'Planos de Planta' en el centro.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Planos de Planta\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Nivel 1\");\nBoundingBoxUV sheetBox = targetSheet.Outline;\nXYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\nViewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);"}
{"prompt":"Place the 'Level 1' view on the 'Floor Plans' sheet at its center.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Floor Plans\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Level 1\");\nBoundingBoxUV sheetBox = targetSheet.Outline;\nXYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\nViewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);"}

{"prompt":"Create a point at coordinates (10, 20, 5).","completion":"XYZ pointCoords = new XYZ(10, 20, 5);\nPoint.Create(pointCoords);"}
{"prompt":"Obtén la propiedad de módulo de resorte en Z para una restricción de contorno.","completion":"ForgeTypeId zSpringModulus = ParameterTypeId.BoundaryRestraintRotZ;"}
{"prompt":"Set the maximum range for an electrical demand factor to 5.","completion":"ElectricalDemandFactorValue demandFactor = new ElectricalDemandFactorValue();\ndemandFactor.MaxRange = 5;"}
{"prompt":"Establece el refuerzo de flexión de un material de concreto.","completion":"StructuralAsset asset = new StructuralAsset(\"MyAsset\", StructuralAssetClass.Concrete);\nasset.ConcreteBendingReinforcement = 3000;"}
{"prompt":"Obtén el Id de la falla que ocurre cuando el número de contrahuellas deseadas para una escalera es cero.","completion":"FailureDefinitionId failureId = BuiltInFailures.StairRampFailures.StairsZeroDesiredRisers;"}
{"prompt":"Get the unit symbol for Kips.","completion":"ForgeTypeId kipsUnit = SymbolTypeId.Kip;"}
{"prompt":"Establece el vector de fuerza en el tercer punto de una carga de área.","completion":"AreaLoad areaLoad = new FilteredElementCollector(doc).OfClass(typeof(AreaLoad)).FirstOrDefault() as AreaLoad;\nareaLoad.ForceVector3 = new XYZ(0, 0, -10);"}
{"prompt":"Comprueba si se canceló la recarga de un documento.","completion":"bool isCancelled = e.IsCancelled();"}
{"prompt":"Get the unit symbol for Newtons per square millimeter.","completion":"ForgeTypeId nPerMm2 = SymbolTypeId.NPerMmSup2;"}
{"prompt":"Obtén el tipo de recurso externo para vínculos de Revit.","completion":"ExternalResourceType revitLinkType = ExternalResourceTypes.BuiltInExternalResourceTypes.RevitLink;"}
{"prompt":"Get the property name for the base color of metallic paint.","completion":"string colorPropName = MetallicPaint.MetallicpaintBaseColorByObject;"}
{"prompt":"Crea un suelo inclinado.","completion":"ElementId floorTypeId = Floor.GetDefaultFloorType(doc, false);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nCurveLoop profile = new CurveLoop();\nprofile.Append(Line.CreateBound(new XYZ(0, 0, 0), new XYZ(20, 0, 0)));\nprofile.Append(Line.CreateBound(new XYZ(20, 0, 0), new XYZ(20, 20, 0)));\nprofile.Append(Line.CreateBound(new XYZ(20, 20, 0), new XYZ(0, 20, 0)));\nprofile.Append(Line.CreateBound(new XYZ(0, 20, 0), new XYZ(0, 0, 0)));\nLine slopeArrow = Line.CreateBound(new XYZ(10, 10, 0), new XYZ(11, 10, 0));\nFloor.Create(doc, new List<CurveLoop> { profile }, floorTypeId, level.Id, true, slopeArrow, 0.1);"}
{"prompt":"Create a new mechanical system type.","completion":"MechanicalSystemType.Create(doc, \"New Mechanical System\");"}
{"prompt":"Crea una extrusión sólida mezclada en un documento de familia.","completion":"CurveArray baseProfile = new CurveArray();\nbaseProfile.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0)));\nbaseProfile.Append(Line.CreateBound(new XYZ(10,0,0), new XYZ(10,10,0)));\nbaseProfile.Append(Line.CreateBound(new XYZ(10,10,0), new XYZ(0,10,0)));\nbaseProfile.Append(Line.CreateBound(new XYZ(0,10,0), new XYZ(0,0,0)));\nCurveArray topProfile = new CurveArray();\ntopProfile.Append(Line.CreateBound(new XYZ(2,2,10), new XYZ(8,2,10)));\ntopProfile.Append(Line.CreateBound(new XYZ(8,2,10), new XYZ(8,8,10)));\ntopProfile.Append(Line.CreateBound(new XYZ(8,8,10), new XYZ(2,8,10)));\ntopProfile.Append(Line.CreateBound(new XYZ(2,8,10), new XYZ(2,2,10)));\ndoc.FamilyCreate.NewBlend(true, topProfile, baseProfile, null);"}
{"prompt":"Obtén el número total de puntos en una trayectoria dividida.","completion":"DividedPath dividedPath = new FilteredElementCollector(doc).OfClass(typeof(DividedPath)).FirstOrDefault() as DividedPath;\nint pointCount = dividedPath.NumberOfPoints;"}
{"prompt":"Establece si una instancia de familia es visible en nivel de detalle medio.","completion":"FamilyInstance instance = new FilteredElementCollector(doc).OfClass(typeof(FamilyInstance)).FirstOrDefault() as FamilyInstance;\nFamilyElementVisibility visibility = instance.GetVisibility();\nvisibility.IsShownInMedium = true;"}
{"prompt":"Obtén el Id de la falla que ocurre cuando un soporte de fabricación no se conecta a su anfitrión.","completion":"FailureDefinitionId failureId = BuiltInFailures.MEPFabricationFailures.FabricationHangerNotConnectToHost;"}
{"prompt":"Get the evaluator for a filter string rule.","completion":"FilterStringRule rule = new FilterStringRule(new ParameterValueProvider(new ElementId(BuiltInParameter.ALL_MODEL_MARK)), new FilterStringEquals(), \"A\", false);\nFilterStringRuleEvaluator evaluator = rule.GetEvaluator();"}
{"prompt":"Obtén el especificador de unidad para pulsación.","completion":"ForgeTypeId pulsationSpec = SpecTypeId.Pulsation;"}
{"prompt":"Obtén el Id de la falla que ocurre cuando las barras de refuerzo están demasiado juntas.","completion":"FailureDefinitionId failureId = BuiltInFailures.RebarSystemFailures.BarsTooCloseNumber;"}
{"prompt":"Get the unit symbol for cubic meters per watt second.","completion":"ForgeTypeId m3PerWs = SymbolTypeId.MSup3PerWS;"}
{"prompt":"Obtén la definición de un parámetro de familia.","completion":"FamilyManager familyManager = doc.FamilyManager;\nFamilyParameter familyParam = familyManager.GetParameters().FirstOrDefault();\nDefinition paramDef = familyParam.Definition;"}
{"prompt":"Get the parameter type ID for shear modulus X.","completion":"ForgeTypeId shearModX = ParameterTypeId.PhyMaterialParamShearMod1;"}
{"prompt":"Obtén el Id de la falla para un error de medición de punto en un anfitrión.","completion":"FailureDefinitionId failureId = BuiltInFailures.PointFailures.HostMeasurementError;"}
{"prompt":"Set the global 3D direction handles for an IFC export.","completion":"IFCAnyHandle xDir = new IFCAnyHandle();\nIFCAnyHandle yDir = new IFCAnyHandle();\nIFCAnyHandle zDir = new IFCAnyHandle();\nExporterIFCUtils.SetGlobal3DDirectionHandles(true, xDir, yDir, zDir);"}
{"prompt":"Rota una nota de texto 45 grados.","completion":"TextNote note = new FilteredElementCollector(doc).OfClass(typeof(TextNote)).FirstOrDefault() as TextNote;\nTextNoteOptions opts = note.GetTextNoteOptions();\nopts.Rotation = Math.PI / 4;"}
{"prompt":"Obtén el Id de la falla que ocurre cuando no se puede crear un grupo.","completion":"FailureDefinitionId failureId = BuiltInFailures.GroupFailures.CannotCreateGroup;"}
{"prompt":"Obtén el Id de la falla que ocurre cuando se intenta modificar un grupo fuera del modo de edición.","completion":"FailureDefinitionId failureId = BuiltInFailures.GroupFailures.AtomTouchedNotAllowed;"}
{"prompt":"Get the parameter type ID for minimum stair tread depth.","completion":"ForgeTypeId minTreadDepth = ParameterTypeId.StairstypeMinimumTreadDepth;"}
{"prompt":"Establece el tipo de segmento de un patrón de línea a punto.","completion":"LinePattern pattern = new FilteredElementCollector(doc).OfClass(typeof(LinePattern)).FirstOrDefault() as LinePattern;\nLinePatternSegment segment = pattern.GetSegment(0);\nsegment.Type = LinePatternSegmentType.Dot;"}
{"prompt":"Obtén el Id de la falla que ocurre cuando el primer tramo de una escalera de caracol es demasiado corto.","completion":"FailureDefinitionId failureId = BuiltInFailures.StairRampFailures.WinderFirstLegTooShortOrRunWidthTooGreatFailure;"}
{"prompt":"Get the alias of a fabrication part.","completion":"FabricationPart part = new FilteredElementCollector(doc).OfClass(typeof(FabricationPart)).FirstOrDefault() as FabricationPart;\nstring alias = part.Alias;"}
{"prompt":"Crea un nuevo tipo de tratamiento de extremo para elementos estructurales.","completion":"EndTreatmentType.Create(doc, \"My End Treatment\");"}
{"prompt":"Crea un filtro para elementos que tienen un tipo de almacenamiento extensible específico.","completion":"Schema schema = Schema.ListSchemas().FirstOrDefault();\nExtensibleStorageFilter filter = new ExtensibleStorageFilter(schema.GUID);"}
{"prompt":"Obtén el Id de la fase para una zona.","completion":"ForgeTypeId phaseId = ParameterTypeId.ZonePhaseId;"}
{"prompt":"Calcula la estación de alineación más cercana a un punto en el modelo.","completion":"Alignment alignment = new FilteredElementCollector(doc).OfClass(typeof(Alignment)).FirstOrDefault() as Alignment;\nXYZ point = new XYZ(10, 20, 0);\ndouble closestStation = alignment.GetClosestStation(point);"}
{"prompt":"Get the parameter type ID for the host of a non-hosted instance.","completion":"ForgeTypeId hostParam = ParameterTypeId.InstanceFreeHostParam;"}
{"prompt":"Obtén el Id del parámetro de marca para cimentaciones analíticas.","completion":"ForgeTypeId foundationMark = ParameterTypeId.AnalyticalModelFoundationsMark;"}
{"prompt":"Comprueba si se pueden crear partes a partir de un elemento DirectShape.","completion":"DirectShape ds = new FilteredElementCollector(doc).OfClass(typeof(DirectShape)).FirstOrDefault() as DirectShape;\nbool canCreateParts = ds.CanCreateParts();"}
{"prompt":"Crea una instancia de un elemento transitorio.","completion":"ITransientElementMaker maker = new MyTransientMaker();\nmaker.Execute();"}
{"prompt":"Obtén el Id de grupo para iluminación eléctrica.","completion":"ForgeTypeId lightingGroup = GroupTypeId.ElectricalLighting;"}
{"prompt":"Obtén un parámetro de un elemento de control usando su BuiltInParameter.","completion":"Control control = new FilteredElementCollector(doc).OfClass(typeof(Control)).FirstOrDefault() as Control;\nParameter param = control.get_Parameter(BuiltInParameter.ELEM_FAMILY_PARAM);"}

{"prompt":"Determina si una definición de tabla de planificación incluye elementos de archivos vinculados.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).FirstOrDefault() as ViewSchedule;\nScheduleDefinition definition = schedule.Definition;\nbool includesLinks = definition.IncludeLinkedFiles;"}
{"prompt":"Get the failure ID for a geometry warning during an interference check.","completion":"FailureDefinitionId failureId = BuiltInFailures.InterferenceFailures.GeometryWarning;"}
{"prompt":"Obtén el conector vinculado de un conector MEP.","completion":"ConnectorManager cm = someElement.MEPModel.ConnectorManager;\nConnector connector = cm.Connectors.get_Item(0);\nMEPConnectorInfo info = connector.GetMEPConnectorInfo();\nConnector linkedConnector = info.LinkedConnector;"}
{"prompt":"Get the failure ID for when a family instance cannot find an appropriate host.","completion":"FailureDefinitionId failureId = BuiltInFailures.FamilyFailures.CannotFindHost;"}
{"prompt":"Obtén el hash code para el documento actual.","completion":"int hashCode = doc.GetHashCode();"}
{"prompt":"Create a new linear dimension between two references.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select first element\");\nReference r2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select second element\");\nReferenceArray refArray = new ReferenceArray();\nrefArray.Append(r1);\nrefArray.Append(r2);\nLine line = Line.CreateBound(new XYZ(0,10,0), new XYZ(10,10,0));\ndoc.Create.NewDimension(doc.ActiveView, line, refArray);"}
{"prompt":"Obtén el Id del parámetro 'Cortar con vacíos al cargar'.","completion":"ForgeTypeId paramId = ParameterTypeId.FamilyAllowCutWithVoids;"}
{"prompt":"Obtén el mensaje de una excepción de Revit Server.","completion":"try\n{\n    // some Revit Server operation\n}\ncatch (Autodesk.Revit.Exceptions.RevitServerException ex)\n{\n    string message = ex.Message;\n}"}
{"prompt":"Create a new set of SAT export options based on an existing one.","completion":"SATExportOptions existingOptions = new SATExportOptions();\nSATExportOptions newOptions = new SATExportOptions(existingOptions);"}
{"prompt":"Crea un nuevo conjunto de opciones de exportación a DXF.","completion":"DXFExportOptions options = new DXFExportOptions();"}
{"prompt":"Check if a project location is in a set of locations.","completion":"ProjectLocationSet locationSet = doc.ProjectLocations;\nProjectLocation location = doc.ActiveProjectLocation;\nbool contains = locationSet.Contains(location);"}
{"prompt":"Asigna un sistema de distribución a un equipo eléctrico.","completion":"FamilyInstance elecEquip = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nDistributionSysType distSystem = new FilteredElementCollector(doc).OfClass(typeof(DistributionSysType)).FirstOrDefault() as DistributionSysType;\nelecEquip.MEPModel.ElectricalSystems.get_Item(0).DistributionSystem = distSystem;"}
{"prompt":"Set the separator character for a layer modifier.","completion":"LayerModifier modifier = new LayerModifier(\"Phase\", \"New Work\");\nmodifier.Separator = \"-\";"}
{"prompt":"Verifica si el objeto de opciones de líneas finas es válido.","completion":"ThinLinesOptions options = new ThinLinesOptions();\nbool isValid = options.IsValidObject;"}
{"prompt":"Get the property name for the noise size of a gradient.","completion":"string noiseSizeProp = Gradient.GradientNoiseSize;"}
{"prompt":"Obtén un iterador para el gestor de macros.","completion":"MacroManagerIterator iterator = doc.Application.GetMacroManagerIterator();"}
{"prompt":"Get the parameter ID for 'Other Total Estimated Demand' on an electrical panel.","completion":"ForgeTypeId paramId = ParameterTypeId.RbsElecPanelTotalestloadOtherParam;"}
{"prompt":"Obtén el Id de la falla que ocurre cuando el boceto de una carga de área tiene bucles abiertos.","completion":"FailureDefinitionId failureId = BuiltInFailures.LoadFailures.OpenAreaLoadLoopError;"}
{"prompt":"Get the parameter ID for 'Average Modulus' of a physical material.","completion":"ForgeTypeId paramId = ParameterTypeId.PhyMaterialParamAverageModulus;"}
{"prompt":"Asigna un panel a un sistema eléctrico.","completion":"ElectricalSystem elecSystem = new FilteredElementCollector(doc).OfClass(typeof(ElectricalSystem)).FirstOrDefault() as ElectricalSystem;\nFamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nelecSystem.SelectPanel(panel);"}
{"prompt":"Move a set of analytical spaces to a different zone equipment.","completion":"ISet<ElementId> spaces = new HashSet<ElementId>();\nspaces.Add(someAnalyticalSpace.Id);\nElementId originalZoneId = someOriginalZone.Id;\nElementId targetZoneId = someTargetZone.Id;\nZoneEquipment.MoveSpaceToEquipment(doc, spaces, originalZoneId, targetZoneId);"}
{"prompt":"Obtén el nombre de la propiedad para la rugosidad de una superficie opaca avanzada.","completion":"string roughnessProp = AdvancedOpaque.SurfaceRoughness;"}
{"prompt":"Get the Y basis vector of a transform.","completion":"Transform transform = Transform.Identity;\nXYZ basisY = transform.BasisY;"}
{"prompt":"Establece el vector de momento en el punto de inicio de una carga de línea.","completion":"LineLoad lineLoad = new FilteredElementCollector(doc).OfClass(typeof(LineLoad)).FirstOrDefault() as LineLoad;\nlineLoad.MomentVector1 = new XYZ(0, 10, 0);"}
{"prompt":"Create a new fabrication part size map.","completion":"FabricationPartSizeMap sizeMap = new FabricationPartSizeMap(\"200x150\", 200, 150, false, ConnectorProfileType.Rectangular, 1, 1);"}
{"prompt":"Comprueba si un ID de comando de Revit es válido.","completion":"RevitCommandId commandId = RevitCommandId.LookupPostableCommandId(PostableCommand.Save);\nbool isValid = commandId.IsValidObject;"}
{"prompt":"Get the parameter ID for 'Moves With Grids'.","completion":"ForgeTypeId paramId = ParameterTypeId.InstanceMovesWithGridParam;"}
{"prompt":"Obtén el símbolo de unidad para pies cuadrados.","completion":"ForgeTypeId sqFt = SymbolTypeId.FtSup2;"}
{"prompt":"Get the 'Comments' parameter from a selected truss.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a truss\");\nElement truss = doc.GetElement(pickedRef.ElementId);\nParameter commentsParam = truss.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);"}
{"prompt":"Cambia el tipo de un panel de muro cortina por un tipo de muro.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a curtain panel\");\nElement panel = doc.GetElement(pickedRef);\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nCurtainGrid grid = (panel.Host as Wall).CurtainGrid;\ngrid.ChangePanelType(panel, wallType);"}
{"prompt":"Set the text for the extra checkbox in a task dialog.","completion":"TaskDialog dialog = new TaskDialog(\"My Dialog\");\ndialog.ExtraCheckBoxText = \"Do not show this again\";"}
{"prompt":"Asigna un material a la categoría de muros.","completion":"Category wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nMaterial mat = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Concrete\") as Material;\nwallCat.Material = mat;"}
{"prompt":"Get the failure ID for when truss webs become unjoined.","completion":"FailureDefinitionId failureId = BuiltInFailures.TrussFailures.TrussNotJoinedWebs;"}
{"prompt":"Crea una nueva línea de rejilla radial.","completion":"Arc arc = Arc.Create(XYZ.Zero, 5, 0, Math.PI, XYZ.BasisX, XYZ.BasisY);\nGrid.Create(doc, arc);"}
{"prompt":"Establece el color emisivo de un efecto de DirectContext3D.","completion":"EffectInstance effect = new EffectInstance();\neffect.SetEmissiveColor(new Color(255, 0, 0));"}
{"prompt":"Check if a SAT export options object is valid.","completion":"SATExportOptions options = new SATExportOptions();\nbool isValid = options.IsValidObject;"}
{"prompt":"Cambia el tipo de junta de un muro en su extremo inicial.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nLocationCurve locCurve = wall.Location as LocationCurve;\nlocCurve.set_JoinType(0, JoinType.Miter);"}
{"prompt":"Get the spec ID for thermal gradient coefficient for moisture capacity.","completion":"ForgeTypeId specId = SpecTypeId.ThermalGradientCoefficientForMoistureCapacity;"}
{"prompt":"Comprueba si un conjunto de cables está vacío.","completion":"ElectricalSystem circuit = new FilteredElementCollector(doc).OfClass(typeof(ElectricalSystem)).FirstOrDefault() as ElectricalSystem;\nWireSet wireSet = circuit.WireManager.GetWireSet();\nbool isEmpty = wireSet.IsEmpty;"}
{"prompt":"Get the parameter ID for an internal multiplanar rebar end connector.","completion":"ForgeTypeId paramId = ParameterTypeId.RebarInternalMultiplanarEndConnector;"}
{"prompt":"Obtén el ángulo de los ejes principales de una sección estructural.","completion":"FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nStructuralSection section = (column.Symbol as FamilySymbol).GetStructuralSection();\ndouble angle = section.PrincipalAxesAngle;"}
{"prompt":"Obtén todos los callouts de referencia de una vista.","completion":"View view = doc.ActiveView;\nICollection<ElementId> calloutIds = view.GetReferenceCallouts();"}
{"prompt":"Check if the UI theme follows the system color theme.","completion":"bool followsSystem = UIThemeManager.FollowSystemColorTheme;"}
{"prompt":"Obtén la ayuda contextual de un botón de la cinta de opciones.","completion":"PushButtonData buttonData = new PushButtonData(\"MyButton\", \"Button Text\", Assembly.GetExecutingAssembly().Location, \"Namespace.ClassName\");\nContextualHelp help = buttonData.GetContextualHelp();"}

{"prompt":"Get the parameter ID for 'Apparent Load Phase 3'.","completion":"ForgeTypeId paramId = ParameterTypeId.RbsElecApparentLoadPhase3;"}
{"prompt":"Obtén el ID de la unidad para libras masa por libra grado Fahrenheit.","completion":"ForgeTypeId unitId = UnitTypeId.PoundsMassPerPoundDegreeFahrenheit;"}
{"prompt":"Get an element filter from a performance adviser rule.","completion":"PerformanceAdviser adviser = PerformanceAdviser.GetPerformanceAdviser();\nPerformanceAdviserRuleId ruleId = adviser.GetAllRuleIds().FirstOrDefault();\nElementFilter filter = adviser.GetElementFilterFromRule(ruleId, doc);"}
{"prompt":"Obtén el ID de grupo para posicionamiento geométrico.","completion":"ForgeTypeId groupId = GroupTypeId.GeometryPositioning;"}
{"prompt":"Get the base equipment for a selected MEP system.","completion":"MEPSystem system = new FilteredElementCollector(doc).OfClass(typeof(MEPSystem)).FirstOrDefault() as MEPSystem;\nFamilyInstance baseEquipment = system.BaseEquipment;"}
{"prompt":"Crea un nuevo conjunto de opciones de descarga de parámetros.","completion":"ParameterDownloadOptions options = new ParameterDownloadOptions();"}
{"prompt":"Elimina un espacio de un conjunto de espacios.","completion":"SpaceSet spaceSet = new SpaceSet();\nSpace space = new FilteredElementCollector(doc).OfClass(typeof(Space)).FirstOrDefault() as Space;\nspaceSet.Insert(space);\nspaceSet.Erase(space);"}
{"prompt":"Get the total depth of a monolithic stairs run type.","completion":"StairsRunType runType = new FilteredElementCollector(doc).OfClass(typeof(StairsRunType)).FirstOrDefault(rt => rt.IsMonolithic) as StairsRunType;\ndouble depth = runType.TotalDepth;"}
{"prompt":"Obtén la descripción de una regla del asesor de rendimiento.","completion":"PerformanceAdviser adviser = PerformanceAdviser.GetPerformanceAdviser();\nstring description = adviser.GetRuleDescription(0);"}
{"prompt":"Get the number of reference arrays in a reference array array.","completion":"ReferenceArrayArray refArrayArray = new ReferenceArrayArray();\nint count = refArrayArray.Size;"}
{"prompt":"Aplica una transformación a una malla.","completion":"Mesh mesh = someSolid.Faces.get_Item(0).Triangulate();\nTransform transform = Transform.CreateRotation(XYZ.BasisZ, Math.PI / 4);\nMesh transformedMesh = mesh.get_Transformed(transform);"}
{"prompt":"Obtén las coordenadas mínimas y máximas de una caja de selección.","completion":"UIDocument uidoc = new UIDocument(doc);\nPickedBox pickedBox = uidoc.Selection.PickBox(PickBoxStyle.Enclosing, \"Select elements\");\nXYZ min = pickedBox.Min;\nXYZ max = pickedBox.Max;"}
{"prompt":"Set the rule string for a filter string rule.","completion":"ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.ALL_MODEL_MARK));\nFilterStringRule rule = new FilterStringRule(pvp, new FilterStringEquals(), \"A\", false);\nrule.RuleString = \"B\";"}
{"prompt":"Obtén el ID de la unidad para milivoltios.","completion":"ForgeTypeId unitId = UnitTypeId.Millivolts;"}
{"prompt":"Get the GroupTypeId for General.","completion":"ForgeTypeId groupId = GroupTypeId.General;"}
{"prompt":"Obtén el Id de la falla que ocurre cuando falla la actualización de una cadena de curvas.","completion":"FailureDefinitionId failureId = BuiltInFailures.GeometryFailures.FailedUpdateCurveChain;"}
{"prompt":"Get the parameter type ID for a condenser water loop.","completion":"ForgeTypeId paramId = ParameterTypeId.MepCondenserWaterLoop;"}
{"prompt":"Obtén el Id de la falla que ocurre cuando el perfil de una barandilla es inválido.","completion":"FailureDefinitionId failureId = BuiltInFailures.StairRampFailures.BadRailProfile;"}
{"prompt":"Get the start point of a curve.","completion":"Line line = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\nXYZ startPoint = line.GetEndPoint(0);"}
{"prompt":"Obtén el ID de parámetro para la relación de la correa V de una rejilla de muro cortina.","completion":"ForgeTypeId paramId = ParameterTypeId.CurtaingridBeltRatioV;"}
{"prompt":"Get the SpecTypeId for Weight.","completion":"ForgeTypeId specId = SpecTypeId.Weight;"}
{"prompt":"Obtén el Id de la falla que ocurre cuando un relleno de acristalamiento inclinado no es permitido.","completion":"FailureDefinitionId failureId = BuiltInFailures.InfillFailures.InfillNoSlopeGlazing;"}
{"prompt":"Get the property name for the tint toggle of a hardwood asset.","completion":"string tintToggleProp = Hardwood.CommonTintToggle;"}
{"prompt":"Compara dos transformaciones 1D para ver si son casi iguales.","completion":"Transform1D t1 = new Transform1D(1, 0.5);\nTransform1D t2 = new Transform1D(1, 0.5000000001);\nbool areAlmostEqual = t1.AlmostEqual(t2);"}
{"prompt":"Get the parameter ID for a sketch plane.","completion":"ForgeTypeId paramId = ParameterTypeId.SketchPlaneParam;"}
{"prompt":"Comprueba si un nivel puede ser conectado a una escalera de varios pisos.","completion":"MultistoryStairs multiStairs = new FilteredElementCollector(doc).OfClass(typeof(MultistoryStairs)).FirstOrDefault() as MultistoryStairs;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nbool canConnect = multiStairs.CanConnectLevel(level.Id);"}
{"prompt":"Get the failure ID for when a toposolid's slope exceeds the threshold.","completion":"FailureDefinitionId failureId = BuiltInFailures.SiteFailures.ToposolidSlopeExceedsThreshold;"}
{"prompt":"Obtén el Id de la falla para una cota con unidad de longitud común.","completion":"FailureDefinitionId failureId = BuiltInFailures.RebarShapeFailures.DimensionWithCommonLengthUnit;"}
{"prompt":"Get the parameter ID for sliver space tolerance in energy analysis.","completion":"ForgeTypeId paramId = ParameterTypeId.RbsEnergyAnalysisSliverSpaceTolerance;"}
{"prompt":"Crea un contorno a partir de dos puntos.","completion":"Outline outline = new Outline(new XYZ(0,0,0), new XYZ(10,10,10));"}
{"prompt":"Get the failure ID for when a wall cannot be updated.","completion":"FailureDefinitionId failureId = BuiltInFailures.CreationFailures.CannotUpdateWall;"}
{"prompt":"Comprueba si los metros son una unidad válida para la especificación de longitud.","completion":"bool isValid = UnitUtils.IsValidUnit(SpecTypeId.Length, UnitTypeId.Meters);"}
{"prompt":"Obtén un iterador inverso para un conjunto de factores de corrección.","completion":"CorrectionFactorSet cfSet = new CorrectionFactorSet();\nCorrectionFactorSetIterator iterator = cfSet.ReverseIterator();"}
{"prompt":"Duplica un tipo de cable existente.","completion":"WireType wireType = new FilteredElementCollector(doc).OfClass(typeof(WireType)).FirstOrDefault() as WireType;\nWireType newWireType = wireType.Duplicate(\"New Wire Type\") as WireType;"}
{"prompt":"Get the parameter ID for a continuous rail end termination attachment.","completion":"ForgeTypeId paramId = ParameterTypeId.ContinuousrailEndTerminationAttachmentParam;"}
{"prompt":"Establece el desfase de un tramo de barandilla no continuo.","completion":"Railing rail = new FilteredElementCollector(doc).OfClass(typeof(Railing)).FirstOrDefault() as Railing;\nNonContinuousRailInfo railInfo = rail.GetNonContinuousRailInfos().FirstOrDefault();\nrailInfo.Offset = 0.1;"}
{"prompt":"Set the line style for a Path of Travel element.","completion":"PathOfTravel pot = new FilteredElementCollector(doc).OfClass(typeof(PathOfTravel)).FirstOrDefault() as PathOfTravel;\nGraphicsStyle lineStyle = new FilteredElementCollector(doc).OfClass(typeof(GraphicsStyle)).FirstOrDefault() as GraphicsStyle;\npot.LineStyle = lineStyle.Id;"}
{"prompt":"Comprueba si una propiedad de un activo de apariencia es de solo lectura.","completion":"AppearanceAssetElement assetElem = new FilteredElementCollector(doc).OfClass(typeof(AppearanceAssetElement)).FirstOrDefault() as AppearanceAssetElement;\nusing (AppearanceAssetEditScope scope = new AppearanceAssetEditScope(assetElem.Document))\n{\n    Asset asset = scope.Start(assetElem.Id);\n    AssetProperty prop = asset.GetFirst();\n    bool isReadOnly = prop.IsReadOnly;\n    scope.Cancel();\n}"}
{"prompt":"Obtén la acción de doble clic para editar un tipo de familia.","completion":"DoubleClickOptions options = DoubleClickOptions.GetDoubleClickOptions();\nDoubleClickAction action = options.GetAction(DoubleClickTarget.FamilyType);"}
{"prompt":"Obtén el área de un bucle de curvas.","completion":"CurveLoop loop = new CurveLoop();\n// ... add curves to loop ...\nHostObjectSubcomponentInfo subInfo = new HostObjectSubcomponentInfo(loop);\ndouble area = subInfo.AreaOfCurveLoop;"}
{"prompt":"Crea nuevas opciones de recarga desde el central.","completion":"ReloadLatestOptions options = new ReloadLatestOptions();"}

{"prompt":"Get the parameter ID for 'Apparent Load Phase 3'.","completion":"ForgeTypeId paramId = ParameterTypeId.RbsElecApparentLoadPhase3;"}
{"prompt":"Obtén el ID de la unidad para libras masa por libra grado Fahrenheit.","completion":"ForgeTypeId unitId = UnitTypeId.PoundsMassPerPoundDegreeFahrenheit;"}
{"prompt":"Get an element filter from a performance adviser rule.","completion":"PerformanceAdviser adviser = PerformanceAdviser.GetPerformanceAdviser();\nPerformanceAdviserRuleId ruleId = adviser.GetAllRuleIds().FirstOrDefault();\nElementFilter filter = adviser.GetElementFilterFromRule(ruleId, doc);"}
{"prompt":"Obtén el ID de grupo para posicionamiento geométrico.","completion":"ForgeTypeId groupId = GroupTypeId.GeometryPositioning;"}
{"prompt":"Get the base equipment for a selected MEP system.","completion":"MEPSystem system = new FilteredElementCollector(doc).OfClass(typeof(MEPSystem)).FirstOrDefault() as MEPSystem;\nFamilyInstance baseEquipment = system.BaseEquipment;"}
{"prompt":"Crea un nuevo conjunto de opciones de descarga de parámetros.","completion":"ParameterDownloadOptions options = new ParameterDownloadOptions();"}
{"prompt":"Elimina un espacio de un conjunto de espacios.","completion":"SpaceSet spaceSet = new SpaceSet();\nSpace space = new FilteredElementCollector(doc).OfClass(typeof(Space)).FirstOrDefault() as Space;\nspaceSet.Insert(space);\nspaceSet.Erase(space);"}
{"prompt":"Get the total depth of a monolithic stairs run type.","completion":"StairsRunType runType = new FilteredElementCollector(doc).OfClass(typeof(StairsRunType)).FirstOrDefault(rt => rt.IsMonolithic) as StairsRunType;\ndouble depth = runType.TotalDepth;"}
{"prompt":"Obtén la descripción de una regla del asesor de rendimiento.","completion":"PerformanceAdviser adviser = PerformanceAdviser.GetPerformanceAdviser();\nstring description = adviser.GetRuleDescription(0);"}
{"prompt":"Get the number of reference arrays in a reference array array.","completion":"ReferenceArrayArray refArrayArray = new ReferenceArrayArray();\nint count = refArrayArray.Size;"}
{"prompt":"Aplica una transformación a una malla.","completion":"Mesh mesh = someSolid.Faces.get_Item(0).Triangulate();\nTransform transform = Transform.CreateRotation(XYZ.BasisZ, Math.PI / 4);\nMesh transformedMesh = mesh.get_Transformed(transform);"}
{"prompt":"Obtén las coordenadas mínimas y máximas de una caja de selección.","completion":"UIDocument uidoc = new UIDocument(doc);\nPickedBox pickedBox = uidoc.Selection.PickBox(PickBoxStyle.Enclosing, \"Select elements\");\nXYZ min = pickedBox.Min;\nXYZ max = pickedBox.Max;"}
{"prompt":"Set the rule string for a filter string rule.","completion":"ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.ALL_MODEL_MARK));\nFilterStringRule rule = new FilterStringRule(pvp, new FilterStringEquals(), \"A\", false);\nrule.RuleString = \"B\";"}
{"prompt":"Obtén el ID de la unidad para milivoltios.","completion":"ForgeTypeId unitId = UnitTypeId.Millivolts;"}
{"prompt":"Get the GroupTypeId for General.","completion":"ForgeTypeId groupId = GroupTypeId.General;"}
{"prompt":"Obtén el Id de la falla que ocurre cuando falla la actualización de una cadena de curvas.","completion":"FailureDefinitionId failureId = BuiltInFailures.GeometryFailures.FailedUpdateCurveChain;"}
{"prompt":"Get the parameter type ID for a condenser water loop.","completion":"ForgeTypeId paramId = ParameterTypeId.MepCondenserWaterLoop;"}
{"prompt":"Obtén el Id de la falla que ocurre cuando el perfil de una barandilla es inválido.","completion":"FailureDefinitionId failureId = BuiltInFailures.StairRampFailures.BadRailProfile;"}
{"prompt":"Get the start point of a curve.","completion":"Line line = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\nXYZ startPoint = line.GetEndPoint(0);"}
{"prompt":"Obtén el ID de parámetro para la relación de la correa V de una rejilla de muro cortina.","completion":"ForgeTypeId paramId = ParameterTypeId.CurtaingridBeltRatioV;"}
{"prompt":"Get the SpecTypeId for Weight.","completion":"ForgeTypeId specId = SpecTypeId.Weight;"}
{"prompt":"Obtén el Id de la falla que ocurre cuando un relleno de acristalamiento inclinado no es permitido.","completion":"FailureDefinitionId failureId = BuiltInFailures.InfillFailures.InfillNoSlopeGlazing;"}
{"prompt":"Get the property name for the tint toggle of a hardwood asset.","completion":"string tintToggleProp = Hardwood.CommonTintToggle;"}
{"prompt":"Compara dos transformaciones 1D para ver si son casi iguales.","completion":"Transform1D t1 = new Transform1D(1, 0.5);\nTransform1D t2 = new Transform1D(1, 0.5000000001);\nbool areAlmostEqual = t1.AlmostEqual(t2);"}
{"prompt":"Get the parameter ID for a sketch plane.","completion":"ForgeTypeId paramId = ParameterTypeId.SketchPlaneParam;"}
{"prompt":"Comprueba si un nivel puede ser conectado a una escalera de varios pisos.","completion":"MultistoryStairs multiStairs = new FilteredElementCollector(doc).OfClass(typeof(MultistoryStairs)).FirstOrDefault() as MultistoryStairs;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nbool canConnect = multiStairs.CanConnectLevel(level.Id);"}
{"prompt":"Get the failure ID for when a toposolid's slope exceeds the threshold.","completion":"FailureDefinitionId failureId = BuiltInFailures.SiteFailures.ToposolidSlopeExceedsThreshold;"}
{"prompt":"Obtén el Id de la falla para una cota con unidad de longitud común.","completion":"FailureDefinitionId failureId = BuiltInFailures.RebarShapeFailures.DimensionWithCommonLengthUnit;"}
{"prompt":"Get the parameter ID for sliver space tolerance in energy analysis.","completion":"ForgeTypeId paramId = ParameterTypeId.RbsEnergyAnalysisSliverSpaceTolerance;"}
{"prompt":"Crea un contorno a partir de dos puntos.","completion":"Outline outline = new Outline(new XYZ(0,0,0), new XYZ(10,10,10));"}
{"prompt":"Get the failure ID for when a wall cannot be updated.","completion":"FailureDefinitionId failureId = BuiltInFailures.CreationFailures.CannotUpdateWall;"}
{"prompt":"Comprueba si los metros son una unidad válida para la especificación de longitud.","completion":"bool isValid = UnitUtils.IsValidUnit(SpecTypeId.Length, UnitTypeId.Meters);"}
{"prompt":"Obtén un iterador inverso para un conjunto de factores de corrección.","completion":"CorrectionFactorSet cfSet = new CorrectionFactorSet();\nCorrectionFactorSetIterator iterator = cfSet.ReverseIterator();"}
{"prompt":"Duplica un tipo de cable existente.","completion":"WireType wireType = new FilteredElementCollector(doc).OfClass(typeof(WireType)).FirstOrDefault() as WireType;\nWireType newWireType = wireType.Duplicate(\"New Wire Type\") as WireType;"}
{"prompt":"Get the parameter ID for a continuous rail end termination attachment.","completion":"ForgeTypeId paramId = ParameterTypeId.ContinuousrailEndTerminationAttachmentParam;"}
{"prompt":"Establece el desfase de un tramo de barandilla no continuo.","completion":"Railing rail = new FilteredElementCollector(doc).OfClass(typeof(Railing)).FirstOrDefault() as Railing;\nNonContinuousRailInfo railInfo = rail.GetNonContinuousRailInfos().FirstOrDefault();\nrailInfo.Offset = 0.1;"}
{"prompt":"Set the line style for a Path of Travel element.","completion":"PathOfTravel pot = new FilteredElementCollector(doc).OfClass(typeof(PathOfTravel)).FirstOrDefault() as PathOfTravel;\nGraphicsStyle lineStyle = new FilteredElementCollector(doc).OfClass(typeof(GraphicsStyle)).FirstOrDefault() as GraphicsStyle;\npot.LineStyle = lineStyle.Id;"}
{"prompt":"Comprueba si una propiedad de un activo de apariencia es de solo lectura.","completion":"AppearanceAssetElement assetElem = new FilteredElementCollector(doc).OfClass(typeof(AppearanceAssetElement)).FirstOrDefault() as AppearanceAssetElement;\nusing (AppearanceAssetEditScope scope = new AppearanceAssetEditScope(assetElem.Document))\n{\n    Asset asset = scope.Start(assetElem.Id);\n    AssetProperty prop = asset.GetFirst();\n    bool isReadOnly = prop.IsReadOnly;\n    scope.Cancel();\n}"}
{"prompt":"Obtén la acción de doble clic para editar un tipo de familia.","completion":"DoubleClickOptions options = DoubleClickOptions.GetDoubleClickOptions();\nDoubleClickAction action = options.GetAction(DoubleClickTarget.FamilyType);"}
{"prompt":"Obtén el área de un bucle de curvas.","completion":"CurveLoop loop = new CurveLoop();\n// ... add curves to loop ...\nHostObjectSubcomponentInfo subInfo = new HostObjectSubcomponentInfo(loop);\ndouble area = subInfo.AreaOfCurveLoop;"}
{"prompt":"Crea nuevas opciones de recarga desde el central.","completion":"ReloadLatestOptions options = new ReloadLatestOptions();"}
{"prompt":"Obtén el Id de la falla que ocurre cuando un extremo de una viga de celosía no está unido.","completion":"FailureDefinitionId failureId = BuiltInFailures.TrussFailures.TrussNotJoinedWebs;"}
{"prompt":"Crea una nueva línea de rejilla radial.","completion":"Arc arc = Arc.Create(XYZ.Zero, 5, 0, Math.PI, XYZ.BasisX, XYZ.BasisY);\nGrid.Create(doc, arc);"}
{"prompt":"Establece el color emisivo de un efecto de DirectContext3D.","completion":"EffectInstance effect = new EffectInstance();\neffect.SetEmissiveColor(new Color(255, 0, 0));"}
{"prompt":"Check if a SAT export options object is valid.","completion":"SATExportOptions options = new SATExportOptions();\nbool isValid = options.IsValidObject;"}
{"prompt":"Cambia el tipo de junta de un muro en su extremo inicial.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nLocationCurve locCurve = wall.Location as LocationCurve;\nlocCurve.set_JoinType(0, JoinType.Miter);"}
{"prompt":"Get the spec ID for thermal gradient coefficient for moisture capacity.","completion":"ForgeTypeId specId = SpecTypeId.ThermalGradientCoefficientForMoistureCapacity;"}
{"prompt":"Comprueba si un conjunto de cables está vacío.","completion":"ElectricalSystem circuit = new FilteredElementCollector(doc).OfClass(typeof(ElectricalSystem)).FirstOrDefault() as ElectricalSystem;\nWireSet wireSet = circuit.WireManager.GetWireSet();\nbool isEmpty = wireSet.IsEmpty;"}
{"prompt":"Get the parameter ID for an internal multiplanar rebar end connector.","completion":"ForgeTypeId paramId = ParameterTypeId.RebarInternalMultiplanarEndConnector;"}
{"prompt":"Obtén el ángulo de los ejes principales de una sección estructural.","completion":"FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nStructuralSection section = (column.Symbol as FamilySymbol).GetStructuralSection();\ndouble angle = section.PrincipalAxesAngle;"}
{"prompt":"Obtén todos los callouts de referencia de una vista.","completion":"View view = doc.ActiveView;\nICollection<ElementId> calloutIds = view.GetReferenceCallouts();"}
{"prompt":"Check if the UI theme follows the system color theme.","completion":"bool followsSystem = UIThemeManager.FollowSystemColorTheme;"}
{"prompt":"Obtén la ayuda contextual de un botón de la cinta de opciones.","completion":"PushButtonData buttonData = new PushButtonData(\"MyButton\", \"Button Text\", Assembly.GetExecutingAssembly().Location, \"Namespace.ClassName\");\nContextualHelp help = buttonData.GetContextualHelp();"}

{"prompt":"Obtén el ID de parámetro para la Carga Aparente en la Fase 3.","completion":"ForgeTypeId paramId = ParameterTypeId.RbsElecApparentLoadPhase3;"}
{"prompt":"Get the unit ID for pounds-mass per pound-degree Fahrenheit.","completion":"ForgeTypeId unitId = UnitTypeId.PoundsMassPerPoundDegreeFahrenheit;"}
{"prompt":"Obtén un filtro de elementos a partir de una regla del asesor de rendimiento.","completion":"PerformanceAdviser adviser = PerformanceAdviser.GetPerformanceAdviser();\nPerformanceAdviserRuleId ruleId = adviser.GetAllRuleIds().First();\nElementFilter filter = adviser.GetElementFilterFromRule(ruleId, doc);"}
{"prompt":"Get the group ID for geometry positioning.","completion":"ForgeTypeId groupId = GroupTypeId.GeometryPositioning;"}
{"prompt":"Obtén el equipo base de un sistema MEP.","completion":"MEPSystem system = new FilteredElementCollector(doc).OfClass(typeof(MEPSystem)).FirstOrDefault() as MEPSystem;\nFamilyInstance baseEquipment = system.BaseEquipment;"}
{"prompt":"Create a new instance of ParameterDownloadOptions.","completion":"ParameterDownloadOptions options = new ParameterDownloadOptions();"}
{"prompt":"Elimina un espacio de un conjunto de espacios.","completion":"SpaceSet spaceSet = new SpaceSet();\nSpace space = new FilteredElementCollector(doc).OfClass(typeof(Space)).FirstOrDefault() as Space;\nspaceSet.Insert(space);\nspaceSet.Erase(space);"}
{"prompt":"Get the total depth of a monolithic stairs run type.","completion":"StairsRunType runType = new FilteredElementCollector(doc).OfClass(typeof(StairsRunType)).FirstOrDefault(rt => rt.IsMonolithic) as StairsRunType;\ndouble depth = runType.TotalDepth;"}
{"prompt":"Obtén la descripción de una regla del asesor de rendimiento.","completion":"PerformanceAdviser adviser = PerformanceAdviser.GetPerformanceAdviser();\nstring description = adviser.GetRuleDescription(0);"}
{"prompt":"Get the number of reference arrays in a reference array array.","completion":"ReferenceArrayArray refArrayArray = new ReferenceArrayArray();\nint count = refArrayArray.Size;"}
{"prompt":"Aplica una transformación a una malla.","completion":"Mesh mesh = someSolid.Faces.get_Item(0).Triangulate();\nTransform transform = Transform.CreateRotation(XYZ.BasisZ, Math.PI / 4);\nMesh transformedMesh = mesh.get_Transformed(transform);"}
{"prompt":"Obtén las coordenadas mínimas y máximas de una caja de selección.","completion":"UIDocument uidoc = new UIDocument(doc);\nPickedBox pickedBox = uidoc.Selection.PickBox(PickBoxStyle.Enclosing, \"Select elements\");\nXYZ min = pickedBox.Min;\nXYZ max = pickedBox.Max;"}
{"prompt":"Set the rule string for a filter string rule.","completion":"ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.ALL_MODEL_MARK));\nFilterStringRule rule = new FilterStringRule(pvp, new FilterStringEquals(), \"A\", false);\nrule.RuleString = \"B\";"}
{"prompt":"Obtén el ID de la unidad para milivoltios.","completion":"ForgeTypeId unitId = UnitTypeId.Millivolts;"}
{"prompt":"Get the GroupTypeId for General.","completion":"ForgeTypeId groupId = GroupTypeId.General;"}
{"prompt":"Obtén el Id de la falla que ocurre cuando falla la actualización de una cadena de curvas.","completion":"FailureDefinitionId failureId = BuiltInFailures.GeometryFailures.FailedUpdateCurveChain;"}
{"prompt":"Get the parameter type ID for a condenser water loop.","completion":"ForgeTypeId paramId = ParameterTypeId.MepCondenserWaterLoop;"}
{"prompt":"Obtén el Id de la falla que ocurre cuando el perfil de una barandilla es inválido.","completion":"FailureDefinitionId failureId = BuiltInFailures.StairRampFailures.BadRailProfile;"}
{"prompt":"Get the start point of a curve.","completion":"Line line = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\nXYZ startPoint = line.GetEndPoint(0);"}
{"prompt":"Obtén el ID de parámetro para la relación de la correa V de una rejilla de muro cortina.","completion":"ForgeTypeId paramId = ParameterTypeId.CurtaingridBeltRatioV;"}
{"prompt":"Get the SpecTypeId for Weight.","completion":"ForgeTypeId specId = SpecTypeId.Weight;"}
{"prompt":"Obtén el Id de la falla que ocurre cuando un relleno de acristalamiento inclinado no es permitido.","completion":"FailureDefinitionId failureId = BuiltInFailures.InfillFailures.InfillNoSlopeGlazing;"}
{"prompt":"Get the property name for the tint toggle of a hardwood asset.","completion":"string tintToggleProp = Hardwood.CommonTintToggle;"}
{"prompt":"Compara dos transformaciones 1D para ver si son casi iguales.","completion":"Transform1D t1 = new Transform1D(1, 0.5);\nTransform1D t2 = new Transform1D(1, 0.5000000001);\nbool areAlmostEqual = t1.AlmostEqual(t2);"}
{"prompt":"Get the parameter ID for a sketch plane.","completion":"ForgeTypeId paramId = ParameterTypeId.SketchPlaneParam;"}
{"prompt":"Comprueba si un nivel puede ser conectado a una escalera de varios pisos.","completion":"MultistoryStairs multiStairs = new FilteredElementCollector(doc).OfClass(typeof(MultistoryStairs)).FirstOrDefault() as MultistoryStairs;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nbool canConnect = multiStairs.CanConnectLevel(level.Id);"}
{"prompt":"Get the failure ID for when a toposolid's slope exceeds the threshold.","completion":"FailureDefinitionId failureId = BuiltInFailures.SiteFailures.ToposolidSlopeExceedsThreshold;"}
{"prompt":"Obtén el Id de la falla para una cota con unidad de longitud común.","completion":"FailureDefinitionId failureId = BuiltInFailures.RebarShapeFailures.DimensionWithCommonLengthUnit;"}
{"prompt":"Get the parameter ID for sliver space tolerance in energy analysis.","completion":"ForgeTypeId paramId = ParameterTypeId.RbsEnergyAnalysisSliverSpaceTolerance;"}
{"prompt":"Crea un contorno a partir de dos puntos.","completion":"Outline outline = new Outline(new XYZ(0,0,0), new XYZ(10,10,10));"}
{"prompt":"Get the failure ID for when a wall cannot be updated.","completion":"FailureDefinitionId failureId = BuiltInFailures.CreationFailures.CannotUpdateWall;"}
{"prompt":"Comprueba si los metros son una unidad válida para la especificación de longitud.","completion":"bool isValid = UnitUtils.IsValidUnit(SpecTypeId.Length, UnitTypeId.Meters);"}
{"prompt":"Obtén un iterador inverso para un conjunto de factores de corrección.","completion":"CorrectionFactorSet cfSet = new CorrectionFactorSet();\nCorrectionFactorSetIterator iterator = cfSet.ReverseIterator();"}
{"prompt":"Duplica un tipo de cable existente.","completion":"WireType wireType = new FilteredElementCollector(doc).OfClass(typeof(WireType)).FirstOrDefault() as WireType;\nWireType newWireType = wireType.Duplicate(\"New Wire Type\") as WireType;"}
{"prompt":"Get the parameter ID for a continuous rail end termination attachment.","completion":"ForgeTypeId paramId = ParameterTypeId.ContinuousrailEndTerminationAttachmentParam;"}
{"prompt":"Establece el desfase de un tramo de barandilla no continuo.","completion":"Railing rail = new FilteredElementCollector(doc).OfClass(typeof(Railing)).FirstOrDefault() as Railing;\nNonContinuousRailInfo railInfo = rail.GetNonContinuousRailInfos().FirstOrDefault();\nrailInfo.Offset = 0.1;"}
{"prompt":"Set the line style for a Path of Travel element.","completion":"PathOfTravel pot = new FilteredElementCollector(doc).OfClass(typeof(PathOfTravel)).FirstOrDefault() as PathOfTravel;\nGraphicsStyle lineStyle = new FilteredElementCollector(doc).OfClass(typeof(GraphicsStyle)).FirstOrDefault() as GraphicsStyle;\npot.LineStyle = lineStyle.Id;"}
{"prompt":"Comprueba si una propiedad de un activo de apariencia es de solo lectura.","completion":"AppearanceAssetElement assetElem = new FilteredElementCollector(doc).OfClass(typeof(AppearanceAssetElement)).FirstOrDefault() as AppearanceAssetElement;\nusing (AppearanceAssetEditScope scope = new AppearanceAssetEditScope(assetElem.Document))\n{\n    Asset asset = scope.Start(assetElem.Id);\n    AssetProperty prop = asset.GetFirst();\n    bool isReadOnly = prop.IsReadOnly;\n    scope.Cancel();\n}"}
{"prompt":"Obtén la acción de doble clic para editar un tipo de familia.","completion":"DoubleClickOptions options = DoubleClickOptions.GetDoubleClickOptions();\nDoubleClickAction action = options.GetAction(DoubleClickTarget.FamilyType);"}
{"prompt":"Obtén el área de un bucle de curvas.","completion":"CurveLoop loop = new CurveLoop();\n// ... add curves to loop ...\nHostObjectSubcomponentInfo subInfo = new HostObjectSubcomponentInfo(loop);\ndouble area = subInfo.AreaOfCurveLoop;"}
{"prompt":"Crea nuevas opciones de recarga desde el central.","completion":"ReloadLatestOptions options = new ReloadLatestOptions();"}
{"prompt":"Obtén el Id de la falla que ocurre cuando un extremo de una viga de celosía no está unido.","completion":"FailureDefinitionId failureId = BuiltInFailures.TrussFailures.TrussNotJoinedWebs;"}
{"prompt":"Crea una nueva línea de rejilla radial.","completion":"Arc arc = Arc.Create(XYZ.Zero, 5, 0, Math.PI, XYZ.BasisX, XYZ.BasisY);\nGrid.Create(doc, arc);"}
{"prompt":"Establece el color emisivo de un efecto de DirectContext3D.","completion":"EffectInstance effect = new EffectInstance();\neffect.SetEmissiveColor(new Color(255, 0, 0));"}
{"prompt":"Check if a SAT export options object is valid.","completion":"SATExportOptions options = new SATExportOptions();\nbool isValid = options.IsValidObject;"}
{"prompt":"Cambia el tipo de junta de un muro en su extremo inicial.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nLocationCurve locCurve = wall.Location as LocationCurve;\nlocCurve.set_JoinType(0, JoinType.Miter);"}
{"prompt":"Get the spec ID for thermal gradient coefficient for moisture capacity.","completion":"ForgeTypeId specId = SpecTypeId.ThermalGradientCoefficientForMoistureCapacity;"}
{"prompt":"Comprueba si un conjunto de cables está vacío.","completion":"ElectricalSystem circuit = new FilteredElementCollector(doc).OfClass(typeof(ElectricalSystem)).FirstOrDefault() as ElectricalSystem;\nWireSet wireSet = circuit.WireManager.GetWireSet();\nbool isEmpty = wireSet.IsEmpty;"}
{"prompt":"Get the parameter ID for an internal multiplanar rebar end connector.","completion":"ForgeTypeId paramId = ParameterTypeId.RebarInternalMultiplanarEndConnector;"}
{"prompt":"Obtén el ángulo de los ejes principales de una sección estructural.","completion":"FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nStructuralSection section = (column.Symbol as FamilySymbol).GetStructuralSection();\ndouble angle = section.PrincipalAxesAngle;"}
{"prompt":"Obtén todos los callouts de referencia de una vista.","completion":"View view = doc.ActiveView;\nICollection<ElementId> calloutIds = view.GetReferenceCallouts();"}
{"prompt":"Check if the UI theme follows the system color theme.","completion":"bool followsSystem = UIThemeManager.FollowSystemColorTheme;"}
{"prompt":"Obtén la ayuda contextual de un botón de la cinta de opciones.","completion":"PushButtonData buttonData = new PushButtonData(\"MyButton\", \"Button Text\", Assembly.GetExecutingAssembly().Location, \"Namespace.ClassName\");\nContextualHelp help = buttonData.GetContextualHelp();"}

{"prompt":"Obtén el número de dimensiones de un objeto RepeaterCoordinates.","completion":"RepeaterCoordinates coords = repeater.GetCoordinates(0);\nint dimCount = coords.DimensionCount;"}
{"prompt":"Get the linked element ID from a LinkElementId object.","completion":"LinkElementId linkId = new LinkElementId(someRevitLinkInstance.Id, someLinkedElement.Id);\nElementId linkedElementId = linkId.LinkedElementId;"}
{"prompt":"Obtén el tipo de pliegue de una forma de losa.","completion":"SlabShapeEditor editor = someFloor.SlabShapeEditor;\nSlabShapeCrease crease = editor.SlabShapeCreases.get_Item(0);\nSlabShapeCreaseType type = crease.CreaseType;"}
{"prompt":"Recarga un tipo de vínculo CAD desde su ruta de archivo.","completion":"CADLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(CADLinkType)).FirstOrDefault() as CADLinkType;\nlinkType.Reload();"}
{"prompt":"Create a new preset initial color object.","completion":"PresetInitialColor presetColor = new PresetInitialColor(ColorPreset.Halogen);"}
{"prompt":"Obtén el Id de parámetro para el modelo de energía.","completion":"ForgeTypeId paramId = ParameterTypeId.EnergyAnalysisCreateAnalyticalModel;"}
{"prompt":"Crea una ruta de recorrido entre dos puntos.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nXYZ startPoint = new XYZ(0, 0, 0);\nXYZ endPoint = new XYZ(20, 10, 0);\nPathOfTravel.Create(planView, startPoint, endPoint);"}
{"prompt":"Get the parameter ID for 'Is Reporting'.","completion":"ForgeTypeId paramId = ParameterTypeId.DimIsreporting;"}
{"prompt":"Establece el nombre del patrón de relleno original para una clave de exportación.","completion":"ExportPatternKey key = new ExportPatternKey(\"Solid fill\");\nkey.OriginalFillPatternName = \"Solid Fill Pattern\";"}
{"prompt":"Obtén el ID de parámetro para el diámetro equivalente de un ducto.","completion":"ForgeTypeId paramId = ParameterTypeId.RbsEqDiameterParam;"}
{"prompt":"Get the fillet radius of a continuous rail type.","completion":"TopRailType railType = new FilteredElementCollector(doc).OfClass(typeof(TopRailType)).FirstOrDefault() as TopRailType;\ndouble radius = railType.FilletRadius;"}
{"prompt":"Muestra un panel acoplable.","completion":"DockablePaneId paneId = new DockablePaneId(new Guid(\"YOUR_GUID_HERE\"));\nDockablePane pane = uiApplication.GetDockablePane(paneId);\npane.Show();"}
{"prompt":"Obtén el ID de especificación para eficacia.","completion":"ForgeTypeId specId = SpecTypeId.Efficacy;"}
{"prompt":"Get the area of a specific material on an element, including paint.","completion":"Element elem = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault();\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault() as Material;\ndouble area = elem.GetMaterialArea(material.Id, true);"}
{"prompt":"Obtén el número de puntos en una topología de polimalla.","completion":"PolymeshTopology polymesh = someSolid.GetPolymesh();\nint numPoints = polymesh.NumberOfPoints;"}
{"prompt":"Get the parameter ID for a wall's tapered interior angle.","completion":"ForgeTypeId paramId = ParameterTypeId.WallTaperedInteriorInwardAngle;"}
{"prompt":"Bloquea o desbloquea un conector de cuerpo de fabricación.","completion":"FabricationPart part = new FilteredElementCollector(doc).OfClass(typeof(FabricationPart)).FirstOrDefault() as FabricationPart;\nFabricationConnectorInfo connInfo = part.GetConnectorInfo(0);\nconnInfo.IsBodyConnectorLocked = true;"}
{"prompt":"Get the short description of a fabrication part.","completion":"FabricationPart part = new FilteredElementCollector(doc).OfClass(typeof(FabricationPart)).FirstOrDefault() as FabricationPart;\nstring description = part.ProductShortDescription;"}
{"prompt":"Obtén el nombre de propiedad para el color de un activo de concreto.","completion":"string colorProp = Concrete.ConcreteColor;"}
{"prompt":"Elimina un segmento de una línea de rejilla de muro cortina.","completion":"CurtainGridLine gridLine = someCurtainGrid.GetUGridLineIds().Select(id => doc.GetElement(id) as CurtainGridLine).FirstOrDefault();\nCurve segmentToRemove = gridLine.GetSegmentCurves().FirstOrDefault();\ngridLine.RemoveSegment(segmentToRemove);"}
{"prompt":"Get the unit ID for nanograms per pascal second square meter.","completion":"ForgeTypeId unitId = SymbolTypeId.NgPerPaSMSup2;"}
{"prompt":"Obtén el valor de un segmento de cota como una cadena.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a dimension\");\nDimension dim = doc.GetElement(pickedRef) as Dimension;\nDimensionSegment segment = dim.Segments.get_Item(0);\nstring valueString = segment.ValueString;"}
{"prompt":"Create a new instance of TableMergedCell.","completion":"TableMergedCell mergedCell = new TableMergedCell(0, 0, 1, 1);"}
{"prompt":"Obtén el nombre de la etiqueta de un parámetro global.","completion":"GlobalParameter gp = GlobalParametersManager.GetAllGlobalParameters(doc).FirstOrDefault();\nstring labelName = gp.GetLabelName();"}
{"prompt":"Get the current item from a SpaceSetIterator.","completion":"SpaceSet spaceSet = new SpaceSet();\n//... add spaces ...\nSpaceSetIterator iterator = spaceSet.ForwardIterator();\niterator.MoveNext();\nSpace currentSpace = iterator.Current as Space;"}
{"prompt":"Establece el sufijo de tamaño para ductos ovales.","completion":"DuctSettings settings = DuctSettings.GetDuctSettings(doc);\nsettings.OvalDuctSizeSuffix = \"-OV\";"}
{"prompt":"Get the parameter ID for the building operating schedule.","completion":"ForgeTypeId paramId = ParameterTypeId.EnergyAnalysisBuildingOperatingSchedule;"}
{"prompt":"Obtén el Id de la falla que ocurre cuando no se pueden crear filetes en una barra de refuerzo.","completion":"FailureDefinitionId failureId = BuiltInFailures.RebarFailures.CantMakeFillets;"}
{"prompt":"Get the building type for the energy data settings.","completion":"EnergyDataSettings settings = EnergyDataSettings.GetFromDocument(doc);\nElementId buildingTypeId = settings.BuildingTypeId;"}
{"prompt":"Obtén el Id de la falla para una resolución de espacio fuera de rango en análisis de energía.","completion":"FailureDefinitionId failureId = BuiltInFailures.EnergyAnalysisFailures.SpaceResolutionOutOfRange;"}
{"prompt":"Get the reinforcement rounding manager for a rebar bar type.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nReinforcementRoundingManager roundingManager = barType.GetReinforcementRoundingManager();"}
{"prompt":"Obtén el ID del muro anfitrión de una cimentación de muro.","completion":"WallFoundation wallFoundation = new FilteredElementCollector(doc).OfClass(typeof(WallFoundation)).FirstOrDefault() as WallFoundation;\nElementId hostWallId = wallFoundation.WallId;"}
{"prompt":"Get the property name for tile brick color from a visual asset.","completion":"string propName = Tile.TileBrickColor;"}
{"prompt":"Obtén un tipo de carga de un colector de elementos.","completion":"LoadTypeBase loadType = new FilteredElementCollector(doc).OfClass(typeof(LoadTypeBase)).FirstOrDefault() as LoadTypeBase;"}
{"prompt":"Get the parameter ID for the number of elements in an electrical circuit.","completion":"ForgeTypeId paramId = ParameterTypeId.RbsElecCircuitNumberOfElementsParam;"}
{"prompt":"Obtén el nombre de la propiedad para el color de tinte de un activo de cerámica.","completion":"string propName = Ceramic.CommonTintColor;"}
{"prompt":"Get the unit symbol for pound-force feet per foot.","completion":"ForgeTypeId symbol = SymbolTypeId.LbForceDashFtPerFt;"}
{"prompt":"Obtén el valor de un parámetro entero.","completion":"IntegerParameterValue intValue = new IntegerParameterValue(10);\nint value = intValue.Value;"}
{"prompt":"Get the status of a Revit API post-event.","completion":"RevitAPIEventStatus status = somePostEventArgs.Status;"}
{"prompt":"Subraya todo el texto en un objeto FormattedText.","completion":"FormattedText formattedText = new FormattedText(\"Hello World\");\nformattedText.SetUnderlineStatus(true);"}
{"prompt":"Check if a macro module exists in the macro manager.","completion":"MacroManager manager = doc.Application.MacroManager;\nMacroModule module = manager.get_Item(\"MyModule\");\nbool contains = manager.Contains(module);"}
{"prompt":"Obtén el ID del parámetro para la inversión del perfil del divisor del fabricante de piezas.","completion":"ForgeTypeId paramId = ParameterTypeId.PartMakerSplitterProfileFlipAlong;"}
{"prompt":"Create a transform for a rotation around the Z-axis.","completion":"Transform rotation = Transform.CreateRotation(XYZ.BasisZ, Math.PI / 2);"}
{"prompt":"Obtén el Id de la falla que ocurre cuando no se puede pegar en una vista.","completion":"FailureDefinitionId failureId = BuiltInFailures.CopyPasteFailures.CannotPasteInViewError;"}
{"prompt":"Aplica una transformación a un bucle de curvas.","completion":"CurveLoop loop = new CurveLoop();\n//... add curves ...\nTransform transform = Transform.CreateTranslation(new XYZ(5,0,0));\nloop.Transform(transform);"}
{"prompt":"Get the lateral offset of a secondary handrail from a railing type.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\ndouble offset = railingType.SecondaryHandrailLateralOffset;"}
{"prompt":"Obtén el ID de parámetro para los tipos de barandal superior de un sistema de barandillas.","completion":"ForgeTypeId paramId = ParameterTypeId.RailingSystemTopRailTypesParam;"}
{"prompt":"Check if an updater is registered in the current document.","completion":"UpdaterId updaterId = new UpdaterId(new AddInId(new Guid(\"YOUR_ADDIN_ID\")), new Guid(\"YOUR_UPDATER_ID\"));\nbool isRegistered = UpdaterRegistry.IsUpdaterRegistered(updaterId, doc);"}
{"prompt":"Establece la descripción para un esquema de resultado de análisis.","completion":"AnalysisResultSchema schema = new AnalysisResultSchema(\"My Schema\", \"My Analysis Results\");\nschema.Description = \"Detailed results of the structural analysis.\";"}
{"prompt":"Obtén los vértices de una forma de losa.","completion":"SlabShapeEditor editor = someFloor.SlabShapeEditor;\nSlabShapeVertexArray vertices = editor.SlabShapeVertices;"}
{"prompt":"Get the insulation type of a wire type.","completion":"WireType wireType = new FilteredElementCollector(doc).OfClass(typeof(WireType)).FirstOrDefault() as WireType;\nElementId insulationTypeId = wireType.Insulation;"}
{"prompt":"Establece la densidad de un activo térmico.","completion":"ThermalAsset asset = new ThermalAsset(\"MyAsset\", ThermalMaterialType.Gas);\nasset.Density = 1.225; // in kg/m³"}
{"prompt":"Get the failure ID for when a split sketch does not overlap the boundary.","completion":"FailureDefinitionId failureId = BuiltInFailures.SketchFailures.BoundaryNoOverlap;"}
{"prompt":"Obtén la causa de un cambio de servidor externo.","completion":"ServerChangeCause cause = someServerChangedEventArgs.GetCause();"}
{"prompt":"Get the IDs of the fabrication part types used in the current solution.","completion":"ISet<ElementId> partTypeIds = e.GetCurrentSolutionPartTypeIds();"}
{"prompt":"Obtén la información de un patrón de exportación a partir de su clave.","completion":"ExportPatternTable table = new ExportPatternTable();\nExportPatternKey key = new ExportPatternKey(\"Solid fill\");\nExportPatternInfo info = table[key];"}
{"prompt":"Get an enumerator for a set of duct sizes.","completion":"DuctSizes sizes = new DuctSizes();\nIEnumerator<MEPSize> enumerator = sizes.GetEnumerator();"}
{"prompt":"Obtén el ID del parámetro para el subrayado del estilo de título.","completion":"ForgeTypeId paramId = ParameterTypeId.TitleStyleUnderline;"}
{"prompt":"Check if a wire type is currently in use.","completion":"WireType wireType = new FilteredElementCollector(doc).OfClass(typeof(WireType)).FirstOrDefault() as WireType;\nbool inUse = wireType.IsInUse;"}
{"prompt":"Obtén la referencia al plano XY de un punto de referencia.","completion":"ReferencePoint refPoint = new FilteredElementCollector(doc).OfClass(typeof(ReferencePoint)).FirstOrDefault() as ReferencePoint;\nReference planeRef = refPoint.GetCoordinatePlaneReferenceXY();"}
{"prompt":"Appends shape built by a ShapeBuilder to a DirectShape.","completion":"DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\nTessellatedShapeBuilder builder = new TessellatedShapeBuilder();\n//... build shape ...\nds.AppendShape(builder);"}
{"prompt":"Obtén el incremento de elevación de un elemento de configuración de contorno.","completion":"ContourSettingItem item = new ContourSettingItem();\ndouble step = item.Step;"}

{"prompt":"Obtén el número de dimensiones de un objeto RepeaterCoordinates.","completion":"RepeaterCoordinates coords = repeater.GetCoordinates(0);\nint dimCount = coords.DimensionCount;"}
{"prompt":"Get the linked element ID from a LinkElementId object.","completion":"LinkElementId linkId = new LinkElementId(someRevitLinkInstance.Id, someLinkedElement.Id);\nElementId linkedElementId = linkId.LinkedElementId;"}
{"prompt":"Obtén el tipo de pliegue de una forma de losa.","completion":"SlabShapeEditor editor = someFloor.SlabShapeEditor;\nSlabShapeCrease crease = editor.SlabShapeCreases.get_Item(0);\nSlabShapeCreaseType type = crease.CreaseType;"}
{"prompt":"Recarga un tipo de vínculo CAD desde su ruta de archivo.","completion":"CADLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(CADLinkType)).FirstOrDefault() as CADLinkType;\nlinkType.Reload();"}
{"prompt":"Create a new preset initial color object.","completion":"PresetInitialColor presetColor = new PresetInitialColor(ColorPreset.Halogen);"}
{"prompt":"Obtén el Id de parámetro para el modelo de energía.","completion":"ForgeTypeId paramId = ParameterTypeId.EnergyAnalysisCreateAnalyticalModel;"}
{"prompt":"Crea una ruta de recorrido entre dos puntos.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nXYZ startPoint = new XYZ(0, 0, 0);\nXYZ endPoint = new XYZ(20, 10, 0);\nPathOfTravel.Create(planView, startPoint, endPoint);"}
{"prompt":"Get the parameter ID for 'Is Reporting'.","completion":"ForgeTypeId paramId = ParameterTypeId.DimIsreporting;"}
{"prompt":"Establece el nombre del patrón de relleno original para una clave de exportación.","completion":"ExportPatternKey key = new ExportPatternKey(\"Solid fill\");\nkey.OriginalFillPatternName = \"Solid Fill Pattern\";"}
{"prompt":"Obtén el ID de parámetro para el diámetro equivalente de un ducto.","completion":"ForgeTypeId paramId = ParameterTypeId.RbsEqDiameterParam;"}
{"prompt":"Get the fillet radius of a continuous rail type.","completion":"TopRailType railType = new FilteredElementCollector(doc).OfClass(typeof(TopRailType)).FirstOrDefault() as TopRailType;\ndouble radius = railType.FilletRadius;"}
{"prompt":"Muestra un panel acoplable.","completion":"DockablePaneId paneId = new DockablePaneId(new Guid(\"YOUR_GUID_HERE\"));\nDockablePane pane = uiApplication.GetDockablePane(paneId);\npane.Show();"}
{"prompt":"Obtén el ID de especificación para eficacia.","completion":"ForgeTypeId specId = SpecTypeId.Efficacy;"}
{"prompt":"Get the area of a specific material on an element, including paint.","completion":"Element elem = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault();\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault() as Material;\ndouble area = elem.GetMaterialArea(material.Id, true);"}
{"prompt":"Obtén el número de puntos en una topología de polimalla.","completion":"PolymeshTopology polymesh = someSolid.GetPolymesh();\nint numPoints = polymesh.NumberOfPoints;"}
{"prompt":"Get the parameter ID for a wall's tapered interior angle.","completion":"ForgeTypeId paramId = ParameterTypeId.WallTaperedInteriorInwardAngle;"}
{"prompt":"Bloquea o desbloquea un conector de cuerpo de fabricación.","completion":"FabricationPart part = new FilteredElementCollector(doc).OfClass(typeof(FabricationPart)).FirstOrDefault() as FabricationPart;\nFabricationConnectorInfo connInfo = part.GetConnectorInfo(0);\nconnInfo.IsBodyConnectorLocked = true;"}
{"prompt":"Get the short description of a fabrication part.","completion":"FabricationPart part = new FilteredElementCollector(doc).OfClass(typeof(FabricationPart)).FirstOrDefault() as FabricationPart;\nstring description = part.ProductShortDescription;"}
{"prompt":"Obtén el nombre de propiedad para el color de un activo de concreto.","completion":"string colorProp = Concrete.ConcreteColor;"}
{"prompt":"Elimina un segmento de una línea de rejilla de muro cortina.","completion":"CurtainGridLine gridLine = someCurtainGrid.GetUGridLineIds().Select(id => doc.GetElement(id) as CurtainGridLine).FirstOrDefault();\nCurve segmentToRemove = gridLine.GetSegmentCurves().FirstOrDefault();\ngridLine.RemoveSegment(segmentToRemove);"}
{"prompt":"Get the unit ID for nanograms per pascal second square meter.","completion":"ForgeTypeId unitId = SymbolTypeId.NgPerPaSMSup2;"}
{"prompt":"Obtén el valor de un segmento de cota como una cadena.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a dimension\");\nDimension dim = doc.GetElement(pickedRef) as Dimension;\nDimensionSegment segment = dim.Segments.get_Item(0);\nstring valueString = segment.ValueString;"}
{"prompt":"Create a new instance of TableMergedCell.","completion":"TableMergedCell mergedCell = new TableMergedCell(0, 0, 1, 1);"}
{"prompt":"Obtén el nombre de la etiqueta de un parámetro global.","completion":"GlobalParameter gp = GlobalParametersManager.GetAllGlobalParameters(doc).FirstOrDefault();\nstring labelName = gp.GetLabelName();"}
{"prompt":"Get the current item from a SpaceSetIterator.","completion":"SpaceSet spaceSet = new SpaceSet();\n//... add spaces ...\nSpaceSetIterator iterator = spaceSet.ForwardIterator();\niterator.MoveNext();\nSpace currentSpace = iterator.Current as Space;"}
{"prompt":"Establece el sufijo de tamaño para ductos ovales.","completion":"DuctSettings settings = DuctSettings.GetDuctSettings(doc);\nsettings.OvalDuctSizeSuffix = \"-OV\";"}
{"prompt":"Get the parameter ID for the building operating schedule.","completion":"ForgeTypeId paramId = ParameterTypeId.EnergyAnalysisBuildingOperatingSchedule;"}
{"prompt":"Obtén el Id de la falla que ocurre cuando no se pueden crear filetes en una barra de refuerzo.","completion":"FailureDefinitionId failureId = BuiltInFailures.RebarFailures.CantMakeFillets;"}
{"prompt":"Get the building type for the energy data settings.","completion":"EnergyDataSettings settings = EnergyDataSettings.GetFromDocument(doc);\nElementId buildingTypeId = settings.BuildingTypeId;"}
{"prompt":"Obtén el Id de la falla para una resolución de espacio fuera de rango en análisis de energía.","completion":"FailureDefinitionId failureId = BuiltInFailures.EnergyAnalysisFailures.SpaceResolutionOutOfRange;"}
{"prompt":"Get the reinforcement rounding manager for a rebar bar type.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nReinforcementRoundingManager roundingManager = barType.GetReinforcementRoundingManager();"}
{"prompt":"Obtén el ID del muro anfitrión de una cimentación de muro.","completion":"WallFoundation wallFoundation = new FilteredElementCollector(doc).OfClass(typeof(WallFoundation)).FirstOrDefault() as WallFoundation;\nElementId hostWallId = wallFoundation.WallId;"}
{"prompt":"Get the property name for tile brick color from a visual asset.","completion":"string propName = Tile.TileBrickColor;"}
{"prompt":"Obtén un tipo de carga de un colector de elementos.","completion":"LoadTypeBase loadType = new FilteredElementCollector(doc).OfClass(typeof(LoadTypeBase)).FirstOrDefault() as LoadTypeBase;"}
{"prompt":"Get the parameter ID for the number of elements in an electrical circuit.","completion":"ForgeTypeId paramId = ParameterTypeId.RbsElecCircuitNumberOfElementsParam;"}
{"prompt":"Obtén el nombre de la propiedad para el color de tinte de un activo de cerámica.","completion":"string propName = Ceramic.CommonTintColor;"}
{"prompt":"Get the unit symbol for pound-force feet per foot.","completion":"ForgeTypeId symbol = SymbolTypeId.LbForceDashFtPerFt;"}
{"prompt":"Obtén el valor de un parámetro entero.","completion":"IntegerParameterValue intValue = new IntegerParameterValue(10);\nint value = intValue.Value;"}
{"prompt":"Get the status of a Revit API post-event.","completion":"RevitAPIEventStatus status = somePostEventArgs.Status;"}
{"prompt":"Subraya todo el texto en un objeto FormattedText.","completion":"FormattedText formattedText = new FormattedText(\"Hello World\");\nformattedText.SetUnderlineStatus(true);"}
{"prompt":"Check if a macro module exists in the macro manager.","completion":"MacroManager manager = doc.Application.MacroManager;\nMacroModule module = manager.get_Item(\"MyModule\");\nbool contains = manager.Contains(module);"}
{"prompt":"Obtén el ID del parámetro para la inversión del perfil del divisor del fabricante de piezas.","completion":"ForgeTypeId paramId = ParameterTypeId.PartMakerSplitterProfileFlipAlong;"}
{"prompt":"Create a transform for a rotation around the Z-axis.","completion":"Transform rotation = Transform.CreateRotation(XYZ.BasisZ, Math.PI / 2);"}
{"prompt":"Obtén el Id de la falla que ocurre cuando no se puede pegar en una vista.","completion":"FailureDefinitionId failureId = BuiltInFailures.CopyPasteFailures.CannotPasteInViewError;"}
{"prompt":"Aplica una transformación a un bucle de curvas.","completion":"CurveLoop loop = new CurveLoop();\n//... add curves ...\nTransform transform = Transform.CreateTranslation(new XYZ(5,0,0));\nloop.Transform(transform);"}
{"prompt":"Get the lateral offset of a secondary handrail from a railing type.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\ndouble offset = railingType.SecondaryHandrailLateralOffset;"}
{"prompt":"Obtén el ID de parámetro para los tipos de barandal superior de un sistema de barandillas.","completion":"ForgeTypeId paramId = ParameterTypeId.RailingSystemTopRailTypesParam;"}
{"prompt":"Check if an updater is registered in the current document.","completion":"UpdaterId updaterId = new UpdaterId(new AddInId(new Guid(\"YOUR_ADDIN_ID\")), new Guid(\"YOUR_UPDATER_ID\"));\nbool isRegistered = UpdaterRegistry.IsUpdaterRegistered(updaterId, doc);"}
{"prompt":"Establece la descripción para un esquema de resultado de análisis.","completion":"AnalysisResultSchema schema = new AnalysisResultSchema(\"My Schema\", \"My Analysis Results\");\nschema.Description = \"Detailed results of the structural analysis.\";"}
{"prompt":"Obtén los vértices de una forma de losa.","completion":"SlabShapeEditor editor = someFloor.SlabShapeEditor;\nSlabShapeVertexArray vertices = editor.SlabShapeVertices;"}
{"prompt":"Get the insulation type of a wire type.","completion":"WireType wireType = new FilteredElementCollector(doc).OfClass(typeof(WireType)).FirstOrDefault() as WireType;\nElementId insulationTypeId = wireType.Insulation;"}
{"prompt":"Establece la densidad de un activo térmico.","completion":"ThermalAsset asset = new ThermalAsset(\"MyAsset\", ThermalMaterialType.Gas);\nasset.Density = 1.225; // in kg/m³"}
{"prompt":"Get the failure ID for when a split sketch does not overlap the boundary.","completion":"FailureDefinitionId failureId = BuiltInFailures.SketchFailures.BoundaryNoOverlap;"}
{"prompt":"Obtén la causa de un cambio de servidor externo.","completion":"ServerChangeCause cause = someServerChangedEventArgs.GetCause();"}
{"prompt":"Get the IDs of the fabrication part types used in the current solution.","completion":"ISet<ElementId> partTypeIds = e.GetCurrentSolutionPartTypeIds();"}
{"prompt":"Obtén la información de un patrón de exportación a partir de su clave.","completion":"ExportPatternTable table = new ExportPatternTable();\nExportPatternKey key = new ExportPatternKey(\"Solid fill\");\nExportPatternInfo info = table[key];"}
{"prompt":"Get an enumerator for a set of duct sizes.","completion":"DuctSizes sizes = new DuctSizes();\nIEnumerator<MEPSize> enumerator = sizes.GetEnumerator();"}
{"prompt":"Obtén el ID del parámetro para el subrayado del estilo de título.","completion":"ForgeTypeId paramId = ParameterTypeId.TitleStyleUnderline;"}
{"prompt":"Check if a wire type is currently in use.","completion":"WireType wireType = new FilteredElementCollector(doc).OfClass(typeof(WireType)).FirstOrDefault() as WireType;\nbool inUse = wireType.IsInUse;"}
{"prompt":"Obtén la referencia al plano XY de un punto de referencia.","completion":"ReferencePoint refPoint = new FilteredElementCollector(doc).OfClass(typeof(ReferencePoint)).FirstOrDefault() as ReferencePoint;\nReference planeRef = refPoint.GetCoordinatePlaneReferenceXY();"}
{"prompt":"Appends shape built by a ShapeBuilder to a DirectShape.","completion":"DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\nTessellatedShapeBuilder builder = new TessellatedShapeBuilder();\n//... build shape ...\nds.AppendShape(builder);"}
{"prompt":"Obtén el incremento de elevación de un elemento de configuración de contorno.","completion":"ContourSettingItem item = new ContourSettingItem();\ndouble step = item.Step;"}

{"prompt":"Obtén el número de dimensiones de un objeto RepeaterCoordinates.","completion":"RepeaterCoordinates coords = repeater.GetCoordinates(0);\nint dimCount = coords.DimensionCount;"}
{"prompt":"Get the linked element ID from a LinkElementId object.","completion":"LinkElementId linkId = new LinkElementId(someRevitLinkInstance.Id, someLinkedElement.Id);\nElementId linkedElementId = linkId.LinkedElementId;"}
{"prompt":"Obtén el tipo de pliegue de una forma de losa.","completion":"SlabShapeEditor editor = someFloor.SlabShapeEditor;\nSlabShapeCrease crease = editor.SlabShapeCreases.get_Item(0);\nSlabShapeCreaseType type = crease.CreaseType;"}
{"prompt":"Recarga un tipo de vínculo CAD desde su ruta de archivo.","completion":"CADLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(CADLinkType)).FirstOrDefault() as CADLinkType;\nlinkType.Reload();"}
{"prompt":"Create a new preset initial color object.","completion":"PresetInitialColor presetColor = new PresetInitialColor(ColorPreset.Halogen);"}
{"prompt":"Obtén el Id de parámetro para el modelo de energía.","completion":"ForgeTypeId paramId = ParameterTypeId.EnergyAnalysisCreateAnalyticalModel;"}
{"prompt":"Crea una ruta de recorrido entre dos puntos.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nXYZ startPoint = new XYZ(0, 0, 0);\nXYZ endPoint = new XYZ(20, 10, 0);\nPathOfTravel.Create(planView, startPoint, endPoint);"}
{"prompt":"Get the parameter ID for 'Is Reporting'.","completion":"ForgeTypeId paramId = ParameterTypeId.DimIsreporting;"}
{"prompt":"Establece el nombre del patrón de relleno original para una clave de exportación.","completion":"ExportPatternKey key = new ExportPatternKey(\"Solid fill\");\nkey.OriginalFillPatternName = \"Solid Fill Pattern\";"}
{"prompt":"Obtén el ID de parámetro para el diámetro equivalente de un ducto.","completion":"ForgeTypeId paramId = ParameterTypeId.RbsEqDiameterParam;"}
{"prompt":"Get the fillet radius of a continuous rail type.","completion":"TopRailType railType = new FilteredElementCollector(doc).OfClass(typeof(TopRailType)).FirstOrDefault() as TopRailType;\ndouble radius = railType.FilletRadius;"}
{"prompt":"Muestra un panel acoplable.","completion":"DockablePaneId paneId = new DockablePaneId(new Guid(\"YOUR_GUID_HERE\"));\nDockablePane pane = uiApplication.GetDockablePane(paneId);\npane.Show();"}
{"prompt":"Obtén el ID de especificación para eficacia.","completion":"ForgeTypeId specId = SpecTypeId.Efficacy;"}
{"prompt":"Get the area of a specific material on an element, including paint.","completion":"Element elem = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault();\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault() as Material;\ndouble area = elem.GetMaterialArea(material.Id, true);"}
{"prompt":"Obtén el número de puntos en una topología de polimalla.","completion":"PolymeshTopology polymesh = someSolid.GetPolymesh();\nint numPoints = polymesh.NumberOfPoints;"}
{"prompt":"Get the parameter ID for a wall's tapered interior angle.","completion":"ForgeTypeId paramId = ParameterTypeId.WallTaperedInteriorInwardAngle;"}
{"prompt":"Bloquea o desbloquea un conector de cuerpo de fabricación.","completion":"FabricationPart part = new FilteredElementCollector(doc).OfClass(typeof(FabricationPart)).FirstOrDefault() as FabricationPart;\nFabricationConnectorInfo connInfo = part.GetConnectorInfo(0);\nconnInfo.IsBodyConnectorLocked = true;"}
{"prompt":"Get the short description of a fabrication part.","completion":"FabricationPart part = new FilteredElementCollector(doc).OfClass(typeof(FabricationPart)).FirstOrDefault() as FabricationPart;\nstring description = part.ProductShortDescription;"}
{"prompt":"Obtén el nombre de propiedad para el color de un activo de concreto.","completion":"string colorProp = Concrete.ConcreteColor;"}
{"prompt":"Elimina un segmento de una línea de rejilla de muro cortina.","completion":"CurtainGridLine gridLine = someCurtainGrid.GetUGridLineIds().Select(id => doc.GetElement(id) as CurtainGridLine).FirstOrDefault();\nCurve segmentToRemove = gridLine.GetSegmentCurves().FirstOrDefault();\ngridLine.RemoveSegment(segmentToRemove);"}
{"prompt":"Get the unit ID for nanograms per pascal second square meter.","completion":"ForgeTypeId unitId = SymbolTypeId.NgPerPaSMSup2;"}
{"prompt":"Obtén el valor de un segmento de cota como una cadena.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a dimension\");\nDimension dim = doc.GetElement(pickedRef) as Dimension;\nDimensionSegment segment = dim.Segments.get_Item(0);\nstring valueString = segment.ValueString;"}
{"prompt":"Create a new instance of TableMergedCell.","completion":"TableMergedCell mergedCell = new TableMergedCell(0, 0, 1, 1);"}
{"prompt":"Obtén el nombre de la etiqueta de un parámetro global.","completion":"GlobalParameter gp = GlobalParametersManager.GetAllGlobalParameters(doc).FirstOrDefault();\nstring labelName = gp.GetLabelName();"}
{"prompt":"Get the current item from a SpaceSetIterator.","completion":"SpaceSet spaceSet = new SpaceSet();\n//... add spaces ...\nSpaceSetIterator iterator = spaceSet.ForwardIterator();\niterator.MoveNext();\nSpace currentSpace = iterator.Current as Space;"}
{"prompt":"Establece el sufijo de tamaño para ductos ovales.","completion":"DuctSettings settings = DuctSettings.GetDuctSettings(doc);\nsettings.OvalDuctSizeSuffix = \"-OV\";"}
{"prompt":"Get the parameter ID for the building operating schedule.","completion":"ForgeTypeId paramId = ParameterTypeId.EnergyAnalysisBuildingOperatingSchedule;"}
{"prompt":"Obtén el Id de la falla que ocurre cuando no se pueden crear filetes en una barra de refuerzo.","completion":"FailureDefinitionId failureId = BuiltInFailures.RebarFailures.CantMakeFillets;"}
{"prompt":"Get the building type for the energy data settings.","completion":"EnergyDataSettings settings = EnergyDataSettings.GetFromDocument(doc);\nElementId buildingTypeId = settings.BuildingTypeId;"}
{"prompt":"Obtén el Id de la falla para una resolución de espacio fuera de rango en análisis de energía.","completion":"FailureDefinitionId failureId = BuiltInFailures.EnergyAnalysisFailures.SpaceResolutionOutOfRange;"}
{"prompt":"Get the reinforcement rounding manager for a rebar bar type.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nReinforcementRoundingManager roundingManager = barType.GetReinforcementRoundingManager();"}
{"prompt":"Obtén el ID del muro anfitrión de una cimentación de muro.","completion":"WallFoundation wallFoundation = new FilteredElementCollector(doc).OfClass(typeof(WallFoundation)).FirstOrDefault() as WallFoundation;\nElementId hostWallId = wallFoundation.WallId;"}
{"prompt":"Get the property name for tile brick color from a visual asset.","completion":"string propName = Tile.TileBrickColor;"}
{"prompt":"Obtén un tipo de carga de un colector de elementos.","completion":"LoadTypeBase loadType = new FilteredElementCollector(doc).OfClass(typeof(LoadTypeBase)).FirstOrDefault() as LoadTypeBase;"}
{"prompt":"Get the parameter ID for the number of elements in an electrical circuit.","completion":"ForgeTypeId paramId = ParameterTypeId.RbsElecCircuitNumberOfElementsParam;"}
{"prompt":"Obtén el nombre de la propiedad para el color de tinte de un activo de cerámica.","completion":"string propName = Ceramic.CommonTintColor;"}
{"prompt":"Get the unit symbol for pound-force feet per foot.","completion":"ForgeTypeId symbol = SymbolTypeId.LbForceDashFtPerFt;"}
{"prompt":"Obtén el valor de un parámetro entero.","completion":"IntegerParameterValue intValue = new IntegerParameterValue(10);\nint value = intValue.Value;"}
{"prompt":"Get the status of a Revit API post-event.","completion":"RevitAPIEventStatus status = somePostEventArgs.Status;"}
{"prompt":"Subraya todo el texto en un objeto FormattedText.","completion":"FormattedText formattedText = new FormattedText(\"Hello World\");\nformattedText.SetUnderlineStatus(true);"}
{"prompt":"Check if a macro module exists in the macro manager.","completion":"MacroManager manager = doc.Application.MacroManager;\nMacroModule module = manager.get_Item(\"MyModule\");\nbool contains = manager.Contains(module);"}
{"prompt":"Obtén el ID del parámetro para la inversión del perfil del divisor del fabricante de piezas.","completion":"ForgeTypeId paramId = ParameterTypeId.PartMakerSplitterProfileFlipAlong;"}
{"prompt":"Create a transform for a rotation around the Z-axis.","completion":"Transform rotation = Transform.CreateRotation(XYZ.BasisZ, Math.PI / 2);"}
{"prompt":"Obtén el Id de la falla que ocurre cuando no se puede pegar en una vista.","completion":"FailureDefinitionId failureId = BuiltInFailures.CopyPasteFailures.CannotPasteInViewError;"}
{"prompt":"Aplica una transformación a un bucle de curvas.","completion":"CurveLoop loop = new CurveLoop();\n//... add curves ...\nTransform transform = Transform.CreateTranslation(new XYZ(5,0,0));\nloop.Transform(transform);"}
{"prompt":"Get the lateral offset of a secondary handrail from a railing type.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\ndouble offset = railingType.SecondaryHandrailLateralOffset;"}
{"prompt":"Obtén el ID de parámetro para los tipos de barandal superior de un sistema de barandillas.","completion":"ForgeTypeId paramId = ParameterTypeId.RailingSystemTopRailTypesParam;"}
{"prompt":"Check if an updater is registered in the current document.","completion":"UpdaterId updaterId = new UpdaterId(new AddInId(new Guid(\"YOUR_ADDIN_ID\")), new Guid(\"YOUR_UPDATER_ID\"));\nbool isRegistered = UpdaterRegistry.IsUpdaterRegistered(updaterId, doc);"}
{"prompt":"Establece la descripción para un esquema de resultado de análisis.","completion":"AnalysisResultSchema schema = new AnalysisResultSchema(\"My Schema\", \"My Analysis Results\");\nschema.Description = \"Detailed results of the structural analysis.\";"}
{"prompt":"Obtén los vértices de una forma de losa.","completion":"SlabShapeEditor editor = someFloor.SlabShapeEditor;\nSlabShapeVertexArray vertices = editor.SlabShapeVertices;"}
{"prompt":"Get the insulation type of a wire type.","completion":"WireType wireType = new FilteredElementCollector(doc).OfClass(typeof(WireType)).FirstOrDefault() as WireType;\nElementId insulationTypeId = wireType.Insulation;"}
{"prompt":"Establece la densidad de un activo térmico.","completion":"ThermalAsset asset = new ThermalAsset(\"MyAsset\", ThermalMaterialType.Gas);\nasset.Density = 1.225; // in kg/m³"}
{"prompt":"Get the failure ID for when a split sketch does not overlap the boundary.","completion":"FailureDefinitionId failureId = BuiltInFailures.SketchFailures.BoundaryNoOverlap;"}
{"prompt":"Obtén la causa de un cambio de servidor externo.","completion":"ServerChangeCause cause = someServerChangedEventArgs.GetCause();"}
{"prompt":"Get the IDs of the fabrication part types used in the current solution.","completion":"ISet<ElementId> partTypeIds = e.GetCurrentSolutionPartTypeIds();"}
{"prompt":"Obtén la información de un patrón de exportación a partir de su clave.","completion":"ExportPatternTable table = new ExportPatternTable();\nExportPatternKey key = new ExportPatternKey(\"Solid fill\");\nExportPatternInfo info = table[key];"}
{"prompt":"Get an enumerator for a set of duct sizes.","completion":"DuctSizes sizes = new DuctSizes();\nIEnumerator<MEPSize> enumerator = sizes.GetEnumerator();"}
{"prompt":"Obtén el ID del parámetro para el subrayado del estilo de título.","completion":"ForgeTypeId paramId = ParameterTypeId.TitleStyleUnderline;"}
{"prompt":"Check if a wire type is currently in use.","completion":"WireType wireType = new FilteredElementCollector(doc).OfClass(typeof(WireType)).FirstOrDefault() as WireType;\nbool inUse = wireType.IsInUse;"}
{"prompt":"Obtén la referencia al plano XY de un punto de referencia.","completion":"ReferencePoint refPoint = new FilteredElementCollector(doc).OfClass(typeof(ReferencePoint)).FirstOrDefault() as ReferencePoint;\nReference planeRef = refPoint.GetCoordinatePlaneReferenceXY();"}
{"prompt":"Appends shape built by a ShapeBuilder to a DirectShape.","completion":"DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\nTessellatedShapeBuilder builder = new TessellatedShapeBuilder();\n//... build shape ...\nds.AppendShape(builder);"}
{"prompt":"Obtén el incremento de elevación de un elemento de configuración de contorno.","completion":"ContourSettingItem item = new ContourSettingItem();\ndouble step = item.Step;"}

{"prompt":"Obtén el ID de elemento vinculado de un objeto LinkElementId.","completion":"ElementId linkedId = someLinkElementId.LinkedElementId;"}
{"prompt":"Get the endpoints of a slab shape crease.","completion":"SlabShapeCrease crease = someSlabShapeEditor.SlabShapeCreases.get_Item(0);\nSlabShapeVertexArray endpoints = crease.EndPoints;"}
{"prompt":"Recarga un vínculo CAD en el documento.","completion":"CADLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(CADLinkType)).FirstOrDefault() as CADLinkType;\nlinkType.Reload();"}
{"prompt":"Create a new preset initial color from a color preset enum.","completion":"PresetInitialColor initialColor = new PresetInitialColor(ColorPreset.Xenon);"}
{"prompt":"Obtén el Id de parámetro para crear un modelo de energía.","completion":"ForgeTypeId paramId = ParameterTypeId.EnergyAnalysisCreateAnalyticalModel;"}
{"prompt":"Create a path of travel between two points.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nXYZ start = new XYZ(0, 0, 0);\nXYZ end = new XYZ(10, 5, 0);\nPathOfTravel.Create(planView, start, end);"}
{"prompt":"Obtén el ID de parámetro para la propiedad 'Is Reporting'.","completion":"ForgeTypeId paramId = ParameterTypeId.DimIsreporting;"}
{"prompt":"Set the original fill pattern name for an export key.","completion":"ExportPatternKey key = new ExportPatternKey(\"Solid\");\nkey.OriginalFillPatternName = \"Solid Fill\";"}
{"prompt":"Obtén el ID de parámetro para el diámetro hidráulico.","completion":"ForgeTypeId paramId = ParameterTypeId.RbsHydraulicDiameterParam;"}
{"prompt":"Check if a transaction has ended.","completion":"Transaction t = new Transaction(doc, \"My Transaction\");\nt.Start();\nbool hasEnded = t.HasEnded(); // will be false\nt.Commit();\nhasEnded = t.HasEnded(); // will be true"}
{"prompt":"Crea un nuevo conjunto de grupos.","completion":"GroupSet groupSet = new GroupSet();"}
{"prompt":"Set the ClearTransmitted property in worksharing save options.","completion":"WorksharingSaveAsOptions options = new WorksharingSaveAsOptions();\noptions.ClearTransmitted = true;"}
{"prompt":"Obtén el ID de parámetro para el sufijo de una cota.","completion":"ForgeTypeId paramId = ParameterTypeId.DimSuffix;"}
{"prompt":"Get the custom handle tag of a rebar handle.","completion":"RebarHandleNameData handleData = new RebarHandleNameData(1, \"HandleA\");\nint tag = handleData.GetCustomHandleTag();"}
{"prompt":"Obtén el ID de la falla para un tipo de fluido no definido.","completion":"FailureDefinitionId failureId = BuiltInFailures.FluidFailures.UndefinedFluidType;"}
{"prompt":"Set the shear area for the strong axis of a structural section.","completion":"StructuralSectionAnalysisParams analysisParams = new StructuralSectionAnalysisParams();\nanalysisParams.ShearAreaStrongAxis = 2.5;"}
{"prompt":"Obtén el símbolo de unidad para por mil.","completion":"ForgeTypeId perMille = SymbolTypeId.PerMille;"}
{"prompt":"Get the parameter type ID from an internal definition.","completion":"InternalDefinition def = someParameter.Definition as InternalDefinition;\nForgeTypeId typeId = def.GetParameterTypeId();"}
{"prompt":"Comprueba si un evento externo está pendiente.","completion":"bool isPending = someExternalEvent.IsPending;"}
{"prompt":"Get the parameter ID for D_Top of a fabrication span symbol.","completion":"ForgeTypeId paramId = ParameterTypeId.FabricParamSpanSymDTop;"}
{"prompt":"Obtén el símbolo de unidad para grados Fahrenheit.","completion":"ForgeTypeId degF = SymbolTypeId.DegreeF;"}
{"prompt":"Get the roughness value from a material's thermal properties.","completion":"Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault();\nPropertySetElement psetElem = doc.GetElement(material.ThermalAssetId) as PropertySetElement;\nThermalAsset thermalAsset = psetElem.GetThermalAsset();\ndouble roughness = thermalAsset.Roughness;"}
{"prompt":"Obtén el ID de la falla para elementos desconectados.","completion":"FailureDefinitionId failureId = BuiltInFailures.ConnectorFailures.DisconnectedElements;"}
{"prompt":"Get the failure ID for when core geometry creation fails.","completion":"FailureDefinitionId failureId = BuiltInFailures.MassFailures.CreateCoreGeometryFailed;"}
{"prompt":"Localiza un conector de fabricación por grupo, nombre, dominio y forma.","completion":"FabricationConfiguration config = FabricationConfiguration.GetFabricationConfiguration(doc);\nint connectorId = config.LocateFabricationConnector(\"Ductwork\", \"TDF\", ConnectorDomainType.Hvac, ConnectorProfileType.Rectangular);"}
{"prompt":"Comprueba si un objeto de conexión de escalera es válido.","completion":"StairsComponentConnection connection = someStairs.GetStairsComponentConnection(0);\nbool isValid = connection.IsValidObject;"}
{"prompt":"Get the operation associated with a DocumentChanged event.","completion":"UndoOperation operation = e.Operation;"}
{"prompt":"Crea una nueva instancia de OverrideGraphicSettings.","completion":"OverrideGraphicSettings ogs = new OverrideGraphicSettings();"}
{"prompt":"Export a set of 3D views to an FBX file.","completion":"ViewSet views = new ViewSet();\nView3D view3d = new FilteredElementCollector(doc).OfClass(typeof(View3D)).FirstOrDefault() as View3D;\nviews.Insert(view3d);\nFBXExportOptions options = new FBXExportOptions();\ndoc.Export(\"C:/exports/\", \"my_model\", views, options);"}
{"prompt":"Obtén el ID de la falla para un tipo de muro cortina o apilado no permitido.","completion":"FailureDefinitionId failureId = BuiltInFailures.WallFailures.CurtainOrStackedWallDisallowedForCrossSectionType;"}
{"prompt":"Enable exporting mullions in the energy analysis detail model options.","completion":"EnergyAnalysisDetailModelOptions options = new EnergyAnalysisDetailModelOptions();\noptions.ExportMullions = true;"}
{"prompt":"Obtén el ID del parámetro para la intensidad del sol en un estudio solar.","completion":"ForgeTypeId paramId = ParameterTypeId.ViewSolarstudySunIntensityValue;"}
{"prompt":"Get the parameter ID for a load case.","completion":"ForgeTypeId paramId = ParameterTypeId.LoadCaseId;"}
{"prompt":"Obtén los sistemas MEP a los que pertenece un cable.","completion":"Wire wire = new FilteredElementCollector(doc).OfClass(typeof(Wire)).FirstOrDefault() as Wire;\nICollection<ElementId> systemIds = wire.GetMEPSystems();"}
{"prompt":"Get the parameter ID for the 'Align to View' family property.","completion":"ForgeTypeId paramId = ParameterTypeId.FamilySelfOrienting;"}
{"prompt":"Obtén el ID de parámetro para la justificación de espaciado U.","completion":"ForgeTypeId paramId = ParameterTypeId.SpacingJustificationU;"}
{"prompt":"Check if an element can be used to create parts.","completion":"ElementId wallId = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault().Id;\nbool canCreateParts = PartUtils.IsValidForCreateParts(doc, new LinkElementId(wallId));"}
{"prompt":"Comprueba si un tamaño de bandeja de cables con un diámetro nominal específico existe.","completion":"CableTraySizes sizes = CableTraySizeSettings.GetCableTraySizeSettings(doc).GetSizes(CableTrayShape.Channel);\nbool contains = sizes.Contains(0.5);"}
{"prompt":"Obtén el Id de la falla cuando no se pueden adquirir coordenadas de un vínculo escalado.","completion":"FailureDefinitionId failureId = BuiltInFailures.SharedCoordinatesFailures.CannotAcquireCoordinatesFromScaledLink;"}
{"prompt":"Get the occupancy unit of a space.","completion":"Space space = new FilteredElementCollector(doc).OfClass(typeof(Space)).FirstOrDefault() as Space;\nOccupancyUnit occupancyUnit = space.OccupancyUnit;"}
{"prompt":"Obtén el tipo de material estructural de una instancia de familia.","completion":"FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nStructuralMaterialType materialType = column.StructuralMaterialType;"}
{"prompt":"Get the parameter ID for the vertical profile offset.","completion":"ForgeTypeId paramId = ParameterTypeId.Profile2OffsetY;"}
{"prompt":"Obtén la justificación Z de una definición de elemento estructural.","completion":"StructuralElementDefinitionData defData = new StructuralElementDefinitionData();\nZJustification zJust = defData.ZJust;"}
{"prompt":"Establece la justificación de la línea de ubicación para un tramo de escalera.","completion":"StairsRun run = new FilteredElementCollector(doc).OfClass(typeof(StairsRun)).FirstOrDefault() as StairsRun;\nrun.LocationLineJustification = StairsRunJustification.Center;"}
{"prompt":"Get the parameter ID for spot bottom elevation.","completion":"ForgeTypeId paramId = ParameterTypeId.MepSpotBottomElevation;"}
{"prompt":"Obtén el número de vértices de una matriz de pares de índices de vértices.","completion":"VertexIndexPairArray vertexPairs = new VertexIndexPairArray();\n//... add pairs ...\nint size = vertexPairs.Size;"}
{"prompt":"Get the active view of the document.","completion":"View activeView = doc.ActiveView;"}
{"prompt":"Obtén la opción de contorno de habitación para un DirectShape.","completion":"DirectShapeOptions options = new DirectShapeOptions();\nDirectShapeRoomBoundingOption roomBoundingOption = options.RoomBoundingOption;"}
{"prompt":"Create a new instance of a FilterStringContains evaluator.","completion":"FilterStringContains containsEvaluator = new FilterStringContains();"}

{"prompt":"Get an Alignment object from a given alignment element.","completion":"Element alignmentElement = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Alignments).FirstOrDefault();\nAlignment alignment = Alignment.Get(alignmentElement);"}
{"prompt":"Crea un nuevo objeto ViewOrientation3D.","completion":"ViewOrientation3D viewOrientation = new ViewOrientation3D(new XYZ(0, -10, 1), XYZ.BasisZ, new XYZ(0, 1, 0));"}
{"prompt":"Obtén el ID de unidad para pies cúbicos por minuto por pie cuadrado.","completion":"ForgeTypeId unitId = UnitTypeId.CubicFeetPerMinuteSquareFoot;"}
{"prompt":"Check if an element filter is valid.","completion":"ElementFilter filter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\nbool isValid = filter.IsValidObject;"}
{"prompt":"Habilita la búsqueda de referencias dentro de vínculos de Revit en un ReferenceIntersector.","completion":"ReferenceIntersector refIntersector = new ReferenceIntersector(new ElementId(BuiltInCategory.OST_Walls), FindReferenceTarget.Element, (View3D)doc.ActiveView);\nrefIntersector.FindReferencesInRevitLinks = true;"}
{"prompt":"Get the server ID from a LinkConversionData object.","completion":"// (Assuming 'e' is a DocumentOpenedEventArgs from a link conversion)\nLinkConversionData conversionData = e.GetLinkConversionData();\nstring serverId = conversionData.ServerId;"}
{"prompt":"Inserta un tipo de clasificación de temperatura en un conjunto.","completion":"TemperatureRatingTypeSet set = new TemperatureRatingTypeSet();\nTemperatureRatingType type = new FilteredElementCollector(doc).OfClass(typeof(TemperatureRatingType)).FirstOrDefault() as TemperatureRatingType;\nset.Insert(type);"}
{"prompt":"Get the length of an electrical system.","completion":"ElectricalSystem system = new FilteredElementCollector(doc).OfClass(typeof(ElectricalSystem)).FirstOrDefault() as ElectricalSystem;\ndouble length = system.Length;"}
{"prompt":"Crea un nuevo conjunto de grupos.","completion":"GroupSet groupSet = new GroupSet();"}
{"prompt":"Enable clearing the transmitted flag in worksharing save options.","completion":"WorksharingSaveAsOptions options = new WorksharingSaveAsOptions();\noptions.ClearTransmitted = true;"}
{"prompt":"Obtén el ID de parámetro para el sufijo de una cota.","completion":"ForgeTypeId paramId = ParameterTypeId.DimSuffix;"}
{"prompt":"Get the custom handle tag for a rebar handle.","completion":"RebarHandleNameData handleData = new RebarHandleNameData(1, \"MyHandle\");\nint tag = handleData.GetCustomHandleTag();"}
{"prompt":"Obtén el Id de la falla para un tipo de fluido no definido.","completion":"FailureDefinitionId failureId = BuiltInFailures.FluidFailures.UndefinedFluidType;"}
{"prompt":"Set the shear area for the strong axis in a structural section's analysis parameters.","completion":"StructuralSectionAnalysisParams analysisParams = new StructuralSectionAnalysisParams();\nanalysisParams.ShearAreaStrongAxis = 2.0;"}
{"prompt":"Obtén el símbolo de unidad para por mil.","completion":"ForgeTypeId perMilleSymbol = SymbolTypeId.PerMille;"}
{"prompt":"Get the parameter type ID from an internal definition.","completion":"Parameter someParam = someElement.LookupParameter(\"Comments\");\nInternalDefinition def = someParam.Definition as InternalDefinition;\nForgeTypeId typeId = def.GetParameterTypeId();"}
{"prompt":"Comprueba si un evento externo está pendiente.","completion":"bool isPending = myExternalEvent.IsPending;"}
{"prompt":"Get the parameter ID for D_Top of a fabrication span symbol.","completion":"ForgeTypeId paramId = ParameterTypeId.FabricParamSpanSymDTop;"}
{"prompt":"Obtén el símbolo de unidad para grados Fahrenheit.","completion":"ForgeTypeId fahrenheit = SymbolTypeId.DegreeF;"}
{"prompt":"Get the thermal mass from a material's thermal properties.","completion":"Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault();\nPropertySetElement psetElem = doc.GetElement(material.ThermalAssetId) as PropertySetElement;\nThermalAsset thermalAsset = psetElem.GetThermalAsset();\ndouble thermalMass = thermalAsset.ThermalMass;"}
{"prompt":"Obtén el ID de la falla para elementos desconectados.","completion":"FailureDefinitionId failureId = BuiltInFailures.ConnectorFailures.DisconnectedElements;"}
{"prompt":"Get the failure ID for when core geometry creation fails.","completion":"FailureDefinitionId failureId = BuiltInFailures.MassFailures.CreateCoreGeometryFailed;"}
{"prompt":"Localiza un conector de fabricación por grupo, nombre, dominio y forma.","completion":"FabricationConfiguration config = FabricationConfiguration.GetFabricationConfiguration(doc);\nint connectorId = config.LocateFabricationConnector(\"Rectangular Ductwork\", \"TDC/TDF\", ConnectorDomainType.Hvac, ConnectorProfileType.Rectangular);"}
{"prompt":"Comprueba si un objeto de conexión de escalera es válido.","completion":"StairsComponentConnection connection = someStairs.GetStairsComponentConnection(0);\nbool isValid = connection.IsValidObject;"}
{"prompt":"Get the operation associated with a DocumentChanged event.","completion":"UndoOperation operation = e.Operation;"}
{"prompt":"Crea una nueva instancia de OverrideGraphicSettings.","completion":"OverrideGraphicSettings ogs = new OverrideGraphicSettings();"}
{"prompt":"Export a set of 3D views to an FBX file.","completion":"ViewSet views = new ViewSet();\nView3D view3d = new FilteredElementCollector(doc).OfClass(typeof(View3D)).FirstOrDefault() as View3D;\nviews.Insert(view3d);\nFBXExportOptions options = new FBXExportOptions();\ndoc.Export(\"C:/exports/\", \"my_model.fbx\", views, options);"}
{"prompt":"Obtén el ID de la falla para un tipo de muro cortina o apilado no permitido.","completion":"FailureDefinitionId failureId = BuiltInFailures.WallFailures.CurtainOrStackedWallDisallowedForCrossSectionType;"}
{"prompt":"Enable exporting mullions in the energy analysis detail model options.","completion":"EnergyAnalysisDetailModelOptions options = new EnergyAnalysisDetailModelOptions();\noptions.ExportMullions = true;"}
{"prompt":"Obtén el ID del parámetro para la intensidad del sol en un estudio solar.","completion":"ForgeTypeId paramId = ParameterTypeId.ViewSolarstudySunIntensityValue;"}
{"prompt":"Get the parameter ID for a load case.","completion":"ForgeTypeId paramId = ParameterTypeId.LoadCaseId;"}
{"prompt":"Obtén los sistemas MEP a los que pertenece un cable.","completion":"Wire wire = new FilteredElementCollector(doc).OfClass(typeof(Wire)).FirstOrDefault() as Wire;\nICollection<ElementId> systemIds = wire.GetMEPSystems();"}
{"prompt":"Get the parameter ID for the 'Align to View' family property.","completion":"ForgeTypeId paramId = ParameterTypeId.FamilySelfOrienting;"}
{"prompt":"Obtén el ID de parámetro para la justificación de espaciado U.","completion":"ForgeTypeId paramId = ParameterTypeId.SpacingJustificationU;"}
{"prompt":"Check if an element can be used to create parts.","completion":"ElementId wallId = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault().Id;\nbool canCreateParts = PartUtils.IsValidForCreateParts(doc, new LinkElementId(wallId));"}
{"prompt":"Comprueba si un tamaño de bandeja de cables con un diámetro nominal específico existe.","completion":"CableTraySizes sizes = CableTraySizeSettings.GetCableTraySizeSettings(doc).GetSizes(CableTrayShape.Channel);\nbool contains = sizes.Contains(0.5);"}
{"prompt":"Obtén el Id de la falla cuando no se pueden adquirir coordenadas de un vínculo escalado.","completion":"FailureDefinitionId failureId = BuiltInFailures.SharedCoordinatesFailures.CannotAcquireCoordinatesFromScaledLink;"}
{"prompt":"Get the occupancy unit of a space.","completion":"Space space = new FilteredElementCollector(doc).OfClass(typeof(Space)).FirstOrDefault() as Space;\nOccupancyUnit occupancyUnit = space.OccupancyUnit;"}
{"prompt":"Obtén el tipo de material estructural de una instancia de familia.","completion":"FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nStructuralMaterialType materialType = column.StructuralMaterialType;"}
{"prompt":"Get the parameter ID for the vertical profile offset.","completion":"ForgeTypeId paramId = ParameterTypeId.Profile2OffsetY;"}
{"prompt":"Obtén la justificación Z de una definición de elemento estructural.","completion":"StructuralElementDefinitionData defData = new StructuralElementDefinitionData();\nZJustification zJust = defData.ZJust;"}
{"prompt":"Establece la justificación de la línea de ubicación para un tramo de escalera.","completion":"StairsRun run = new FilteredElementCollector(doc).OfClass(typeof(StairsRun)).FirstOrDefault() as StairsRun;\nrun.LocationLineJustification = StairsRunJustification.Center;"}
{"prompt":"Get the parameter ID for spot bottom elevation.","completion":"ForgeTypeId paramId = ParameterTypeId.MepSpotBottomElevation;"}
{"prompt":"Obtén el número de vértices de una matriz de pares de índices de vértices.","completion":"VertexIndexPairArray vertexPairs = new VertexIndexPairArray();\n//... add pairs ...\nint size = vertexPairs.Size;"}
{"prompt":"Get the active view of the document.","completion":"View activeView = doc.ActiveView;"}
{"prompt":"Obtén la opción de contorno de habitación para un DirectShape.","completion":"DirectShapeOptions options = new DirectShapeOptions();\nDirectShapeRoomBoundingOption roomBoundingOption = options.RoomBoundingOption;"}
{"prompt":"Create a new instance of a FilterStringContains evaluator.","completion":"FilterStringContains containsEvaluator = new FilterStringContains();"}

{"prompt":"Get the Alignment object for a given alignment element.","completion":"Element alignmentElement = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Alignments).FirstOrDefault();\nAlignment alignment = Alignment.Get(alignmentElement);"}
{"prompt":"Crea un nuevo objeto ViewOrientation3D.","completion":"XYZ eyePoint = new XYZ(10, 10, 10);\nXYZ upVector = XYZ.BasisZ;\nXYZ forwardVector = new XYZ(-1, -1, -1);\nViewOrientation3D orientation = new ViewOrientation3D(eyePoint, upVector, forwardVector);"}
{"prompt":"Obtén el ID de unidad para pies cúbicos por minuto por pie cuadrado.","completion":"ForgeTypeId unitId = UnitTypeId.CubicFeetPerMinuteSquareFoot;"}
{"prompt":"Check if an element filter is valid.","completion":"ElementFilter filter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\nbool isValid = filter.IsValidObject;"}
{"prompt":"Habilita la búsqueda de referencias dentro de vínculos de Revit en un ReferenceIntersector.","completion":"ReferenceIntersector refIntersector = new ReferenceIntersector(new ElementId(BuiltInCategory.OST_Walls), FindReferenceTarget.Element, doc.ActiveView as View3D);\nrefIntersector.FindReferencesInRevitLinks = true;"}
{"prompt":"Get the server ID from a LinkConversionData object.","completion":"// (Assuming 'e' is a DocumentOpenedEventArgs from a link conversion)\nLinkConversionData conversionData = e.GetLinkConversionData();\nstring serverId = conversionData.ServerId;"}
{"prompt":"Inserta un tipo de clasificación de temperatura en un conjunto.","completion":"TemperatureRatingTypeSet set = new TemperatureRatingTypeSet();\nTemperatureRatingType type = new FilteredElementCollector(doc).OfClass(typeof(TemperatureRatingType)).FirstOrDefault() as TemperatureRatingType;\nset.Insert(type);"}
{"prompt":"Get the length of an electrical system.","completion":"ElectricalSystem elecSystem = new FilteredElementCollector(doc).OfClass(typeof(ElectricalSystem)).FirstOrDefault() as ElectricalSystem;\ndouble length = elecSystem.Length;"}
{"prompt":"Obtén el ID de parámetro para el diámetro hidráulico de un ducto.","completion":"ForgeTypeId paramId = ParameterTypeId.RbsHydraulicDiameterParam;"}
{"prompt":"Check if a transaction has ended.","completion":"Transaction t = new Transaction(doc, \"My Transaction\");\nt.Start();\n//... operations ...\nt.Commit();\nbool hasEnded = t.HasEnded();"}
{"prompt":"Crea un nuevo conjunto de grupos.","completion":"GroupSet groupSet = new GroupSet();"}
{"prompt":"Enable clearing the transmitted flag in worksharing save options.","completion":"WorksharingSaveAsOptions options = new WorksharingSaveAsOptions();\noptions.ClearTransmitted = true;"}
{"prompt":"Obtén el ID de parámetro para el sufijo de una cota.","completion":"ForgeTypeId paramId = ParameterTypeId.DimSuffix;"}
{"prompt":"Get the custom handle tag for a rebar handle.","completion":"RebarHandleNameData handleData = new RebarHandleNameData(1, \"MyHandle\");\nint tag = handleData.GetCustomHandleTag();"}
{"prompt":"Obtén el ID de la falla para un tipo de fluido no definido.","completion":"FailureDefinitionId failureId = BuiltInFailures.FluidFailures.UndefinedFluidType;"}
{"prompt":"Set the shear area for the strong axis in a structural section's analysis parameters.","completion":"StructuralSectionAnalysisParams analysisParams = new StructuralSectionAnalysisParams();\nanalysisParams.ShearAreaStrongAxis = 1.5;"}
{"prompt":"Obtén el símbolo de unidad para por mil.","completion":"ForgeTypeId perMilleSymbol = SymbolTypeId.PerMille;"}
{"prompt":"Get the parameter type ID from an internal definition.","completion":"Parameter someParam = someElement.LookupParameter(\"Comments\");\nInternalDefinition def = someParam.Definition as InternalDefinition;\nForgeTypeId typeId = def.GetParameterTypeId();"}
{"prompt":"Comprueba si un evento externo está pendiente.","completion":"bool isPending = myExternalEvent.IsPending;"}
{"prompt":"Get the parameter ID for D_Top of a fabrication span symbol.","completion":"ForgeTypeId paramId = ParameterTypeId.FabricParamSpanSymDTop;"}
{"prompt":"Obtén el símbolo de unidad para grados Fahrenheit.","completion":"ForgeTypeId degF = SymbolTypeId.DegreeF;"}
{"prompt":"Get the thermal mass from a material's thermal properties.","completion":"Material material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault();\nPropertySetElement psetElem = doc.GetElement(material.ThermalAssetId) as PropertySetElement;\nThermalAsset thermalAsset = psetElem.GetThermalAsset();\ndouble thermalMass = thermalAsset.ThermalMass;"}
{"prompt":"Obtén el ID de la falla para elementos desconectados.","completion":"FailureDefinitionId failureId = BuiltInFailures.ConnectorFailures.DisconnectedElements;"}
{"prompt":"Get the failure ID for when core geometry creation fails.","completion":"FailureDefinitionId failureId = BuiltInFailures.MassFailures.CreateCoreGeometryFailed;"}
{"prompt":"Localiza un conector de fabricación por grupo, nombre, dominio y forma.","completion":"FabricationConfiguration config = FabricationConfiguration.GetFabricationConfiguration(doc);\nint connectorId = config.LocateFabricationConnector(\"Rectangular Ductwork\", \"TDC/TDF\", ConnectorDomainType.Hvac, ConnectorProfileType.Rectangular);"}
{"prompt":"Comprueba si un objeto de conexión de escalera es válido.","completion":"StairsComponentConnection connection = someStairs.GetStairsComponentConnection(0);\nbool isValid = connection.IsValidObject;"}
{"prompt":"Get the operation associated with a DocumentChanged event.","completion":"UndoOperation operation = e.Operation;"}
{"prompt":"Crea una nueva instancia de OverrideGraphicSettings.","completion":"OverrideGraphicSettings ogs = new OverrideGraphicSettings();"}
{"prompt":"Export a set of 3D views to an FBX file.","completion":"ViewSet views = new ViewSet();\nView3D view3d = new FilteredElementCollector(doc).OfClass(typeof(View3D)).FirstOrDefault() as View3D;\nviews.Insert(view3d);\nFBXExportOptions options = new FBXExportOptions();\ndoc.Export(\"C:/exports/\", \"my_model.fbx\", views, options);"}
{"prompt":"Obtén el ID de la falla para un tipo de muro cortina o apilado no permitido.","completion":"FailureDefinitionId failureId = BuiltInFailures.WallFailures.CurtainOrStackedWallDisallowedForCrossSectionType;"}
{"prompt":"Enable exporting mullions in the energy analysis detail model options.","completion":"EnergyAnalysisDetailModelOptions options = new EnergyAnalysisDetailModelOptions();\noptions.ExportMullions = true;"}
{"prompt":"Obtén el ID del parámetro para la intensidad del sol en un estudio solar.","completion":"ForgeTypeId paramId = ParameterTypeId.ViewSolarstudySunIntensityValue;"}
{"prompt":"Get the parameter ID for a load case.","completion":"ForgeTypeId paramId = ParameterTypeId.LoadCaseId;"}
{"prompt":"Obtén los sistemas MEP a los que pertenece un cable.","completion":"Wire wire = new FilteredElementCollector(doc).OfClass(typeof(Wire)).FirstOrDefault() as Wire;\nICollection<ElementId> systemIds = wire.GetMEPSystems();"}
{"prompt":"Get the parameter ID for the 'Align to View' family property.","completion":"ForgeTypeId paramId = ParameterTypeId.FamilySelfOrienting;"}
{"prompt":"Obtén el ID de parámetro para la justificación de espaciado U.","completion":"ForgeTypeId paramId = ParameterTypeId.SpacingJustificationU;"}
{"prompt":"Check if an element can be used to create parts.","completion":"ElementId wallId = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault().Id;\nbool canCreateParts = PartUtils.IsValidForCreateParts(doc, new LinkElementId(wallId));"}
{"prompt":"Comprueba si un tamaño de bandeja de cables con un diámetro nominal específico existe.","completion":"CableTraySizes sizes = CableTraySizeSettings.GetCableTraySizeSettings(doc).GetSizes(CableTrayShape.Channel);\nbool contains = sizes.Contains(0.5);"}
{"prompt":"Obtén el Id de la falla cuando no se pueden adquirir coordenadas de un vínculo escalado.","completion":"FailureDefinitionId failureId = BuiltInFailures.SharedCoordinatesFailures.CannotAcquireCoordinatesFromScaledLink;"}
{"prompt":"Get the occupancy unit of a space.","completion":"Space space = new FilteredElementCollector(doc).OfClass(typeof(Space)).FirstOrDefault() as Space;\nOccupancyUnit occupancyUnit = space.OccupancyUnit;"}
{"prompt":"Obtén el tipo de material estructural de una instancia de familia.","completion":"FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nStructuralMaterialType materialType = column.StructuralMaterialType;"}
{"prompt":"Get the parameter ID for the vertical profile offset.","completion":"ForgeTypeId paramId = ParameterTypeId.Profile2OffsetY;"}
{"prompt":"Obtén la justificación Z de una definición de elemento estructural.","completion":"StructuralElementDefinitionData defData = new StructuralElementDefinitionData();\nZJustification zJust = defData.ZJust;"}
{"prompt":"Establece la justificación de la línea de ubicación para un tramo de escalera.","completion":"StairsRun run = new FilteredElementCollector(doc).OfClass(typeof(StairsRun)).FirstOrDefault() as StairsRun;\nrun.LocationLineJustification = StairsRunJustification.Center;"}
{"prompt":"Get the parameter ID for spot bottom elevation.","completion":"ForgeTypeId paramId = ParameterTypeId.MepSpotBottomElevation;"}
{"prompt":"Obtén el número de vértices de una matriz de pares de índices de vértices.","completion":"VertexIndexPairArray vertexPairs = new VertexIndexPairArray();\n//... add pairs ...\nint size = vertexPairs.Size;"}
{"prompt":"Get the active view of the document.","completion":"View activeView = doc.ActiveView;"}
{"prompt":"Obtén la opción de contorno de habitación para un DirectShape.","completion":"DirectShapeOptions options = new DirectShapeOptions();\nDirectShapeRoomBoundingOption roomBoundingOption = options.RoomBoundingOption;"}
{"prompt":"Create a new instance of a FilterStringContains evaluator.","completion":"FilterStringContains containsEvaluator = new FilterStringContains();"}

{"prompt":"Crea un nuevo filtro de almacenamiento extensible.","completion":"Guid schemaGuid = new Guid(\"YOUR_SCHEMA_GUID_HERE\");\nExtensibleStorageFilter filter = new ExtensibleStorageFilter(schemaGuid);"}
{"prompt":"Get the parameter ID for load classification in an electrical load summary.","completion":"ForgeTypeId paramId = ParameterTypeId.RbsElecLoadsummaryLoadclassificationParam;"}
{"prompt":"Determina si un botón desplegable está sincronizado con el elemento actual.","completion":"SplitButton splitButton = new SplitButton(\"MySplitButton\", \"Split Button\");\nbool isSynced = splitButton.IsSynchronizedWithCurrentItem;"}
{"prompt":"Set the boundary and path for a sketched landing.","completion":"StairsLanding landing = new FilteredElementCollector(doc).OfClass(typeof(StairsLanding)).FirstOrDefault() as StairsLanding;\nCurveLoop boundary = new CurveLoop();\n//... add curves to boundary\nCurveLoop path = new CurveLoop();\n//... add curves to path\nlanding.SetSketchedLandingBoundaryAndPath(doc, boundary, path);"}
{"prompt":"Crea una nueva apertura rectangular en un muro.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nXYZ p1 = new XYZ(2, 2, 2);\nXYZ p2 = new XYZ(4, 4, 4);\ndoc.Create.NewOpening(wall, p1, p2);"}
{"prompt":"Get the roughness of a MEP section.","completion":"MEPSection section = MEPSection.GetMEPSection(someMEPCurve);\ndouble roughness = section.Roughness;"}
{"prompt":"Obtén el nombre de propiedad para el bloqueo de escala de una textura.","completion":"string propName = Checker.TextureScaleLock;"}
{"prompt":"Create a new export linetype key.","completion":"ExportLinetypeKey key = new ExportLinetypeKey();"}
{"prompt":"Comprueba si el documento actual es un documento de familia.","completion":"bool isFamilyDoc = doc.IsFamilyDocument;"}
{"prompt":"Get the failure ID for when a room in a design option overlaps with a room in the main model.","completion":"FailureDefinitionId failureId = BuiltInFailures.RoomFailures.OptionConflictRoomOverlapMain;"}
{"prompt":"Crea un nuevo sistema analítico.","completion":"MEPAnalyticalSystem.Create(doc, AnalyticalSystemDomain.AirSystem, \"My Air System\");"}
{"prompt":"Get the failure ID for when no element is selected.","completion":"FailureDefinitionId failureId = BuiltInFailures.SelectionFailures.NoElementSelected;"}
{"prompt":"Comprueba si un objeto de patrón de relleno es válido.","completion":"FillGrid fillGrid = new FillGrid();\nbool isValid = fillGrid.IsValidObject;"}
{"prompt":"Get the failure ID for when a wall joint type cannot be changed.","completion":"FailureDefinitionId failureId = BuiltInFailures.WallJoinFailures.FailedToChangeWallJointsTypeFailure;"}
{"prompt":"Obtén la transformación de la instancia de un nodo de detalle de cara.","completion":"Transform transform = faceDetailNode.GetInstanceTransform();"}
{"prompt":"Get the parameter ID for the main root opening of a steel element weld.","completion":"ForgeTypeId paramId = ParameterTypeId.SteelElemWeldMainRootopening;"}
{"prompt":"Elimina un parámetro de un conjunto de parámetros.","completion":"ParameterSet paramSet = someElement.Parameters;\nParameter paramToErase = paramSet.get_Item(\"Comments\");\nparamSet.Erase(paramToErase);"}
{"prompt":"Convert a user-visible path to a ModelPath.","completion":"string path = \"RSN://myServer/myFolder/myProject.rvt\";\nModelPath modelPath = ModelPathUtils.ConvertUserVisiblePathToModelPath(path);"}
{"prompt":"Obtén el nombre de un elemento de la cinta de opciones.","completion":"RibbonPanel panel = uiApplication.CreateRibbonPanel(\"My Panel\");\nRibbonItem item = panel.AddItem(new PushButtonData(\"Button1\", \"My Button\", Assembly.GetExecutingAssembly().Location, \"MyCommand\"));\nstring name = item.Name;"}
{"prompt":"Get the lock callback from transact with central options.","completion":"TransactWithCentralOptions options = new TransactWithCentralOptions();\nICentralLockedCallback callback = options.GetLockCallback();"}
{"prompt":"Establece el ID de tipo para un elemento DirectShape.","completion":"DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\nDirectShapeType type = DirectShapeType.Create(doc, \"My DirectShape Type\", new ElementId(BuiltInCategory.OST_GenericModel));\nds.SetTypeId(type.Id);"}
{"prompt":"Get the analytical shading surfaces from an energy analysis detail model.","completion":"EnergyAnalysisDetailModel detailModel = EnergyAnalysisDetailModel.GetFromDocument(doc);\nIList<EnergyAnalysisSurface> shadingSurfaces = detailModel.GetAnalyticalShadingSurfaces();"}
{"prompt":"Establece el ancho de un segmento de pliegue de una sección estructural.","completion":"StructuralSectionSigmaProfile sigmaProfile = new StructuralSectionSigmaProfile();\nsigmaProfile.BendWidth = 0.5;"}
{"prompt":"Get the parameter ID for the elastic modulus of a structural section's strong axis.","completion":"ForgeTypeId paramId = ParameterTypeId.StructuralSectionCommonElasticModulusStrongAxis;"}
{"prompt":"Habilita el borde visible para un editor de texto.","completion":"TextEditorOptions options = new TextEditorOptions();\noptions.ShowBorder = true;"}
{"prompt":"Set the restrict palette option for a fabrication network change service.","completion":"FabricationNetworkChangeService changeService = new FabricationNetworkChangeService(doc, someElement.Id);\nchangeService.SetRestrictPalette(true);"}
{"prompt":"Añade un rango de contornos a la configuración de contornos.","completion":"ContourSetting contourSetting = ContourSetting.GetContourSetting(doc);\nElementId subcategoryId = new FilteredElementCollector(doc).OfClass(typeof(GraphicsStyle)).FirstOrDefault().Id;\ncontourSetting.AddContourRange(0, 100, 10, subcategoryId);"}
{"prompt":"Get the parameter ID for text position.","completion":"ForgeTypeId paramId = ParameterTypeId.TextPosition;"}
{"prompt":"Comprueba si un documento está desvinculado.","completion":"bool isDetached = doc.IsDetached;"}
{"prompt":"Get all ribbon panels on the 'Add-Ins' tab.","completion":"List<RibbonPanel> panels = uiApplication.GetRibbonPanels(Tab.AddIns);"}
{"prompt":"Obtén el vector X de una cara plana.","completion":"PlanarFace planarFace = someSolid.Faces.get_Item(0) as PlanarFace;\nXYZ xVector = planarFace.XVector;"}
{"prompt":"Check if path reinforcement is unobscured in a view.","completion":"PathReinforcement pathRein = new FilteredElementCollector(doc).OfClass(typeof(PathReinforcement)).FirstOrDefault() as PathReinforcement;\nView view = doc.ActiveView;\nbool isUnobscured = pathRein.IsUnobscuredInView(view);"}
{"prompt":"Obtén el ID de unidad para 1:Ratio.","completion":"ForgeTypeId unitId = UnitTypeId.OneToRatio;"}
{"prompt":"Check if an element can have a type assigned.","completion":"Element elem = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault();\nbool canHaveType = elem.CanHaveTypeAssigned();"}
{"prompt":"Obtén el ID de parámetro para el número de detalle de un viewport.","completion":"ForgeTypeId paramId = ParameterTypeId.ViewportDetailNumber;"}
{"prompt":"Get the luminosity value of an initial luminous intensity object.","completion":"InitialLuminousIntensity initialIntensity = new InitialLuminousIntensity(1500);\ndouble luminosity = initialIntensity.Luminosity;"}
{"prompt":"Crea una regla de filtro para un valor menor que una cadena.","completion":"FilterRule rule = ParameterFilterRuleFactory.CreateLessRule(new ElementId(BuiltInParameter.ALL_MODEL_MARK), \"M-100\");"}
{"prompt":"Get the parameter of a point on an edge at an intersection.","completion":"IntersectionResult result = someIntersectionResult;\ndouble edgeParam = result.EdgeParameter;"}
{"prompt":"Obtén el gestor de parámetros de un contenedor de armaduras.","completion":"RebarContainer container = new FilteredElementCollector(doc).OfClass(typeof(RebarContainer)).FirstOrDefault() as RebarContainer;\nRebarContainerParametersManager paramsManager = container.GetParametersManager();"}
{"prompt":"Enable masking coincident lines in print parameters.","completion":"PrintParameters printParams = new PrintParameters();\nprintParams.MaskCoincidentLines = true;"}
{"prompt":"Comprueba si un objeto de geometría es un sólido.","completion":"Solid solid = someGeometryObject as Solid;\nbool isSolid = ExternallyTaggedGeometryValidation.IsSolid(solid);"}
{"prompt":"Obtén el ID de parámetro para la tolerancia de espacio de astilla en análisis de energía.","completion":"ForgeTypeId paramId = ParameterTypeId.RbsEnergyAnalysisSliverSpaceTolerance;"}
{"prompt":"Create a new bounding box from a min and max point.","completion":"BoundingBoxXYZ bbox = new BoundingBoxXYZ();\nbbox.Min = new XYZ(-5, -5, -5);\nbbox.Max = new XYZ(5, 5, 5);"}
{"prompt":"Obtén el ID de la falla cuando no se puede actualizar un muro.","completion":"FailureDefinitionId failureId = BuiltInFailures.CreationFailures.CannotUpdateWall;"}
{"prompt":"Check if a unit is valid for a given spec.","completion":"bool isValid = UnitUtils.IsValidUnit(SpecTypeId.Length, UnitTypeId.Meters);"}
{"prompt":"Obtén un iterador inverso para un conjunto de factores de corrección.","completion":"CorrectionFactorSet cfSet = new CorrectionFactorSet();\n//... add factors ...\nCorrectionFactorSetIterator iterator = cfSet.ReverseIterator();"}
{"prompt":"Duplica un tipo de cable existente.","completion":"WireType wireType = new FilteredElementCollector(doc).OfClass(typeof(WireType)).FirstOrDefault() as WireType;\nWireType newType = wireType.Duplicate(\"NewWireType\") as WireType;"}
{"prompt":"Get the parameter ID for a continuous rail end termination attachment.","completion":"ForgeTypeId paramId = ParameterTypeId.ContinuousrailEndTerminationAttachmentParam;"}
{"prompt":"Establece el desfase de un tramo de barandilla no continuo.","completion":"Railing railing = new FilteredElementCollector(doc).OfClass(typeof(Railing)).FirstOrDefault() as Railing;\nNonContinuousRailInfo railInfo = railing.GetNonContinuousRailInfos().First();\nrailInfo.Offset = 0.2;"}
{"prompt":"Set the line style for a Path of Travel element.","completion":"PathOfTravel pot = new FilteredElementCollector(doc).OfClass(typeof(PathOfTravel)).FirstOrDefault() as PathOfTravel;\nGraphicsStyle lineStyle = new FilteredElementCollector(doc).OfClass(typeof(GraphicsStyle)).FirstOrDefault() as GraphicsStyle;\npot.LineStyle = lineStyle.Id;"}
{"prompt":"Comprueba si una propiedad de un activo de apariencia es de solo lectura.","completion":"AppearanceAssetElement assetElem = new FilteredElementCollector(doc).OfClass(typeof(AppearanceAssetElement)).FirstOrDefault() as AppearanceAssetElement;\nusing(AppearanceAssetEditScope scope = new AppearanceAssetEditScope(assetElem.Document))\n{\n    Asset asset = scope.Start(assetElem.Id);\n    AssetProperty prop = asset.GetFirst();\n    bool isReadOnly = prop.IsReadOnly;\n    scope.Cancel();\n}"}
{"prompt":"Obtén la acción de doble clic para editar un tipo de familia.","completion":"DoubleClickOptions options = DoubleClickOptions.GetDoubleClickOptions();\nDoubleClickAction action = options.GetAction(DoubleClickTarget.FamilyType);"}
{"prompt":"Obtén el área de un bucle de curvas.","completion":"CurveLoop loop = new CurveLoop();\n//... add curves ...\nHostObjectSubcomponentInfo subInfo = new HostObjectSubcomponentInfo(loop);\ndouble area = subInfo.AreaOfCurveLoop;"}
{"prompt":"Crea nuevas opciones de recarga desde el central.","completion":"ReloadLatestOptions options = new ReloadLatestOptions();"}

{"prompt":"Comprueba si la matriz de elementos eliminados está disponible en una diferencia de documentos.","completion":"DocumentDifference docDiff = doc.GetChangedElements(someGuid);\nbool isAvailable = docDiff.AreDeletedElementIdsAvailable;"}
{"prompt":"Get the failure ID for when an automatic landing is converted to a sketched landing.","completion":"FailureDefinitionId failureId = BuiltInFailures.StairRampFailures.AutomaticLandingConvertedToSketchedLandingWarning;"}
{"prompt":"Obtén el ID de la falla cuando un colgador de fabricación no se puede inclinar.","completion":"FailureDefinitionId failureId = BuiltInFailures.MEPFabricationFailures.FabricationHangerCannotBeSloped;"}
{"prompt":"Get the failure ID for an unsatisfied wall association property.","completion":"FailureDefinitionId failureId = BuiltInFailures.SketchFailures.UnsatisfiedWallAssocProp;"}
{"prompt":"Obtén la altura de un conector.","completion":"Connector connector = someMEPElement.MEPModel.ConnectorManager.Connectors.get_Item(0);\ndouble height = connector.Height;"}
{"prompt":"Add a leader to the end of a datum plane.","completion":"DatumPlane datum = new FilteredElementCollector(doc).OfClass(typeof(DatumPlane)).FirstOrDefault() as DatumPlane;\nLeader leader = datum.AddLeader(DatumEnds.End1, doc.ActiveView);"}
{"prompt":"Obtén el ID del parámetro de vista de tabla para el número de detalle de un viewport.","completion":"ForgeTypeId paramId = ParameterTypeId.ViewportDetailNumber;"}
{"prompt":"Get the luminosity value of an initial luminous intensity object.","completion":"InitialLuminousIntensity initialIntensity = new InitialLuminousIntensity(1500);\ndouble luminosity = initialIntensity.Luminosity;"}
{"prompt":"Crea una regla de filtro para un valor menor que una cadena.","completion":"FilterRule rule = ParameterFilterRuleFactory.CreateLessRule(new ElementId(BuiltInParameter.ALL_MODEL_MARK), \"M-05\");"}
{"prompt":"Get the parameter of a point on an edge from an intersection result.","completion":"IntersectionResult result = someIntersectionResult;\ndouble edgeParam = result.EdgeParameter;"}
{"prompt":"Obtén el ID del anfitrión de un contenedor de armaduras.","completion":"RebarContainer container = new FilteredElementCollector(doc).OfClass(typeof(RebarContainer)).FirstOrDefault() as RebarContainer;\nElementId hostId = container.GetHostId();"}
{"prompt":"Enable masking coincident lines in print settings.","completion":"PrintManager printManager = doc.PrintManager;\nprintManager.PrintSetup.CurrentPrintSetting.PrintParameters.MaskCoincidentLines = true;"}
{"prompt":"Comprueba si un objeto geométrico es un sólido.","completion":"GeometryObject geoObj = someElement.get_Geometry(new Options()).First();\nbool isSolid = ExternallyTaggedGeometryValidation.IsSolid(geoObj);"}
{"prompt":"Obtén el ID de parámetro para la tolerancia de espacio de astilla en análisis de energía.","completion":"ForgeTypeId paramId = ParameterTypeId.RbsEnergyAnalysisSliverSpaceTolerance;"}
{"prompt":"Create a new outline from two points.","completion":"Outline outline = new Outline(new XYZ(-10, -10, -10), new XYZ(10, 10, 10));"}
{"prompt":"Obtén el ID de la falla cuando no se puede actualizar un muro.","completion":"FailureDefinitionId failureId = BuiltInFailures.CreationFailures.CannotUpdateWall;"}
{"prompt":"Check if a unit is valid for a given spec.","completion":"bool isValid = UnitUtils.IsValidUnit(SpecTypeId.Area, UnitTypeId.SquareMeters);"}
{"prompt":"Obtén un iterador inverso para un conjunto de factores de corrección.","completion":"CorrectionFactorSet cfSet = new CorrectionFactorSet();\n//... add factors ...\nCorrectionFactorSetIterator reverseIterator = cfSet.ReverseIterator();"}
{"prompt":"Duplica un tipo de cable existente.","completion":"WireType existingType = new FilteredElementCollector(doc).OfClass(typeof(WireType)).FirstOrDefault() as WireType;\nWireType newType = existingType.Duplicate(\"New Wire Type\") as WireType;"}
{"prompt":"Get the parameter ID for a continuous rail end termination attachment.","completion":"ForgeTypeId paramId = ParameterTypeId.ContinuousrailEndTerminationAttachmentParam;"}
{"prompt":"Establece el desfase de un tramo de barandilla no continuo.","completion":"Railing railing = new FilteredElementCollector(doc).OfClass(typeof(Railing)).FirstOrDefault() as Railing;\nNonContinuousRailInfo railInfo = railing.GetNonContinuousRailInfos().First();\nrailInfo.Offset = 0.25;"}
{"prompt":"Set the line style for a Path of Travel element.","completion":"PathOfTravel pathOfTravel = new FilteredElementCollector(doc).OfClass(typeof(PathOfTravel)).FirstOrDefault() as PathOfTravel;\nGraphicsStyle lineStyle = new FilteredElementCollector(doc).OfClass(typeof(GraphicsStyle)).FirstOrDefault() as GraphicsStyle;\npathOfTravel.LineStyle = lineStyle.Id;"}
{"prompt":"Comprueba si una propiedad de un activo de apariencia es de solo lectura.","completion":"AppearanceAssetElement assetElem = new FilteredElementCollector(doc).OfClass(typeof(AppearanceAssetElement)).FirstOrDefault() as AppearanceAssetElement;\nusing (AppearanceAssetEditScope scope = new AppearanceAssetEditScope(doc))\n{\n    Asset asset = scope.Start(assetElem.Id);\n    AssetProperty prop = asset.GetFirst();\n    bool isReadOnly = prop.IsReadOnly;\n    scope.Cancel();\n}"}
{"prompt":"Obtén la acción de doble clic para editar un tipo de familia.","completion":"DoubleClickOptions options = DoubleClickOptions.GetDoubleClickOptions();\nDoubleClickAction action = options.GetAction(DoubleClickTarget.FamilyType);"}
{"prompt":"Obtén el área de un bucle de curvas.","completion":"CurveLoop loop = new CurveLoop();\n// ... add curves to loop ...\nHostObjectSubcomponentInfo subInfo = new HostObjectSubcomponentInfo(loop);\ndouble area = subInfo.AreaOfCurveLoop;"}
{"prompt":"Crea nuevas opciones de recarga desde el central.","completion":"ReloadLatestOptions options = new ReloadLatestOptions();"}
{"prompt":"Obtén el Id de la falla que ocurre cuando un extremo de una viga de celosía no está unido.","completion":"FailureDefinitionId failureId = BuiltInFailures.TrussFailures.TrussNotJoinedWebs;"}
{"prompt":"Crea una nueva línea de rejilla radial.","completion":"Arc arc = Arc.Create(XYZ.Zero, 10, 0, Math.PI, XYZ.BasisX, XYZ.BasisY);\nGrid.Create(doc, arc);"}
{"prompt":"Establece el color emisivo de un efecto de DirectContext3D.","completion":"EffectInstance effect = new EffectInstance();\neffect.SetEmissiveColor(new Color(255, 100, 0));"}
{"prompt":"Check if a SAT export options object is valid.","completion":"SATExportOptions options = new SATExportOptions();\nbool isValid = options.IsValidObject;"}
{"prompt":"Cambia el tipo de junta de un muro en su extremo inicial.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nLocationCurve locCurve = wall.Location as LocationCurve;\nlocCurve.set_JoinType(0, JoinType.Butt);"}
{"prompt":"Get the spec ID for thermal gradient coefficient for moisture capacity.","completion":"ForgeTypeId specId = SpecTypeId.ThermalGradientCoefficientForMoistureCapacity;"}
{"prompt":"Comprueba si un conjunto de cables está vacío.","completion":"ElectricalSystem circuit = new FilteredElementCollector(doc).OfClass(typeof(ElectricalSystem)).FirstOrDefault() as ElectricalSystem;\nWireSet wireSet = circuit.WireManager.GetWireSet();\nbool isEmpty = wireSet.IsEmpty;"}
{"prompt":"Get the parameter ID for an internal multiplanar rebar end connector.","completion":"ForgeTypeId paramId = ParameterTypeId.RebarInternalMultiplanarEndConnector;"}
{"prompt":"Obtén el ángulo de los ejes principales de una sección estructural.","completion":"FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nStructuralSection section = (column.Symbol as FamilySymbol).GetStructuralSection();\ndouble angle = section.PrincipalAxesAngle;"}
{"prompt":"Obtén todos los callouts de referencia de una vista.","completion":"View view = doc.ActiveView;\nICollection<ElementId> calloutIds = view.GetReferenceCallouts();"}
{"prompt":"Check if the UI theme follows the system color theme.","completion":"bool followsSystem = UIThemeManager.FollowSystemColorTheme;"}
{"prompt":"Obtén la ayuda contextual de un botón de la cinta de opciones.","completion":"PushButtonData buttonData = new PushButtonData(\"MyButton\", \"My Button Text\", Assembly.GetExecutingAssembly().Location, \"MyNamespace.MyCommand\");\nContextualHelp help = buttonData.GetContextualHelp();"}

{"prompt":"Obtén el ID de parámetro para la Carga Aparente en la Fase 3.","completion":"ForgeTypeId paramId = ParameterTypeId.RbsElecApparentLoadPhase3;"}
{"prompt":"Get the unit ID for pounds-mass per pound-degree Fahrenheit.","completion":"ForgeTypeId unitId = UnitTypeId.PoundsMassPerPoundDegreeFahrenheit;"}
{"prompt":"Obtén un filtro de elementos a partir de una regla del asesor de rendimiento.","completion":"PerformanceAdviser adviser = PerformanceAdviser.GetPerformanceAdviser();\nPerformanceAdviserRuleId ruleId = adviser.GetAllRuleIds().First();\nElementFilter filter = adviser.GetElementFilterFromRule(ruleId, doc);"}
{"prompt":"Get the group ID for geometry positioning.","completion":"ForgeTypeId groupId = GroupTypeId.GeometryPositioning;"}
{"prompt":"Obtén el equipo base de un sistema MEP.","completion":"MEPSystem system = new FilteredElementCollector(doc).OfClass(typeof(MEPSystem)).FirstOrDefault() as MEPSystem;\nFamilyInstance baseEquipment = system.BaseEquipment;"}
{"prompt":"Create a new instance of ParameterDownloadOptions.","completion":"ParameterDownloadOptions options = new ParameterDownloadOptions();"}
{"prompt":"Elimina un espacio de un conjunto de espacios.","completion":"SpaceSet spaceSet = new SpaceSet();\nSpace space = new FilteredElementCollector(doc).OfClass(typeof(Space)).FirstOrDefault() as Space;\nspaceSet.Insert(space);\nspaceSet.Erase(space);"}
{"prompt":"Get the total depth of a monolithic stairs run type.","completion":"StairsRunType runType = new FilteredElementCollector(doc).OfClass(typeof(StairsRunType)).FirstOrDefault(rt => rt.IsMonolithic) as StairsRunType;\ndouble depth = runType.TotalDepth;"}
{"prompt":"Obtén la descripción de una regla del asesor de rendimiento.","completion":"PerformanceAdviser adviser = PerformanceAdviser.GetPerformanceAdviser();\nstring description = adviser.GetRuleDescription(0);"}
{"prompt":"Get the number of reference arrays in a reference array array.","completion":"ReferenceArrayArray refArrayArray = new ReferenceArrayArray();\nint count = refArrayArray.Size;"}
{"prompt":"Aplica una transformación a una malla.","completion":"Mesh mesh = someSolid.Faces.get_Item(0).Triangulate();\nTransform transform = Transform.CreateRotation(XYZ.BasisZ, Math.PI / 4);\nMesh transformedMesh = mesh.get_Transformed(transform);"}
{"prompt":"Obtén las coordenadas mínimas y máximas de una caja de selección.","completion":"UIDocument uidoc = new UIDocument(doc);\nPickedBox pickedBox = uidoc.Selection.PickBox(PickBoxStyle.Enclosing, \"Select elements\");\nXYZ min = pickedBox.Min;\nXYZ max = pickedBox.Max;"}
{"prompt":"Set the rule string for a filter string rule.","completion":"ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.ALL_MODEL_MARK));\nFilterStringRule rule = new FilterStringRule(pvp, new FilterStringEquals(), \"A\", false);\nrule.RuleString = \"B\";"}
{"prompt":"Obtén el ID de la unidad para milivoltios.","completion":"ForgeTypeId unitId = UnitTypeId.Millivolts;"}
{"prompt":"Get the GroupTypeId for General.","completion":"ForgeTypeId groupId = GroupTypeId.General;"}
{"prompt":"Obtén el Id de la falla que ocurre cuando falla la actualización de una cadena de curvas.","completion":"FailureDefinitionId failureId = BuiltInFailures.GeometryFailures.FailedUpdateCurveChain;"}
{"prompt":"Get the parameter type ID for a condenser water loop.","completion":"ForgeTypeId paramId = ParameterTypeId.MepCondenserWaterLoop;"}
{"prompt":"Obtén el Id de la falla que ocurre cuando el perfil de una barandilla es inválido.","completion":"FailureDefinitionId failureId = BuiltInFailures.StairRampFailures.BadRailProfile;"}
{"prompt":"Get the start point of a curve.","completion":"Line line = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\nXYZ startPoint = line.GetEndPoint(0);"}
{"prompt":"Obtén el ID de parámetro para la relación de la correa V de una rejilla de muro cortina.","completion":"ForgeTypeId paramId = ParameterTypeId.CurtaingridBeltRatioV;"}
{"prompt":"Get the SpecTypeId for Weight.","completion":"ForgeTypeId specId = SpecTypeId.Weight;"}
{"prompt":"Obtén el Id de la falla que ocurre cuando un relleno de acristalamiento inclinado no es permitido.","completion":"FailureDefinitionId failureId = BuiltInFailures.InfillFailures.InfillNoSlopeGlazing;"}
{"prompt":"Get the property name for the tint toggle of a hardwood asset.","completion":"string tintToggleProp = Hardwood.CommonTintToggle;"}
{"prompt":"Compara dos transformaciones 1D para ver si son casi iguales.","completion":"Transform1D t1 = new Transform1D(1, 0.5);\nTransform1D t2 = new Transform1D(1, 0.5000000001);\nbool areAlmostEqual = t1.AlmostEqual(t2);"}
{"prompt":"Get the parameter ID for a sketch plane.","completion":"ForgeTypeId paramId = ParameterTypeId.SketchPlaneParam;"}
{"prompt":"Comprueba si un nivel puede ser conectado a una escalera de varios pisos.","completion":"MultistoryStairs multiStairs = new FilteredElementCollector(doc).OfClass(typeof(MultistoryStairs)).FirstOrDefault() as MultistoryStairs;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nbool canConnect = multiStairs.CanConnectLevel(level.Id);"}
{"prompt":"Get the failure ID for when a toposolid's slope exceeds the threshold.","completion":"FailureDefinitionId failureId = BuiltInFailures.SiteFailures.ToposolidSlopeExceedsThreshold;"}
{"prompt":"Obtén el Id de la falla para una cota con unidad de longitud común.","completion":"FailureDefinitionId failureId = BuiltInFailures.RebarShapeFailures.DimensionWithCommonLengthUnit;"}
{"prompt":"Get the parameter ID for sliver space tolerance in energy analysis.","completion":"ForgeTypeId paramId = ParameterTypeId.RbsEnergyAnalysisSliverSpaceTolerance;"}
{"prompt":"Crea un contorno a partir de dos puntos.","completion":"Outline outline = new Outline(new XYZ(0,0,0), new XYZ(10,10,10));"}
{"prompt":"Get the failure ID for when a wall cannot be updated.","completion":"FailureDefinitionId failureId = BuiltInFailures.CreationFailures.CannotUpdateWall;"}
{"prompt":"Comprueba si los metros son una unidad válida para la especificación de longitud.","completion":"bool isValid = UnitUtils.IsValidUnit(SpecTypeId.Length, UnitTypeId.Meters);"}
{"prompt":"Obtén un iterador inverso para un conjunto de factores de corrección.","completion":"CorrectionFactorSet cfSet = new CorrectionFactorSet();\n//... add factors ...\nCorrectionFactorSetIterator iterator = cfSet.ReverseIterator();"}
{"prompt":"Duplica un tipo de cable existente.","completion":"WireType wireType = new FilteredElementCollector(doc).OfClass(typeof(WireType)).FirstOrDefault() as WireType;\nWireType newWireType = wireType.Duplicate(\"New Wire Type\") as WireType;"}
{"prompt":"Get the parameter ID for a continuous rail end termination attachment.","completion":"ForgeTypeId paramId = ParameterTypeId.ContinuousrailEndTerminationAttachmentParam;"}
{"prompt":"Establece el desfase de un tramo de barandilla no continuo.","completion":"Railing railing = new FilteredElementCollector(doc).OfClass(typeof(Railing)).FirstOrDefault() as Railing;\nNonContinuousRailInfo railInfo = rail.GetNonContinuousRailInfos().First();\nrailInfo.Offset = 0.2;"}
{"prompt":"Set the line style for a Path of Travel element.","completion":"PathOfTravel pot = new FilteredElementCollector(doc).OfClass(typeof(PathOfTravel)).FirstOrDefault() as PathOfTravel;\nGraphicsStyle lineStyle = new FilteredElementCollector(doc).OfClass(typeof(GraphicsStyle)).FirstOrDefault() as GraphicsStyle;\npot.LineStyle = lineStyle.Id;"}
{"prompt":"Comprueba si una propiedad de un activo de apariencia es de solo lectura.","completion":"AppearanceAssetElement assetElem = new FilteredElementCollector(doc).OfClass(typeof(AppearanceAssetElement)).FirstOrDefault() as AppearanceAssetElement;\nusing (AppearanceAssetEditScope scope = new AppearanceAssetEditScope(assetElem.Document))\n{\n    Asset asset = scope.Start(assetElem.Id);\n    AssetProperty prop = asset.GetFirst();\n    bool isReadOnly = prop.IsReadOnly;\n    scope.Cancel();\n}"}
{"prompt":"Obtén la acción de doble clic para editar un tipo de familia.","completion":"DoubleClickOptions options = DoubleClickOptions.GetDoubleClickOptions();\nDoubleClickAction action = options.GetAction(DoubleClickTarget.FamilyType);"}
{"prompt":"Obtén el área de un bucle de curvas.","completion":"CurveLoop loop = new CurveLoop();\n// ... add curves to loop ...\nHostObjectSubcomponentInfo subInfo = new HostObjectSubcomponentInfo(loop);\ndouble area = subInfo.AreaOfCurveLoop;"}
{"prompt":"Crea nuevas opciones de recarga desde el central.","completion":"ReloadLatestOptions options = new ReloadLatestOptions();"}
{"prompt":"Obtén el Id de la falla que ocurre cuando un extremo de una viga de celosía no está unido.","completion":"FailureDefinitionId failureId = BuiltInFailures.TrussFailures.TrussNotJoinedWebs;"}
{"prompt":"Crea una nueva línea de rejilla radial.","completion":"Arc arc = Arc.Create(XYZ.Zero, 5, 0, Math.PI, XYZ.BasisX, XYZ.BasisY);\nGrid.Create(doc, arc);"}
{"prompt":"Establece el color emisivo de un efecto de DirectContext3D.","completion":"EffectInstance effect = new EffectInstance();\neffect.SetEmissiveColor(new Color(255, 0, 0));"}
{"prompt":"Check if a SAT export options object is valid.","completion":"SATExportOptions options = new SATExportOptions();\nbool isValid = options.IsValidObject;"}
{"prompt":"Cambia el tipo de junta de un muro en su extremo inicial.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nLocationCurve locCurve = wall.Location as LocationCurve;\nlocCurve.set_JoinType(0, JoinType.Miter);"}
{"prompt":"Get the spec ID for thermal gradient coefficient for moisture capacity.","completion":"ForgeTypeId specId = SpecTypeId.ThermalGradientCoefficientForMoistureCapacity;"}
{"prompt":"Comprueba si un conjunto de cables está vacío.","completion":"ElectricalSystem circuit = new FilteredElementCollector(doc).OfClass(typeof(ElectricalSystem)).FirstOrDefault() as ElectricalSystem;\nWireSet wireSet = circuit.WireManager.GetWireSet();\nbool isEmpty = wireSet.IsEmpty;"}
{"prompt":"Get the parameter ID for an internal multiplanar rebar end connector.","completion":"ForgeTypeId paramId = ParameterTypeId.RebarInternalMultiplanarEndConnector;"}
{"prompt":"Obtén el ángulo de los ejes principales de una sección estructural.","completion":"FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nStructuralSection section = (column.Symbol as FamilySymbol).GetStructuralSection();\ndouble angle = section.PrincipalAxesAngle;"}
{"prompt":"Obtén todos los callouts de referencia de una vista.","completion":"View view = doc.ActiveView;\nICollection<ElementId> calloutIds = view.GetReferenceCallouts();"}
{"prompt":"Check if the UI theme follows the system color theme.","completion":"bool followsSystem = UIThemeManager.FollowSystemColorTheme;"}
{"prompt":"Obtén la ayuda contextual de un botón de la cinta de opciones.","completion":"PushButtonData buttonData = new PushButtonData(\"MyButton\", \"Button Text\", Assembly.GetExecutingAssembly().Location, \"Namespace.ClassName\");\nContextualHelp help = buttonData.GetContextualHelp();"}

{"prompt":"Crea un nuevo objeto DisplacementElement para un elemento seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element);\nElement elem = doc.GetElement(pickedRef.ElementId);\nDisplacementElement dispElem = DisplacementElement.Create(doc, elem.Id, doc.ActiveView.Id);"}
{"prompt":"Split a fabrication part at a specified point.","completion":"FabricationPart part = new FilteredElementCollector(doc).OfClass(typeof(FabricationPart)).FirstOrDefault() as FabricationPart;\nLocationCurve curve = part.Location as LocationCurve;\nXYZ midPoint = curve.Curve.Evaluate(0.5, true);\nElementId newPartId = part.SplitStraight(midPoint);"}
{"prompt":"Obtén el ID de la falla cuando no se puede arreglar un problema.","completion":"FailureDefinitionId failureId = BuiltInFailures.GeneralFailures.CannotFixProblem;"}
{"prompt":"Get the reason for a connection validation warning.","completion":"ConnectionValidationWarning warning = new ConnectionValidationWarning(ConnectionValidationReason.DifferentConnectorsSize, ConnectionResolution.Disconnected);\nConnectionValidationReason reason = warning.Reason;"}
{"prompt":"Obtén el ID de la clasificación de carga para una fila en una tabla de planificación de paneles.","completion":"PanelScheduleView schedule = new FilteredElementCollector(doc).OfClass(typeof(PanelScheduleView)).FirstOrDefault() as PanelScheduleView;\nElementId loadClassId = schedule.GetLoadClassificationId(0);"}
{"prompt":"Get the start parameter of a curve's extents.","completion":"CurveExtents extents = someCurve.GetExtents();\ndouble startParam = extents.StartParameter;"}
{"prompt":"Divide horizontalmente la región de recorte de una vista.","completion":"ViewCropRegionShapeManager cropManager = doc.ActiveView.GetCropRegionShapeManager();\ncropManager.SplitRegionHorizontally(0, 0.5, 0.5);"}
{"prompt":"Get the unit symbol for cubic meters per hour per square meter.","completion":"ForgeTypeId symbolId = SymbolTypeId.MSup3PerHMSup2;"}
{"prompt":"Obtén el ID de la falla cuando la flexión de ángulo de una pieza de fabricación excede la tolerancia.","completion":"FailureDefinitionId failureId = BuiltInFailures.MEPFabricationFailures.FabricationPartExceededAngleFlexToleranceWarning;"}
{"prompt":"Get the position of a point boundary condition.","completion":"BoundaryConditions bcs = new FilteredElementCollector(doc).OfClass(typeof(BoundaryConditions)).FirstOrDefault(bc => bc.GetBoundaryConditionsType() == BoundaryConditionsType.Point) as BoundaryConditions;\nXYZ point = bcs.Point;"}
{"prompt":"Obtén la configuración de un manejador de DirectContext3D.","completion":"DirectContext3DHandleOverrides overrides = doc.ActiveView.GetDirectContext3DHandleOverrides();\nDirectContext3DHandleSettings settings = overrides.GetDirectContext3DHandleSettings(doc, someHandleId);"}
{"prompt":"Get the failure ID for when a railing's elevation profile cannot be computed.","completion":"FailureDefinitionId failureId = BuiltInFailures.SketchFailures.CannotComputeRailingsElevationError;"}
{"prompt":"Obtén el ID del parámetro para la rotación del gancho de una armadura al final.","completion":"ForgeTypeId paramId = ParameterTypeId.RebarHookRotationAtEndSchedulesTagsFilters;"}
{"prompt":"Get the ID of the currently active add-in.","completion":"AddInId activeAddinId = uiApplication.ActiveAddInId;"}
{"prompt":"Establece el radio del filete exterior para una sección estructural H general.","completion":"StructuralSectionGeneralH section = new StructuralSectionGeneralH();\nsection.OuterFillet = 0.5;"}
{"prompt":"Get the unit ID for per mille.","completion":"ForgeTypeId unitId = UnitTypeId.PerMille;"}
{"prompt":"Obtén el parámetro de un elemento de control usando su BuiltInParameter.","completion":"Control control = new FilteredElementCollector(doc).OfClass(typeof(Control)).FirstOrDefault() as Control;\nParameter param = control.get_Parameter(BuiltInParameter.ELEM_FAMILY_PARAM);"}
{"prompt":"Get the parameter ID for a rebar number suffix.","completion":"ForgeTypeId paramId = ParameterTypeId.RebarNumberSuffix;"}
{"prompt":"Check if the current document is a family document.","completion":"bool isFamilyDoc = doc.IsFamilyDocument;"}
{"prompt":"Obtén el ID de la falla cuando hay un conflicto de solape de habitaciones entre una opción de diseño y el modelo principal.","completion":"FailureDefinitionId failureId = BuiltInFailures.RoomFailures.OptionConflictRoomOverlapMain;"}
{"prompt":"Get the air system data from an MEP analytical system.","completion":"MEPAnalyticalSystem system = new FilteredElementCollector(doc).OfClass(typeof(MEPAnalyticalSystem)).FirstOrDefault() as MEPAnalyticalSystem;\nAirSystemData airData = system.GetAirSystemData();"}
{"prompt":"Obtén el ID de la falla para cuando no se selecciona ningún elemento.","completion":"FailureDefinitionId failureId = BuiltInFailures.SelectionFailures.NoElementSelected;"}
{"prompt":"Comprueba si un objeto de rejilla de relleno es válido.","completion":"FillGrid fillGrid = new FillGrid();\nbool isValid = fillGrid.IsValidObject;"}
{"prompt":"Get the failure ID for when a wall joint type fails to change.","completion":"FailureDefinitionId failureId = BuiltInFailures.WallJoinFailures.FailedToChangeWallJointsTypeFailure;"}
{"prompt":"Obtén la transformación de la instancia de un nodo de detalle de cara.","completion":"Transform transform = someFaceDetailNode.GetInstanceTransform();"}
{"prompt":"Submit the current print job using the PrintManager.","completion":"doc.PrintManager.SubmitPrint(doc.ActiveView);"}
{"prompt":"Obtén el ID de parámetro para la abertura de raíz principal de una soldadura de elemento de acero.","completion":"ForgeTypeId paramId = ParameterTypeId.SteelElemWeldMainRootopening;"}
{"prompt":"Elimina un parámetro de un conjunto de parámetros.","completion":"ParameterSet paramSet = someElement.Parameters;\nParameter paramToErase = paramSet.get_Item(\"Comments\");\nparamSet.Erase(paramToErase);"}
{"prompt":"Convert a user-visible path to a ModelPath.","completion":"ModelPath modelPath = ModelPathUtils.ConvertUserVisiblePathToModelPath(\"C:\\\\myProject.rvt\");"}
{"prompt":"Obtén el nombre de un elemento de la cinta de opciones.","completion":"RibbonPanel panel = uiApplication.CreateRibbonPanel(\"My Panel\");\nRibbonItem item = panel.AddItem(new PushButtonData(\"Button1\", \"My Button\", Assembly.GetExecutingAssembly().Location, \"MyNamespace.MyCommand\"));\nstring name = item.Name;"}
{"prompt":"Get the lock callback from transact with central options.","completion":"TransactWithCentralOptions options = new TransactWithCentralOptions();\nICentralLockedCallback callback = options.GetLockCallback();"}
{"prompt":"Establece el ID de tipo para un elemento DirectShape.","completion":"DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\nDirectShapeType type = DirectShapeType.Create(doc, \"My DirectShape Type\", new ElementId(BuiltInCategory.OST_GenericModel));\nds.SetTypeId(type.Id);"}
{"prompt":"Get the analytical shading surfaces from an energy analysis detail model.","completion":"EnergyAnalysisDetailModel detailModel = EnergyAnalysisDetailModel.GetFromDocument(doc);\nIList<EnergyAnalysisSurface> shadingSurfaces = detailModel.GetAnalyticalShadingSurfaces();"}
{"prompt":"Establece el ancho de un segmento de pliegue de una sección estructural.","completion":"StructuralSectionSigmaProfile sigmaProfile = new StructuralSectionSigmaProfile();\nsigmaProfile.BendWidth = 0.5;"}
{"prompt":"Get the parameter ID for the elastic modulus of a structural section's strong axis.","completion":"ForgeTypeId paramId = ParameterTypeId.StructuralSectionCommonElasticModulusStrongAxis;"}
{"prompt":"Habilita el borde visible para un editor de texto.","completion":"TextEditorOptions options = new TextEditorOptions();\noptions.ShowBorder = true;"}
{"prompt":"Set the restrict palette option for a fabrication network change service.","completion":"FabricationNetworkChangeService changeService = new FabricationNetworkChangeService(doc, someElement.Id);\nchangeService.SetRestrictPalette(true);"}
{"prompt":"Añade un rango de contornos a la configuración de contornos.","completion":"ContourSetting contourSetting = ContourSetting.GetContourSetting(doc);\nElementId subcategoryId = new FilteredElementCollector(doc).OfClass(typeof(GraphicsStyle)).FirstOrDefault().Id;\ncontourSetting.AddContourRange(0, 100, 10, subcategoryId);"}
{"prompt":"Get the parameter ID for text position.","completion":"ForgeTypeId paramId = ParameterTypeId.TextPosition;"}
{"prompt":"Comprueba si un documento está desvinculado.","completion":"bool isDetached = doc.IsDetached;"}
{"prompt":"Get all ribbon panels on the 'Add-Ins' tab.","completion":"List<RibbonPanel> panels = uiApplication.GetRibbonPanels(Tab.AddIns);"}
{"prompt":"Obtén el vector X de una cara plana.","completion":"PlanarFace planarFace = someSolid.Faces.get_Item(0) as PlanarFace;\nXYZ xVector = planarFace.XVector;"}
{"prompt":"Check if path reinforcement is unobscured in a view.","completion":"PathReinforcement pathRein = new FilteredElementCollector(doc).OfClass(typeof(PathReinforcement)).FirstOrDefault() as PathReinforcement;\nView view = doc.ActiveView;\nbool isUnobscured = pathRein.IsUnobscuredInView(view);"}
{"prompt":"Obtén el ID de unidad para 1:Ratio.","completion":"ForgeTypeId unitId = UnitTypeId.OneToRatio;"}
{"prompt":"Check if an element can have a type assigned.","completion":"Element elem = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault();\nbool canHaveType = elem.CanHaveTypeAssigned();"}
{"prompt":"Obtén el ID de parámetro para el número de detalle de un viewport.","completion":"ForgeTypeId paramId = ParameterTypeId.ViewportDetailNumber;"}
{"prompt":"Get the luminosity value of an initial luminous intensity object.","completion":"InitialLuminousIntensity initialIntensity = new InitialLuminousIntensity(1500);\ndouble luminosity = initialIntensity.Luminosity;"}
{"prompt":"Crea una regla de filtro para un valor menor que una cadena.","completion":"FilterRule rule = ParameterFilterRuleFactory.CreateLessRule(new ElementId(BuiltInParameter.ALL_MODEL_MARK), \"M-100\");"}
{"prompt":"Get the parameter of a point on an edge from an intersection result.","completion":"IntersectionResult result = someIntersectionResult;\ndouble edgeParam = result.EdgeParameter;"}
{"prompt":"Obtén el gestor de parámetros de un contenedor de armaduras.","completion":"RebarContainer container = new FilteredElementCollector(doc).OfClass(typeof(RebarContainer)).FirstOrDefault() as RebarContainer;\nRebarContainerParametersManager paramsManager = container.GetParametersManager();"}
{"prompt":"Enable masking coincident lines in print settings.","completion":"PrintManager printManager = doc.PrintManager;\nprintManager.PrintSetup.CurrentPrintSetting.PrintParameters.MaskCoincidentLines = true;"}
{"prompt":"Comprueba si un objeto de geometría es un sólido.","completion":"GeometryObject geoObj = someElement.get_Geometry(new Options()).First();\nbool isSolid = ExternallyTaggedGeometryValidation.IsSolid(geoObj);"}
{"prompt":"Obtén el ID de parámetro para la tolerancia de espacio de astilla en análisis de energía.","completion":"ForgeTypeId paramId = ParameterTypeId.RbsEnergyAnalysisSliverSpaceTolerance;"}
{"prompt":"Create a new bounding box from a min and max point.","completion":"BoundingBoxXYZ bbox = new BoundingBoxXYZ();\nbbox.Min = new XYZ(-5, -5, -5);\nbbox.Max = new XYZ(5, 5, 5);"}
{"prompt":"Obtén el ID de la falla cuando no se puede actualizar un muro.","completion":"FailureDefinitionId failureId = BuiltInFailures.CreationFailures.CannotUpdateWall;"}
{"prompt":"Check if a unit is valid for a given spec.","completion":"bool isValid = UnitUtils.IsValidUnit(SpecTypeId.Area, UnitTypeId.SquareMeters);"}
{"prompt":"Obtén un iterador inverso para un conjunto de factores de corrección.","completion":"CorrectionFactorSet cfSet = new CorrectionFactorSet();\n//... add factors ...\nCorrectionFactorSetIterator reverseIterator = cfSet.ReverseIterator();"}
{"prompt":"Duplica un tipo de cable existente.","completion":"WireType existingType = new FilteredElementCollector(doc).OfClass(typeof(WireType)).FirstOrDefault() as WireType;\nWireType newType = existingType.Duplicate(\"New Wire Type\") as WireType;"}
{"prompt":"Get the parameter ID for a continuous rail end termination attachment.","completion":"ForgeTypeId paramId = ParameterTypeId.ContinuousrailEndTerminationAttachmentParam;"}
{"prompt":"Establece el desfase de un tramo de barandilla no continuo.","completion":"Railing railing = new FilteredElementCollector(doc).OfClass(typeof(Railing)).FirstOrDefault() as Railing;\nNonContinuousRailInfo railInfo = railing.GetNonContinuousRailInfos().First();\nrailInfo.Offset = 0.25;"}
{"prompt":"Set the line style for a Path of Travel element.","completion":"PathOfTravel pathOfTravel = new FilteredElementCollector(doc).OfClass(typeof(PathOfTravel)).FirstOrDefault() as PathOfTravel;\nGraphicsStyle lineStyle = new FilteredElementCollector(doc).OfClass(typeof(GraphicsStyle)).FirstOrDefault() as GraphicsStyle;\npot.LineStyle = lineStyle.Id;"}
{"prompt":"Comprueba si una propiedad de un activo de apariencia es de solo lectura.","completion":"AppearanceAssetElement assetElem = new FilteredElementCollector(doc).OfClass(typeof(AppearanceAssetElement)).FirstOrDefault() as AppearanceAssetElement;\nusing(AppearanceAssetEditScope scope = new AppearanceAssetEditScope(assetElem.Document))\n{\n    Asset asset = scope.Start(assetElem.Id);\n    AssetProperty prop = asset.GetFirst();\n    bool isReadOnly = prop.IsReadOnly;\n    scope.Cancel();\n}"}
{"prompt":"Obtén la acción de doble clic para editar un tipo de familia.","completion":"DoubleClickOptions options = DoubleClickOptions.GetDoubleClickOptions();\nDoubleClickAction action = options.GetAction(DoubleClickTarget.FamilyType);"}
{"prompt":"Obtén el área de un bucle de curvas.","completion":"CurveLoop loop = new CurveLoop();\n// ... add curves to loop ...\nHostObjectSubcomponentInfo subInfo = new HostObjectSubcomponentInfo(loop);\ndouble area = subInfo.AreaOfCurveLoop;"}
{"prompt":"Crea nuevas opciones de recarga desde el central.","completion":"ReloadLatestOptions options = new ReloadLatestOptions();"}

{"prompt":"Crea un nuevo filtro de almacenamiento extensible.","completion":"Guid schemaGuid = new Guid(\"YOUR_SCHEMA_GUID_HERE\");\nExtensibleStorageFilter filter = new ExtensibleStorageFilter(schemaGuid);"}
{"prompt":"Get the parameter ID for load classification in an electrical load summary.","completion":"ForgeTypeId paramId = ParameterTypeId.RbsElecLoadsummaryLoadclassificationParam;"}
{"prompt":"Determina si un botón desplegable está sincronizado con el elemento actual.","completion":"SplitButton splitButton = new SplitButton(\"MySplitButton\", \"Split Button\");\nbool isSynced = splitButton.IsSynchronizedWithCurrentItem;"}
{"prompt":"Set the boundary and path for a sketched landing.","completion":"StairsLanding landing = new FilteredElementCollector(doc).OfClass(typeof(StairsLanding)).FirstOrDefault() as StairsLanding;\nCurveLoop boundary = new CurveLoop();\n//... add curves to boundary\nCurveLoop path = new CurveLoop();\n//... add curves to path\nlanding.SetSketchedLandingBoundaryAndPath(doc, boundary, path);"}
{"prompt":"Crea una nueva apertura rectangular en un muro.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nXYZ p1 = new XYZ(2, 2, 2);\nXYZ p2 = new XYZ(4, 4, 4);\ndoc.Create.NewOpening(wall, p1, p2);"}
{"prompt":"Get the roughness of a MEP section.","completion":"MEPSection section = MEPSection.GetMEPSection(someMEPCurve);\ndouble roughness = section.Roughness;"}
{"prompt":"Obtén el nombre de propiedad para el bloqueo de escala de una textura.","completion":"string propName = Checker.TextureScaleLock;"}
{"prompt":"Create a new export linetype key.","completion":"ExportLinetypeKey key = new ExportLinetypeKey();"}
{"prompt":"Comprueba si el documento actual es un documento de familia.","completion":"bool isFamilyDoc = doc.IsFamilyDocument;"}
{"prompt":"Get the failure ID for when a room in a design option overlaps with a room in the main model.","completion":"FailureDefinitionId failureId = BuiltInFailures.RoomFailures.OptionConflictRoomOverlapMain;"}
{"prompt":"Crea un nuevo sistema analítico.","completion":"MEPAnalyticalSystem.Create(doc, AnalyticalSystemDomain.AirSystem, \"My Air System\");"}
{"prompt":"Get the failure ID for when no element is selected.","completion":"FailureDefinitionId failureId = BuiltInFailures.SelectionFailures.NoElementSelected;"}
{"prompt":"Comprueba si un objeto de rejilla de relleno es válido.","completion":"FillGrid fillGrid = new FillGrid();\nbool isValid = fillGrid.IsValidObject;"}
{"prompt":"Get the failure ID for when a wall joint type fails to change.","completion":"FailureDefinitionId failureId = BuiltInFailures.WallJoinFailures.FailedToChangeWallJointsTypeFailure;"}
{"prompt":"Obtén la transformación de la instancia de un nodo de detalle de cara.","completion":"Transform transform = faceDetailNode.GetInstanceTransform();"}
{"prompt":"Get the parameter ID for the main root opening of a steel element weld.","completion":"ForgeTypeId paramId = ParameterTypeId.SteelElemWeldMainRootopening;"}
{"prompt":"Elimina un parámetro de un conjunto de parámetros.","completion":"ParameterSet paramSet = someElement.Parameters;\nParameter paramToErase = paramSet.get_Item(\"Comments\");\nparamSet.Erase(paramToErase);"}
{"prompt":"Convert a user-visible path to a ModelPath.","completion":"string path = \"RSN://myServer/myFolder/myProject.rvt\";\nModelPath modelPath = ModelPathUtils.ConvertUserVisiblePathToModelPath(path);"}
{"prompt":"Obtén el nombre de un elemento de la cinta de opciones.","completion":"RibbonPanel panel = uiApplication.CreateRibbonPanel(\"My Panel\");\nRibbonItem item = panel.AddItem(new PushButtonData(\"Button1\", \"My Button\", Assembly.GetExecutingAssembly().Location, \"MyNamespace.MyCommand\"));\nstring name = item.Name;"}
{"prompt":"Get the lock callback from transact with central options.","completion":"TransactWithCentralOptions options = new TransactWithCentralOptions();\nICentralLockedCallback callback = options.GetLockCallback();"}
{"prompt":"Establece el ID de tipo para un elemento DirectShape.","completion":"DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\nDirectShapeType type = DirectShapeType.Create(doc, \"My DirectShape Type\", new ElementId(BuiltInCategory.OST_GenericModel));\nds.SetTypeId(type.Id);"}
{"prompt":"Get the analytical shading surfaces from an energy analysis detail model.","completion":"EnergyAnalysisDetailModel detailModel = EnergyAnalysisDetailModel.GetFromDocument(doc);\nIList<EnergyAnalysisSurface> shadingSurfaces = detailModel.GetAnalyticalShadingSurfaces();"}
{"prompt":"Establece el ancho de un segmento de pliegue de una sección estructural.","completion":"StructuralSectionSigmaProfile sigmaProfile = new StructuralSectionSigmaProfile();\nsigmaProfile.BendWidth = 0.5;"}
{"prompt":"Get the parameter ID for the elastic modulus of a structural section's strong axis.","completion":"ForgeTypeId paramId = ParameterTypeId.StructuralSectionCommonElasticModulusStrongAxis;"}
{"prompt":"Habilita el borde visible para un editor de texto.","completion":"TextEditorOptions options = new TextEditorOptions();\noptions.ShowBorder = true;"}
{"prompt":"Set the restrict palette option for a fabrication network change service.","completion":"FabricationNetworkChangeService changeService = new FabricationNetworkChangeService(doc, someElement.Id);\nchangeService.SetRestrictPalette(true);"}
{"prompt":"Añade un rango de contornos a la configuración de contornos.","completion":"ContourSetting contourSetting = ContourSetting.GetContourSetting(doc);\nElementId subcategoryId = new FilteredElementCollector(doc).OfClass(typeof(GraphicsStyle)).FirstOrDefault().Id;\ncontourSetting.AddContourRange(0, 100, 10, subcategoryId);"}
{"prompt":"Get the parameter ID for text position.","completion":"ForgeTypeId paramId = ParameterTypeId.TextPosition;"}
{"prompt":"Comprueba si un documento está desvinculado.","completion":"bool isDetached = doc.IsDetached;"}
{"prompt":"Get all ribbon panels on the 'Add-Ins' tab.","completion":"List<RibbonPanel> panels = uiApplication.GetRibbonPanels(Tab.AddIns);"}
{"prompt":"Obtén el vector X de una cara plana.","completion":"PlanarFace planarFace = someSolid.Faces.get_Item(0) as PlanarFace;\nXYZ xVector = planarFace.XVector;"}
{"prompt":"Check if path reinforcement is unobscured in a view.","completion":"PathReinforcement pathRein = new FilteredElementCollector(doc).OfClass(typeof(PathReinforcement)).FirstOrDefault() as PathReinforcement;\nView view = doc.ActiveView;\nbool isUnobscured = pathRein.IsUnobscuredInView(view);"}
{"prompt":"Obtén el ID de unidad para 1:Ratio.","completion":"ForgeTypeId unitId = UnitTypeId.OneToRatio;"}
{"prompt":"Check if an element can have a type assigned.","completion":"Element elem = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault();\nbool canHaveType = elem.CanHaveTypeAssigned();"}
{"prompt":"Obtén el ID de parámetro para el número de detalle de un viewport.","completion":"ForgeTypeId paramId = ParameterTypeId.ViewportDetailNumber;"}
{"prompt":"Get the luminosity value of an initial luminous intensity object.","completion":"InitialLuminousIntensity initialIntensity = new InitialLuminousIntensity(1500);\ndouble luminosity = initialIntensity.Luminosity;"}
{"prompt":"Crea una regla de filtro para un valor menor que una cadena.","completion":"FilterRule rule = ParameterFilterRuleFactory.CreateLessRule(new ElementId(BuiltInParameter.ALL_MODEL_MARK), \"M-05\");"}
{"prompt":"Get the parameter of a point on an edge from an intersection result.","completion":"IntersectionResult result = someIntersectionResult;\ndouble edgeParam = result.EdgeParameter;"}
{"prompt":"Obtén el gestor de parámetros de un contenedor de armaduras.","completion":"RebarContainer container = new FilteredElementCollector(doc).OfClass(typeof(RebarContainer)).FirstOrDefault() as RebarContainer;\nRebarContainerParametersManager paramsManager = container.GetParametersManager();"}
{"prompt":"Enable masking coincident lines in print settings.","completion":"PrintManager printManager = doc.PrintManager;\nprintManager.PrintSetup.CurrentPrintSetting.PrintParameters.MaskCoincidentLines = true;"}
{"prompt":"Comprueba si un objeto de geometría es un sólido.","completion":"GeometryObject geoObj = someElement.get_Geometry(new Options()).First();\nbool isSolid = ExternallyTaggedGeometryValidation.IsSolid(geoObj);"}
{"prompt":"Obtén el ID de parámetro para la tolerancia de espacio de astilla en análisis de energía.","completion":"ForgeTypeId paramId = ParameterTypeId.RbsEnergyAnalysisSliverSpaceTolerance;"}
{"prompt":"Create a new bounding box from a min and max point.","completion":"BoundingBoxXYZ bbox = new BoundingBoxXYZ();\nbbox.Min = new XYZ(-5, -5, -5);\nbbox.Max = new XYZ(5, 5, 5);"}
{"prompt":"Obtén el ID de la falla cuando no se puede actualizar un muro.","completion":"FailureDefinitionId failureId = BuiltInFailures.CreationFailures.CannotUpdateWall;"}
{"prompt":"Check if a unit is valid for a given spec.","completion":"bool isValid = UnitUtils.IsValidUnit(SpecTypeId.Area, UnitTypeId.SquareMeters);"}
{"prompt":"Obtén un iterador inverso para un conjunto de factores de corrección.","completion":"CorrectionFactorSet cfSet = new CorrectionFactorSet();\n//... add factors ...\nCorrectionFactorSetIterator reverseIterator = cfSet.ReverseIterator();"}
{"prompt":"Duplica un tipo de cable existente.","completion":"WireType existingType = new FilteredElementCollector(doc).OfClass(typeof(WireType)).FirstOrDefault() as WireType;\nWireType newType = existingType.Duplicate(\"New Wire Type\") as WireType;"}
{"prompt":"Get the parameter ID for a continuous rail end termination attachment.","completion":"ForgeTypeId paramId = ParameterTypeId.ContinuousrailEndTerminationAttachmentParam;"}
{"prompt":"Establece el desfase de un tramo de barandilla no continuo.","completion":"Railing railing = new FilteredElementCollector(doc).OfClass(typeof(Railing)).FirstOrDefault() as Railing;\nNonContinuousRailInfo railInfo = railing.GetNonContinuousRailInfos().First();\nrailInfo.Offset = 0.25;"}
{"prompt":"Set the line style for a Path of Travel element.","completion":"PathOfTravel pathOfTravel = new FilteredElementCollector(doc).OfClass(typeof(PathOfTravel)).FirstOrDefault() as PathOfTravel;\nGraphicsStyle lineStyle = new FilteredElementCollector(doc).OfClass(typeof(GraphicsStyle)).FirstOrDefault() as GraphicsStyle;\npot.LineStyle = lineStyle.Id;"}
{"prompt":"Comprueba si una propiedad de un activo de apariencia es de solo lectura.","completion":"AppearanceAssetElement assetElem = new FilteredElementCollector(doc).OfClass(typeof(AppearanceAssetElement)).FirstOrDefault() as AppearanceAssetElement;\nusing(AppearanceAssetEditScope scope = new AppearanceAssetEditScope(assetElem.Document))\n{\n    Asset asset = scope.Start(assetElem.Id);\n    AssetProperty prop = asset.GetFirst();\n    bool isReadOnly = prop.IsReadOnly;\n    scope.Cancel();\n}"}
{"prompt":"Obtén la acción de doble clic para editar un tipo de familia.","completion":"DoubleClickOptions options = DoubleClickOptions.GetDoubleClickOptions();\nDoubleClickAction action = options.GetAction(DoubleClickTarget.FamilyType);"}
{"prompt":"Obtén el área de un bucle de curvas.","completion":"CurveLoop loop = new CurveLoop();\n// ... add curves to loop ...\nHostObjectSubcomponentInfo subInfo = new HostObjectSubcomponentInfo(loop);\ndouble area = subInfo.AreaOfCurveLoop;"}
{"prompt":"Crea nuevas opciones de recarga desde el central.","completion":"ReloadLatestOptions options = new ReloadLatestOptions();"}

{"prompt":"Crea un nuevo objeto DisplacementElement para un elemento seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element);\nElement elem = doc.GetElement(pickedRef.ElementId);\nDisplacementElement dispElem = DisplacementElement.Create(doc, elem.Id, doc.ActiveView.Id);"}
{"prompt":"Split a fabrication part at a specified point.","completion":"FabricationPart part = new FilteredElementCollector(doc).OfClass(typeof(FabricationPart)).FirstOrDefault() as FabricationPart;\nLocationCurve curve = part.Location as LocationCurve;\nXYZ midPoint = curve.Curve.Evaluate(0.5, true);\nElementId newPartId = part.SplitStraight(midPoint);"}
{"prompt":"Obtén el ID de la falla cuando no se puede arreglar un problema.","completion":"FailureDefinitionId failureId = BuiltInFailures.GeneralFailures.CannotFixProblem;"}
{"prompt":"Get the reason for a connection validation warning.","completion":"ConnectionValidationWarning warning = new ConnectionValidationWarning(ConnectionValidationReason.DifferentConnectorsSize, ConnectionResolution.Disconnected);\nConnectionValidationReason reason = warning.Reason;"}
{"prompt":"Obtén el ID de la clasificación de carga para una fila en una tabla de planificación de paneles.","completion":"PanelScheduleView schedule = new FilteredElementCollector(doc).OfClass(typeof(PanelScheduleView)).FirstOrDefault() as PanelScheduleView;\nElementId loadClassId = schedule.GetLoadClassificationId(0);"}
{"prompt":"Get the start parameter of a curve's extents.","completion":"CurveExtents extents = someCurve.GetExtents();\ndouble startParam = extents.StartParameter;"}
{"prompt":"Divide horizontalmente la región de recorte de una vista.","completion":"ViewCropRegionShapeManager cropManager = doc.ActiveView.GetCropRegionShapeManager();\ncropManager.SplitRegionHorizontally(0, 0.5, 0.5);"}
{"prompt":"Get the unit symbol for cubic meters per hour per square meter.","completion":"ForgeTypeId symbolId = SymbolTypeId.MSup3PerHMSup2;"}
{"prompt":"Obtén el ID de la falla cuando la flexión de ángulo de una pieza de fabricación excede la tolerancia.","completion":"FailureDefinitionId failureId = BuiltInFailures.MEPFabricationFailures.FabricationPartExceededAngleFlexToleranceWarning;"}
{"prompt":"Get the position of a point boundary condition.","completion":"BoundaryConditions bcs = new FilteredElementCollector(doc).OfClass(typeof(BoundaryConditions)).FirstOrDefault(bc => bc.GetBoundaryConditionsType() == BoundaryConditionsType.Point) as BoundaryConditions;\nXYZ point = bcs.Point;"}
{"prompt":"Obtén la configuración de un manejador de DirectContext3D.","completion":"DirectContext3DHandleOverrides overrides = doc.ActiveView.GetDirectContext3DHandleOverrides();\nDirectContext3DHandleSettings settings = overrides.GetDirectContext3DHandleSettings(doc, someHandleId);"}
{"prompt":"Get the failure ID for when a railing's elevation profile cannot be computed.","completion":"FailureDefinitionId failureId = BuiltInFailures.SketchFailures.CannotComputeRailingsElevationError;"}
{"prompt":"Obtén el ID del parámetro para la rotación del gancho de una armadura al final.","completion":"ForgeTypeId paramId = ParameterTypeId.RebarHookRotationAtEndSchedulesTagsFilters;"}
{"prompt":"Get the ID of the currently active add-in.","completion":"AddInId activeAddinId = uiApplication.ActiveAddInId;"}
{"prompt":"Establece el radio del filete exterior para una sección estructural H general.","completion":"StructuralSectionGeneralH section = new StructuralSectionGeneralH();\nsection.OuterFillet = 0.5;"}
{"prompt":"Get the unit ID for per mille.","completion":"ForgeTypeId unitId = UnitTypeId.PerMille;"}
{"prompt":"Obtén el parámetro de un elemento de control usando su BuiltInParameter.","completion":"Control control = new FilteredElementCollector(doc).OfClass(typeof(Control)).FirstOrDefault() as Control;\nParameter param = control.get_Parameter(BuiltInParameter.ELEM_FAMILY_PARAM);"}
{"prompt":"Get the parameter ID for a rebar number suffix.","completion":"ForgeTypeId paramId = ParameterTypeId.RebarNumberSuffix;"}
{"prompt":"Check if the current document is a family document.","completion":"bool isFamilyDoc = doc.IsFamilyDocument;"}
{"prompt":"Obtén el ID de la falla cuando hay un conflicto de solape de habitaciones entre una opción de diseño y el modelo principal.","completion":"FailureDefinitionId failureId = BuiltInFailures.RoomFailures.OptionConflictRoomOverlapMain;"}
{"prompt":"Get the air system data from an MEP analytical system.","completion":"MEPAnalyticalSystem system = new FilteredElementCollector(doc).OfClass(typeof(MEPAnalyticalSystem)).FirstOrDefault() as MEPAnalyticalSystem;\nAirSystemData airData = system.GetAirSystemData();"}
{"prompt":"Obtén el ID de la falla para cuando no se selecciona ningún elemento.","completion":"FailureDefinitionId failureId = BuiltInFailures.SelectionFailures.NoElementSelected;"}
{"prompt":"Comprueba si un objeto de rejilla de relleno es válido.","completion":"FillGrid fillGrid = new FillGrid();\nbool isValid = fillGrid.IsValidObject;"}
{"prompt":"Get the failure ID for when a wall joint type fails to change.","completion":"FailureDefinitionId failureId = BuiltInFailures.WallJoinFailures.FailedToChangeWallJointsTypeFailure;"}
{"prompt":"Obtén la transformación de la instancia de un nodo de detalle de cara.","completion":"Transform transform = faceDetailNode.GetInstanceTransform();"}
{"prompt":"Get the parameter ID for the main root opening of a steel element weld.","completion":"ForgeTypeId paramId = ParameterTypeId.SteelElemWeldMainRootopening;"}
{"prompt":"Elimina un parámetro de un conjunto de parámetros.","completion":"ParameterSet paramSet = someElement.Parameters;\nParameter paramToErase = paramSet.get_Item(\"Comments\");\nparamSet.Erase(paramToErase);"}
{"prompt":"Convert a user-visible path to a ModelPath.","completion":"string path = \"RSN://myServer/myFolder/myProject.rvt\";\nModelPath modelPath = ModelPathUtils.ConvertUserVisiblePathToModelPath(path);"}
{"prompt":"Obtén el nombre de un elemento de la cinta de opciones.","completion":"RibbonPanel panel = uiApplication.CreateRibbonPanel(\"My Panel\");\nRibbonItem item = panel.AddItem(new PushButtonData(\"Button1\", \"My Button\", Assembly.GetExecutingAssembly().Location, \"MyNamespace.MyCommand\"));\nstring name = item.Name;"}
{"prompt":"Get the lock callback from transact with central options.","completion":"TransactWithCentralOptions options = new TransactWithCentralOptions();\nICentralLockedCallback callback = options.GetLockCallback();"}
{"prompt":"Establece el ID de tipo para un elemento DirectShape.","completion":"DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\nDirectShapeType type = DirectShapeType.Create(doc, \"My DirectShape Type\", new ElementId(BuiltInCategory.OST_GenericModel));\nds.SetTypeId(type.Id);"}
{"prompt":"Get the analytical shading surfaces from an energy analysis detail model.","completion":"EnergyAnalysisDetailModel detailModel = EnergyAnalysisDetailModel.GetFromDocument(doc);\nIList<EnergyAnalysisSurface> shadingSurfaces = detailModel.GetAnalyticalShadingSurfaces();"}
{"prompt":"Establece el ancho de un segmento de pliegue de una sección estructural.","completion":"StructuralSectionSigmaProfile sigmaProfile = new StructuralSectionSigmaProfile();\nsigmaProfile.BendWidth = 0.5;"}
{"prompt":"Get the parameter ID for the elastic modulus of a structural section's strong axis.","completion":"ForgeTypeId paramId = ParameterTypeId.StructuralSectionCommonElasticModulusStrongAxis;"}
{"prompt":"Habilita el borde visible para un editor de texto.","completion":"TextEditorOptions options = new TextEditorOptions();\noptions.ShowBorder = true;"}
{"prompt":"Set the restrict palette option for a fabrication network change service.","completion":"FabricationNetworkChangeService changeService = new FabricationNetworkChangeService(doc, someElement.Id);\nchangeService.SetRestrictPalette(true);"}
{"prompt":"Añade un rango de contornos a la configuración de contornos.","completion":"ContourSetting contourSetting = ContourSetting.GetContourSetting(doc);\nElementId subcategoryId = new FilteredElementCollector(doc).OfClass(typeof(GraphicsStyle)).FirstOrDefault().Id;\ncontourSetting.AddContourRange(0, 100, 10, subcategoryId);"}
{"prompt":"Get the parameter ID for text position.","completion":"ForgeTypeId paramId = ParameterTypeId.TextPosition;"}
{"prompt":"Comprueba si un documento está desvinculado.","completion":"bool isDetached = doc.IsDetached;"}
{"prompt":"Get all ribbon panels on the 'Add-Ins' tab.","completion":"List<RibbonPanel> panels = uiApplication.GetRibbonPanels(Tab.AddIns);"}
{"prompt":"Obtén el vector X de una cara plana.","completion":"PlanarFace planarFace = someSolid.Faces.get_Item(0) as PlanarFace;\nXYZ xVector = planarFace.XVector;"}
{"prompt":"Check if path reinforcement is unobscured in a view.","completion":"PathReinforcement pathRein = new FilteredElementCollector(doc).OfClass(typeof(PathReinforcement)).FirstOrDefault() as PathReinforcement;\nView view = doc.ActiveView;\nbool isUnobscured = pathRein.IsUnobscuredInView(view);"}
{"prompt":"Obtén el ID de unidad para 1:Ratio.","completion":"ForgeTypeId unitId = UnitTypeId.OneToRatio;"}
{"prompt":"Check if an element can have a type assigned.","completion":"Element elem = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault();\nbool canHaveType = elem.CanHaveTypeAssigned();"}
{"prompt":"Obtén el ID de parámetro para el número de detalle de un viewport.","completion":"ForgeTypeId paramId = ParameterTypeId.ViewportDetailNumber;"}
{"prompt":"Get the luminosity value of an initial luminous intensity object.","completion":"InitialLuminousIntensity initialIntensity = new InitialLuminousIntensity(1500);\ndouble luminosity = initialIntensity.Luminosity;"}
{"prompt":"Crea una regla de filtro para un valor menor que una cadena.","completion":"FilterRule rule = ParameterFilterRuleFactory.CreateLessRule(new ElementId(BuiltInParameter.ALL_MODEL_MARK), \"M-05\");"}
{"prompt":"Get the parameter of a point on an edge from an intersection result.","completion":"IntersectionResult result = someIntersectionResult;\ndouble edgeParam = result.EdgeParameter;"}
{"prompt":"Obtén el gestor de parámetros de un contenedor de armaduras.","completion":"RebarContainer container = new FilteredElementCollector(doc).OfClass(typeof(RebarContainer)).FirstOrDefault() as RebarContainer;\nRebarContainerParametersManager paramsManager = container.GetParametersManager();"}
{"prompt":"Enable masking coincident lines in print settings.","completion":"PrintManager printManager = doc.PrintManager;\nprintManager.PrintSetup.CurrentPrintSetting.PrintParameters.MaskCoincidentLines = true;"}
{"prompt":"Comprueba si un objeto de geometría es un sólido.","completion":"GeometryObject geoObj = someElement.get_Geometry(new Options()).First();\nbool isSolid = ExternallyTaggedGeometryValidation.IsSolid(geoObj);"}
{"prompt":"Obtén el ID de parámetro para la tolerancia de espacio de astilla en análisis de energía.","completion":"ForgeTypeId paramId = ParameterTypeId.RbsEnergyAnalysisSliverSpaceTolerance;"}
{"prompt":"Create a new bounding box from a min and max point.","completion":"BoundingBoxXYZ bbox = new BoundingBoxXYZ();\nbbox.Min = new XYZ(-5, -5, -5);\nbbox.Max = new XYZ(5, 5, 5);"}
{"prompt":"Obtén el ID de la falla cuando no se puede actualizar un muro.","completion":"FailureDefinitionId failureId = BuiltInFailures.CreationFailures.CannotUpdateWall;"}
{"prompt":"Check if a unit is valid for a given spec.","completion":"bool isValid = UnitUtils.IsValidUnit(SpecTypeId.Area, UnitTypeId.SquareMeters);"}
{"prompt":"Obtén un iterador inverso para un conjunto de factores de corrección.","completion":"CorrectionFactorSet cfSet = new CorrectionFactorSet();\n//... add factors ...\nCorrectionFactorSetIterator reverseIterator = cfSet.ReverseIterator();"}
{"prompt":"Duplica un tipo de cable existente.","completion":"WireType existingType = new FilteredElementCollector(doc).OfClass(typeof(WireType)).FirstOrDefault() as WireType;\nWireType newType = existingType.Duplicate(\"New Wire Type\") as WireType;"}
{"prompt":"Get the parameter ID for a continuous rail end termination attachment.","completion":"ForgeTypeId paramId = ParameterTypeId.ContinuousrailEndTerminationAttachmentParam;"}
{"prompt":"Establece el desfase de un tramo de barandilla no continuo.","completion":"Railing railing = new FilteredElementCollector(doc).OfClass(typeof(Railing)).FirstOrDefault() as Railing;\nNonContinuousRailInfo railInfo = railing.GetNonContinuousRailInfos().First();\nrailInfo.Offset = 0.25;"}
{"prompt":"Set the line style for a Path of Travel element.","completion":"PathOfTravel pathOfTravel = new FilteredElementCollector(doc).OfClass(typeof(PathOfTravel)).FirstOrDefault() as PathOfTravel;\nGraphicsStyle lineStyle = new FilteredElementCollector(doc).OfClass(typeof(GraphicsStyle)).FirstOrDefault() as GraphicsStyle;\npot.LineStyle = lineStyle.Id;"}
{"prompt":"Comprueba si una propiedad de un activo de apariencia es de solo lectura.","completion":"AppearanceAssetElement assetElem = new FilteredElementCollector(doc).OfClass(typeof(AppearanceAssetElement)).FirstOrDefault() as AppearanceAssetElement;\nusing(AppearanceAssetEditScope scope = new AppearanceAssetEditScope(assetElem.Document))\n{\n    Asset asset = scope.Start(assetElem.Id);\n    AssetProperty prop = asset.GetFirst();\n    bool isReadOnly = prop.IsReadOnly;\n    scope.Cancel();\n}"}
{"prompt":"Obtén la acción de doble clic para editar un tipo de familia.","completion":"DoubleClickOptions options = DoubleClickOptions.GetDoubleClickOptions();\nDoubleClickAction action = options.GetAction(DoubleClickTarget.FamilyType);"}
{"prompt":"Obtén el área de un bucle de curvas.","completion":"CurveLoop loop = new CurveLoop();\n// ... add curves to loop ...\nHostObjectSubcomponentInfo subInfo = new HostObjectSubcomponentInfo(loop);\ndouble area = subInfo.AreaOfCurveLoop;"}
{"prompt":"Crea nuevas opciones de recarga desde el central.","completion":"ReloadLatestOptions options = new ReloadLatestOptions();"}
{"prompt":"Obtén el Id de la falla que ocurre cuando un extremo de una viga de celosía no está unido.","completion":"FailureDefinitionId failureId = BuiltInFailures.TrussFailures.TrussNotJoinedWebs;"}
{"prompt":"Crea una nueva línea de rejilla radial.","completion":"Arc arc = Arc.Create(XYZ.Zero, 5, 0, Math.PI, XYZ.BasisX, XYZ.BasisY);\nGrid.Create(doc, arc);"}
{"prompt":"Establece el color emisivo de un efecto de DirectContext3D.","completion":"EffectInstance effect = new EffectInstance();\neffect.SetEmissiveColor(new Color(255, 0, 0));"}
{"prompt":"Check if a SAT export options object is valid.","completion":"SATExportOptions options = new SATExportOptions();\nbool isValid = options.IsValidObject;"}
{"prompt":"Cambia el tipo de junta de un muro en su extremo inicial.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nLocationCurve locCurve = wall.Location as LocationCurve;\nlocCurve.set_JoinType(0, JoinType.Miter);"}
{"prompt":"Get the spec ID for thermal gradient coefficient for moisture capacity.","completion":"ForgeTypeId specId = SpecTypeId.ThermalGradientCoefficientForMoistureCapacity;"}
{"prompt":"Comprueba si un conjunto de cables está vacío.","completion":"ElectricalSystem circuit = new FilteredElementCollector(doc).OfClass(typeof(ElectricalSystem)).FirstOrDefault() as ElectricalSystem;\nWireSet wireSet = circuit.WireManager.GetWireSet();\nbool isEmpty = wireSet.IsEmpty;"}
{"prompt":"Get the parameter ID for an internal multiplanar rebar end connector.","completion":"ForgeTypeId paramId = ParameterTypeId.RebarInternalMultiplanarEndConnector;"}
{"prompt":"Obtén el ángulo de los ejes principales de una sección estructural.","completion":"FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nStructuralSection section = (column.Symbol as FamilySymbol).GetStructuralSection();\ndouble angle = section.PrincipalAxesAngle;"}
{"prompt":"Obtén todos los callouts de referencia de una vista.","completion":"View view = doc.ActiveView;\nICollection<ElementId> calloutIds = view.GetReferenceCallouts();"}
{"prompt":"Check if the UI theme follows the system color theme.","completion":"bool followsSystem = UIThemeManager.FollowSystemColorTheme;"}
{"prompt":"Obtén la ayuda contextual de un botón de la cinta de opciones.","completion":"PushButtonData buttonData = new PushButtonData(\"MyButton\", \"Button Text\", Assembly.GetExecutingAssembly().Location, \"Namespace.ClassName\");\nContextualHelp help = buttonData.GetContextualHelp();"}

{"prompt":"Comprueba si se han recuperado los elementos eliminados en una diferencia de documentos.","completion":"DocumentDifference docDiff = doc.GetChangedElements(someGuid);\nbool available = docDiff.AreDeletedElementIdsAvailable;"}
{"prompt":"Get the failure ID for when an automatic landing is converted to a sketched landing.","completion":"FailureDefinitionId failureId = BuiltInFailures.StairRampFailures.AutomaticLandingConvertedToSketchedLandingWarning;"}
{"prompt":"Obtén el ID de la falla cuando un colgador de fabricación no se puede inclinar.","completion":"FailureDefinitionId failureId = BuiltInFailures.MEPFabricationFailures.FabricationHangerCannotBeSloped;"}
{"prompt":"Get the failure ID for an unsatisfied wall association property.","completion":"FailureDefinitionId failureId = BuiltInFailures.SketchFailures.UnsatisfiedWallAssocProp;"}
{"prompt":"Obtén la altura de un conector de elemento.","completion":"ConnectorElement connElem = new FilteredElementCollector(doc).OfClass(typeof(ConnectorElement)).FirstOrDefault() as ConnectorElement;\ndouble height = connElem.Height;"}
{"prompt":"Add a leader to the end of a datum plane.","completion":"DatumPlane datum = new FilteredElementCollector(doc).OfClass(typeof(DatumPlane)).FirstOrDefault() as DatumPlane;\nLeader leader = datum.AddLeader(DatumEnds.End1, doc.ActiveView);"}
{"prompt":"Get the parameter ID for the detail number of a viewport.","completion":"ForgeTypeId paramId = ParameterTypeId.ViewportDetailNumber;"}
{"prompt":"Get the luminosity value of an initial luminous intensity object.","completion":"InitialLuminousIntensity initialIntensity = new InitialLuminousIntensity(1500);\ndouble luminosity = initialIntensity.Luminosity;"}
{"prompt":"Crea una regla de filtro para un valor menor que una cadena.","completion":"FilterRule rule = ParameterFilterRuleFactory.CreateLessRule(new ElementId(BuiltInParameter.ALL_MODEL_MARK), \"M-05\");"}
{"prompt":"Get the parameter of a point on an edge from an intersection result.","completion":"IntersectionResult result = someIntersectionResult;\ndouble edgeParam = result.EdgeParameter;"}
{"prompt":"Obtén el ID del anfitrión de un contenedor de armaduras.","completion":"RebarContainer container = new FilteredElementCollector(doc).OfClass(typeof(RebarContainer)).FirstOrDefault() as RebarContainer;\nElementId hostId = container.GetHostId();"}
{"prompt":"Enable masking coincident lines in print settings.","completion":"PrintManager printManager = doc.PrintManager;\nprintManager.PrintSetup.CurrentPrintSetting.PrintParameters.MaskCoincidentLines = true;"}
{"prompt":"Comprueba si un objeto de geometría es un sólido.","completion":"GeometryObject geoObj = someElement.get_Geometry(new Options()).First();\nbool isSolid = ExternallyTaggedGeometryValidation.IsSolid(geoObj);"}
{"prompt":"Obtén el ID de parámetro para la tolerancia de espacio de astilla en análisis de energía.","completion":"ForgeTypeId paramId = ParameterTypeId.RbsEnergyAnalysisSliverSpaceTolerance;"}
{"prompt":"Create a new outline from two points.","completion":"Outline outline = new Outline(new XYZ(-10, -10, -10), new XYZ(10, 10, 10));"}
{"prompt":"Obtén el ID de la falla cuando no se puede actualizar un muro.","completion":"FailureDefinitionId failureId = BuiltInFailures.CreationFailures.CannotUpdateWall;"}
{"prompt":"Check if a unit is valid for a given spec.","completion":"bool isValid = UnitUtils.IsValidUnit(SpecTypeId.Area, UnitTypeId.SquareMeters);"}
{"prompt":"Obtén un iterador inverso para un conjunto de factores de corrección.","completion":"CorrectionFactorSet cfSet = new CorrectionFactorSet();\n//... add factors ...\nCorrectionFactorSetIterator reverseIterator = cfSet.ReverseIterator();"}
{"prompt":"Duplica un tipo de cable existente.","completion":"WireType existingType = new FilteredElementCollector(doc).OfClass(typeof(WireType)).FirstOrDefault() as WireType;\nWireType newType = existingType.Duplicate(\"New Wire Type\") as WireType;"}
{"prompt":"Get the parameter ID for a continuous rail end termination attachment.","completion":"ForgeTypeId paramId = ParameterTypeId.ContinuousrailEndTerminationAttachmentParam;"}
{"prompt":"Establece el desfase de un tramo de barandilla no continuo.","completion":"Railing railing = new FilteredElementCollector(doc).OfClass(typeof(Railing)).FirstOrDefault() as Railing;\nNonContinuousRailInfo railInfo = railing.GetNonContinuousRailInfos().First();\nrailInfo.Offset = 0.25;"}
{"prompt":"Set the line style for a Path of Travel element.","completion":"PathOfTravel pathOfTravel = new FilteredElementCollector(doc).OfClass(typeof(PathOfTravel)).FirstOrDefault() as PathOfTravel;\nGraphicsStyle lineStyle = new FilteredElementCollector(doc).OfClass(typeof(GraphicsStyle)).FirstOrDefault() as GraphicsStyle;\npot.LineStyle = lineStyle.Id;"}
{"prompt":"Comprueba si una propiedad de un activo de apariencia es de solo lectura.","completion":"AppearanceAssetElement assetElem = new FilteredElementCollector(doc).OfClass(typeof(AppearanceAssetElement)).FirstOrDefault() as AppearanceAssetElement;\nusing(AppearanceAssetEditScope scope = new AppearanceAssetEditScope(assetElem.Document))\n{\n    Asset asset = scope.Start(assetElem.Id);\n    AssetProperty prop = asset.GetFirst();\n    bool isReadOnly = prop.IsReadOnly;\n    scope.Cancel();\n}"}
{"prompt":"Obtén la acción de doble clic para editar un tipo de familia.","completion":"DoubleClickOptions options = DoubleClickOptions.GetDoubleClickOptions();\nDoubleClickAction action = options.GetAction(DoubleClickTarget.FamilyType);"}
{"prompt":"Obtén el área de un bucle de curvas.","completion":"CurveLoop loop = new CurveLoop();\n// ... add curves to loop ...\nHostObjectSubcomponentInfo subInfo = new HostObjectSubcomponentInfo(loop);\ndouble area = subInfo.AreaOfCurveLoop;"}
{"prompt":"Crea nuevas opciones de recarga desde el central.","completion":"ReloadLatestOptions options = new ReloadLatestOptions();"}
{"prompt":"Obtén el Id de la falla que ocurre cuando un extremo de una viga de celosía no está unido.","completion":"FailureDefinitionId failureId = BuiltInFailures.TrussFailures.TrussNotJoinedWebs;"}
{"prompt":"Crea una nueva línea de rejilla radial.","completion":"Arc arc = Arc.Create(XYZ.Zero, 5, 0, Math.PI, XYZ.BasisX, XYZ.BasisY);\nGrid.Create(doc, arc);"}
{"prompt":"Establece el color emisivo de un efecto de DirectContext3D.","completion":"EffectInstance effect = new EffectInstance();\neffect.SetEmissiveColor(new Color(255, 0, 0));"}
{"prompt":"Check if a SAT export options object is valid.","completion":"SATExportOptions options = new SATExportOptions();\nbool isValid = options.IsValidObject;"}
{"prompt":"Cambia el tipo de junta de un muro en su extremo inicial.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nLocationCurve locCurve = wall.Location as LocationCurve;\nlocCurve.set_JoinType(0, JoinType.Miter);"}
{"prompt":"Get the spec ID for thermal gradient coefficient for moisture capacity.","completion":"ForgeTypeId specId = SpecTypeId.ThermalGradientCoefficientForMoistureCapacity;"}
{"prompt":"Comprueba si un conjunto de cables está vacío.","completion":"ElectricalSystem circuit = new FilteredElementCollector(doc).OfClass(typeof(ElectricalSystem)).FirstOrDefault() as ElectricalSystem;\nWireSet wireSet = circuit.WireManager.GetWireSet();\nbool isEmpty = wireSet.IsEmpty;"}
{"prompt":"Get the parameter ID for an internal multiplanar rebar end connector.","completion":"ForgeTypeId paramId = ParameterTypeId.RebarInternalMultiplanarEndConnector;"}
{"prompt":"Obtén el ángulo de los ejes principales de una sección estructural.","completion":"FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nStructuralSection section = (column.Symbol as FamilySymbol).GetStructuralSection();\ndouble angle = section.PrincipalAxesAngle;"}
{"prompt":"Obtén todos los callouts de referencia de una vista.","completion":"View view = doc.ActiveView;\nICollection<ElementId> calloutIds = view.GetReferenceCallouts();"}
{"prompt":"Check if the UI theme follows the system color theme.","completion":"bool followsSystem = UIThemeManager.FollowSystemColorTheme;"}
{"prompt":"Obtén la ayuda contextual de un botón de la cinta de opciones.","completion":"PushButtonData buttonData = new PushButtonData(\"MyButton\", \"Button Text\", Assembly.GetExecutingAssembly().Location, \"Namespace.ClassName\");\nContextualHelp help = buttonData.GetContextualHelp();"}

{"prompt":"Comprueba si la matriz de elementos eliminados está disponible en una diferencia de documentos.","completion":"DocumentDifference docDiff = doc.GetChangedElements(someGuid);\nbool isAvailable = docDiff.AreDeletedElementIdsAvailable;"}
{"prompt":"Get the failure ID for when an automatic landing is converted to a sketched landing.","completion":"FailureDefinitionId failureId = BuiltInFailures.StairRampFailures.AutomaticLandingConvertedToSketchedLandingWarning;"}
{"prompt":"Obtén el ID de la falla cuando un colgador de fabricación no se puede inclinar.","completion":"FailureDefinitionId failureId = BuiltInFailures.MEPFabricationFailures.FabricationHangerCannotBeSloped;"}
{"prompt":"Get the failure ID for an unsatisfied wall association property.","completion":"FailureDefinitionId failureId = BuiltInFailures.SketchFailures.UnsatisfiedWallAssocProp;"}
{"prompt":"Obtén la altura de un conector de elemento.","completion":"ConnectorElement connElem = new FilteredElementCollector(doc).OfClass(typeof(ConnectorElement)).FirstOrDefault() as ConnectorElement;\ndouble height = connElem.Height;"}
{"prompt":"Add a leader to the end of a datum plane.","completion":"DatumPlane datum = new FilteredElementCollector(doc).OfClass(typeof(DatumPlane)).FirstOrDefault() as DatumPlane;\nLeader leader = datum.AddLeader(DatumEnds.End1, doc.ActiveView);"}
{"prompt":"Get the parameter ID for the detail number of a viewport.","completion":"ForgeTypeId paramId = ParameterTypeId.ViewportDetailNumber;"}
{"prompt":"Get the luminosity value of an initial luminous intensity object.","completion":"InitialLuminousIntensity initialIntensity = new InitialLuminousIntensity(1500);\ndouble luminosity = initialIntensity.Luminosity;"}
{"prompt":"Crea una regla de filtro para un valor menor que una cadena.","completion":"FilterRule rule = ParameterFilterRuleFactory.CreateLessRule(new ElementId(BuiltInParameter.ALL_MODEL_MARK), \"M-05\");"}
{"prompt":"Get the parameter of a point on an edge from an intersection result.","completion":"IntersectionResult result = someIntersectionResult;\ndouble edgeParam = result.EdgeParameter;"}
{"prompt":"Obtén el ID del anfitrión de un contenedor de armaduras.","completion":"RebarContainer container = new FilteredElementCollector(doc).OfClass(typeof(RebarContainer)).FirstOrDefault() as RebarContainer;\nElementId hostId = container.GetHostId();"}
{"prompt":"Enable masking coincident lines in print settings.","completion":"PrintManager printManager = doc.PrintManager;\nprintManager.PrintSetup.CurrentPrintSetting.PrintParameters.MaskCoincidentLines = true;"}
{"prompt":"Comprueba si un objeto de geometría es un sólido.","completion":"GeometryObject geoObj = someElement.get_Geometry(new Options()).First();\nbool isSolid = ExternallyTaggedGeometryValidation.IsSolid(geoObj);"}
{"prompt":"Obtén el ID de parámetro para la tolerancia de espacio de astilla en análisis de energía.","completion":"ForgeTypeId paramId = ParameterTypeId.RbsEnergyAnalysisSliverSpaceTolerance;"}
{"prompt":"Create a new outline from two points.","completion":"Outline outline = new Outline(new XYZ(-10, -10, -10), new XYZ(10, 10, 10));"}
{"prompt":"Obtén el ID de la falla cuando no se puede actualizar un muro.","completion":"FailureDefinitionId failureId = BuiltInFailures.CreationFailures.CannotUpdateWall;"}
{"prompt":"Check if a unit is valid for a given spec.","completion":"bool isValid = UnitUtils.IsValidUnit(SpecTypeId.Area, UnitTypeId.SquareMeters);"}
{"prompt":"Obtén un iterador inverso para un conjunto de factores de corrección.","completion":"CorrectionFactorSet cfSet = new CorrectionFactorSet();\n//... add factors ...\nCorrectionFactorSetIterator reverseIterator = cfSet.ReverseIterator();"}
{"prompt":"Duplica un tipo de cable existente.","completion":"WireType existingType = new FilteredElementCollector(doc).OfClass(typeof(WireType)).FirstOrDefault() as WireType;\nWireType newType = existingType.Duplicate(\"New Wire Type\") as WireType;"}
{"prompt":"Get the parameter ID for a continuous rail end termination attachment.","completion":"ForgeTypeId paramId = ParameterTypeId.ContinuousrailEndTerminationAttachmentParam;"}
{"prompt":"Establece el desfase de un tramo de barandilla no continuo.","completion":"Railing railing = new FilteredElementCollector(doc).OfClass(typeof(Railing)).FirstOrDefault() as Railing;\nNonContinuousRailInfo railInfo = railing.GetNonContinuousRailInfos().First();\nrailInfo.Offset = 0.25;"}
{"prompt":"Set the line style for a Path of Travel element.","completion":"PathOfTravel pathOfTravel = new FilteredElementCollector(doc).OfClass(typeof(PathOfTravel)).FirstOrDefault() as PathOfTravel;\nGraphicsStyle lineStyle = new FilteredElementCollector(doc).OfClass(typeof(GraphicsStyle)).FirstOrDefault() as GraphicsStyle;\npot.LineStyle = lineStyle.Id;"}
{"prompt":"Comprueba si una propiedad de un activo de apariencia es de solo lectura.","completion":"AppearanceAssetElement assetElem = new FilteredElementCollector(doc).OfClass(typeof(AppearanceAssetElement)).FirstOrDefault() as AppearanceAssetElement;\nusing(AppearanceAssetEditScope scope = new AppearanceAssetEditScope(assetElem.Document))\n{\n    Asset asset = scope.Start(assetElem.Id);\n    AssetProperty prop = asset.GetFirst();\n    bool isReadOnly = prop.IsReadOnly;\n    scope.Cancel();\n}"}
{"prompt":"Obtén la acción de doble clic para editar un tipo de familia.","completion":"DoubleClickOptions options = DoubleClickOptions.GetDoubleClickOptions();\nDoubleClickAction action = options.GetAction(DoubleClickTarget.FamilyType);"}
{"prompt":"Obtén el área de un bucle de curvas.","completion":"CurveLoop loop = new CurveLoop();\n// ... add curves to loop ...\nHostObjectSubcomponentInfo subInfo = new HostObjectSubcomponentInfo(loop);\ndouble area = subInfo.AreaOfCurveLoop;"}
{"prompt":"Crea nuevas opciones de recarga desde el central.","completion":"ReloadLatestOptions options = new ReloadLatestOptions();"}
{"prompt":"Obtén el Id de la falla que ocurre cuando un extremo de una viga de celosía no está unido.","completion":"FailureDefinitionId failureId = BuiltInFailures.TrussFailures.TrussNotJoinedWebs;"}
{"prompt":"Crea una nueva línea de rejilla radial.","completion":"Arc arc = Arc.Create(XYZ.Zero, 5, 0, Math.PI, XYZ.BasisX, XYZ.BasisY);\nGrid.Create(doc, arc);"}
{"prompt":"Establece el color emisivo de un efecto de DirectContext3D.","completion":"EffectInstance effect = new EffectInstance();\neffect.SetEmissiveColor(new Color(255, 0, 0));"}
{"prompt":"Check if a SAT export options object is valid.","completion":"SATExportOptions options = new SATExportOptions();\nbool isValid = options.IsValidObject;"}
{"prompt":"Cambia el tipo de junta de un muro en su extremo inicial.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nLocationCurve locCurve = wall.Location as LocationCurve;\nlocCurve.set_JoinType(0, JoinType.Miter);"}
{"prompt":"Get the spec ID for thermal gradient coefficient for moisture capacity.","completion":"ForgeTypeId specId = SpecTypeId.ThermalGradientCoefficientForMoistureCapacity;"}
{"prompt":"Comprueba si un conjunto de cables está vacío.","completion":"ElectricalSystem circuit = new FilteredElementCollector(doc).OfClass(typeof(ElectricalSystem)).FirstOrDefault() as ElectricalSystem;\nWireSet wireSet = circuit.WireManager.GetWireSet();\nbool isEmpty = wireSet.IsEmpty;"}
{"prompt":"Get the parameter ID for an internal multiplanar rebar end connector.","completion":"ForgeTypeId paramId = ParameterTypeId.RebarInternalMultiplanarEndConnector;"}
{"prompt":"Obtén el ángulo de los ejes principales de una sección estructural.","completion":"FamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nStructuralSection section = (column.Symbol as FamilySymbol).GetStructuralSection();\ndouble angle = section.PrincipalAxesAngle;"}
{"prompt":"Obtén todos los callouts de referencia de una vista.","completion":"View view = doc.ActiveView;\nICollection<ElementId> calloutIds = view.GetReferenceCallouts();"}
{"prompt":"Check if the UI theme follows the system color theme.","completion":"bool followsSystem = UIThemeManager.FollowSystemColorTheme;"}
{"prompt":"Obtén la ayuda contextual de un botón de la cinta de opciones.","completion":"PushButtonData buttonData = new PushButtonData(\"MyButton\", \"Button Text\", Assembly.GetExecutingAssembly().Location, \"Namespace.ClassName\");\nContextualHelp help = buttonData.GetContextualHelp();"}

{"prompt":"Import an SAT file into the current view.","completion":"SATImportOptions options = new SATImportOptions();\nElementId newInstanceId;\ndoc.Import(\"C:\\\\folder\\\\model.sat\", options, doc.ActiveView, out newInstanceId);"}
{"prompt":"Obtén el ID de parámetro para el tipo de etiqueta de un sistema de numeración.","completion":"ForgeTypeId paramId = ParameterTypeId.NumberSystemTagType;"}
{"prompt":"Get the current workset from a filtered workset iterator.","completion":"FilteredWorksetCollector collector = new FilteredWorksetCollector(doc);\nFilteredWorksetIterator iterator = collector.GetWorksetIterator();\niterator.MoveNext();\nWorkset currentWorkset = iterator.Current;"}
{"prompt":"Obtén el ID de parámetro para el ancho del montante en el lado 1.","completion":"ForgeTypeId paramId = ParameterTypeId.RectMullionWidth1;"}
{"prompt":"Obtén el parámetro de comentarios de un arco de modelo.","completion":"ModelArc arc = new FilteredElementCollector(doc).OfClass(typeof(ModelArc)).FirstOrDefault() as ModelArc;\nParameter comments = arc.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);"}
{"prompt":"Get the parameter ID for line-to-ground voltage in a distribution system.","completion":"ForgeTypeId paramId = ParameterTypeId.RbsDistributionsysVlgParam;"}
{"prompt":"Crea un nuevo filtro de intersección de cuadros delimitadores.","completion":"Outline outline = new Outline(new XYZ(0,0,0), new XYZ(20,20,20));\nBoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(outline);"}
{"prompt":"Get the failure ID for when a roof or wall cannot be drawn.","completion":"FailureDefinitionId failureId = BuiltInFailures.CreationFailures.CannotDrawRoofWall;"}
{"prompt":"Comprueba si el add-in actual se está cargando sobre la marcha.","completion":"bool isLateLoading = uiApplication.IsLateAddinLoading;"}
{"prompt":"Check if a divided path is cyclical.","completion":"DividedPath path = new FilteredElementCollector(doc).OfClass(typeof(DividedPath)).FirstOrDefault() as DividedPath;\nbool cyclical = path.IsCyclical;"}
{"prompt":"Obtén el estado de flujo de una tubería.","completion":"Pipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nPipeFlowState state = pipe.FlowState;"}
{"prompt":"Remove an association from the Analytical to Physical Association Manager.","completion":"AnalyticalToPhysicalAssociationManager manager = AnalyticalToPhysicalAssociationManager.GetAnalyticalToPhysicalAssociationManager(doc);\nmanager.RemoveAssociation(someElementId);"}
{"prompt":"Obtén el ID de la falla cuando no se puede crear un reborde.","completion":"FailureDefinitionId failureId = BuiltInFailures.CreationFailures.CannotCreateReveal;"}
{"prompt":"Get the parameter ID for an arrowhead type.","completion":"ForgeTypeId paramId = ParameterTypeId.ArrowheadType;"}
{"prompt":"Obtén el ID de la clasificación de carga en una fila de la tabla de cargas.","completion":"PanelScheduleView schedule = new FilteredElementCollector(doc).OfClass(typeof(PanelScheduleView)).FirstOrDefault() as PanelScheduleView;\nElementId loadClassId = schedule.GetLoadClassificationId(0);"}
{"prompt":"Get the start parameter of a curve's extents.","completion":"CurveExtents extents = someCurve.GetExtents();\ndouble startParam = extents.StartParameter;"}
{"prompt":"Divide horizontalmente la región de recorte de una vista.","completion":"ViewCropRegionShapeManager cropManager = doc.ActiveView.GetCropRegionShapeManager();\ncropManager.SplitRegionHorizontally(0, 0.5, 0.5);"}
{"prompt":"Get the unit symbol for cubic meters per hour per square meter.","completion":"ForgeTypeId symbolId = SymbolTypeId.MSup3PerHMSup2;"}
{"prompt":"Obtén el ID de la falla cuando la flexión de ángulo de una pieza de fabricación excede la tolerancia.","completion":"FailureDefinitionId failureId = BuiltInFailures.MEPFabricationFailures.FabricationPartExceededAngleFlexToleranceWarning;"}
{"prompt":"Get the position of a point boundary condition.","completion":"BoundaryConditions bcs = new FilteredElementCollector(doc).OfClass(typeof(BoundaryConditions)).FirstOrDefault(bc => bc.GetBoundaryConditionsType() == BoundaryConditionsType.Point) as BoundaryConditions;\nXYZ point = bcs.Point;"}
{"prompt":"Obtén la configuración de un manejador de DirectContext3D.","completion":"DirectContext3DHandleOverrides overrides = doc.ActiveView.GetDirectContext3DHandleOverrides();\nDirectContext3DHandleSettings settings = overrides.GetDirectContext3DHandleSettings(doc, someHandleId);"}
{"prompt":"Get the failure ID for when a railing's elevation profile cannot be computed.","completion":"FailureDefinitionId failureId = BuiltInFailures.SketchFailures.CannotComputeRailingsElevationError;"}
{"prompt":"Obtén el ID del parámetro para la rotación del gancho de una armadura al final.","completion":"ForgeTypeId paramId = ParameterTypeId.RebarHookRotationAtEndSchedulesTagsFilters;"}
{"prompt":"Get the active add-in ID.","completion":"AddInId addinId = uiApplication.ActiveAddInId;"}
{"prompt":"Establece el radio del filete exterior para una sección estructural H general.","completion":"StructuralSectionGeneralH section = new StructuralSectionGeneralH();\nsection.OuterFillet = 0.5;"}
{"prompt":"Get the unit ID for per mille.","completion":"ForgeTypeId unitId = UnitTypeId.PerMille;"}
{"prompt":"Obtén el parámetro de un elemento de control usando su BuiltInParameter.","completion":"Control control = new FilteredElementCollector(doc).OfClass(typeof(Control)).FirstOrDefault() as Control;\nParameter param = control.get_Parameter(BuiltInParameter.ELEM_FAMILY_PARAM);"}
{"prompt":"Get the parameter ID for a rebar number suffix.","completion":"ForgeTypeId paramId = ParameterTypeId.RebarNumberSuffix;"}
{"prompt":"Check if the current document is a family document.","completion":"bool isFamilyDoc = doc.IsFamilyDocument;"}
{"prompt":"Obtén el ID de la falla cuando hay un conflicto de solape de habitaciones entre una opción de diseño y el modelo principal.","completion":"FailureDefinitionId failureId = BuiltInFailures.RoomFailures.OptionConflictRoomOverlapMain;"}
{"prompt":"Get the air system data from an MEP analytical system.","completion":"MEPAnalyticalSystem system = new FilteredElementCollector(doc).OfClass(typeof(MEPAnalyticalSystem)).FirstOrDefault() as MEPAnalyticalSystem;\nAirSystemData airData = system.GetAirSystemData();"}
{"prompt":"Obtén el ID de la falla para cuando no se selecciona ningún elemento.","completion":"FailureDefinitionId failureId = BuiltInFailures.SelectionFailures.NoElementSelected;"}
{"prompt":"Comprueba si un objeto de rejilla de relleno es válido.","completion":"FillGrid fillGrid = new FillGrid();\nbool isValid = fillGrid.IsValidObject;"}
{"prompt":"Get the failure ID for when a wall joint type fails to change.","completion":"FailureDefinitionId failureId = BuiltInFailures.WallJoinFailures.FailedToChangeWallJointsTypeFailure;"}
{"prompt":"Obtén la transformación de la instancia de un nodo de detalle de cara.","completion":"Transform transform = faceDetailNode.GetInstanceTransform();"}
{"prompt":"Get the parameter ID for the main root opening of a steel element weld.","completion":"ForgeTypeId paramId = ParameterTypeId.SteelElemWeldMainRootopening;"}
{"prompt":"Elimina un parámetro de un conjunto de parámetros.","completion":"ParameterSet paramSet = someElement.Parameters;\nParameter paramToErase = paramSet.get_Item(\"Comments\");\nparamSet.Erase(paramToErase);"}
{"prompt":"Convert a user-visible path to a ModelPath.","completion":"string path = \"RSN://myServer/myFolder/myProject.rvt\";\nModelPath modelPath = ModelPathUtils.ConvertUserVisiblePathToModelPath(path);"}
{"prompt":"Obtén el nombre de un elemento de la cinta de opciones.","completion":"RibbonPanel panel = uiApplication.CreateRibbonPanel(\"My Panel\");\nRibbonItem item = panel.AddItem(new PushButtonData(\"Button1\", \"My Button\", Assembly.GetExecutingAssembly().Location, \"MyNamespace.MyCommand\"));\nstring name = item.Name;"}
{"prompt":"Get the lock callback from transact with central options.","completion":"TransactWithCentralOptions options = new TransactWithCentralOptions();\nICentralLockedCallback callback = options.GetLockCallback();"}
{"prompt":"Establece el ID de tipo para un elemento DirectShape.","completion":"DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\nDirectShapeType type = DirectShapeType.Create(doc, \"My DirectShape Type\", new ElementId(BuiltInCategory.OST_GenericModel));\nds.SetTypeId(type.Id);"}
{"prompt":"Get the analytical shading surfaces from an energy analysis detail model.","completion":"EnergyAnalysisDetailModel detailModel = EnergyAnalysisDetailModel.GetFromDocument(doc);\nIList<EnergyAnalysisSurface> shadingSurfaces = detailModel.GetAnalyticalShadingSurfaces();"}
{"prompt":"Establece el ancho de un segmento de pliegue de una sección estructural.","completion":"StructuralSectionSigmaProfile sigmaProfile = new StructuralSectionSigmaProfile();\nsigmaProfile.BendWidth = 0.5;"}
{"prompt":"Get the parameter ID for the elastic modulus of a structural section's strong axis.","completion":"ForgeTypeId paramId = ParameterTypeId.StructuralSectionCommonElasticModulusStrongAxis;"}
{"prompt":"Habilita el borde visible para un editor de texto.","completion":"TextEditorOptions options = new TextEditorOptions();\noptions.ShowBorder = true;"}
{"prompt":"Set the restrict palette option for a fabrication network change service.","completion":"FabricationNetworkChangeService changeService = new FabricationNetworkChangeService(doc, someElement.Id);\nchangeService.SetRestrictPalette(true);"}
{"prompt":"Añade un rango de contornos a la configuración de contornos.","completion":"ContourSetting contourSetting = ContourSetting.GetContourSetting(doc);\nElementId subcategoryId = new FilteredElementCollector(doc).OfClass(typeof(GraphicsStyle)).FirstOrDefault().Id;\ncontourSetting.AddContourRange(0, 100, 10, subcategoryId);"}
{"prompt":"Get the parameter ID for text position.","completion":"ForgeTypeId paramId = ParameterTypeId.TextPosition;"}
{"prompt":"Comprueba si un documento está desvinculado.","completion":"bool isDetached = doc.IsDetached;"}
{"prompt":"Get all ribbon panels on the 'Add-Ins' tab.","completion":"List<RibbonPanel> panels = uiApplication.GetRibbonPanels(Tab.AddIns);"}
{"prompt":"Obtén el vector X de una cara plana.","completion":"PlanarFace planarFace = someSolid.Faces.get_Item(0) as PlanarFace;\nXYZ xVector = planarFace.XVector;"}
{"prompt":"Check if path reinforcement is unobscured in a view.","completion":"PathReinforcement pathRein = new FilteredElementCollector(doc).OfClass(typeof(PathReinforcement)).FirstOrDefault() as PathReinforcement;\nView view = doc.ActiveView;\nbool isUnobscured = pathRein.IsUnobscuredInView(view);"}
{"prompt":"Obtén el ID de unidad para 1:Ratio.","completion":"ForgeTypeId unitId = UnitTypeId.OneToRatio;"}
{"prompt":"Check if an element can have a type assigned.","completion":"Element elem = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault();\nbool canHaveType = elem.CanHaveTypeAssigned();"}
{"prompt":"Obtén el ID de parámetro para el número de detalle de un viewport.","completion":"ForgeTypeId paramId = ParameterTypeId.ViewportDetailNumber;"}
{"prompt":"Get the luminosity value of an initial luminous intensity object.","completion":"InitialLuminousIntensity initialIntensity = new InitialLuminousIntensity(1500);\ndouble luminosity = initialIntensity.Luminosity;"}
{"prompt":"Crea una regla de filtro para un valor menor que una cadena.","completion":"FilterRule rule = ParameterFilterRuleFactory.CreateLessRule(new ElementId(BuiltInParameter.ALL_MODEL_MARK), \"M-05\");"}
{"prompt":"Get the parameter of a point on an edge from an intersection result.","completion":"IntersectionResult result = someIntersectionResult;\ndouble edgeParam = result.EdgeParameter;"}
{"prompt":"Obtén el gestor de parámetros de un contenedor de armaduras.","completion":"RebarContainer container = new FilteredElementCollector(doc).OfClass(typeof(RebarContainer)).FirstOrDefault() as RebarContainer;\nRebarContainerParametersManager paramsManager = container.GetParametersManager();"}
{"prompt":"Enable masking coincident lines in print settings.","completion":"PrintManager printManager = doc.PrintManager;\nprintManager.PrintSetup.CurrentPrintSetting.PrintParameters.MaskCoincidentLines = true;"}
{"prompt":"Comprueba si un objeto de geometría es un sólido.","completion":"GeometryObject geoObj = someElement.get_Geometry(new Options()).First();\nbool isSolid = ExternallyTaggedGeometryValidation.IsSolid(geoObj);"}
{"prompt":"Obtén el ID de parámetro para la tolerancia de espacio de astilla en análisis de energía.","completion":"ForgeTypeId paramId = ParameterTypeId.RbsEnergyAnalysisSliverSpaceTolerance;"}
{"prompt":"Create a new outline from two points.","completion":"Outline outline = new Outline(new XYZ(-10, -10, -10), new XYZ(10, 10, 10));"}
{"prompt":"Obtén el ID de la falla cuando no se puede actualizar un muro.","completion":"FailureDefinitionId failureId = BuiltInFailures.CreationFailures.CannotUpdateWall;"}
{"prompt":"Check if a unit is valid for a given spec.","completion":"bool isValid = UnitUtils.IsValidUnit(SpecTypeId.Area, UnitTypeId.SquareMeters);"}
{"prompt":"Obtén un iterador inverso para un conjunto de factores de corrección.","completion":"CorrectionFactorSet cfSet = new CorrectionFactorSet();\n//... add factors ...\nCorrectionFactorSetIterator reverseIterator = cfSet.ReverseIterator();"}
{"prompt":"Duplica un tipo de cable existente.","completion":"WireType existingType = new FilteredElementCollector(doc).OfClass(typeof(WireType)).FirstOrDefault() as WireType;\nWireType newType = existingType.Duplicate(\"New Wire Type\") as WireType;"}
{"prompt":"Get the parameter ID for a continuous rail end termination attachment.","completion":"ForgeTypeId paramId = ParameterTypeId.ContinuousrailEndTerminationAttachmentParam;"}
{"prompt":"Establece el desfase de un tramo de barandilla no continuo.","completion":"Railing railing = new FilteredElementCollector(doc).OfClass(typeof(Railing)).FirstOrDefault() as Railing;\nNonContinuousRailInfo railInfo = railing.GetNonContinuousRailInfos().First();\nrailInfo.Offset = 0.25;"}
{"prompt":"Set the line style for a Path of Travel element.","completion":"PathOfTravel pathOfTravel = new FilteredElementCollector(doc).OfClass(typeof(PathOfTravel)).FirstOrDefault() as PathOfTravel;\nGraphicsStyle lineStyle = new FilteredElementCollector(doc).OfClass(typeof(GraphicsStyle)).FirstOrDefault() as GraphicsStyle;\npot.LineStyle = lineStyle.Id;"}
{"prompt":"Comprueba si una propiedad de un activo de apariencia es de solo lectura.","completion":"AppearanceAssetElement assetElem = new FilteredElementCollector(doc).OfClass(typeof(AppearanceAssetElement)).FirstOrDefault() as AppearanceAssetElement;\nusing(AppearanceAssetEditScope scope = new AppearanceAssetEditScope(assetElem.Document))\n{\n    Asset asset = scope.Start(assetElem.Id);\n    AssetProperty prop = asset.GetFirst();\n    bool isReadOnly = prop.IsReadOnly;\n    scope.Cancel();\n}"}
{"prompt":"Obtén la acción de doble clic para editar un tipo de familia.","completion":"DoubleClickOptions options = DoubleClickOptions.GetDoubleClickOptions();\nDoubleClickAction action = options.GetAction(DoubleClickTarget.FamilyType);"}
{"prompt":"Obtén el área de un bucle de curvas.","completion":"CurveLoop loop = new CurveLoop();\n// ... add curves to loop ...\nHostObjectSubcomponentInfo subInfo = new HostObjectSubcomponentInfo(loop);\ndouble area = subInfo.AreaOfCurveLoop;"}
{"prompt":"Crea nuevas opciones de recarga desde el central.","completion":"ReloadLatestOptions options = new ReloadLatestOptions();"}

{"prompt":"Obtén todas las instancias de niveles, espacios y zonas del documento.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().ToList();\nvar spaces = new FilteredElementCollector(doc).WherePasses(new SpaceFilter()).Cast<Space>().ToList();\nvar zones = new FilteredElementCollector(doc).OfClass(typeof(Zone)).Cast<Zone>().ToList();"}
{"prompt":"Crea una nueva hoja y coloca la primera vista de plano en el centro.","completion":"ViewSheet sheet = ViewSheet.Create(doc, titleBlockId);\nViewPlan view = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault();\nXYZ center = sheet.Outline.Min + (sheet.Outline.Max - sheet.Outline.Min) / 2;\nViewport.Create(doc, sheet.Id, view.Id, center);"}
{"prompt":"Obtén todos los tipos de gancho de refuerzo y tipos de barra de refuerzo.","completion":"var hookTypes = new FilteredElementCollector(doc).OfClass(typeof(RebarHookType)).Cast<RebarHookType>().ToList();\nvar barTypes  = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).Cast<RebarBarType>().ToList();"}
{"prompt":"Crea múltiples conductos conectados usando puntos y conexiones dadas.","completion":"var level = Level.Create(doc, 0.0);\nfor (int i = 0; i < conns.Count; i++)\n{\n    Duct.Create(doc, systemTypeId, ductTypeId, level.Id, conns[i], points[i]);\n}"}
{"prompt":"Obtén todas las etiquetas de habitación del documento.","completion":"var roomTags = new FilteredElementCollector(doc).WherePasses(new RoomTagFilter()).Cast<RoomTag>().ToList();"}
{"prompt":"Obtén todos los elementos del documento para detección de colisiones.","completion":"var elements = new FilteredElementCollector(doc).ToElements();"}
{"prompt":"Crea un arco y un conducto entre dos puntos especificados.","completion":"Arc arc = Arc.Create(plane, 1.0, 0, 6.28);\nPipe.Create(doc, systemTypeId, pipeType.Id, levelId, start, end);"}
{"prompt":"Crea un grupo de parámetros compartidos llamado “MyParameters” y una definición de parámetro.","completion":"var group = sharedParameterFile.Groups.Create(\"MyParameters\");\ngroup.Definitions.Create(new ExternalDefinitionCreationOptions(\"MyParameters\", ParameterType.Text));"}
{"prompt":"Obtén todas las notas de texto del documento.","completion":"var textNotes = new FilteredElementCollector(doc).OfClass(typeof(TextNote)).Cast<TextNote>().ToList();"}
{"prompt":"Crea etiquetas de estación en una alineación usando un intervalo definido.","completion":"options.Interval = UnitUtils.ConvertToInternalUnits(majorStationInterval, UnitTypeId.StationingMeters);\nvar label = AlignmentStationLabel.Create(alignment, view, options);"}
{"prompt":"Obtén todos los vínculos de modelo del documento.","completion":"var links = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).Cast<RevitLinkInstance>().ToList();"}
{"prompt":"Crea una leyenda de relleno de color para la vista.","completion":"var legend = ColorFillLegend.Create(doc, view.Id, schemeCategoryId, origin);"}
{"prompt":"Crea un nuevo material y dos PropertySetElement para activos estructurales y térmicos.","completion":"var brickMat = Material.Create(doc, \"New Brick Sample\");\nvar thermalPSE = PropertySetElement.Create(doc, thermalAssetId);\nvar structuralPSE = PropertySetElement.Create(doc, structuralAssetId);"}
{"prompt":"Crea una línea que defina un sistema de coordenadas analítico.","completion":"var line = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(10, 10, 0));"}
{"prompt":"Crea un panel analítico con un contorno de curvas dado.","completion":"CurveLoop loop = new CurveLoop();\n// Añade tus líneas al loop...\nvar panel = AnalyticalPanel.Create(doc, loop);"}
{"prompt":"Crea un panel analítico curvo a partir de un arco.","completion":"var arc = Arc.Create(new XYZ(10, 10, 0), new XYZ(0, 0, 0), new XYZ(15, 10, 0));\nvar panel = AnalyticalPanel.Create(doc, arc, new XYZ(0, 0, 1));"}
{"prompt":"Crea un miembro analítico a partir de una línea.","completion":"var line = Line.CreateBound(start, end);\nvar member = AnalyticalMember.Create(doc, line);"}
{"prompt":"Crea una carga superficial referenciada en puntos específicos.","completion":"CurveLoop loop = new CurveLoop();\n// Añade curvas al loop...\nvar loops = new List<CurveLoop> { loop };\nvar areaLoad = AreaLoad.Create(doc, elementId, loops, forceVector, refPointsIndexes, refPointsCurveEnds, null);"}
{"prompt":"Crea una carga superficial personalizada usando curvas y fuerzas.","completion":"CurveLoop loop = new CurveLoop();\n// Añade curvas al loop...\nvar areaLoad = AreaLoad.Create(doc, elementId, new List<CurveLoop> { loop }, new XYZ(1,0,0), null);"}
{"prompt":"Crea una carga lineal entre dos puntos.","completion":"var line = Line.CreateBound(start, end);\nvar lineLoad = LineLoad.Create(doc, elementId, line, new XYZ(1,0,0), new XYZ(1,0,0), null);"}
{"prompt":"Crea una carga puntual en una ubicación dada.","completion":"var pointLoad = PointLoad.Create(doc, elementId, location, new XYZ(1,0,0), new XYZ(1,0,0), null);"}
{"prompt":"Crea un arco para modificar el contorno de un panel analítico.","completion":"var arc = Arc.Create(line.GetEndPoint(0), line.GetEndPoint(1), middle.Add(normal.Multiply(20)));"}
{"prompt":"Modifica la geometría de un miembro analítico estableciendo una nueva curva.","completion":"var newCurve = Line.CreateBound(newLineStart, newLineEnd);\nanalyticalMember.SetCurve(newCurve);"}
{"prompt":"Establece un contorno externo para un panel analítico.","completion":"CurveLoop loop = new CurveLoop();\n// Añade líneas al loop...\nanalyticalPanel.SetOuterContour(new List<CurveLoop> { loop });"}
{"prompt":"Obtén niveles y familias y crea una línea entre dos puntos.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().ToList();\nvar families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().ToList();\nvar line = Line.CreateBound(startPoint, endPoint);"}
{"prompt":"Crea un sistema de vigas usando una lista de curvas.","completion":"var beamSystem = BeamSystem.Create(doc, curves, doc.ActiveView.SketchPlane, 0);"}
{"prompt":"Obtén todas las familias del documento.","completion":"var families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().ToList();"}
{"prompt":"Crea una línea entre dos puntos dados.","completion":"var line = Line.CreateBound(startPnt, endPnt);"}
{"prompt":"Crea un refuerzo de área complejo usando curvas y tipos dados.","completion":"var areaRein = AreaReinforcement.Create(doc, floor, curves, majorDirection, areaReinforcementTypeId, rebarBarTypeId, rebarHookTypeId);"}
{"prompt":"Crea dos líneas de contorno con diferentes pares de puntos.","completion":"var line1 = Line.CreateBound(startPoint, endPoint);\nvar line2 = Line.CreateBound(startPoint2, endPoint2);"}
{"prompt":"Crea una línea de cota entre dos puntos.","completion":"var dimensionLine = Line.CreateBound(p1, p2);"}
{"prompt":"Obtén todos los conductos y tipos de rigidizadores del documento.","completion":"var ducts = new FilteredElementCollector(doc).OfClass(typeof(Duct)).Cast<Duct>().ToList();\nvar stiffeners = new FilteredElementCollector(doc).OfClass(typeof(StiffenerType)).Cast<StiffenerType>().ToList();"}
{"prompt":"Crea un nuevo patrón de relleno y un patrón de línea.","completion":"var pattern = FillPatternElement.Create(doc, fillPattern);\nvar linePattern = LinePatternElement.Create(doc, linePattern);"}
{"prompt":"Crea un refuerzo de área simple en piso y en muro.","completion":"var areaReinFloor = AreaReinforcement.Create(doc, floor, curves, majorDirection, areaReinTypeId, rebarBarTypeId, rebarHookTypeId);\nvar areaReinWall  = AreaReinforcement.Create(doc, wall, curveList, majorDirection, areaReinTypeId, rebarBarTypeId, rebarHookTypeId);"}
{"prompt":"Crea una vista de borrador de dibujo.","completion":"var viewType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault();\nvar draftingView = ViewDrafting.Create(doc, viewType.Id);"}
{"prompt":"Crea un muro basado en el perfil de una viga.","completion":"var baseline = Line.CreateBound(curveArray[0].GetEndPoint(0), curveArray[0].GetEndPoint(1));\nvar wall = Wall.Create(doc, baseline, wallTypeId, level.Id, false);"}
{"prompt":"Crea muros debajo de vigas especificadas.","completion":"var beamLine = beamCurve;\nvar wall = Wall.Create(doc, beamLine, wallTypeId, level.Id, false);"}
{"prompt":"Obtén todos los elementos del documento para sistemas de cortinas.","completion":"var elements = new FilteredElementCollector(doc).ToElements();"}
{"prompt":"Obtén el primer bucle de curvas de una celda de muro cortina.","completion":"if (cell.CurveLoops.Size > 0)\n{\n    var curves = cell.CurveLoops.get_Item(0);\n}"}
{"prompt":"Obtén todos los elementos del documento (muro cortina).","completion":"var elements = new FilteredElementCollector(doc).ToElements();"}
{"prompt":"Crea un muro cortina usando una línea base y un tipo de muro.","completion":"var baseline = Line.CreateBound(startPoint, endPoint);\nvar curtainWall = Wall.Create(doc, baseline, wallTypeId, level.Id, false);"}
{"prompt":"Crea un arco para una viga curva basada en parámetros.","completion":"var arc = Arc.Create(center, radius, startAngle, endAngle, xAxis, yAxis);"}
{"prompt":"Crea una línea geométrica y recopila elementos de vista.","completion":"var geomLine = Line.CreateBound(projectionStart, projectionEnd);\nvar viewElems = new FilteredElementCollector(view.Document, view.Id).ToList();"}
{"prompt":"Crea nuevas curvas basadas en los extremos de una curva base y otra curva.","completion":"var newCurve = Line.CreateBound(\n    new XYZ(baseCurve.GetEndPoint(0).X, curve.GetEndPoint(0).Y, curve.GetEndPoint(0).Z),\n    new XYZ(curve.GetEndPoint(1).X, curve.GetEndPoint(1).Y, curve.GetEndPoint(1).Z)\n);"}
{"prompt":"Crea elementos de desplazamiento padre e hijo en la vista.","completion":"var parentDisp = DisplacementElement.Create(doc, parentIds, parentLocation, view, null);\nvar childDisp  = DisplacementElement.Create(doc, childIds, childLocation, view, parentDisp);"}
{"prompt":"Crea un muro base para una familia de puerta.","completion":"var level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstElement() as Level;\nvar wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(100, 0, 0));\nvar hostWall = Wall.Create(doc, wallCurve, level.Id, false);"}
{"prompt":"Crea un grupo de parámetros compartidos para puertas y varias definiciones.","completion":"var group = sharedParams.Groups.Create(\"DoorProjectSharedParameters\");\ngroup.Definitions.Create(new ExternalDefinitionCreationOptions(\"BasalOpening\", ParameterType.Text));\ngroup.Definitions.Create(new ExternalDefinitionCreationOptions(\"InstanceOpening\", ParameterType.Text));"}

{"prompt":"Obtén todas las instancias de puertas y familias cargadas.","completion":"var doors = new FilteredElementCollector(doc).WherePasses(new ElementCategoryFilter(BuiltInCategory.OST_Doors)).Cast<FamilyInstance>().ToList();\nvar families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().ToList();"}
{"prompt":"Obtén todos los elementos del documento.","completion":"var elements = new FilteredElementCollector(doc).ToElements();"}
{"prompt":"Obtén todos los elementos del documento de la vista origen.","completion":"var elements = new FilteredElementCollector(fromView.Document).ToElements();"}
{"prompt":"Obtén todos los elementos del documento.","completion":"var elements = new FilteredElementCollector(m_document).ToElements();"}
{"prompt":"Crea un eje vertical en la sección.","completion":"Line axis = Line.CreateBound(sOrigin, sOrigin + XYZ.BasisZ);"}
{"prompt":"Añade un muro basado en una línea dada.","completion":"Line line = Line.CreateBound(start, end);\nWall.Create(doc, line, defaultElementTypeId, level.Id, height, offset, true, true);"}
{"prompt":"Crea un arco y una dimensión angular en la vista activa.","completion":"Arc arc = Arc.Create(end0, end1, pointOnCurve);\nAngularDimension.Create(doc, doc.ActiveView, arc, new ReferenceArray(), dimType.Id);"}
{"prompt":"Obtén todos los elementos del documento.","completion":"var elements = new FilteredElementCollector(doc).ToElements();"}
{"prompt":"Crea una nueva nota de texto en el origen de coordenadas.","completion":"TextNote.Create(e.Document, e.View.Id, XYZ.Zero, strText, options);"}
{"prompt":"Obtén todos los elementos del documento.","completion":"var elements = new FilteredElementCollector(document).ToElements();"}
{"prompt":"Configura exportación a PDF y crea un parámetro combinado.","completion":"var pdfSettings = ExportPDFSettings.Create(doc, name, options);\nvar cellData = TableCellCombinedParameterData.Create();"}
{"prompt":"Obtén todos los elementos del documento.","completion":"var elements = new FilteredElementCollector(doc).ToElements();"}
{"prompt":"Dibuja un rectángulo con cuatro líneas.","completion":"Line.CreateBound(new XYZ(0,0,0), new XYZ(0,60,0));\nLine.CreateBound(new XYZ(0,60,0), new XYZ(0,60,40));\nLine.CreateBound(new XYZ(0,60,40), new XYZ(0,0,40));\nLine.CreateBound(new XYZ(0,0,40), new XYZ(0,0,0));"}
{"prompt":"Obtén familias y partes de fabricación.","completion":"var families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().ToList();\nvar parts = new FilteredElementCollector(doc).OfClass(typeof(FabricationPart)).Cast<FabricationPart>().ToList();"}
{"prompt":"Crea varias piezas de fabricación con diferentes tipos.","completion":"FabricationPart.Create(doc, bt_sqBend, 0, levelOne.Id);\nFabricationPart.Create(doc, bt_tap, 0, levelOne.Id);\nFabricationPart.Create(doc, bt_radBend, 0, levelOne.Id);"}
{"prompt":"Obtén todos los elementos del documento.","completion":"var elements = new FilteredElementCollector(doc).ToElements();"}
{"prompt":"Obtén instancias con un filtro dado.","completion":"var instances = new FilteredElementCollector(document).WherePasses(filter).ToElements();"}
{"prompt":"Crea líneas de perfil conectando puntos.","completion":"for(int i=0; i<profileData.GetLength(0); i++)\n{\n    Line.CreateBound(profileData[i,0], profileData[i,1]);\n}"}
{"prompt":"Obtén todos los elementos del documento.","completion":"var elements = new FilteredElementCollector(m_app.ActiveUIDocument.Document).ToElements();"}
{"prompt":"Crea un polígono con cuatro líneas.","completion":"var loop = new CurveLoop();\nloop.Append(Line.CreateBound(p0,p1));\nloop.Append(Line.CreateBound(p1,p2));\nloop.Append(Line.CreateBound(p2,p3));\nloop.Append(Line.CreateBound(p3,p0));"}
{"prompt":"Crea un boceto para una familia de ventana.","completion":"SketchPlane.Create(doc, workPlane.GetPlane());"}
{"prompt":"Crea planos de referencia para guillotina de ventana.","completion":"refPlaneCreator.Create(doc, centerPlane, view, new XYZ(0,wallThickness/2,0), XYZ.BasisZ, \"Sash\");"}
{"prompt":"Obtén todos los elementos del documento.","completion":"var elements = new FilteredElementCollector(app.ActiveUIDocument.Document).ToElements();"}
{"prompt":"Obtén todos los elementos del documento.","completion":"var elements = new FilteredElementCollector(m_currentDoc).ToElements();"}
{"prompt":"Obtén todos los elementos del documento.","completion":"var elements = new FilteredElementCollector(m_doc).ToElements();"}
{"prompt":"Mide altura creando línea y plano de boceto.","completion":"var sp = SketchPlane.Create(doc, plane);\nvar result = Line.CreateBound(center, intersection);"}
{"prompt":"Crea línea de rebote de rayo con boceto.","completion":"Line.CreateBound(startpt,endpt);\nSketchPlane.Create(doc,geometryPlane);"}
{"prompt":"Añade caras y aristas a un BRep cube.","completion":"brepBuilder.AddFace(BRepBuilderSurfaceGeometry.Create(bottom,null),true);\nbrepBuilder.AddFace(BRepBuilderSurfaceGeometry.Create(top,null),false);\nBRepBuilderEdgeGeometry.Create(new XYZ(100,0,0),new XYZ(100,100,0));"}
{"prompt":"Obtén instancias de puertas y familias.","completion":"var doors = new FilteredElementCollector(doc).WherePasses(new ElementCategoryFilter(BuiltInCategory.OST_Doors)).Cast<FamilyInstance>().ToList();\nvar families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().ToList();"}
{"prompt":"Duplica vistas en varios documentos.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().ToList();"}
{"prompt":"Duplica vistas usando utilidades entre documentos.","completion":"var views = new FilteredElementCollector(fromView.Document).OfClass(typeof(View)).Cast<View>().ToList();"}
{"prompt":"Actualiza sección creando una línea base vertical.","completion":"Line axis = Line.CreateBound(sOrigin, sOrigin + XYZ.BasisZ);"}
{"prompt":"Añade un muro usando boceto.","completion":"var line = Line.CreateBound(start,end);\nWall.Create(doc,line,defaultElementTypeId,level.Id,height,offset,true,true);"}
{"prompt":"Añade un filtro de vista a un documento.","completion":"ParameterFilterElement.Create(doc, filterName, categorySet, elemFilter);"}
{"prompt":"Obtén todos los elementos del documento.","completion":"var elements = new FilteredElementCollector(document).ToElements();"}
{"prompt":"Registra un comando externo con líneas iniciales y finales.","completion":"Line line1 = Line.CreateBound(new XYZ(0,0,0), new XYZ(0,60,0));\nWall.Create(uiDoc.Document, curves, false);"}
{"prompt":"Convierte ítems a objetos de fabricación.","completion":"var fams = new FilteredElementCollector(doc).OfClass(typeof(FabricationPart)).ToList();"}
{"prompt":"Crea layout de partes de fabricación múltiples.","completion":"FabricationPart.Create(doc, bt_sqBend,0,levelOne.Id);\nFabricationPart.Create(doc, bt_tap,0,levelOne.Id);"}
{"prompt":"Carga una parte de fabricación desde un archivo.","completion":"using(var part=FabricationPart.Create(doc,nextFile,levelOne.Id)){}"}
{"prompt":"Obtén instancias con filtro.","completion":"var instances = new FilteredElementCollector(document).WherePasses(filter).ToElements();"}
{"prompt":"Crea intersección de líneas consecutivas.","completion":"Line line = Line.CreateBound(points[ii], points[ii+1]);"}
{"prompt":"Añade curvas al esqueleto de un manejador de aire.","completion":"curves.Append(Line.CreateBound(profileData[i,0],profileData[i,1]));\nSketchPlane.Create(doc,plane);"}
{"prompt":"Obtén todos los elementos del documento.","completion":"var elements = new FilteredElementCollector(m_app.ActiveUIDocument.Document).ToElements();"}
{"prompt":"Construye un marco de vigas definiendo su contorno.","completion":"CurveLoop profile = new CurveLoop();\nprofile.Append(Line.CreateBound(p0,p1));\nSweepProfile sp = m_revit.Create.NewCurveLoopsProfile(new[]{profile});"}
{"prompt":"Crea datos de marco: nivel, vista y colectores.","completion":"var newLevel = Level.Create(doc, elevation);\nvar viewPlan = ViewPlan.Create(doc, floorPlanId, newLevel.Id);\nvar cols = new FilteredElementCollector(doc).ToElements();"}
{"prompt":"Crea un elemento FreeForm con curvas.","completion":"var loop = CurveLoop.Create(curves);\nvar element = FreeFormElement.Create(familyDoc,block);"}
{"prompt":"Genera un piso usando bucle de curvas y parámetros.","completion":"var loops = new List<CurveLoop>{loop};\nFloor.Create(doc,loops,floorTypeId,level.Id,structural,null,0.0);"}
{"prompt":"Crea líneas y arcos para definir piso.","completion":"Line.CreateBound(start,end);\nArc.Create(start,end,middle);"}
{"prompt":"Crea una conexión estructural detallada.","completion":"var connType = StructuralConnectionHandlerType.Create(doc,\"usclipangle\", new Guid(\"A42C5CE5-...\"),\"usclipangle\");\nStructuralConnectionHandler.Create(doc,ids,connType.Id);"}
{"prompt":"Crea caras y aristas de un BRep con geometría booleana.","completion":"brepBuilder.AddFace(BRepBuilderSurfaceGeometry.Create(frontSurf,null),false);\nbrepBuilder.AddFace(BRepBuilderSurfaceGeometry.Create(backSurf,null),false);\nBRepBuilderEdgeGeometry.Create(Arc.Create(new XYZ(0,-100,0),new XYZ(100,-100,0),new XYZ(50,-50,0)));"}
{"prompt":"Obtén tipos de vista familiares.","completion":"var viewTypes = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).ToList();"}

{"prompt":"Registra un evento externo y recoge todos los elementos del documento.","completion":"var extEvent = ExternalEvent.Create(handler);\nvar elements = new FilteredElementCollector(document).ToElements();"}
{"prompt":"Registra un evento externo y obtiene todos los elementos del documento principal.","completion":"var extEvent = ExternalEvent.Create(handler);\nvar elements = new FilteredElementCollector(doc).ToElements();"}
{"prompt":"Obtén todos los ejes (Grid) del documento.","completion":"var grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();"}
{"prompt":"Crea rejillas a partir de líneas y arcos dados.","completion":"Grid.Create(doc, line);\nGrid.Create(doc, arc);"}
{"prompt":"Obtén las vistas seleccionadas listadas para exportación.","completion":"var views = new FilteredElementCollector(commandData.Application.ActiveUIDocument.Document).Cast<View>().ToList();"}
{"prompt":"Obtén todos los elementos del documento activo para importar DWG.","completion":"var elements = new FilteredElementCollector(m_activeDoc).ToElements();"}
{"prompt":"Importa un tipo de imagen y crea su instancia en una vista.","completion":"var imgType = ImageType.Create(m_activeDoc, typeOptions);\nImageInstance.Create(m_activeDoc, view, imgType.Id, placementOptions);"}
{"prompt":"Crea un marcador de problema en el documento.","completion":"var marker = IssueMarker.Create(document, hasPickOne.ElementId);"}
{"prompt":"Crea un archivo nuevo y un grupo de parámetros compartidos.","completion":"using(var fs = File.Create(newPath)) { }\nvar apiGroup = parafile.Groups.Create(\"APIGroup\");"}
{"prompt":"Obtén niveles, crea un nuevo nivel y lee sus parámetros.","completion":"var levels = new FilteredElementCollector(document).OfClass(typeof(Level)).Cast<Level>().ToList();\nvar newLevel = Level.Create(document, levelElevation);"}
{"prompt":"Convierte unidades internas a externas y viceversa.","completion":"double external = UnitUtils.ConvertFromInternalUnits(internalValue, toUnit);\ndouble internalValue = UnitUtils.ConvertToInternalUnits(external, fromUnit);"}
{"prompt":"Gestiona cargas: crea casos de carga y naturalezas de carga.","completion":"var loadNatures = new FilteredElementCollector(uiapplication.ActiveUIDocument.Document).OfClass(typeof(LoadNature)).ToList();\nvar newNature = LoadNature.Create(uiapplication.ActiveUIDocument.Document, natureName);\nvar newCase = LoadCase.Create(uiapplication.ActiveUIDocument.Document, caseName, newNature.Id, categoryId);"}
{"prompt":"Gestiona combinaciones de carga y usos de carga.","completion":"var combos = new FilteredElementCollector(m_document).OfClass(typeof(LoadCombination)).ToList();\nvar combo = LoadCombination.Create(m_document, name, comboType, comboState);\nvar usage = LoadUsage.Create(m_document, usageName);"}
{"prompt":"Obtén todos los elementos para análisis de masa.","completion":"var elements = new FilteredElementCollector(m_uiDoc.Document).ToElements();"}
{"prompt":"Crea un perfil de forma manipulando boceto.","completion":"var skPlane = SketchPlane.Create(m_revitDoc, geometryPlane);\nvar axisLine = Line.CreateBound(startPoint, endPoint);\nvar refs = form.get_CurveLoopReferencesOnProfile(profileIndex,0);"}
{"prompt":"Obtén todos los elementos de vista para medir área de panel.","completion":"var elements = new FilteredElementCollector(m_uiDoc.Document).ToElements();"}
{"prompt":"Crea un boceto de forma con líneas y arcos y genera paneles.","completion":"var line1 = Line.CreateBound(ptA,ptB);\nvar arc = Arc.Create(ptA,ptB,ptC);\nvar line2 = Line.CreateBound(ptB,ptC);\nvar loop = new CurveLoop();\nloop.Append(line1);\nloop.Append(arc);\nloop.Append(line2);\nSketchPlane.Create(doc,plane);"}
{"prompt":"Obtén todos los elementos para controlar ángulos de panel.","completion":"var elements = new FilteredElementCollector(m_doc).ToElements();"}
{"prompt":"Obtén todos los elementos para procesar parámetros desde imagen.","completion":"var elements = new FilteredElementCollector(doc).ToElements();"}
{"prompt":"Dibuja una línea entre dos puntos y crea un plano de boceto.","completion":"var line = Line.CreateBound(start,end);\nSketchPlane.Create(doc,geometryPlane);"}
{"prompt":"Obtén todas las propiedades de material en el documento.","completion":"var materials = new FilteredElementCollector(m_revit.ActiveUIDocument.Document).OfClass(typeof(Material)).Cast<Material>().ToList();"}
{"prompt":"Obtén todas las cantidades de material en el documento.","completion":"var elems = new FilteredElementCollector(m_doc).ToElements();"}
{"prompt":"Obtén elementos en un hilo de trabajo para UI sin bloqueo.","completion":"var elements = new FilteredElementCollector(view.Document).ToElements();"}
{"prompt":"Crea vistas analíticas para reporte de presión de red.","completion":"var elems = new FilteredElementCollector(Document).OfClass(typeof(ViewFamilyType)).ToList();"}
{"prompt":"Convierte valores de flujo usando unidades internas.","completion":"double flow = UnitUtils.ConvertFromInternalUnits(rawFlow, formatOption.GetUnitTypeId());"}
{"prompt":"Recupera información de red usando un filtro multi-categoría.","completion":"var info = new FilteredElementCollector(doc).WherePasses(multiCatFilter).ToElements();"}
{"prompt":"Obtén elementos para creación de aleros y canaletas.","completion":"var elems = new FilteredElementCollector(m_rvtDoc).ToElements();"}
{"prompt":"Crea una línea de perfil y genera un nuevo barrido alojado.","completion":"var baseline = Line.CreateBound(p1,p2);\nvar slabEdge = SlabEdge.Create(doc,baseline,edgeTypeId,level.Id);"}
{"prompt":"Dibuja perfiles para nuevas aberturas basadas en líneas y arcos.","completion":"var line = Line.CreateBound(p1,p2);\nvar arc1 = Arc.Create(p1,p3,p2);\nvar arc2 = Arc.Create(p1,p3,p4);"}
{"prompt":"Crea refuerzos de trayectoria a lo largo de una curva.","completion":"var curves = new List<Curve>{Line.CreateBound(p1,p2)};\nPathReinforcement.Create(document,data,curves,flip,typeId,barTypeId,hookTypeId,hookTypeId);"}
{"prompt":"Recoge todos los elementos para nuevas barras de refuerzo.","completion":"var bars = new FilteredElementCollector(m_rvtUIDoc.Document, selectedIds).ToElements();"}
{"prompt":"Crea un nuevo perfil de forma de barra de refuerzo.","completion":"var shape = RebarShape.Create(m_rvtDoc,shapeDef,null);" }
{"prompt":"Registra parámetros compartidos para barras de refuerzo.","completion":"var group = file.Groups.Create(\"Rebar Shape Parameters\");"}
{"prompt":"Obtén niveles y techos, crea líneas para techo.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().ToList();\nvar roofs = new FilteredElementCollector(doc).OfClass(typeof(FootPrintRoof)).ToList();"}
{"prompt":"Obtén todas las vistas para visualización de objeto.","completion":"var views = new FilteredElementCollector(doc.Document).OfClass(typeof(View)).Cast<View>().ToList();"}
{"prompt":"Crea curvas de límite de abertura y sketch para aberturas.","completion":"var sp = SketchPlane.Create(app.ActiveUIDocument.Document,plane);\nvar line1 = Line.CreateBound(startP2,endP2);\nvar line2 = Line.CreateBound(startP2,endP2);"}
{"prompt":"Obtén todas las aberturas en el documento.","completion":"var openings = new FilteredElementCollector(commandData.Application.ActiveUIDocument.Document).OfClass(typeof(Opening)).Cast<Opening>().ToList();"}
{"prompt":"Obtén paneles de programación en el documento.","completion":"var panels = new FilteredElementCollector(doc).OfClass(typeof(PanelScheduleSheetInstance)).Cast<PanelScheduleSheetInstance>().ToList();"}
{"prompt":"Coloca una programación de panel en una hoja existente.","completion":"PanelScheduleSheetInstance.Create(doc, psView.Id, sheetId);"}
{"prompt":"Envuelve llamadas a PathOfTravel.Create para múltiples orígenes/destinos.","completion":"var paths = PathOfTravel.Create(doc, startIds, endIds);"}

{"prompt":"Recupera todas las instancias de refuerzo de trayectoria en el documento actual.","completion":"var reinforcements = new FilteredElementCollector(commandData.Application.ActiveUIDocument.Document).OfClass(typeof(PathReinforcement)).Cast<PathReinforcement>().ToList();"}
{"prompt":"Obtén todos los símbolos de familia y dibuja una línea entre dos puntos proyectados.","completion":"var symbols = new FilteredElementCollector(m_revitDoc.Document).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nvar line = Line.CreateBound(projectedStartP, projectedEndP);"}
{"prompt":"Recupera todas las opciones de colocación disponibles en el documento.","completion":"var options = new FilteredElementCollector(document).ToElements();"}
{"prompt":"Crea un tipo de nube de puntos y su instancia en el documento.","completion":"var type = PointCloudType.Create(doc, engineType, identifier);\nPointCloudInstance.Create(doc, type.Id, trf);"}
{"prompt":"Registra un evento externo de revisión y recupera todos los elementos del documento.","completion":"var extEvent = ExternalEvent.Create(new PostCommandRevisionMonitorEvent(this));\nvar elements = new FilteredElementCollector(doc).ToElements();"}
{"prompt":"Crea un circuito eléctrico de potencia a partir de un elemento seleccionado.","completion":"var circuit = ElectricalSystem.Create(m_revitDoc.Document, selectionElementId, ElectricalSystemType.PowerCircuit);"}
{"prompt":"Convierte identificadores de elemento genéricos usando un coleccionador.","completion":"var list = new FilteredElementCollector(RevitStartInfo.RevitDoc).OfClass(typeof(T)).Cast<T>().ToList();"}
{"prompt":"Recupera todos los elementos y crea un grupo de parámetros compartidos de solo lectura.","completion":"var elems = new FilteredElementCollector(doc).ToElements();\nvar dGroup = dFile.Groups.Create(\"Demo group\");\nmanager.Definition = dGroup.Definitions.Create(manager.GetCreationOptions());"}
{"prompt":"Crea un contenedor de barras de refuerzo para una viga con tipo dado.","completion":"var cont = RebarContainer.Create(m_revitDoc, m_hostObject, conTypeId);"}
{"prompt":"Genera líneas de refuerzo a partir de puntos de inicio y fin.","completion":"curves.Add(Line.CreateBound(startPoint, endPoint));\ncurves.Add(Line.CreateBound(second, fourth));"}
{"prompt":"Crea un contenedor de barras de refuerzo para una columna con tipo dado.","completion":"var cont = RebarContainer.Create(m_revitDoc, host, conTypeId);"}
{"prompt":"Genera líneas de refuerzo para una columna usando cuatro puntos.","completion":"curves.Add(Line.CreateBound(first, second));\ncurves.Add(Line.CreateBound(second, fourth));"}
{"prompt":"Recupera los elementos seleccionados para refuerzo de forma libre.","completion":"var elems = new FilteredElementCollector(m_commandData.Application.ActiveUIDocument.Document, selectedIds).ToElements();"}
{"prompt":"Recupera todas las instancias de contenedor de refuerzo de forma libre.","completion":"var elems = new FilteredElementCollector(commandData.Application.ActiveUIDocument.Document).ToElements();"}
{"prompt":"Crea un archivo y añade parámetros compartidos de refuerzo libre.","completion":"using(var fs = File.Create(paramFile)){}\nvar grp = parafile.Groups.Create(\"RebarTestParamGroup\");\ngrp.Definitions.Create(new ExternalDefinitionCreationOptions(paramName, ParameterType.Number));"}
{"prompt":"Recupera todos los tipos de barra de refuerzo y crea una restricción.","completion":"var types = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).Cast<RebarBarType>().ToList();\nvar constraint = RebarConstraint.Create(handle, refs, true, 0.0);"}
{"prompt":"Recupera todos los elementos del documento de datos para regeneración de curvas.","completion":"var elems = new FilteredElementCollector(data.GetDocument()).ToElements();"}
{"prompt":"Construye líneas de actualización de grupo de refuerzo en servidor.","completion":"var distribPath = new List<Line>();\ndistribPath.Add(Line.CreateBound(curves[ii].Evaluate(0.5, true), curves[ii+1].Evaluate(0.5, true)));\nvar startLine = Line.CreateBound(firstCurve.Evaluate(0, true), lastCurve.Evaluate(0, true));"}
{"prompt":"Recupera todas las ReferencePlane del documento.","completion":"var planes = new FilteredElementCollector(m_document.Document).OfClass(typeof(ReferencePlane)).Cast<ReferencePlane>().ToList();"}
{"prompt":"Genera líneas de refuerzo para vigas usando dos puntos.","completion":"curves.Add(Line.CreateBound(startPoint, endPoint));\ncurves.Add(Line.CreateBound(second, fourth));"}
{"prompt":"Genera líneas de refuerzo para columnas usando dos puntos.","completion":"curves.Add(Line.CreateBound(first, second));\ncurves.Add(Line.CreateBound(second, fourth));"}
{"prompt":"Recupera los elementos seleccionados para refuerzo de marco.","completion":"var elems = new FilteredElementCollector(m_commandData.Application.ActiveUIDocument.Document, selectedIds).ToElements();"}
{"prompt":"Recupera instancias de refuerzo de marco en el documento.","completion":"var elems = new FilteredElementCollector(commandData.Application.ActiveUIDocument.Document).ToElements();"}
{"prompt":"Crea un muro estructural con propiedades condicionales y dibuja una línea según el conteo.","completion":"int count = CreateStructureWall.CreatedWalls.Size + CreatedWalls.Size;\nvar line = Line.CreateBound(new XYZ(count*15,0,0), new XYZ(count*15,40,0));"}
{"prompt":"Recupera todos los elementos del documento de la UI.","completion":"var elems = new FilteredElementCollector(uiApplication.ActiveUIDocument.Document).ToElements();"}
{"prompt":"Recupera todos los elementos del documento de techos y habitaciones.","completion":"var elems = new FilteredElementCollector(m_document).ToElements();"}
{"prompt":"Crea un grupo de parámetros compartidos para programación de habitaciones.","completion":"using(var fs = File.Create(paramFile)){}\nvar grp = parafile.Groups.Create(\"SDKSampleRoomScheduleGroup\");\ngrp.Definitions.Create(new ExternalDefinitionCreationOptions(paramName, ParameterType.Text));"}
{"prompt":"Recupera todos los elementos del documento activo para datos de habitaciones.","completion":"var elems = new FilteredElementCollector(activeDoc).ToElements();"}
{"prompt":"Convierte valores de enrutamiento entre unidades internas y externas.","completion":"double val = UnitUtils.ConvertFromInternalUnits(decimalFeet, formatOption.GetUnitTypeId());"}
{"prompt":"Recupera todos los elementos y prepara un escritor XML para análisis de preferencias.","completion":"var elems = new FilteredElementCollector(m_application.ActiveUIDocument.Document).ToElements();\nusing(var writer = XmlWriter.Create(output, xmlWriterSettings)){}"}
{"prompt":"Escribe preferencias de enrutamiento a un archivo XML.","completion":"using(var writer = XmlWriter.Create(sfd.FileName, xmlWriterSettings)){}"}
{"prompt":"Crea segmentos de tubería con material y dimensiones dadas.","completion":"PipeSegment.Create(m_document, materialId, scheduleId, sizes);"}
{"prompt":"Crea una hoja nueva y coloca una instancia de programación.","completion":"var newSheet = ViewSheet.Create(document, titleBlockId);\nScheduleSheetInstance.Create(document, newSheet.Id, schedule.Id, upperLeft);"}
{"prompt":"Dibuja un círculo de selección y crea su plano de boceto.","completion":"var circle = Arc.Create(point,5,0,Math.PI*2,faceSketchPlane.GetPlane().XVec,faceSketchPlane.GetPlane().YVec);\nSketchPlane.Create(m_document.Document,geometryPlane);"}
{"prompt":"Dibuja un perfil de viga con dos líneas.","completion":"var curve1 = Line.CreateBound(p1,p2);\nvar curve2 = Line.CreateBound(p1,p2);"}
{"prompt":"Recupera vistas de planta y dibuja una línea de perfil.","completion":"var plans = new FilteredElementCollector(m_commandData.Application.ActiveUIDocument.Document).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().ToList();\nvar curve = Line.CreateBound(p1,p2);"}
{"prompt":"Recupera niveles y dibuja una línea de perfil nulo.","completion":"var levels = new FilteredElementCollector(m_commandData.Application.ActiveUIDocument.Document).OfClass(typeof(Level)).Cast<Level>().ToList();\nvar curve = Line.CreateBound(p1,p2);"}
{"prompt":"Comprueba si un punto está dentro de un bucle y recupera tipos de vista.","completion":"bool inside = IsPointInsideCurveLoop(clickRay, modelCurveLoop);\nvar views = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).ToList();"}
{"prompt":"Recupera símbolos de familia para plot de seno.","completion":"var symbols = new FilteredElementCollector(document).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();"}
{"prompt":"Recupera todas las dimensiones puntuales del documento.","completion":"var dims = new FilteredElementCollector(document).OfClass(typeof(SpotDimension)).Cast<SpotDimension>().ToList();"}
{"prompt":"Inicializa la utilidad de automatización de escaleras.","completion":"var utility = StairsAutomationUtility.Create(document, stairsConfigs[stairsIndex]);"}
{"prompt":"Recupera todos los elementos para automatización de escaleras.","completion":"var elems = new FilteredElementCollector(doc).ToElements();"}
{"prompt":"Genera un bucle de contorno rectangular para un rellano de escalera.","completion":"var curveLoop = CurveLoop.CreateViaThicken(centerCurve, width, XYZ.BasisZ);"}
{"prompt":"Obtén la ruta y la huella de una escalera curva.","completion":"var path = m_stairsRun.GetStairsPath();\nvar footprint = m_stairsRun.GetFootprintBoundary();"}
{"prompt":"Crea arco y segmentos de línea para escalera curva esbozada.","completion":"var arc = Arc.Create(m_center, (m_innerRadius+m_outerRadius)/2, 0, m_includedAngle);\nvar segment = Line.CreateBound(boundaryCurves[0].Evaluate(1.0,true), boundaryCurves[1].Evaluate(1.0,true));"}
{"prompt":"Crea líneas para una escalera recta esbozada.","completion":"var line1 = Line.CreateBound(start, end);\nvar line2 = Line.CreateBound(boundaryCurves[0].Evaluate(1.0,true), boundaryCurves[1].Evaluate(1.0,true));"}
{"prompt":"Obtén el contorno y la huella de una escalera recta.","completion":"var path = m_stairsRun.GetStairsPath();\nvar footprint = m_stairsRun.GetFootprintBoundary();"}
{"prompt":"Recupera todos los elementos del documento estructural.","completion":"var elems = new FilteredElementCollector(rvtDoc).ToElements();"}
{"prompt":"Crea una etiqueta independiente para una viga y una nota de texto.","completion":"var tag = IndependentTag.Create(revitDoc.Document, view.Id, subelements[0].GetReference(), true);\nTextNote.Create(dbDoc, view.Id, origin, strText, currentTextTypeId);"}
{"prompt":"Recupera todos los elementos y crea dos etiquetas independientes.","completion":"var elems = new FilteredElementCollector(commandData.Application.ActiveUIDocument.Document).ToElements();\nIndependentTag.Create(m_revitDoc.Document, view.Id, ref1, true);\nIndependentTag.Create(m_revitDoc.Document, view.Id, ref2, true);"}
{"prompt":"Crea un Toposolid a partir de un bucle de curvas y subdivídelo.","completion":"var typeId = new FilteredElementCollector(doc).OfClass(typeof(ToposolidType)).OfType<ToposolidType>().FirstOrDefault()?.Id;\nvar levelId = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().First().Id;\nvar profile = CurveLoop.Create(new List<Curve>{\n  Line.CreateBound(pt1,pt2),Line.CreateBound(pt2,pt3),\n  Line.CreateBound(pt3,pt4),Line.CreateBound(pt4,pt1)\n});\nvar topo = Toposolid.Create(doc,new List<CurveLoop>{profile},points,typeId,levelId);\ntopo.CreateSubDivision(doc,new List<CurveLoop>{CurveLoop.CreateViaOffset(profile,-20,XYZ.BasisZ)});"}
{"prompt":"Recupera elementos y crea un muro mediante línea y parámetros fijos.","completion":"var elems = new FilteredElementCollector(document).ToElements();\nvar line = Line.CreateBound(sPoint,ePoint);\nvar wall = Wall.Create(document,line,wallType.Id,level.Id,10,0,true,true);"}
{"prompt":"Crea un escritor XML para guardar el árbol de recorrido.","completion":"using(var writer = XmlWriter.Create(fileName, settings)){}"}
{"prompt":"Recupera elementos y crea una truss con una línea base y un sketch plane.","completion":"var elems = new FilteredElementCollector(m_activeDocument.Document).ToElements();\nvar baseLine = Line.CreateBound(startPoint,endPoint);\nvar sp = SketchPlane.Create(document,plane);\nTruss.Create(document,m_selectedTrussType.Id,sp.Id,baseLine);"}
{"prompt":"Recupera todos los elementos del documento UI para interacción.","completion":"var elems = new FilteredElementCollector(uiApp.ActiveUIDocument.Document).ToElements();"}
{"prompt":"Recupera elementos para drag-and-drop desde el documento.","completion":"var elems = new FilteredElementCollector(m_document).ToElements();"}
{"prompt":"Recupera todos los elementos del documento de vista previa.","completion":"var elems = new FilteredElementCollector(_dbDocument).ToElements();"}
{"prompt":"Enumera todas las unidades válidas para una especificación dada.","completion":"var units = UnitUtils.GetValidUnits(m_specTypeId).ToList();"}
{"prompt":"Enumera todas las disciplinas y especificaciones medibles.","completion":"var disciplines = UnitUtils.GetAllDisciplines().ToList();\nvar specs = UnitUtils.GetAllMeasurableSpecs().ToList();"}
{"prompt":"Cuenta todas las colecciones de conjuntos de hojas en el documento.","completion":"var sets = new FilteredElementCollector(m_doc).OfClass(typeof(ViewSheetSet)).Cast<ViewSheetSet>().ToList();\nint count = sets.Count;"}
{"prompt":"Recupera todas las vistas del documento activo.","completion":"var views = new FilteredElementCollector(m_activeDocument).Cast<View>().ToList();"}
{"prompt":"Recupera todos los niveles para cálculo de escaleras helicoidales.","completion":"var levels = new FilteredElementCollector(rvtDoc).OfClass(typeof(Level)).Cast<Level>().ToList();"}
{"prompt":"Crea las líneas interior y exterior para una espiral de escalera de un solo punto.","completion":"var outer1 = Line.CreateBound(StartPoint,CornerPoint);\nvar outer2 = Line.CreateBound(CornerPoint,EndPoint);\nvar inner1 = Line.CreateBound(innerStart,innerCornerPnt);\nvar inner2 = Line.CreateBound(innerCornerPnt,innerEnd);"}
{"prompt":"Dibuja límites interior y exterior y línea media para escalera recta.","completion":"var outer = Line.CreateBound(StartPoint,EndPoint);\nvar inner = Line.CreateBound(innerStart,innerEnd);\nvar mid = Line.CreateBound(middleStart,middleEnd);"}

{"prompt":"Retrieve all path reinforcement instances in the current document.","completion":"var reinforcements = new FilteredElementCollector(commandData.Application.ActiveUIDocument.Document).OfClass(typeof(PathReinforcement)).Cast<PathReinforcement>().ToList();"}
{"prompt":"Get all family symbols and draw a line between two projected points.","completion":"var symbols = new FilteredElementCollector(m_revitDoc.Document).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();\nvar line = Line.CreateBound(projectedStartP, projectedEndP);"}
{"prompt":"Retrieve all placement options available in the document.","completion":"var options = new FilteredElementCollector(document).ToElements();"}
{"prompt":"Create a point cloud type and its instance in the document.","completion":"var type = PointCloudType.Create(doc, engineType, identifier);\nPointCloudInstance.Create(doc, type.Id, trf);"}
{"prompt":"Register an external revision monitoring event and retrieve all elements in the document.","completion":"var extEvent = ExternalEvent.Create(new PostCommandRevisionMonitorEvent(this));\nvar elements = new FilteredElementCollector(doc).ToElements();"}
{"prompt":"Create a power electrical circuit from a selected element.","completion":"var circuit = ElectricalSystem.Create(m_revitDoc.Document, selectionElementId, ElectricalSystemType.PowerCircuit);"}
{"prompt":"Convert generic element identifiers using a collector.","completion":"var list = new FilteredElementCollector(RevitStartInfo.RevitDoc).OfClass(typeof(T)).Cast<T>().ToList();"}
{"prompt":"Retrieve all elements and create a read-only shared parameters group.","completion":"var elems = new FilteredElementCollector(doc).ToElements();\nvar dGroup = dFile.Groups.Create(\"Demo group\");\nmanager.Definition = dGroup.Definitions.Create(manager.GetCreationOptions());"}
{"prompt":"Create a rebar container for a beam with the given type.","completion":"var cont = RebarContainer.Create(m_revitDoc, m_hostObject, conTypeId);"}
{"prompt":"Generate reinforcement lines from start and end points.","completion":"curves.Add(Line.CreateBound(startPoint, endPoint));\ncurves.Add(Line.CreateBound(second, fourth));"}
{"prompt":"Create a rebar container for a column with the given type.","completion":"var cont = RebarContainer.Create(m_revitDoc, host, conTypeId);"}
{"prompt":"Generate reinforcement lines for a column using four points.","completion":"curves.Add(Line.CreateBound(first, second));\ncurves.Add(Line.CreateBound(second, fourth));"}
{"prompt":"Retrieve the elements selected for free-form reinforcement.","completion":"var elems = new FilteredElementCollector(m_commandData.Application.ActiveUIDocument.Document, selectedIds).ToElements();"}
{"prompt":"Retrieve all free-form rebar container instances.","completion":"var elems = new FilteredElementCollector(commandData.Application.ActiveUIDocument.Document).ToElements();"}
{"prompt":"Create a file and add free-form rebar shared parameters.","completion":"using(var fs = File.Create(paramFile)){}\nvar grp = parafile.Groups.Create(\"RebarTestParamGroup\");\ngrp.Definitions.Create(new ExternalDefinitionCreationOptions(paramName, ParameterType.Number));"}
{"prompt":"Retrieve all rebar bar types and create a constraint.","completion":"var types = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).Cast<RebarBarType>().ToList();\nvar constraint = RebarConstraint.Create(handle, refs, true, 0.0);"}
{"prompt":"Retrieve all document data elements for curve regeneration.","completion":"var elems = new FilteredElementCollector(data.GetDocument()).ToElements();"}
{"prompt":"Build server rebar update lines.","completion":"var distribPath = new List<Line>();\ndistribPath.Add(Line.CreateBound(curves[ii].Evaluate(0.5, true), curves[ii+1].Evaluate(0.5, true)));\nvar startLine = Line.CreateBound(firstCurve.Evaluate(0, true), lastCurve.Evaluate(0, true));"}
{"prompt":"Retrieve all ReferencePlane elements in the document.","completion":"var planes = new FilteredElementCollector(m_document.Document).OfClass(typeof(ReferencePlane)).Cast<ReferencePlane>().ToList();"}
{"prompt":"Generate reinforcement lines for beams using two points.","completion":"curves.Add(Line.CreateBound(startPoint, endPoint));\ncurves.Add(Line.CreateBound(second, fourth));"}
{"prompt":"Generate reinforcement lines for columns using two points.","completion":"curves.Add(Line.CreateBound(first, second));\ncurves.Add(Line.CreateBound(second, fourth));"}
{"prompt":"Retrieve the elements selected for frame reinforcement.","completion":"var elems = new FilteredElementCollector(m_commandData.Application.ActiveUIDocument.Document, selectedIds).ToElements();"}
{"prompt":"Retrieve frame reinforcement instances in the document.","completion":"var elems = new FilteredElementCollector(commandData.Application.ActiveUIDocument.Document).ToElements();"}
{"prompt":"Create a structural wall with conditional properties and draw a line based on count.","completion":"int count = CreateStructureWall.CreatedWalls.Size + CreatedWalls.Size;\nvar line = Line.CreateBound(new XYZ(count*15,0,0), new XYZ(count*15,40,0));"}
{"prompt":"Retrieve all UI document elements.","completion":"var elems = new FilteredElementCollector(uiApplication.ActiveUIDocument.Document).ToElements();"}
{"prompt":"Retrieve all roof and room elements in the document.","completion":"var elems = new FilteredElementCollector(m_document).ToElements();"}
{"prompt":"Create a shared parameters group for room scheduling.","completion":"using(var fs = File.Create(paramFile)){}\nvar grp = parafile.Groups.Create(\"SDKSampleRoomScheduleGroup\");\ngrp.Definitions.Create(new ExternalDefinitionCreationOptions(paramName, ParameterType.Text));"}
{"prompt":"Retrieve all active document elements for room data.","completion":"var elems = new FilteredElementCollector(activeDoc).ToElements();"}
{"prompt":"Convert routing values between internal and external units.","completion":"double val = UnitUtils.ConvertFromInternalUnits(decimalFeet, formatOption.GetUnitTypeId());"}
{"prompt":"Retrieve all elements and prepare an XML writer for preference analysis.","completion":"var elems = new FilteredElementCollector(m_application.ActiveUIDocument.Document).ToElements();\nusing(var writer = XmlWriter.Create(output, xmlWriterSettings)){}"}
{"prompt":"Write routing preferences to an XML file.","completion":"using(var writer = XmlWriter.Create(sfd.FileName, xmlWriterSettings)){}"}
{"prompt":"Create pipe segments with given material and dimensions.","completion":"PipeSegment.Create(m_document, materialId, scheduleId, sizes);"}
{"prompt":"Create a new sheet and place a schedule instance.","completion":"var newSheet = ViewSheet.Create(document, titleBlockId);\nScheduleSheetInstance.Create(document, newSheet.Id, schedule.Id, upperLeft);"}
{"prompt":"Draw a selection circle and create its sketch plane.","completion":"var circle = Arc.Create(point,5,0,Math.PI*2,faceSketchPlane.GetPlane().XVec,faceSketchPlane.GetPlane().YVec);\nSketchPlane.Create(m_document.Document,geometryPlane);"}
{"prompt":"Draw a beam profile with two lines.","completion":"var curve1 = Line.CreateBound(p1,p2);\nvar curve2 = Line.CreateBound(p1,p2);"}
{"prompt":"Retrieve view plans and draw a profile line.","completion":"var plans = new FilteredElementCollector(m_commandData.Application.ActiveUIDocument.Document).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().ToList();\nvar curve = Line.CreateBound(p1,p2);"}
{"prompt":"Retrieve levels and draw a null profile line.","completion":"var levels = new FilteredElementCollector(m_commandData.Application.ActiveUIDocument.Document).OfClass(typeof(Level)).Cast<Level>().ToList();\nvar curve = Line.CreateBound(p1,p2);"}
{"prompt":"Check if a point is inside a loop and retrieve view types.","completion":"bool inside = IsPointInsideCurveLoop(clickRay, modelCurveLoop);\nvar views = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).ToList();"}
{"prompt":"Retrieve family symbols for sine plotting.","completion":"var symbols = new FilteredElementCollector(document).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().ToList();"}
{"prompt":"Retrieve all spot dimensions in the document.","completion":"var dims = new FilteredElementCollector(document).OfClass(typeof(SpotDimension)).Cast<SpotDimension>().ToList();"}
{"prompt":"Initialize the stairs automation utility.","completion":"var utility = StairsAutomationUtility.Create(document, stairsConfigs[stairsIndex]);"}
{"prompt":"Retrieve all elements for stairs automation.","completion":"var elems = new FilteredElementCollector(doc).ToElements();"}
{"prompt":"Generate a rectangular contour loop for a staircase landing.","completion":"var curveLoop = CurveLoop.CreateViaThicken(centerCurve, width, XYZ.BasisZ);"}
{"prompt":"Get the path and footprint of a curved staircase.","completion":"var path = m_stairsRun.GetStairsPath();\nvar footprint = m_stairsRun.GetFootprintBoundary();"}
{"prompt":"Create arc and line segments for sketched curved stairs.","completion":"var arc = Arc.Create(m_center, (m_innerRadius+m_outerRadius)/2, 0, m_includedAngle);\nvar segment = Line.CreateBound(boundaryCurves[0].Evaluate(1.0,true), boundaryCurves[1].Evaluate(1.0,true));"}
{"prompt":"Create lines for sketched straight stairs.","completion":"var line1 = Line.CreateBound(start, end);\nvar line2 = Line.CreateBound(boundaryCurves[0].Evaluate(1.0,true), boundaryCurves[1].Evaluate(1.0,true));"}
{"prompt":"Get the contour and footprint of straight stairs.","completion":"var path = m_stairsRun.GetStairsPath();\nvar footprint = m_stairsRun.GetFootprintBoundary();"}
{"prompt":"Retrieve all elements in the structural document.","completion":"var elems = new FilteredElementCollector(rvtDoc).ToElements();"}
{"prompt":"Create an independent tag for a beam and a text note.","completion":"var tag = IndependentTag.Create(revitDoc.Document, view.Id, subelements[0].GetReference(), true);\nTextNote.Create(dbDoc, view.Id, origin, strText, currentTextTypeId);"}
{"prompt":"Retrieve all elements and create two independent tags.","completion":"var elems = new FilteredElementCollector(commandData.Application.ActiveUIDocument.Document).ToElements();\nIndependentTag.Create(m_revitDoc.Document, view.Id, ref1, true);\nIndependentTag.Create(m_revitDoc.Document, view.Id, ref2, true);"}
{"prompt":"Create a Toposolid from a curve loop and subdivide it.","completion":"var typeId = new FilteredElementCollector(doc).OfClass(typeof(ToposolidType)).OfType<ToposolidType>().FirstOrDefault()?.Id;\nvar levelId = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().First().Id;\nvar profile = CurveLoop.Create(new List<Curve>{\n  Line.CreateBound(pt1,pt2),Line.CreateBound(pt2,pt3),\n  Line.CreateBound(pt3,pt4),Line.CreateBound(pt4,pt1)\n});\nvar topo = Toposolid.Create(doc,new List<CurveLoop>{profile},points,typeId,levelId);\ntopo.CreateSubDivision(doc,new List<CurveLoop>{CurveLoop.CreateViaOffset(profile,-20,XYZ.BasisZ)});"}
{"prompt":"Retrieve elements and create a wall using a line and fixed parameters.","completion":"var elems = new FilteredElementCollector(document).ToElements();\nvar line = Line.CreateBound(sPoint,ePoint);\nvar wall = Wall.Create(document,line,wallType.Id,level.Id,10,0,true,true);"}
{"prompt":"Create an XML writer to save the traversal tree.","completion":"using(var writer = XmlWriter.Create(fileName, settings)){}"}
{"prompt":"Retrieve elements and create a truss with a baseline and a sketch plane.","completion":"var elems = new FilteredElementCollector(m_activeDocument.Document).ToElements();\nvar baseLine = Line.CreateBound(startPoint,endPoint);\nvar sp = SketchPlane.Create(document,plane);\nTruss.Create(document,m_selectedTrussType.Id,sp.Id,baseLine);"}
{"prompt":"Retrieve all UI document elements for interaction.","completion":"var elems = new FilteredElementCollector(uiApp.ActiveUIDocument.Document).ToElements();"}
{"prompt":"Retrieve elements for drag-and-drop from the document.","completion":"var elems = new FilteredElementCollector(m_document).ToElements();"}
{"prompt":"Retrieve all preview document elements.","completion":"var elems = new FilteredElementCollector(_dbDocument).ToElements();"}
{"prompt":"List all valid units for a given specification.","completion":"var units = UnitUtils.GetValidUnits(m_specTypeId).ToList();"}
{"prompt":"List all disciplines and measurable specifications.","completion":"var disciplines = UnitUtils.GetAllDisciplines().ToList();\nvar specs = UnitUtils.GetAllMeasurableSpecs().ToList();"}
{"prompt":"Count all ViewSheetSet collections in the document.","completion":"var sets = new FilteredElementCollector(m_doc).OfClass(typeof(ViewSheetSet)).Cast<ViewSheetSet>().ToList();\nint count = sets.Count;"}
{"prompt":"Retrieve all views in the active document.","completion":"var views = new FilteredElementCollector(m_activeDocument).Cast<View>().ToList();"}
{"prompt":"Retrieve all levels for winder stairs calculation.","completion":"var levels = new FilteredElementCollector(rvtDoc).OfClass(typeof(Level)).Cast<Level>().ToList();"}
{"prompt":"Create inner and outer lines for a single-point winder staircase.","completion":"var outer1 = Line.CreateBound(StartPoint,CornerPoint);\nvar outer2 = Line.CreateBound(CornerPoint,EndPoint);\nvar inner1 = Line.CreateBound(innerStart,innerCornerPnt);\nvar inner2 = Line.CreateBound(innerCornerPnt,innerEnd);"}
{"prompt":"Draw inner and outer boundaries and a mid line for straight stairs.","completion":"var outer = Line.CreateBound(StartPoint,EndPoint);\nvar inner = Line.CreateBound(innerStart,innerEnd);\nvar mid = Line.CreateBound(middleStart,middleEnd);"}
