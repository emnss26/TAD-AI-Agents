{"prompt":"Crea un muro de 5 metros de largo y 3 metros de alto.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nLine line = Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\nWall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);"}
{"prompt":"Create a wall 5 meters long and 3 meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nLine line = Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\nWall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);"}
{"prompt":"Dibuja una pared de 5m de largo por 3m de altura.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nLine line = Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\nWall.Create(doc, line, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0.0, false, false);"}
{"prompt":"Inserta una ventana de 1 metro de ancho y 1.2 metros de alto en un muro.","completion":"FamilySymbol windowSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name.Contains(\"1m x 1.2m\"));\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif (windowSymbol != null && hostWall != null) {\n    if (!windowSymbol.IsActive) windowSymbol.Activate();\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    XYZ insertionPoint = (hostWall.Location as LocationCurve).Curve.Evaluate(0.5, true);\n    doc.Create.NewFamilyInstance(insertionPoint, windowSymbol, hostWall, level, StructuralType.NonStructural);\n}"}
{"prompt":"Insert a window 1m wide and 1.2m high into a wall.","completion":"FamilySymbol windowSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name.Contains(\"1m x 1.2m\"));\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif (windowSymbol != null && hostWall != null) {\n    if (!windowSymbol.IsActive) windowSymbol.Activate();\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    XYZ insertionPoint = (hostWall.Location as LocationCurve).Curve.Evaluate(0.5, true);\n    doc.Create.NewFamilyInstance(insertionPoint, windowSymbol, hostWall, level, StructuralType.NonStructural);\n}"}
{"prompt":"Coloca una ventana de 1x1.2 metros en la pared más cercana.","completion":"FamilySymbol windowSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name.Contains(\"1m x 1.2m\"));\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif (windowSymbol != null && hostWall != null) {\n    if (!windowSymbol.IsActive) windowSymbol.Activate();\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    XYZ insertionPoint = (hostWall.Location as LocationCurve).Curve.Evaluate(0.5, true);\n    doc.Create.NewFamilyInstance(insertionPoint, windowSymbol, hostWall, level, StructuralType.NonStructural);\n}"}
{"prompt":"Crea una columna estructural en la posición X=10, Y=5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (!columnSymbol.IsActive) columnSymbol.Activate();\ndoc.Create.NewFamilyInstance(new XYZ(10, 5, 0), columnSymbol, level, StructuralType.Column);"}
{"prompt":"Create a structural column at position X=10, Y=5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (!columnSymbol.IsActive) columnSymbol.Activate();\ndoc.Create.NewFamilyInstance(new XYZ(10, 5, 0), columnSymbol, level, StructuralType.Column);"}
{"prompt":"Pon un pilar estructural en las coordenadas 10,5.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (!columnSymbol.IsActive) columnSymbol.Activate();\ndoc.Create.NewFamilyInstance(new XYZ(10, 5, 0), columnSymbol, level, StructuralType.Column);"}
{"prompt":"Genera un piso rectangular de 10×8 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nCurveLoop loop = new CurveLoop();\nloop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0)));\nloop.Append(Line.CreateBound(new XYZ(10,0,0), new XYZ(10,8,0)));\nloop.Append(Line.CreateBound(new XYZ(10,8,0), new XYZ(0,8,0)));\nloop.Append(Line.CreateBound(new XYZ(0,8,0), new XYZ(0,0,0)));\nFloor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);"}
{"prompt":"Generate a rectangular floor of 10x8 meters.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nCurveLoop loop = new CurveLoop();\nloop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0)));\nloop.Append(Line.CreateBound(new XYZ(10,0,0), new XYZ(10,8,0)));\nloop.Append(Line.CreateBound(new XYZ(10,8,0), new XYZ(0,8,0)));\nloop.Append(Line.CreateBound(new XYZ(0,8,0), new XYZ(0,0,0)));\nFloor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);"}
{"prompt":"Crea un suelo con un contorno de 10 por 8 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nCurveLoop loop = new CurveLoop();\nloop.Append(Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0)));\nloop.Append(Line.CreateBound(new XYZ(10,0,0), new XYZ(10,8,0)));\nloop.Append(Line.CreateBound(new XYZ(10,8,0), new XYZ(0,8,0)));\nloop.Append(Line.CreateBound(new XYZ(0,8,0), new XYZ(0,0,0)));\nFloor.Create(doc, new List<CurveLoop> { loop }, floorType.Id, level.Id);"}
{"prompt":"Crea un muro cortina de 6 metros de ancho y 4 metros de alto.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif (cwType != null) {\n    Line baseLine = Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Create a curtain wall 6 meters wide and 4 meters high.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif (cwType != null) {\n    Line baseLine = Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, baseLine, cwType.Id, level.Id, UnitUtils.ConvertToInternalUnits(4.0, UnitTypeId.Meters), 0.0, false, false);\n}"}
{"prompt":"Crea 8 ejes horizontales separados por 10 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++){\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create 8 horizontal grids spaced 10 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++){\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Genera ocho rejillas horizontales con una separación de 10m.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i = 0; i < 8; i++){\n    Line line = Line.CreateBound(new XYZ(0, i * separation, 0), new XYZ(50, i * separation, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea 4 ejes en sentido vertical separados 10 metros.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<4; i++){\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create 4 vertical grids spaced 10 meters apart.","completion":"double separation = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\nfor(int i=0; i<4; i++){\n    Line line = Line.CreateBound(new XYZ(i * separation, 0, 0), new XYZ(i * separation, 40, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea columnas en cada intersección de ejes.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nvar grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\nif (colSymbol != null && level != null && grids.Count > 1)\n{\n    if (!colSymbol.IsActive) colSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            var result = grids[i].Curve.Intersect(grids[j].Curve, out IntersectionResultArray results);\n            if (result == SetComparisonResult.Overlap && results != null)\n            {\n                foreach (IntersectionResult ir in results)\n                {\n                    doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Create columns at each grid intersection.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nvar grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\nif (colSymbol != null && level != null && grids.Count > 1)\n{\n    if (!colSymbol.IsActive) colSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            var result = grids[i].Curve.Intersect(grids[j].Curve, out IntersectionResultArray results);\n            if (result == SetComparisonResult.Overlap && results != null)\n            {\n                foreach (IntersectionResult ir in results)\n                {\n                    doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Coloca pilares en todos los cruces de la rejilla.","completion":"FamilySymbol colSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nvar grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\nif (colSymbol != null && level != null && grids.Count > 1)\n{\n    if (!colSymbol.IsActive) colSymbol.Activate();\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            var result = grids[i].Curve.Intersect(grids[j].Curve, out IntersectionResultArray results);\n            if (result == SetComparisonResult.Overlap && results != null)\n            {\n                foreach (IntersectionResult ir in results)\n                {\n                    doc.Create.NewFamilyInstance(ir.XYZPoint, colSymbol, level, StructuralType.Column);\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Crea vigas entre las columnas alineadas horizontalmente.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nvar columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\nif (beamSymbol != null && level != null && columns.Count > 1)\n{\n    if(!beamSymbol.IsActive) beamSymbol.Activate();\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Create beams between horizontally aligned columns.","completion":"FamilySymbol beamSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nvar columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => c.GetTransform().Origin.Y).ThenBy(c => c.GetTransform().Origin.X).ToList();\nif (beamSymbol != null && level != null && columns.Count > 1)\n{\n    if(!beamSymbol.IsActive) beamSymbol.Activate();\n    for(int i=0; i < columns.Count - 1; i++)\n    {\n        LocationPoint p1 = columns[i].Location as LocationPoint;\n        LocationPoint p2 = columns[i+1].Location as LocationPoint;\n        if (p1 != null && p2 != null && Math.Abs(p1.Point.Y - p2.Point.Y) < 0.01)\n        {\n            Line line = Line.CreateBound(p1.Point, p2.Point);\n            doc.Create.NewFamilyInstance(line, beamSymbol, level, StructuralType.Beam);\n        }\n    }\n}"}
{"prompt":"Acota la longitud de un muro seleccionado por el usuario.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro para acotar\");\nWall wall = doc.GetElement(wallRef) as Wall;\nif (wall != null)\n{\n    LocationCurve locCurve = wall.Location as LocationCurve;\n    Line wallLine = locCurve.Curve as Line;\n    ReferenceArray refs = new ReferenceArray();\n    refs.Append(wallLine.GetEndPointReference(0));\n    refs.Append(wallLine.GetEndPointReference(1));\n    XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n    XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n    Line dimLine = Line.CreateBound(pt1, pt2);\n    doc.Create.NewDimension(doc.ActiveView, dimLine, refs);\n}"}
{"prompt":"Dimension the length of a user-selected wall.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall to dimension\");\nWall wall = doc.GetElement(wallRef) as Wall;\nif (wall != null)\n{\n    LocationCurve locCurve = wall.Location as LocationCurve;\n    Line wallLine = locCurve.Curve as Line;\n    ReferenceArray refs = new ReferenceArray();\n    refs.Append(wallLine.GetEndPointReference(0));\n    refs.Append(wallLine.GetEndPointReference(1));\n    XYZ pt1 = wallLine.GetEndPoint(0).Add(XYZ.BasisZ * 2);\n    XYZ pt2 = wallLine.GetEndPoint(1).Add(XYZ.BasisZ * 2);\n    Line dimLine = Line.CreateBound(pt1, pt2);\n    doc.Create.NewDimension(doc.ActiveView, dimLine, refs);\n}"}
{"prompt":"Crea una puerta de 0.9m de ancho y 2.1m de alto en el muro.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol doorSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name.Contains(\"0.9\") && s.Name.Contains(\"2.1\"));\nif(hostWall != null && doorSymbol != null)\n{\n    if(!doorSymbol.IsActive) doorSymbol.Activate();\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    XYZ insertionPoint = (hostWall.Location as LocationCurve).Curve.Evaluate(0.5, true);\n    doc.Create.NewFamilyInstance(insertionPoint, doorSymbol, hostWall, level, StructuralType.NonStructural);\n}"}
{"prompt":"Create a door 0.9m wide and 2.1m high in the wall.","completion":"Wall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nFamilySymbol doorSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name.Contains(\"0.9\") && s.Name.Contains(\"2.1\"));\nif(hostWall != null && doorSymbol != null)\n{\n    if(!doorSymbol.IsActive) doorSymbol.Activate();\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    XYZ insertionPoint = (hostWall.Location as LocationCurve).Curve.Evaluate(0.5, true);\n    doc.Create.NewFamilyInstance(insertionPoint, doorSymbol, hostWall, level, StructuralType.NonStructural);\n}"}
{"prompt":"Crea un nuevo Nivel llamado 'Nivel 4' a una elevación de 12 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nnewLevel.Name = \"Nivel 4\";"}
{"prompt":"Create a new Level named 'Level 4' at an elevation of 12 meters.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nnewLevel.Name = \"Level 4\";"}
{"prompt":"Inserta una armadura (truss) de 6 metros entre dos puntos.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Trusses).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && trussSymbol != null)\n{\n    if(!trussSymbol.IsActive) trussSymbol.Activate();\n    Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 10, 0));\n    doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Insert a 6-meter truss between two points.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol trussSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Trusses).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && trussSymbol != null)\n{\n    if(!trussSymbol.IsActive) trussSymbol.Activate();\n    Line trussLine = Line.CreateBound(new XYZ(0, 10, 0), new XYZ(UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters), 10, 0));\n    doc.Create.NewFamilyInstance(trussLine, trussSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Crea una tubería con un diámetro de 150mm.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0); XYZ p2=new XYZ(5,0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n    pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(150, UnitTypeId.Millimeters));\n}"}
{"prompt":"Create a pipe with a 150mm diameter.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nPipeType pipeType = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nPipingSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).FirstOrDefault() as PipingSystemType;\nif (level != null && pipeType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,0); XYZ p2=new XYZ(5,0,0);\n    Pipe pipe = Pipe.Create(doc, systemType.Id, pipeType.Id, level.Id, p1, p2);\n    pipe.get_Parameter(BuiltInParameter.RBS_PIPE_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(150, UnitTypeId.Millimeters));\n}"}
{"prompt":"Añade una etiqueta a la columna más cercana al origen.","completion":"View activeView = doc.ActiveView;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => (c.Location as LocationPoint).Point.DistanceTo(XYZ.Zero)).FirstOrDefault();\nif (column != null)\n{\n    LocationPoint loc = column.Location as LocationPoint;\n    IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n}"}
{"prompt":"Add a tag to the column closest to the origin.","completion":"View activeView = doc.ActiveView;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().Cast<FamilyInstance>().OrderBy(c => (c.Location as LocationPoint).Point.DistanceTo(XYZ.Zero)).FirstOrDefault();\nif (column != null)\n{\n    LocationPoint loc = column.Location as LocationPoint;\n    IndependentTag.Create(doc, activeView.Id, new Reference(column), true, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n}"}
{"prompt":"Crea una escalera de 12 peldaños entre Nivel 1 y Nivel 2.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nif (bottomLevel != null && topLevel != null)\n{\n    using (Transaction t = new Transaction(doc, \"Create Stairs\"))\n    {\n        t.Start();\n        Stairs.Create(doc, bottomLevel.Id, topLevel.Id);\n        // Additional logic might be needed to set riser number, etc.\n        t.Commit();\n    }\n}"}
{"prompt":"Create a 12-step stair between Level 1 and Level 2.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nif (bottomLevel != null && topLevel != null)\n{\n    using (Transaction t = new Transaction(doc, \"Create Stairs\"))\n    {\n        t.Start();\n        Stairs.Create(doc, bottomLevel.Id, topLevel.Id);\n        // Additional logic might be needed to set riser number, etc.\n        t.Commit();\n    }\n}"}
{"prompt":"Modela un barandal en una escalera existente.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Stairs).FirstOrDefault() as Stairs;\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Model a railing on an existing staircase.","completion":"RailingType railingType = new FilteredElementCollector(doc).OfClass(typeof(RailingType)).FirstOrDefault() as RailingType;\nStairs stairs = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Stairs).FirstOrDefault() as Stairs;\nif (railingType != null && stairs != null)\n{\n    Railing.Create(doc, stairs.Id, railingType.Id, RailingPlacementPosition.Treads);\n}"}
{"prompt":"Coloca un mueble en las coordenadas (2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && furnitureSymbol != null)\n{\n    if (!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,3,0), furnitureSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Place a piece of furniture at coordinates (2,3).","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && furnitureSymbol != null)\n{\n    if (!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,3,0), furnitureSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Crea una cimentación de viga de 8 metros de largo.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, StructuralType.Footing);\n}"}
{"prompt":"Create an 8-meter long foundation beam.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol foundationSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFoundation).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && foundationSymbol != null)\n{\n    if(!foundationSymbol.IsActive) foundationSymbol.Activate();\n    Line line = Line.CreateBound(new XYZ(0,0,0), new XYZ(UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters), 0, 0));\n    doc.Create.NewFamilyInstance(line, foundationSymbol, level, StructuralType.Footing);\n}"}
{"prompt":"Añade refuerzo a una columna.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault(s => s.Name.Contains(\"Stirrup\")) as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif(barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, XYZ.BasisZ, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Add reinforcement to a column.","completion":"RebarBarType barType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault(s => s.Name.Contains(\"Stirrup\")) as RebarShape;\nFamilyInstance column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif(barType != null && shape != null && column != null)\n{\n    Rebar.CreateFromRebarShape(doc, shape, barType, column, XYZ.BasisZ, XYZ.BasisX, XYZ.BasisY);\n}"}
{"prompt":"Fija el elemento seleccionado para que no se mueva.","completion":"UIDocument uidoc = new UIDocument(doc);\nElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\nif (selectedId != null && selectedId != ElementId.InvalidElementId)\n{\n    Element elementToPin = doc.GetElement(selectedId);\n    if (elementToPin != null && !elementToPin.Pinned) elementToPin.Pinned = true;\n}"}
{"prompt":"Pin the selected element so it cannot be moved.","completion":"UIDocument uidoc = new UIDocument(doc);\nElementId selectedId = uidoc.Selection.GetElementIds().FirstOrDefault();\nif (selectedId != null && selectedId != ElementId.InvalidElementId)\n{\n    Element elementToPin = doc.GetElement(selectedId);\n    if (elementToPin != null && !elementToPin.Pinned) elementToPin.Pinned = true;\n}"}
{"prompt":"Crea un conducto eléctrico de 1 pulgada de diámetro.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nConduitType conduitType = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstOrDefault() as ConduitType;\nif (level != null && conduitType != null)\n{\n    XYZ start = new XYZ(0,0,3); XYZ end = new XYZ(5,0,3);\n    Conduit conduit = Conduit.Create(doc, conduitType.Id, start, end, level.Id);\n    conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Inches));\n}"}
{"prompt":"Create an electrical conduit with a 1-inch diameter.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nConduitType conduitType = new FilteredElementCollector(doc).OfClass(typeof(ConduitType)).FirstOrDefault() as ConduitType;\nif (level != null && conduitType != null)\n{\n    XYZ start = new XYZ(0,0,3); XYZ end = new XYZ(5,0,3);\n    Conduit conduit = Conduit.Create(doc, conduitType.Id, start, end, level.Id);\n    conduit.get_Parameter(BuiltInParameter.RBS_CONDUIT_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Inches));\n}"}
{"prompt":"Genera un equipo eléctrico en X=1,Y=1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && panelSymbol != null)\n{\n    if(!panelSymbol.IsActive) panelSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(1,1,0), panelSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Generate an electrical panel at X=1,Y=1.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFamilySymbol panelSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (level != null && panelSymbol != null)\n{\n    if(!panelSymbol.IsActive) panelSymbol.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(1,1,0), panelSymbol, level, StructuralType.NonStructural);\n}"}
{"prompt":"Crea un nuevo nivel 'Nivel 3' a una elevación de 12 metros.","completion":"// CORRECTO: Level.Create solo necesita la elevación.\ndouble elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nnewLevel.Name = \"Nivel 3\";"}
{"prompt":"Create a new level 'Level 3' at an elevation of 12 meters.","completion":"// CORRECT: Level.Create only needs the elevation.\ndouble elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nnewLevel.Name = \"Level 3\";"}
{"prompt":"Añade un nivel llamado 'Nivel Azotea' a 15.5 metros.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(15.5, UnitTypeId.Meters);\nLevel roofLevel = Level.Create(doc, elevation);\nroofLevel.Name = \"Nivel Azotea\";"}
{"prompt":"Crea un muro en el Nivel 1 que vaya de (0,0,0) a (10,0,0) con una altura de 4 metros.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n// CORRECTO: Se crea una Line, no clases alucinadas como LevelCurve.\nLine wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(10, 0, 0));\ndouble height = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\n// CORRECTO: Se usa Wall.Create con los parámetros correctos.\nWall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);"}
{"prompt":"Create a wall on Level 1 from (0,0,0) to (10,0,0) with a height of 4 meters.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nLine wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(10, 0, 0));\ndouble height = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nWall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);"}
{"prompt":"Dibuja un conducto de ventilación rectangular de 300x200 milímetros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nDuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).FirstOrDefault(d=>d.Shape==ConnectorProfileType.Rectangular) as DuctType;\nMEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s=>s.SystemClassification==MEPSystemClassification.SupplyAir);\nif (level != null && ductType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,3); XYZ p2 = new XYZ(10,0,3);\n    Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM).Set(UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM).Set(UnitUtils.ConvertToInternalUnits(200, UnitTypeId.Millimeters));\n}"}
{"prompt":"Draw a 300x200 millimeter rectangular ventilation duct.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nDuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).FirstOrDefault(d=>d.Shape==ConnectorProfileType.Rectangular) as DuctType;\nMEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(s=>s.SystemClassification==MEPSystemClassification.SupplyAir);\nif (level != null && ductType != null && systemType != null)\n{\n    XYZ p1 = new XYZ(0,0,3); XYZ p2 = new XYZ(10,0,3);\n    Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, p1, p2);\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_WIDTH_PARAM).Set(UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_HEIGHT_PARAM).Set(UnitUtils.ConvertToInternalUnits(200, UnitTypeId.Millimeters));\n}"}
{"prompt":"Coloca un terminal de aire en el extremo de un conducto.","completion":"FamilySymbol terminalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctTerminal).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nDuct duct = new FilteredElementCollector(doc).OfClass(typeof(Duct)).FirstOrDefault() as Duct;\nif (terminalSymbol != null && duct != null)\n{\n    if(!terminalSymbol.IsActive) terminalSymbol.Activate();\n    Connector connector = duct.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (connector != null) doc.Create.NewFamilyInstance(connector, terminalSymbol);\n}"}
{"prompt":"Place an air terminal at the end of a duct.","completion":"FamilySymbol terminalSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_DuctTerminal).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nDuct duct = new FilteredElementCollector(doc).OfClass(typeof(Duct)).FirstOrDefault() as Duct;\nif (terminalSymbol != null && duct != null)\n{\n    if(!terminalSymbol.IsActive) terminalSymbol.Activate();\n    Connector connector = duct.ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (connector != null) doc.Create.NewFamilyInstance(connector, terminalSymbol);\n}"}
{"prompt":"Importa una topografía desde el archivo 'C:/temp/terreno.csv'.","completion":"string filePath = \"C:/temp/terreno.csv\";\nif(System.IO.File.Exists(filePath)) {\n    TopographySurface.Create(doc, filePath, new CSVImportOptions());\n}"}
{"prompt":"Import a topography from the file 'C:/temp/terrain.csv'.","completion":"string filePath = \"C:/temp/terrain.csv\";\nif(System.IO.File.Exists(filePath)) {\n    TopographySurface.Create(doc, filePath, new CSVImportOptions());\n}"}
{"prompt":"Exporta el modelo actual a un archivo NWC en la carpeta 'C:/exports/'.","completion":"NavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(\"C:/exports/\", \"model.nwc\", options);"}
{"prompt":"Export the current model to an NWC file in the 'C:/exports/' folder.","completion":"NavisworksExportOptions options = new NavisworksExportOptions();\noptions.ExportScope = NavisworksExportScope.Model;\ndoc.Export(\"C:/exports/\", \"model.nwc\", options);"}
{"prompt":"Rellena el parámetro de material de todos los muros con 'Concreto'.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concreto\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Fill the material parameter of all walls with 'Concrete'.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concrete\")) as Material;\nvar walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif (concreteMaterial != null)\n{\n    foreach(Wall w in walls)\n    {\n        Parameter materialParam = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Crea un nuevo tipo de muro de 25cm llamado 'Muro Estructural 25cm'.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (wallTypeToDuplicate != null)\n{\n    WallType newWallType = wallTypeToDuplicate.Duplicate(\"Muro Estructural 25cm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0)\n    {\n        int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n        cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n        cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(0.25, UnitTypeId.Meters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Create a new 25cm wall type named 'Structural Wall 25cm'.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (wallTypeToDuplicate != null)\n{\n    WallType newWallType = wallTypeToDuplicate.Duplicate(\"Structural Wall 25cm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0)\n    {\n        int coreLayerIndex = cs.GetFirstCoreLayerIndex();\n        cs.SetLayerFunction(coreLayerIndex, MaterialFunctionAssignment.Structure);\n        cs.SetLayerWidth(coreLayerIndex, UnitUtils.ConvertToInternalUnits(0.25, UnitTypeId.Meters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Carga la familia 'Mesa.rfa' y colócala en (5,5,0) en el Nivel 1.","completion":"string familyPath = \"C:\\\\RevitFamilies\\\\Mesa.rfa\";\nFamily deskFamily;\nif(doc.LoadFamily(familyPath, out deskFamily))\n{\n    FamilySymbol deskSymbol = doc.GetElement(deskFamily.GetFamilySymbolIds().First()) as FamilySymbol;\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n    if (deskSymbol != null && level1 != null)\n    {\n        if (!deskSymbol.IsActive) deskSymbol.Activate();\n        doc.Create.NewFamilyInstance(new XYZ(5, 5, 0), deskSymbol, level1, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Load the 'Table.rfa' family and place it at (5,5,0) on Level 1.","completion":"string familyPath = \"C:\\\\RevitFamilies\\\\Table.rfa\";\nFamily deskFamily;\nif(doc.LoadFamily(familyPath, out deskFamily))\n{\n    FamilySymbol deskSymbol = doc.GetElement(deskFamily.GetFamilySymbolIds().First()) as FamilySymbol;\n    Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n    if (deskSymbol != null && level1 != null)\n    {\n        if (!deskSymbol.IsActive) deskSymbol.Activate();\n        doc.Create.NewFamilyInstance(new XYZ(5, 5, 0), deskSymbol, level1, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Modela un plafón a 2.8 metros de altura.","completion":"CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(ceilingType != null && level != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(10,10,0));\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\n    Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n    if(heightParam != null) heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n}"}
{"prompt":"Model a ceiling at a height of 2.8 meters.","completion":"CeilingType ceilingType = new FilteredElementCollector(doc).OfClass(typeof(CeilingType)).FirstOrDefault() as CeilingType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(ceilingType != null && level != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(10,10,0));\n    Ceiling ceiling = Ceiling.Create(doc, new List<CurveLoop>{profile}, ceilingType.Id, level.Id);\n    Parameter heightParam = ceiling.get_Parameter(BuiltInParameter.CEILING_HEIGHTABOVELEVEL_PARAM);\n    if(heightParam != null) heightParam.Set(UnitUtils.ConvertToInternalUnits(2.8, UnitTypeId.Meters));\n}"}
{"prompt":"Crea una nueva habitación en el Nivel 1 en el punto (10, 10).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    doc.Create.NewRoom(level1, new UV(10, 10));\n}"}
{"prompt":"Create a new room on Level 1 at point (10, 10).","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    doc.Create.NewRoom(level1, new UV(10, 10));\n}"}
{"prompt":"Crea un techo por contorno en el 'Nivel de Cubierta'.","completion":"Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel de Cubierta\") as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nif(roofLevel != null && roofType != null)\n{\n    CurveLoop roofProfile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(20,30,0));\n    ModelCurveArray mapping = new ModelCurveArray();\n    doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n}"}
{"prompt":"Create a roof by footprint on the 'Roof Level'.","completion":"Level roofLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Roof Level\") as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nif(roofLevel != null && roofType != null)\n{\n    CurveLoop roofProfile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(20,30,0));\n    ModelCurveArray mapping = new ModelCurveArray();\n    doc.Create.NewFootPrintRoof(roofProfile, roofLevel, roofType, out mapping);\n}"}
{"prompt":"Elimina todas las líneas de detalle en la vista activa.","completion":"ICollection<ElementId> detailLines = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(DetailLine)).ToElementIds();\nif(detailLines.Any())\n{\n    doc.Delete(detailLines);\n}"}
{"prompt":"Delete all detail lines in the active view.","completion":"ICollection<ElementId> detailLines = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(DetailLine)).ToElementIds();\nif(detailLines.Any())\n{\n    doc.Delete(detailLines);\n}"}
{"prompt":"Une la geometría de una columna y un suelo que se cruzan.","completion":"Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\nif(column != null && floor != null && !JoinGeometryUtils.AreElementsJoined(doc, column, floor))\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}
{"prompt":"Join the geometry of an intersecting column and floor.","completion":"Element column = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType().FirstOrDefault();\nElement floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault();\nif(column != null && floor != null && !JoinGeometryUtils.AreElementsJoined(doc, column, floor))\n{\n    JoinGeometryUtils.JoinGeometry(doc, column, floor);\n}"}
{"prompt":"Rota el norte del proyecto 30 grados en sentido horario.","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsSurveyPoint);\nif (projectBasePoint != null)\n{\n    double angle = -30 * Math.PI / 180.0; // Negativo para sentido horario\n    Line axis = Line.CreateBound(projectBasePoint.Position, projectBasePoint.Position + XYZ.BasisZ);\n    ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angle);\n}"}
{"prompt":"Rotate project north 30 degrees clockwise.","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsSurveyPoint);\nif (projectBasePoint != null)\n{\n    double angle = -30 * Math.PI / 180.0; // Negative for clockwise\n    Line axis = Line.CreateBound(projectBasePoint.Position, projectBasePoint.Position + XYZ.BasisZ);\n    ElementTransformUtils.RotateElement(doc, projectBasePoint.Id, axis, angle);\n}"}
{"prompt":"Pinta la cara interior de los muros exteriores con 'Pintura Blanca'.","completion":"Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Pintura Blanca\") as Material;\nvar exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior);\nif (paintMaterial != null)\n{\n    foreach (Wall w in exteriorWalls)\n    {\n        Face interiorFace = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior).FirstOrDefault();\n        if (interiorFace != null)\n        {\n            doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n        }\n    }\n}"}
{"prompt":"Paint the interior face of exterior walls with 'White Paint'.","completion":"Material paintMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"White Paint\") as Material;\nvar exteriorWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Cast<Wall>().Where(w => w.WallType.Function == WallFunction.Exterior);\nif (paintMaterial != null)\n{\n    foreach (Wall w in exteriorWalls)\n    {\n        Face interiorFace = HostObjectUtils.GetSideFaces(w, ShellLayerType.Interior).FirstOrDefault();\n        if (interiorFace != null)\n        {\n            doc.Paint(w.Id, interiorFace, paintMaterial.Id);\n        }\n    }\n}"}
{"prompt":"Obtén el elemento anfitrión de la primera ventana que encuentres.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n    if(hostElement != null) TaskDialog.Show(\"Anfitrión\", \"El anfitrión es: \" + hostElement.Name);\n}"}
{"prompt":"Get the host element of the first window found.","completion":"FamilyInstance windowInstance = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif (windowInstance != null)\n{\n    Element hostElement = windowInstance.Host;\n    if(hostElement != null) TaskDialog.Show(\"Host\", \"The host is: \" + hostElement.Name);\n}"}
{"prompt":"Calcula la longitud total de todos los ductos de Suministro de Aire.","completion":"MEPSystem supplySystem = new FilteredElementCollector(doc).OfClass(typeof(MEPSystem)).FirstOrDefault(s => s.Name.Contains(\"Supply Air\")) as MEPSystem;\nif (supplySystem != null)\n{\n    double totalLength = 0.0;\n    var ducts = supplySystem.DuctNetwork.OfType<Duct>();\n    foreach (Duct d in ducts)\n    {\n        totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n    }\n    TaskDialog.Show(\"Longitud Total\", \"La longitud total de ductos de suministro es: \" + UnitUtils.ConvertFromInternalUnits(totalLength, UnitTypeId.Meters).ToString(\"F2\") + \" m\");\n}"}
{"prompt":"Calculate the total length of all Supply Air ducts.","completion":"MEPSystem supplySystem = new FilteredElementCollector(doc).OfClass(typeof(MEPSystem)).FirstOrDefault(s => s.Name.Contains(\"Supply Air\")) as MEPSystem;\nif (supplySystem != null)\n{\n    double totalLength = 0.0;\n    var ducts = supplySystem.DuctNetwork.OfType<Duct>();\n    foreach (Duct d in ducts)\n    {\n        totalLength += d.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n    }\n    TaskDialog.Show(\"Total Length\", \"The total length of supply ducts is: \" + UnitUtils.ConvertFromInternalUnits(totalLength, UnitTypeId.Meters).ToString(\"F2\") + \" m\");\n}"}
{"prompt":"Añade una línea de rejilla horizontal a un muro cortina a 1.5 metros de altura.","completion":"Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.CurtainGrid != null) as Wall;\nif (cw != null)\n{\n    CurtainGrid cg = cw.CurtainGrid;\n    // false para línea horizontal (eje V), true para vertical (eje U)\n    cg.AddGridLine(false, new XYZ(0,0, UnitUtils.ConvertToInternalUnits(1.5, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Add a horizontal grid line to a curtain wall at a height of 1.5 meters.","completion":"Wall cw = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.CurtainGrid != null) as Wall;\nif (cw != null)\n{\n    CurtainGrid cg = cw.CurtainGrid;\n    // false for horizontal line (V-grid), true for vertical (U-grid)\n    cg.AddGridLine(false, new XYZ(0,0, UnitUtils.ConvertToInternalUnits(1.5, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Encuentra un muro buscando el valor 'W-01' en su parámetro de Marca.","completion":"ElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"W-01\");\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().WherePasses(filter).FirstOrDefault() as Wall;"}
{"prompt":"Find a wall by searching for the value 'W-01' in its Mark parameter.","completion":"ElementId markParamId = new ElementId(BuiltInParameter.ALL_MODEL_MARK);\nParameterValueProvider pvp = new ParameterValueProvider(markParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"W-01\");\nElementFilter filter = new ElementParameterFilter(rule);\nWall wall = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().WherePasses(filter).FirstOrDefault() as Wall;"}
{"prompt":"Alinea las líneas de centro de dos muros seleccionados por el usuario.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer muro\");\nReference r2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo muro\");\nWall w1 = doc.GetElement(r1) as Wall;\nWall w2 = doc.GetElement(r2) as Wall;\nif (w1 != null && w2 != null)\n{\n    LocationCurve lc1 = w1.Location as LocationCurve;\n    LocationCurve lc2 = w2.Location as LocationCurve;\n    if(lc1 != null && lc2 != null)\n        doc.Create.NewAlignment(doc.ActiveView, lc1.Curve.Reference, lc2.Curve.Reference);\n}"}
{"prompt":"Align the centerlines of two user-selected walls.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first wall\");\nReference r2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second wall\");\nWall w1 = doc.GetElement(r1) as Wall;\nWall w2 = doc.GetElement(r2) as Wall;\nif (w1 != null && w2 != null)\n{\n    LocationCurve lc1 = w1.Location as LocationCurve;\n    LocationCurve lc2 = w2.Location as LocationCurve;\n    if(lc1 != null && lc2 != null)\n        doc.Create.NewAlignment(doc.ActiveView, lc1.Curve.Reference, lc2.Curve.Reference);\n}"}
{"prompt":"Crea una superficie topográfica a partir de una lista de 4 puntos.","completion":"IList<XYZ> points = new List<XYZ>{ new XYZ(0,0,0), new XYZ(10,0,1), new XYZ(0,10,2), new XYZ(10,10,1) };\nif (points.Count > 2) TopographySurface.Create(doc, points);"}
{"prompt":"Create a topography surface from a list of 4 points.","completion":"IList<XYZ> points = new List<XYZ>{ new XYZ(0,0,0), new XYZ(10,0,1), new XYZ(0,10,2), new XYZ(10,10,1) };\nif (points.Count > 2) TopographySurface.Create(doc, points);"}
{"prompt":"Calcula el volumen total de las barras de refuerzo de 12mm.","completion":"double totalVolume = 0;\nRebarBarType barType12mm = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).Cast<RebarBarType>().FirstOrDefault(bt => bt.BarDiameter == UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Millimeters));\nif (barType12mm != null)\n{\n    var rebars = new FilteredElementCollector(doc).OfClass(typeof(Rebar)).Where(r => (r as Rebar).GetTypeId() == barType12mm.Id);\n    foreach (Rebar r in rebars)\n    {\n        totalVolume += r.GetVolume();\n    }\n    TaskDialog.Show(\"Volumen Total\", \"Volumen de barras de 12mm: \" + UnitUtils.ConvertFromInternalUnits(totalVolume, UnitTypeId.CubicMeters).ToString(\"F3\") + \" m³\");\n}"}
{"prompt":"Calculate the total volume of 12mm rebar.","completion":"double totalVolume = 0;\nRebarBarType barType12mm = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).Cast<RebarBarType>().FirstOrDefault(bt => bt.BarDiameter == UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Millimeters));\nif (barType12mm != null)\n{\n    var rebars = new FilteredElementCollector(doc).OfClass(typeof(Rebar)).Where(r => (r as Rebar).GetTypeId() == barType12mm.Id);\n    foreach (Rebar r in rebars)\n    {\n        totalVolume += r.GetVolume();\n    }\n    TaskDialog.Show(\"Total Volume\", \"Volume of 12mm bars: \" + UnitUtils.ConvertFromInternalUnits(totalVolume, UnitTypeId.CubicMeters).ToString(\"F3\") + \" m³\");\n}"}
{"prompt":"Cambia el nombre de todas las vistas de planta para que empiecen con 'ARQ_'.","completion":"string prefix = \"ARQ_\";\nvar planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate);\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Rename all plan views to start with 'ARCH_'.","completion":"string prefix = \"ARCH_\";\nvar planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate);\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt":"Añade el prefijo 'PLANTA-' a todas las vistas de plano.","completion":"string prefix = \"PLANTA-\";\nvar planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate);\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix)) view.Name = prefix + view.Name;\n}"}
{"prompt":"Crea una copia de la vista activa y nómbrala 'Copia de Trabajo'.","completion":"View activeView = doc.ActiveView;\nElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\nView newView = doc.GetElement(newViewId) as View;\nnewView.Name = \"Copia de Trabajo\";"}
{"prompt":"Duplicate the active view and name it 'Working Copy'.","completion":"View activeView = doc.ActiveView;\nElementId newViewId = activeView.Duplicate(ViewDuplicateOption.Duplicate);\nView newView = doc.GetElement(newViewId) as View;\nnewView.Name = \"Working Copy\";"}
{"prompt":"Crea una vista 3D por defecto.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\nif(vft != null) {\n    View3D.CreateIsometric(doc, vft.Id);\n}"}
{"prompt":"Create a default 3D view.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\nif(vft != null) {\n    View3D.CreateIsometric(doc, vft.Id);\n}"}
{"prompt":"Crea una losa inclinada con una pendiente del 2% sobre un área de 8x6 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nif (level != null && floorType != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(8,6,0));\n    Floor slopedSlab = Floor.Create(doc, new List<CurveLoop>{profile}, floorType.Id, level.Id);\n    slopedSlab.get_Parameter(BuiltInParameter.ROOF_SLOPE).Set(0.02);\n}"}
{"prompt":"Create a sloped slab with a 2% slope over an 8x6 meter area.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nif (level != null && floorType != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(8,6,0));\n    Floor slopedSlab = Floor.Create(doc, new List<CurveLoop>{profile}, floorType.Id, level.Id);\n    slopedSlab.get_Parameter(BuiltInParameter.ROOF_SLOPE).Set(0.02);\n}"}
{"prompt":"Añade un codo de 90 grados entre dos tuberías.","completion":"var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Take(2).ToList();\nif (pipes.Count == 2)\n{\n    Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (c1 != null && c2 != null) doc.Create.NewElbowFitting(c1, c2);\n}"}
{"prompt":"Add a 90-degree elbow between two pipes.","completion":"var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Take(2).ToList();\nif (pipes.Count == 2)\n{\n    Connector c1 = pipes[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = pipes[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (c1 != null && c2 != null) doc.Create.NewElbowFitting(c1, c2);\n}"}
{"prompt":"Coloca una cota de elevación en el Nivel 1.","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (lvl1 != null)\n{\n    Reference levelRef = new Reference(lvl1);\n    XYZ origin = new XYZ(5,5,lvl1.Elevation);\n    XYZ leaderEnd = origin + new XYZ(2,2,0);\n    doc.Create.NewSpotElevation(doc.ActiveView, levelRef, origin, origin, leaderEnd, true, true);\n}"}
{"prompt":"Place a spot elevation on Level 1.","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (lvl1 != null)\n{\n    Reference levelRef = new Reference(lvl1);\n    XYZ origin = new XYZ(5,5,lvl1.Elevation);\n    XYZ leaderEnd = origin + new XYZ(2,2,0);\n    doc.Create.NewSpotElevation(doc.ActiveView, levelRef, origin, origin, leaderEnd, true, true);\n}"}
{"prompt":"Exporta la vista 3D activa a NWC para Navisworks.","completion":"View3D view3d = doc.ActiveView as View3D;\nif (view3d != null)\n{\n    NavisworksExportOptions options = new NavisworksExportOptions();\n    options.ExportScope = NavisworksExportScope.View;\n    options.ViewId = view3d.Id;\n    doc.Export(@\"C:\\RevitExports\\\", \"3DView.nwc\", options);\n}"}
{"prompt":"Export the current 3D view to NWC for Navisworks.","completion":"View3D view3d = doc.ActiveView as View3D;\nif (view3d != null)\n{\n    NavisworksExportOptions options = new NavisworksExportOptions();\n    options.ExportScope = NavisworksExportScope.View;\n    options.ViewId = view3d.Id;\n    doc.Export(@\"C:\\RevitExports\\\", \"3DView.nwc\", options);\n}"}
{"prompt":"Aplica refuerzo a una viga con estribos espaciados cada 30 cm.","completion":"RebarBarType stirrupType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault(s => s.RebarStyle == RebarStyle.StirrupTie) as RebarShape;\nFamilyInstance beam = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif (stirrupType != null && shape != null && beam != null)\n{\n    Rebar rebar = Rebar.CreateFromRebarShape(doc, shape, stirrupType, beam, new XYZ(0,0,1), new XYZ(1,0,0), new XYZ(0,1,0));\n    rebar.GetRebarLayout().MaxSpacing = UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters);\n}"}
{"prompt":"Apply beam reinforcement with stirrups spaced every 30 cm.","completion":"RebarBarType stirrupType = new FilteredElementCollector(doc).OfClass(typeof(RebarBarType)).FirstOrDefault() as RebarBarType;\nRebarShape shape = new FilteredElementCollector(doc).OfClass(typeof(RebarShape)).FirstOrDefault(s => s.RebarStyle == RebarStyle.StirrupTie) as RebarShape;\nFamilyInstance beam = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif (stirrupType != null && shape != null && beam != null)\n{\n    Rebar rebar = Rebar.CreateFromRebarShape(doc, shape, stirrupType, beam, new XYZ(0,0,1), new XYZ(1,0,0), new XYZ(0,1,0));\n    rebar.GetRebarLayout().MaxSpacing = UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters);\n}"}
{"prompt":"Obtén todas las habitaciones que están en el Nivel 3.","completion":"Level level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nif (level3 != null)\n{\n    var roomsOnLevel3 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level3.Id).ToList();\n    TaskDialog.Show(\"Resultado\", $\"Se encontraron {roomsOnLevel3.Count} habitaciones en el Nivel 3.\");\n}"}
{"prompt":"Get all rooms on Level 3.","completion":"Level level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nif (level3 != null)\n{\n    var roomsOnLevel3 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level3.Id).ToList();\n    TaskDialog.Show(\"Result\", $\"Found {roomsOnLevel3.Count} rooms on Level 3.\");\n}"}
{"prompt":"Crea una vista de sección llamada 'Sección Longitudinal'.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(-10, -1, 0);\n    sectionBox.Max = new XYZ(10, 1, 10);\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    sectionView.Name = \"Sección Longitudinal\";\n}"}
{"prompt":"Create a section view named 'Longitudinal Section'.","completion":"ViewFamilyType sectionType = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\nif (sectionType != null)\n{\n    BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\n    sectionBox.Min = new XYZ(-10, -1, 0);\n    sectionBox.Max = new XYZ(10, 1, 10);\n    ViewSection sectionView = ViewSection.CreateSection(doc, sectionType.Id, sectionBox);\n    sectionView.Name = \"Longitudinal Section\";\n}"}
{"prompt":"Cambia el nivel de detalle de la vista activa a 'Medio'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Medium;"}
{"prompt":"Change the detail level of the active view to 'Medium'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Medium;"}
{"prompt":"Genera un grupo a partir de la selección actual y muévelo 10 metros a la derecha.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Any())\n{\n    Group group = doc.Create.Group(selectedIds);\n    group.Location.Move(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0));\n}"}
{"prompt":"Create a group from the current selection and move it 10 meters to the right.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Any())\n{\n    Group group = doc.Create.Group(selectedIds);\n    group.Location.Move(new XYZ(UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0, 0));\n}"}
{"prompt":"Obtén todas las instancias de la categoría Mobiliario.","completion":"var furnitureInstances = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElements();"}
{"prompt":"Get all instances of the Furniture category.","completion":"var furnitureInstances = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElements();"}
{"prompt":"Ajusta la región de recorte de la vista a un rectángulo de (0,0) a (20,20).","completion":"View view = doc.ActiveView;\nif (view != null && view.CropBoxActive)\n{\n    BoundingBoxXYZ cropBox = view.CropBox;\n    cropBox.Min = new XYZ(0, 0, cropBox.Min.Z);\n    cropBox.Max = new XYZ(20, 20, cropBox.Max.Z);\n    view.CropBox = cropBox;\n}"}
{"prompt":"Adjust the view's crop region to a rectangle from (0,0) to (20,20).","completion":"View view = doc.ActiveView;\nif (view != null && view.CropBoxActive)\n{\n    BoundingBoxXYZ cropBox = view.CropBox;\n    cropBox.Min = new XYZ(0, 0, cropBox.Min.Z);\n    cropBox.Max = new XYZ(20, 20, cropBox.Max.Z);\n    view.CropBox = cropBox;\n}"}
{"prompt":"Dibuja una curva spline que pase por tres puntos.","completion":"IList<XYZ> points = new List<XYZ>{ new XYZ(0,0,0), new XYZ(5,5,0), new XYZ(10,0,0) };\nNurbSpline spline = NurbSpline.Create(points);\nPlane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, XYZ.Zero);\nSketchPlane sp = SketchPlane.Create(doc, plane);\ndoc.Create.NewModelCurve(spline, sp);"}
{"prompt":"Draw a spline curve passing through three points.","completion":"IList<XYZ> points = new List<XYZ>{ new XYZ(0,0,0), new XYZ(5,5,0), new XYZ(10,0,0) };\nNurbSpline spline = NurbSpline.Create(points);\nPlane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, XYZ.Zero);\nSketchPlane sp = SketchPlane.Create(doc, plane);\ndoc.Create.NewModelCurve(spline, sp);"}
{"prompt":"Activa todos los símbolos de familia cargados en el proyecto.","completion":"var symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) sym.Activate();\n}"}
{"prompt":"Activate all family symbols loaded in the project.","completion":"var symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) sym.Activate();\n}"}
{"prompt":"Crea un filtro de vista para ocultar muros demolidos.","completion":"Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).FirstOrDefault(p => p.Name.Contains(\"Demol\"));\nif(demolishedPhase != null) {\n    ElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\n    FilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\n    ElementFilter filter = new ElementParameterFilter(rule);\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Filtro Demolición\", new List<ElementId>{ new ElementId(BuiltInCategory.OST_Walls) }, filter);\n    doc.ActiveView.AddFilter(pfe.Id);\n    doc.ActiveView.SetFilterVisibility(pfe.Id, false);\n}"}
{"prompt":"Create a view filter to hide demolished walls.","completion":"Phase demolishedPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).FirstOrDefault(p => p.Name.Contains(\"Demol\"));\nif(demolishedPhase != null) {\n    ElementId paramId = new ElementId(BuiltInParameter.PHASE_DEMOLISHED);\n    FilterRule rule = ParameterFilterRuleFactory.CreateEqualsRule(paramId, demolishedPhase.Id);\n    ElementFilter filter = new ElementParameterFilter(rule);\n    ParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Demolition Filter\", new List<ElementId>{ new ElementId(BuiltInCategory.OST_Walls) }, filter);\n    doc.ActiveView.AddFilter(pfe.Id);\n    doc.ActiveView.SetFilterVisibility(pfe.Id, false);\n}"}
{"prompt":"Aplica un color rojo a todas las ventanas en la vista activa.","completion":"View activeView = doc.ActiveView;\nOverrideGraphicSettings ogs = new OverrideGraphicSettings();\nogs.SetProjectionLineColor(new Color(255,0,0));\nvar windows = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().ToElementIds();\nif(windows.Any()){\n    foreach (var windowId in windows)\n    {\n        activeView.SetElementOverrides(windowId, ogs);\n    }\n}"}
{"prompt":"Apply a red color to all windows in the active view.","completion":"View activeView = doc.ActiveView;\nOverrideGraphicSettings ogs = new OverrideGraphicSettings();\nogs.SetProjectionLineColor(new Color(255,0,0));\nvar windows = new FilteredElementCollector(doc, activeView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().ToElementIds();\nif(windows.Any()){\n    foreach (var windowId in windows)\n    {\n        activeView.SetElementOverrides(windowId, ogs);\n    }\n}"}
{"prompt":"Crea un Path of Travel entre los puntos (1,1) y (10,10) en la vista de planta.","completion":"ViewPlan viewPlan = doc.ActiveView as ViewPlan;\nif(viewPlan != null) {\n    XYZ startPoint = viewPlan.GetPointOnView(new UV(1,1));\n    XYZ endPoint = viewPlan.GetPointOnView(new UV(10,10));\n    PathOfTravel.Create(viewPlan, startPoint, endPoint);\n}"}
{"prompt":"Create a Path of Travel between points (1,1) and (10,10) in the plan view.","completion":"ViewPlan viewPlan = doc.ActiveView as ViewPlan;\nif(viewPlan != null) {\n    XYZ startPoint = viewPlan.GetPointOnView(new UV(1,1));\n    XYZ endPoint = viewPlan.GetPointOnView(new UV(10,10));\n    PathOfTravel.Create(viewPlan, startPoint, endPoint);\n}"}
{"prompt":"Inserta una nota de texto con 'Revisar' en la vista actual.","completion":"XYZ position = new XYZ(5,5,0);\nTextNote.Create(doc, doc.ActiveView.Id, position, \"Revisar\", TextNoteType.CreateDefault(doc).Id);"}
{"prompt":"Insert a text note with 'Review' in the current view.","completion":"XYZ position = new XYZ(5,5,0);\nTextNote.Create(doc, doc.ActiveView.Id, position, \"Review\", TextNoteType.CreateDefault(doc).Id);"}
{"prompt":"Mueve un elemento seleccionado a la posición (5,5).","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para mover\");\nElement elem = doc.GetElement(pickedRef);\nLocationPoint lp = elem.Location as LocationPoint;\nif (lp != null) {\n    XYZ newPosition = new XYZ(5, 5, lp.Point.Z);\n    lp.Point = newPosition;\n}"}
{"prompt":"Move a selected element to position (5,5).","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to move\");\nElement elem = doc.GetElement(pickedRef);\nLocationPoint lp = elem.Location as LocationPoint;\nif (lp != null) {\n    XYZ newPosition = new XYZ(5, 5, lp.Point.Z);\n    lp.Point = newPosition;\n}"}
{"prompt":"Dibuja una región rellena con patrón diagonal.","completion":"View activeView = doc.ActiveView;\nFillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Diagonal\")) as FillPatternElement;\nFilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\nif(fillPattern != null && filledRegionType != null)\n{\n    filledRegionType.FillPatternId = fillPattern.Id;\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(5,5,0));\n    FilledRegion.Create(doc, filledRegionType.Id, activeView.Id, new List<CurveLoop>{profile});\n}"}
{"prompt":"Draw a filled region with a diagonal pattern.","completion":"View activeView = doc.ActiveView;\nFillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Diagonal\")) as FillPatternElement;\nFilledRegionType filledRegionType = new FilteredElementCollector(doc, activeView.Id).OfClass(typeof(FilledRegionType)).FirstOrDefault() as FilledRegionType;\nif(fillPattern != null && filledRegionType != null)\n{\n    filledRegionType.FillPatternId = fillPattern.Id;\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(5,5,0));\n    FilledRegion.Create(doc, filledRegionType.Id, activeView.Id, new List<CurveLoop>{profile});\n}"}
{"prompt":"Crea un nuevo parámetro de proyecto de tipo texto, llamado 'Clasificación de Espacio', y aplícalo a la categoría de habitaciones.","completion":"string paramName = \"Clasificación de Espacio\";\nCategory roomCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Rooms);\nCategorySet catSet = doc.Application.Create.NewCategorySet();\ncatSet.Insert(roomCat);\nusing (Transaction t = new Transaction(doc, \"Add Project Parameter\"))\n{\n    t.Start();\n    doc.ParameterBindings.Insert(doc.Application.Create.NewInstanceBinding(catSet), doc.Application.OpenSharedParameterFile().Groups.Create(\"Custom\").Definitions.Create(new ExternalDefinitionCreationOptions(paramName, SpecTypeId.String.Text)), BuiltInParameterGroup.PG_IDENTITY_DATA);\n    t.Commit();\n}"}
{"prompt":"Create a text project parameter named 'Space Classification' and apply it to the Rooms category.","completion":"string paramName = \"Space Classification\";\nCategory roomCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Rooms);\nCategorySet catSet = doc.Application.Create.NewCategorySet();\ncatSet.Insert(roomCat);\nusing (Transaction t = new Transaction(doc, \"Add Project Parameter\"))\n{\n    t.Start();\n    doc.ParameterBindings.Insert(doc.Application.Create.NewInstanceBinding(catSet), doc.Application.OpenSharedParameterFile().Groups.Create(\"Custom\").Definitions.Create(new ExternalDefinitionCreationOptions(paramName, SpecTypeId.String.Text)), BuiltInParameterGroup.PG_IDENTITY_DATA);\n    t.Commit();\n}"}
{"prompt":"Establece el parámetro 'Comentarios' de todas las puertas del Nivel 1 a 'Clasificación Fuego - 90 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    var doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id);\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if(commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Clasificación Fuego - 90 min\");\n    }\n}"}
{"prompt":"Set the 'Comments' parameter for all doors on Level 1 to 'Fire Rating - 90 min'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level1 != null)\n{\n    var doorsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.LevelId == level1.Id);\n    foreach(FamilyInstance door in doorsOnLevel1)\n    {\n        Parameter commentsParam = door.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if(commentsParam != null && !commentsParam.IsReadOnly) commentsParam.Set(\"Fire Rating - 90 min\");\n    }\n}"}
{"prompt":"Exporta cada tabla de planificación a un archivo CSV individual.","completion":"string exportPath = @\"C:\\RevitExports\\\";\nif(!System.IO.Directory.Exists(exportPath)) System.IO.Directory.CreateDirectory(exportPath);\nvar schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => !vs.IsTemplate);\nViewScheduleExportOptions options = new ViewScheduleExportOptions();\noptions.FieldDelimiter = \",\";\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Export(exportPath, schedule.Name + \".csv\", options);\n}"}
{"prompt":"Export each schedule to an individual CSV file.","completion":"string exportPath = @\"C:\\RevitExports\\\";\nif(!System.IO.Directory.Exists(exportPath)) System.IO.Directory.CreateDirectory(exportPath);\nvar schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => !vs.IsTemplate);\nViewScheduleExportOptions options = new ViewScheduleExportOptions();\noptions.FieldDelimiter = \",\";\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Export(exportPath, schedule.Name + \".csv\", options);\n}"}
{"prompt":"Exporta el modelo a formato IFC4 para coordinación.","completion":"IFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4;\ndoc.Export(@\"C:\\RevitExports\\\", \"Model-For-Coordination.ifc\", options);"}
{"prompt":"Export the model to IFC4 format for coordination.","completion":"IFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4;\ndoc.Export(@\"C:\\RevitExports\\\", \"Model-For-Coordination.ifc\", options);"}
{"prompt":"Vincula un archivo DWG como referencia en la vista activa.","completion":"string filePath = @\"C:\\CAD_Files\\Base_Plan.dwg\";\nif(System.IO.File.Exists(filePath))\n{\n    DWGImportOptions options = new DWGImportOptions();\n    options.ColorMode = ImportColorMode.Preserved;\n    ElementId linkedFileId;\n    doc.Link(filePath, options, doc.ActiveView, out linkedFileId);\n}"}
{"prompt":"Link a DWG file as a reference in the active view.","completion":"string filePath = @\"C:\\CAD_Files\\Base_Plan.dwg\";\nif(System.IO.File.Exists(filePath))\n{\n    DWGImportOptions options = new DWGImportOptions();\n    options.ColorMode = ImportColorMode.Preserved;\n    ElementId linkedFileId;\n    doc.Link(filePath, options, doc.ActiveView, out linkedFileId);\n}"}
{"prompt":"Exporta todas las hojas de un conjunto a un único PDF.","completion":"ViewSheetSet sheetSet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheetSet)).FirstOrDefault() as ViewSheetSet;\nif(sheetSet != null)\n{\n    PDFExportOptions options = new PDFExportOptions();\n    options.Combine = true;\n    options.FileName = sheetSet.Name;\n    List<ElementId> sheetIds = sheetSet.Views.Cast<ViewSheet>().Select(s => s.Id).ToList();\n    if(sheetIds.Any()) doc.Export(@\"C:\\RevitExports\\\", sheetIds, options);\n}"}
{"prompt":"Export all sheets in a set to a single combined PDF.","completion":"ViewSheetSet sheetSet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheetSet)).FirstOrDefault() as ViewSheetSet;\nif(sheetSet != null)\n{\n    PDFExportOptions options = new PDFExportOptions();\n    options.Combine = true;\n    options.FileName = sheetSet.Name;\n    List<ElementId> sheetIds = sheetSet.Views.Cast<ViewSheet>().Select(s => s.Id).ToList();\n    if(sheetIds.Any()) doc.Export(@\"C:\\RevitExports\\\", sheetIds, options);\n}"}
{"prompt":"Crea una 'Caja de Referencia' (Scope Box) para el Bloque A.","completion":"BoundingBoxXYZ scopeBoxVolume = new BoundingBoxXYZ();\nscopeBoxVolume.Min = new XYZ(0,0,0);\nscopeBoxVolume.Max = new XYZ(50, 40, 20);\nScopeBox box = ScopeBox.Create(doc, scopeBoxVolume);\nbox.Name = \"Bloque A\";"}
{"prompt":"Create a Scope Box for Block A.","completion":"BoundingBoxXYZ scopeBoxVolume = new BoundingBoxXYZ();\nscopeBoxVolume.Min = new XYZ(0,0,0);\nscopeBoxVolume.Max = new XYZ(50, 40, 20);\nScopeBox box = ScopeBox.Create(doc, scopeBoxVolume);\nbox.Name = \"Block A\";"}
{"prompt":"Crea un barrido de muro en el primer muro que encuentres.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallSweepType sweepType = new FilteredElementCollector(doc).OfClass(typeof(WallSweepType)).FirstOrDefault() as WallSweepType;\nif (wall != null && sweepType != null)\n{\n    WallSweepInfo info = new WallSweepInfo(true, WallSweepType.Sweep);\n    WallSweep.Create(doc, wall.Id, sweepType.Id, info);\n}"}
{"prompt":"Create a wall sweep on the first wall found.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallSweepType sweepType = new FilteredElementCollector(doc).OfClass(typeof(WallSweepType)).FirstOrDefault() as WallSweepType;\nif (wall != null && sweepType != null)\n{\n    WallSweepInfo info = new WallSweepInfo(true, WallSweepType.Sweep);\n    WallSweep.Create(doc, wall.Id, sweepType.Id, info);\n}"}
{"prompt":"Obtén el espacio MEP asociado a la habitación 'Oficina 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Oficina 101\") as Room;\nif (room != null)\n{\n    MEPSpace space = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_MEPSpaces).Cast<MEPSpace>().FirstOrDefault(s => s.Room != null && s.Room.Id == room.Id);\n    if (space != null) TaskDialog.Show(\"Espacio MEP\", \"El espacio es: \" + space.Name);\n}"}
{"prompt":"Get the MEP space associated with the room 'Office 101'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 101\") as Room;\nif (room != null)\n{\n    MEPSpace space = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_MEPSpaces).Cast<MEPSpace>().FirstOrDefault(s => s.Room != null && s.Room.Id == room.Id);\n    if (space != null) TaskDialog.Show(\"MEP Space\", \"The space is: \" + space.Name);\n}"}
{"prompt":"Crea un nuevo material llamado 'Roble Oscuro' con un patrón de superficie de madera.","completion":"ElementId materialId = Material.Create(doc, \"Roble Oscuro\");\nMaterial material = doc.GetElement(materialId) as Material;\nFillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Wood\")) as FillPatternElement;\nif(fillPattern != null) material.SurfaceForegroundPatternId = fillPattern.Id;\nmaterial.Color = new Color(139, 69, 19);"}
{"prompt":"Create a new material named 'Dark Oak' with a wood surface pattern.","completion":"ElementId materialId = Material.Create(doc, \"Dark Oak\");\nMaterial material = doc.GetElement(materialId) as Material;\nFillPatternElement fillPattern = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.Name.Contains(\"Wood\")) as FillPatternElement;\nif(fillPattern != null) material.SurfaceForegroundPatternId = fillPattern.Id;\nmaterial.Color = new Color(139, 69, 19);"}
{"prompt":"Establece la configuración de sol y sombra para la vista 3D activa a una fecha y hora.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && view3D.CanEnableSunAndShadows())\n{\n    SunAndShadowSettings settings = view3D.SunAndShadowSettings;\n    settings.SunAndShadowType = SunAndShadowType.Still;\n    settings.SetTimeAndDate(new DateTime(2024, 6, 21, 15, 30, 0));\n    view3D.ShadowsOn = true;\n}"}
{"prompt":"Set the sun and shadow settings for the active 3D view to a specific date and time.","completion":"View3D view3D = doc.ActiveView as View3D;\nif (view3D != null && view3D.CanEnableSunAndShadows())\n{\n    SunAndShadowSettings settings = view3D.SunAndShadowSettings;\n    settings.SunAndShadowType = SunAndShadowType.Still;\n    settings.SetTimeAndDate(new DateTime(2024, 6, 21, 15, 30, 0));\n    view3D.ShadowsOn = true;\n}"}
{"prompt":"Crea una abertura rectangular en un suelo.","completion":"Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif (floor != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(1,1,0), new XYZ(3,3,0));\n    doc.Create.NewOpening(floor, profile, true);\n}"}
{"prompt":"Create a rectangular opening in a floor.","completion":"Floor floor = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nif (floor != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(1,1,0), new XYZ(3,3,0));\n    doc.Create.NewOpening(floor, profile, true);\n}"}
{"prompt":"Cambia el estilo visual de la vista activa a 'Línea Oculta'.","completion":"View activeView = doc.ActiveView;\nif (activeView != null && activeView.CanBePrinted)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}
{"prompt":"Change the visual style of the active view to 'Hidden Line'.","completion":"View activeView = doc.ActiveView;\nif (activeView != null && activeView.CanBePrinted)\n{\n    activeView.DisplayStyle = DisplayStyle.HLR;\n}"}
{"prompt":"Duplica la vista 'Nivel 1' como una vista dependiente.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 1\") as ViewPlan;\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if(newView != null) newView.Name = \"Nivel 1 - Dependiente\";\n}"}
{"prompt":"Duplicate the 'Level 1' view as a dependent view.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 1\") as ViewPlan;\nif (viewToDuplicate != null)\n{\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.AsDependent);\n    View newView = doc.GetElement(newViewId) as View;\n    if(newView != null) newView.Name = \"Level 1 - Dependent\";\n}"}
{"prompt":"Coloca una cámara en la vista activa.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    cameraView.Name = \"Nueva Vista de Cámara\";\n    ViewOrientation3D orientation = new ViewOrientation3D(new XYZ(10,10,10), new XYZ(0,0,0), new XYZ(0,0,1));\n    cameraView.SetOrientation(orientation);\n}"}
{"prompt":"Place a camera in the active view.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(f => f.ViewFamily == ViewFamily.ThreeDimensional);\nif (vft != null)\n{\n    View3D cameraView = View3D.CreatePerspective(doc, vft.Id);\n    cameraView.Name = \"New Camera View\";\n    ViewOrientation3D orientation = new ViewOrientation3D(new XYZ(10,10,10), new XYZ(0,0,0), new XYZ(0,0,1));\n    cameraView.SetOrientation(orientation);\n}"}
{"prompt":"Crea una losa inclinada con una pendiente del 5%.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nif (level != null && floorType != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(10,10,0));\n    Floor slopedFloor = Floor.Create(doc, new List<CurveLoop>{profile}, floorType.Id, level.Id);\n    Parameter slopeParam = slopedFloor.get_Parameter(BuiltInParameter.ROOF_SLOPE);\n    if(slopeParam != null) slopeParam.Set(0.05);\n}"}
{"prompt":"Create a sloped slab with a 5% slope.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nif (level != null && floorType != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(10,10,0));\n    Floor slopedFloor = Floor.Create(doc, new List<CurveLoop>{profile}, floorType.Id, level.Id);\n    Parameter slopeParam = slopedFloor.get_Parameter(BuiltInParameter.ROOF_SLOPE);\n    if(slopeParam != null) slopeParam.Set(0.05);\n}"}
{"prompt":"Obtén todas las habitaciones en el Nivel 'Planta Baja'.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Planta Baja\") as Level;\nif (groundFloor != null)\n{\n    var roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Get all rooms on the 'Ground Floor' Level.","completion":"Level groundFloor = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Ground Floor\") as Level;\nif (groundFloor != null)\n{\n    var roomsOnGround = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == groundFloor.Id).ToList();\n}"}
{"prompt":"Cambia el nivel de detalle de la vista actual a 'Bajo'.","completion":"doc.ActiveView.DetailLevel = ViewDetailLevel.Coarse;"}
{"prompt":"Change the detail level of the current view to 'Coarse'.","completion":"doc.ActiveView.DetailLevel = ViewDetailLevel.Coarse;"}
{"prompt":"Crea un SketchPlane en el Nivel 2.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif(level2 != null) {\n    Plane plane = level2.GetPlane();\n    SketchPlane.Create(doc, plane);\n}"}
{"prompt":"Create a SketchPlane on Level 2.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif(level2 != null) {\n    Plane plane = level2.GetPlane();\n    SketchPlane.Create(doc, plane);\n}"}
{"prompt":"Activa todos los FamilySymbol del proyecto.","completion":"var symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) sym.Activate();\n}"}
{"prompt":"Activate all FamilySymbols in the project.","completion":"var symbols = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>();\nforeach (var sym in symbols)\n{\n    if (!sym.IsActive) sym.Activate();\n}"}
{"prompt":"Inicia y confirma una transacción para 'Modificar Proyecto'.","completion":"using (Transaction tx = new Transaction(doc, \"Modificar Proyecto\"))\n{\n    tx.Start();\n    // ... acciones de modificación aquí ...\n    tx.Commit();\n}"}
{"prompt":"Start and commit a transaction for 'Modify Project'.","completion":"using (Transaction tx = new Transaction(doc, \"Modify Project\"))\n{\n    tx.Start();\n    // ... modification actions here ...\n    tx.Commit();\n}"}
{"prompt":"Crea un DirectShape con forma de caja de 2x2x2 metros.","completion":"TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\n// Define 8 vertices for the box\nXYZ p0 = new XYZ(0,0,0); XYZ p1 = new XYZ(2,0,0); XYZ p2 = new XYZ(2,2,0); XYZ p3 = new XYZ(0,2,0);\nXYZ p4 = new XYZ(0,0,2); XYZ p5 = new XYZ(2,0,2); XYZ p6 = new XYZ(2,2,2); XYZ p7 = new XYZ(0,2,2);\n// Create 6 faces\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p4,p5,p6,p7}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p1,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p1,p2,p6,p5}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p2,p3,p7,p6}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p3,p0,p4,p7}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\nds.SetShape(result.GetGeometricalObjects());"}
{"prompt":"Create a DirectShape with a 2x2x2 meter box shape.","completion":"TessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\n// Define 8 vertices for the box\nXYZ p0 = new XYZ(0,0,0); XYZ p1 = new XYZ(2,0,0); XYZ p2 = new XYZ(2,2,0); XYZ p3 = new XYZ(0,2,0);\nXYZ p4 = new XYZ(0,0,2); XYZ p5 = new XYZ(2,0,2); XYZ p6 = new XYZ(2,2,2); XYZ p7 = new XYZ(0,2,2);\n// Create 6 faces\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p1,p2,p3}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p4,p5,p6,p7}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p0,p1,p5,p4}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p1,p2,p6,p5}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p2,p3,p7,p6}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{p3,p0,p4,p7}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\nds.SetShape(result.GetGeometricalObjects());"}
{"prompt":"Crea un nuevo parámetro compartido de tipo entero llamado 'Capacidad' y aplícalo a la categoría de mobiliario.","completion":"string paramName = \"Capacidad\";\nstring groupName = \"Datos\";\nCategory cat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nCategorySet catSet = doc.Application.Create.NewCategorySet();\ncatSet.Insert(cat);\n// Asegura que el archivo de parámetros compartidos exista\nstring sharedParamsFilePath = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamsFilePath) || !System.IO.File.Exists(sharedParamsFilePath)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\RevitSharedParameters.txt\"; System.IO.File.Create(sharedParamsFilePath).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup defGroup = defFile.Groups.EnsureDefinitionGroup(groupName);\nExternalDefinition def = defGroup.Definitions.Create(new ExternalDefinitionCreationOptions(paramName, SpecTypeId.Int.Integer)) as ExternalDefinition;\ndoc.ParameterBindings.Insert(doc.Application.Create.NewInstanceBinding(catSet), def, BuiltInParameterGroup.PG_DATA);"}
{"prompt":"Create a new shared integer parameter named 'Capacity' and apply it to the furniture category.","completion":"string paramName = \"Capacity\";\nstring groupName = \"Data\";\nCategory cat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nCategorySet catSet = doc.Application.Create.NewCategorySet();\ncatSet.Insert(cat);\n// Ensure the shared parameters file exists\nstring sharedParamsFilePath = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamsFilePath) || !System.IO.File.Exists(sharedParamsFilePath)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\RevitSharedParameters.txt\"; System.IO.File.Create(sharedParamsFilePath).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup defGroup = defFile.Groups.EnsureDefinitionGroup(groupName);\nExternalDefinition def = defGroup.Definitions.Create(new ExternalDefinitionCreationOptions(paramName, SpecTypeId.Int.Integer)) as ExternalDefinition;\ndoc.ParameterBindings.Insert(doc.Application.Create.NewInstanceBinding(catSet), def, BuiltInParameterGroup.PG_DATA);"}
{"prompt":"Mueve un muro en una SubTransaction 5 metros a la derecha.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif(wall != null)\n{\n    using(SubTransaction st = new SubTransaction(doc))\n    {\n        st.Start();\n        ElementTransformUtils.MoveElement(doc, wall.Id, new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0));\n        st.Commit();\n    }\n}"}
{"prompt":"Move a wall in a SubTransaction 5 meters to the right.","completion":"Wall wall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif(wall != null)\n{\n    using(SubTransaction st = new SubTransaction(doc))\n    {\n        st.Start();\n        ElementTransformUtils.MoveElement(doc, wall.Id, new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters),0,0));\n        st.Commit();\n    }\n}"}
{"prompt":"Cambia la visibilidad de los muros cortados en la vista activa para que no sean visibles.","completion":"View activeView = doc.ActiveView;\nOverrideGraphicSettings ogs = new OverrideGraphicSettings();\nogs.SetCutPatternVisible(false);\nactiveView.SetCategoryOverrides(new ElementId(BuiltInCategory.OST_Walls), ogs);"}
{"prompt":"Change the visibility of cut walls in the active view to not be visible.","completion":"View activeView = doc.ActiveView;\nOverrideGraphicSettings ogs = new OverrideGraphicSettings();\nogs.SetCutPatternVisible(false);\nactiveView.SetCategoryOverrides(new ElementId(BuiltInCategory.OST_Walls), ogs);"}
{"prompt":"Exporta el documento a un archivo IFC con la versión IFC4x3.","completion":"IFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4x3;\ndoc.Export(@\"C:\\Exports\\\", \"Model_IFC4x3.ifc\", options);"}
{"prompt":"Export the document to an IFC file with version IFC4x3.","completion":"IFCExportOptions options = new IFCExportOptions();\noptions.FileVersion = IFCVersion.IFC4x3;\ndoc.Export(@\"C:\\Exports\\\", \"Model_IFC4x3.ifc\", options);"}
{"prompt":"Duplica el tipo de muro 'Basic Wall' y renómbralo.","completion":"WallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Basic Wall\");\nif(wt != null)\n{\n    WallType newWt = wt.Duplicate(\"Basic Wall Copy\") as WallType;\n}"}
{"prompt":"Duplicate the 'Basic Wall' type and rename it.","completion":"WallType wt = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Basic Wall\");\nif(wt != null)\n{\n    WallType newWt = wt.Duplicate(\"Basic Wall Copy\") as WallType;\n}"}
{"prompt":"Crea una nueva vista 3D orientada desde el punto (10,10,10) mirando hacia el origen.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v=>v.ViewFamily==ViewFamily.ThreeDimensional);\nif(vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    ViewOrientation3D vo = new ViewOrientation3D(new XYZ(10,10,10), XYZ.Zero, XYZ.BasisZ);\n    view.SetOrientation(vo);\n    view.Name = \"Vista desde (10,10,10)\";\n}"}
{"prompt":"Create a new 3D view oriented from point (10,10,10) looking at the origin.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v=>v.ViewFamily==ViewFamily.ThreeDimensional);\nif(vft != null)\n{\n    View3D view = View3D.CreateIsometric(doc, vft.Id);\n    ViewOrientation3D vo = new ViewOrientation3D(new XYZ(10,10,10), XYZ.Zero, XYZ.BasisZ);\n    view.SetOrientation(vo);\n    view.Name = \"View from (10,10,10)\";\n}"}
{"prompt":"Crea un texto de modelo en la vista activa que diga 'PROYECTO BIM'.","completion":"ModelText.Create(doc, \"PROYECTO BIM\", new ElementId(BuiltInCategory.OST_GenericModel), doc.ActiveView.SketchPlane.Id, new XYZ(2,2,0), 1.0, new TextElementOptions());"}
{"prompt":"Create a model text in the active view that says 'BIM PROJECT'.","completion":"ModelText.Create(doc, \"BIM PROJECT\", new ElementId(BuiltInCategory.OST_GenericModel), doc.ActiveView.SketchPlane.Id, new XYZ(2,2,0), 1.0, new TextElementOptions());"}
{"prompt":"Añade un material llamado 'Vidrio Reflectante' con 80% de reflectividad.","completion":"ElementId materialId = Material.Create(doc, \"Vidrio Reflectante\");\nMaterial material = doc.GetElement(materialId) as Material;\nAppearanceAssetElement appearanceAsset = AppearanceAssetElement.Create(doc, \"VidrioReflectante_Asset\", false);\nusing(AppearanceAssetEditScope scope = new AppearanceAssetEditScope(appearanceAsset.GetRenderingAsset()))\n{\n    Asset anAsset = scope.Start();\n    AssetPropertyDouble reflectivity = anAsset.FindByName(\"generic_reflectivity\") as AssetPropertyDouble;\n    if(reflectivity != null) reflectivity.Value = 0.8;\n    scope.Commit(true);\n}\nmaterial.AppearanceAssetId = appearanceAsset.Id;"}
{"prompt":"Add a material named 'Reflective Glass' with 80% reflectivity.","completion":"ElementId materialId = Material.Create(doc, \"Reflective Glass\");\nMaterial material = doc.GetElement(materialId) as Material;\nAppearanceAssetElement appearanceAsset = AppearanceAssetElement.Create(doc, \"ReflectiveGlass_Asset\", false);\nusing(AppearanceAssetEditScope scope = new AppearanceAssetEditScope(appearanceAsset.GetRenderingAsset()))\n{\n    Asset anAsset = scope.Start();\n    AssetPropertyDouble reflectivity = anAsset.FindByName(\"generic_reflectivity\") as AssetPropertyDouble;\n    if(reflectivity != null) reflectivity.Value = 0.8;\n    scope.Commit(true);\n}\nmaterial.AppearanceAssetId = appearanceAsset.Id;"}
{"prompt":"Crea una topografía DirectShape a partir de una lista de puntos.","completion":"List<XYZ> points = new List<XYZ>{new XYZ(0,0,0),new XYZ(10,0,1),new XYZ(0,10,2), new XYZ(10,10,0)};\nTessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[0], points[1], points[2]}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[1], points[3], points[2]}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_Topography));\nds.SetShape(result.GetGeometricalObjects());"}
{"prompt":"Create a DirectShape topography from a list of points.","completion":"List<XYZ> points = new List<XYZ>{new XYZ(0,0,0),new XYZ(10,0,1),new XYZ(0,10,2), new XYZ(10,10,0)};\nTessellatedShapeBuilder builder = new TessellatedShapeBuilder();\nbuilder.OpenConnectedFaceSet(true);\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[0], points[1], points[2]}, ElementId.InvalidElementId));\nbuilder.AddFace(new TessellatedFace(new List<XYZ>{points[1], points[3], points[2]}, ElementId.InvalidElementId));\nbuilder.CloseConnectedFaceSet();\nbuilder.Build();\nTessellatedShapeBuilderResult result = builder.GetBuildResult();\nDirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_Topography));\nds.SetShape(result.GetGeometricalObjects());"}
{"prompt":"Carga un enlace DWG preservando los colores.","completion":"string filePath = @\"C:\\CAD\\Planos.dwg\";\nif(System.IO.File.Exists(filePath))\n{\n    DWGImportOptions opts = new DWGImportOptions();\n    opts.ColorMode = ImportColorMode.Preserved;\n    ElementId linkId;\n    doc.Link(filePath, opts, doc.ActiveView, out linkId);\n}"}
{"prompt":"Load a DWG link, preserving its colors.","completion":"string filePath = @\"C:\\CAD\\Plans.dwg\";\nif(System.IO.File.Exists(filePath))\n{\n    DWGImportOptions opts = new DWGImportOptions();\n    opts.ColorMode = ImportColorMode.Preserved;\n    ElementId linkId;\n    doc.Link(filePath, opts, doc.ActiveView, out linkId);\n}"}
{"prompt":"Obtén todas las vistas de planta y muestra sus nombres.","completion":"IList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().ToList();\nStringBuilder viewNames = new StringBuilder(\"Vistas de Plano:\\n\");\nforeach(var vp in planViews)\n{\n    viewNames.AppendLine(vp.Name);\n}\nTaskDialog.Show(\"Vistas de Plano\", viewNames.ToString());"}
{"prompt":"Get all plan views and list their names.","completion":"IList<ViewPlan> planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().ToList();\nStringBuilder viewNames = new StringBuilder(\"Plan Views:\\n\");\nforeach(var vp in planViews)\n{\n    viewNames.AppendLine(vp.Name);\n}\nTaskDialog.Show(\"Plan Views\", viewNames.ToString());"}
{"prompt":"Crea un nuevo nivel llamado 'Mezzanine' a 7.5 metros de elevación.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(7.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nnewLevel.Name = \"Mezzanine\";"}
{"prompt":"Create a new level named 'Mezzanine' at 7.5 meters elevation.","completion":"double elevation = UnitUtils.ConvertToInternalUnits(7.5, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nnewLevel.Name = \"Mezzanine\";"}
{"prompt":"Define un filtro de vista para ocultar las líneas de detalle.","completion":"ICollection<ElementId> catsToHide = new List<ElementId>{new ElementId(BuiltInCategory.OST_Lines)};\nParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Ocultar Líneas Detalle\", catsToHide, new ElementFilter[0]);\ndoc.ActiveView.AddFilter(pfe.Id);\ndoc.ActiveView.SetFilterVisibility(pfe.Id, false);"}
{"prompt":"Define a view filter to hide detail lines.","completion":"ICollection<ElementId> catsToHide = new List<ElementId>{new ElementId(BuiltInCategory.OST_Lines)};\nParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Hide Detail Lines\", catsToHide, new ElementFilter[0]);\ndoc.ActiveView.AddFilter(pfe.Id);\ndoc.ActiveView.SetFilterVisibility(pfe.Id, false);"}
{"prompt":"Crea una vista de sección usando una caja de 10x10x3 metros.","completion":"BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\nsectionBox.Min = new XYZ(0,0,0);\nsectionBox.Max = new XYZ(10,10,3);\nViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\nif(sectionVFT != null)\n{\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}
{"prompt":"Create a section view using a 10x10x3 meter box.","completion":"BoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\nsectionBox.Min = new XYZ(0,0,0);\nsectionBox.Max = new XYZ(10,10,3);\nViewFamilyType sectionVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Section);\nif(sectionVFT != null)\n{\n    ViewSection.CreateSection(doc, sectionVFT.Id, sectionBox);\n}"}
{"prompt":"Crea un nuevo workset llamado 'Estructura'.","completion":"if(doc.IsWorkshared)\n{\n    Workset.Create(doc, \"Estructura\");\n}"}
{"prompt":"Create a new workset named 'Structure'.","completion":"if(doc.IsWorkshared)\n{\n    Workset.Create(doc, \"Structure\");\n}"}
{"prompt":"Asigna todos los muros al workset 'Estructura'.","completion":"if(doc.IsWorkshared)\n{\n    Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w => w.Name == \"Estructura\");\n    if(ws != null)\n    {\n        var wallIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().ToElementIds();\n        if(wallIds.Any()) WorksharingUtils.ChangeWorkset(doc, wallIds, ws.Id);\n    }\n}"}
{"prompt":"Assign all walls to the 'Structure' workset.","completion":"if(doc.IsWorkshared)\n{\n    Workset ws = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(w => w.Name == \"Structure\");\n    if(ws != null)\n    {\n        var wallIds = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().ToElementIds();\n        if(wallIds.Any()) WorksharingUtils.ChangeWorkset(doc, wallIds, ws.Id);\n    }\n}"}
{"prompt":"Crea un techo por extrusión con una pendiente del 10%.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nif(level != null && roofType != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(10,0,1));\n    ReferencePlane refPlane = ReferencePlane.Create(doc, new XYZ(0,0,level.Elevation), XYZ.BasisX, XYZ.BasisZ, doc.ActiveView);\n    ExtrusionRoof extrusionRoof = doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10);\n    extrusionRoof.get_Parameter(BuiltInParameter.ROOF_SLOPE).Set(0.1);\n}"}
{"prompt":"Create an extrusion roof with a 10% slope.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nif(level != null && roofType != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(10,0,1));\n    ReferencePlane refPlane = ReferencePlane.Create(doc, new XYZ(0,0,level.Elevation), XYZ.BasisX, XYZ.BasisZ, doc.ActiveView);\n    ExtrusionRoof extrusionRoof = doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 10);\n    extrusionRoof.get_Parameter(BuiltInParameter.ROOF_SLOPE).Set(0.1);\n}"}
{"prompt":"Obtén la tabla de planificación 'Muros' y exporta sus datos a un archivo CSV.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s=>s.Name==\"Muros\");\nif(schedule != null)\n{\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(@\"C:\\Exports\\\", \"Muros.csv\", options);\n}"}
{"prompt":"Get the 'Walls' schedule and export its data to CSV.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s=>s.Name==\"Walls\");\nif(schedule != null)\n{\n    ViewScheduleExportOptions options = new ViewScheduleExportOptions() { FieldDelimiter = \",\" };\n    schedule.Export(@\"C:\\Exports\\\", \"Walls.csv\", options);\n}"}
{"prompt":"Permite al usuario seleccionar un muro y resáltalo en la vista.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Por favor, selecciona un muro\");\nif (pickedRef != null && pickedRef.ElementId != ElementId.InvalidElementId)\n{\n    uidoc.Selection.SetElementIds(new List<ElementId>{pickedRef.ElementId});\n    uidoc.ShowElements(pickedRef.ElementId);\n}"}
{"prompt":"Allow the user to select a wall and highlight it in the view.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Please select a wall\");\nif (pickedRef != null && pickedRef.ElementId != ElementId.InvalidElementId)\n{\n    uidoc.Selection.SetElementIds(new List<ElementId>{pickedRef.ElementId});\n    uidoc.ShowElements(pickedRef.ElementId);\n}"}
{"prompt":"Crea una nueva hoja A1 usando el primer cajetín disponible.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    sheet.Name = \"A1 - Planta General\";\n    sheet.SheetNumber = \"A1\";\n}"}
{"prompt":"Create a new A1 sheet using the first available title block.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    sheet.Name = \"A1 - General Plan\";\n    sheet.SheetNumber = \"A1\";\n}"}
{"prompt":"Coloca la vista 'Nivel 1' en el centro de la hoja activa.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 1\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\nif (viewToPlace != null && activeSheet != null && Viewport.CanAddViewToSheet(doc, activeSheet.Id, viewToPlace.Id))\n{\n    BoundingBoxUV sheetBox = activeSheet.get_BoundingBox(null);\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) / 2, (sheetBox.Min.V + sheetBox.Max.V) / 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Place the 'Level 1' view in the center of the active sheet.","completion":"ViewPlan viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 1\") as ViewPlan;\nViewSheet activeSheet = doc.ActiveView as ViewSheet;\nif (viewToPlace != null && activeSheet != null && Viewport.CanAddViewToSheet(doc, activeSheet.Id, viewToPlace.Id))\n{\n    BoundingBoxUV sheetBox = activeSheet.get_BoundingBox(null);\n    XYZ centerPoint = new XYZ((sheetBox.Min.U + sheetBox.Max.U) / 2, (sheetBox.Min.V + sheetBox.Max.V) / 2, 0);\n    Viewport.Create(doc, activeSheet.Id, viewToPlace.Id, centerPoint);\n}"}
{"prompt":"Aplica la plantilla de vista 'Plantilla Arquitectónica' a la vista activa.","completion":"View activeView = doc.ActiveView;\nView viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.IsTemplate && v.Name == \"Plantilla Arquitectónica\");\nif (activeView != null && viewTemplate != null && activeView.ViewTemplateId == ElementId.InvalidElementId)\n{\n    activeView.ViewTemplateId = viewTemplate.Id;\n}"}
{"prompt":"Apply the 'Architectural Template' view template to the active view.","completion":"View activeView = doc.ActiveView;\nView viewTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().FirstOrDefault(v => v.IsTemplate && v.Name == \"Architectural Template\");\nif (activeView != null && viewTemplate != null && activeView.ViewTemplateId == ElementId.InvalidElementId)\n{\n    activeView.ViewTemplateId = viewTemplate.Id;\n}"}
{"prompt":"Crea un circuito eléctrico conectando luminarias a un panel.","completion":"FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nvar fixtures = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds();\nif (panel != null && fixtures.Any())\n{\n    ElectricalSystem.Create(doc, fixtures, panel, ElectricalSystemType.PowerCircuit);\n}"}
{"prompt":"Create an electrical circuit connecting light fixtures to a panel.","completion":"FamilyInstance panel = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_ElectricalEquipment).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nvar fixtures = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().ToElementIds();\nif (panel != null && fixtures.Any())\n{\n    ElectricalSystem.Create(doc, fixtures, panel, ElectricalSystemType.PowerCircuit);\n}"}
{"prompt":"Modela una bandeja de cables entre dos puntos.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif (trayType != null && level != null)\n{\n    XYZ p1 = new XYZ(0,10,3); XYZ p2 = new XYZ(15,10,3);\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}
{"prompt":"Model a cable tray between two points.","completion":"CableTrayType trayType = new FilteredElementCollector(doc).OfClass(typeof(CableTrayType)).FirstOrDefault() as CableTrayType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif (trayType != null && level != null)\n{\n    XYZ p1 = new XYZ(0,10,3); XYZ p2 = new XYZ(15,10,3);\n    CableTray.Create(doc, trayType.Id, p1, p2, level.Id);\n}"}
{"prompt":"Encuentra todas las colisiones entre tuberías y vigas.","completion":"ElementCategoryFilter pipeFilter = new ElementCategoryFilter(BuiltInCategory.OST_PipeCurves);\nElementCategoryFilter beamFilter = new ElementCategoryFilter(BuiltInCategory.OST_StructuralFraming);\nvar pipeCollector = new FilteredElementCollector(doc).WherePasses(pipeFilter);\nvar beamCollector = new FilteredElementCollector(doc).WherePasses(beamFilter);\nElementIntersectsElementFilter clashFilter = new ElementIntersectsElementFilter(beamFilter.FirstElement());\nvar clashElements = pipeCollector.WherePasses(clashFilter);\nTaskDialog.Show(\"Clash\", $\"Se encontraron {clashElements.GetElementCount()} colisiones.\");"}
{"prompt":"Find all clashes between pipes and beams.","completion":"ElementCategoryFilter pipeFilter = new ElementCategoryFilter(BuiltInCategory.OST_PipeCurves);\nElementCategoryFilter beamFilter = new ElementCategoryFilter(BuiltInCategory.OST_StructuralFraming);\nvar pipeCollector = new FilteredElementCollector(doc).WherePasses(pipeFilter);\nvar beamCollector = new FilteredElementCollector(doc).WherePasses(beamFilter);\nElementIntersectsElementFilter clashFilter = new ElementIntersectsElementFilter(beamCollector.FirstElement());\nvar clashElements = pipeCollector.WherePasses(clashFilter);\nTaskDialog.Show(\"Clash\", $\"Found {clashElements.GetElementCount()} clashes.\");"}
{"prompt":"Crea un parámetro global de longitud llamado 'AnchoCorredor' con valor de 1.2m.","completion":"if (GlobalParametersManager.IsGlobalParameterValidName(doc, \"AnchoCorredor\"))\n{\n    GlobalParameter gp = GlobalParameter.Create(doc, \"AnchoCorredor\", SpecTypeId.Length);\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters)));\n}"}
{"prompt":"Create a global length parameter named 'CorridorWidth' with a value of 1.2m.","completion":"if (GlobalParametersManager.IsGlobalParameterValidName(doc, \"CorridorWidth\"))\n{\n    GlobalParameter gp = GlobalParameter.Create(doc, \"CorridorWidth\", SpecTypeId.Length);\n    gp.SetValue(new DoubleParameterValue(UnitUtils.ConvertToInternalUnits(1.2, UnitTypeId.Meters)));\n}"}
{"prompt":"Obtén la geometría sólida de un elemento seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento\");\nElement elem = doc.GetElement(pickedRef);\nOptions opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\nGeometryElement geoElem = elem.get_Geometry(opt);\nList<Solid> solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();"}
{"prompt":"Get the solid geometry of a selected element.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element\");\nElement elem = doc.GetElement(pickedRef);\nOptions opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\nGeometryElement geoElem = elem.get_Geometry(opt);\nList<Solid> solids = geoElem.OfType<Solid>().Where(s => s.Volume > 0).ToList();"}
{"prompt":"Alinea la cara de un muro con la cara de otro.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara de destino\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara a mover\");\nif (ref1 != null && ref2 != null)\n{\n    doc.Create.NewAlignment(doc.ActiveView, ref1, ref2);\n}"}
{"prompt":"Align the face of one wall with the face of another.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference ref1 = uidoc.Selection.PickObject(ObjectType.Face, \"Select the target face\");\nReference ref2 = uidoc.Selection.PickObject(ObjectType.Face, \"Select the face to move\");\nif (ref1 != null && ref2 != null)\n{\n    doc.Create.NewAlignment(doc.ActiveView, ref1, ref2);\n}"}
{"prompt":"Cambia el tipo de todas las ventanas de 'Fijo' a 'Abatible'.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Abatible\"));\nif (newType != null)\n{\n    var windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Name.Contains(\"Fijo\")).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Change the type of all 'Fixed' windows to 'Casement'.","completion":"FamilySymbol newType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"Casement\"));\nif (newType != null)\n{\n    var windowsToChange = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>().Where(fi => fi.Symbol.Name.Contains(\"Fixed\")).ToList();\n    foreach (FamilyInstance window in windowsToChange)\n    {\n        window.Symbol = newType;\n    }\n}"}
{"prompt":"Recarga el vínculo de Revit 'Estructura_LINK.rvt'.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"Estructura_LINK.rvt\");\nif (linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Reload the Revit link 'Structure_LINK.rvt'.","completion":"RevitLinkType linkType = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkType)).Cast<RevitLinkType>().FirstOrDefault(lt => lt.Name == \"Structure_LINK.rvt\");\nif (linkType != null)\n{\n    linkType.Reload();\n}"}
{"prompt":"Crea una vista de planta para el 'Nivel 3'.","completion":"Level level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\nif (level3 != null && vft != null)\n{\n    ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Create a floor plan view for 'Level 3'.","completion":"Level level3 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.FloorPlan);\nif (level3 != null && vft != null)\n{\n    ViewPlan.Create(doc, vft.Id, level3.Id);\n}"}
{"prompt":"Calcula y muestra el área total de todas las habitaciones.","completion":"double totalArea = 0.0;\nvar rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>();\nforeach (Room room in rooms)\n{\n    totalArea += room.Area;\n}\nTaskDialog.Show(\"Área Total\", $\"El área total de habitaciones es: {UnitUtils.ConvertFromInternalUnits(totalArea, UnitTypeId.SquareMeters):F2} m²\");"}
{"prompt":"Calculate and display the total area of all rooms.","completion":"double totalArea = 0.0;\nvar rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>();\nforeach (Room room in rooms)\n{\n    totalArea += room.Area;\n}\nTaskDialog.Show(\"Total Area\", $\"The total room area is: {UnitUtils.ConvertFromInternalUnits(totalArea, UnitTypeId.SquareMeters):F2} m²\");"}
{"prompt":"Exporta una lista de familias y sus tipos a un archivo de texto.","completion":"string path = @\"C:\\RevitExports\\FamilyList.txt\";\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(path))\n{\n    var families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>();\n    foreach (Family fam in families)\n    {\n        writer.WriteLine($\"Familia: {fam.Name}\");\n        foreach (ElementId symbolId in fam.GetFamilySymbolIds())\n        {\n            FamilySymbol sym = doc.GetElement(symbolId) as FamilySymbol;\n            if(sym != null) writer.WriteLine($\"\\tTipo: {sym.Name}\");\n        }\n    }\n}"}
{"prompt":"Export a list of families and their types to a text file.","completion":"string path = @\"C:\\RevitExports\\FamilyList.txt\";\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(path))\n{\n    var families = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>();\n    foreach (Family fam in families)\n    {\n        writer.WriteLine($\"Family: {fam.Name}\");\n        foreach (ElementId symbolId in fam.GetFamilySymbolIds())\n        {\n            FamilySymbol sym = doc.GetElement(symbolId) as FamilySymbol;\n            if(sym != null) writer.WriteLine($\"\\tType: {sym.Name}\");\n        }\n    }\n}"}
{"prompt":"Cambia un panel de vidrio de un muro cortina por un panel sólido.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nPanelType solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(PanelType)).Cast<PanelType>().FirstOrDefault(pt => pt.Name.Contains(\"Solid\"));\nif (curtainWall != null && solidPanelType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    var panelIds = grid.GetPanelIds();\n    if(panelIds.Any()){\n        Panel panelToChange = doc.GetElement(panelIds.First()) as Panel;\n        if (panelToChange != null) panelToChange.ChangeTypeId(solidPanelType.Id);\n    }\n}"}
{"prompt":"Change a glass panel in a curtain wall to a solid panel.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nPanelType solidPanelType = new FilteredElementCollector(doc).OfClass(typeof(PanelType)).Cast<PanelType>().FirstOrDefault(pt => pt.Name.Contains(\"Solid\"));\nif (curtainWall != null && solidPanelType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    var panelIds = grid.GetPanelIds();\n    if(panelIds.Any()){\n        Panel panelToChange = doc.GetElement(panelIds.First()) as Panel;\n        if (panelToChange != null) panelToChange.ChangeTypeId(solidPanelType.Id);\n    }\n}"}
{"prompt":"Obtén las coordenadas del punto base y del punto de reconocimiento.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsSurveyPoint);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsSurveyPoint);\nif(surveyPoint != null && projectBasePoint != null) {\n    XYZ surveyCoords = surveyPoint.Position;\n    XYZ projectCoords = projectBasePoint.Position;\n    TaskDialog.Show(\"Coordenadas\", $\"Punto de Levantamiento: {surveyCoords}\\nPunto Base: {projectCoords}\");\n}"}
{"prompt":"Get the coordinates of the project base point and the survey point.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => p.IsSurveyPoint);\nBasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(p => !p.IsSurveyPoint);\nif(surveyPoint != null && projectBasePoint != null) {\n    XYZ surveyCoords = surveyPoint.Position;\n    XYZ projectCoords = projectBasePoint.Position;\n    TaskDialog.Show(\"Coordinates\", $\"Survey Point: {surveyCoords}\\nProject Base Point: {projectCoords}\");\n}"}
{"prompt":"Crea una región rellena con un patrón de 'Concreto'.","completion":"FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\"));\nif (regionType != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(5,5,0));\n    FilledRegion.Create(doc, regionType.Id, doc.ActiveView.Id, new List<CurveLoop>{profile});\n}"}
{"prompt":"Create a filled region with a 'Concrete' pattern.","completion":"FilledRegionType regionType = new FilteredElementCollector(doc).OfClass(typeof(FilledRegionType)).Cast<FilledRegionType>().FirstOrDefault(frt => frt.Name.Contains(\"Concrete\"));\nif (regionType != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(5,5,0));\n    FilledRegion.Create(doc, regionType.Id, doc.ActiveView.Id, new List<CurveLoop>{profile});\n}"}
{"prompt":"Encuentra el elemento de pórtico estructural con la marca 'B-101'.","completion":"Element framingElement = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().FirstOrDefault(e => e.get_Parameter(BuiltInParameter.ALL_MODEL_MARK).AsString() == \"B-101\");"}
{"prompt":"Find the structural framing element with the mark 'B-101'.","completion":"Element framingElement = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().FirstOrDefault(e => e.get_Parameter(BuiltInParameter.ALL_MODEL_MARK).AsString() == \"B-101\");"}
{"prompt":"Crea una losa de cimentación de 20x15 metros.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundationLevel != null && slabType != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(20,15,0));\n    Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n}"}
{"prompt":"Create a 20x15 meter foundation slab.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundationLevel != null && slabType != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(20,15,0));\n    Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n}"}
{"prompt":"Añade montantes a todas las líneas de rejilla de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif (curtainWall != null && mullionType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    foreach (ElementId gridLineId in grid.GetVGridLineIds())\n    {\n        grid.AddMullions(doc.GetElement(gridLineId) as CurtainGridLine, mullionType, false);\n    }\n    foreach (ElementId gridLineId in grid.GetUGridLineIds())\n    {\n        grid.AddMullions(doc.GetElement(gridLineId) as CurtainGridLine, mullionType, false);\n    }\n}"}
{"prompt":"Add mullions to all grid lines of a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif (curtainWall != null && mullionType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    foreach (ElementId gridLineId in grid.GetVGridLineIds())\n    {\n        grid.AddMullions(doc.GetElement(gridLineId) as CurtainGridLine, mullionType, false);\n    }\n    foreach (ElementId gridLineId in grid.GetUGridLineIds())\n    {\n        grid.AddMullions(doc.GetElement(gridLineId) as CurtainGridLine, mullionType, false);\n    }\n}"}
{"prompt":"Rota el elemento seleccionado 45 grados alrededor de su centro.","completion":"UIDocument uidoc = new UIDocument(doc);\nElement elem = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nif (lp != null)\n{\n    Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n    ElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI / 4.0);\n}"}
{"prompt":"Rotate the selected element 45 degrees about its center.","completion":"UIDocument uidoc = new UIDocument(doc);\nElement elem = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nif (lp != null)\n{\n    Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n    ElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI / 4.0);\n}"}
{"prompt":"Crea una apertura de hueco (shaft) que atraviese desde el Nivel 1 al Nivel 3.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 3\") as Level;\nif(bottomLevel != null && topLevel != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(5,5,0), new XYZ(8,8,0));\n    Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile, true);\n}"}
{"prompt":"Create a shaft opening that passes through from Level 1 to Level 3.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 3\") as Level;\nif(bottomLevel != null && topLevel != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(5,5,0), new XYZ(8,8,0));\n    Opening shaft = doc.Create.NewOpening(bottomLevel, topLevel, profile, true);\n}"}
{"prompt":"Muestra un cuadro de diálogo con opciones 'Sí' y 'No'.","completion":"TaskDialog mainDialog = new TaskDialog(\"Confirmación\");\nmainDialog.MainInstruction = \"¿Desea proceder con la operación?\";\nmainDialog.CommonButtons = TaskDialogCommonButtons.Yes | TaskDialogCommonButtons.No;\nTaskDialogResult result = mainDialog.Show();\nif (result == TaskDialogResult.Yes)\n{\n    // El usuario presionó 'Sí'\n}\nelse\n{\n    // El usuario presionó 'No'\n}"}
{"prompt":"Display a dialog box with 'Yes' and 'No' options.","completion":"TaskDialog mainDialog = new TaskDialog(\"Confirmation\");\nmainDialog.MainInstruction = \"Do you want to proceed with the operation?\";\nmainDialog.CommonButtons = TaskDialogCommonButtons.Yes | TaskDialogCommonButtons.No;\nTaskDialogResult result = mainDialog.Show();\nif (result == TaskDialogResult.Yes)\n{\n    // User clicked 'Yes'\n}\nelse\n{\n    // User clicked 'No'\n}"}
{"prompt":"Sincroniza el modelo local con el central, añadiendo el comentario 'Actualización de diseño'.","completion":"if(doc.IsWorkshared)\n{\n    TransactWithCentralOptions tco = new TransactWithCentralOptions();\n    SynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\n    swcOpts.SetComment(\"Actualización de diseño\");\n    swcOpts.SaveLocalAfter = true;\n    doc.SyncWithCentral(tco, swcOpts);\n}"}
{"prompt":"Synchronize the local model with the central model, adding the comment 'Design update'.","completion":"if(doc.IsWorkshared)\n{\n    TransactWithCentralOptions tco = new TransactWithCentralOptions();\n    SynchronizeWithCentralOptions swcOpts = new SynchronizeWithCentralOptions();\n    swcOpts.SetComment(\"Design update\");\n    swcOpts.SaveLocalAfter = true;\n    doc.SyncWithCentral(tco, swcOpts);\n}"}
{"prompt":"Obtén la curva del modelo analítico de una viga.","completion":"FamilyInstance beam = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif (beam != null)\n{\n    AnalyticalModel am = beam.GetAnalyticalModel();\n    if (am != null && am.IsSingleCurve())\n    {\n        Curve analyticalCurve = am.GetCurve();\n        // analyticalCurve contiene la curva del modelo analítico\n    }\n}"}
{"prompt":"Get the analytical model curve of a beam.","completion":"FamilyInstance beam = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif (beam != null)\n{\n    AnalyticalModel am = beam.GetAnalyticalModel();\n    if (am != null && am.IsSingleCurve())\n    {\n        Curve analyticalCurve = am.GetCurve();\n        // analyticalCurve now holds the analytical model curve\n    }\n}"}
{"prompt":"Crea una nota de texto con una flecha apuntando a un elemento seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference target = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un elemento para anotar\");\nif(target != null)\n{\n    XYZ textLocation = uidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n    XYZ leaderEnd = target.GlobalPoint;\n    TextNote.Create(doc, doc.ActiveView.Id, textLocation, \"Revisar este elemento\", TextNoteType.CreateDefault(doc).Id).AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L, leaderEnd);\n}"}
{"prompt":"Create a text note with a leader pointing to a selected element.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference target = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\nif(target != null)\n{\n    XYZ textLocation = uidoc.Selection.PickPoint(\"Choose the text location\");\n    XYZ leaderEnd = target.GlobalPoint;\n    TextNote.Create(doc, doc.ActiveView.Id, \"Review this element\", textLocation, TextNoteType.CreateDefault(doc).Id).AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L, leaderEnd);\n}"}
{"prompt":"Conecta dos bandejas de cables con un codo.","completion":"var trays = new FilteredElementCollector(doc).OfClass(typeof(CableTray)).Take(2).ToList();\nif (trays.Count == 2)\n{\n    Connector c1 = trays[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = trays[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (c1 != null && c2 != null) doc.Create.NewUnionFitting(c1, c2);\n}"}
{"prompt":"Connect two cable trays with an elbow fitting.","completion":"var trays = new FilteredElementCollector(doc).OfClass(typeof(CableTray)).Take(2).ToList();\nif (trays.Count == 2)\n{\n    Connector c1 = trays[0].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    Connector c2 = trays[1].ConnectorManager.UnusedConnectors.Cast<Connector>().FirstOrDefault();\n    if (c1 != null && c2 != null) doc.Create.NewUnionFitting(c1, c2);\n}"}
{"prompt":"Crea una vista 3D axonométrica orientada al Noroeste.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\nif(vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    XYZ eye = new XYZ(-1, 1, 1);\n    XYZ up = new XYZ(0, 0, 1);\n    XYZ forward = eye.Negate().Normalize();\n    view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n    view3d.Name = \"Vista 3D Noroeste\";\n}"}
{"prompt":"Create an axonometric 3D view oriented to the Northwest.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\nif(vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    XYZ eye = new XYZ(-1, 1, 1);\n    XYZ up = new XYZ(0, 0, 1);\n    XYZ forward = eye.Negate().Normalize();\n    view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n    view3d.Name = \"3D View Northwest\";\n}"}
{"prompt":"Encuentra todas las puertas en el Nivel 1 usando un filtro combinado.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(level1 != null){\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    var doors = new FilteredElementCollector(doc).WherePasses(combinedFilter).ToElements();\n}"}
{"prompt":"Find all doors on Level 1 using a combined filter.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(level1 != null){\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    LogicalAndFilter combinedFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    var doors = new FilteredElementCollector(doc).WherePasses(combinedFilter).ToElements();\n}"}
{"prompt":"Crea un texto de modelo 3D que diga 'TORRE A'.","completion":"Level baseLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nif(baseLevel != null)\n{\n    XYZ origin = new XYZ(0,0,baseLevel.Elevation);\n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, origin);\n    SketchPlane sp = SketchPlane.Create(doc, plane);\n    ModelText.Create(doc, \"TORRE A\", sp.Id, origin, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters));\n}"}
{"prompt":"Create a 3D model text that says 'TOWER A'.","completion":"Level baseLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nif(baseLevel != null)\n{\n    XYZ origin = new XYZ(0,0,baseLevel.Elevation);\n    Plane plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, origin);\n    SketchPlane sp = SketchPlane.Create(doc, plane);\n    ModelText.Create(doc, \"TOWER A\", sp.Id, origin, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters));\n}"}
{"prompt":"Exporta todas las advertencias del proyecto a un archivo de texto.","completion":"string path = @\"C:\\RevitExports\\ProjectWarnings.txt\";\nIList<FailureMessage> warnings = doc.GetWarnings();\nusing (System.IO.StreamWriter writer = new System.IO.StreamWriter(path))\n{\n    foreach (FailureMessage fm in warnings)\n    {\n        writer.WriteLine(fm.GetDescriptionText());\n    }\n}"}
{"prompt":"Export all project warnings to a text file.","completion":"string path = @\"C:\\RevitExports\\ProjectWarnings.txt\";\nIList<FailureMessage> warnings = doc.GetWarnings();\nusing (System.IO.StreamWriter writer = new System.IO.StreamWriter(path))\n{\n    foreach (FailureMessage fm in warnings)\n    {\n        writer.WriteLine(fm.GetDescriptionText());\n    }\n}"}
{"prompt":"Agrupa una tabla de planificación de habitaciones por Nivel.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(vs => vs.Definition.CategoryId.IntegerValue == (int)BuiltInCategory.OST_Rooms);\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.ROOM_LEVEL_ID));\n    if(levelField != null) {\n        def.AddSortGroupField(new ScheduleSortGroupField(levelField.FieldId));\n        def.IsItemized = false;\n        def.ShowGrandTotal = true;\n    }\n}"}
{"prompt":"Group a room schedule by Level.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(vs => vs.Definition.CategoryId.IntegerValue == (int)BuiltInCategory.OST_Rooms);\nif (schedule != null)\n{\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.ROOM_LEVEL_ID));\n    if(levelField != null) {\n        def.AddSortGroupField(new ScheduleSortGroupField(levelField.FieldId));\n        def.IsItemized = false;\n        def.ShowGrandTotal = true;\n    }\n}"}
{"prompt":"Obtén todos los muros de un modelo vinculado que se cruzan con una caja de delimitación.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    BoundingBoxXYZ bbox = new BoundingBoxXYZ() { Min = new XYZ(0,0,0), Max = new XYZ(50,50,10) };\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(bbox.Min, bbox.Max));\n    var linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToElements();\n}"}
{"prompt":"Get all walls from a linked model that intersect with a bounding box.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    BoundingBoxXYZ bbox = new BoundingBoxXYZ() { Min = new XYZ(0,0,0), Max = new XYZ(50,50,10) };\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(new Outline(bbox.Min, bbox.Max));\n    var linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WherePasses(filter).ToElements();\n}"}
{"prompt":"Desune la geometría de dos elementos previamente unidos.","completion":"UIDocument uidoc = new UIDocument(doc);\nElement e1 = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId);\nElement e2 = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId);\nif (e1 != null && e2 != null && JoinGeometryUtils.AreElementsJoined(doc, e1, e2))\n{\n    JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n}"}
{"prompt":"Unjoin the geometry of two previously joined elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nElement e1 = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId);\nElement e2 = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId);\nif (e1 != null && e2 != null && JoinGeometryUtils.AreElementsJoined(doc, e1, e2))\n{\n    JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n}"}
{"prompt":"Coloca una cota de elevación en la cara superior de un suelo.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference faceRef = uidoc.Selection.PickObject(ObjectType.Face, \"Selecciona la cara superior del suelo\");\nif(faceRef != null)\n{\n    XYZ pointOnFace = faceRef.GlobalPoint;\n    XYZ leaderEnd = pointOnFace + new XYZ(1,1,0);\n    doc.Create.NewSpotElevation(doc.ActiveView, faceRef, pointOnFace, leaderEnd, leaderEnd, true, true);\n}"}
{"prompt":"Place a spot elevation on the top face of a floor.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference faceRef = uidoc.Selection.PickObject(ObjectType.Face, \"Select the top face of the floor\");\nif(faceRef != null)\n{\n    XYZ pointOnFace = faceRef.GlobalPoint;\n    XYZ leaderEnd = pointOnFace + new XYZ(1,1,0);\n    doc.Create.NewSpotElevation(doc.ActiveView, faceRef, pointOnFace, leaderEnd, leaderEnd, true, true);\n}"}
{"prompt":"Verifica si una tubería está conectada en ambos extremos.","completion":"Pipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nif(pipe != null) {\n    bool isFullyConnected = pipe.ConnectorManager.UnusedConnectors.IsEmpty;\n    TaskDialog.Show(\"Conectividad\", \"La tubería está completamente conectada: \" + isFullyConnected);\n}"}
{"prompt":"Check if a pipe is connected at both ends.","completion":"Pipe pipe = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).FirstOrDefault() as Pipe;\nif(pipe != null) {\n    bool isFullyConnected = pipe.ConnectorManager.UnusedConnectors.IsEmpty;\n    TaskDialog.Show(\"Connectivity\", \"The pipe is fully connected: \" + isFullyConnected);\n}"}
{"prompt":"Dentro del editor de familias, crea un plano de referencia vertical llamado 'Eje Central'.","completion":"// Este código se ejecuta en un documento de familia (doc.IsFamilyDocument == true)\nif(doc.IsFamilyDocument)\n{\n    XYZ start = new XYZ(0, -5, 0);\n    XYZ end = new XYZ(0, 5, 0);\n    XYZ normal = XYZ.BasisX;\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, doc.ActiveView);\n    rp.Name = \"Eje Central\";\n}"}
{"prompt":"Inside the family editor, create a vertical reference plane named 'Center Axis'.","completion":"// This code runs in a family document (doc.IsFamilyDocument == true)\nif(doc.IsFamilyDocument)\n{\n    XYZ start = new XYZ(0, -5, 0);\n    XYZ end = new XYZ(0, 5, 0);\n    XYZ normal = XYZ.BasisX;\n    ReferencePlane rp = doc.FamilyCreate.NewReferencePlane(start, end, normal, doc.ActiveView);\n    rp.Name = \"Center Axis\";\n}"}
{"prompt":"Averigua quién es el propietario de un elemento seleccionado.","completion":"if(doc.IsWorkshared)\n{\n    UIDocument uidoc = new UIDocument(doc);\n    Element elem = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId);\n    if(elem != null)\n    {\n        WorksharingTooltipInfo info = WorksharingUtils.GetWorksharingTooltipInfo(doc, elem.Id);\n        TaskDialog.Show(\"Propietario\", \"El propietario es: \" + info.Owner);\n    }\n}"}
{"prompt":"Find out who the owner of a selected element is.","completion":"if(doc.IsWorkshared)\n{\n    UIDocument uidoc = new UIDocument(doc);\n    Element elem = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId);\n    if(elem != null)\n    {\n        WorksharingTooltipInfo info = WorksharingUtils.GetWorksharingTooltipInfo(doc, elem.Id);\n        TaskDialog.Show(\"Owner\", \"The owner is: \" + info.Owner);\n    }\n}"}
{"prompt":"Aísla temporalmente un elemento seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToIsolate = uidoc.Selection.GetElementIds();\nif (idsToIsolate.Any())\n{\n    doc.ActiveView.IsolateElementsTemporary(idsToIsolate);\n}"}
{"prompt":"Temporarily isolate a selected element.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToIsolate = uidoc.Selection.GetElementIds();\nif (idsToIsolate.Any())\n{\n    doc.ActiveView.IsolateElementsTemporary(idsToIsolate);\n}"}
{"prompt":"Crea un componente de detalle repetitivo a lo largo de una línea.","completion":"DetailComponentType dct = new FilteredElementCollector(doc).OfClass(typeof(DetailComponentType)).FirstOrDefault() as DetailComponentType;\nif (dct != null)\n{\n    Line path = Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0));\n    RepeatingDetailComponent.Create(doc, doc.ActiveView.Id, dct.Id, path);\n}"}
{"prompt":"Create a repeating detail component along a line.","completion":"DetailComponentType dct = new FilteredElementCollector(doc).OfClass(typeof(DetailComponentType)).FirstOrDefault() as DetailComponentType;\nif (dct != null)\n{\n    Line path = Line.CreateBound(new XYZ(0,0,0), new XYZ(10,0,0));\n    RepeatingDetailComponent.Create(doc, doc.ActiveView.Id, dct.Id, path);\n}"}
{"prompt":"Crea un nuevo panel en la cinta de opciones llamado 'Mis Herramientas' con un botón.","completion":"// Este código se debe ejecutar en el método OnStartup de una IExternalApplication.\n// string panelName = \"Mis Herramientas\";\n// RibbonPanel ribbonPanel = application.CreateRibbonPanel(panelName);\n// string thisAssemblyPath = System.Reflection.Assembly.GetExecutingAssembly().Location;\n// PushButtonData buttonData = new PushButtonData(\"cmdMyButton\", \"Mi Botón\", thisAssemblyPath, \"MyNamespace.MyCommandClass\");\n// PushButton pushButton = ribbonPanel.AddItem(buttonData) as PushButton;"}
{"prompt":"Create a new Ribbon panel named 'My Tools' with a button.","completion":"// This code should be executed in the OnStartup method of an IExternalApplication.\n// string panelName = \"My Tools\";\n// RibbonPanel ribbonPanel = application.CreateRibbonPanel(panelName);\n// string thisAssemblyPath = System.Reflection.Assembly.GetExecutingAssembly().Location;\n// PushButtonData buttonData = new PushButtonData(\"cmdMyButton\", \"My Button\", thisAssemblyPath, \"MyNamespace.MyCommandClass\");\n// PushButton pushButton = ribbonPanel.AddItem(buttonData) as PushButton;"}
{"prompt":"Cambia el tipo de una losa por uno que contenga 'Concreto'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concreto\"));\nif(floorToChange != null && newType != null) floorToChange.ChangeTypeId(newType.Id);"}
{"prompt":"Change the type of a floor to one that contains 'Concrete'.","completion":"Floor floorToChange = new FilteredElementCollector(doc).OfClass(typeof(Floor)).FirstOrDefault() as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name.Contains(\"Concrete\"));\nif(floorToChange != null && newType != null) floorToChange.ChangeTypeId(newType.Id);"}
{"prompt":"Obtén todas las subcategorías de la categoría Muros.","completion":"Category wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategoryNameMap subcategories = wallCat.SubCategories;\nStringBuilder sb = new StringBuilder(\"Subcategorías de Muros:\\n\");\nforeach(Category subcat in subcategories)\n{\n    sb.AppendLine(subcat.Name);\n}\nTaskDialog.Show(\"Subcategorías\", sb.ToString());"}
{"prompt":"Get all subcategories from the Walls category.","completion":"Category wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategoryNameMap subcategories = wallCat.SubCategories;\nStringBuilder sb = new StringBuilder(\"Wall Subcategories:\\n\");\nforeach(Category subcat in subcategories)\n{\n    sb.AppendLine(subcat.Name);\n}\nTaskDialog.Show(\"Subcategories\", sb.ToString());"}
{"prompt":"Crea un parámetro de proyecto de tipo URL llamado 'Enlace a Especificaciones'.","completion":"string paramName = \"Enlace a Especificaciones\";\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = defFile.Groups.EnsureDefinitionGroup(\"Documentation\");\nExternalDefinition def = group.Definitions.Create(new ExternalDefinitionCreationOptions(paramName, SpecTypeId.Url)) as ExternalDefinition;\n// Se debe aplicar a categorías, por ejemplo, a muros\nCategory wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategorySet catSet = doc.Application.Create.NewCategorySet();\ncatSet.Insert(wallCat);\ndoc.ParameterBindings.Insert(doc.Application.Create.NewInstanceBinding(catSet), def, BuiltInParameterGroup.PG_DATA);"}
{"prompt":"Create a URL type project parameter named 'Link to Specifications'.","completion":"string paramName = \"Link to Specifications\";\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup group = defFile.Groups.EnsureDefinitionGroup(\"Documentation\");\nExternalDefinition def = group.Definitions.Create(new ExternalDefinitionCreationOptions(paramName, SpecTypeId.Url)) as ExternalDefinition;\n// Must be applied to categories, for example, walls\nCategory wallCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls);\nCategorySet catSet = doc.Application.Create.NewCategorySet();\ncatSet.Insert(wallCat);\ndoc.ParameterBindings.Insert(doc.Application.Create.NewInstanceBinding(catSet), def, BuiltInParameterGroup.PG_DATA);"}
{"prompt":"Crea una nueva vista de alzado mirando al sur.","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nif(elevationVFT != null){\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0,-20,0), 100);\n    marker.CreateElevation(doc, doc.ActiveView.Id, 0); // El índice 0 es Sur\n}"}
{"prompt":"Create a new elevation view looking south.","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nif(elevationVFT != null){\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0,-20,0), 100);\n    marker.CreateElevation(doc, doc.ActiveView.Id, 0); // Index 0 is South\n}"}
{"prompt":"Exporta la geometría de un elemento seleccionado a un archivo SAT.","completion":"UIDocument uidoc = new UIDocument(doc);\nElement elem = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId);\nif(elem != null){\n    SATExportOptions options = new SATExportOptions();\n    doc.Export(@\"C:\\Exports\\\", \"geometry.sat\", new List<ElementId>{elem.Id}, options);\n}"}
{"prompt":"Export the geometry of a selected element to an SAT file.","completion":"UIDocument uidoc = new UIDocument(doc);\nElement elem = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId);\nif(elem != null){\n    SATExportOptions options = new SATExportOptions();\n    doc.Export(@\"C:\\Exports\\\", \"geometry.sat\", new List<ElementId>{elem.Id}, options);\n}"}
{"prompt":"Obtén el tipo de sistema de una tubería seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nPipe pipe = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una tubería\").ElementId) as Pipe;\nif(pipe != null){\n    PipingSystemType systemType = doc.GetElement(pipe.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId()) as PipingSystemType;\n    if(systemType != null) TaskDialog.Show(\"Sistema de Tubería\", systemType.Name);\n}"}
{"prompt":"Get the system type of a selected pipe.","completion":"UIDocument uidoc = new UIDocument(doc);\nPipe pipe = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element, \"Select a pipe\").ElementId) as Pipe;\nif(pipe != null){\n    PipingSystemType systemType = doc.GetElement(pipe.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId()) as PipingSystemType;\n    if(systemType != null) TaskDialog.Show(\"Piping System\", systemType.Name);\n}"}
{"prompt":"Crea un nuevo tipo de tubería con material de Cobre.","completion":"PipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nif(pipeTypeToDuplicate != null){\n    PipeType newType = pipeTypeToDuplicate.Duplicate(\"Tubería de Cobre\") as PipeType;\n    Material copper = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Copper\")) as Material;\n    if(copper != null) newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM).Set(copper.Id);\n}"}
{"prompt":"Create a new pipe type with Copper material.","completion":"PipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nif(pipeTypeToDuplicate != null){\n    PipeType newType = pipeTypeToDuplicate.Duplicate(\"Copper Pipe\") as PipeType;\n    Material copper = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Copper\")) as Material;\n    if(copper != null) newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM).Set(copper.Id);\n}"}
{"prompt":"Oculta un elemento seleccionado en la vista activa.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToHide = uidoc.Selection.GetElementIds();\nif(idsToHide.Any()) doc.ActiveView.HideElements(idsToHide);"}
{"prompt":"Hide a selected element in the active view.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToHide = uidoc.Selection.GetElementIds();\nif(idsToHide.Any()) doc.ActiveView.HideElements(idsToHide);"}
{"prompt":"Cambia el nombre de la familia de una puerta seleccionada a 'Puerta_Nueva'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una puerta\");\nFamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\nif(door != null) {\n    Family family = door.Symbol.Family;\n    family.Name = \"Puerta_Nueva\";\n}"}
{"prompt":"Change the family name of a selected door to 'New_Door'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a door\");\nFamilyInstance door = doc.GetElement(pickedRef.ElementId) as FamilyInstance;\nif(door != null) {\n    Family family = door.Symbol.Family;\n    family.Name = \"New_Door\";\n}"}
{"prompt":"Crea una nueva hoja A2 con el número 'A-201'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    sheet.Name = \"Detalles Constructivos\";\n    sheet.SheetNumber = \"A-201\";\n}"}
{"prompt":"Create a new A2 sheet with the number 'A-201'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet sheet = ViewSheet.Create(doc, titleBlock.Id);\n    sheet.Name = \"Construction Details\";\n    sheet.SheetNumber = \"A-201\";\n}"}
{"prompt":"Coloca todos los elementos seleccionados en el workset 'Fachada'.","completion":"if(doc.IsWorkshared)\n{\n    UIDocument uidoc = new UIDocument(doc);\n    Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Fachada\");\n    if(workset == null) workset = Workset.Create(doc, \"Fachada\");\n    ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n    if(workset != null && selectedIds.Any()) WorksharingUtils.ChangeWorkset(doc, selectedIds, workset.Id);\n}"}
{"prompt":"Place all selected elements on the 'Facade' workset.","completion":"if(doc.IsWorkshared)\n{\n    UIDocument uidoc = new UIDocument(doc);\n    Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == \"Facade\");\n    if(workset == null) workset = Workset.Create(doc, \"Facade\");\n    ICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\n    if(workset != null && selectedIds.Any()) WorksharingUtils.ChangeWorkset(doc, selectedIds, workset.Id);\n}"}
{"prompt":"Crea una nueva revisión y aplícala a la hoja activa.","completion":"Revision rev = Revision.Create(doc);\nrev.Description = \"Emitido para Construcción\";\nrev.RevisionDate = DateTime.Now.ToString(\"yyyy-MM-dd\");\nrev.IssuedBy = \"Departamento BIM\";\nViewSheet sheet = doc.ActiveView as ViewSheet;\nif (sheet != null)\n{\n    ICollection<ElementId> revisions = sheet.GetAllRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}
{"prompt":"Create a new revision and apply it to the active sheet.","completion":"Revision rev = Revision.Create(doc);\nrev.Description = \"Issued for Construction\";\nrev.RevisionDate = DateTime.Now.ToString(\"yyyy-MM-dd\");\nrev.IssuedBy = \"BIM Department\";\nViewSheet sheet = doc.ActiveView as ViewSheet;\nif (sheet != null)\n{\n    ICollection<ElementId> revisions = sheet.GetAllRevisionIds();\n    revisions.Add(rev.Id);\n    sheet.SetAdditionalRevisionIds(revisions);\n}"}
{"prompt":"Crea una dimensión radial para un muro curvo.","completion":"Wall curvedWall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.Location is LocationCurve && (w.Location as LocationCurve).Curve is Arc);\nif (curvedWall != null)\n{\n    Arc arc = (curvedWall.Location as LocationCurve).Curve as Arc;\n    XYZ leaderEndPoint = arc.Center + new XYZ(arc.Radius + 5, 0, 0);\n    doc.Create.NewRadialDimension(doc.ActiveView, new Reference(curvedWall), leaderEndPoint, arc.Radius);\n}"}
{"prompt":"Create a radial dimension for a curved wall.","completion":"Wall curvedWall = new FilteredElementCollector(doc, doc.ActiveView.Id).OfClass(typeof(Wall)).Cast<Wall>().FirstOrDefault(w => w.Location is LocationCurve && (w.Location as LocationCurve).Curve is Arc);\nif (curvedWall != null)\n{\n    Arc arc = (curvedWall.Location as LocationCurve).Curve as Arc;\n    XYZ leaderEndPoint = arc.Center + new XYZ(arc.Radius + 5, 0, 0);\n    doc.Create.NewRadialDimension(doc.ActiveView, new Reference(curvedWall), leaderEndPoint, arc.Radius);\n}"}
{"prompt":"Encuentra el host de una luminaria basada en cara.","completion":"FamilyInstance lightFixture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().FirstOrDefault(fi => fi.HostFace != null) as FamilyInstance;\nif (lightFixture != null)\n{\n    Reference hostFaceRef = lightFixture.HostFace;\n    Element host = doc.GetElement(hostFaceRef.ElementId);\n    TaskDialog.Show(\"Anfitrión\", \"El anfitrión es: \" + host.Name);\n}"}
{"prompt":"Find the host of a face-based light fixture.","completion":"FamilyInstance lightFixture = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsNotElementType().FirstOrDefault(fi => fi.HostFace != null) as FamilyInstance;\nif (lightFixture != null)\n{\n    Reference hostFaceRef = lightFixture.HostFace;\n    Element host = doc.GetElement(hostFaceRef.ElementId);\n    TaskDialog.Show(\"Host\", \"The host is: \" + host.Name);\n}"}
{"prompt":"Obtén todas las subcategorías de la categoría Puertas.","completion":"Category doorCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors);\nCategoryNameMap subcategories = doorCat.SubCategories;\nStringBuilder sb = new StringBuilder(\"Subcategorías de Puertas:\\n\");\nforeach(Category subcat in subcategories) { sb.AppendLine(subcat.Name); }\nTaskDialog.Show(\"Subcategorías\", sb.ToString());"}
{"prompt":"Get all subcategories from the Doors category.","completion":"Category doorCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors);\nCategoryNameMap subcategories = doorCat.SubCategories;\nStringBuilder sb = new StringBuilder(\"Door Subcategories:\\n\");\nforeach(Category subcat in subcategories) { sb.AppendLine(subcat.Name); }\nTaskDialog.Show(\"Subcategories\", sb.ToString());"}
{"prompt":"Crea una nueva vista de alzado mirando al norte.","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nif(elevationVFT != null){\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20, 0), 100);\n    marker.CreateElevation(doc, doc.ActiveView.Id, 2); // El índice 2 es Norte\n}"}
{"prompt":"Create a new elevation view looking north.","completion":"ViewFamilyType elevationVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(vft => vft.ViewFamily == ViewFamily.Elevation);\nif(elevationVFT != null){\n    ElevationMarker marker = ElevationMarker.CreateElevationMarker(doc, elevationVFT.Id, new XYZ(0, 20, 0), 100);\n    marker.CreateElevation(doc, doc.ActiveView.Id, 2); // Index 2 is North\n}"}
{"prompt":"Cambia el nombre de todas las tablas que contienen 'Puertas' por 'Listado de Puertas'.","completion":"var schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"Puertas\"));\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"Puertas\", \"Listado de Puertas\");\n}"}
{"prompt":"Rename all schedules containing 'Doors' to 'Door Schedule'.","completion":"var schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"Doors\"));\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"Doors\", \"Door Schedule\");\n}"}
{"prompt":"Crea un nuevo tipo de cota lineal con texto azul y tamaño 2mm.","completion":"DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\nif(linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"Cota Azul 2mm\") as DimensionType;\n    if(newDimType != null)\n    {\n        newDimType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(0,0,255).GetElementId());\n        newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE).Set(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Create a new linear dimension type with blue text and 2mm size.","completion":"DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\nif(linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"Blue Dimension 2mm\") as DimensionType;\n    if(newDimType != null)\n    {\n        newDimType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(0,0,255).GetElementId());\n        newDimType.get_Parameter(BuiltInParameter.TEXT_SIZE).Set(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Millimeters));\n    }\n}"}
{"prompt":"Reporta el número total de advertencias en el proyecto.","completion":"int warningCount = doc.GetWarnings().Count;\nTaskDialog.Show(\"Auditoría de Proyecto\", $\"El proyecto tiene {warningCount} advertencias.\");"}
{"prompt":"Report the total number of warnings in the project.","completion":"int warningCount = doc.GetWarnings().Count;\nTaskDialog.Show(\"Project Audit\", $\"The project has {warningCount} warnings.\");"}
{"prompt":"Mueve todos los elementos seleccionados 3 metros hacia arriba.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any())\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Move all selected elements 3 meters up.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any())\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Exporta todos los tipos de familia de la categoría 'Mobiliario' a un archivo de texto.","completion":"string path = @\"C:\\RevitExports\\FurnitureTypes.txt\";\nvar furnitureTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType();\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(path))\n{\n    writer.WriteLine(\"Tipos de Mobiliario:\");\n    foreach(Element type in furnitureTypes)\n    {\n        writer.WriteLine(type.Name);\n    }\n}"}
{"prompt":"Export all family types from the 'Furniture' category to a text file.","completion":"string path = @\"C:\\RevitExports\\FurnitureTypes.txt\";\nvar furnitureTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType();\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(path))\n{\n    writer.WriteLine(\"Furniture Types:\");\n    foreach(Element type in furnitureTypes)\n    {\n        writer.WriteLine(type.Name);\n    }\n}"}
{"prompt":"Copia todos los muros del Nivel 1 al Nivel 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif (level1 != null && level2 != null)\n{\n    var wallsToCopy = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level1.Id).ToElementIds();\n    double elevationDiff = level2.Elevation - level1.Elevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(wallsToCopy.Any()) ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n}"}
{"prompt":"Copy all walls from Level 1 to Level 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif (level1 != null && level2 != null)\n{\n    var wallsToCopy = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level1.Id).ToElementIds();\n    double elevationDiff = level2.Elevation - level1.Elevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(wallsToCopy.Any()) ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n}"}
{"prompt":"Encuentra todos los muros que miden más de 3 metros de alto.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nvar tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds();\nTaskDialog.Show(\"Resultado\", $\"Se encontraron {tallWalls.Count} muros con más de 3m de altura.\");"}
{"prompt":"Find all walls taller than 3 meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nvar tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds();\nTaskDialog.Show(\"Result\", $\"Found {tallWalls.Count} walls taller than 3m.\");"}
{"prompt":"Selecciona un muro y encuentra todas las tuberías que lo atraviesan.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nElement wall = doc.GetElement(wallRef);\nif(wall != null)\n{\n    ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n    var intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds();\n    TaskDialog.Show(\"Colisiones\", $\"El muro intersecta con {intersectingPipes.Count} tuberías.\");\n    if(intersectingPipes.Any()) uidoc.Selection.SetElementIds(intersectingPipes);\n}"}
{"prompt":"Select a wall and find all pipes passing through it.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\nElement wall = doc.GetElement(wallRef);\nif(wall != null)\n{\n    ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n    var intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds();\n    TaskDialog.Show(\"Clashes\", $\"The wall intersects with {intersectingPipes.Count} pipes.\");\n    if(intersectingPipes.Any()) uidoc.Selection.SetElementIds(intersectingPipes);\n}"}
{"prompt":"Crea una nota de texto que apunte al elemento seleccionado y diga 'REVISAR CLASH'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference targetRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\nif(targetRef != null)\n{\n    XYZ textLocation = uidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n    TextNote.Create(doc, doc.ActiveView.Id, textLocation, \"REVISAR CLASH\", TextNoteType.CreateDefault(doc).Id).AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L, targetRef.GlobalPoint);\n}"}
{"prompt":"Create a text note pointing to the selected element that says 'REVIEW CLASH'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference targetRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\nif(targetRef != null)\n{\n    XYZ textLocation = uidoc.Selection.PickPoint(\"Choose the text location\");\n    TextNote.Create(doc, doc.ActiveView.Id, \"REVIEW CLASH\", textLocation, TextNoteType.CreateDefault(doc).Id).AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L, targetRef.GlobalPoint);\n}"}
{"prompt":"Oculta todos los muros que sean más cortos de 2 metros.","completion":"double lengthThreshold = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nvar walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\nList<ElementId> shortWallIds = new List<ElementId>();\nforeach(Wall wall in walls)\n{\n    if(wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble() < lengthThreshold)\n    {\n        shortWallIds.Add(wall.Id);\n    }\n}\nif(shortWallIds.Any()) doc.ActiveView.HideElements(shortWallIds);"}
{"prompt":"Hide all walls shorter than 2 meters.","completion":"double lengthThreshold = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nvar walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\nList<ElementId> shortWallIds = new List<ElementId>();\nforeach(Wall wall in walls)\n{\n    if(wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble() < lengthThreshold)\n    {\n        shortWallIds.Add(wall.Id);\n    }\n}\nif(shortWallIds.Any()) doc.ActiveView.HideElements(shortWallIds);"}
{"prompt":"Crea una familia 'in-situ' para un mostrador de recepción personalizado usando una extrusión.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(level != null) {\n    Family fam = doc.FamilyCreate.NewFamily(new ElementId(BuiltInCategory.OST_Furniture));\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(2,1,0));\n    Extrusion solid = fam.FamilyCreate.NewExtrusion(true, new List<CurveLoop>{profile}, SketchPlane.Create(doc, level.GetPlane()), 1.0);\n    InPlaceElement.Create(doc, fam.Id, level.Id);\n}"}
{"prompt":"Create an in-place family for a custom reception desk using an extrusion.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(level != null) {\n    Family fam = doc.FamilyCreate.NewFamily(new ElementId(BuiltInCategory.OST_Furniture));\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(2,1,0));\n    Extrusion solid = fam.FamilyCreate.NewExtrusion(true, new List<CurveLoop>{profile}, SketchPlane.Create(doc, level.GetPlane()), 1.0);\n    InPlaceElement.Create(doc, fam.Id, level.Id);\n}"}
{"prompt":"Modifica el tipo de muro de un muro existente a uno que contenga 'Aislamiento Térmico'.","completion":"Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(x => x.Name.Contains(\"Aislamiento Térmico\"));\nif (wallToChange != null && newType != null) wallToChange.ChangeTypeId(newType.Id);"}
{"prompt":"Change the wall type of an existing wall to one containing 'Thermal Insulation'.","completion":"Wall wallToChange = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nWallType newType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(x => x.Name.Contains(\"Thermal Insulation\"));\nif (wallToChange != null && newType != null) wallToChange.ChangeTypeId(newType.Id);"}
{"prompt":"Crea una apertura de hueco vertical (shaft) desde el nivel base hasta el nivel más alto.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.Elevation).FirstOrDefault();\nif(bottomLevel != null && topLevel != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(2,2,0), new XYZ(5,5,0));\n    doc.Create.NewOpening(bottomLevel, topLevel, profile, true);\n}"}
{"prompt":"Create a vertical shaft opening from the base level to the top level.","completion":"Level bottomLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderBy(l => l.Elevation).FirstOrDefault();\nLevel topLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().OrderByDescending(l => l.Elevation).FirstOrDefault();\nif(bottomLevel != null && topLevel != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(2,2,0), new XYZ(5,5,0));\n    doc.Create.NewOpening(bottomLevel, topLevel, profile, true);\n}"}
{"prompt":"Obtén todos los materiales y sus volúmenes de un muro compuesto seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nWall wall = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\")) as Wall;\nif (wall != null)\n{\n    double wallArea = wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED).AsDouble();\n    CompoundStructure cs = wall.WallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        CompoundStructureLayer layer = cs.GetLayer(i);\n        Material material = doc.GetElement(layer.MaterialId) as Material;\n        if(material != null)\n        {\n            double volume = layer.Width * wallArea;\n            TaskDialog.Show(\"Material\", $\"Material: {material.Name}, Volumen aprox: {UnitUtils.ConvertFromInternalUnits(volume, UnitTypeId.CubicMeters):F2} m³\");\n        }\n    }\n}"}
{"prompt":"Get all materials and their volumes from a selected compound wall.","completion":"UIDocument uidoc = new UIDocument(doc);\nWall wall = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\")) as Wall;\nif (wall != null)\n{\n    double wallArea = wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED).AsDouble();\n    CompoundStructure cs = wall.WallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        CompoundStructureLayer layer = cs.GetLayer(i);\n        Material material = doc.GetElement(layer.MaterialId) as Material;\n        if(material != null)\n        {\n            double volume = layer.Width * wallArea;\n            TaskDialog.Show(\"Material\", $\"Material: {material.Name}, Approx. Volume: {UnitUtils.ConvertFromInternalUnits(volume, UnitTypeId.CubicMeters):F2} m³\");\n        }\n    }\n}"}
{"prompt":"Muestra un cuadro de diálogo con las opciones 'Sí', 'No' y 'Cancelar'.","completion":"TaskDialog mainDialog = new TaskDialog(\"Confirmación\");\nmainDialog.MainInstruction = \"¿Desea guardar los cambios?\";\nmainDialog.CommonButtons = TaskDialogCommonButtons.Yes | TaskDialogCommonButtons.No | TaskDialogCommonButtons.Cancel;\nTaskDialogResult result = mainDialog.Show();"}
{"prompt":"Display a dialog box with 'Yes', 'No', and 'Cancel' options.","completion":"TaskDialog mainDialog = new TaskDialog(\"Confirmation\");\nmainDialog.MainInstruction = \"Do you want to save the changes?\";\nmainDialog.CommonButtons = TaskDialogCommonButtons.Yes | TaskDialogCommonButtons.No | TaskDialogCommonButtons.Cancel;\nTaskDialogResult result = mainDialog.Show();"}
{"prompt":"Abre una familia, añade un parámetro de tipo 'Código de Material' y guárdala.","completion":"Family fam = new FilteredElementCollector(doc).OfClass(typeof(Family)).FirstOrDefault(f => f.Name == \"Mi_Mobiliario\") as Family;\nif (fam != null)\n{\n    Document famDoc = doc.EditFamily(fam);\n    using (Transaction t = new Transaction(famDoc, \"Add Parameter\"))\n    {\n        t.Start();\n        famDoc.FamilyManager.AddParameter(\"Código de Material\", BuiltInParameterGroup.PG_MATERIALS, SpecTypeId.String.Text, false);\n        t.Commit();\n    }\n    famDoc.Save();\n    famDoc.Close(true);\n}"}
{"prompt":"Open a family, add a type parameter 'Material Code', and save it.","completion":"Family fam = new FilteredElementCollector(doc).OfClass(typeof(Family)).FirstOrDefault(f => f.Name == \"My_Furniture\") as Family;\nif (fam != null)\n{\n    Document famDoc = doc.EditFamily(fam);\n    using (Transaction t = new Transaction(famDoc, \"Add Parameter\"))\n    {\n        t.Start();\n        famDoc.FamilyManager.AddParameter(\"Material Code\", BuiltInParameterGroup.PG_MATERIALS, SpecTypeId.String.Text, false);\n        t.Commit();\n    }\n    famDoc.Save();\n    famDoc.Close(true);\n}"}
{"prompt":"Encuentra todas las puertas del Nivel 2 que sean de la familia 'Puerta Sencilla'.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif(level2 != null){\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FamilyNameRule famNameRule = new FamilyNameRule(new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM)), new FilterStringEquals(), \"Puerta Sencilla\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    var doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Find all doors on Level 2 that belong to the 'Single-Flush' family.","completion":"Level level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif(level2 != null){\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level2.Id);\n    FamilyNameRule famNameRule = new FamilyNameRule(new ParameterValueProvider(new ElementId(BuiltInParameter.ELEM_FAMILY_PARAM)), new FilterStringEquals(), \"Single-Flush\");\n    ElementParameterFilter famFilter = new ElementParameterFilter(famNameRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, levelFilter, famFilter });\n    var doors = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Exporta todas las advertencias del proyecto a un archivo de texto.","completion":"string path = @\"C:\\RevitExports\\ProjectWarnings.txt\";\nIList<FailureMessage> warnings = doc.GetWarnings();\nusing (System.IO.StreamWriter writer = new System.IO.StreamWriter(path))\n{\n    foreach (FailureMessage fm in warnings)\n    {\n        writer.WriteLine(fm.GetDescriptionText());\n    }\n}"}
{"prompt":"Export all project warnings to a text file.","completion":"string path = @\"C:\\RevitExports\\ProjectWarnings.txt\";\nIList<FailureMessage> warnings = doc.GetWarnings();\nusing (System.IO.StreamWriter writer = new System.IO.StreamWriter(path))\n{\n    foreach (FailureMessage fm in warnings)\n    {\n        writer.WriteLine(fm.GetDescriptionText());\n    }\n}"}
{"prompt":"Desune la geometría de dos elementos seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar refs = uidoc.Selection.PickObjects(ObjectType.Element, \"Selecciona dos elementos para desunir\");\nif(refs.Count == 2){\n    Element e1 = doc.GetElement(refs[0]);\n    Element e2 = doc.GetElement(refs[1]);\n    if (JoinGeometryUtils.AreElementsJoined(doc, e1, e2)) JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n}"}
{"prompt":"Unjoin the geometry of two selected elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar refs = uidoc.Selection.PickObjects(ObjectType.Element, \"Select two elements to unjoin\");\nif(refs.Count == 2){\n    Element e1 = doc.GetElement(refs[0]);\n    Element e2 = doc.GetElement(refs[1]);\n    if (JoinGeometryUtils.AreElementsJoined(doc, e1, e2)) JoinGeometryUtils.UnjoinGeometry(doc, e1, e2);\n}"}
{"prompt":"Dentro del editor de familias, crea un nuevo plano de referencia horizontal.","completion":"// Este código se ejecuta en un documento de familia (doc.IsFamilyDocument == true)\nif(doc.IsFamilyDocument)\n{\n    XYZ start = new XYZ(-5, 0, 0);\n    XYZ end = new XYZ(5, 0, 0);\n    XYZ normal = XYZ.BasisY;\n    doc.FamilyCreate.NewReferencePlane(start, end, normal, doc.ActiveView);\n}"}
{"prompt":"Inside the family editor, create a new horizontal reference plane.","completion":"// This code runs in a family document (doc.IsFamilyDocument == true)\nif(doc.IsFamilyDocument)\n{\n    XYZ start = new XYZ(-5, 0, 0);\n    XYZ end = new XYZ(5, 0, 0);\n    XYZ normal = XYZ.BasisY;\n    doc.FamilyCreate.NewReferencePlane(start, end, normal, doc.ActiveView);\n}"}
{"prompt":"Aísla temporalmente la categoría de Puertas en la vista activa.","completion":"ICollection<ElementId> categoryIds = new List<ElementId> { new ElementId(BuiltInCategory.OST_Doors) };\ndoc.ActiveView.IsolateCategoriesTemporary(categoryIds);"}
{"prompt":"Temporarily isolate the Doors category in the active view.","completion":"ICollection<ElementId> categoryIds = new List<ElementId> { new ElementId(BuiltInCategory.OST_Doors) };\ndoc.ActiveView.IsolateCategoriesTemporary(categoryIds);"}
{"prompt":"Crea un componente de detalle repetitivo a lo largo de una línea.","completion":"DetailComponentType dct = new FilteredElementCollector(doc).OfClass(typeof(DetailComponentType)).FirstOrDefault() as DetailComponentType;\nif (dct != null)\n{\n    Line path = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\n    RepeatingDetailComponent.Create(doc, doc.ActiveView.Id, dct.Id, path);\n}"}
{"prompt":"Create a repeating detail component along a line.","completion":"DetailComponentType dct = new FilteredElementCollector(doc).OfClass(typeof(DetailComponentType)).FirstOrDefault() as DetailComponentType;\nif (dct != null)\n{\n    Line path = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\n    RepeatingDetailComponent.Create(doc, doc.ActiveView.Id, dct.Id, path);\n}"}
{"prompt":"Cambia el tipo de una losa seleccionada a 'Concreto 15cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\nFloor floorToChange = doc.GetElement(pickedRef) as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concreto 15cm\");\nif(floorToChange != null && newType != null) floorToChange.ChangeTypeId(newType.Id);"}
{"prompt":"Change the type of a selected floor to 'Concrete 15cm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor\");\nFloor floorToChange = doc.GetElement(pickedRef) as Floor;\nFloorType newType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Name == \"Concrete 15cm\");\nif(floorToChange != null && newType != null) floorToChange.ChangeTypeId(newType.Id);"}
{"prompt":"Añade un punto al Path of Travel seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un Path of Travel\");\nPathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\nif(pot != null){\n    IList<XYZ> points = pot.GetPoints();\n    points.Insert(1, new XYZ(5,5,0)); // Inserta un nuevo punto\n    pot.Update(points);\n}"}
{"prompt":"Add a point to the selected Path of Travel.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a Path of Travel\");\nPathOfTravel pot = doc.GetElement(pickedRef) as PathOfTravel;\nif(pot != null){\n    IList<XYZ> points = pot.GetPoints();\n    points.Insert(1, new XYZ(5,5,0)); // Insert a new point\n    pot.Update(points);\n}"}
{"prompt":"Comprueba si la vista activa es una vista de plano.","completion":"bool isPlanView = doc.ActiveView.ViewType == ViewType.FloorPlan || doc.ActiveView.ViewType == ViewType.CeilingPlan || doc.ActiveView.ViewType == ViewType.AreaPlan || doc.ActiveView.ViewType == ViewType.EngineeringPlan;\nTaskDialog.Show(\"Verificación de Vista\", \"¿Es una vista de plano? \" + isPlanView);"}
{"prompt":"Check if the active view is a plan view.","completion":"bool isPlanView = doc.ActiveView.ViewType == ViewType.FloorPlan || doc.ActiveView.ViewType == ViewType.CeilingPlan || doc.ActiveView.ViewType == ViewType.AreaPlan || doc.ActiveView.ViewType == ViewType.EngineeringPlan;\nTaskDialog.Show(\"View Check\", \"Is it a plan view? \" + isPlanView);"}
{"prompt":"Crea un nuevo tipo de tubería llamado 'Tubería de Acero' con material 'Acero, Carbono'.","completion":"PipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nif(pipeTypeToDuplicate != null){\n    PipeType newType = pipeTypeToDuplicate.Duplicate(\"Tubería de Acero\") as PipeType;\n    Material steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Acero, Carbono\") as Material;\n    if(steel != null) newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM).Set(steel.Id);\n}"}
{"prompt":"Create a new pipe type named 'Steel Pipe' with 'Steel, Carbon' material.","completion":"PipeType pipeTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(PipeType)).FirstOrDefault() as PipeType;\nif(pipeTypeToDuplicate != null){\n    PipeType newType = pipeTypeToDuplicate.Duplicate(\"Steel Pipe\") as PipeType;\n    Material steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Steel, Carbon\") as Material;\n    if(steel != null) newType.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM).Set(steel.Id);\n}"}
{"prompt":"Oculta todos los elementos seleccionados en la vista activa.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToHide = uidoc.Selection.GetElementIds();\nif(idsToHide.Any()) doc.ActiveView.HideElements(idsToHide);"}
{"prompt":"Hide all selected elements in the active view.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> idsToHide = uidoc.Selection.GetElementIds();\nif(idsToHide.Any()) doc.ActiveView.HideElements(idsToHide);"}
{"prompt":"Crea una nueva hoja A1 y coloca la vista 'Planta Baja' en ella.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A1\")) as FamilySymbol;\nView viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Planta Baja\") as View;\nif (titleBlock != null && viewToPlace != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Planta Arquitectónica - Planta Baja\";\n    newSheet.SheetNumber = \"A-101\";\n    if (Viewport.CanAddViewToSheet(doc, newSheet.Id, viewToPlace.Id))\n    {\n        BoundingBoxUV sheetBox = newSheet.get_BoundingBox(null);\n        XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n        Viewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);\n    }\n}"}
{"prompt":"Create a new A1 sheet and place the 'Ground Floor' view on it.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A1\")) as FamilySymbol;\nView viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Ground Floor\") as View;\nif (titleBlock != null && viewToPlace != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Architectural Plan - Ground Floor\";\n    newSheet.SheetNumber = \"A-101\";\n    if (Viewport.CanAddViewToSheet(doc, newSheet.Id, viewToPlace.Id))\n    {\n        BoundingBoxUV sheetBox = newSheet.get_BoundingBox(null);\n        XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n        Viewport.Create(doc, newSheet.Id, viewToPlace.Id, centerPoint);\n    }\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-60' y asigna '60 min' al parámetro 'Fire Rating'.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"Puerta RF-60\") as FamilySymbol;\n    Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n    if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"60 min\");\n}"}
{"prompt":"Create a new door type named 'FR-60 Door' and set the 'Fire Rating' parameter to '60 min'.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"FR-60 Door\") as FamilySymbol;\n    Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n    if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"60 min\");\n}"}
{"prompt":"Encuentra todos los muros que no están asociados a ningún nivel.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nvar unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToElements();\nTaskDialog.Show(\"Muros sin Nivel\", $\"Se encontraron {unassignedWalls.Count} muros sin nivel base.\");"}
{"prompt":"Find all walls that are not associated with any level.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nvar unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToElements();\nTaskDialog.Show(\"Unassigned Walls\", $\"Found {unassignedWalls.Count} walls with no base level.\");"}
{"prompt":"Crea un nuevo tipo de texto de 3mm de color azul.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"3mm Azul\") as TextNoteType;\n    newType.get_Parameter(BuiltInParameter.TEXT_SIZE).Set(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Millimeters));\n    newType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(0,0,255).GetElementId());\n}"}
{"prompt":"Create a new 3mm text type in blue color.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"3mm Blue\") as TextNoteType;\n    newType.get_Parameter(BuiltInParameter.TEXT_SIZE).Set(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Millimeters));\n    newType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(0,0,255).GetElementId());\n}"}
{"prompt":"Crea una vista de sección entre los puntos (0,0,0) y (10,10,0).","completion":"XYZ pointA = new XYZ(0,0,0); XYZ pointB = new XYZ(10,10,0);\nXYZ midPoint = (pointA + pointB) / 2;\nXYZ direction = (pointB - pointA).Normalize();\nBoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\nsectionBox.Min = new XYZ(-5, -1, 0);\nsectionBox.Max = new XYZ(5, 1, 10);\nTransform t = Transform.CreateRotationAtPoint(XYZ.BasisZ, direction.AngleOnPlaneTo(XYZ.BasisX, XYZ.BasisZ), midPoint);\nsectionBox.Transform = t;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\nViewSection.CreateSection(doc, vft.Id, sectionBox);"}
{"prompt":"Create a section view between points (0,0,0) and (10,10,0).","completion":"XYZ pointA = new XYZ(0,0,0); XYZ pointB = new XYZ(10,10,0);\nXYZ midPoint = (pointA + pointB) / 2;\nXYZ direction = (pointB - pointA).Normalize();\nBoundingBoxXYZ sectionBox = new BoundingBoxXYZ();\nsectionBox.Min = new XYZ(-5, -1, 0);\nsectionBox.Max = new XYZ(5, 1, 10);\nTransform t = Transform.CreateRotationAtPoint(XYZ.BasisZ, direction.AngleOnPlaneTo(XYZ.BasisX, XYZ.BasisZ), midPoint);\nsectionBox.Transform = t;\nViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Section);\nViewSection.CreateSection(doc, vft.Id, sectionBox);"}
{"prompt":"Aplica aislamiento térmico de 25mm a todas las tuberías de agua caliente.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\nif(insulationType != null && hotWaterSystem != null){\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == hotWaterSystem.Id);\n    foreach(Pipe p in pipes) PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Millimeters));\n}"}
{"prompt":"Apply 25mm thermal insulation to all hot water pipes.","completion":"PipeInsulationType insulationType = new FilteredElementCollector(doc).OfClass(typeof(PipeInsulationType)).FirstOrDefault() as PipeInsulationType;\nPipingSystemType hotWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.Name.Contains(\"Hot Water\"));\nif(insulationType != null && hotWaterSystem != null){\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == hotWaterSystem.Id);\n    foreach(Pipe p in pipes) PipeInsulation.Create(doc, p.Id, insulationType.Id, UnitUtils.ConvertToInternalUnits(25, UnitTypeId.Millimeters));\n}"}
{"prompt":"Genera sombras en la vista 3D para el solsticio de verano al mediodía.","completion":"View3D view3d = new FilteredElementCollector(doc).OfClass(typeof(View3D)).FirstOrDefault(v => !v.IsTemplate) as View3D;\nif(view3d != null && view3d.CanEnableSunAndShadows()){\n    SunAndShadowSettings sunSettings = view3d.SunAndShadowSettings;\n    sunSettings.SunAndShadowType = SunAndShadowType.Still;\n    sunSettings.SetTimeAndDate(new DateTime(DateTime.Now.Year, 6, 21, 12, 0, 0));\n    view3d.ShadowsOn = true;\n}"}
{"prompt":"Generate shadows in the 3D view for the summer solstice at noon.","completion":"View3D view3d = new FilteredElementCollector(doc).OfClass(typeof(View3D)).FirstOrDefault(v => !v.IsTemplate) as View3D;\nif(view3d != null && view3d.CanEnableSunAndShadows()){\n    SunAndShadowSettings sunSettings = view3d.SunAndShadowSettings;\n    sunSettings.SunAndShadowType = SunAndShadowType.Still;\n    sunSettings.SetTimeAndDate(new DateTime(DateTime.Now.Year, 6, 21, 12, 0, 0));\n    view3d.ShadowsOn = true;\n}"}
{"prompt":"Crea un suelo con un hueco circular en el centro.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nif(level != null && floorType != null){\n    CurveLoop outerLoop = CurveLoop.CreateViaRectangle(new XYZ(-10,-10,0), new XYZ(10,10,0));\n    CurveLoop innerLoop = CurveLoop.Create(new List<Curve> { Arc.Create(new XYZ(-2,0,0), new XYZ(2,0,0), new XYZ(0,2,0)), Arc.Create(new XYZ(-2,0,0), new XYZ(2,0,0), new XYZ(0,-2,0)) });\n    Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n}"}
{"prompt":"Create a floor with a circular hole in the center.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nif(level != null && floorType != null){\n    CurveLoop outerLoop = CurveLoop.CreateViaRectangle(new XYZ(-10,-10,0), new XYZ(10,10,0));\n    CurveLoop innerLoop = CurveLoop.Create(new List<Curve> { Arc.Create(new XYZ(-2,0,0), new XYZ(2,0,0), new XYZ(0,2,0)), Arc.Create(new XYZ(-2,0,0), new XYZ(2,0,0), new XYZ(0,-2,0)) });\n    Floor.Create(doc, new List<CurveLoop> { outerLoop, innerLoop }, floorType.Id, level.Id);\n}"}
{"prompt":"Oculta todas las categorías de anotación en la vista activa.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Annotation && cat.AllowsVisibilityControl[doc.ActiveView])\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Hide all annotation categories in the active view.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Annotation && cat.AllowsVisibilityControl[doc.ActiveView])\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Encuentra todas las vistas que no tienen una plantilla de vista asignada.","completion":"var viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId).ToList();\nTaskDialog.Show(\"Vistas sin Plantilla\", $\"Hay {viewsWithoutTemplate.Count} vistas sin plantilla asignada.\");"}
{"prompt":"Find all views that do not have an assigned view template.","completion":"var viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.IsTemplate == false && v.CanBePrinted() && v.ViewTemplateId == ElementId.InvalidElementId).ToList();\nTaskDialog.Show(\"Views without Template\", $\"There are {viewsWithoutTemplate.Count} views without an assigned template.\");"}
{"prompt":"Establece el parámetro 'Marca' de todos los muros seleccionados a 'M-EXT-01'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any())\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall)\n        {\n            elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK)?.Set(\"M-EXT-01\");\n        }\n    }\n}"}
{"prompt":"Set the 'Mark' parameter of all selected walls to 'W-EXT-01'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any())\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall)\n        {\n            elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK)?.Set(\"W-EXT-01\");\n        }\n    }\n}"}
{"prompt":"Crea 5 worksets para las disciplinas de ingeniería.","completion":"if(doc.IsWorkshared)\n{\n    var worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\n    foreach(string name in worksetNames)\n    {\n        Workset.Create(doc, name);\n    }\n}"}
{"prompt":"Create 5 worksets for engineering disciplines.","completion":"if(doc.IsWorkshared)\n{\n    var worksetNames = new List<string> { \"MEP_HVAC\", \"MEP_Plumbing\", \"MEP_Electrical\", \"STRUCT_Framing\", \"STRUCT_Foundations\" };\n    foreach(string name in worksetNames)\n    {\n        Workset.Create(doc, name);\n    }\n}"}
{"prompt":"Encuentra todas las familias de anotación y muestra sus nombres.","completion":"var annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory?.CategoryType == CategoryType.Annotation);\nStringBuilder sb = new StringBuilder(\"Familias de Anotación:\\n\");\nforeach(var fam in annotationFamilies)\n{\n    sb.AppendLine(fam.Name);\n}\nTaskDialog.Show(\"Familias de Anotación\", sb.ToString());"}
{"prompt":"Find all annotation families and display their names.","completion":"var annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory?.CategoryType == CategoryType.Annotation);\nStringBuilder sb = new StringBuilder(\"Annotation Families:\\n\");\nforeach(var fam in annotationFamilies)\n{\n    sb.AppendLine(fam.Name);\n}\nTaskDialog.Show(\"Annotation Families\", sb.ToString());"}
{"prompt":"Ajusta todas las ventanas para que tengan la altura del antepecho a 900mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters);\nvar windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Set the sill height of all windows to 900mm.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(900, UnitTypeId.Millimeters);\nvar windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Exporta todas las vistas 3D que empiezan con 'Coord' a imágenes PNG.","completion":"var viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\"));\nImageExportOptions options = new ImageExportOptions() { FilePath = @\"C:\\Exports\\\", ImageFileType = ImageFileType.PNG, ZoomType = ZoomFitType.FitToPage };\nforeach(View3D view in viewsToExport)\n{\n    options.ExportRange = ExportRange.SetOfViews;\n    options.SetViews(new List<ElementId>{ view.Id });\n    doc.ExportImage(options);\n}"}
{"prompt":"Export all 3D views starting with 'Coord' to PNG images.","completion":"var viewsToExport = new FilteredElementCollector(doc).OfClass(typeof(View3D)).Cast<View3D>().Where(v => v.Name.StartsWith(\"Coord\"));\nImageExportOptions options = new ImageExportOptions() { FilePath = @\"C:\\Exports\\\", ImageFileType = ImageFileType.PNG, ZoomType = ZoomFitType.FitToPage };\nforeach(View3D view in viewsToExport)\n{\n    options.ExportRange = ExportRange.SetOfViews;\n    options.SetViews(new List<ElementId>{ view.Id });\n    doc.ExportImage(options);\n}"}
{"prompt":"Crea una viga estructural entre (0,0,3) y (5,0,3) en el Nivel 2.","completion":"XYZ start = new XYZ(0, 0, 0);\nXYZ end = new XYZ(5, 0, 0);\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nif(beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Create a structural beam between (0,0,3) and (5,0,3) on Level 2.","completion":"XYZ start = new XYZ(0, 0, 0);\nXYZ end = new XYZ(5, 0, 0);\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nif(beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Crea un nuevo parámetro de proyecto compartido de texto llamado 'Notas Adicionales' para muros y puertas.","completion":"string paramName = \"Notas Adicionales\";\nCategorySet categories = doc.Application.Create.NewCategorySet();\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\nstring sharedParamsFilePath = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamsFilePath) || !System.IO.File.Exists(sharedParamsFilePath)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\RevitSharedParameters.txt\"; System.IO.File.Create(sharedParamsFilePath).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup defGroup = defFile.Groups.EnsureDefinitionGroup(\"General\");\nExternalDefinition def = defGroup.Definitions.Create(new ExternalDefinitionCreationOptions(paramName, SpecTypeId.String.Text)) as ExternalDefinition;\ndoc.ParameterBindings.Insert(doc.Application.Create.NewInstanceBinding(categories), def, BuiltInParameterGroup.PG_DATA);"}
{"prompt":"Create a new shared text project parameter named 'Additional Notes' for walls and doors.","completion":"string paramName = \"Additional Notes\";\nCategorySet categories = doc.Application.Create.NewCategorySet();\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\nstring sharedParamsFilePath = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamsFilePath) || !System.IO.File.Exists(sharedParamsFilePath)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\RevitSharedParameters.txt\"; System.IO.File.Create(sharedParamsFilePath).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup defGroup = defFile.Groups.EnsureDefinitionGroup(\"General\");\nExternalDefinition def = defGroup.Definitions.Create(new ExternalDefinitionCreationOptions(paramName, SpecTypeId.String.Text)) as ExternalDefinition;\ndoc.ParameterBindings.Insert(doc.Application.Create.NewInstanceBinding(categories), def, BuiltInParameterGroup.PG_DATA);"}
{"prompt":"Crea un nivel 'Roof Terrace' a 15m.","completion":"if(!new FilteredElementCollector(doc).OfClass(typeof(Level)).Any(l => l.Name == \"Roof Terrace\"))\n{\n    double elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\n    Level.Create(doc, elev).Name = \"Roof Terrace\";\n}"}
{"prompt":"Create a 'Roof Terrace' level at 15m.","completion":"if(!new FilteredElementCollector(doc).OfClass(typeof(Level)).Any(l => l.Name == \"Roof Terrace\"))\n{\n    double elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\n    Level.Create(doc, elev).Name = \"Roof Terrace\";\n}"}
{"prompt":"Coloca postes de iluminación cada 10m en un camino de 100m.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Place lighting posts every 10m along a 100m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Genera una cuadrícula de columnas 5x5 con separación de 8 metros.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Generate a 5x5 column grid with 8-meter spacing.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Crea una habitación circular con un radio de 5 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Arc.Create(XYZ.Zero, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY));\n    RoomSeparationLine.Create(doc, profile, doc.ActiveView.SketchPlane.Id, doc.ActiveView);\n    doc.Create.NewRoom(level, new UV(0,0));\n}"}
{"prompt":"Create a circular room with a 5-meter radius.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Arc.Create(XYZ.Zero, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY));\n    RoomSeparationLine.Create(doc, profile, doc.ActiveView.SketchPlane.Id, doc.ActiveView);\n    doc.Create.NewRoom(level, new UV(0,0));\n}"}
{"prompt":"Importa topografía georreferenciada desde un archivo LandXML.","completion":"LandXMLImportOptions options = new LandXMLImportOptions();\noptions.XYLengthUnit = XYLengthUnit.Meter;\ndoc.Import(@\"C:\\CAD\\site.xml\", options);"}
{"prompt":"Import a georeferenced survey from a LandXML file.","completion":"LandXMLImportOptions options = new LandXMLImportOptions();\noptions.XYLengthUnit = XYLengthUnit.Meter;\ndoc.Import(@\"C:\\CAD\\site.xml\", options);"}
{"prompt":"Crea una vista de plano de plafón reflejado para el Nivel 1.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    rcp.Name = \"Plano de Plafón Nivel 1\";\n}"}
{"prompt":"Create a Reflected Ceiling Plan view for Level 1.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    rcp.Name = \"Level 1 Ceiling Plan\";\n}"}
{"prompt":"Añade un plano de referencia horizontal llamado 'Eje Central A'.","completion":"ReferencePlane rp = ReferencePlane.Create(doc, XYZ.Zero, XYZ.BasisX, XYZ.BasisZ, doc.ActiveView);\nrp.Name = \"Eje Central A\";"}
{"prompt":"Add a horizontal reference plane named 'Centerline A'.","completion":"ReferencePlane rp = ReferencePlane.Create(doc, XYZ.Zero, XYZ.BasisX, XYZ.BasisZ, doc.ActiveView);\nrp.Name = \"Centerline A\";"}
{"prompt":"Duplica el nivel 1 con un desfase de 3m y llámalo 'Mezanine'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(level1 != null)\n{\n    double newElevation = level1.Elevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Duplicate level 1 with a 3m offset and name it 'Mezzanine'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(level1 != null)\n{\n    double newElevation = level1.Elevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Etiqueta todas las habitaciones con su área.","completion":"var rooms = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType();\nforeach(Room room in rooms)\n{\n    if(room.Location != null)\n    {\n        doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(room.Location.Point.X, room.Location.Point.Y), doc.ActiveView.Id);\n    }\n}"}
{"prompt":"Tag all rooms with their area.","completion":"var rooms = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType();\nforeach(Room room in rooms)\n{\n    if(room.Location != null)\n    {\n        doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(room.Location.Point.X, room.Location.Point.Y), doc.ActiveView.Id);\n    }\n}"}
{"prompt":"Exporta una lista de materiales a un archivo de texto.","completion":"var materials = new FilteredElementCollector(doc).OfClass(typeof(Material));\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(\"C:\\\\Exports\\\\materials.txt\"))\n{\n    writer.WriteLine(\"Nombre del Material\");\n    foreach(Material m in materials)\n    {\n        writer.WriteLine(m.Name);\n    }\n}"}
{"prompt":"Export a list of materials to a text file.","completion":"var materials = new FilteredElementCollector(doc).OfClass(typeof(Material));\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(\"C:\\\\Exports\\\\materials.txt\"))\n{\n    writer.WriteLine(\"Material Name\");\n    foreach(Material m in materials)\n    {\n        writer.WriteLine(m.Name);\n    }\n}"}
{"prompt":"Aísla temporalmente todo el mobiliario en la vista activa.","completion":"var furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nif(furnitureIds.Any())\n{\n    doc.ActiveView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Temporarily isolate all furniture in the active view.","completion":"var furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nif(furnitureIds.Any())\n{\n    doc.ActiveView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Coloca un ducto redondo de 200mm de diámetro.","completion":"DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).FirstOrDefault(dt => dt.Shape == ConnectorProfileType.Round) as DuctType;\nMEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(st => st.SystemClassification == MEPSystemClassification.SupplyAir);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(ductType != null && systemType != null && level != null)\n{\n    Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, new XYZ(0,0,3), new XYZ(10,0,3));\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(200, UnitTypeId.Millimeters));\n}"}
{"prompt":"Place a 200mm diameter round duct.","completion":"DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).FirstOrDefault(dt => dt.Shape == ConnectorProfileType.Round) as DuctType;\nMEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(st => st.SystemClassification == MEPSystemClassification.SupplyAir);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(ductType != null && systemType != null && level != null)\n{\n    Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, new XYZ(0,0,3), new XYZ(10,0,3));\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(200, UnitTypeId.Millimeters));\n}"}
{"prompt":"Crea un suelo con un contorno definido por el usuario.","completion":"UIDocument uidoc = new UIDocument(doc);\nIList<Reference> pickedRefs = uidoc.Selection.PickObjects(ObjectType.Element, \"Selecciona las líneas de contorno\");\nCurveLoop profile = new CurveLoop();\nforeach(Reference r in pickedRefs)\n{\n    ModelCurve mc = doc.GetElement(r) as ModelCurve;\n    if(mc != null) profile.Append(mc.GeometryCurve);\n}\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nLevel level = doc.ActiveView.GenLevel;\nif(floorType != null && level != null && profile.IsOpen() == false)\n{\n    Floor.Create(doc, new List<CurveLoop>{profile}, floorType.Id, level.Id);\n}"}
{"prompt":"Create a floor with a user-defined boundary.","completion":"UIDocument uidoc = new UIDocument(doc);\nIList<Reference> pickedRefs = uidoc.Selection.PickObjects(ObjectType.Element, \"Select the boundary lines\");\nCurveLoop profile = new CurveLoop();\nforeach(Reference r in pickedRefs)\n{\n    ModelCurve mc = doc.GetElement(r) as ModelCurve;\n    if(mc != null) profile.Append(mc.GeometryCurve);\n}\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nLevel level = doc.ActiveView.GenLevel;\nif(floorType != null && level != null && profile.IsOpen() == false)\n{\n    Floor.Create(doc, new List<CurveLoop>{profile}, floorType.Id, level.Id);\n}"}
{"prompt":"Encuentra todos los elementos dentro de la habitación 'Sala de Juntas'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Sala de Juntas\") as Room;\nif(room != null)\n{\n    BoundingBoxXYZ roomBbox = room.get_BoundingBox(null);\n    Outline roomOutline = new Outline(roomBbox.Min, roomBbox.Max);\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(roomOutline);\n    var elementsInRoom = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Find all elements inside the 'Conference Room'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Conference Room\") as Room;\nif(room != null)\n{\n    BoundingBoxXYZ roomBbox = room.get_BoundingBox(null);\n    Outline roomOutline = new Outline(roomBbox.Min, roomBbox.Max);\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(roomOutline);\n    var elementsInRoom = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Exporta todos los muros con un parámetro de Marca a un archivo CSV.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(System.IO.StreamWriter sw = new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"ElementId,Mark\");\n  foreach(var w in walls){\n    Parameter p=w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n    if(p!=null && p.HasValue) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Export all walls with a Mark parameter to a CSV file.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(System.IO.StreamWriter sw = new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"ElementId,Mark\");\n  foreach(var w in walls){\n    Parameter p=w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n    if(p!=null && p.HasValue) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Crea un nuevo tipo de muro 'Muro Genérico 300mm' con un grosor de 30cm.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Muro Genérico 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Create a new wall type 'Generic Wall 300mm' with a thickness of 30cm.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Generic Wall 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Change the type of all selected walls to 'Exterior Wall'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Exterior Wall\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Renombrar el Nivel 'Nivel 1' a 'Planta Baja'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nif(levelToRename != null) levelToRename.Name = \"Planta Baja\";"}
{"prompt":"Rename the 'Level 1' level to 'Ground Floor'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nif(levelToRename != null) levelToRename.Name = \"Ground Floor\";"}
{"prompt":"Crea un pilar estructural de 300x300mm en la coordenada (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Create a 300x300mm structural column at coordinate (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Alinea todos los muros seleccionados con el eje '1'.","completion":"UIDocument uidoc = new UIDocument(doc);\nGrid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nvar selectedWalls = uidoc.Selection.GetElementIds().Select(id => doc.GetElement(id) as Wall).Where(w => w != null);\nif(targetGrid != null)\n{\n    foreach(Wall wall in selectedWalls)\n    {\n        // Simplificación: Mueve el inicio del muro al eje. Una implementación real necesitaría más lógica.\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null) ElementTransformUtils.MoveElement(doc, wall.Id, targetGrid.Curve.Project(lc.Curve.GetEndPoint(0)).XYZPoint - lc.Curve.GetEndPoint(0));\n    }\n}"}
{"prompt":"Align all selected walls with grid '1'.","completion":"UIDocument uidoc = new UIDocument(doc);\nGrid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nvar selectedWalls = uidoc.Selection.GetElementIds().Select(id => doc.GetElement(id) as Wall).Where(w => w != null);\nif(targetGrid != null)\n{\n    foreach(Wall wall in selectedWalls)\n    {\n        // Simplification: Moves the wall start point to the grid. A real implementation would need more logic.\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null) ElementTransformUtils.MoveElement(doc, wall.Id, targetGrid.Curve.Project(lc.Curve.GetEndPoint(0)).XYZPoint - lc.Curve.GetEndPoint(0));\n    }\n}"}
{"prompt":"Aplica el material 'Hormigón' a todos los suelos del proyecto.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Hormigón\"));\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        // Asigna el material a la estructura del tipo de suelo\n        CompoundStructure cs = floor.FloorType.GetCompoundStructure();\n        cs.SetMaterialId(cs.GetFirstCoreLayerIndex(), concreteMaterial.Id);\n        floor.FloorType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Apply the 'Concrete' material to all floors in the project.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concrete\"));\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        // Assigns the material to the floor type's structure\n        CompoundStructure cs = floor.FloorType.GetCompoundStructure();\n        cs.SetMaterialId(cs.GetFirstCoreLayerIndex(), concreteMaterial.Id);\n        floor.FloorType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Borra todos los grupos de anotación del modelo.","completion":"var annotationGroups = new FilteredElementCollector(doc).OfClass(typeof(Group)).Cast<Group>().Where(g => g.Category.CategoryType == CategoryType.Annotation).Select(g => g.Id).ToList();\nif(annotationGroups.Any())\n{\n    doc.Delete(annotationGroups);\n}"}
{"prompt":"Delete all annotation groups from the model.","completion":"var annotationGroups = new FilteredElementCollector(doc).OfClass(typeof(Group)).Cast<Group>().Where(g => g.Category.CategoryType == CategoryType.Annotation).Select(g => g.Id).ToList();\nif(annotationGroups.Any())\n{\n    doc.Delete(annotationGroups);\n}"}
{"prompt":"Obtén la geometría sólida de un pilar seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un pilar\");\nElement elem = doc.GetElement(pickedRef);\nif(elem != null && (elem.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralColumns || elem.Category.Id.IntegerValue == (int)BuiltInCategory.OST_Columns)){\n    Options opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\n    GeometryElement geoElem = elem.get_Geometry(opt);\n    Solid solid = geoElem.OfType<Solid>().FirstOrDefault(s => s.Volume > 0);\n}"}
{"prompt":"Get the solid geometry of a selected column.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a column\");\nElement elem = doc.GetElement(pickedRef);\nif(elem != null && (elem.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralColumns || elem.Category.Id.IntegerValue == (int)BuiltInCategory.OST_Columns)){\n    Options opt = new Options() { ComputeReferences = true, DetailLevel = ViewDetailLevel.Fine };\n    GeometryElement geoElem = elem.get_Geometry(opt);\n    Solid solid = geoElem.OfType<Solid>().FirstOrDefault(s => s.Volume > 0);\n}"}
{"prompt":"Crea una dimensión alineada entre dos muros paralelos.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el primer muro\");\nReference r2 = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el segundo muro\");\nWall w1 = doc.GetElement(r1) as Wall;\nWall w2 = doc.GetElement(r2) as Wall;\nif (w1 != null && w2 != null)\n{\n    Line l1 = (w1.Location as LocationCurve).Curve as Line;\n    Line l2 = (w2.Location as LocationCurve).Curve as Line;\n    if (l1.Direction.IsAlmostEqualTo(l2.Direction) || l1.Direction.IsAlmostEqualTo(l2.Direction.Negate()))\n    {\n        ReferenceArray refs = new ReferenceArray();\n        refs.Append(r1);\n        refs.Append(r2);\n        Line dimLine = Line.CreateBound(l1.GetEndPoint(0), l2.GetEndPoint(0));\n        doc.Create.NewDimension(doc.ActiveView, dimLine, refs);\n    }\n}"}
{"prompt":"Create an aligned dimension between two parallel walls.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference r1 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the first wall\");\nReference r2 = uidoc.Selection.PickObject(ObjectType.Element, \"Select the second wall\");\nWall w1 = doc.GetElement(r1) as Wall;\nWall w2 = doc.GetElement(r2) as Wall;\nif (w1 != null && w2 != null)\n{\n    Line l1 = (w1.Location as LocationCurve).Curve as Line;\n    Line l2 = (w2.Location as LocationCurve).Curve as Line;\n    if (l1.Direction.IsAlmostEqualTo(l2.Direction) || l1.Direction.IsAlmostEqualTo(l2.Direction.Negate()))\n    {\n        ReferenceArray refs = new ReferenceArray();\n        refs.Append(r1);\n        refs.Append(r2);\n        Line dimLine = Line.CreateBound(l1.GetEndPoint(0), l2.GetEndPoint(0));\n        doc.Create.NewDimension(doc.ActiveView, dimLine, refs);\n    }\n}"}
{"prompt":"Asigna todos los muros seleccionados para ser demolidos en la 'Fase de Demolición'.","completion":"Phase demoPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).FirstOrDefault(p => p.Name.Contains(\"Demolición\")) as Phase;\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(demoPhase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = demoPhase.Id;\n    }\n}"}
{"prompt":"Assign all selected walls to be demolished in the 'Demolition Phase'.","completion":"Phase demoPhase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).FirstOrDefault(p => p.Name.Contains(\"Demolition\")) as Phase;\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(demoPhase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = demoPhase.Id;\n    }\n}"}
{"prompt":"Obtén el anfitrión de una luminaria seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una luminaria\");\nFamilyInstance fixture = doc.GetElement(pickedRef) as FamilyInstance;\nif(fixture != null && fixture.Host != null){\n    Element host = fixture.Host;\n    TaskDialog.Show(\"Anfitrión\", \"El anfitrión es: \" + host.Name);\n}"}
{"prompt":"Get the host of a selected light fixture.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a light fixture\");\nFamilyInstance fixture = doc.GetElement(pickedRef) as FamilyInstance;\nif(fixture != null && fixture.Host != null){\n    Element host = fixture.Host;\n    TaskDialog.Show(\"Host\", \"The host is: \" + host.Name);\n}"}
{"prompt":"Crea un nuevo tipo de rejilla con color de línea azul.","completion":"GridType gridType = new FilteredElementCollector(doc).OfClass(typeof(GridType)).FirstOrDefault() as GridType;\nif(gridType != null)\n{\n    GridType newGridType = gridType.Duplicate(\"Eje Azul\") as GridType;\n    newGridType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(0, 0, 255).GetElementId());\n}"}
{"prompt":"Create a new grid type with a blue line color.","completion":"GridType gridType = new FilteredElementCollector(doc).OfClass(typeof(GridType)).FirstOrDefault() as GridType;\nif(gridType != null)\n{\n    GridType newGridType = gridType.Duplicate(\"Blue Grid\") as GridType;\n    newGridType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(0, 0, 255).GetElementId());\n}"}
{"prompt":"Calcula el volumen total de hormigón en todos los pilares estructurales.","completion":"double totalVolume = 0.0;\nvar columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType();\nforeach(Element col in columns)\n{\n    totalVolume += col.get_Parameter(BuiltInParameter.HOST_VOLUME_COMPUTED).AsDouble();\n}\nTaskDialog.Show(\"Volumen de Hormigón\", $\"Volumen total en pilares: {UnitUtils.ConvertFromInternalUnits(totalVolume, UnitTypeId.CubicMeters):F2} m³\");"}
{"prompt":"Calculate the total concrete volume in all structural columns.","completion":"double totalVolume = 0.0;\nvar columns = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsNotElementType();\nforeach(Element col in columns)\n{\n    totalVolume += col.get_Parameter(BuiltInParameter.HOST_VOLUME_COMPUTED).AsDouble();\n}\nTaskDialog.Show(\"Concrete Volume\", $\"Total volume in columns: {UnitUtils.ConvertFromInternalUnits(totalVolume, UnitTypeId.CubicMeters):F2} m³\");"}
{"prompt":"Aplica un desfase de 30cm desde el nivel a todos los suelos seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()){\n    double offset = UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters);\n    foreach(ElementId id in selectedIds){\n        Floor floor = doc.GetElement(id) as Floor;\n        if(floor != null) floor.get_Parameter(BuiltInParameter.FLOOR_HEIGHTABOVELEVEL_PARAM)?.Set(offset);\n    }\n}"}
{"prompt":"Apply a 30cm offset from the level to all selected floors.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()){\n    double offset = UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters);\n    foreach(ElementId id in selectedIds){\n        Floor floor = doc.GetElement(id) as Floor;\n        if(floor != null) floor.get_Parameter(BuiltInParameter.FLOOR_HEIGHTABOVELEVEL_PARAM)?.Set(offset);\n    }\n}"}
{"prompt":"Crea una opción de diseño principal llamada 'Alternativa Fachada'.","completion":"if(doc.IsWorkshared == false) {\n    DesignOptionSet optionSet = DesignOptionSet.Create(doc, \"Conjunto Fachada\");\n    DesignOption.Create(doc, \"Alternativa Fachada\", optionSet.Id);\n}"}
{"prompt":"Create a main design option named 'Facade Alternative'.","completion":"if(doc.IsWorkshared == false) {\n    DesignOptionSet optionSet = DesignOptionSet.Create(doc, \"Facade Set\");\n    DesignOption.Create(doc, \"Facade Alternative\", optionSet.Id);\n}"}
{"prompt":"Crea una vista de leyenda para tipos de muro.","completion":"ViewFamilyType legendVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Legend);\nif (legendVFT != null)\n{\n    ViewLegend legendView = ViewLegend.Create(doc, legendVFT.Id);\n    legendView.Name = \"Leyenda de Tipos de Muro\";\n    var wallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElements();\n    double y_coord = 0.0;\n    foreach(WallType wt in wallTypes)\n    {\n        LegendComponent.Create(doc, legendView.Id, wt.Id, new XYZ(2, y_coord, 0));\n        TextNote.Create(doc, legendView.Id, new XYZ(0, y_coord, 0), wt.Name, TextNoteType.CreateDefault(doc).Id);\n        y_coord -= 5.0;\n    }\n}"}
{"prompt":"Create a legend view for wall types.","completion":"ViewFamilyType legendVFT = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Legend);\nif (legendVFT != null)\n{\n    ViewLegend legendView = ViewLegend.Create(doc, legendVFT.Id);\n    legendView.Name = \"Wall Type Legend\";\n    var wallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElements();\n    double y_coord = 0.0;\n    foreach(WallType wt in wallTypes)\n    {\n        LegendComponent.Create(doc, legendView.Id, wt.Id, new XYZ(2, y_coord, 0));\n        TextNote.Create(doc, legendView.Id, new XYZ(0, y_coord, 0), wt.Name, TextNoteType.CreateDefault(doc).Id);\n        y_coord -= 5.0;\n    }\n}"}
{"prompt":"Rota la vista activa 45 grados.","completion":"View activeView = doc.ActiveView;\nif(activeView.CanModifyOrientation() && activeView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED) != null)\n{\n    double currentRotation = activeView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble();\n    activeView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(currentRotation + Math.PI / 4.0);\n}"}
{"prompt":"Rotate the active view by 45 degrees.","completion":"View activeView = doc.ActiveView;\nif(activeView.CanModifyOrientation() && activeView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED) != null)\n{\n    double currentRotation = activeView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble();\n    activeView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(currentRotation + Math.PI / 4.0);\n}"}
{"prompt":"Crea una vista de detalle (callout) rectangular.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    BoundingBoxXYZ calloutBox = new BoundingBoxXYZ() { Min = new XYZ(0,0,0), Max = new XYZ(5,5,0) };\n    ViewSection.CreateCallout(doc, planView.Id, new ElementId(BuiltInCategory.OST_ViewSystem), calloutBox.Min, calloutBox.Max);\n}"}
{"prompt":"Create a rectangular callout view.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    BoundingBoxXYZ calloutBox = new BoundingBoxXYZ() { Min = new XYZ(0,0,0), Max = new XYZ(5,5,0) };\n    ViewSection.CreateCallout(doc, planView.Id, new ElementId(BuiltInCategory.OST_ViewSystem), calloutBox.Min, calloutBox.Max);\n}"}
{"prompt":"Añade las luminarias seleccionadas al primer circuito eléctrico disponible.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedFixtures = uidoc.Selection.GetElementIds();\nElectricalSystem circuit = new FilteredElementCollector(doc).OfClass(typeof(ElectricalSystem)).FirstOrDefault() as ElectricalSystem;\nif(circuit != null && selectedFixtures.Any()){\n    circuit.Add(selectedFixtures);\n}"}
{"prompt":"Add the selected light fixtures to the first available electrical circuit.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedFixtures = uidoc.Selection.GetElementIds();\nElectricalSystem circuit = new FilteredElementCollector(doc).OfClass(typeof(ElectricalSystem)).FirstOrDefault() as ElectricalSystem;\nif(circuit != null && selectedFixtures.Any()){\n    circuit.Add(selectedFixtures);\n}"}
{"prompt":"Resuelve la primera advertencia del proyecto eliminando los elementos.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();\nif(warnings.Count > 0){\n    FailureMessage firstWarning = warnings[0];\n    ICollection<ElementId> failingElements = firstWarning.GetFailingElements();\n    if(failingElements.Any()){\n        doc.Delete(failingElements);\n        TaskDialog.Show(\"Advertencia Resuelta\", \"Se eliminaron los elementos de la primera advertencia.\");\n    }\n}"}
{"prompt":"Resolve the first project warning by deleting the elements.","completion":"IList<FailureMessage> warnings = doc.GetWarnings();\nif(warnings.Count > 0){\n    FailureMessage firstWarning = warnings[0];\n    ICollection<ElementId> failingElements = firstWarning.GetFailingElements();\n    if(failingElements.Any()){\n        doc.Delete(failingElements);\n        TaskDialog.Show(\"Warning Resolved\", \"Deleted the elements from the first warning.\");\n    }\n}"}
{"prompt":"Crea una nueva hoja A0 y coloca la vista 'Vista 3D General' en ella.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A0\")) as FamilySymbol;\nView viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(View3D)).FirstOrDefault(v => v.Name == \"Vista 3D General\") as View;\nif (titleBlock != null && viewToPlace != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Perspectiva General\";\n    newSheet.SheetNumber = \"G-001\";\n    if (Viewport.CanAddViewToSheet(doc, newSheet.Id, viewToPlace.Id))\n    {\n        Viewport.Create(doc, newSheet.Id, viewToPlace.Id, new XYZ(0.5, 0.5, 0));\n    }\n}"}
{"prompt":"Create a new A0 sheet and place the 'General 3D View' on it.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A0\")) as FamilySymbol;\nView viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(View3D)).FirstOrDefault(v => v.Name == \"General 3D View\") as View;\nif (titleBlock != null && viewToPlace != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"General Perspective\";\n    newSheet.SheetNumber = \"G-001\";\n    if (Viewport.CanAddViewToSheet(doc, newSheet.Id, viewToPlace.Id))\n    {\n        Viewport.Create(doc, newSheet.Id, viewToPlace.Id, new XYZ(0.5, 0.5, 0));\n    }\n}"}
{"prompt":"Cambia el grosor de la capa núcleo de un tipo de muro a 200mm.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(wallType != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    int coreIndex = cs.GetFirstCoreLayerIndex();\n    if(coreIndex != -1) cs.SetLayerWidth(coreIndex, UnitUtils.ConvertToInternalUnits(200, UnitTypeId.Millimeters));\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Change the core layer thickness of a wall type to 200mm.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(wallType != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    int coreIndex = cs.GetFirstCoreLayerIndex();\n    if(coreIndex != -1) cs.SetLayerWidth(coreIndex, UnitUtils.ConvertToInternalUnits(200, UnitTypeId.Millimeters));\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Obtén todos los muros de un modelo de Revit vinculado.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    var linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WhereElementIsNotElementType().ToList();\n}"}
{"prompt":"Get all walls from a linked Revit model.","completion":"RevitLinkInstance linkInstance = new FilteredElementCollector(doc).OfClass(typeof(RevitLinkInstance)).FirstOrDefault() as RevitLinkInstance;\nif (linkInstance != null)\n{\n    Document linkDoc = linkInstance.GetLinkDocument();\n    var linkedWalls = new FilteredElementCollector(linkDoc).OfClass(typeof(Wall)).WhereElementIsNotElementType().ToList();\n}"}
{"prompt":"Aplica un color de relleno sólido rojo a todos los muros en la vista activa.","completion":"View activeView = doc.ActiveView;\nFillPatternElement solidFill = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.GetFillPattern().IsSolidFill) as FillPatternElement;\nif(solidFill != null){\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetSurfaceForegroundPatternId(solidFill.Id);\n    ogs.SetSurfaceForegroundPatternColor(new Color(255, 0, 0));\n    activeView.SetCategoryOverrides(new ElementId(BuiltInCategory.OST_Walls), ogs);\n}"}
{"prompt":"Apply a red solid fill color to all walls in the active view.","completion":"View activeView = doc.ActiveView;\nFillPatternElement solidFill = new FilteredElementCollector(doc).OfClass(typeof(FillPatternElement)).FirstOrDefault(p => p.GetFillPattern().IsSolidFill) as FillPatternElement;\nif(solidFill != null){\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetSurfaceForegroundPatternId(solidFill.Id);\n    ogs.SetSurfaceForegroundPatternColor(new Color(255, 0, 0));\n    activeView.SetCategoryOverrides(new ElementId(BuiltInCategory.OST_Walls), ogs);\n}"}
{"prompt":"Exporta todos los elementos con la marca 'Revisar' a un archivo de texto.","completion":"ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.ALL_MODEL_MARK));\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Revisar\");\nvar elementsToReview = new FilteredElementCollector(doc).WherePasses(new ElementParameterFilter(rule)).ToElements();\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\Exports\\review_elements.txt\")){\n    foreach(Element e in elementsToReview) writer.WriteLine($\"{e.Id} - {e.Name}\");\n}"}
{"prompt":"Export all elements with the 'Review' mark to a text file.","completion":"ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.ALL_MODEL_MARK));\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Review\");\nvar elementsToReview = new FilteredElementCollector(doc).WherePasses(new ElementParameterFilter(rule)).ToElements();\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\Exports\\review_elements.txt\")){\n    foreach(Element e in elementsToReview) writer.WriteLine($\"{e.Id} - {e.Name}\");\n}"}
{"prompt":"Crea un nuevo sistema de tuberías de agua fría.","completion":"PipingSystemType chilledWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.ChilledWater);\nif(chilledWaterSystem != null){\n    PipingSystem.Create(doc, chilledWaterSystem.Id, \"Nuevo Sistema de Agua Fría\");\n}"}
{"prompt":"Create a new chilled water piping system.","completion":"PipingSystemType chilledWaterSystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.ChilledWater);\nif(chilledWaterSystem != null){\n    PipingSystem.Create(doc, chilledWaterSystem.Id, \"New Chilled Water System\");\n}"}
{"prompt":"Añade una etiqueta de tipo a la primera viga que encuentres.","completion":"FamilyInstance beam = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif(beam != null){\n    LocationCurve lc = beam.Location as LocationCurve;\n    IndependentTag.Create(doc, doc.ActiveView.Id, new Reference(beam), false, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, lc.Curve.Evaluate(0.5, true));\n}"}
{"prompt":"Add a type tag to the first beam found.","completion":"FamilyInstance beam = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsNotElementType().FirstOrDefault() as FamilyInstance;\nif(beam != null){\n    LocationCurve lc = beam.Location as LocationCurve;\n    IndependentTag.Create(doc, doc.ActiveView.Id, new Reference(beam), false, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, lc.Curve.Evaluate(0.5, true));\n}"}
{"prompt":"Obtén el área de una cara de muro seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedFaceRef = uidoc.Selection.PickObject(ObjectType.Face, \"Selecciona una cara de muro\");\nFace face = doc.GetElement(pickedFaceRef).GetGeometryObjectFromReference(pickedFaceRef) as Face;\nif(face != null){\n    double area = face.Area;\n    TaskDialog.Show(\"Área de Cara\", $\"El área es: {UnitUtils.ConvertFromInternalUnits(area, UnitTypeId.SquareMeters):F2} m²\");\n}"}
{"prompt":"Get the area of a selected wall face.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedFaceRef = uidoc.Selection.PickObject(ObjectType.Face, \"Select a wall face\");\nFace face = doc.GetElement(pickedFaceRef).GetGeometryObjectFromReference(pickedFaceRef) as Face;\nif(face != null){\n    double area = face.Area;\n    TaskDialog.Show(\"Face Area\", $\"The area is: {UnitUtils.ConvertFromInternalUnits(area, UnitTypeId.SquareMeters):F2} m²\");\n}"}
{"prompt":"Crea una masa de barrido (sweep) a lo largo de una línea.","completion":"CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(-0.5, -0.5, 0), new XYZ(0.5, 0.5, 0));\nLine path = Line.CreateBound(XYZ.Zero, new XYZ(10, 10, 5));\nSketchPlane sp = SketchPlane.Create(doc, Plane.CreateByNormalAndOrigin(path.GetEndPoint(0), path.Direction));\nSweep sweep = doc.FamilyCreate.NewSweep(true, path, sp, profile, 0, ProfilePlaneLocation.Start);"}
{"prompt":"Create a sweep mass along a line.","completion":"CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(-0.5, -0.5, 0), new XYZ(0.5, 0.5, 0));\nLine path = Line.CreateBound(XYZ.Zero, new XYZ(10, 10, 5));\nSketchPlane sp = SketchPlane.Create(doc, Plane.CreateByNormalAndOrigin(path.GetEndPoint(0), path.Direction));\nSweep sweep = doc.FamilyCreate.NewSweep(true, path, sp, profile, 0, ProfilePlaneLocation.Start);"}
{"prompt":"Etiqueta todas las ventanas en la vista activa por categoría.","completion":"var windows = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType();\nforeach(FamilyInstance window in windows.Cast<FamilyInstance>())\n{\n    LocationPoint loc = window.Location as LocationPoint;\n    if(loc != null) IndependentTag.Create(doc, doc.ActiveView.Id, new Reference(window), false, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n}"}
{"prompt":"Tag all windows in the active view by category.","completion":"var windows = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType();\nforeach(FamilyInstance window in windows.Cast<FamilyInstance>())\n{\n    LocationPoint loc = window.Location as LocationPoint;\n    if(loc != null) IndependentTag.Create(doc, doc.ActiveView.Id, new Reference(window), false, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, loc.Point);\n}"}
{"prompt":"Elimina todos los elementos seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()){\n    doc.Delete(selectedIds);\n}"}
{"prompt":"Delete all selected elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()){\n    doc.Delete(selectedIds);\n}"}
{"prompt":"Crea una losa de cimentación de 20x15 metros.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundationLevel != null && slabType != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(20,15,0));\n    Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n}"}
{"prompt":"Create a 20x15 meter foundation slab.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundationLevel != null && slabType != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(20,15,0));\n    Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n}"}
{"prompt":"Añade montantes a todas las líneas de rejilla de un muro cortina seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro cortina\");\nWall curtainWall = doc.GetElement(pickedRef) as Wall;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif (curtainWall != null && curtainWall.CurtainGrid != null && mullionType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    foreach (ElementId gridLineId in grid.GetVGridLineIds()) grid.AddMullions(doc.GetElement(gridLineId) as CurtainGridLine, mullionType, false);\n    foreach (ElementId gridLineId in grid.GetUGridLineIds()) grid.AddMullions(doc.GetElement(gridLineId) as CurtainGridLine, mullionType, false);\n}"}
{"prompt":"Add mullions to all grid lines of a selected curtain wall.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a curtain wall\");\nWall curtainWall = doc.GetElement(pickedRef) as Wall;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif (curtainWall != null && curtainWall.CurtainGrid != null && mullionType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    foreach (ElementId gridLineId in grid.GetVGridLineIds()) grid.AddMullions(doc.GetElement(gridLineId) as CurtainGridLine, mullionType, false);\n    foreach (ElementId gridLineId in grid.GetUGridLineIds()) grid.AddMullions(doc.GetElement(gridLineId) as CurtainGridLine, mullionType, false);\n}"}
{"prompt":"Rota un elemento seleccionado 90 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nElement elem = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nif (lp != null)\n{\n    Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n    ElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI / 2.0);\n}"}
{"prompt":"Rotate a selected element 90 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nElement elem = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nif (lp != null)\n{\n    Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n    ElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI / 2.0);\n}"}
{"prompt":"Crea un sistema de vigas en un forjado seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference floorRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un forjado para el sistema de vigas\");\nFloor floor = doc.GetElement(floorRef) as Floor;\nif(floor != null)\n{\n    // La creación completa requiere más lógica para definir el contorno y la dirección\n    BeamSystem.Create(doc, new List<Curve>(), floor.Id);\n}"}
{"prompt":"Create a beam system on a selected floor slab.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference floorRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor for the beam system\");\nFloor floor = doc.GetElement(floorRef) as Floor;\nif(floor != null){\n    // Full creation requires more logic to define boundary and direction\n    BeamSystem.Create(doc, new List<Curve>(), floor.Id);\n}"}
{"prompt":"Exporta una lista de todas las advertencias del proyecto a un archivo de texto en el escritorio.","completion":"string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nstring filePath = System.IO.Path.Combine(desktopPath, \"RevitWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nusing (System.IO.StreamWriter writer = new System.IO.StreamWriter(filePath))\n{\n    foreach (FailureMessage fm in warnings)\n    {\n        writer.WriteLine(fm.GetDescriptionText());\n    }\n}"}
{"prompt":"Export a list of all project warnings to a text file on the desktop.","completion":"string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nstring filePath = System.IO.Path.Combine(desktopPath, \"RevitWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nusing (System.IO.StreamWriter writer = new System.IO.StreamWriter(filePath))\n{\n    foreach (FailureMessage fm in warnings)\n    {\n        writer.WriteLine(fm.GetDescriptionText());\n    }\n}"}
{"prompt":"Crea una vista de borrador (drafting view) llamada 'Detalles Típicos'.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Drafting);\nif(vft != null) {\n    ViewDrafting draftingView = ViewDrafting.Create(doc, vft.Id);\n    draftingView.Name = \"Detalles Típicos\";\n}"}
{"prompt":"Create a drafting view named 'Typical Details'.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Drafting);\nif(vft != null) {\n    ViewDrafting draftingView = ViewDrafting.Create(doc, vft.Id);\n    draftingView.Name = \"Typical Details\";\n}"}
{"prompt":"Muestra un diálogo para que el usuario introduzca un texto.","completion":"TaskDialog.Show(\"Entrada de Usuario\", \"Por favor, introduce un valor:\", TaskDialogCommonButtons.Ok); // La API de Revit no tiene un input box nativo, esto es una simulación."}
{"prompt":"Show a dialog for the user to input text.","completion":"TaskDialog.Show(\"User Input\", \"Please enter a value:\", TaskDialogCommonButtons.Ok); // The Revit API does not have a native input box, this is a simulation."}
{"prompt":"Cambia el tipo de todas las columnas seleccionadas a 'Columna de Hormigón 450x450'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nFamilySymbol targetType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Columna de Hormigón 450x450\");\nif(targetType != null && selectedIds.Any()){\n    foreach(ElementId id in selectedIds){\n        FamilyInstance fi = doc.GetElement(id) as FamilyInstance;\n        if(fi != null && fi.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralColumns) fi.Symbol = targetType;\n    }\n}"}
{"prompt":"Change the type of all selected columns to 'Concrete Column 450x450'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nFamilySymbol targetType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Concrete Column 450x450\");\nif(targetType != null && selectedIds.Any()){\n    foreach(ElementId id in selectedIds){\n        FamilyInstance fi = doc.GetElement(id) as FamilyInstance;\n        if(fi != null && fi.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralColumns) fi.Symbol = targetType;\n    }\n}"}
{"prompt":"Crea un suelo siguiendo el contorno de una habitación seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference roomRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una habitación\");\nRoom room = doc.GetElement(roomRef) as Room;\nif(room != null){\n    IList<IList<BoundarySegment>> segments = room.GetBoundarySegments(new SpatialElementBoundaryOptions());\n    CurveLoop profile = new CurveLoop();\n    foreach(BoundarySegment seg in segments.First()) profile.Append(seg.GetCurve());\n    Floor.Create(doc, new List<CurveLoop>{profile}, new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstElementId(), room.LevelId);\n}"}
{"prompt":"Create a floor following the boundary of a selected room.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference roomRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a room\");\nRoom room = doc.GetElement(roomRef) as Room;\nif(room != null){\n    IList<IList<BoundarySegment>> segments = room.GetBoundarySegments(new SpatialElementBoundaryOptions());\n    CurveLoop profile = new CurveLoop();\n    foreach(BoundarySegment seg in segments.First()) profile.Append(seg.GetCurve());\n    Floor.Create(doc, new List<CurveLoop>{profile}, new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstElementId(), room.LevelId);\n}"}
{"prompt":"Encuentra todas las familias que contienen 'Genérico' en su nombre.","completion":"var genericFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Genérico\")).ToList();"}
{"prompt":"Find all families containing 'Generic' in their name.","completion":"var genericFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Generic\")).ToList();"}
{"prompt":"Aplica un desfase de -10cm a todos los muros seleccionados desde su línea de ubicación.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()){\n    double offset = UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Centimeters);\n    foreach(ElementId id in selectedIds){\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null) wall.get_Parameter(BuiltInParameter.WALL_KEY_REF_PARAM).Set((int)WallLocationLine.CoreCenterline);\n    }\n}"}
{"prompt":"Apply a -10cm offset to all selected walls from their location line.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()){\n    double offset = UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Centimeters);\n    foreach(ElementId id in selectedIds){\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null) wall.get_Parameter(BuiltInParameter.WALL_KEY_REF_PARAM).Set((int)WallLocationLine.CoreCenterline);\n    }\n}"}
{"prompt":"Duplica la vista activa con detalles.","completion":"View activeView = doc.ActiveView;\nElementId newViewId = activeView.Duplicate(ViewDuplicateOption.WithDetailing);"}
{"prompt":"Duplicate the active view with detailing.","completion":"View activeView = doc.ActiveView;\nElementId newViewId = activeView.Duplicate(ViewDuplicateOption.WithDetailing);"}
{"prompt":"Establece la escala de la vista activa a 1:50.","completion":"View activeView = doc.ActiveView;\nif(activeView.CanModifyViewScale())\n{\n    activeView.Scale = 50;\n}"}
{"prompt":"Set the active view's scale to 1:50.","completion":"View activeView = doc.ActiveView;\nif(activeView.CanModifyViewScale())\n{\n    activeView.Scale = 50;\n}"}
{"prompt":"Crea un nuevo tipo de suelo 'Suelo Genérico 30cm'.","completion":"FloorType floorTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nif(floorTypeToDuplicate != null){\n    FloorType newType = floorTypeToDuplicate.Duplicate(\"Suelo Genérico 30cm\") as FloorType;\n    CompoundStructure cs = newType.GetCompoundStructure();\n    if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n    newType.SetCompoundStructure(cs);\n}"}
{"prompt":"Create a new floor type 'Generic Floor 30cm'.","completion":"FloorType floorTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nif(floorTypeToDuplicate != null){\n    FloorType newType = floorTypeToDuplicate.Duplicate(\"Generic Floor 30cm\") as FloorType;\n    CompoundStructure cs = newType.GetCompoundStructure();\n    if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n    newType.SetCompoundStructure(cs);\n}"}
{"prompt":"Haz que todos los muros seleccionados sean estructurales.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nforeach(ElementId id in selectedIds){\n    Wall wall = doc.GetElement(id) as Wall;\n    if(wall != null) wall.get_Parameter(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT).Set(1);\n}"}
{"prompt":"Make all selected walls structural.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nforeach(ElementId id in selectedIds){\n    Wall wall = doc.GetElement(id) as Wall;\n    if(wall != null) wall.get_Parameter(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT).Set(1);\n}"}
{"prompt":"Crea un nuevo tipo de muro con una capa de acabado de 2cm.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (wallTypeToDuplicate != null)\n{\n    WallType newWallType = wallTypeToDuplicate.Duplicate(\"Muro con Acabado\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    int layerIndex = cs.GetLayerCount();\n    CompoundStructureLayer newLayer = new CompoundStructureLayer(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Centimeters), MaterialFunctionAssignment.Finish1, ElementId.InvalidElementId);\n    cs.SetLayers(new List<CompoundStructureLayer> { newLayer }); // Reemplaza todas las capas, usar con cuidado\n    newWallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Create a new wall type with a 2cm finish layer.","completion":"WallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (wallTypeToDuplicate != null)\n{\n    WallType newWallType = wallTypeToDuplicate.Duplicate(\"Wall with Finish\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    int layerIndex = cs.GetLayerCount();\n    CompoundStructureLayer newLayer = new CompoundStructureLayer(UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Centimeters), MaterialFunctionAssignment.Finish1, ElementId.InvalidElementId);\n    cs.SetLayers(new List<CompoundStructureLayer> { newLayer }); // Replaces all layers, use with caution\n    newWallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Obtén la longitud total de todos los muros del proyecto.","completion":"double totalLength = 0.0;\nvar walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\nforeach (Wall wall in walls)\n{\n    totalLength += wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}\nTaskDialog.Show(\"Longitud Total de Muros\", $\"Longitud total: {UnitUtils.ConvertFromInternalUnits(totalLength, UnitTypeId.Meters):F2} m\");"}
{"prompt":"Get the total length of all walls in the project.","completion":"double totalLength = 0.0;\nvar walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\nforeach (Wall wall in walls)\n{\n    totalLength += wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n}\nTaskDialog.Show(\"Total Wall Length\", $\"Total length: {UnitUtils.ConvertFromInternalUnits(totalLength, UnitTypeId.Meters):F2} m\");"}
{"prompt":"Crea un filtro de vista que muestre solo las puertas con resistencia al fuego.","completion":"ElementId fireRatingParamId = new ElementId(BuiltInParameter.FIRE_RATING);\nParameterValueProvider pvp = new ParameterValueProvider(fireRatingParamId);\nFilterRule rule = ParameterFilterRuleFactory.CreateHasValueRule(fireRatingParamId);\nElementFilter filter = new ElementParameterFilter(rule);\nParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Filtro Puertas RF\", new List<ElementId>{new ElementId(BuiltInCategory.OST_Doors)}, filter);\ndoc.ActiveView.AddFilter(pfe.Id);"}
{"prompt":"Create a view filter that shows only fire-rated doors.","completion":"ElementId fireRatingParamId = new ElementId(BuiltInParameter.FIRE_RATING);\nParameterValueProvider pvp = new ParameterValueProvider(fireRatingParamId);\nFilterRule rule = ParameterFilterRuleFactory.CreateHasValueRule(fireRatingParamId);\nElementFilter filter = new ElementParameterFilter(rule);\nParameterFilterElement pfe = ParameterFilterElement.Create(doc, \"Fire Rated Doors Filter\", new List<ElementId>{new ElementId(BuiltInCategory.OST_Doors)}, filter);\ndoc.ActiveView.AddFilter(pfe.Id);"}
{"prompt":"Añade un refuerzo de área a una losa seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference floorRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una losa\");\nFloor floor = doc.GetElement(floorRef) as Floor;\nAreaReinforcementType reinforcementType = new FilteredElementCollector(doc).OfClass(typeof(AreaReinforcementType)).FirstOrDefault() as AreaReinforcementType;\nif(floor != null && reinforcementType != null) {\n    CurveLoop profile = floor.GetBoundary().First(); // Simplification\n    AreaReinforcement.Create(doc, floor, new List<CurveLoop>{profile}, reinforcementType.Id);\n}"}
{"prompt":"Add area reinforcement to a selected slab.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference floorRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a slab\");\nFloor floor = doc.GetElement(floorRef) as Floor;\nAreaReinforcementType reinforcementType = new FilteredElementCollector(doc).OfClass(typeof(AreaReinforcementType)).FirstOrDefault() as AreaReinforcementType;\nif(floor != null && reinforcementType != null) {\n    CurveLoop profile = floor.GetBoundary().First(); // Simplification\n    AreaReinforcement.Create(doc, floor, new List<CurveLoop>{profile}, reinforcementType.Id);\n}"}
{"prompt":"Rota el norte real 15 grados en sentido antihorario.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => bp.IsSurveyPoint);\nif (surveyPoint != null)\n{\n    double angle = 15 * Math.PI / 180.0; // Positivo para antihorario\n    ElementTransformUtils.RotateElement(doc, surveyPoint.Id, Line.CreateBound(XYZ.Zero, XYZ.BasisZ), angle);\n}"}
{"prompt":"Rotate True North 15 degrees counter-clockwise.","completion":"BasePoint surveyPoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => bp.IsSurveyPoint);\nif (surveyPoint != null)\n{\n    double angle = 15 * Math.PI / 180.0; // Positive for counter-clockwise\n    ElementTransformUtils.RotateElement(doc, surveyPoint.Id, Line.CreateBound(XYZ.Zero, XYZ.BasisZ), angle);\n}"}
{"prompt":"Coloca una etiqueta de material en una cara de muro.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference faceRef = uidoc.Selection.PickObject(ObjectType.Face, \"Selecciona una cara para etiquetar\");\nXYZ point = uidoc.Selection.PickPoint(\"Selecciona la ubicación de la etiqueta\");\nMaterialTag.Create(doc, doc.ActiveView.Id, faceRef, point, TagOrientation.Horizontal);"}
{"prompt":"Place a material tag on a wall face.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference faceRef = uidoc.Selection.PickObject(ObjectType.Face, \"Select a face to tag\");\nXYZ point = uidoc.Selection.PickPoint(\"Select the tag location\");\nMaterialTag.Create(doc, doc.ActiveView.Id, faceRef, point, TagOrientation.Horizontal);"}
{"prompt":"Crea un grupo de detalles con los elementos de detalle seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedDetailIds = uidoc.Selection.GetElementIds().Where(id => doc.GetElement(id).Category.CategoryType == CategoryType.Annotation).ToList();\nif(selectedDetailIds.Any()){\n    Group group = doc.Create.Group(selectedDetailIds);\n    group.Name = \"Detalle Típico 1\";\n}"}
{"prompt":"Create a detail group with the selected detail items.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedDetailIds = uidoc.Selection.GetElementIds().Where(id => doc.GetElement(id).Category.CategoryType == CategoryType.Annotation).ToList();\nif(selectedDetailIds.Any()){\n    Group group = doc.Create.Group(selectedDetailIds);\n    group.Name = \"Typical Detail 1\";\n}"}
{"prompt":"Encuentra todas las vistas de sección en el proyecto.","completion":"var sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}
{"prompt":"Find all section views in the project.","completion":"var sectionViews = new FilteredElementCollector(doc).OfClass(typeof(ViewSection)).Cast<ViewSection>().ToList();"}
{"prompt":"Cambia el nombre de todas las familias cargadas que contengan 'Métrica' a 'Imperial'.","completion":"var familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Métrica\"));\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"Métrica\", \"Imperial\");\n}"}
{"prompt":"Rename all loaded families containing 'Metric' to 'Imperial'.","completion":"var familiesToRename = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Metric\"));\nforeach(Family fam in familiesToRename)\n{\n    fam.Name = fam.Name.Replace(\"Metric\", \"Imperial\");\n}"}
{"prompt":"Crea una nueva tabla de planificación para ventanas que incluya Marca de Tipo, Ancho y Alto.","completion":"ViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\nschedule.Name = \"Tabla de Ventanas\";\nScheduleDefinition def = schedule.Definition;\nSchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.ALL_MODEL_TYPE_MARK));\nSchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.FAMILY_WIDTH_PARAM));\nSchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.FAMILY_HEIGHT_PARAM));\nif(typeMarkField != null) def.AddField(typeMarkField);\nif(widthField != null) def.AddField(widthField);\nif(heightField != null) def.AddField(heightField);"}
{"prompt":"Create a new window schedule that includes Type Mark, Width, and Height.","completion":"ViewSchedule schedule = ViewSchedule.CreateSchedule(doc, new ElementId(BuiltInCategory.OST_Windows));\nschedule.Name = \"Window Schedule\";\nScheduleDefinition def = schedule.Definition;\nSchedulableField typeMarkField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.ALL_MODEL_TYPE_MARK));\nSchedulableField widthField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.FAMILY_WIDTH_PARAM));\nSchedulableField heightField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.FAMILY_HEIGHT_PARAM));\nif(typeMarkField != null) def.AddField(typeMarkField);\nif(widthField != null) def.AddField(widthField);\nif(heightField != null) def.AddField(heightField);"}
{"prompt":"Desoculta todos los elementos en la vista activa.","completion":"var hiddenIds = new FilteredElementCollector(doc, doc.ActiveView.Id).WhereElementIsViewIndependent(true).ToElementIds();\nif (hiddenIds.Any())\n{\n    doc.ActiveView.UnhideElements(hiddenIds);\n}"}
{"prompt":"Unhide all elements in the active view.","completion":"var hiddenIds = new FilteredElementCollector(doc, doc.ActiveView.Id).WhereElementIsViewIndependent(true).ToElementIds();\nif (hiddenIds.Any())\n{\n    doc.ActiveView.UnhideElements(hiddenIds);\n}"}
{"prompt":"Crea un refuerzo de trayectoria en una viga seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference beamRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una viga\");\nFamilyInstance beam = doc.GetElement(beamRef) as FamilyInstance;\nPathReinforcementType pathType = new FilteredElementCollector(doc).OfClass(typeof(PathReinforcementType)).FirstOrDefault() as PathReinforcementType;\nif(beam != null && pathType != null)\n{\n    LocationCurve lc = beam.Location as LocationCurve;\n    PathReinforcement.Create(doc, beam, new List<Curve>{lc.Curve}, pathType.Id, false);\n}"}
{"prompt":"Create path reinforcement on a selected beam.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference beamRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a beam\");\nFamilyInstance beam = doc.GetElement(beamRef) as FamilyInstance;\nPathReinforcementType pathType = new FilteredElementCollector(doc).OfClass(typeof(PathReinforcementType)).FirstOrDefault() as PathReinforcementType;\nif(beam != null && pathType != null)\n{\n    LocationCurve lc = beam.Location as LocationCurve;\n    PathReinforcement.Create(doc, beam, new List<Curve>{lc.Curve}, pathType.Id, false);\n}"}
{"prompt":"Crea un ensamblaje a partir de los elementos seleccionados.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count > 1)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    assemblyInstance.Name = \"Nuevo Ensamblaje\";\n}"}
{"prompt":"Create an assembly from the selected elements.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif (selectedIds.Count > 1)\n{\n    AssemblyInstance assemblyInstance = AssemblyInstance.Create(doc, selectedIds, new ElementId(BuiltInCategory.OST_Assemblies));\n    assemblyInstance.Name = \"New Assembly\";\n}"}
{"prompt":"Añade un punto de referencia en las coordenadas (1,2,3) dentro del editor de familias.","completion":"// Válido solo en el editor de familias (doc.IsFamilyDocument == true)\nif(doc.IsFamilyDocument)\n{\n    doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));\n}"}
{"prompt":"Add a reference point at coordinates (1,2,3) inside the family editor.","completion":"// Only valid in the family editor (doc.IsFamilyDocument == true)\nif(doc.IsFamilyDocument)\n{\n    doc.FamilyCreate.NewReferencePoint(new XYZ(1,2,3));\n}"}
{"prompt":"Crea un esquema de área llamado 'Zonas de Alquiler'.","completion":"AreaScheme.Create(doc, \"Zonas de Alquiler\");"}
{"prompt":"Create an area scheme named 'Lease Zones'.","completion":"AreaScheme.Create(doc, \"Lease Zones\");"}
{"prompt":"Duplica la vista de planta 'Nivel 2' y conviértela en una plantilla de vista.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Nivel 2\") as ViewPlan;\nif(viewToDuplicate != null){\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId);\n    if(newView.CanBeTemplate()){\n        newView.IsTemplate = true;\n        newView.Name = \"Plantilla Nivel 2\";\n    }\n}"}
{"prompt":"Duplicate the 'Level 2' plan view and make it a view template.","completion":"ViewPlan viewToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Level 2\") as ViewPlan;\nif(viewToDuplicate != null){\n    ElementId newViewId = viewToDuplicate.Duplicate(ViewDuplicateOption.Duplicate);\n    View newView = doc.GetElement(newViewId);\n    if(newView.CanBeTemplate()){\n        newView.IsTemplate = true;\n        newView.Name = \"Level 2 Template\";\n    }\n}"}
{"prompt":"Crea una vista 3D con la caja de sección activada.","completion":"ViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\nif(vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    view3d.IsSectionBoxActive = true;\n}"}
{"prompt":"Create a 3D view with the section box enabled.","completion":"ViewFamilyType vft3D = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\nif(vft3D != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft3D.Id);\n    view3d.IsSectionBoxActive = true;\n}"}
{"prompt":"Importa un archivo CAD llamado 'BasePlan.dwg' en la vista actual.","completion":"string filePath = @\"C:\\CAD\\BasePlan.dwg\";\nif(System.IO.File.Exists(filePath))\n{\n    DWGImportOptions options = new DWGImportOptions();\n    options.Placement = ImportPlacement.Origin;\n    ElementId importId;\n    doc.Import(filePath, options, doc.ActiveView, out importId);\n}"}
{"prompt":"Import a CAD file named 'BasePlan.dwg' into the current view.","completion":"string filePath = @\"C:\\CAD\\BasePlan.dwg\";\nif(System.IO.File.Exists(filePath))\n{\n    DWGImportOptions options = new DWGImportOptions();\n    options.Placement = ImportPlacement.Origin;\n    ElementId importId;\n    doc.Import(filePath, options, doc.ActiveView, out importId);\n}"}
{"prompt":"Mueve el punto base del proyecto 100 metros hacia el norte.","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsSurveyPoint);\nif(projectBasePoint != null)\n{\n    XYZ translation = new XYZ(0, UnitUtils.ConvertToInternalUnits(100, UnitTypeId.Meters), 0);\n    ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n}"}
{"prompt":"Move the project base point 100 meters to the north.","completion":"BasePoint projectBasePoint = new FilteredElementCollector(doc).OfClass(typeof(BasePoint)).Cast<BasePoint>().FirstOrDefault(bp => !bp.IsSurveyPoint);\nif(projectBasePoint != null)\n{\n    XYZ translation = new XYZ(0, UnitUtils.ConvertToInternalUnits(100, UnitTypeId.Meters), 0);\n    ElementTransformUtils.MoveElement(doc, projectBasePoint.Id, translation);\n}"}
{"prompt":"Encuentra todos los muros con el comentario 'Revisar'.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Revisar\");\nElementFilter filter = new ElementParameterFilter(rule);\nvar wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElements();"}
{"prompt":"Find all walls with the comment 'Review'.","completion":"ElementId commentParamId = new ElementId(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\nParameterValueProvider pvp = new ParameterValueProvider(commentParamId);\nFilterStringRuleEvaluator evaluator = new FilterStringEquals();\nFilterRule rule = new FilterStringRule(pvp, evaluator, \"Review\");\nElementFilter filter = new ElementParameterFilter(rule);\nvar wallsToReview = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElements();"}
{"prompt":"Crea un espacio MEP para cada habitación en el Nivel 1.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(level1 != null)\n{\n    var roomsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level1.Id);\n    foreach(Room room in roomsOnLevel1)\n    {\n        MEPSpace.Create(doc, room.Id, null);\n    }\n}"}
{"prompt":"Create an MEP space for each room on Level 1.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(level1 != null)\n{\n    var roomsOnLevel1 = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).Where(r => r.LevelId == level1.Id);\n    foreach(Room room in roomsOnLevel1)\n    {\n        MEPSpace.Create(doc, room.Id, null);\n    }\n}"}
{"prompt":"Crea un DirectShape esférico con un radio de 5 metros.","completion":"double radius = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\nBRepBuilder brepBuilder = new BRepBuilder(BRepType.Solid);\nbrepBuilder.AddSphere(new Sphere(XYZ.Zero, radius));\nBRepBuilderOutcome result = brepBuilder.Finish();\nif(result == BRepBuilderOutcome.Success)\n{\n    List<GeometryObject> geoList = new List<GeometryObject>{ brepBuilder.GetResult() };\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n    ds.SetShape(geoList);\n}"}
{"prompt":"Create a spherical DirectShape with a 5-meter radius.","completion":"double radius = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\nBRepBuilder brepBuilder = new BRepBuilder(BRepType.Solid);\nbrepBuilder.AddSphere(new Sphere(XYZ.Zero, radius));\nBRepBuilderOutcome result = brepBuilder.Finish();\nif(result == BRepBuilderOutcome.Success)\n{\n    List<GeometryObject> geoList = new List<GeometryObject>{ brepBuilder.GetResult() };\n    DirectShape ds = DirectShape.CreateElement(doc, new ElementId(BuiltInCategory.OST_GenericModel));\n    ds.SetShape(geoList);\n}"}
{"prompt":"Asigna el material 'Acero' a la primera capa de un tipo de muro.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.GetCompoundStructure() != null) as WallType;\nMaterial steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Steel\")) as Material;\nif(wallType != null && steel != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    if(cs.GetLayerCount() > 0) cs.SetMaterialId(0, steel.Id);\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Assign the 'Steel' material to the first layer of a wall type.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.GetCompoundStructure() != null) as WallType;\nMaterial steel = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Steel\")) as Material;\nif(wallType != null && steel != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    if(cs.GetLayerCount() > 0) cs.SetMaterialId(0, steel.Id);\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Cambia el nombre de la vista activa a 'Vista de Trabajo'.","completion":"View activeView = doc.ActiveView;\nactiveView.Name = \"Vista de Trabajo\";"}
{"prompt":"Rename the active view to 'Working View'.","completion":"View activeView = doc.ActiveView;\nactiveView.Name = \"Working View\";"}
{"prompt":"Crea una vista 3D orientada desde el sureste.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\nif(vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    XYZ eye = new XYZ(1, -1, 1); // Sureste\n    XYZ up = new XYZ(0, 0, 1);\n    XYZ forward = eye.Negate().Normalize();\n    view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n    view3d.Name = \"Vista 3D Sureste\";\n}"}
{"prompt":"Create a 3D view oriented from the southeast.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.ThreeDimensional);\nif(vft != null)\n{\n    View3D view3d = View3D.CreateIsometric(doc, vft.Id);\n    XYZ eye = new XYZ(1, -1, 1); // Southeast\n    XYZ up = new XYZ(0, 0, 1);\n    XYZ forward = eye.Negate().Normalize();\n    view3d.SetOrientation(new ViewOrientation3D(eye, up, forward));\n    view3d.Name = \"3D View Southeast\";\n}"}
{"prompt":"Encuentra todas las familias de anotación y cuenta cuántas hay.","completion":"var annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory?.CategoryType == CategoryType.Annotation).ToList();\nTaskDialog.Show(\"Conteo\", $\"Hay {annotationFamilies.Count} familias de anotación.\");"}
{"prompt":"Find all annotation families and count how many there are.","completion":"var annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory?.CategoryType == CategoryType.Annotation).ToList();\nTaskDialog.Show(\"Count\", $\"There are {annotationFamilies.Count} annotation families.\");"}
{"prompt":"Ajusta todas las ventanas para que la altura del antepecho sea 1 metro.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\nvar windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Set the sill height of all windows to 1 meter.","completion":"double sillHeight = UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters);\nvar windows = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType().Cast<FamilyInstance>();\nforeach(FamilyInstance window in windows)\n{\n    Parameter sillHeightParam = window.get_Parameter(BuiltInParameter.INSTANCE_SILL_HEIGHT_PARAM);\n    if(sillHeightParam != null && !sillHeightParam.IsReadOnly) sillHeightParam.Set(sillHeight);\n}"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-90' y establece su resistencia al fuego a '90 min'.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"Puerta RF-90\") as FamilySymbol;\n    Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n    if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"90 min\");\n}"}
{"prompt":"Create a new door type named 'FR-90 Door' and set its fire rating to '90 min'.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"FR-90 Door\") as FamilySymbol;\n    Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n    if (fireRatingParam != null && !fireRatingParam.IsReadOnly) fireRatingParam.Set(\"90 min\");\n}"}
{"prompt":"Encuentra todos los muros que no tienen nivel base asignado.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nvar unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();\nTaskDialog.Show(\"Muros sin Nivel\", $\"Se encontraron {unassignedWalls.Count} muros sin nivel.\");"}
{"prompt":"Find all walls that have no base level assigned.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nvar unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToList();\nTaskDialog.Show(\"Unassigned Walls\", $\"Found {unassignedWalls.Count} walls with no level.\");"}
{"prompt":"Copia todos los elementos del Nivel 1 al Nivel 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif (level1 != null && level2 != null)\n{\n    var elementsToCopy = new FilteredElementCollector(doc).WhereElementIsNotElementType().Where(e => e.LevelId == level1.Id).ToElementIds();\n    double elevationDiff = level2.Elevation - level1.Elevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(elementsToCopy.Any()) ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n}"}
{"prompt":"Copy all elements from Level 1 to Level 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif (level1 != null && level2 != null)\n{\n    var elementsToCopy = new FilteredElementCollector(doc).WhereElementIsNotElementType().Where(e => e.LevelId == level1.Id).ToElementIds();\n    double elevationDiff = level2.Elevation - level1.Elevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(elementsToCopy.Any()) ElementTransformUtils.CopyElements(doc, elementsToCopy, translation);\n}"}
{"prompt":"Crea un nuevo tipo de texto de 5mm de color verde.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"5mm Verde\") as TextNoteType;\n    newType.get_Parameter(BuiltInParameter.TEXT_SIZE).Set(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Millimeters));\n    newType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(0,255,0).GetElementId());\n}"}
{"prompt":"Create a new 5mm text type in green color.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"5mm Green\") as TextNoteType;\n    newType.get_Parameter(BuiltInParameter.TEXT_SIZE).Set(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Millimeters));\n    newType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(0,255,0).GetElementId());\n}"}
{"prompt":"Encuentra todos los muros con más de 4 metros de altura.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nvar tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Find all walls taller than 4 meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(4, UnitTypeId.Meters);\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM));\nFilterRule rule = new FilterDoubleRule(pvp, new FilterNumericGreater(), heightThreshold, 1e-6);\nvar tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(new ElementParameterFilter(rule)).ToList();"}
{"prompt":"Crea un suelo siguiendo el contorno de una habitación seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference roomRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una habitación\");\nRoom room = doc.GetElement(roomRef) as Room;\nif(room != null){\n    IList<IList<BoundarySegment>> segments = room.GetBoundarySegments(new SpatialElementBoundaryOptions());\n    CurveLoop profile = new CurveLoop();\n    foreach(BoundarySegment seg in segments.First()) profile.Append(seg.GetCurve());\n    Floor.Create(doc, new List<CurveLoop>{profile}, new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstElementId(), room.LevelId);\n}"}
{"prompt":"Create a floor following the boundary of a selected room.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference roomRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a room\");\nRoom room = doc.GetElement(roomRef) as Room;\nif(room != null){\n    IList<IList<BoundarySegment>> segments = room.GetBoundarySegments(new SpatialElementBoundaryOptions());\n    CurveLoop profile = new CurveLoop();\n    foreach(BoundarySegment seg in segments.First()) profile.Append(seg.GetCurve());\n    Floor.Create(doc, new List<CurveLoop>{profile}, new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstElementId(), room.LevelId);\n}"}
{"prompt":"Encuentra todas las familias que contienen 'Genérico' en su nombre.","completion":"var genericFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Genérico\")).ToList();"}
{"prompt":"Find all families containing 'Generic' in their name.","completion":"var genericFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Generic\")).ToList();"}
{"prompt":"Aplica un desfase de -10cm a todos los muros seleccionados desde su línea de ubicación.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()){\n    double offset = UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Centimeters);\n    foreach(ElementId id in selectedIds){\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null) wall.get_Parameter(BuiltInParameter.WALL_KEY_REF_PARAM).Set((int)WallLocationLine.CoreCenterline);\n    }\n}"}
{"prompt":"Apply a -10cm offset to all selected walls from their location line.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()){\n    double offset = UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Centimeters);\n    foreach(ElementId id in selectedIds){\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null) wall.get_Parameter(BuiltInParameter.WALL_KEY_REF_PARAM).Set((int)WallLocationLine.CoreCenterline);\n    }\n}"}
{"prompt":"Duplica la vista activa con detalles.","completion":"View activeView = doc.ActiveView;\nElementId newViewId = activeView.Duplicate(ViewDuplicateOption.WithDetailing);"}
{"prompt":"Duplicate the active view with detailing.","completion":"View activeView = doc.ActiveView;\nElementId newViewId = activeView.Duplicate(ViewDuplicateOption.WithDetailing);"}
{"prompt":"Establece la escala de la vista activa a 1:50.","completion":"View activeView = doc.ActiveView;\nif(activeView.CanModifyViewScale())\n{\n    activeView.Scale = 50;\n}"}
{"prompt":"Set the active view's scale to 1:50.","completion":"View activeView = doc.ActiveView;\nif(activeView.CanModifyViewScale())\n{\n    activeView.Scale = 50;\n}"}
{"prompt":"Crea un nuevo tipo de suelo 'Suelo Genérico 30cm'.","completion":"FloorType floorTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nif(floorTypeToDuplicate != null){\n    FloorType newType = floorTypeToDuplicate.Duplicate(\"Suelo Genérico 30cm\") as FloorType;\n    CompoundStructure cs = newType.GetCompoundStructure();\n    if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n    newType.SetCompoundStructure(cs);\n}"}
{"prompt":"Create a new floor type 'Generic Floor 30cm'.","completion":"FloorType floorTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nif(floorTypeToDuplicate != null){\n    FloorType newType = floorTypeToDuplicate.Duplicate(\"Generic Floor 30cm\") as FloorType;\n    CompoundStructure cs = newType.GetCompoundStructure();\n    if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n    newType.SetCompoundStructure(cs);\n}"}
{"prompt":"Haz que todos los muros seleccionados sean estructurales.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nforeach(ElementId id in selectedIds){\n    Wall wall = doc.GetElement(id) as Wall;\n    if(wall != null) wall.get_Parameter(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT).Set(1);\n}"}
{"prompt":"Make all selected walls structural.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nforeach(ElementId id in selectedIds){\n    Wall wall = doc.GetElement(id) as Wall;\n    if(wall != null) wall.get_Parameter(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT).Set(1);\n}"}
{"prompt":"Obtén todos los muros del Nivel 1 que son estructurales.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(level1 != null){\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    var structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Get all walls on Level 1 that are structural.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(level1 != null){\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    var structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Crea una nueva tabla de planificación para Pilares Estructurales.","completion":"ElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = \"Tabla de Pilares Estructurales\";"}
{"prompt":"Create a new schedule for Structural Columns.","completion":"ElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = \"Structural Column Schedule\";"}
{"prompt":"Añade los campos 'Nivel', 'Marca' y 'Volumen' a la tabla de pilares.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\"));\nif(schedule != null){\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.FAMILY_LEVEL_PARAM));\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.ALL_MODEL_MARK));\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.HOST_VOLUME_COMPUTED));\n    if(levelField != null) def.AddField(levelField);\n    if(markField != null) def.AddField(markField);\n    if(volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Add the 'Level', 'Mark', and 'Volume' fields to the column schedule.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Column\"));\nif(schedule != null){\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.FAMILY_LEVEL_PARAM));\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.ALL_MODEL_MARK));\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.HOST_VOLUME_COMPUTED));\n    if(levelField != null) def.AddField(levelField);\n    if(markField != null) def.AddField(markField);\n    if(volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Crea una nueva hoja A3 y colócale una leyenda.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A3\")) as FamilySymbol;\nViewLegend legendView = new FilteredElementCollector(doc).OfClass(typeof(ViewLegend)).FirstOrDefault() as ViewLegend;\nif(titleBlock != null && legendView != null){\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Leyendas\";\n    newSheet.SheetNumber = \"G-002\";\n    if(Viewport.CanAddViewToSheet(doc, newSheet.Id, legendView.Id)){\n        Viewport.Create(doc, newSheet.Id, legendView.Id, new XYZ(0.5, 0.5, 0));\n    }\n}"}
{"prompt":"Create a new A3 sheet and place a legend on it.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A3\")) as FamilySymbol;\nViewLegend legendView = new FilteredElementCollector(doc).OfClass(typeof(ViewLegend)).FirstOrDefault() as ViewLegend;\nif(titleBlock != null && legendView != null){\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Legends\";\n    newSheet.SheetNumber = \"G-002\";\n    if(Viewport.CanAddViewToSheet(doc, newSheet.Id, legendView.Id)){\n        Viewport.Create(doc, newSheet.Id, legendView.Id, new XYZ(0.5, 0.5, 0));\n    }\n}"}
{"prompt":"Obtén todas las familias de puertas cargadas en el proyecto.","completion":"var doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory?.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Get all door families loaded in the project.","completion":"var doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory?.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Aplica el estilo visual 'Rayos X' a la vista 3D activa.","completion":"View3D view3d = doc.ActiveView as View3D;\nif(view3d != null){\n    view3d.DisplayStyle = DisplayStyle.Wireframe;\n    // La API no tiene un modo 'Rayos X' directo, Wireframe es lo más cercano.\n}"}
{"prompt":"Apply the 'X-Ray' visual style to the active 3D view.","completion":"View3D view3d = doc.ActiveView as View3D;\nif(view3d != null){\n    view3d.DisplayStyle = DisplayStyle.Wireframe;\n    // The API does not have a direct 'X-Ray' mode, Wireframe is the closest equivalent.\n}"}
{"prompt":"Crea una losa de cimentación estructural de 40cm de espesor.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundationLevel != null && slabType != null){\n    FloorType newSlabType = slabType.Duplicate(\"Losa Cimentación 40cm\") as FloorType;\n    CompoundStructure cs = newSlabType.GetCompoundStructure();\n    if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(40, UnitTypeId.Centimeters));\n    newSlabType.SetCompoundStructure(cs);\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(10,10,0));\n    Floor.Create(doc, new List<CurveLoop>{profile}, newSlabType.Id, foundationLevel.Id);\n}"}
{"prompt":"Create a structural foundation slab 40cm thick.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundationLevel != null && slabType != null){\n    FloorType newSlabType = slabType.Duplicate(\"Foundation Slab 40cm\") as FloorType;\n    CompoundStructure cs = newSlabType.GetCompoundStructure();\n    if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(40, UnitTypeId.Centimeters));\n    newSlabType.SetCompoundStructure(cs);\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(10,10,0));\n    Floor.Create(doc, new List<CurveLoop>{profile}, newSlabType.Id, foundationLevel.Id);\n}"}
{"prompt": "Cambia el nombre de todas las vistas de planta para que empiecen con el acrónimo \"TAD_\".","completion": "string prefix = \"TAD_\";\nvar planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().Where(v => !v.IsTemplate);\nforeach(ViewPlan view in planViews)\n{\n    if(!view.Name.StartsWith(prefix))\n    {\n        view.Name = prefix + view.Name;\n    }\n}"}
{"prompt": "Crea un nuevo nivel \"Level 3\" a 12m de altura.", "completion": "double elevation = UnitUtils.ConvertToInternalUnits(12, UnitTypeId.Meters);\nLevel newLevel = Level.Create(doc, elevation);\nnewLevel.Name = \"Level 3\";"}
{"prompt": "Crea un muro en Nivel 1 de (0,0,0) a (5,0,0) con 5m de alto.", "completion": "Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level1 != null)\n{\n    WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(wallType != null)\n    {\n        Line wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n        double height = UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters);\n        Wall.Create(doc, wallCurve, wallType.Id, level1.Id, height, 0.0, false, false);\n    }\n}"}
{"prompt":"Genera un reporte con el área de todas las habitaciones del proyecto.","completion":"StringBuilder report = new StringBuilder(\"Reporte de Áreas de Habitaciones:\\n\");\nvar rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>();\nforeach(Room room in rooms)\n{\n    double area = room.get_Parameter(BuiltInParameter.ROOM_AREA).AsDouble();\n    report.AppendLine($\"- {room.Name}: {UnitUtils.ConvertFromInternalUnits(area, UnitTypeId.SquareMeters):F2} m²\");\n}\nTaskDialog.Show(\"Reporte de Áreas\", report.ToString());"}
{"prompt":"Generate a report with the area of all rooms in the project.","completion":"StringBuilder report = new StringBuilder(\"Room Area Report:\\n\");\nvar rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>();\nforeach(Room room in rooms)\n{\n    double area = room.get_Parameter(BuiltInParameter.ROOM_AREA).AsDouble();\n    report.AppendLine($\"- {room.Name}: {UnitUtils.ConvertFromInternalUnits(area, UnitTypeId.SquareMeters):F2} m²\");\n}\nTaskDialog.Show(\"Area Report\", report.ToString());"}
{"prompt":"Crea un techo por extrusión con un perfil en arco.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nif(level != null && roofType != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n    ReferencePlane refPlane = ReferencePlane.Create(doc, new XYZ(0,0,level.Elevation), XYZ.BasisY, doc.ActiveView);\n    doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n}"}
{"prompt":"Create an extrusion roof with an arc profile.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nif(level != null && roofType != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n    ReferencePlane refPlane = ReferencePlane.Create(doc, new XYZ(0,0,level.Elevation), XYZ.BasisY, doc.ActiveView);\n    doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n}"}
{"prompt":"Oculta todos los elementos de anotación en la vista activa.","completion":"var annotationCategories = new List<BuiltInCategory>\n{\n    BuiltInCategory.OST_GenericAnnotation,\n    BuiltInCategory.OST_TextNotes,\n    BuiltInCategory.OST_Tags,\n    BuiltInCategory.OST_Dimensions\n};\nvar multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\nvar elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\nif(elementsToHide.Any())\n{\n    doc.ActiveView.HideElements(elementsToHide);\n}"}
{"prompt":"Hide all annotation elements in the active view.","completion":"var annotationCategories = new List<BuiltInCategory>\n{\n    BuiltInCategory.OST_GenericAnnotation,\n    BuiltInCategory.OST_TextNotes,\n    BuiltInCategory.OST_Tags,\n    BuiltInCategory.OST_Dimensions\n};\nvar multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\nvar elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\nif(elementsToHide.Any())\n{\n    doc.ActiveView.HideElements(elementsToHide);\n}"}
{"prompt":"Encuentra todas las vistas que no tienen una plantilla de vista asignada.","completion":"var viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View))\n    .Cast<View>()\n    .Where(v => v.CanBePrinted() && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId)\n    .ToList();\nStringBuilder sb = new StringBuilder(\"Vistas sin plantilla:\\n\");\nforeach(var view in viewsWithoutTemplate)\n{\n    sb.AppendLine(view.Name);\n}\nTaskDialog.Show(\"Auditoría de Vistas\", sb.ToString());"}
{"prompt":"Find all views that do not have a view template assigned.","completion":"var viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View))\n    .Cast<View>()\n    .Where(v => v.CanBePrinted() && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId)\n    .ToList();\nStringBuilder sb = new StringBuilder(\"Views without template:\\n\");\nforeach(var view in viewsWithoutTemplate)\n{\n    sb.AppendLine(view.Name);\n}\nTaskDialog.Show(\"View Audit\", sb.ToString());"}
{"prompt":"Establece el parámetro 'Marca' de todos los muros seleccionados a 'M-01'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any())\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall)\n        {\n            Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n            if(markParam != null) markParam.Set(\"M-01\");\n        }\n    }\n}"}
{"prompt":"Set the 'Mark' parameter of all selected walls to 'W-01'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any())\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall)\n        {\n            Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n            if(markParam != null) markParam.Set(\"W-01\");\n        }\n    }\n}"}
{"prompt":"Crea 10 worksets de arquitectura.","completion":"if(doc.IsWorkshared)\n{\n    var worksetNames = new List<string> { \"TAD_ARQ_MAM\", \"TAD_ARQ_ACA\", \"TAD_ARQ_PLA\", \"TAD_ARQ_PSO\", \"TAD_ARQ_HRE\", \"TAD_ARQ_ALU\", \"TAD_ARQ_CAR\", \"TAD_ARQ_MOB\", \"TAD_ARQ_PLO\", \"TAD_ARQ_EXT\" };\n    foreach(string name in worksetNames)\n    {\n        Workset.Create(doc, name);\n    }\n}"}
{"prompt":"Create 10 architectural worksets.","completion":"if(doc.IsWorkshared)\n{\n    var worksetNames = new List<string> { \"TAD_ARQ_WALLS\", \"TAD_ARQ_FINISHES\", \"TAD_ARQ_CEILINGS\", \"TAD_ARQ_FLOORS\", \"TAD_ARQ_RAILINGS\", \"TAD_ARQ_WINDOWS\", \"TAD_ARQ_CARPENTRY\", \"TAD_ARQ_FURNITURE\", \"TAD_ARQ_PLUMBING\", \"TAD_ARQ_EXTERIOR\" };\n    foreach(string name in worksetNames)\n    {\n        Workset.Create(doc, name);\n    }\n}"}
{"prompt":"Cambia el nombre de todas las tablas que contienen 'Muros' por 'Cuantificación de Muros'.","completion":"var schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"Muros\"));\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"Muros\", \"Cuantificación de Muros\");\n}"}
{"prompt":"Rename all schedules containing 'Walls' to 'Wall Quantity Takeoff'.","completion":"var schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"Walls\"));\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"Walls\", \"Wall Quantity Takeoff\");\n}"}
{"prompt":"Encuentra todas las familias de anotación y muestra sus nombres.","completion":"var annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation);\nStringBuilder sb = new StringBuilder(\"Familias de Anotación:\\n\");\nforeach(var fam in annotationFamilies)\n{\n    sb.AppendLine(fam.Name);\n}\nTaskDialog.Show(\"Familias de Anotación\", sb.ToString());"}
{"prompt":"Find all annotation families and display their names.","completion":"var annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation);\nStringBuilder sb = new StringBuilder(\"Annotation Families:\\n\");\nforeach(var fam in annotationFamilies)\n{\n    sb.AppendLine(fam.Name);\n}\nTaskDialog.Show(\"Annotation Families\", sb.ToString());"}
{"prompt":"Crea un tipo de cota lineal con texto rojo.","completion":"DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\nif(linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"Cota Roja\") as DimensionType;\n    if(newDimType != null)\n    {\n        newDimType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(255,0,0).GetElementId());\n    }\n}"}
{"prompt":"Create a linear dimension type with red text.","completion":"DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\nif(linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"Red Dimension\") as DimensionType;\n    if(newDimType != null)\n    {\n        newDimType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(255,0,0).GetElementId());\n    }\n}"}
{"prompt":"Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif(furnitureCat != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Set the visibility of the 'Furniture' category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif(furnitureCat != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Éxito\", $\"Se eliminaron {unusedWallTypes.Count} tipos de muro no utilizados.\");\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Success\", $\"Deleted {unusedWallTypes.Count} unused wall types.\");\n}"}
{"prompt":"Crea una nueva hoja A1 y coloca la vista 'Planta Baja' en ella.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A1\")) as FamilySymbol;\nView viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Planta Baja\") as View;\nif (titleBlock != null && viewToPlace != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Planta Arquitectónica\";\n    newSheet.SheetNumber = \"A-101\";\n    if (Viewport.CanAddViewToSheet(doc, newSheet.Id, viewToPlace.Id))\n    {\n        Viewport.Create(doc, newSheet.Id, viewToPlace.Id, new XYZ(0.5, 0.5, 0));\n    }\n}"}
{"prompt":"Create a new A1 sheet and place the 'Ground Floor' view on it.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A1\")) as FamilySymbol;\nView viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Ground Floor\") as View;\nif (titleBlock != null && viewToPlace != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Architectural Plan\";\n    newSheet.SheetNumber = \"A-101\";\n    if (Viewport.CanAddViewToSheet(doc, newSheet.Id, viewToPlace.Id))\n    {\n        Viewport.Create(doc, newSheet.Id, viewToPlace.Id, new XYZ(0.5, 0.5, 0));\n    }\n}"}
{"prompt":"Reporta el número total de advertencias en el proyecto.","completion":"int warningCount = doc.GetWarnings().Count;\nTaskDialog.Show(\"Auditoría de Proyecto\", $\"El proyecto tiene {warningCount} advertencias.\");"}
{"prompt":"Report the total number of warnings in the project.","completion":"int warningCount = doc.GetWarnings().Count;\nTaskDialog.Show(\"Project Audit\", $\"The project has {warningCount} warnings.\");"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-60' basado en un tipo existente, y asigna '60 min' al parámetro 'Fire Rating'.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"Puerta RF-60\") as FamilySymbol;\n    Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n    if (fireRatingParam != null && !fireRatingParam.IsReadOnly)\n    {\n        fireRatingParam.Set(\"60 min\");\n    }\n}"}
{"prompt":"Create a new door type named 'FR-60 Door' based on an existing type, and set the 'Fire Rating' parameter to '60 min'.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"FR-60 Door\") as FamilySymbol;\n    Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n    if (fireRatingParam != null && !fireRatingParam.IsReadOnly)\n    {\n        fireRatingParam.Set(\"60 min\");\n    }\n}"}
{"prompt":"Mueve todos los elementos seleccionados 3 metros hacia arriba.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any())\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Move all selected elements 3 meters up.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any())\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Crea un nuevo parámetro de proyecto compartido de texto llamado 'Notas Adicionales' para muros y puertas.","completion":"string paramName = \"Notas Adicionales\";\nCategorySet categories = doc.Application.Create.NewCategorySet();\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\nstring sharedParamsFilePath = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamsFilePath) || !System.IO.File.Exists(sharedParamsFilePath)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\RevitSharedParameters.txt\"; System.IO.File.Create(sharedParamsFilePath).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup defGroup = defFile.Groups.EnsureDefinitionGroup(\"General\");\nExternalDefinition def = defGroup.Definitions.Create(new ExternalDefinitionCreationOptions(paramName, SpecTypeId.String.Text)) as ExternalDefinition;\ndoc.ParameterBindings.Insert(doc.Application.Create.NewInstanceBinding(categories), def, BuiltInParameterGroup.PG_DATA);"}
{"prompt":"Create a new shared text project parameter named 'Additional Notes' for walls and doors.","completion":"string paramName = \"Additional Notes\";\nCategorySet categories = doc.Application.Create.NewCategorySet();\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\nstring sharedParamsFilePath = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamsFilePath) || !System.IO.File.Exists(sharedParamsFilePath)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\RevitSharedParameters.txt\"; System.IO.File.Create(sharedParamsFilePath).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup defGroup = defFile.Groups.EnsureDefinitionGroup(\"General\");\nExternalDefinition def = defGroup.Definitions.Create(new ExternalDefinitionCreationOptions(paramName, SpecTypeId.String.Text)) as ExternalDefinition;\ndoc.ParameterBindings.Insert(doc.Application.Create.NewInstanceBinding(categories), def, BuiltInParameterGroup.PG_DATA);"}
{"prompt":"Crea un nivel 'Roof Terrace' a 15m.","completion":"if(!new FilteredElementCollector(doc).OfClass(typeof(Level)).Any(l => l.Name == \"Roof Terrace\"))\n{\n    double elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\n    Level.Create(doc, elev).Name = \"Roof Terrace\";\n}"}
{"prompt":"Create a 'Roof Terrace' level at 15m.","completion":"if(!new FilteredElementCollector(doc).OfClass(typeof(Level)).Any(l => l.Name == \"Roof Terrace\"))\n{\n    double elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\n    Level.Create(doc, elev).Name = \"Roof Terrace\";\n}"}
{"prompt":"Coloca postes de iluminación cada 10m en un camino de 100m.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Place lighting posts every 10m along a 100m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Genera una cuadrícula de columnas 5x5 con separación de 8 metros.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Generate a 5x5 column grid with 8-meter spacing.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Crea una habitación circular con un radio de 5 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Arc.Create(XYZ.Zero, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY));\n    RoomSeparationLine.Create(doc, profile, doc.ActiveView.SketchPlane.Id, doc.ActiveView);\n    doc.Create.NewRoom(level, new UV(0,0));\n}"}
{"prompt":"Create a circular room with a 5-meter radius.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Arc.Create(XYZ.Zero, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY));\n    RoomSeparationLine.Create(doc, profile, doc.ActiveView.SketchPlane.Id, doc.ActiveView);\n    doc.Create.NewRoom(level, new UV(0,0));\n}"}
{"prompt":"Importa topografía georreferenciada desde un archivo LandXML.","completion":"LandXMLImportOptions options = new LandXMLImportOptions();\noptions.XYLengthUnit = XYLengthUnit.Meter;\ndoc.Import(@\"C:\\CAD\\site.xml\", options);"}
{"prompt":"Import a georeferenced survey from a LandXML file.","completion":"LandXMLImportOptions options = new LandXMLImportOptions();\noptions.XYLengthUnit = XYLengthUnit.Meter;\ndoc.Import(@\"C:\\CAD\\site.xml\", options);"}
{"prompt":"Crea una vista de plano de plafón reflejado para el Nivel 1.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    rcp.Name = \"Plano de Plafón Nivel 1\";\n}"}
{"prompt":"Create a Reflected Ceiling Plan view for Level 1.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    rcp.Name = \"Level 1 Ceiling Plan\";\n}"}
{"prompt":"Añade un plano de referencia horizontal llamado 'Eje Central A'.","completion":"ReferencePlane rp = ReferencePlane.Create(doc, XYZ.Zero, XYZ.BasisX, XYZ.BasisZ, doc.ActiveView);\nrp.Name = \"Eje Central A\";"}
{"prompt":"Add a horizontal reference plane named 'Centerline A'.","completion":"ReferencePlane rp = ReferencePlane.Create(doc, XYZ.Zero, XYZ.BasisX, XYZ.BasisZ, doc.ActiveView);\nrp.Name = \"Centerline A\";"}
{"prompt":"Duplica el nivel 1 con un desfase de 3m y llámalo 'Mezanine'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(level1 != null)\n{\n    double newElevation = level1.Elevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Duplicate level 1 with a 3m offset and name it 'Mezzanine'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(level1 != null)\n{\n    double newElevation = level1.Elevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Etiqueta todas las habitaciones con su área.","completion":"var rooms = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType();\nforeach(Room room in rooms)\n{\n    if(room.Location != null)\n    {\n        doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(room.Location.Point.X, room.Location.Point.Y), doc.ActiveView.Id);\n    }\n}"}
{"prompt":"Tag all rooms with their area.","completion":"var rooms = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType();\nforeach(Room room in rooms)\n{\n    if(room.Location != null)\n    {\n        doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(room.Location.Point.X, room.Location.Point.Y), doc.ActiveView.Id);\n    }\n}"}
{"prompt":"Exporta una lista de materiales a un archivo de texto.","completion":"var materials = new FilteredElementCollector(doc).OfClass(typeof(Material));\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(\"C:\\\\Exports\\\\materials.txt\"))\n{\n    writer.WriteLine(\"Nombre del Material\");\n    foreach(Material m in materials)\n    {\n        writer.WriteLine(m.Name);\n    }\n}"}
{"prompt":"Export a list of materials to a text file.","completion":"var materials = new FilteredElementCollector(doc).OfClass(typeof(Material));\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(\"C:\\\\Exports\\\\materials.txt\"))\n{\n    writer.WriteLine(\"Material Name\");\n    foreach(Material m in materials)\n    {\n        writer.WriteLine(m.Name);\n    }\n}"}
{"prompt":"Aísla temporalmente todo el mobiliario en la vista activa.","completion":"var furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nif(furnitureIds.Any())\n{\n    doc.ActiveView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Temporarily isolate all furniture in the active view.","completion":"var furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nif(furnitureIds.Any())\n{\n    doc.ActiveView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Coloca un ducto redondo de 200mm de diámetro.","completion":"DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).FirstOrDefault(dt => dt.Shape == ConnectorProfileType.Round) as DuctType;\nMEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(st => st.SystemClassification == MEPSystemClassification.SupplyAir);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(ductType != null && systemType != null && level != null)\n{\n    Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, new XYZ(0,0,3), new XYZ(10,0,3));\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(200, UnitTypeId.Millimeters));\n}"}
{"prompt":"Place a 200mm diameter round duct.","completion":"DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).FirstOrDefault(dt => dt.Shape == ConnectorProfileType.Round) as DuctType;\nMEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(st => st.SystemClassification == MEPSystemClassification.SupplyAir);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(ductType != null && systemType != null && level != null)\n{\n    Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, new XYZ(0,0,3), new XYZ(10,0,3));\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(200, UnitTypeId.Millimeters));\n}"}
{"prompt":"Crea un suelo con un contorno definido por el usuario.","completion":"UIDocument uidoc = new UIDocument(doc);\nIList<Reference> pickedRefs = uidoc.Selection.PickObjects(ObjectType.Element, \"Selecciona las líneas de contorno\");\nCurveLoop profile = new CurveLoop();\nforeach(Reference r in pickedRefs)\n{\n    ModelCurve mc = doc.GetElement(r) as ModelCurve;\n    if(mc != null) profile.Append(mc.GeometryCurve);\n}\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nLevel level = doc.ActiveView.GenLevel;\nif(floorType != null && level != null && profile.IsOpen() == false)\n{\n    Floor.Create(doc, new List<CurveLoop>{profile}, floorType.Id, level.Id);\n}"}
{"prompt":"Create a floor with a user-defined boundary.","completion":"UIDocument uidoc = new UIDocument(doc);\nIList<Reference> pickedRefs = uidoc.Selection.PickObjects(ObjectType.Element, \"Select the boundary lines\");\nCurveLoop profile = new CurveLoop();\nforeach(Reference r in pickedRefs)\n{\n    ModelCurve mc = doc.GetElement(r) as ModelCurve;\n    if(mc != null) profile.Append(mc.GeometryCurve);\n}\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nLevel level = doc.ActiveView.GenLevel;\nif(floorType != null && level != null && profile.IsOpen() == false)\n{\n    Floor.Create(doc, new List<CurveLoop>{profile}, floorType.Id, level.Id);\n}"}
{"prompt":"Encuentra todos los elementos dentro de la habitación 'Sala de Juntas'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Sala de Juntas\") as Room;\nif(room != null)\n{\n    BoundingBoxXYZ roomBbox = room.get_BoundingBox(null);\n    Outline roomOutline = new Outline(roomBbox.Min, roomBbox.Max);\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(roomOutline);\n    var elementsInRoom = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Find all elements inside the 'Conference Room'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Conference Room\") as Room;\nif(room != null)\n{\n    BoundingBoxXYZ roomBbox = room.get_BoundingBox(null);\n    Outline roomOutline = new Outline(roomBbox.Min, roomBbox.Max);\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(roomOutline);\n    var elementsInRoom = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Exporta todos los muros con un parámetro de Marca a un archivo CSV.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(System.IO.StreamWriter sw = new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"ElementId,Mark\");\n  foreach(var w in walls){\n    Parameter p=w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n    if(p!=null && p.HasValue) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Export all walls with a Mark parameter to a CSV file.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(System.IO.StreamWriter sw = new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"ElementId,Mark\");\n  foreach(var w in walls){\n    Parameter p=w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n    if(p!=null && p.HasValue) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Crea un nuevo parámetro de proyecto compartido de texto llamado 'Notas Adicionales' para muros y puertas.","completion":"string paramName = \"Notas Adicionales\";\nCategorySet categories = doc.Application.Create.NewCategorySet();\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\nstring sharedParamsFilePath = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamsFilePath) || !System.IO.File.Exists(sharedParamsFilePath)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\RevitSharedParameters.txt\"; System.IO.File.Create(sharedParamsFilePath).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup defGroup = defFile.Groups.EnsureDefinitionGroup(\"General\");\nExternalDefinition def = defGroup.Definitions.Create(new ExternalDefinitionCreationOptions(paramName, SpecTypeId.String.Text)) as ExternalDefinition;\ndoc.ParameterBindings.Insert(doc.Application.Create.NewInstanceBinding(categories), def, BuiltInParameterGroup.PG_DATA);"}
{"prompt":"Create a new shared text project parameter named 'Additional Notes' for walls and doors.","completion":"string paramName = \"Additional Notes\";\nCategorySet categories = doc.Application.Create.NewCategorySet();\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\nstring sharedParamsFilePath = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamsFilePath) || !System.IO.File.Exists(sharedParamsFilePath)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\RevitSharedParameters.txt\"; System.IO.File.Create(sharedParamsFilePath).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup defGroup = defFile.Groups.EnsureDefinitionGroup(\"General\");\nExternalDefinition def = defGroup.Definitions.Create(new ExternalDefinitionCreationOptions(paramName, SpecTypeId.String.Text)) as ExternalDefinition;\ndoc.ParameterBindings.Insert(doc.Application.Create.NewInstanceBinding(categories), def, BuiltInParameterGroup.PG_DATA);"}
{"prompt":"Crea un nivel 'Roof Terrace' a 15m.","completion":"if(!new FilteredElementCollector(doc).OfClass(typeof(Level)).Any(l => l.Name == \"Roof Terrace\"))\n{\n    double elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\n    Level.Create(doc, elev).Name = \"Roof Terrace\";\n}"}
{"prompt":"Create a 'Roof Terrace' level at 15m.","completion":"if(!new FilteredElementCollector(doc).OfClass(typeof(Level)).Any(l => l.Name == \"Roof Terrace\"))\n{\n    double elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\n    Level.Create(doc, elev).Name = \"Roof Terrace\";\n}"}
{"prompt":"Coloca postes de iluminación cada 10m en un camino de 100m.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Place lighting posts every 10m along a 100m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Genera una cuadrícula de columnas 5x5 con separación de 8 metros.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Generate a 5x5 column grid with 8-meter spacing.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Crea una habitación circular con un radio de 5 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Arc.Create(XYZ.Zero, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY));\n    RoomSeparationLine.Create(doc, profile, doc.ActiveView.SketchPlane.Id, doc.ActiveView);\n    doc.Create.NewRoom(level, new UV(0,0));\n}"}
{"prompt":"Create a circular room with a 5-meter radius.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Arc.Create(XYZ.Zero, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY));\n    RoomSeparationLine.Create(doc, profile, doc.ActiveView.SketchPlane.Id, doc.ActiveView);\n    doc.Create.NewRoom(level, new UV(0,0));\n}"}
{"prompt":"Importa topografía georreferenciada desde un archivo LandXML.","completion":"LandXMLImportOptions options = new LandXMLImportOptions();\noptions.XYLengthUnit = XYLengthUnit.Meter;\ndoc.Import(@\"C:\\CAD\\site.xml\", options);"}
{"prompt":"Import a georeferenced survey from a LandXML file.","completion":"LandXMLImportOptions options = new LandXMLImportOptions();\noptions.XYLengthUnit = XYLengthUnit.Meter;\ndoc.Import(@\"C:\\CAD\\site.xml\", options);"}
{"prompt":"Crea una vista de plano de plafón reflejado para el Nivel 1.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    rcp.Name = \"Plano de Plafón Nivel 1\";\n}"}
{"prompt":"Create a Reflected Ceiling Plan view for Level 1.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    rcp.Name = \"Level 1 Ceiling Plan\";\n}"}
{"prompt":"Añade un plano de referencia horizontal llamado 'Eje Central A'.","completion":"ReferencePlane rp = ReferencePlane.Create(doc, XYZ.Zero, XYZ.BasisX, XYZ.BasisZ, doc.ActiveView);\nrp.Name = \"Eje Central A\";"}
{"prompt":"Add a horizontal reference plane named 'Centerline A'.","completion":"ReferencePlane rp = ReferencePlane.Create(doc, XYZ.Zero, XYZ.BasisX, XYZ.BasisZ, doc.ActiveView);\nrp.Name = \"Centerline A\";"}
{"prompt":"Duplica el nivel 1 con un desfase de 3m y llámalo 'Mezanine'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(level1 != null)\n{\n    double newElevation = level1.Elevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Duplicate level 1 with a 3m offset and name it 'Mezzanine'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(level1 != null)\n{\n    double newElevation = level1.Elevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Etiqueta todas las habitaciones con su área.","completion":"var rooms = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType();\nforeach(Room room in rooms)\n{\n    if(room.Location != null)\n    {\n        doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(room.Location.Point.X, room.Location.Point.Y), doc.ActiveView.Id);\n    }\n}"}
{"prompt":"Tag all rooms with their area.","completion":"var rooms = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType();\nforeach(Room room in rooms)\n{\n    if(room.Location != null)\n    {\n        doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(room.Location.Point.X, room.Location.Point.Y), doc.ActiveView.Id);\n    }\n}"}
{"prompt":"Exporta una lista de materiales a un archivo de texto.","completion":"var materials = new FilteredElementCollector(doc).OfClass(typeof(Material));\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(\"C:\\\\Exports\\\\materials.txt\"))\n{\n    writer.WriteLine(\"Nombre del Material\");\n    foreach(Material m in materials)\n    {\n        writer.WriteLine(m.Name);\n    }\n}"}
{"prompt":"Export a list of materials to a text file.","completion":"var materials = new FilteredElementCollector(doc).OfClass(typeof(Material));\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(\"C:\\\\Exports\\\\materials.txt\"))\n{\n    writer.WriteLine(\"Material Name\");\n    foreach(Material m in materials)\n    {\n        writer.WriteLine(m.Name);\n    }\n}"}
{"prompt":"Aísla temporalmente todo el mobiliario en la vista activa.","completion":"var furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nif(furnitureIds.Any())\n{\n    doc.ActiveView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Temporarily isolate all furniture in the active view.","completion":"var furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nif(furnitureIds.Any())\n{\n    doc.ActiveView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Coloca un ducto redondo de 200mm de diámetro.","completion":"DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).FirstOrDefault(dt => dt.Shape == ConnectorProfileType.Round) as DuctType;\nMEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(st => st.SystemClassification == MEPSystemClassification.SupplyAir);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(ductType != null && systemType != null && level != null)\n{\n    Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, new XYZ(0,0,3), new XYZ(10,0,3));\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(200, UnitTypeId.Millimeters));\n}"}
{"prompt":"Place a 200mm diameter round duct.","completion":"DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).FirstOrDefault(dt => dt.Shape == ConnectorProfileType.Round) as DuctType;\nMEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(st => st.SystemClassification == MEPSystemClassification.SupplyAir);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(ductType != null && systemType != null && level != null)\n{\n    Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, new XYZ(0,0,3), new XYZ(10,0,3));\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(200, UnitTypeId.Millimeters));\n}"}
{"prompt":"Crea un suelo con un contorno definido por el usuario.","completion":"UIDocument uidoc = new UIDocument(doc);\nIList<Reference> pickedRefs = uidoc.Selection.PickObjects(ObjectType.Element, \"Selecciona las líneas de contorno\");\nCurveLoop profile = new CurveLoop();\nforeach(Reference r in pickedRefs)\n{\n    ModelCurve mc = doc.GetElement(r) as ModelCurve;\n    if(mc != null) profile.Append(mc.GeometryCurve);\n}\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nLevel level = doc.ActiveView.GenLevel;\nif(floorType != null && level != null && profile.IsOpen() == false)\n{\n    Floor.Create(doc, new List<CurveLoop>{profile}, floorType.Id, level.Id);\n}"}
{"prompt":"Create a floor with a user-defined boundary.","completion":"UIDocument uidoc = new UIDocument(doc);\nIList<Reference> pickedRefs = uidoc.Selection.PickObjects(ObjectType.Element, \"Select the boundary lines\");\nCurveLoop profile = new CurveLoop();\nforeach(Reference r in pickedRefs)\n{\n    ModelCurve mc = doc.GetElement(r) as ModelCurve;\n    if(mc != null) profile.Append(mc.GeometryCurve);\n}\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nLevel level = doc.ActiveView.GenLevel;\nif(floorType != null && level != null && profile.IsOpen() == false)\n{\n    Floor.Create(doc, new List<CurveLoop>{profile}, floorType.Id, level.Id);\n}"}
{"prompt":"Encuentra todos los elementos dentro de la habitación 'Sala de Juntas'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Sala de Juntas\") as Room;\nif(room != null)\n{\n    BoundingBoxXYZ roomBbox = room.get_BoundingBox(null);\n    Outline roomOutline = new Outline(roomBbox.Min, roomBbox.Max);\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(roomOutline);\n    var elementsInRoom = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Find all elements inside the 'Conference Room'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Conference Room\") as Room;\nif(room != null)\n{\n    BoundingBoxXYZ roomBbox = room.get_BoundingBox(null);\n    Outline roomOutline = new Outline(roomBbox.Min, roomBbox.Max);\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(roomOutline);\n    var elementsInRoom = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Exporta todos los muros con un parámetro de Marca a un archivo CSV.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(System.IO.StreamWriter sw = new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"ElementId,Mark\");\n  foreach(var w in walls){\n    Parameter p=w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n    if(p!=null && p.HasValue) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Export all walls with a Mark parameter to a CSV file.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(System.IO.StreamWriter sw = new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"ElementId,Mark\");\n  foreach(var w in walls){\n    Parameter p=w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n    if(p!=null && p.HasValue) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}

{"prompt":"Crea un muro del tipo 'Genérico - 200mm' en el 'Nivel 1' desde (0,0) hasta (10,5).","completion":"// Estrategia: Crear un muro con tipo y nivel específicos.\n// 1. Encontrar el nivel por su nombre.\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\n// 2. Encontrar el tipo de muro por su nombre.\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Genérico - 200mm\") as WallType;\n// 3. Comprobar que ambos se encontraron antes de crear el muro.\nif (level != null && wallType != null)\n{\n    // 4. Definir la línea de ubicación del muro.\n    Line wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(10, 5, 0));\n    // 5. Crear el muro usando los IDs encontrados.\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);\n}\nelse\n{\n    TaskDialog.Show(\"Error\", \"No se encontró el nivel 'Nivel 1' o el tipo de muro 'Genérico - 200mm'.\");\n}"}
{"prompt":"Create a 'Generic - 200mm' wall on 'Level 1' from (0,0) to (10,5).","completion":"// Strategy: Create a wall with a specific type and level.\n// 1. Find the level by its name.\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\n// 2. Find the wall type by its name.\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Generic - 200mm\") as WallType;\n// 3. Check that both were found before creating the wall.\nif (level != null && wallType != null)\n{\n    // 4. Define the wall's location line.\n    Line wallCurve = Line.CreateBound(new XYZ(0, 0, 0), new XYZ(10, 5, 0));\n    // 5. Create the wall using the found IDs.\n    Wall.Create(doc, wallCurve, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);\n}\nelse\n{\n    TaskDialog.Show(\"Error\", \"Could not find Level 'Level 1' or Wall Type 'Generic - 200mm'.\");\n}"}
{"prompt":"Crea un nuevo nivel llamado 'Planta Sótano' a una elevación de -4.5 metros.","completion":"// Estrategia: Crear un nuevo nivel con nombre y elevación específicos.\n// 1. Definir el nombre y la elevación deseada.\nstring levelName = \"Planta Sótano\";\ndouble elevationMeters = -4.5;\n// 2. Verificar que no exista un nivel con el mismo nombre para evitar duplicados.\nbool levelExists = new FilteredElementCollector(doc).OfClass(typeof(Level)).Any(l => l.Name == levelName);\nif (!levelExists)\n{\n    // 3. Convertir la elevación a unidades internas de Revit.\n    double elevationInternal = UnitUtils.ConvertToInternalUnits(elevationMeters, UnitTypeId.Meters);\n    // 4. Crear el nivel.\n    Level newLevel = Level.Create(doc, elevationInternal);\n    // 5. Asignar el nombre.\n    newLevel.Name = levelName;\n}\nelse\n{\n    TaskDialog.Show(\"Advertencia\", $\"El nivel '{levelName}' ya existe.\");\n}"}
{"prompt":"Create a new level named 'Basement Floor' at an elevation of -4.5 meters.","completion":"// Strategy: Create a new level with a specific name and elevation.\n// 1. Define the desired name and elevation.\nstring levelName = \"Basement Floor\";\ndouble elevationMeters = -4.5;\n// 2. Verify that a level with the same name does not already exist to avoid duplicates.\nbool levelExists = new FilteredElementCollector(doc).OfClass(typeof(Level)).Any(l => l.Name == levelName);\nif (!levelExists)\n{\n    // 3. Convert the elevation to Revit's internal units.\n    double elevationInternal = UnitUtils.ConvertToInternalUnits(elevationMeters, UnitTypeId.Meters);\n    // 4. Create the level.\n    Level newLevel = Level.Create(doc, elevationInternal);\n    // 5. Assign the name.\n    newLevel.Name = levelName;\n}\nelse\n{\n    TaskDialog.Show(\"Warning\", $\"A level named '{levelName}' already exists.\");\n}"}
{"prompt":"Coloca una instancia de la familia 'Mesa de Oficina' en el centro de la habitación 'Despacho 101'.","completion":"// Estrategia: Colocar una familia en el centro de una habitación específica.\n// 1. Encontrar la habitación por su nombre.\nRoom room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Despacho 101\") as Room;\n// 2. Encontrar el símbolo de la familia (tipo) por su nombre.\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Mesa de Oficina\") as FamilySymbol;\n// 3. Verificar que se encontraron la habitación y el tipo de mueble.\nif (room != null && furnitureSymbol != null)\n{\n    // 4. Obtener el punto central de la habitación.\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null){\n        // 5. Activar el símbolo si no está activo.\n        if(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n        // 6. Crear la instancia de la familia en el punto central.\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}\nelse\n{\n    TaskDialog.Show(\"Error\", \"No se encontró la habitación 'Despacho 101' o la familia 'Mesa de Oficina'.\");\n}"}
{"prompt":"Place an instance of the 'Office Desk' family in the center of the 'Office 101' room.","completion":"// Strategy: Place a family instance at the center of a specific room.\n// 1. Find the room by its name.\nRoom room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Office 101\") as Room;\n// 2. Find the family symbol (type) by its name.\nFamilySymbol furnitureSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Office Desk\") as FamilySymbol;\n// 3. Verify that both the room and the furniture type were found.\nif (room != null && furnitureSymbol != null)\n{\n    // 4. Get the center point of the room.\n    LocationPoint roomCenter = room.Location as LocationPoint;\n    if(roomCenter != null){\n        // 5. Activate the symbol if it's not already active.\n        if(!furnitureSymbol.IsActive) furnitureSymbol.Activate();\n        // 6. Create the family instance at the center point.\n        doc.Create.NewFamilyInstance(roomCenter.Point, furnitureSymbol, room.Level, StructuralType.NonStructural);\n    }\n}\nelse\n{\n    TaskDialog.Show(\"Error\", \"Could not find room 'Office 101' or family 'Office Desk'.\");\n}"}
{"prompt":"Crea una rejilla de 5 ejes horizontales y 5 verticales, espaciados 6 metros.","completion":"// Estrategia: Crear una rejilla de ejes en dos direcciones.\n// 1. Definir el espaciado y la cantidad de ejes.\ndouble spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint count = 5;\n// 2. Crear los ejes horizontales.\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((count - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\n// 3. Crear los ejes verticales.\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Create a grid of 5 horizontal and 5 vertical grids, spaced 6 meters apart.","completion":"// Strategy: Create a grid of axes in two directions.\n// 1. Define the spacing and number of grids.\ndouble spacing = UnitUtils.ConvertToInternalUnits(6, UnitTypeId.Meters);\nint count = 5;\n// 2. Create the horizontal grids.\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(0, i * spacing, 0), new XYZ((count - 1) * spacing, i * spacing, 0));\n    Grid.Create(doc, line);\n}\n// 3. Create the vertical grids.\nfor (int i = 0; i < count; i++)\n{\n    Line line = Line.CreateBound(new XYZ(i * spacing, 0, 0), new XYZ(i * spacing, (count - 1) * spacing, 0));\n    Grid.Create(doc, line);\n}"}
{"prompt":"Crea un pilar del tipo 'Hormigón-Rectangular 30x60' en cada intersección de la rejilla.","completion":"// Estrategia: Colocar pilares en todas las intersecciones de la rejilla.\n// 1. Encontrar el tipo de pilar específico.\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Hormigón-Rectangular 30x60\") as FamilySymbol;\n// 2. Obtener el nivel base y la lista de todos los ejes.\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nvar grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n// 3. Verificar que los elementos necesarios existen.\nif (columnSymbol != null && level != null && grids.Count > 1)\n{\n    // 4. Activar el símbolo.\n    if (!columnSymbol.IsActive) columnSymbol.Activate();\n    // 5. Iterar por cada par de ejes para encontrar intersecciones.\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            var result = grids[i].Curve.Intersect(grids[j].Curve, out IntersectionResultArray results);\n            if (result == SetComparisonResult.Overlap && results != null)\n            {\n                foreach (IntersectionResult ir in results)\n                {\n                    // 6. Colocar un pilar en cada punto de intersección.\n                    doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Create a 'Concrete-Rectangular 30x60' column at each grid intersection.","completion":"// Strategy: Place columns at all grid intersections.\n// 1. Find the specific column type.\nFamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Concrete-Rectangular 30x60\") as FamilySymbol;\n// 2. Get the base level and the list of all grids.\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nvar grids = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().ToList();\n// 3. Verify that the necessary elements exist.\nif (columnSymbol != null && level != null && grids.Count > 1)\n{\n    // 4. Activate the symbol.\n    if (!columnSymbol.IsActive) columnSymbol.Activate();\n    // 5. Iterate through each pair of grids to find intersections.\n    for (int i = 0; i < grids.Count; i++)\n    {\n        for (int j = i + 1; j < grids.Count; j++)\n        {\n            var result = grids[i].Curve.Intersect(grids[j].Curve, out IntersectionResultArray results);\n            if (result == SetComparisonResult.Overlap && results != null)\n            {\n                foreach (IntersectionResult ir in results)\n                {\n                    // 6. Place a column at each intersection point.\n                    doc.Create.NewFamilyInstance(ir.XYZPoint, columnSymbol, level, StructuralType.Column);\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 150mm' y nómbralo 'Interior - 15cm Yeso'.","completion":"// Estrategia: Duplicar un tipo de muro existente y renombrarlo.\n// 1. Encontrar el tipo de muro original por su nombre.\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Genérico - 150mm\") as WallType;\n// 2. Verificar que el tipo original existe.\nif(originalType != null)\n{\n    // 3. Duplicar el tipo y asignarle el nuevo nombre.\n    WallType newType = originalType.Duplicate(\"Interior - 15cm Yeso\") as WallType;\n}\nelse\n{\n    TaskDialog.Show(\"Error\", \"No se encontró el tipo de muro 'Genérico - 150mm'.\");\n}"}
{"prompt":"Duplicate the 'Generic - 150mm' wall type and name it 'Interior - 15cm Plaster'.","completion":"// Strategy: Duplicate an existing wall type and rename it.\n// 1. Find the original wall type by its name.\nWallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == \"Generic - 150mm\") as WallType;\n// 2. Verify that the original type exists.\nif(originalType != null)\n{\n    // 3. Duplicate the type and assign the new name.\n    WallType newType = originalType.Duplicate(\"Interior - 15cm Plaster\") as WallType;\n}\nelse\n{\n    TaskDialog.Show(\"Error\", \"Could not find wall type 'Generic - 150mm'.\");\n}"}
{"prompt":"Crea un tipo de muro 'Muro-Doble' de 30cm y luego crea un muro de ese tipo.","completion":"// Estrategia: Crear un nuevo tipo de muro y luego usarlo para crear un muro.\n// Paso 1: Crear el nuevo tipo de muro.\nWallType newWallType = null;\nWallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"Muro-Doble\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) \n    {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(0.3, UnitTypeId.Meters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}\n// Paso 2: Crear un muro con el nuevo tipo, si se creó correctamente.\nif(newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    if(level != null){\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);\n    }\n}"}
{"prompt":"Create a 30cm 'Double-Wall' type and then create a wall of that type.","completion":"// Strategy: Create a new wall type and then use it to create a wall.\n// Step 1: Create the new wall type.\nWallType newWallType = null;\nWallType wallTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif (wallTypeToDuplicate != null)\n{\n    newWallType = wallTypeToDuplicate.Duplicate(\"Double-Wall\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) \n    {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(0.3, UnitTypeId.Meters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}\n// Step 2: Create a wall with the new type, if it was created successfully.\nif(newWallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    if(level != null){\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10,0,0));\n        Wall.Create(doc, wallCurve, newWallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);\n    }\n}"}
{"prompt":"Selecciona todos los muros del 'Nivel 2' y cambia su comentario a 'REVISAR AISLAMIENTO'.","completion":"// Estrategia: Filtrar elementos por nivel y modificar un parámetro en lote.\n// 1. Encontrar el nivel 'Nivel 2'.\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif(level2 != null){\n    // 2. Filtrar todos los muros en ese nivel.\n    var wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id);\n    // 3. Iterar y cambiar el parámetro 'Comentarios'.\n    foreach(Wall wall in wallsOnLevel2)\n    {\n        Parameter commentsParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if(commentsParam != null) commentsParam.Set(\"REVISAR AISLAMIENTO\");\n    }\n}"}
{"prompt":"Select all walls on 'Level 2' and change their comment to 'REVIEW INSULATION'.","completion":"// Strategy: Filter elements by level and batch-modify a parameter.\n// 1. Find 'Level 2'.\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif(level2 != null){\n    // 2. Filter all walls on that level.\n    var wallsOnLevel2 = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level2.Id);\n    // 3. Iterate and change the 'Comments' parameter.\n    foreach(Wall wall in wallsOnLevel2)\n    {\n        Parameter commentsParam = wall.get_Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS);\n        if(commentsParam != null) commentsParam.Set(\"REVIEW INSULATION\");\n    }\n}"}
{"prompt":"Crea un nuevo parámetro de proyecto compartido de texto llamado 'Notas Adicionales' para muros y puertas.","completion":"string paramName = \"Notas Adicionales\";\nCategorySet categories = doc.Application.Create.NewCategorySet();\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\nstring sharedParamsFilePath = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamsFilePath) || !System.IO.File.Exists(sharedParamsFilePath)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\RevitSharedParameters.txt\"; System.IO.File.Create(sharedParamsFilePath).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup defGroup = defFile.Groups.EnsureDefinitionGroup(\"General\");\nExternalDefinition def = defGroup.Definitions.Create(new ExternalDefinitionCreationOptions(paramName, SpecTypeId.String.Text)) as ExternalDefinition;\ndoc.ParameterBindings.Insert(doc.Application.Create.NewInstanceBinding(categories), def, BuiltInParameterGroup.PG_DATA);"}
{"prompt":"Create a new shared text project parameter named 'Additional Notes' for walls and doors.","completion":"string paramName = \"Additional Notes\";\nCategorySet categories = doc.Application.Create.NewCategorySet();\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\nstring sharedParamsFilePath = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamsFilePath) || !System.IO.File.Exists(sharedParamsFilePath)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\RevitSharedParameters.txt\"; System.IO.File.Create(sharedParamsFilePath).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup defGroup = defFile.Groups.EnsureDefinitionGroup(\"General\");\nExternalDefinition def = defGroup.Definitions.Create(new ExternalDefinitionCreationOptions(paramName, SpecTypeId.String.Text)) as ExternalDefinition;\ndoc.ParameterBindings.Insert(doc.Application.Create.NewInstanceBinding(categories), def, BuiltInParameterGroup.PG_DATA);"}
{"prompt":"Crea un nivel 'Roof Terrace' a 15m.","completion":"if(!new FilteredElementCollector(doc).OfClass(typeof(Level)).Any(l => l.Name == \"Roof Terrace\"))\n{\n    double elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\n    Level.Create(doc, elev).Name = \"Roof Terrace\";\n}"}
{"prompt":"Create a 'Roof Terrace' level at 15m.","completion":"if(!new FilteredElementCollector(doc).OfClass(typeof(Level)).Any(l => l.Name == \"Roof Terrace\"))\n{\n    double elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\n    Level.Create(doc, elev).Name = \"Roof Terrace\";\n}"}
{"prompt":"Coloca postes de iluminación cada 10m en un camino de 100m.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Place lighting posts every 10m along a 100m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Genera una cuadrícula de columnas 5x5 con separación de 8 metros.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Generate a 5x5 column grid with 8-meter spacing.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Crea una habitación circular con un radio de 5 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Arc.Create(XYZ.Zero, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY));\n    RoomSeparationLine.Create(doc, profile, doc.ActiveView.SketchPlane.Id, doc.ActiveView);\n    doc.Create.NewRoom(level, new UV(0,0));\n}"}
{"prompt":"Create a circular room with a 5-meter radius.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Arc.Create(XYZ.Zero, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY));\n    RoomSeparationLine.Create(doc, profile, doc.ActiveView.SketchPlane.Id, doc.ActiveView);\n    doc.Create.NewRoom(level, new UV(0,0));\n}"}
{"prompt":"Importa topografía georreferenciada desde un archivo LandXML.","completion":"LandXMLImportOptions options = new LandXMLImportOptions();\noptions.XYLengthUnit = XYLengthUnit.Meter;\ndoc.Import(@\"C:\\CAD\\site.xml\", options);"}
{"prompt":"Import a georeferenced survey from a LandXML file.","completion":"LandXMLImportOptions options = new LandXMLImportOptions();\noptions.XYLengthUnit = XYLengthUnit.Meter;\ndoc.Import(@\"C:\\CAD\\site.xml\", options);"}
{"prompt":"Crea una vista de plano de plafón reflejado para el Nivel 1.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    rcp.Name = \"Plano de Plafón Nivel 1\";\n}"}
{"prompt":"Create a Reflected Ceiling Plan view for Level 1.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    rcp.Name = \"Level 1 Ceiling Plan\";\n}"}
{"prompt":"Añade un plano de referencia horizontal llamado 'Eje Central A'.","completion":"ReferencePlane rp = ReferencePlane.Create(doc, XYZ.Zero, XYZ.BasisX, XYZ.BasisZ, doc.ActiveView);\nrp.Name = \"Eje Central A\";"}
{"prompt":"Add a horizontal reference plane named 'Centerline A'.","completion":"ReferencePlane rp = ReferencePlane.Create(doc, XYZ.Zero, XYZ.BasisX, XYZ.BasisZ, doc.ActiveView);\nrp.Name = \"Centerline A\";"}
{"prompt":"Duplica el nivel 1 con un desfase de 3m y llámalo 'Mezanine'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(level1 != null)\n{\n    double newElevation = level1.Elevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Duplicate level 1 with a 3m offset and name it 'Mezzanine'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(level1 != null)\n{\n    double newElevation = level1.Elevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Etiqueta todas las habitaciones con su área.","completion":"var rooms = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType();\nforeach(Room room in rooms)\n{\n    if(room.Location != null)\n    {\n        doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(room.Location.Point.X, room.Location.Point.Y), doc.ActiveView.Id);\n    }\n}"}
{"prompt":"Tag all rooms with their area.","completion":"var rooms = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType();\nforeach(Room room in rooms)\n{\n    if(room.Location != null)\n    {\n        doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(room.Location.Point.X, room.Location.Point.Y), doc.ActiveView.Id);\n    }\n}"}
{"prompt":"Exporta una lista de materiales a un archivo de texto.","completion":"var materials = new FilteredElementCollector(doc).OfClass(typeof(Material));\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(\"C:\\\\Exports\\\\materials.txt\"))\n{\n    writer.WriteLine(\"Nombre del Material\");\n    foreach(Material m in materials)\n    {\n        writer.WriteLine(m.Name);\n    }\n}"}
{"prompt":"Export a list of materials to a text file.","completion":"var materials = new FilteredElementCollector(doc).OfClass(typeof(Material));\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(\"C:\\\\Exports\\\\materials.txt\"))\n{\n    writer.WriteLine(\"Material Name\");\n    foreach(Material m in materials)\n    {\n        writer.WriteLine(m.Name);\n    }\n}"}
{"prompt":"Aísla temporalmente todo el mobiliario en la vista activa.","completion":"var furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nif(furnitureIds.Any())\n{\n    doc.ActiveView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Temporarily isolate all furniture in the active view.","completion":"var furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nif(furnitureIds.Any())\n{\n    doc.ActiveView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Coloca un ducto redondo de 200mm de diámetro.","completion":"DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).FirstOrDefault(dt => dt.Shape == ConnectorProfileType.Round) as DuctType;\nMEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(st => st.SystemClassification == MEPSystemClassification.SupplyAir);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(ductType != null && systemType != null && level != null)\n{\n    Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, new XYZ(0,0,3), new XYZ(10,0,3));\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(200, UnitTypeId.Millimeters));\n}"}
{"prompt":"Place a 200mm diameter round duct.","completion":"DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).FirstOrDefault(dt => dt.Shape == ConnectorProfileType.Round) as DuctType;\nMEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(st => st.SystemClassification == MEPSystemClassification.SupplyAir);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(ductType != null && systemType != null && level != null)\n{\n    Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, new XYZ(0,0,3), new XYZ(10,0,3));\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(200, UnitTypeId.Millimeters));\n}"}
{"prompt":"Crea un suelo con un contorno definido por el usuario.","completion":"UIDocument uidoc = new UIDocument(doc);\nIList<Reference> pickedRefs = uidoc.Selection.PickObjects(ObjectType.Element, \"Selecciona las líneas de contorno\");\nCurveLoop profile = new CurveLoop();\nforeach(Reference r in pickedRefs)\n{\n    ModelCurve mc = doc.GetElement(r) as ModelCurve;\n    if(mc != null) profile.Append(mc.GeometryCurve);\n}\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nLevel level = doc.ActiveView.GenLevel;\nif(floorType != null && level != null && profile.IsOpen() == false)\n{\n    Floor.Create(doc, new List<CurveLoop>{profile}, floorType.Id, level.Id);\n}"}
{"prompt":"Create a floor with a user-defined boundary.","completion":"UIDocument uidoc = new UIDocument(doc);\nIList<Reference> pickedRefs = uidoc.Selection.PickObjects(ObjectType.Element, \"Select the boundary lines\");\nCurveLoop profile = new CurveLoop();\nforeach(Reference r in pickedRefs)\n{\n    ModelCurve mc = doc.GetElement(r) as ModelCurve;\n    if(mc != null) profile.Append(mc.GeometryCurve);\n}\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nLevel level = doc.ActiveView.GenLevel;\nif(floorType != null && level != null && profile.IsOpen() == false)\n{\n    Floor.Create(doc, new List<CurveLoop>{profile}, floorType.Id, level.Id);\n}"}
{"prompt":"Encuentra todos los elementos dentro de la habitación 'Sala de Juntas'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Sala de Juntas\") as Room;\nif(room != null)\n{\n    BoundingBoxXYZ roomBbox = room.get_BoundingBox(null);\n    Outline roomOutline = new Outline(roomBbox.Min, roomBbox.Max);\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(roomOutline);\n    var elementsInRoom = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Find all elements inside the 'Conference Room'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Conference Room\") as Room;\nif(room != null)\n{\n    BoundingBoxXYZ roomBbox = room.get_BoundingBox(null);\n    Outline roomOutline = new Outline(roomBbox.Min, roomBbox.Max);\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(roomOutline);\n    var elementsInRoom = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Exporta todos los muros con un parámetro de Marca a un archivo CSV.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(System.IO.StreamWriter sw = new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"ElementId,Mark\");\n  foreach(var w in walls){\n    Parameter p=w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n    if(p!=null && p.HasValue) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Export all walls with a Mark parameter to a CSV file.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(System.IO.StreamWriter sw = new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"ElementId,Mark\");\n  foreach(var w in walls){\n    Parameter p=w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n    if(p!=null && p.HasValue) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Crea una losa de cimentación de 20x15 metros.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundationLevel != null && slabType != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(20,15,0));\n    Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n}"}
{"prompt":"Create a 20x15 meter foundation slab.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundationLevel != null && slabType != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(20,15,0));\n    Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n}"}
{"prompt":"Añade montantes a todas las líneas de rejilla de un muro cortina seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro cortina\");\nWall curtainWall = doc.GetElement(pickedRef) as Wall;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif (curtainWall != null && curtainWall.CurtainGrid != null && mullionType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    foreach (ElementId gridLineId in grid.GetVGridLineIds()) grid.AddMullions(doc.GetElement(gridLineId) as CurtainGridLine, mullionType, false);\n    foreach (ElementId gridLineId in grid.GetUGridLineIds()) grid.AddMullions(doc.GetElement(gridLineId) as CurtainGridLine, mullionType, false);\n}"}
{"prompt":"Add mullions to all grid lines of a selected curtain wall.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a curtain wall\");\nWall curtainWall = doc.GetElement(pickedRef) as Wall;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif (curtainWall != null && curtainWall.CurtainGrid != null && mullionType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    foreach (ElementId gridLineId in grid.GetVGridLineIds()) grid.AddMullions(doc.GetElement(gridLineId) as CurtainGridLine, mullionType, false);\n    foreach (ElementId gridLineId in grid.GetUGridLineIds()) grid.AddMullions(doc.GetElement(gridLineId) as CurtainGridLine, mullionType, false);\n}"}
{"prompt":"Rota un elemento seleccionado 90 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nElement elem = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nif (lp != null)\n{\n    Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n    ElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI / 2.0);\n}"}
{"prompt":"Rotate a selected element 90 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nElement elem = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nif (lp != null)\n{\n    Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n    ElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI / 2.0);\n}"}
{"prompt":"Crea un sistema de vigas en un forjado seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference floorRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un forjado para el sistema de vigas\");\nFloor floor = doc.GetElement(floorRef) as Floor;\nif(floor != null)\n{\n    // La creación completa requiere más lógica para definir el contorno y la dirección\n    BeamSystem.Create(doc, new List<Curve>(), floor.Id);\n}"}
{"prompt":"Create a beam system on a selected floor slab.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference floorRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor for the beam system\");\nFloor floor = doc.GetElement(floorRef) as Floor;\nif(floor != null){\n    // Full creation requires more logic to define boundary and direction\n    BeamSystem.Create(doc, new List<Curve>(), floor.Id);\n}"}
{"prompt":"Exporta una lista de todas las advertencias del proyecto a un archivo de texto en el escritorio.","completion":"string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nstring filePath = System.IO.Path.Combine(desktopPath, \"RevitWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nusing (System.IO.StreamWriter writer = new System.IO.StreamWriter(filePath))\n{\n    foreach (FailureMessage fm in warnings)\n    {\n        writer.WriteLine(fm.GetDescriptionText());\n    }\n}"}
{"prompt":"Export a list of all project warnings to a text file on the desktop.","completion":"string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nstring filePath = System.IO.Path.Combine(desktopPath, \"RevitWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nusing (System.IO.StreamWriter writer = new System.IO.StreamWriter(filePath))\n{\n    foreach (FailureMessage fm in warnings)\n    {\n        writer.WriteLine(fm.GetDescriptionText());\n    }\n}"}
{"prompt":"Crea una vista de borrador (drafting view) llamada 'Detalles Típicos'.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Drafting);\nif(vft != null) {\n    ViewDrafting draftingView = ViewDrafting.Create(doc, vft.Id);\n    draftingView.Name = \"Detalles Típicos\";\n}"}
{"prompt":"Create a drafting view named 'Typical Details'.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Drafting);\nif(vft != null) {\n    ViewDrafting draftingView = ViewDrafting.Create(doc, vft.Id);\n    draftingView.Name = \"Typical Details\";\n}"}
{"prompt":"Muestra un diálogo para que el usuario introduzca un texto.","completion":"TaskDialog.Show(\"Entrada de Usuario\", \"Por favor, introduce un valor:\", TaskDialogCommonButtons.Ok); // La API de Revit no tiene un input box nativo, esto es una simulación."}
{"prompt":"Show a dialog for the user to input text.","completion":"TaskDialog.Show(\"User Input\", \"Please enter a value:\", TaskDialogCommonButtons.Ok); // The Revit API does not have a native input box, this is a simulation."}
{"prompt":"Cambia el tipo de todas las columnas seleccionadas a 'Columna de Hormigón 450x450'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nFamilySymbol targetType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Columna de Hormigón 450x450\");\nif(targetType != null && selectedIds.Any()){\n    foreach(ElementId id in selectedIds){\n        FamilyInstance fi = doc.GetElement(id) as FamilyInstance;\n        if(fi != null && fi.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralColumns) fi.Symbol = targetType;\n    }\n}"}
{"prompt":"Change the type of all selected columns to 'Concrete Column 450x450'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nFamilySymbol targetType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Concrete Column 450x450\");\nif(targetType != null && selectedIds.Any()){\n    foreach(ElementId id in selectedIds){\n        FamilyInstance fi = doc.GetElement(id) as FamilyInstance;\n        if(fi != null && fi.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralColumns) fi.Symbol = targetType;\n    }\n}"}
{"prompt":"Crea un suelo siguiendo el contorno de una habitación seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference roomRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una habitación\");\nRoom room = doc.GetElement(roomRef) as Room;\nif(room != null){\n    IList<IList<BoundarySegment>> segments = room.GetBoundarySegments(new SpatialElementBoundaryOptions());\n    CurveLoop profile = new CurveLoop();\n    foreach(BoundarySegment seg in segments.First()) profile.Append(seg.GetCurve());\n    Floor.Create(doc, new List<CurveLoop>{profile}, new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstElementId(), room.LevelId);\n}"}
{"prompt":"Create a floor following the boundary of a selected room.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference roomRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a room\");\nRoom room = doc.GetElement(roomRef) as Room;\nif(room != null){\n    IList<IList<BoundarySegment>> segments = room.GetBoundarySegments(new SpatialElementBoundaryOptions());\n    CurveLoop profile = new CurveLoop();\n    foreach(BoundarySegment seg in segments.First()) profile.Append(seg.GetCurve());\n    Floor.Create(doc, new List<CurveLoop>{profile}, new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstElementId(), room.LevelId);\n}"}
{"prompt":"Encuentra todas las familias que contienen 'Genérico' en su nombre.","completion":"var genericFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Genérico\")).ToList();"}
{"prompt":"Find all families containing 'Generic' in their name.","completion":"var genericFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Generic\")).ToList();"}
{"prompt":"Aplica un desfase de -10cm a todos los muros seleccionados desde su línea de ubicación.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()){\n    double offset = UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Centimeters);\n    foreach(ElementId id in selectedIds){\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null) wall.get_Parameter(BuiltInParameter.WALL_KEY_REF_PARAM).Set((int)WallLocationLine.CoreCenterline);\n    }\n}"}
{"prompt":"Apply a -10cm offset to all selected walls from their location line.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()){\n    double offset = UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Centimeters);\n    foreach(ElementId id in selectedIds){\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null) wall.get_Parameter(BuiltInParameter.WALL_KEY_REF_PARAM).Set((int)WallLocationLine.CoreCenterline);\n    }\n}"}
{"prompt":"Duplica la vista activa con detalles.","completion":"View activeView = doc.ActiveView;\nElementId newViewId = activeView.Duplicate(ViewDuplicateOption.WithDetailing);"}
{"prompt":"Duplicate the active view with detailing.","completion":"View activeView = doc.ActiveView;\nElementId newViewId = activeView.Duplicate(ViewDuplicateOption.WithDetailing);"}
{"prompt":"Establece la escala de la vista activa a 1:50.","completion":"View activeView = doc.ActiveView;\nif(activeView.CanModifyViewScale())\n{\n    activeView.Scale = 50;\n}"}
{"prompt":"Set the active view's scale to 1:50.","completion":"View activeView = doc.ActiveView;\nif(activeView.CanModifyViewScale())\n{\n    activeView.Scale = 50;\n}"}
{"prompt":"Crea un nuevo tipo de suelo 'Suelo Genérico 30cm'.","completion":"FloorType floorTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nif(floorTypeToDuplicate != null){\n    FloorType newType = floorTypeToDuplicate.Duplicate(\"Suelo Genérico 30cm\") as FloorType;\n    CompoundStructure cs = newType.GetCompoundStructure();\n    if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n    newType.SetCompoundStructure(cs);\n}"}
{"prompt":"Create a new floor type 'Generic Floor 30cm'.","completion":"FloorType floorTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nif(floorTypeToDuplicate != null){\n    FloorType newType = floorTypeToDuplicate.Duplicate(\"Generic Floor 30cm\") as FloorType;\n    CompoundStructure cs = newType.GetCompoundStructure();\n    if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n    newType.SetCompoundStructure(cs);\n}"}
{"prompt":"Haz que todos los muros seleccionados sean estructurales.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nforeach(ElementId id in selectedIds){\n    Wall wall = doc.GetElement(id) as Wall;\n    if(wall != null) wall.get_Parameter(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT).Set(1);\n}"}
{"prompt":"Make all selected walls structural.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nforeach(ElementId id in selectedIds){\n    Wall wall = doc.GetElement(id) as Wall;\n    if(wall != null) wall.get_Parameter(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT).Set(1);\n}"}
{"prompt":"Obtén todos los muros del Nivel 1 que son estructurales.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(level1 != null){\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    var structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Get all walls on Level 1 that are structural.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(level1 != null){\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    var structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Crea una nueva tabla de planificación para Pilares Estructurales.","completion":"ElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = \"Tabla de Pilares Estructurales\";"}
{"prompt":"Create a new schedule for Structural Columns.","completion":"ElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = \"Structural Column Schedule\";"}
{"prompt":"Añade los campos 'Nivel', 'Marca' y 'Volumen' a la tabla de pilares.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\"));\nif(schedule != null){\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.FAMILY_LEVEL_PARAM));\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.ALL_MODEL_MARK));\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.HOST_VOLUME_COMPUTED));\n    if(levelField != null) def.AddField(levelField);\n    if(markField != null) def.AddField(markField);\n    if(volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Add the 'Level', 'Mark', and 'Volume' fields to the column schedule.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Column\"));\nif(schedule != null){\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.FAMILY_LEVEL_PARAM));\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.ALL_MODEL_MARK));\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.HOST_VOLUME_COMPUTED));\n    if(levelField != null) def.AddField(levelField);\n    if(markField != null) def.AddField(markField);\n    if(volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Crea una nueva hoja A3 y colócale una leyenda.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A3\")) as FamilySymbol;\nViewLegend legendView = new FilteredElementCollector(doc).OfClass(typeof(ViewLegend)).FirstOrDefault() as ViewLegend;\nif(titleBlock != null && legendView != null){\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Leyendas\";\n    newSheet.SheetNumber = \"G-002\";\n    if(Viewport.CanAddViewToSheet(doc, newSheet.Id, legendView.Id)){\n        Viewport.Create(doc, newSheet.Id, legendView.Id, new XYZ(0.5, 0.5, 0));\n    }\n}"}
{"prompt":"Create a new A3 sheet and place a legend on it.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A3\")) as FamilySymbol;\nViewLegend legendView = new FilteredElementCollector(doc).OfClass(typeof(ViewLegend)).FirstOrDefault() as ViewLegend;\nif(titleBlock != null && legendView != null){\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Legends\";\n    newSheet.SheetNumber = \"G-002\";\n    if(Viewport.CanAddViewToSheet(doc, newSheet.Id, legendView.Id)){\n        Viewport.Create(doc, newSheet.Id, legendView.Id, new XYZ(0.5, 0.5, 0));\n    }\n}"}
{"prompt":"Obtén todas las familias de puertas cargadas en el proyecto.","completion":"var doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory?.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Get all door families loaded in the project.","completion":"var doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory?.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Aplica el estilo visual 'Rayos X' a la vista 3D activa.","completion":"View3D view3d = doc.ActiveView as View3D;\nif(view3d != null){\n    view3d.DisplayStyle = DisplayStyle.Wireframe;\n    // La API no tiene un modo 'Rayos X' directo, Wireframe es lo más cercano.\n}"}
{"prompt":"Apply the 'X-Ray' visual style to the active 3D view.","completion":"View3D view3d = doc.ActiveView as View3D;\nif(view3d != null){\n    view3d.DisplayStyle = DisplayStyle.Wireframe;\n    // The API does not have a direct 'X-Ray' mode, Wireframe is the closest equivalent.\n}"}
{"prompt":"Crea una losa de cimentación estructural de 40cm de espesor.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundationLevel != null && slabType != null){\n    FloorType newSlabType = slabType.Duplicate(\"Losa Cimentación 40cm\") as FloorType;\n    CompoundStructure cs = newSlabType.GetCompoundStructure();\n    if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(40, UnitTypeId.Centimeters));\n    newSlabType.SetCompoundStructure(cs);\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(10,10,0));\n    Floor.Create(doc, new List<CurveLoop>{profile}, newSlabType.Id, foundationLevel.Id);\n}"}
{"prompt":"Create a structural foundation slab 40cm thick.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundationLevel != null && slabType != null){\n    FloorType newSlabType = slabType.Duplicate(\"Foundation Slab 40cm\") as FloorType;\n    CompoundStructure cs = newSlabType.GetCompoundStructure();\n    if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(40, UnitTypeId.Centimeters));\n    newSlabType.SetCompoundStructure(cs);\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(10,10,0));\n    Floor.Create(doc, new List<CurveLoop>{profile}, newSlabType.Id, foundationLevel.Id);\n}"}
{"prompt":"Genera un reporte con el área de todas las habitaciones del proyecto.","completion":"StringBuilder report = new StringBuilder(\"Reporte de Áreas de Habitaciones:\\n\");\nvar rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>();\nforeach(Room room in rooms)\n{\n    double area = room.get_Parameter(BuiltInParameter.ROOM_AREA).AsDouble();\n    report.AppendLine($\"- {room.Name}: {UnitUtils.ConvertFromInternalUnits(area, UnitTypeId.SquareMeters):F2} m²\");\n}\nTaskDialog.Show(\"Reporte de Áreas\", report.ToString());"}
{"prompt":"Generate a report with the area of all rooms in the project.","completion":"StringBuilder report = new StringBuilder(\"Room Area Report:\\n\");\nvar rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>();\nforeach(Room room in rooms)\n{\n    double area = room.get_Parameter(BuiltInParameter.ROOM_AREA).AsDouble();\n    report.AppendLine($\"- {room.Name}: {UnitUtils.ConvertFromInternalUnits(area, UnitTypeId.SquareMeters):F2} m²\");\n}\nTaskDialog.Show(\"Area Report\", report.ToString());"}
{"prompt":"Crea un techo por extrusión con un perfil en arco.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nif(level != null && roofType != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n    ReferencePlane refPlane = ReferencePlane.Create(doc, new XYZ(0,0,level.Elevation), XYZ.BasisY, doc.ActiveView);\n    doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n}"}
{"prompt":"Create an extrusion roof with an arc profile.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nif(level != null && roofType != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n    ReferencePlane refPlane = ReferencePlane.Create(doc, new XYZ(0,0,level.Elevation), XYZ.BasisY, doc.ActiveView);\n    doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n}"}
{"prompt":"Oculta todos los elementos de anotación en la vista activa.","completion":"var annotationCategories = new List<BuiltInCategory>\n{\n    BuiltInCategory.OST_GenericAnnotation,\n    BuiltInCategory.OST_TextNotes,\n    BuiltInCategory.OST_Tags,\n    BuiltInCategory.OST_Dimensions\n};\nvar multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\nvar elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\nif(elementsToHide.Any())\n{\n    doc.ActiveView.HideElements(elementsToHide);\n}"}
{"prompt":"Hide all annotation elements in the active view.","completion":"var annotationCategories = new List<BuiltInCategory>\n{\n    BuiltInCategory.OST_GenericAnnotation,\n    BuiltInCategory.OST_TextNotes,\n    BuiltInCategory.OST_Tags,\n    BuiltInCategory.OST_Dimensions\n};\nvar multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\nvar elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\nif(elementsToHide.Any())\n{\n    doc.ActiveView.HideElements(elementsToHide);\n}"}
{"prompt":"Encuentra todas las vistas que no tienen una plantilla de vista asignada.","completion":"var viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View))\n    .Cast<View>()\n    .Where(v => v.CanBePrinted() && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId)\n    .ToList();\nStringBuilder sb = new StringBuilder(\"Vistas sin plantilla:\\n\");\nforeach(var view in viewsWithoutTemplate)\n{\n    sb.AppendLine(view.Name);\n}\nTaskDialog.Show(\"Auditoría de Vistas\", sb.ToString());"}
{"prompt":"Find all views that do not have a view template assigned.","completion":"var viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View))\n    .Cast<View>()\n    .Where(v => v.CanBePrinted() && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId)\n    .ToList();\nStringBuilder sb = new StringBuilder(\"Views without template:\\n\");\nforeach(var view in viewsWithoutTemplate)\n{\n    sb.AppendLine(view.Name);\n}\nTaskDialog.Show(\"View Audit\", sb.ToString());"}
{"prompt":"Establece el parámetro 'Marca' de todos los muros seleccionados a 'M-01'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any())\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall)\n        {\n            Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n            if(markParam != null) markParam.Set(\"M-01\");\n        }\n    }\n}"}
{"prompt":"Set the 'Mark' parameter of all selected walls to 'W-01'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any())\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall)\n        {\n            Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n            if(markParam != null) markParam.Set(\"W-01\");\n        }\n    }\n}"}
{"prompt":"Crea 10 worksets de arquitectura.","completion":"if(doc.IsWorkshared)\n{\n    var worksetNames = new List<string> { \"TAD_ARQ_MAM\", \"TAD_ARQ_ACA\", \"TAD_ARQ_PLA\", \"TAD_ARQ_PSO\", \"TAD_ARQ_HRE\", \"TAD_ARQ_ALU\", \"TAD_ARQ_CAR\", \"TAD_ARQ_MOB\", \"TAD_ARQ_PLO\", \"TAD_ARQ_EXT\" };\n    foreach(string name in worksetNames)\n    {\n        Workset.Create(doc, name);\n    }\n}"}
{"prompt":"Create 10 architectural worksets.","completion":"if(doc.IsWorkshared)\n{\n    var worksetNames = new List<string> { \"TAD_ARQ_WALLS\", \"TAD_ARQ_FINISHES\", \"TAD_ARQ_CEILINGS\", \"TAD_ARQ_FLOORS\", \"TAD_ARQ_RAILINGS\", \"TAD_ARQ_WINDOWS\", \"TAD_ARQ_CARPENTRY\", \"TAD_ARQ_FURNITURE\", \"TAD_ARQ_PLUMBING\", \"TAD_ARQ_EXTERIOR\" };\n    foreach(string name in worksetNames)\n    {\n        Workset.Create(doc, name);\n    }\n}"}
{"prompt":"Cambia el nombre de todas las tablas que contienen 'Muros' por 'Cuantificación de Muros'.","completion":"var schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"Muros\"));\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"Muros\", \"Cuantificación de Muros\");\n}"}
{"prompt":"Rename all schedules containing 'Walls' to 'Wall Quantity Takeoff'.","completion":"var schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"Walls\"));\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"Walls\", \"Wall Quantity Takeoff\");\n}"}
{"prompt":"Encuentra todas las familias de anotación y muestra sus nombres.","completion":"var annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation);\nStringBuilder sb = new StringBuilder(\"Familias de Anotación:\\n\");\nforeach(var fam in annotationFamilies)\n{\n    sb.AppendLine(fam.Name);\n}\nTaskDialog.Show(\"Familias de Anotación\", sb.ToString());"}
{"prompt":"Find all annotation families and display their names.","completion":"var annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation);\nStringBuilder sb = new StringBuilder(\"Annotation Families:\\n\");\nforeach(var fam in annotationFamilies)\n{\n    sb.AppendLine(fam.Name);\n}\nTaskDialog.Show(\"Annotation Families\", sb.ToString());"}
{"prompt":"Crea un tipo de cota lineal con texto rojo.","completion":"DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\nif(linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"Cota Roja\") as DimensionType;\n    if(newDimType != null)\n    {\n        newDimType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(255,0,0).GetElementId());\n    }\n}"}
{"prompt":"Create a linear dimension type with red text.","completion":"DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\nif(linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"Red Dimension\") as DimensionType;\n    if(newDimType != null)\n    {\n        newDimType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(255,0,0).GetElementId());\n    }\n}"}
{"prompt":"Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif(furnitureCat != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Set the visibility of the 'Furniture' category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif(furnitureCat != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Éxito\", $\"Se eliminaron {unusedWallTypes.Count} tipos de muro no utilizados.\");\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Success\", $\"Deleted {unusedWallTypes.Count} unused wall types.\");\n}"}
{"prompt":"Crea una nueva hoja A1 y coloca la vista 'Planta Baja' en ella.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A1\")) as FamilySymbol;\nView viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Planta Baja\") as View;\nif (titleBlock != null && viewToPlace != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Planta Arquitectónica\";\n    newSheet.SheetNumber = \"A-101\";\n    if (Viewport.CanAddViewToSheet(doc, newSheet.Id, viewToPlace.Id))\n    {\n        Viewport.Create(doc, newSheet.Id, viewToPlace.Id, new XYZ(0.5, 0.5, 0));\n    }\n}"}
{"prompt":"Create a new A1 sheet and place the 'Ground Floor' view on it.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A1\")) as FamilySymbol;\nView viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Ground Floor\") as View;\nif (titleBlock != null && viewToPlace != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Architectural Plan\";\n    newSheet.SheetNumber = \"A-101\";\n    if (Viewport.CanAddViewToSheet(doc, newSheet.Id, viewToPlace.Id))\n    {\n        Viewport.Create(doc, newSheet.Id, viewToPlace.Id, new XYZ(0.5, 0.5, 0));\n    }\n}"}
{"prompt":"Reporta el número total de advertencias en el proyecto.","completion":"int warningCount = doc.GetWarnings().Count;\nTaskDialog.Show(\"Auditoría de Proyecto\", $\"El proyecto tiene {warningCount} advertencias.\");"}
{"prompt":"Report the total number of warnings in the project.","completion":"int warningCount = doc.GetWarnings().Count;\nTaskDialog.Show(\"Project Audit\", $\"The project has {warningCount} warnings.\");"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-60' basado en un tipo existente, y asigna '60 min' al parámetro 'Fire Rating'.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"Puerta RF-60\") as FamilySymbol;\n    Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n    if (fireRatingParam != null && !fireRatingParam.IsReadOnly)\n    {\n        fireRatingParam.Set(\"60 min\");\n    }\n}"}
{"prompt":"Create a new door type named 'FR-60 Door' based on an existing type, and set the 'Fire Rating' parameter to '60 min'.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"FR-60 Door\") as FamilySymbol;\n    Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n    if (fireRatingParam != null && !fireRatingParam.IsReadOnly)\n    {\n        fireRatingParam.Set(\"60 min\");\n    }\n}"}
{"prompt":"Mueve todos los elementos seleccionados 3 metros hacia arriba.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any())\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Move all selected elements 3 meters up.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any())\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Encuentra todos los muros que no están asociados a ningún nivel.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nvar unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToElements();\nTaskDialog.Show(\"Muros sin Nivel\", $\"Se encontraron {unassignedWalls.Count} muros sin nivel base.\");"}
{"prompt":"Find all walls that are not associated with any level.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nvar unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToElements();\nTaskDialog.Show(\"Unassigned Walls\", $\"Found {unassignedWalls.Count} walls without an associated base level.\");"}
{"prompt":"Exporta todos los tipos de familia de la categoría 'Mobiliario' a un archivo de texto.","completion":"string path = @\"C:\\RevitExports\\FurnitureTypes.txt\";\nvar furnitureTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType();\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(path))\n{\n    writer.WriteLine(\"Tipos de Mobiliario:\");\n    foreach(Element type in furnitureTypes)\n    {\n        writer.WriteLine(type.Name);\n    }\n}"}
{"prompt":"Export all family types from the 'Furniture' category to a text file.","completion":"string path = @\"C:\\RevitExports\\FurnitureTypes.txt\";\nvar furnitureTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType();\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(path))\n{\n    writer.WriteLine(\"Furniture Types:\");\n    foreach(Element type in furnitureTypes)\n    {\n        writer.WriteLine(type.Name);\n    }\n}"}
{"prompt":"Copia todos los muros del Nivel 1 al Nivel 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif (level1 != null && level2 != null)\n{\n    var wallsToCopy = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level1.Id).ToElementIds();\n    double elevationDiff = level2.Elevation - level1.Elevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(wallsToCopy.Any()) ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n}"}
{"prompt":"Copy all walls from Level 1 to Level 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif (level1 != null && level2 != null)\n{\n    var wallsToCopy = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level1.Id).ToElementIds();\n    double elevationDiff = level2.Elevation - level1.Elevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(wallsToCopy.Any()) ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n}"}
{"prompt":"Crea un nuevo tipo de texto de 3mm de color azul.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"3mm Azul\") as TextNoteType;\n    newType.get_Parameter(BuiltInParameter.TEXT_SIZE).Set(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Millimeters));\n    newType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(0,0,255).GetElementId());\n}"}
{"prompt":"Create a new 3mm text type in blue color.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"3mm Blue\") as TextNoteType;\n    newType.get_Parameter(BuiltInParameter.TEXT_SIZE).Set(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Millimeters));\n    newType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(0,0,255).GetElementId());\n}"}
{"prompt":"Encuentra todos los muros que midan más de 3 metros de alto.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nvar tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds();\nTaskDialog.Show(\"Resultado\", $\"Se encontraron {tallWalls.Count} muros con más de 3m de altura.\");"}
{"prompt":"Find all walls taller than 3 meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nvar tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds();\nTaskDialog.Show(\"Result\", $\"Found {tallWalls.Count} walls taller than 3m.\");"}
{"prompt":"Selecciona un muro y encuentra todas las tuberías que lo atraviesan.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nElement wall = doc.GetElement(wallRef);\nif(wall != null)\n{\n    ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n    var intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds();\n    TaskDialog.Show(\"Colisiones\", $\"El muro intersecta con {intersectingPipes.Count} tuberías.\");\n    if(intersectingPipes.Any()) uidoc.Selection.SetElementIds(intersectingPipes);\n}"}
{"prompt":"Select a wall and find all pipes passing through it.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\nElement wall = doc.GetElement(wallRef);\nif(wall != null)\n{\n    ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n    var intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds();\n    TaskDialog.Show(\"Clashes\", $\"The wall intersects with {intersectingPipes.Count} pipes.\");\n    if(intersectingPipes.Any()) uidoc.Selection.SetElementIds(intersectingPipes);\n}"}
{"prompt":"Crea una nota de texto que apunte al elemento seleccionado y diga 'REVISAR CLASH'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference targetRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\nif(targetRef != null)\n{\n    XYZ textLocation = uidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n    TextNoteOptions opts = new TextNoteOptions() { HorizontalAlignment = HorizontalAlignment.Left };\n    \n    TextNote note = TextNote.Create(doc, doc.ActiveView.Id, textLocation, \"REVISAR CLASH\", opts);\n    note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L, targetRef.GlobalPoint);\n}"}
{"prompt":"Create a text note pointing to the selected element that says 'REVIEW CLASH'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference targetRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\nif(targetRef != null)\n{\n    XYZ textLocation = uidoc.Selection.PickPoint(\"Choose the text location\");\n    TextNoteOptions opts = new TextNoteOptions() { HorizontalAlignment = HorizontalAlignment.Left };\n    \n    TextNote note = TextNote.Create(doc, doc.ActiveView.Id, \"REVIEW CLASH\", textLocation, opts);\n    note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L, targetRef.GlobalPoint);\n}"}
{"prompt":"Oculta todos los muros que sean más cortos de 2 metros.","completion":"double lengthThreshold = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nvar walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\nList<ElementId> shortWallIds = new List<ElementId>();\n\nforeach(Wall wall in walls)\n{\n    double length = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n    if(length < lengthThreshold)\n    {\n        shortWallIds.Add(wall.Id);\n    }\n}\n\nif(shortWallIds.Any())\n{\n    doc.ActiveView.HideElements(shortWallIds);\n    TaskDialog.Show(\"Resultado\", $\"Se ocultaron {shortWallIds.Count} muros cortos.\");\n}"}
{"prompt":"Hide all walls shorter than 2 meters.","completion":"double lengthThreshold = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nvar walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\nList<ElementId> shortWallIds = new List<ElementId>();\n\nforeach(Wall wall in walls)\n{\n    double length = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n    if(length < lengthThreshold)\n    {\n        shortWallIds.Add(wall.Id);\n    }\n}\n\nif(shortWallIds.Any())\n{\n    doc.ActiveView.HideElements(shortWallIds);\n    TaskDialog.Show(\"Result\", $\"Hid {shortWallIds.Count} short walls.\");\n}"}
{"prompt":"Crea una viga estructural entre (0,0,0) y (5,0,0) en el Nivel 1.","completion":"XYZ start = new XYZ(0, 0, 0);\nXYZ end = new XYZ(5, 0, 0);\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault();\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nif(beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Create a structural beam between (0,0,0) and (5,0,0) on Level 1.","completion":"XYZ start = new XYZ(0, 0, 0);\nXYZ end = new XYZ(5, 0, 0);\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault();\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nif(beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Crea una cortina mural rectangular del Nivel 1 al Nivel 2 entre (0,0) y (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Create a rectangular curtain wall from Level 1 to Level 2 between (0,0) and (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Carga la familia 'LightingFixture.rfa' e inserta una instancia en coordenadas (2,2,3) en Nivel 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Load the 'LightingFixture.rfa' family and insert an instance at (2,2,3) on Level 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Crea un techo esquemático rectangular en 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Create a schematic rectangular roof at 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Genera una losa de cimentación de 1m de espesor.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Create a 1m thick structural footing slab.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Crea un nuevo parámetro de proyecto compartido de texto llamado 'Notas Adicionales' para muros y puertas.","completion":"string paramName = \"Notas Adicionales\";\nCategorySet categories = doc.Application.Create.NewCategorySet();\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\nstring sharedParamsFilePath = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamsFilePath) || !System.IO.File.Exists(sharedParamsFilePath)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\RevitSharedParameters.txt\"; System.IO.File.Create(sharedParamsFilePath).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup defGroup = defFile.Groups.EnsureDefinitionGroup(\"General\");\nExternalDefinition def = defGroup.Definitions.Create(new ExternalDefinitionCreationOptions(paramName, SpecTypeId.String.Text)) as ExternalDefinition;\ndoc.ParameterBindings.Insert(doc.Application.Create.NewInstanceBinding(categories), def, BuiltInParameterGroup.PG_DATA);"}
{"prompt":"Create a new shared text project parameter named 'Additional Notes' for walls and doors.","completion":"string paramName = \"Additional Notes\";\nCategorySet categories = doc.Application.Create.NewCategorySet();\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Walls));\ncategories.Insert(doc.Settings.Categories.get_Item(BuiltInCategory.OST_Doors));\nstring sharedParamsFilePath = doc.Application.SharedParametersFilename;\nif (string.IsNullOrEmpty(sharedParamsFilePath) || !System.IO.File.Exists(sharedParamsFilePath)) { doc.Application.SharedParametersFilename = @\"C:\\temp\\RevitSharedParameters.txt\"; System.IO.File.Create(sharedParamsFilePath).Close(); }\nDefinitionFile defFile = doc.Application.OpenSharedParameterFile();\nDefinitionGroup defGroup = defFile.Groups.EnsureDefinitionGroup(\"General\");\nExternalDefinition def = defGroup.Definitions.Create(new ExternalDefinitionCreationOptions(paramName, SpecTypeId.String.Text)) as ExternalDefinition;\ndoc.ParameterBindings.Insert(doc.Application.Create.NewInstanceBinding(categories), def, BuiltInParameterGroup.PG_DATA);"}
{"prompt":"Crea un nivel 'Roof Terrace' a 15m.","completion":"if(!new FilteredElementCollector(doc).OfClass(typeof(Level)).Any(l => l.Name == \"Roof Terrace\"))\n{\n    double elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\n    Level.Create(doc, elev).Name = \"Roof Terrace\";\n}"}
{"prompt":"Create a 'Roof Terrace' level at 15m.","completion":"if(!new FilteredElementCollector(doc).OfClass(typeof(Level)).Any(l => l.Name == \"Roof Terrace\"))\n{\n    double elev = UnitUtils.ConvertToInternalUnits(15, UnitTypeId.Meters);\n    Level.Create(doc, elev).Name = \"Roof Terrace\";\n}"}
{"prompt":"Coloca postes de iluminación cada 10m en un camino de 100m.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Place lighting posts every 10m along a 100m path.","completion":"FamilySymbol lightSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_LightingFixtures).WhereElementIsElementType().FirstOrDefault(s => s.Name.Contains(\"Post\")) as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(lightSymbol != null && level != null)\n{\n    if(!lightSymbol.IsActive) lightSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters);\n    for(int i = 0; i <= 10; i++)\n    {\n        XYZ point = new XYZ(i * spacing, 0, 0);\n        doc.Create.NewFamilyInstance(point, lightSymbol, level, StructuralType.NonStructural);\n    }\n}"}
{"prompt":"Genera una cuadrícula de columnas 5x5 con separación de 8 metros.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Generate a 5x5 column grid with 8-meter spacing.","completion":"FamilySymbol columnSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnSymbol != null && level != null)\n{\n    if(!columnSymbol.IsActive) columnSymbol.Activate();\n    double spacing = UnitUtils.ConvertToInternalUnits(8, UnitTypeId.Meters);\n    for(int i=0; i<5; i++)\n    {\n        for(int j=0; j<5; j++)\n        {\n            doc.Create.NewFamilyInstance(new XYZ(i*spacing, j*spacing, 0), columnSymbol, level, StructuralType.Column);\n        }\n    }\n}"}
{"prompt":"Crea una habitación circular con un radio de 5 metros.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Arc.Create(XYZ.Zero, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY));\n    RoomSeparationLine.Create(doc, profile, doc.ActiveView.SketchPlane.Id, doc.ActiveView);\n    doc.Create.NewRoom(level, new UV(0,0));\n}"}
{"prompt":"Create a circular room with a 5-meter radius.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(level != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Arc.Create(XYZ.Zero, UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY));\n    RoomSeparationLine.Create(doc, profile, doc.ActiveView.SketchPlane.Id, doc.ActiveView);\n    doc.Create.NewRoom(level, new UV(0,0));\n}"}
{"prompt":"Importa topografía georreferenciada desde un archivo LandXML.","completion":"LandXMLImportOptions options = new LandXMLImportOptions();\noptions.XYLengthUnit = XYLengthUnit.Meter;\ndoc.Import(@\"C:\\CAD\\site.xml\", options);"}
{"prompt":"Import a georeferenced survey from a LandXML file.","completion":"LandXMLImportOptions options = new LandXMLImportOptions();\noptions.XYLengthUnit = XYLengthUnit.Meter;\ndoc.Import(@\"C:\\CAD\\site.xml\", options);"}
{"prompt":"Crea una vista de plano de plafón reflejado para el Nivel 1.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    rcp.Name = \"Plano de Plafón Nivel 1\";\n}"}
{"prompt":"Create a Reflected Ceiling Plan view for Level 1.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.CeilingPlan);\nLevel level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(vft != null && level1 != null)\n{\n    ViewPlan rcp = ViewPlan.Create(doc, vft.Id, level1.Id);\n    rcp.Name = \"Level 1 Ceiling Plan\";\n}"}
{"prompt":"Añade un plano de referencia horizontal llamado 'Eje Central A'.","completion":"ReferencePlane rp = ReferencePlane.Create(doc, XYZ.Zero, XYZ.BasisX, XYZ.BasisZ, doc.ActiveView);\nrp.Name = \"Eje Central A\";"}
{"prompt":"Add a horizontal reference plane named 'Centerline A'.","completion":"ReferencePlane rp = ReferencePlane.Create(doc, XYZ.Zero, XYZ.BasisX, XYZ.BasisZ, doc.ActiveView);\nrp.Name = \"Centerline A\";"}
{"prompt":"Duplica el nivel 1 con un desfase de 3m y llámalo 'Mezanine'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(level1 != null)\n{\n    double newElevation = level1.Elevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    newLevel.Name = \"Mezanine\";\n}"}
{"prompt":"Duplicate level 1 with a 3m offset and name it 'Mezzanine'.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(level1 != null)\n{\n    double newElevation = level1.Elevation + UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\n    Level newLevel = Level.Create(doc, newElevation);\n    newLevel.Name = \"Mezzanine\";\n}"}
{"prompt":"Etiqueta todas las habitaciones con su área.","completion":"var rooms = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType();\nforeach(Room room in rooms)\n{\n    if(room.Location != null)\n    {\n        doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(room.Location.Point.X, room.Location.Point.Y), doc.ActiveView.Id);\n    }\n}"}
{"prompt":"Tag all rooms with their area.","completion":"var rooms = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType();\nforeach(Room room in rooms)\n{\n    if(room.Location != null)\n    {\n        doc.Create.NewRoomTag(new LinkElementId(room.Id), new UV(room.Location.Point.X, room.Location.Point.Y), doc.ActiveView.Id);\n    }\n}"}
{"prompt":"Exporta una lista de materiales a un archivo de texto.","completion":"var materials = new FilteredElementCollector(doc).OfClass(typeof(Material));\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(\"C:\\\\Exports\\\\materials.txt\"))\n{\n    writer.WriteLine(\"Nombre del Material\");\n    foreach(Material m in materials)\n    {\n        writer.WriteLine(m.Name);\n    }\n}"}
{"prompt":"Export a list of materials to a text file.","completion":"var materials = new FilteredElementCollector(doc).OfClass(typeof(Material));\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(\"C:\\\\Exports\\\\materials.txt\"))\n{\n    writer.WriteLine(\"Material Name\");\n    foreach(Material m in materials)\n    {\n        writer.WriteLine(m.Name);\n    }\n}"}
{"prompt":"Aísla temporalmente todo el mobiliario en la vista activa.","completion":"var furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nif(furnitureIds.Any())\n{\n    doc.ActiveView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Temporarily isolate all furniture in the active view.","completion":"var furnitureIds = new FilteredElementCollector(doc, doc.ActiveView.Id).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsNotElementType().ToElementIds();\nif(furnitureIds.Any())\n{\n    doc.ActiveView.IsolateElementsTemporary(furnitureIds);\n}"}
{"prompt":"Coloca un ducto redondo de 200mm de diámetro.","completion":"DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).FirstOrDefault(dt => dt.Shape == ConnectorProfileType.Round) as DuctType;\nMEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(st => st.SystemClassification == MEPSystemClassification.SupplyAir);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(ductType != null && systemType != null && level != null)\n{\n    Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, new XYZ(0,0,3), new XYZ(10,0,3));\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(200, UnitTypeId.Millimeters));\n}"}
{"prompt":"Place a 200mm diameter round duct.","completion":"DuctType ductType = new FilteredElementCollector(doc).OfClass(typeof(DuctType)).FirstOrDefault(dt => dt.Shape == ConnectorProfileType.Round) as DuctType;\nMEPSystemType systemType = new FilteredElementCollector(doc).OfClass(typeof(MEPSystemType)).Cast<MEPSystemType>().FirstOrDefault(st => st.SystemClassification == MEPSystemClassification.SupplyAir);\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(ductType != null && systemType != null && level != null)\n{\n    Duct duct = Duct.Create(doc, systemType.Id, ductType.Id, level.Id, new XYZ(0,0,3), new XYZ(10,0,3));\n    duct.get_Parameter(BuiltInParameter.RBS_CURVE_DIAMETER_PARAM).Set(UnitUtils.ConvertToInternalUnits(200, UnitTypeId.Millimeters));\n}"}
{"prompt":"Crea un suelo con un contorno definido por el usuario.","completion":"UIDocument uidoc = new UIDocument(doc);\nIList<Reference> pickedRefs = uidoc.Selection.PickObjects(ObjectType.Element, \"Selecciona las líneas de contorno\");\nCurveLoop profile = new CurveLoop();\nforeach(Reference r in pickedRefs)\n{\n    ModelCurve mc = doc.GetElement(r) as ModelCurve;\n    if(mc != null) profile.Append(mc.GeometryCurve);\n}\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nLevel level = doc.ActiveView.GenLevel;\nif(floorType != null && level != null && profile.IsOpen() == false)\n{\n    Floor.Create(doc, new List<CurveLoop>{profile}, floorType.Id, level.Id);\n}"}
{"prompt":"Create a floor with a user-defined boundary.","completion":"UIDocument uidoc = new UIDocument(doc);\nIList<Reference> pickedRefs = uidoc.Selection.PickObjects(ObjectType.Element, \"Select the boundary lines\");\nCurveLoop profile = new CurveLoop();\nforeach(Reference r in pickedRefs)\n{\n    ModelCurve mc = doc.GetElement(r) as ModelCurve;\n    if(mc != null) profile.Append(mc.GeometryCurve);\n}\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nLevel level = doc.ActiveView.GenLevel;\nif(floorType != null && level != null && profile.IsOpen() == false)\n{\n    Floor.Create(doc, new List<CurveLoop>{profile}, floorType.Id, level.Id);\n}"}
{"prompt":"Encuentra todos los elementos dentro de la habitación 'Sala de Juntas'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Sala de Juntas\") as Room;\nif(room != null)\n{\n    BoundingBoxXYZ roomBbox = room.get_BoundingBox(null);\n    Outline roomOutline = new Outline(roomBbox.Min, roomBbox.Max);\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(roomOutline);\n    var elementsInRoom = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Find all elements inside the 'Conference Room'.","completion":"Room room = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).FirstOrDefault(r => r.Name == \"Conference Room\") as Room;\nif(room != null)\n{\n    BoundingBoxXYZ roomBbox = room.get_BoundingBox(null);\n    Outline roomOutline = new Outline(roomBbox.Min, roomBbox.Max);\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(roomOutline);\n    var elementsInRoom = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Exporta todos los muros con un parámetro de Marca a un archivo CSV.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(System.IO.StreamWriter sw = new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"ElementId,Mark\");\n  foreach(var w in walls){\n    Parameter p=w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n    if(p!=null && p.HasValue) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Export all walls with a Mark parameter to a CSV file.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(System.IO.StreamWriter sw = new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"ElementId,Mark\");\n  foreach(var w in walls){\n    Parameter p=w.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n    if(p!=null && p.HasValue) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Crea una losa de cimentación de 20x15 metros.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundationLevel != null && slabType != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(20,15,0));\n    Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n}"}
{"prompt":"Create a 20x15 meter foundation slab.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundationLevel != null && slabType != null)\n{\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(20,15,0));\n    Floor.Create(doc, new List<CurveLoop>{profile}, slabType.Id, foundationLevel.Id);\n}"}
{"prompt":"Añade montantes a todas las líneas de rejilla de un muro cortina seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro cortina\");\nWall curtainWall = doc.GetElement(pickedRef) as Wall;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif (curtainWall != null && curtainWall.CurtainGrid != null && mullionType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    foreach (ElementId gridLineId in grid.GetVGridLineIds()) grid.AddMullions(doc.GetElement(gridLineId) as CurtainGridLine, mullionType, false);\n    foreach (ElementId gridLineId in grid.GetUGridLineIds()) grid.AddMullions(doc.GetElement(gridLineId) as CurtainGridLine, mullionType, false);\n}"}
{"prompt":"Add mullions to all grid lines of a selected curtain wall.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a curtain wall\");\nWall curtainWall = doc.GetElement(pickedRef) as Wall;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif (curtainWall != null && curtainWall.CurtainGrid != null && mullionType != null)\n{\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    foreach (ElementId gridLineId in grid.GetVGridLineIds()) grid.AddMullions(doc.GetElement(gridLineId) as CurtainGridLine, mullionType, false);\n    foreach (ElementId gridLineId in grid.GetUGridLineIds()) grid.AddMullions(doc.GetElement(gridLineId) as CurtainGridLine, mullionType, false);\n}"}
{"prompt":"Rota un elemento seleccionado 90 grados sobre su eje Z.","completion":"UIDocument uidoc = new UIDocument(doc);\nElement elem = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nif (lp != null)\n{\n    Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n    ElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI / 2.0);\n}"}
{"prompt":"Rotate a selected element 90 degrees around its Z-axis.","completion":"UIDocument uidoc = new UIDocument(doc);\nElement elem = doc.GetElement(uidoc.Selection.PickObject(ObjectType.Element).ElementId);\nLocationPoint lp = elem.Location as LocationPoint;\nif (lp != null)\n{\n    Line axis = Line.CreateBound(lp.Point, lp.Point + XYZ.BasisZ);\n    ElementTransformUtils.RotateElement(doc, elem.Id, axis, Math.PI / 2.0);\n}"}
{"prompt":"Crea un sistema de vigas en un forjado seleccionado.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference floorRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un forjado para el sistema de vigas\");\nFloor floor = doc.GetElement(floorRef) as Floor;\nif(floor != null)\n{\n    // La creación completa requiere más lógica para definir el contorno y la dirección\n    BeamSystem.Create(doc, new List<Curve>(), floor.Id);\n}"}
{"prompt":"Create a beam system on a selected floor slab.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference floorRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a floor for the beam system\");\nFloor floor = doc.GetElement(floorRef) as Floor;\nif(floor != null){\n    // Full creation requires more logic to define boundary and direction\n    BeamSystem.Create(doc, new List<Curve>(), floor.Id);\n}"}
{"prompt":"Exporta una lista de todas las advertencias del proyecto a un archivo de texto en el escritorio.","completion":"string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nstring filePath = System.IO.Path.Combine(desktopPath, \"RevitWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nusing (System.IO.StreamWriter writer = new System.IO.StreamWriter(filePath))\n{\n    foreach (FailureMessage fm in warnings)\n    {\n        writer.WriteLine(fm.GetDescriptionText());\n    }\n}"}
{"prompt":"Export a list of all project warnings to a text file on the desktop.","completion":"string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\nstring filePath = System.IO.Path.Combine(desktopPath, \"RevitWarnings.txt\");\nIList<FailureMessage> warnings = doc.GetWarnings();\nusing (System.IO.StreamWriter writer = new System.IO.StreamWriter(filePath))\n{\n    foreach (FailureMessage fm in warnings)\n    {\n        writer.WriteLine(fm.GetDescriptionText());\n    }\n}"}
{"prompt":"Crea una vista de borrador (drafting view) llamada 'Detalles Típicos'.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Drafting);\nif(vft != null) {\n    ViewDrafting draftingView = ViewDrafting.Create(doc, vft.Id);\n    draftingView.Name = \"Detalles Típicos\";\n}"}
{"prompt":"Create a drafting view named 'Typical Details'.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(v => v.ViewFamily == ViewFamily.Drafting);\nif(vft != null) {\n    ViewDrafting draftingView = ViewDrafting.Create(doc, vft.Id);\n    draftingView.Name = \"Typical Details\";\n}"}
{"prompt":"Muestra un diálogo para que el usuario introduzca un texto.","completion":"TaskDialog.Show(\"Entrada de Usuario\", \"Por favor, introduce un valor:\", TaskDialogCommonButtons.Ok); // La API de Revit no tiene un input box nativo, esto es una simulación."}
{"prompt":"Show a dialog for the user to input text.","completion":"TaskDialog.Show(\"User Input\", \"Please enter a value:\", TaskDialogCommonButtons.Ok); // The Revit API does not have a native input box, this is a simulation."}
{"prompt":"Cambia el tipo de todas las columnas seleccionadas a 'Columna de Hormigón 450x450'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nFamilySymbol targetType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Columna de Hormigón 450x450\");\nif(targetType != null && selectedIds.Any()){\n    foreach(ElementId id in selectedIds){\n        FamilyInstance fi = doc.GetElement(id) as FamilyInstance;\n        if(fi != null && fi.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralColumns) fi.Symbol = targetType;\n    }\n}"}
{"prompt":"Change the type of all selected columns to 'Concrete Column 450x450'.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nFamilySymbol targetType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralColumns).WhereElementIsElementType().Cast<FamilySymbol>().FirstOrDefault(s => s.Name == \"Concrete Column 450x450\");\nif(targetType != null && selectedIds.Any()){\n    foreach(ElementId id in selectedIds){\n        FamilyInstance fi = doc.GetElement(id) as FamilyInstance;\n        if(fi != null && fi.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralColumns) fi.Symbol = targetType;\n    }\n}"}
{"prompt":"Crea un suelo siguiendo el contorno de una habitación seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference roomRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una habitación\");\nRoom room = doc.GetElement(roomRef) as Room;\nif(room != null){\n    IList<IList<BoundarySegment>> segments = room.GetBoundarySegments(new SpatialElementBoundaryOptions());\n    CurveLoop profile = new CurveLoop();\n    foreach(BoundarySegment seg in segments.First()) profile.Append(seg.GetCurve());\n    Floor.Create(doc, new List<CurveLoop>{profile}, new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstElementId(), room.LevelId);\n}"}
{"prompt":"Create a floor following the boundary of a selected room.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference roomRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a room\");\nRoom room = doc.GetElement(roomRef) as Room;\nif(room != null){\n    IList<IList<BoundarySegment>> segments = room.GetBoundarySegments(new SpatialElementBoundaryOptions());\n    CurveLoop profile = new CurveLoop();\n    foreach(BoundarySegment seg in segments.First()) profile.Append(seg.GetCurve());\n    Floor.Create(doc, new List<CurveLoop>{profile}, new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstElementId(), room.LevelId);\n}"}
{"prompt":"Encuentra todas las familias que contienen 'Genérico' en su nombre.","completion":"var genericFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Genérico\")).ToList();"}
{"prompt":"Find all families containing 'Generic' in their name.","completion":"var genericFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.Name.Contains(\"Generic\")).ToList();"}
{"prompt":"Aplica un desfase de -10cm a todos los muros seleccionados desde su línea de ubicación.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()){\n    double offset = UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Centimeters);\n    foreach(ElementId id in selectedIds){\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null) wall.get_Parameter(BuiltInParameter.WALL_KEY_REF_PARAM).Set((int)WallLocationLine.CoreCenterline);\n    }\n}"}
{"prompt":"Apply a -10cm offset to all selected walls from their location line.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()){\n    double offset = UnitUtils.ConvertToInternalUnits(-10, UnitTypeId.Centimeters);\n    foreach(ElementId id in selectedIds){\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null) wall.get_Parameter(BuiltInParameter.WALL_KEY_REF_PARAM).Set((int)WallLocationLine.CoreCenterline);\n    }\n}"}
{"prompt":"Duplica la vista activa con detalles.","completion":"View activeView = doc.ActiveView;\nElementId newViewId = activeView.Duplicate(ViewDuplicateOption.WithDetailing);"}
{"prompt":"Duplicate the active view with detailing.","completion":"View activeView = doc.ActiveView;\nElementId newViewId = activeView.Duplicate(ViewDuplicateOption.WithDetailing);"}
{"prompt":"Establece la escala de la vista activa a 1:50.","completion":"View activeView = doc.ActiveView;\nif(activeView.CanModifyViewScale())\n{\n    activeView.Scale = 50;\n}"}
{"prompt":"Set the active view's scale to 1:50.","completion":"View activeView = doc.ActiveView;\nif(activeView.CanModifyViewScale())\n{\n    activeView.Scale = 50;\n}"}
{"prompt":"Crea un nuevo tipo de suelo 'Suelo Genérico 30cm'.","completion":"FloorType floorTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nif(floorTypeToDuplicate != null){\n    FloorType newType = floorTypeToDuplicate.Duplicate(\"Suelo Genérico 30cm\") as FloorType;\n    CompoundStructure cs = newType.GetCompoundStructure();\n    if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n    newType.SetCompoundStructure(cs);\n}"}
{"prompt":"Create a new floor type 'Generic Floor 30cm'.","completion":"FloorType floorTypeToDuplicate = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\nif(floorTypeToDuplicate != null){\n    FloorType newType = floorTypeToDuplicate.Duplicate(\"Generic Floor 30cm\") as FloorType;\n    CompoundStructure cs = newType.GetCompoundStructure();\n    if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(30, UnitTypeId.Centimeters));\n    newType.SetCompoundStructure(cs);\n}"}
{"prompt":"Haz que todos los muros seleccionados sean estructurales.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nforeach(ElementId id in selectedIds){\n    Wall wall = doc.GetElement(id) as Wall;\n    if(wall != null) wall.get_Parameter(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT).Set(1);\n}"}
{"prompt":"Make all selected walls structural.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nforeach(ElementId id in selectedIds){\n    Wall wall = doc.GetElement(id) as Wall;\n    if(wall != null) wall.get_Parameter(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT).Set(1);\n}"}
{"prompt":"Obtén todos los muros del Nivel 1 que son estructurales.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(level1 != null){\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    var structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Get all walls on Level 1 that are structural.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif(level1 != null){\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level1.Id);\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\n    FilterIntegerRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\n    ElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { levelFilter, categoryFilter, structuralFilter });\n    var structuralWalls = new FilteredElementCollector(doc).WherePasses(andFilter).ToList();\n}"}
{"prompt":"Crea una nueva tabla de planificación para Pilares Estructurales.","completion":"ElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = \"Tabla de Pilares Estructurales\";"}
{"prompt":"Create a new schedule for Structural Columns.","completion":"ElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = \"Structural Column Schedule\";"}
{"prompt":"Añade los campos 'Nivel', 'Marca' y 'Volumen' a la tabla de pilares.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\"));\nif(schedule != null){\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.FAMILY_LEVEL_PARAM));\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.ALL_MODEL_MARK));\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.HOST_VOLUME_COMPUTED));\n    if(levelField != null) def.AddField(levelField);\n    if(markField != null) def.AddField(markField);\n    if(volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Add the 'Level', 'Mark', and 'Volume' fields to the column schedule.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Column\"));\nif(schedule != null){\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.FAMILY_LEVEL_PARAM));\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.ALL_MODEL_MARK));\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.HOST_VOLUME_COMPUTED));\n    if(levelField != null) def.AddField(levelField);\n    if(markField != null) def.AddField(markField);\n    if(volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Crea una nueva hoja A3 y colócale una leyenda.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A3\")) as FamilySymbol;\nViewLegend legendView = new FilteredElementCollector(doc).OfClass(typeof(ViewLegend)).FirstOrDefault() as ViewLegend;\nif(titleBlock != null && legendView != null){\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Leyendas\";\n    newSheet.SheetNumber = \"G-002\";\n    if(Viewport.CanAddViewToSheet(doc, newSheet.Id, legendView.Id)){\n        Viewport.Create(doc, newSheet.Id, legendView.Id, new XYZ(0.5, 0.5, 0));\n    }\n}"}
{"prompt":"Create a new A3 sheet and place a legend on it.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A3\")) as FamilySymbol;\nViewLegend legendView = new FilteredElementCollector(doc).OfClass(typeof(ViewLegend)).FirstOrDefault() as ViewLegend;\nif(titleBlock != null && legendView != null){\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Legends\";\n    newSheet.SheetNumber = \"G-002\";\n    if(Viewport.CanAddViewToSheet(doc, newSheet.Id, legendView.Id)){\n        Viewport.Create(doc, newSheet.Id, legendView.Id, new XYZ(0.5, 0.5, 0));\n    }\n}"}
{"prompt":"Obtén todas las familias de puertas cargadas en el proyecto.","completion":"var doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory?.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Get all door families loaded in the project.","completion":"var doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory?.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Aplica el estilo visual 'Rayos X' a la vista 3D activa.","completion":"View3D view3d = doc.ActiveView as View3D;\nif(view3d != null){\n    view3d.DisplayStyle = DisplayStyle.Wireframe;\n    // La API no tiene un modo 'Rayos X' directo, Wireframe es lo más cercano.\n}"}
{"prompt":"Apply the 'X-Ray' visual style to the active 3D view.","completion":"View3D view3d = doc.ActiveView as View3D;\nif(view3d != null){\n    view3d.DisplayStyle = DisplayStyle.Wireframe;\n    // The API does not have a direct 'X-Ray' mode, Wireframe is the closest equivalent.\n}"}
{"prompt":"Crea una losa de cimentación estructural de 40cm de espesor.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundationLevel != null && slabType != null){\n    FloorType newSlabType = slabType.Duplicate(\"Losa Cimentación 40cm\") as FloorType;\n    CompoundStructure cs = newSlabType.GetCompoundStructure();\n    if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(40, UnitTypeId.Centimeters));\n    newSlabType.SetCompoundStructure(cs);\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(10,10,0));\n    Floor.Create(doc, new List<CurveLoop>{profile}, newSlabType.Id, foundationLevel.Id);\n}"}
{"prompt":"Create a structural foundation slab 40cm thick.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundationLevel != null && slabType != null){\n    FloorType newSlabType = slabType.Duplicate(\"Foundation Slab 40cm\") as FloorType;\n    CompoundStructure cs = newSlabType.GetCompoundStructure();\n    if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(40, UnitTypeId.Centimeters));\n    newSlabType.SetCompoundStructure(cs);\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(10,10,0));\n    Floor.Create(doc, new List<CurveLoop>{profile}, newSlabType.Id, foundationLevel.Id);\n}"}
{"prompt":"Genera un reporte con el área de todas las habitaciones del proyecto.","completion":"StringBuilder report = new StringBuilder(\"Reporte de Áreas de Habitaciones:\\n\");\nvar rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>();\nforeach(Room room in rooms)\n{\n    double area = room.get_Parameter(BuiltInParameter.ROOM_AREA).AsDouble();\n    report.AppendLine($\"- {room.Name}: {UnitUtils.ConvertFromInternalUnits(area, UnitTypeId.SquareMeters):F2} m²\");\n}\nTaskDialog.Show(\"Reporte de Áreas\", report.ToString());"}
{"prompt":"Generate a report with the area of all rooms in the project.","completion":"StringBuilder report = new StringBuilder(\"Room Area Report:\\n\");\nvar rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>();\nforeach(Room room in rooms)\n{\n    double area = room.get_Parameter(BuiltInParameter.ROOM_AREA).AsDouble();\n    report.AppendLine($\"- {room.Name}: {UnitUtils.ConvertFromInternalUnits(area, UnitTypeId.SquareMeters):F2} m²\");\n}\nTaskDialog.Show(\"Area Report\", report.ToString());"}
{"prompt":"Crea un techo por extrusión con un perfil en arco.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nif(level != null && roofType != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n    ReferencePlane refPlane = ReferencePlane.Create(doc, new XYZ(0,0,level.Elevation), XYZ.BasisY, doc.ActiveView);\n    doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n}"}
{"prompt":"Create an extrusion roof with an arc profile.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nif(level != null && roofType != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n    ReferencePlane refPlane = ReferencePlane.Create(doc, new XYZ(0,0,level.Elevation), XYZ.BasisY, doc.ActiveView);\n    doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n}"}
{"prompt":"Oculta todos los elementos de anotación en la vista activa.","completion":"var annotationCategories = new List<BuiltInCategory>\n{\n    BuiltInCategory.OST_GenericAnnotation,\n    BuiltInCategory.OST_TextNotes,\n    BuiltInCategory.OST_Tags,\n    BuiltInCategory.OST_Dimensions\n};\nvar multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\nvar elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\nif(elementsToHide.Any())\n{\n    doc.ActiveView.HideElements(elementsToHide);\n}"}
{"prompt":"Hide all annotation elements in the active view.","completion":"var annotationCategories = new List<BuiltInCategory>\n{\n    BuiltInCategory.OST_GenericAnnotation,\n    BuiltInCategory.OST_TextNotes,\n    BuiltInCategory.OST_Tags,\n    BuiltInCategory.OST_Dimensions\n};\nvar multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\nvar elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\nif(elementsToHide.Any())\n{\n    doc.ActiveView.HideElements(elementsToHide);\n}"}
{"prompt":"Encuentra todas las vistas que no tienen una plantilla de vista asignada.","completion":"var viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View))\n    .Cast<View>()\n    .Where(v => v.CanBePrinted() && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId)\n    .ToList();\nStringBuilder sb = new StringBuilder(\"Vistas sin plantilla:\\n\");\nforeach(var view in viewsWithoutTemplate)\n{\n    sb.AppendLine(view.Name);\n}\nTaskDialog.Show(\"Auditoría de Vistas\", sb.ToString());"}
{"prompt":"Find all views that do not have a view template assigned.","completion":"var viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View))\n    .Cast<View>()\n    .Where(v => v.CanBePrinted() && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId)\n    .ToList();\nStringBuilder sb = new StringBuilder(\"Views without template:\\n\");\nforeach(var view in viewsWithoutTemplate)\n{\n    sb.AppendLine(view.Name);\n}\nTaskDialog.Show(\"View Audit\", sb.ToString());"}
{"prompt":"Establece el parámetro 'Marca' de todos los muros seleccionados a 'M-01'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any())\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall)\n        {\n            Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n            if(markParam != null) markParam.Set(\"M-01\");\n        }\n    }\n}"}
{"prompt":"Set the 'Mark' parameter of all selected walls to 'W-01'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any())\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall)\n        {\n            Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n            if(markParam != null) markParam.Set(\"W-01\");\n        }\n    }\n}"}
{"prompt":"Crea 10 worksets de arquitectura.","completion":"if(doc.IsWorkshared)\n{\n    var worksetNames = new List<string> { \"TAD_ARQ_MAM\", \"TAD_ARQ_ACA\", \"TAD_ARQ_PLA\", \"TAD_ARQ_PSO\", \"TAD_ARQ_HRE\", \"TAD_ARQ_ALU\", \"TAD_ARQ_CAR\", \"TAD_ARQ_MOB\", \"TAD_ARQ_PLO\", \"TAD_ARQ_EXT\" };\n    foreach(string name in worksetNames)\n    {\n        Workset.Create(doc, name);\n    }\n}"}
{"prompt":"Create 10 architectural worksets.","completion":"if(doc.IsWorkshared)\n{\n    var worksetNames = new List<string> { \"TAD_ARQ_WALLS\", \"TAD_ARQ_FINISHES\", \"TAD_ARQ_CEILINGS\", \"TAD_ARQ_FLOORS\", \"TAD_ARQ_RAILINGS\", \"TAD_ARQ_WINDOWS\", \"TAD_ARQ_CARPENTRY\", \"TAD_ARQ_FURNITURE\", \"TAD_ARQ_PLUMBING\", \"TAD_ARQ_EXTERIOR\" };\n    foreach(string name in worksetNames)\n    {\n        Workset.Create(doc, name);\n    }\n}"}
{"prompt":"Cambia el nombre de todas las tablas que contienen 'Muros' por 'Cuantificación de Muros'.","completion":"var schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"Muros\"));\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"Muros\", \"Cuantificación de Muros\");\n}"}
{"prompt":"Rename all schedules containing 'Walls' to 'Wall Quantity Takeoff'.","completion":"var schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"Walls\"));\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"Walls\", \"Wall Quantity Takeoff\");\n}"}
{"prompt":"Encuentra todas las familias de anotación y muestra sus nombres.","completion":"var annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation);\nStringBuilder sb = new StringBuilder(\"Familias de Anotación:\\n\");\nforeach(var fam in annotationFamilies)\n{\n    sb.AppendLine(fam.Name);\n}\nTaskDialog.Show(\"Familias de Anotación\", sb.ToString());"}
{"prompt":"Find all annotation families and display their names.","completion":"var annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation);\nStringBuilder sb = new StringBuilder(\"Annotation Families:\\n\");\nforeach(var fam in annotationFamilies)\n{\n    sb.AppendLine(fam.Name);\n}\nTaskDialog.Show(\"Annotation Families\", sb.ToString());"}
{"prompt":"Crea un tipo de cota lineal con texto rojo.","completion":"DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\nif(linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"Cota Roja\") as DimensionType;\n    if(newDimType != null)\n    {\n        newDimType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(255,0,0).GetElementId());\n    }\n}"}
{"prompt":"Create a linear dimension type with red text.","completion":"DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\nif(linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"Red Dimension\") as DimensionType;\n    if(newDimType != null)\n    {\n        newDimType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(255,0,0).GetElementId());\n    }\n}"}
{"prompt":"Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif(furnitureCat != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Set the visibility of the 'Furniture' category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif(furnitureCat != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Éxito\", $\"Se eliminaron {unusedWallTypes.Count} tipos de muro no utilizados.\");\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Success\", $\"Deleted {unusedWallTypes.Count} unused wall types.\");\n}"}
{"prompt":"Crea una nueva hoja A1 y coloca la vista 'Planta Baja' en ella.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A1\")) as FamilySymbol;\nView viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Planta Baja\") as View;\nif (titleBlock != null && viewToPlace != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Planta Arquitectónica\";\n    newSheet.SheetNumber = \"A-101\";\n    if (Viewport.CanAddViewToSheet(doc, newSheet.Id, viewToPlace.Id))\n    {\n        Viewport.Create(doc, newSheet.Id, viewToPlace.Id, new XYZ(0.5, 0.5, 0));\n    }\n}"}
{"prompt":"Create a new A1 sheet and place the 'Ground Floor' view on it.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A1\")) as FamilySymbol;\nView viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Ground Floor\") as View;\nif (titleBlock != null && viewToPlace != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Architectural Plan\";\n    newSheet.SheetNumber = \"A-101\";\n    if (Viewport.CanAddViewToSheet(doc, newSheet.Id, viewToPlace.Id))\n    {\n        Viewport.Create(doc, newSheet.Id, viewToPlace.Id, new XYZ(0.5, 0.5, 0));\n    }\n}"}
{"prompt":"Reporta el número total de advertencias en el proyecto.","completion":"int warningCount = doc.GetWarnings().Count;\nTaskDialog.Show(\"Auditoría de Proyecto\", $\"El proyecto tiene {warningCount} advertencias.\");"}
{"prompt":"Report the total number of warnings in the project.","completion":"int warningCount = doc.GetWarnings().Count;\nTaskDialog.Show(\"Project Audit\", $\"The project has {warningCount} warnings.\");"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-60' basado en un tipo existente, y asigna '60 min' al parámetro 'Fire Rating'.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"Puerta RF-60\") as FamilySymbol;\n    Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n    if (fireRatingParam != null && !fireRatingParam.IsReadOnly)\n    {\n        fireRatingParam.Set(\"60 min\");\n    }\n}"}
{"prompt":"Create a new door type named 'FR-60 Door' based on an existing type, and set the 'Fire Rating' parameter to '60 min'.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"FR-60 Door\") as FamilySymbol;\n    Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n    if (fireRatingParam != null && !fireRatingParam.IsReadOnly)\n    {\n        fireRatingParam.Set(\"60 min\");\n    }\n}"}
{"prompt":"Mueve todos los elementos seleccionados 3 metros hacia arriba.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any())\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Move all selected elements 3 meters up.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any())\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Encuentra todos los muros que no están asociados a ningún nivel.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nvar unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToElements();\nTaskDialog.Show(\"Muros sin Nivel\", $\"Se encontraron {unassignedWalls.Count} muros sin nivel base.\");"}
{"prompt":"Find all walls that are not associated with any level.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nvar unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToElements();\nTaskDialog.Show(\"Unassigned Walls\", $\"Found {unassignedWalls.Count} walls with no base level.\");"}
{"prompt":"Exporta todos los tipos de familia de la categoría 'Mobiliario' a un archivo de texto.","completion":"string path = @\"C:\\RevitExports\\FurnitureTypes.txt\";\nvar furnitureTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType();\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(path))\n{\n    writer.WriteLine(\"Tipos de Mobiliario:\");\n    foreach(Element type in furnitureTypes)\n    {\n        writer.WriteLine(type.Name);\n    }\n}"}
{"prompt":"Export all family types from the 'Furniture' category to a text file.","completion":"string path = @\"C:\\RevitExports\\FurnitureTypes.txt\";\nvar furnitureTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType();\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(path))\n{\n    writer.WriteLine(\"Furniture Types:\");\n    foreach(Element type in furnitureTypes)\n    {\n        writer.WriteLine(type.Name);\n    }\n}"}
{"prompt":"Copia todos los muros del Nivel 1 al Nivel 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif (level1 != null && level2 != null)\n{\n    var wallsToCopy = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level1.Id).ToElementIds();\n    double elevationDiff = level2.Elevation - level1.Elevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(wallsToCopy.Any()) ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n}"}
{"prompt":"Copy all walls from Level 1 to Level 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif (level1 != null && level2 != null)\n{\n    var wallsToCopy = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level1.Id).ToElementIds();\n    double elevationDiff = level2.Elevation - level1.Elevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(wallsToCopy.Any()) ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n}"}
{"prompt":"Crea un nuevo tipo de texto de 3mm de color azul.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"3mm Azul\") as TextNoteType;\n    newType.get_Parameter(BuiltInParameter.TEXT_SIZE).Set(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Millimeters));\n    newType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(0,0,255).GetElementId());\n}"}
{"prompt":"Create a new 3mm text type in blue color.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"3mm Blue\") as TextNoteType;\n    newType.get_Parameter(BuiltInParameter.TEXT_SIZE).Set(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Millimeters));\n    newType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(0,0,255).GetElementId());\n}"}
{"prompt":"Encuentra todos los muros que midan más de 3 metros de alto.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nvar tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds();\nTaskDialog.Show(\"Resultado\", $\"Se encontraron {tallWalls.Count} muros con más de 3m de altura.\");"}
{"prompt":"Find all walls taller than 3 meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nvar tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds();\nTaskDialog.Show(\"Result\", $\"Found {tallWalls.Count} walls taller than 3m.\");"}
{"prompt":"Selecciona un muro y encuentra todas las tuberías que lo atraviesan.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nElement wall = doc.GetElement(wallRef);\nif(wall != null)\n{\n    ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n    var intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds();\n    TaskDialog.Show(\"Colisiones\", $\"El muro intersecta con {intersectingPipes.Count} tuberías.\");\n    if(intersectingPipes.Any()) uidoc.Selection.SetElementIds(intersectingPipes);\n}"}
{"prompt":"Select a wall and find all pipes passing through it.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\nElement wall = doc.GetElement(wallRef);\nif(wall != null)\n{\n    ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n    var intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds();\n    TaskDialog.Show(\"Clashes\", $\"The wall intersects with {intersectingPipes.Count} pipes.\");\n    if(intersectingPipes.Any()) uidoc.Selection.SetElementIds(intersectingPipes);\n}"}
{"prompt":"Crea una nota de texto que apunte al elemento seleccionado y diga 'REVISAR CLASH'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference targetRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\nif(targetRef != null)\n{\n    XYZ textLocation = uidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n    TextNoteOptions opts = new TextNoteOptions() { HorizontalAlignment = HorizontalAlignment.Left };\n    \n    TextNote note = TextNote.Create(doc, doc.ActiveView.Id, textLocation, \"REVISAR CLASH\", opts);\n    note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L, targetRef.GlobalPoint);\n}"}
{"prompt":"Create a text note pointing to the selected element that says 'REVIEW CLASH'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference targetRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\nif(targetRef != null)\n{\n    XYZ textLocation = uidoc.Selection.PickPoint(\"Choose the text location\");\n    TextNoteOptions opts = new TextNoteOptions() { HorizontalAlignment = HorizontalAlignment.Left };\n    \n    TextNote note = TextNote.Create(doc, doc.ActiveView.Id, \"REVIEW CLASH\", textLocation, opts);\n    note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L, targetRef.GlobalPoint);\n}"}
{"prompt":"Oculta todos los muros que sean más cortos de 2 metros.","completion":"double lengthThreshold = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nvar walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\nList<ElementId> shortWallIds = new List<ElementId>();\n\nforeach(Wall wall in walls)\n{\n    double length = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n    if(length < lengthThreshold)\n    {\n        shortWallIds.Add(wall.Id);\n    }\n}\n\nif(shortWallIds.Any())\n{\n    doc.ActiveView.HideElements(shortWallIds);\n    TaskDialog.Show(\"Resultado\", $\"Se ocultaron {shortWallIds.Count} muros cortos.\");\n}"}
{"prompt":"Hide all walls shorter than 2 meters.","completion":"double lengthThreshold = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nvar walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\nList<ElementId> shortWallIds = new List<ElementId>();\n\nforeach(Wall wall in walls)\n{\n    double length = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n    if(length < lengthThreshold)\n    {\n        shortWallIds.Add(wall.Id);\n    }\n}\n\nif(shortWallIds.Any())\n{\n    doc.ActiveView.HideElements(shortWallIds);\n    TaskDialog.Show(\"Result\", $\"Hid {shortWallIds.Count} short walls.\");\n}"}
{"prompt":"Crea una viga estructural entre (0,0,0) y (5,0,0) en el Nivel 1.","completion":"XYZ start = new XYZ(0, 0, 0);\nXYZ end = new XYZ(5, 0, 0);\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault();\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nif(beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Create a structural beam between (0,0,0) and (5,0,0) on Level 1.","completion":"XYZ start = new XYZ(0, 0, 0);\nXYZ end = new XYZ(5, 0, 0);\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault();\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nif(beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Crea una cortina mural rectangular del Nivel 1 al Nivel 2 entre (0,0) y (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Create a rectangular curtain wall from Level 1 to Level 2 between (0,0) and (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Carga la familia 'LightingFixture.rfa' e inserta una instancia en coordenadas (2,2,3) en Nivel 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Load the 'LightingFixture.rfa' family and insert an instance at (2,2,3) on Level 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Crea un techo esquemático rectangular en 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Create a schematic rectangular roof at 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Genera una losa de cimentación de 1m de espesor.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Create a 1m thick structural footing slab.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Exporta todos los muros con 'Mark' a un archivo CSV.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Export all walls with a 'Mark' to a CSV file.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Create an intermediate level named 'Mezzanine' halfway between Level 1 and Level 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Cambia el material de todos los muros a 'Acero'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Acero\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Change the material of all walls to 'Steel'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Steel\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Éxito\", $\"Se eliminaron {unusedWallTypes.Count} tipos de muro no utilizados.\");\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Success\", $\"Deleted {unusedWallTypes.Count} unused wall types.\");\n}"}
{"prompt":"Añade una línea de rejilla U en un muro cortina a 3m desde el origen.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Add a U grid line to a curtain wall at 3m from the origin.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Añade una línea de rejilla V en un muro cortina a 2m de altura.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Add a V grid line to a curtain wall at 2m height.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Activa todos los segmentos en la primera línea de rejilla U.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Activate all segments on the first U grid line.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Añade montantes en la línea de rejilla U seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla de muro cortina\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Add mullions to the selected U grid line.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a curtain grid line\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Aísla la rejilla V seleccionada y añade solo un segmento.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla V\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Isolate the selected V gridline and add only one segment.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a V grid line\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}

{"prompt":"¿Cuántas puertas hay en el 'Nivel 1'?","completion":"// Estrategia: Contar elementos de una categoría en un nivel específico.\n// 1. Encontrar el nivel por su nombre.\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level != null)\n{\n    // 2. Crear filtros para la categoría y el nivel.\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    LogicalAndFilter andFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    // 3. Contar los elementos que cumplen con el filtro.\n    int doorCount = new FilteredElementCollector(doc).WherePasses(andFilter).GetElementCount();\n    // 4. Mostrar el resultado al usuario.\n    TaskDialog.Show(\"Conteo de Puertas\", $\"Hay {doorCount} puertas en el Nivel 1.\");\n}\nelse\n{\n    TaskDialog.Show(\"Error\", \"No se encontró el 'Nivel 1'.\");\n}"}
{"prompt":"How many doors are on 'Level 1'?","completion":"// Strategy: Count elements of a specific category on a specific level.\n// 1. Find the level by name.\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level != null)\n{\n    // 2. Create filters for category and level.\n    ElementCategoryFilter categoryFilter = new ElementCategoryFilter(BuiltInCategory.OST_Doors);\n    ElementLevelFilter levelFilter = new ElementLevelFilter(level.Id);\n    LogicalAndFilter andFilter = new LogicalAndFilter(categoryFilter, levelFilter);\n    // 3. Count the elements that pass the filter.\n    int doorCount = new FilteredElementCollector(doc).WherePasses(andFilter).GetElementCount();\n    // 4. Show the result to the user.\n    TaskDialog.Show(\"Door Count\", $\"There are {doorCount} doors on Level 1.\");\n}\nelse\n{\n    TaskDialog.Show(\"Error\", \"Could not find 'Level 1'.\");\n}"}
{"prompt":"Selecciona todos los muros estructurales del Nivel 2 que sean más largos de 10 metros.","completion":"// Estrategia: Combinar filtros de nivel, categoría, parámetro booleano y parámetro numérico.\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ElementLevelFilter lvlFilter = new ElementLevelFilter(level2.Id);\n    FilterRule structRule = ParameterFilterRuleFactory.CreateEqualsRule(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT), 1);\n    ElementParameterFilter structFilter = new ElementParameterFilter(structRule);\n    FilterRule lengthRule = ParameterFilterRuleFactory.CreateGreaterOrEqualRule(new ElementId(BuiltInParameter.CURVE_ELEM_LENGTH), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0.01);\n    ElementParameterFilter lengthFilter = new ElementParameterFilter(lengthRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, lvlFilter, structFilter, lengthFilter });\n    var wallIds = new FilteredElementCollector(doc).WherePasses(andFilter).ToElementIds();\n    if(wallIds.Any()){\n        new UIDocument(doc).Selection.SetElementIds(wallIds);\n        TaskDialog.Show(\"Selección\", $\"Se seleccionaron {wallIds.Count} muros.\");\n    }\n}"}
{"prompt":"Select all structural walls on Level 2 that are longer than 10 meters.","completion":"// Strategy: Combine filters for level, category, boolean parameter, and numeric parameter.\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif (level2 != null)\n{\n    ElementCategoryFilter catFilter = new ElementCategoryFilter(BuiltInCategory.OST_Walls);\n    ElementLevelFilter lvlFilter = new ElementLevelFilter(level2.Id);\n    FilterRule structRule = ParameterFilterRuleFactory.CreateEqualsRule(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT), 1);\n    ElementParameterFilter structFilter = new ElementParameterFilter(structRule);\n    FilterRule lengthRule = ParameterFilterRuleFactory.CreateGreaterOrEqualRule(new ElementId(BuiltInParameter.CURVE_ELEM_LENGTH), UnitUtils.ConvertToInternalUnits(10, UnitTypeId.Meters), 0.01);\n    ElementParameterFilter lengthFilter = new ElementParameterFilter(lengthRule);\n    LogicalAndFilter andFilter = new LogicalAndFilter(new List<ElementFilter> { catFilter, lvlFilter, structFilter, lengthFilter });\n    var wallIds = new FilteredElementCollector(doc).WherePasses(andFilter).ToElementIds();\n    if(wallIds.Any()){\n        new UIDocument(doc).Selection.SetElementIds(wallIds);\n        TaskDialog.Show(\"Selection\", $\"Selected {wallIds.Count} walls.\");\n    }\n}"}
{"prompt":"Permíteme seleccionar dos puntos y dibuja una viga entre ellos.","completion":"// Estrategia: Pedir al usuario que seleccione dos puntos para crear un elemento lineal.\nUIDocument uidoc = new UIDocument(doc);\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = doc.ActiveView.GenLevel;\nif(beamType != null && level != null){\n    try {\n        XYZ p1 = uidoc.Selection.PickPoint(\"Selecciona el punto de inicio de la viga\");\n        XYZ p2 = uidoc.Selection.PickPoint(\"Selecciona el punto final de la viga\");\n        Line beamCurve = Line.CreateBound(p1, p2);\n        if(!beamType.IsActive) beamType.Activate();\n        doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n    } catch (Autodesk.Revit.Exceptions.OperationCanceledException) {\n        // El usuario canceló la selección\n    }\n}"}
{"prompt":"Let me select two points and draw a beam between them.","completion":"// Strategy: Prompt the user to pick two points to create a linear element.\nUIDocument uidoc = new UIDocument(doc);\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nLevel level = doc.ActiveView.GenLevel;\nif(beamType != null && level != null){\n    try {\n        XYZ p1 = uidoc.Selection.PickPoint(\"Select the beam start point\");\n        XYZ p2 = uidoc.Selection.PickPoint(\"Select the beam end point\");\n        Line beamCurve = Line.CreateBound(p1, p2);\n        if(!beamType.IsActive) beamType.Activate();\n        doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n    } catch (Autodesk.Revit.Exceptions.OperationCanceledException) {\n        // User cancelled the selection\n    }\n}"}
{"prompt":"Crea un muro del tipo 'EXT-Ladrillo', y si no existe, créalo primero.","completion":"// Estrategia: Crear un elemento con un tipo específico, creándolo si no existe.\nstring wallTypeName = \"EXT-Ladrillo\";\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == wallTypeName) as WallType;\n// 1. Verificar si el tipo de muro existe.\nif (wallType == null)\n{\n    // 2. Si no existe, notificar y crearlo a partir de una plantilla.\n    TaskDialog.Show(\"Info\", $\"El tipo '{wallTypeName}' no existe. Se creará uno nuevo.\");\n    WallType template = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(template != null) wallType = template.Duplicate(wallTypeName) as WallType;\n}\n// 3. Si el tipo ahora existe (ya sea porque se encontró o se creó), proceder.\nif(wallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    if(level != null){\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10, 0, 0));\n        Wall.Create(doc, wallCurve, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);\n    }\n}"}
{"prompt":"Create a wall of type 'EXT-Brick', and if it doesn't exist, create it first.","completion":"// Strategy: Create an element with a specific type, creating the type if it doesn't exist.\nstring wallTypeName = \"EXT-Brick\";\nWallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault(wt => wt.Name == wallTypeName) as WallType;\n// 1. Check if the wall type exists.\nif (wallType == null)\n{\n    // 2. If it doesn't exist, notify and create it from a template.\n    TaskDialog.Show(\"Info\", $\"Type '{wallTypeName}' does not exist. A new one will be created.\");\n    WallType template = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\n    if(template != null) wallType = template.Duplicate(wallTypeName) as WallType;\n}\n// 3. If the type now exists (either found or created), proceed.\nif(wallType != null)\n{\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    if(level != null){\n        Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10, 0, 0));\n        Wall.Create(doc, wallCurve, wallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);\n    }\n}"}
{"prompt":"¿Cuál es el volumen total de hormigón en los forjados?","completion":"// Estrategia: Calcular y reportar un valor agregado de un conjunto de elementos.\n// 1. Filtrar todos los forjados (Floors).\nvar floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType();\ndouble totalVolume = 0.0;\n// 2. Iterar y sumar el volumen de cada uno.\nforeach(Element floor in floors)\n{\n    Parameter volumeParam = floor.get_Parameter(BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if(volumeParam != null) totalVolume += volumeParam.AsDouble();\n}\n// 3. Convertir a unidades legibles y mostrar.\nstring formattedVolume = UnitUtils.ConvertFromInternalUnits(totalVolume, UnitTypeId.CubicMeters).ToString(\"F2\");\nTaskDialog.Show(\"Volumen Total\", $\"El volumen total de hormigón en forjados es: {formattedVolume} m³.\");"}
{"prompt":"What is the total volume of concrete in the floors?","completion":"// Strategy: Calculate and report an aggregated value from a set of elements.\n// 1. Filter all floors.\nvar floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType();\ndouble totalVolume = 0.0;\n// 2. Iterate and sum the volume of each one.\nforeach(Element floor in floors)\n{\n    Parameter volumeParam = floor.get_Parameter(BuiltInParameter.HOST_VOLUME_COMPUTED);\n    if(volumeParam != null) totalVolume += volumeParam.AsDouble();\n}\n// 3. Convert to readable units and display.\nstring formattedVolume = UnitUtils.ConvertFromInternalUnits(totalVolume, UnitTypeId.CubicMeters).ToString(\"F2\");\nTaskDialog.Show(\"Total Volume\", $\"The total concrete volume in floors is: {formattedVolume} m³.\");"}
{"prompt":"Aplica el material 'Pintura Roja' a todas las caras de los muros seleccionados.","completion":"// Estrategia: Aplicar una modificación a una selección del usuario.\nMaterial redPaint = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Pintura Roja\") as Material;\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(redPaint != null && selectedIds.Any()){\n    foreach(ElementId id in selectedIds){\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null){\n            var faces = HostObjectUtils.GetSideFaces(wall, ShellLayerType.Interior);\n            foreach(Face f in faces) doc.Paint(wall.Id, f, redPaint.Id);\n            faces = HostObjectUtils.GetSideFaces(wall, ShellLayerType.Exterior);\n            foreach(Face f in faces) doc.Paint(wall.Id, f, redPaint.Id);\n        }\n    }\n}"}
{"prompt":"Apply the 'Red Paint' material to all faces of the selected walls.","completion":"// Strategy: Apply a modification to a user selection.\nMaterial redPaint = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name == \"Red Paint\") as Material;\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(redPaint != null && selectedIds.Any()){\n    foreach(ElementId id in selectedIds){\n        Wall wall = doc.GetElement(id) as Wall;\n        if(wall != null){\n            var faces = HostObjectUtils.GetSideFaces(wall, ShellLayerType.Interior);\n            foreach(Face f in faces) doc.Paint(wall.Id, f, redPaint.Id);\n            faces = HostObjectUtils.GetSideFaces(wall, ShellLayerType.Exterior);\n            foreach(Face f in faces) doc.Paint(wall.Id, f, redPaint.Id);\n        }\n    }\n}"}
{"prompt":"Crea una nueva hoja A1 para cada vista de planta en el proyecto.","completion":"// Estrategia: Iterar sobre un conjunto de elementos y realizar una acción para cada uno.\n// 1. Obtener todas las vistas de planta.\nvar planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Where(v => !v.IsTemplate).Cast<ViewPlan>().ToList();\n// 2. Encontrar un cajetín (title block) A1.\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A1\")) as FamilySymbol;\nif(titleBlock != null && planViews.Any()){\n    int sheetCounter = 101;\n    // 3. Iterar por cada vista de planta.\n    foreach(ViewPlan view in planViews){\n        // 4. Crear una nueva hoja.\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        newSheet.Name = view.Name;\n        newSheet.SheetNumber = $\"A-{sheetCounter++}\";\n        // 5. Colocar la vista en la hoja.\n        if(Viewport.CanAddViewToSheet(doc, newSheet.Id, view.Id)){\n            Viewport.Create(doc, newSheet.Id, view.Id, new XYZ(0.5, 0.5, 0));\n        }\n    }\n}"}
{"prompt":"Create a new A1 sheet for each floor plan view in the project.","completion":"// Strategy: Iterate over a set of elements and perform an action for each.\n// 1. Get all plan views.\nvar planViews = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Where(v => !v.IsTemplate).Cast<ViewPlan>().ToList();\n// 2. Find an A1 title block.\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A1\")) as FamilySymbol;\nif(titleBlock != null && planViews.Any()){\n    int sheetCounter = 101;\n    // 3. Iterate through each plan view.\n    foreach(ViewPlan view in planViews){\n        // 4. Create a new sheet.\n        ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n        newSheet.Name = view.Name;\n        newSheet.SheetNumber = $\"A-{sheetCounter++}\";\n        // 5. Place the view on the sheet.\n        if(Viewport.CanAddViewToSheet(doc, newSheet.Id, view.Id)){\n            Viewport.Create(doc, newSheet.Id, view.Id, new XYZ(0.5, 0.5, 0));\n        }\n    }\n}"}
{"prompt":"Crea una nueva tabla de planificación para Pilares Estructurales.","completion":"ElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = \"Tabla de Pilares Estructurales\";"}
{"prompt":"Create a new schedule for Structural Columns.","completion":"ElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = \"Structural Column Schedule\";"}
{"prompt":"Añade los campos 'Nivel', 'Marca' y 'Volumen' a la tabla de pilares.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\"));\nif(schedule != null){\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.FAMILY_LEVEL_PARAM));\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.ALL_MODEL_MARK));\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.HOST_VOLUME_COMPUTED));\n    if(levelField != null) def.AddField(levelField);\n    if(markField != null) def.AddField(markField);\n    if(volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Add the 'Level', 'Mark', and 'Volume' fields to the column schedule.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Column\"));\nif(schedule != null){\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.FAMILY_LEVEL_PARAM));\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.ALL_MODEL_MARK));\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.HOST_VOLUME_COMPUTED));\n    if(levelField != null) def.AddField(levelField);\n    if(markField != null) def.AddField(markField);\n    if(volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Crea una nueva hoja A3 y colócale una leyenda.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A3\")) as FamilySymbol;\nViewLegend legendView = new FilteredElementCollector(doc).OfClass(typeof(ViewLegend)).FirstOrDefault() as ViewLegend;\nif(titleBlock != null && legendView != null){\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Leyendas\";\n    newSheet.SheetNumber = \"G-002\";\n    if(Viewport.CanAddViewToSheet(doc, newSheet.Id, legendView.Id)){\n        Viewport.Create(doc, newSheet.Id, legendView.Id, new XYZ(0.5, 0.5, 0));\n    }\n}"}
{"prompt":"Create a new A3 sheet and place a legend on it.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A3\")) as FamilySymbol;\nViewLegend legendView = new FilteredElementCollector(doc).OfClass(typeof(ViewLegend)).FirstOrDefault() as ViewLegend;\nif(titleBlock != null && legendView != null){\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Legends\";\n    newSheet.SheetNumber = \"G-002\";\n    if(Viewport.CanAddViewToSheet(doc, newSheet.Id, legendView.Id)){\n        Viewport.Create(doc, newSheet.Id, legendView.Id, new XYZ(0.5, 0.5, 0));\n    }\n}"}
{"prompt":"Obtén todas las familias de puertas cargadas en el proyecto.","completion":"var doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory?.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Get all door families loaded in the project.","completion":"var doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory?.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Aplica el estilo visual 'Rayos X' a la vista 3D activa.","completion":"View3D view3d = doc.ActiveView as View3D;\nif(view3d != null){\n    view3d.DisplayStyle = DisplayStyle.Wireframe;\n    // La API no tiene un modo 'Rayos X' directo, Wireframe es lo más cercano.\n}"}
{"prompt":"Apply the 'X-Ray' visual style to the active 3D view.","completion":"View3D view3d = doc.ActiveView as View3D;\nif(view3d != null){\n    view3d.DisplayStyle = DisplayStyle.Wireframe;\n    // The API does not have a direct 'X-Ray' mode, Wireframe is the closest equivalent.\n}"}
{"prompt":"Crea una losa de cimentación estructural de 40cm de espesor.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundationLevel != null && slabType != null){\n    FloorType newSlabType = slabType.Duplicate(\"Losa Cimentación 40cm\") as FloorType;\n    CompoundStructure cs = newSlabType.GetCompoundStructure();\n    if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(40, UnitTypeId.Centimeters));\n    newSlabType.SetCompoundStructure(cs);\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(10,10,0));\n    Floor.Create(doc, new List<CurveLoop>{profile}, newSlabType.Id, foundationLevel.Id);\n}"}
{"prompt":"Create a structural foundation slab 40cm thick.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundationLevel != null && slabType != null){\n    FloorType newSlabType = slabType.Duplicate(\"Foundation Slab 40cm\") as FloorType;\n    CompoundStructure cs = newSlabType.GetCompoundStructure();\n    if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(40, UnitTypeId.Centimeters));\n    newSlabType.SetCompoundStructure(cs);\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(10,10,0));\n    Floor.Create(doc, new List<CurveLoop>{profile}, newSlabType.Id, foundationLevel.Id);\n}"}
{"prompt":"Genera un reporte con el área de todas las habitaciones del proyecto.","completion":"StringBuilder report = new StringBuilder(\"Reporte de Áreas de Habitaciones:\\n\");\nvar rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>();\nforeach(Room room in rooms)\n{\n    double area = room.get_Parameter(BuiltInParameter.ROOM_AREA).AsDouble();\n    report.AppendLine($\"- {room.Name}: {UnitUtils.ConvertFromInternalUnits(area, UnitTypeId.SquareMeters):F2} m²\");\n}\nTaskDialog.Show(\"Reporte de Áreas\", report.ToString());"}
{"prompt":"Generate a report with the area of all rooms in the project.","completion":"StringBuilder report = new StringBuilder(\"Room Area Report:\\n\");\nvar rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>();\nforeach(Room room in rooms)\n{\n    double area = room.get_Parameter(BuiltInParameter.ROOM_AREA).AsDouble();\n    report.AppendLine($\"- {room.Name}: {UnitUtils.ConvertFromInternalUnits(area, UnitTypeId.SquareMeters):F2} m²\");\n}\nTaskDialog.Show(\"Area Report\", report.ToString());"}
{"prompt":"Crea un techo por extrusión con un perfil en arco.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nif(level != null && roofType != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n    ReferencePlane refPlane = ReferencePlane.Create(doc, new XYZ(0,0,level.Elevation), XYZ.BasisY, doc.ActiveView);\n    doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n}"}
{"prompt":"Create an extrusion roof with an arc profile.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nif(level != null && roofType != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n    ReferencePlane refPlane = ReferencePlane.Create(doc, new XYZ(0,0,level.Elevation), XYZ.BasisY, doc.ActiveView);\n    doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n}"}
{"prompt":"Oculta todos los elementos de anotación en la vista activa.","completion":"var annotationCategories = new List<BuiltInCategory>\n{\n    BuiltInCategory.OST_GenericAnnotation,\n    BuiltInCategory.OST_TextNotes,\n    BuiltInCategory.OST_Tags,\n    BuiltInCategory.OST_Dimensions\n};\nvar multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\nvar elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\nif(elementsToHide.Any())\n{\n    doc.ActiveView.HideElements(elementsToHide);\n}"}
{"prompt":"Hide all annotation elements in the active view.","completion":"var annotationCategories = new List<BuiltInCategory>\n{\n    BuiltInCategory.OST_GenericAnnotation,\n    BuiltInCategory.OST_TextNotes,\n    BuiltInCategory.OST_Tags,\n    BuiltInCategory.OST_Dimensions\n};\nvar multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\nvar elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\nif(elementsToHide.Any())\n{\n    doc.ActiveView.HideElements(elementsToHide);\n}"}
{"prompt":"Encuentra todas las vistas que no tienen una plantilla de vista asignada.","completion":"var viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View))\n    .Cast<View>()\n    .Where(v => v.CanBePrinted() && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId)\n    .ToList();\nStringBuilder sb = new StringBuilder(\"Vistas sin plantilla:\\n\");\nforeach(var view in viewsWithoutTemplate)\n{\n    sb.AppendLine(view.Name);\n}\nTaskDialog.Show(\"Auditoría de Vistas\", sb.ToString());"}
{"prompt":"Find all views that do not have a view template assigned.","completion":"var viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View))\n    .Cast<View>()\n    .Where(v => v.CanBePrinted() && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId)\n    .ToList();\nStringBuilder sb = new StringBuilder(\"Views without template:\\n\");\nforeach(var view in viewsWithoutTemplate)\n{\n    sb.AppendLine(view.Name);\n}\nTaskDialog.Show(\"View Audit\", sb.ToString());"}
{"prompt":"Establece el parámetro 'Marca' de todos los muros seleccionados a 'M-01'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any())\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall)\n        {\n            Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n            if(markParam != null) markParam.Set(\"M-01\");\n        }\n    }\n}"}
{"prompt":"Set the 'Mark' parameter of all selected walls to 'W-01'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any())\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall)\n        {\n            Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n            if(markParam != null) markParam.Set(\"W-01\");\n        }\n    }\n}"}
{"prompt":"Crea 10 worksets de arquitectura.","completion":"if(doc.IsWorkshared)\n{\n    var worksetNames = new List<string> { \"TAD_ARQ_MAM\", \"TAD_ARQ_ACA\", \"TAD_ARQ_PLA\", \"TAD_ARQ_PSO\", \"TAD_ARQ_HRE\", \"TAD_ARQ_ALU\", \"TAD_ARQ_CAR\", \"TAD_ARQ_MOB\", \"TAD_ARQ_PLO\", \"TAD_ARQ_EXT\" };\n    foreach(string name in worksetNames)\n    {\n        Workset.Create(doc, name);\n    }\n}"}
{"prompt":"Create 10 architectural worksets.","completion":"if(doc.IsWorkshared)\n{\n    var worksetNames = new List<string> { \"TAD_ARQ_WALLS\", \"TAD_ARQ_FINISHES\", \"TAD_ARQ_CEILINGS\", \"TAD_ARQ_FLOORS\", \"TAD_ARQ_RAILINGS\", \"TAD_ARQ_WINDOWS\", \"TAD_ARQ_CARPENTRY\", \"TAD_ARQ_FURNITURE\", \"TAD_ARQ_PLUMBING\", \"TAD_ARQ_EXTERIOR\" };\n    foreach(string name in worksetNames)\n    {\n        Workset.Create(doc, name);\n    }\n}"}
{"prompt":"Cambia el nombre de todas las tablas que contienen 'Muros' por 'Cuantificación de Muros'.","completion":"var schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"Muros\"));\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"Muros\", \"Cuantificación de Muros\");\n}"}
{"prompt":"Rename all schedules containing 'Walls' to 'Wall Quantity Takeoff'.","completion":"var schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"Walls\"));\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"Walls\", \"Wall Quantity Takeoff\");\n}"}
{"prompt":"Encuentra todas las familias de anotación y muestra sus nombres.","completion":"var annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation);\nStringBuilder sb = new StringBuilder(\"Familias de Anotación:\\n\");\nforeach(var fam in annotationFamilies)\n{\n    sb.AppendLine(fam.Name);\n}\nTaskDialog.Show(\"Familias de Anotación\", sb.ToString());"}
{"prompt":"Find all annotation families and display their names.","completion":"var annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation);\nStringBuilder sb = new StringBuilder(\"Annotation Families:\\n\");\nforeach(var fam in annotationFamilies)\n{\n    sb.AppendLine(fam.Name);\n}\nTaskDialog.Show(\"Annotation Families\", sb.ToString());"}
{"prompt":"Crea un tipo de cota lineal con texto rojo.","completion":"DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\nif(linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"Cota Roja\") as DimensionType;\n    if(newDimType != null)\n    {\n        newDimType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(255,0,0).GetElementId());\n    }\n}"}
{"prompt":"Create a linear dimension type with red text.","completion":"DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\nif(linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"Red Dimension\") as DimensionType;\n    if(newDimType != null)\n    {\n        newDimType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(255,0,0).GetElementId());\n    }\n}"}
{"prompt":"Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif(furnitureCat != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Set the visibility of the 'Furniture' category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif(furnitureCat != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Éxito\", $\"Se eliminaron {unusedWallTypes.Count} tipos de muro no utilizados.\");\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Success\", $\"Deleted {unusedWallTypes.Count} unused wall types.\");\n}"}
{"prompt":"Crea una nueva hoja A1 y coloca la vista 'Planta Baja' en ella.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A1\")) as FamilySymbol;\nView viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Planta Baja\") as View;\nif (titleBlock != null && viewToPlace != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Planta Arquitectónica\";\n    newSheet.SheetNumber = \"A-101\";\n    if (Viewport.CanAddViewToSheet(doc, newSheet.Id, viewToPlace.Id))\n    {\n        Viewport.Create(doc, newSheet.Id, viewToPlace.Id, new XYZ(0.5, 0.5, 0));\n    }\n}"}
{"prompt":"Create a new A1 sheet and place the 'Ground Floor' view on it.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A1\")) as FamilySymbol;\nView viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Ground Floor\") as View;\nif (titleBlock != null && viewToPlace != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Architectural Plan\";\n    newSheet.SheetNumber = \"A-101\";\n    if (Viewport.CanAddViewToSheet(doc, newSheet.Id, viewToPlace.Id))\n    {\n        Viewport.Create(doc, newSheet.Id, viewToPlace.Id, new XYZ(0.5, 0.5, 0));\n    }\n}"}
{"prompt":"Reporta el número total de advertencias en el proyecto.","completion":"int warningCount = doc.GetWarnings().Count;\nTaskDialog.Show(\"Auditoría de Proyecto\", $\"El proyecto tiene {warningCount} advertencias.\");"}
{"prompt":"Report the total number of warnings in the project.","completion":"int warningCount = doc.GetWarnings().Count;\nTaskDialog.Show(\"Project Audit\", $\"The project has {warningCount} warnings.\");"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-60' basado en un tipo existente, y asigna '60 min' al parámetro 'Fire Rating'.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"Puerta RF-60\") as FamilySymbol;\n    Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n    if (fireRatingParam != null && !fireRatingParam.IsReadOnly)\n    {\n        fireRatingParam.Set(\"60 min\");\n    }\n}"}
{"prompt":"Create a new door type named 'FR-60 Door' based on an existing type, and set the 'Fire Rating' parameter to '60 min'.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"FR-60 Door\") as FamilySymbol;\n    Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n    if (fireRatingParam != null && !fireRatingParam.IsReadOnly)\n    {\n        fireRatingParam.Set(\"60 min\");\n    }\n}"}
{"prompt":"Mueve todos los elementos seleccionados 3 metros hacia arriba.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any())\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Move all selected elements 3 meters up.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any())\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Encuentra todos los muros que no están asociados a ningún nivel.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nvar unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToElements();\nTaskDialog.Show(\"Muros sin Nivel\", $\"Se encontraron {unassignedWalls.Count} muros sin nivel base.\");"}
{"prompt":"Find all walls that are not associated with any level.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nvar unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToElements();\nTaskDialog.Show(\"Unassigned Walls\", $\"Found {unassignedWalls.Count} walls with no base level.\");"}
{"prompt":"Exporta todos los tipos de familia de la categoría 'Mobiliario' a un archivo de texto.","completion":"string path = @\"C:\\RevitExports\\FurnitureTypes.txt\";\nvar furnitureTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType();\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(path))\n{\n    writer.WriteLine(\"Tipos de Mobiliario:\");\n    foreach(Element type in furnitureTypes)\n    {\n        writer.WriteLine(type.Name);\n    }\n}"}
{"prompt":"Export all family types from the 'Furniture' category to a text file.","completion":"string path = @\"C:\\RevitExports\\FurnitureTypes.txt\";\nvar furnitureTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType();\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(path))\n{\n    writer.WriteLine(\"Furniture Types:\");\n    foreach(Element type in furnitureTypes)\n    {\n        writer.WriteLine(type.Name);\n    }\n}"}
{"prompt":"Copia todos los muros del Nivel 1 al Nivel 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif (level1 != null && level2 != null)\n{\n    var wallsToCopy = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level1.Id).ToElementIds();\n    double elevationDiff = level2.Elevation - level1.Elevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(wallsToCopy.Any()) ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n}"}
{"prompt":"Copy all walls from Level 1 to Level 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif (level1 != null && level2 != null)\n{\n    var wallsToCopy = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level1.Id).ToElementIds();\n    double elevationDiff = level2.Elevation - level1.Elevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(wallsToCopy.Any()) ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n}"}
{"prompt":"Crea un nuevo tipo de texto de 3mm de color azul.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"3mm Azul\") as TextNoteType;\n    newType.get_Parameter(BuiltInParameter.TEXT_SIZE).Set(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Millimeters));\n    newType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(0,0,255).GetElementId());\n}"}
{"prompt":"Create a new 3mm text type in blue color.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"3mm Blue\") as TextNoteType;\n    newType.get_Parameter(BuiltInParameter.TEXT_SIZE).Set(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Millimeters));\n    newType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(0,0,255).GetElementId());\n}"}
{"prompt":"Encuentra todos los muros que midan más de 3 metros de alto.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nvar tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds();\nTaskDialog.Show(\"Resultado\", $\"Se encontraron {tallWalls.Count} muros con más de 3m de altura.\");"}
{"prompt":"Find all walls taller than 3 meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nvar tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds();\nTaskDialog.Show(\"Result\", $\"Found {tallWalls.Count} walls taller than 3m.\");"}
{"prompt":"Selecciona un muro y encuentra todas las tuberías que lo atraviesan.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nElement wall = doc.GetElement(wallRef);\nif(wall != null)\n{\n    ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n    var intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds();\n    TaskDialog.Show(\"Colisiones\", $\"El muro intersecta con {intersectingPipes.Count} tuberías.\");\n    if(intersectingPipes.Any()) uidoc.Selection.SetElementIds(intersectingPipes);\n}"}
{"prompt":"Select a wall and find all pipes passing through it.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\nElement wall = doc.GetElement(wallRef);\nif(wall != null)\n{\n    ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n    var intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds();\n    TaskDialog.Show(\"Clashes\", $\"The wall intersects with {intersectingPipes.Count} pipes.\");\n    if(intersectingPipes.Any()) uidoc.Selection.SetElementIds(intersectingPipes);\n}"}
{"prompt":"Crea una nota de texto que apunte al elemento seleccionado y diga 'REVISAR CLASH'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference targetRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\nif(targetRef != null)\n{\n    XYZ textLocation = uidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n    TextNoteOptions opts = new TextNoteOptions() { HorizontalAlignment = HorizontalAlignment.Left };\n    \n    TextNote note = TextNote.Create(doc, doc.ActiveView.Id, textLocation, \"REVISAR CLASH\", opts);\n    note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L, targetRef.GlobalPoint);\n}"}
{"prompt":"Create a text note pointing to the selected element that says 'REVIEW CLASH'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference targetRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\nif(targetRef != null)\n{\n    XYZ textLocation = uidoc.Selection.PickPoint(\"Choose the text location\");\n    TextNoteOptions opts = new TextNoteOptions() { HorizontalAlignment = HorizontalAlignment.Left };\n    \n    TextNote note = TextNote.Create(doc, doc.ActiveView.Id, \"REVIEW CLASH\", textLocation, opts);\n    note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L, targetRef.GlobalPoint);\n}"}
{"prompt":"Oculta todos los muros que sean más cortos de 2 metros.","completion":"double lengthThreshold = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nvar walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\nList<ElementId> shortWallIds = new List<ElementId>();\n\nforeach(Wall wall in walls)\n{\n    double length = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n    if(length < lengthThreshold)\n    {\n        shortWallIds.Add(wall.Id);\n    }\n}\n\nif(shortWallIds.Any())\n{\n    doc.ActiveView.HideElements(shortWallIds);\n    TaskDialog.Show(\"Resultado\", $\"Se ocultaron {shortWallIds.Count} muros cortos.\");\n}"}
{"prompt":"Hide all walls shorter than 2 meters.","completion":"double lengthThreshold = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nvar walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\nList<ElementId> shortWallIds = new List<ElementId>();\n\nforeach(Wall wall in walls)\n{\n    double length = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n    if(length < lengthThreshold)\n    {\n        shortWallIds.Add(wall.Id);\n    }\n}\n\nif(shortWallIds.Any())\n{\n    doc.ActiveView.HideElements(shortWallIds);\n    TaskDialog.Show(\"Result\", $\"Hid {shortWallIds.Count} short walls.\");\n}"}
{"prompt":"Crea una viga estructural entre (0,0,0) y (5,0,0) en el Nivel 1.","completion":"XYZ start = new XYZ(0, 0, 0);\nXYZ end = new XYZ(5, 0, 0);\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault();\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nif(beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Create a structural beam between (0,0,0) and (5,0,0) on Level 1.","completion":"XYZ start = new XYZ(0, 0, 0);\nXYZ end = new XYZ(5, 0, 0);\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault();\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nif(beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Crea una cortina mural rectangular del Nivel 1 al Nivel 2 entre (0,0) y (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Create a rectangular curtain wall from Level 1 to Level 2 between (0,0) and (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Carga la familia 'LightingFixture.rfa' e inserta una instancia en coordenadas (2,2,3) en Nivel 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Load the 'LightingFixture.rfa' family and insert an instance at (2,2,3) on Level 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Crea un techo esquemático rectangular en 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Create a schematic rectangular roof at 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Genera una losa de cimentación de 1m de espesor.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Create a 1m thick structural footing slab.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt": "Crea un muro de concreto de 5 metros en el Nivel 1.","completion": "// Estrategia: Manejar una solicitud con un tipo ambiguo.\n// 1. Encontrar el nivel de destino.\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\");\nif (level == null) {\n    TaskDialog.Show(\"Error\", \"No se encontró el Nivel 1.\");\n    return; // Usamos return para salir del bloque de código.\n}\n\n// 2. Buscar TODOS los tipos de muro que contengan la palabra clave 'concreto'.\nvar concreteWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().Where(wt => wt.Name.ToLower().Contains(\"concreto\")).ToList();\n\nWallType selectedWallType = null;\n\n// 3. Evaluar los resultados de la búsqueda.\nif (concreteWallTypes.Count == 1)\n{\n    // Caso ideal: solo hay un tipo, lo usamos.\n    selectedWallType = concreteWallTypes.First();\n}\nelse if (concreteWallTypes.Count > 1)\n{\n    // Caso ambiguo: hay varios tipos. Pedir al usuario que elija.\n    TaskDialog.Show(\"Ambigüedad\", \"Se encontraron varios tipos de muro de concreto. Por favor, selecciona uno y vuelve a intentarlo siendo más específico (ej: 'Crea un muro de Concreto - 20cm').\");\n    // En una implementación más avanzada, se podría mostrar una lista para elegir.\n    return;\n}\nelse\n{\n    // Caso no encontrado: no hay ningún tipo que coincida.\n    TaskDialog.Show(\"Error\", \"No se encontró ningún tipo de muro de 'concreto' en el proyecto.\");\n    return;\n}\n\n// 4. Si se seleccionó un tipo de forma no ambigua, crear el muro.\nif (selectedWallType != null)\n{\n    Line wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(UnitUtils.ConvertToInternalUnits(5, UnitTypeId.Meters), 0, 0));\n    Wall.Create(doc, wallCurve, selectedWallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);\n}"}
{"prompt":"Exporta todos los muros con 'Mark' a un archivo CSV.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Export all walls with a 'Mark' to a CSV file.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Create an intermediate level named 'Mezzanine' halfway between Level 1 and Level 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Cambia el material de todos los muros a 'Acero'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Acero\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Change the material of all walls to 'Steel'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Steel\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Éxito\", $\"Se eliminaron {unusedWallTypes.Count} tipos de muro no utilizados.\");\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Success\", $\"Deleted {unusedWallTypes.Count} unused wall types.\");\n}"}
{"prompt":"Añade una línea de rejilla U en un muro cortina a 3m desde el origen.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Add a U grid line to a curtain wall at 3m from the origin.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Añade una línea de rejilla V en un muro cortina a 2m de altura.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Add a V grid line to a curtain wall at 2m height.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Activa todos los segmentos en la primera línea de rejilla U.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Activate all segments on the first U grid line.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Añade montantes en la línea de rejilla U seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla de muro cortina\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Add mullions to the selected U grid line.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a curtain grid line\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Aísla la rejilla V seleccionada y añade solo un segmento.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla V\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Isolate the selected V gridline and add only one segment.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a V grid line\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Crea una nueva fase 'Fase 3 - Ejecución'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Fase 3 - Ejecución\";"}
{"prompt":"Create a new phase 'Phase 3 - Execution'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Phase 3 - Execution\";"}
{"prompt":"Asigna la demolición de los muros seleccionados a la 'Fase 3 - Ejecución'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Fase 3 - Ejecución\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Assign the demolition of selected walls to 'Phase 3 - Execution'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Phase 3 - Execution\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Cambia el primer tipo de muro curvo a un tipo estructural.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curved);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Change the first curved wall type to a structural type.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curtain);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Cambia el material de los paneles de muro cortina a 'Vidrio' si no tienen material.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Set curtain panel material to 'Glass' if unassigned.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 200mm' y nómbralo 'Muro_Dibujo'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Genérico - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Muro_Dibujo\");"}
{"prompt":"Duplicate wall type 'Generic - 200mm' and name it 'Drawing_Wall'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Generic - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Drawing_Wall\");"}
{"prompt":"Exporta los IDs y las elevaciones de los niveles a un archivo CSV.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Export level IDs and elevations to a CSV file.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Elimina todos los montantes (mullions) desbloqueados de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Delete all unlocked mullions from a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Crea un nuevo tipo de muro llamado 'Muro Genérico - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Muro Genérico - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Create a new wall type named 'Generic Wall - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Generic Wall - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Change the type of all selected walls to 'Exterior Wall - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Exterior Wall - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Crea una nueva hoja con el nombre 'Planos de Planta'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Planos de Planta\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Create a new sheet with the name 'Floor Plans'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Floor Plans\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Coloca la vista 'Nivel 1' en la hoja 'Planos de Planta' en el centro.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Planos de Planta\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Nivel 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Place the 'Level 1' view on the 'Floor Plans' sheet at its center.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Floor Plans\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Level 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Establece el nivel de detalle de la vista activa a 'Fino'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Set the detail level of the active view to 'Fine'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Renombrar el nivel 'Nivel 1' a 'Planta Baja'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nif(levelToRename != null) levelToRename.Name = \"Planta Baja\";"}
{"prompt":"Rename the 'Level 1' level to 'Ground Floor'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nif(levelToRename != null) levelToRename.Name = \"Ground Floor\";"}
{"prompt":"Crea un pilar estructural con una sección de 300x300mm en (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Create a structural column with a 300x300mm section at (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Alinea todos los muros con el eje '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Align all walls to grid '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Crea una masa in-place.","completion":"using (Transaction t = new Transaction(doc, \"Crear Masa In-Place\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Create an in-place mass.","completion":"using (Transaction t = new Transaction(doc, \"Create In-Place Mass\"))\n{\n    t.Start();\n    InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass), null);\n    t.Commit();\n}"}
{"prompt":"Aplica un material llamado 'Hormigón in situ' a todos los suelos.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Hormigón in situ\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Apply a material named 'Cast-in-place Concrete' to all floors.","completion":"Material concreteMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m => m.Name == \"Cast-in-place Concrete\");\nif(concreteMaterial != null)\n{\n    var floors = new FilteredElementCollector(doc).OfClass(typeof(Floor)).WhereElementIsNotElementType().Cast<Floor>();\n    foreach(Floor floor in floors)\n    {\n        Parameter materialParam = floor.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM);\n        if(materialParam != null && !materialParam.IsReadOnly) materialParam.Set(concreteMaterial.Id);\n    }\n}"}
{"prompt":"Borra todos los grupos del modelo.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Delete all groups from the model.","completion":"var groups = new FilteredElementCollector(doc).OfClass(typeof(Group)).ToElementIds();\nif(groups.Any())\n{\n    doc.Delete(groups);\n}"}
{"prompt":"Crea una nueva hoja y nómbrala usando el número de la siguiente hoja disponible.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Create a new sheet and name it using the next available sheet number.","completion":"string baseNumber = \"A-20\"; int i = 1;\nstring newSheetNumber = baseNumber + i.ToString(\"D2\");\nwhile(new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Any(s => (s as ViewSheet).SheetNumber == newSheetNumber))\n{\n    i++;\n    newSheetNumber = baseNumber + i.ToString(\"D2\");\n}\nFamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif(titleBlock != null) {\n    ViewSheet.Create(doc, titleBlock.Id).SheetNumber = newSheetNumber;\n}"}
{"prompt":"Rota la vista activa 90 grados.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Rotate the active view by 90 degrees.","completion":"if(doc.ActiveView.CanModifyOrientation())\n{\n    doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).Set(doc.ActiveView.get_Parameter(BuiltInParameter.VIEWER_CROP_REGION_ROTATED).AsDouble() + Math.PI / 2.0);\n}"}
{"prompt":"Crea una vista de detalle (callout) que siga la forma de un polígono.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Create a detail callout view that follows the shape of a polygon.","completion":"ViewPlan planView = doc.ActiveView as ViewPlan;\nif (planView != null) {\n    List<Curve> profile = new List<Curve> { /* Define a list of curves for the polygon */ };\n    View.CreateDetailCallout(doc, planView.Id, profile);\n}"}
{"prompt":"Crea una masa conceptual cónica.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Create a conical conceptual mass.","completion":"InPlaceElement coneMass = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\nCurveLoop baseProfile = CurveLoop.Create(new List<Curve>{ Arc.Create(XYZ.Zero, 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nSolid cone = GeometryCreationUtilities.CreateCone(new Frame(XYZ.Zero, XYZ.BasisX, XYZ.BasisY, XYZ.BasisZ), 5, 10, baseProfile);\nconeMass.SetGeometry(new List<GeometryObject>{cone});\nconeMass.Commit();"}
{"prompt":"Aplica un material a todas las capas de un tipo de muro.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Apply a material to all layers of a wall type.","completion":"WallType wallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nMaterial material = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Brick\")) as Material;\nif(wallType != null && material != null)\n{\n    CompoundStructure cs = wallType.GetCompoundStructure();\n    for(int i = 0; i < cs.GetLayerCount(); i++)\n    {\n        cs.SetMaterialId(i, material.Id);\n    }\n    wallType.SetCompoundStructure(cs);\n}"}
{"prompt":"Encuentra todos los elementos dentro de un 'Scope Box' específico.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zona A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxXYZ bbox = scopeBox.get_BoundingBox(null);\n    Outline outline = new Outline(bbox.Min, bbox.Max);\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(outline);\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Find all elements within a specific 'Scope Box'.","completion":"ScopeBox scopeBox = new FilteredElementCollector(doc).OfClass(typeof(ScopeBox)).FirstOrDefault(sb => sb.Name == \"Zone A\") as ScopeBox;\nif(scopeBox != null)\n{\n    BoundingBoxXYZ bbox = scopeBox.get_BoundingBox(null);\n    Outline outline = new Outline(bbox.Min, bbox.Max);\n    BoundingBoxIntersectsFilter filter = new BoundingBoxIntersectsFilter(outline);\n    var elementsInBox = new FilteredElementCollector(doc).WherePasses(filter).WhereElementIsNotElementType().ToElements();\n}"}
{"prompt":"Crea una vista de plano estructural para el Nivel 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Plano Estructural Nivel 2\";\n}"}
{"prompt":"Create a structural plan view for Level 2.","completion":"ViewFamilyType vft = new FilteredElementCollector(doc).OfClass(typeof(ViewFamilyType)).Cast<ViewFamilyType>().FirstOrDefault(x => x.ViewFamily == ViewFamily.StructuralPlan);\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif(vft != null && level2 != null)\n{\n    ViewPlan.Create(doc, vft.Id, level2.Id).Name = \"Structural Plan Level 2\";\n}"}
{"prompt":"Cambia el color de la línea de todas las tuberías sanitarias a verde.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Change the line color of all sanitary pipes to green.","completion":"PipingSystemType sanitarySystem = new FilteredElementCollector(doc).OfClass(typeof(PipingSystemType)).Cast<PipingSystemType>().FirstOrDefault(s => s.SystemClassification == MEPSystemClassification.Sanitary);\nif(sanitarySystem != null)\n{\n    OverrideGraphicSettings ogs = new OverrideGraphicSettings();\n    ogs.SetProjectionLineColor(new Color(0, 255, 0));\n    var pipes = new FilteredElementCollector(doc).OfClass(typeof(Pipe)).Cast<Pipe>().Where(p => p.get_Parameter(BuiltInParameter.RBS_PIPING_SYSTEM_TYPE_PARAM).AsElementId() == sanitarySystem.Id);\n    foreach(Pipe p in pipes)\n    {\n        doc.ActiveView.SetElementOverrides(p.Id, ogs);\n    }\n}"}
{"prompt":"Oculta todos los elementos excepto los muros en la vista actual.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Hide all elements except walls in the current view.","completion":"var categories = doc.Settings.Categories;\nforeach(Category cat in categories)\n{\n    if(cat.CategoryType == CategoryType.Model && cat.Id.IntegerValue != (int)BuiltInCategory.OST_Walls)\n    {\n        doc.ActiveView.SetCategoryHidden(cat.Id, true);\n    }\n}"}
{"prompt":"Encuentra y selecciona todas las familias no utilizadas en el proyecto.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Find and select all unused families in the project.","completion":"var allFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).ToElementIds();\nvar usedFamilyIds = new FilteredElementCollector(doc).WhereElementIsNotElementType().Select(e => e.GetTypeId()).Where(id => doc.GetElement(id)?.Category != null).Select(id => (doc.GetElement(id) as ElementType).Family.Id).Distinct();\nvar unusedFamilyIds = allFamilies.Except(usedFamilyIds).ToList();\nif(unusedFamilyIds.Any()) new UIDocument(doc).Selection.SetElementIds(unusedFamilyIds);"}
{"prompt":"Exporta una lista de todas las vistas y sus plantillas aplicadas a CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Export a list of all views and their applied templates to CSV.","completion":"var views = new FilteredElementCollector(doc).OfClass(typeof(View)).Cast<View>().Where(v => v.CanBePrinted() && !v.IsTemplate);\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(@\"C:\\RevitExports\\ViewTemplates.csv\"))\n{\n    writer.WriteLine(\"ViewName,TemplateName\");\n    foreach(View v in views)\n    {\n        string templateName = (v.ViewTemplateId != ElementId.InvalidElementId) ? doc.GetElement(v.ViewTemplateId).Name : \"None\";\n        writer.WriteLine($\"{v.Name},{templateName}\");\n    }\n}"}
{"prompt":"Crea una cortina mural rectangular del Nivel 1 al Nivel 2 entre (0,0) y (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Create a rectangular curtain wall from Level 1 to Level 2 between (0,0) and (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Añade rejillas U y V cada 2 m a un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Add U and V gridlines every 2m to a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Carga la familia 'LightingFixture.rfa' e inserta una instancia en coordenadas (2,2,3) en Nivel 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Load the 'LightingFixture.rfa' family and insert an instance at (2,2,3) on Level 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Crea un techo esquemático rectangular en 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Create a schematic rectangular roof at 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Genera una losa de cimentación de 1m de espesor.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Create a 1m thick structural footing slab.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Exporta todos los muros con 'Mark' a un archivo CSV.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Export all walls with a 'Mark' to a CSV file.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Create an intermediate level named 'Mezzanine' halfway between Level 1 and Level 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Cambia el material de todos los muros a 'Acero'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Acero\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Change the material of all walls to 'Steel'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Steel\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Éxito\", $\"Se eliminaron {unusedWallTypes.Count} tipos de muro no utilizados.\");\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Success\", $\"Deleted {unusedWallTypes.Count} unused wall types.\");\n}"}
{"prompt":"Añade una línea de rejilla U en un muro cortina a 3m desde el origen.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Add a U grid line to a curtain wall at 3m from the origin.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Añade una línea de rejilla V en un muro cortina a 2m de altura.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Add a V grid line to a curtain wall at 2m height.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Activa todos los segmentos en la primera línea de rejilla U.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Activate all segments on the first U grid line.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Añade montantes en la línea de rejilla U seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla de muro cortina\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Add mullions to the selected U grid line.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a curtain grid line\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Aísla la rejilla V seleccionada y añade solo un segmento.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla V\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Isolate the selected V gridline and add only one segment.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a V grid line\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Crea una nueva fase 'Fase 3 - Ejecución'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Fase 3 - Ejecución\";"}
{"prompt":"Create a new phase 'Phase 3 - Execution'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Phase 3 - Execution\";"}
{"prompt":"Asigna la demolición de los muros seleccionados a la 'Fase 3 - Ejecución'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Fase 3 - Ejecución\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Assign the demolition of selected walls to 'Phase 3 - Execution'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Phase 3 - Execution\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Cambia el primer tipo de muro curvo a un tipo estructural.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curved);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Change the first curved wall type to a structural type.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curtain);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Cambia el material de los paneles de muro cortina a 'Vidrio' si no tienen material.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Set curtain panel material to 'Glass' if unassigned.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 200mm' y nómbralo 'Muro_Dibujo'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Genérico - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Muro_Dibujo\");"}
{"prompt":"Duplicate wall type 'Generic - 200mm' and name it 'Drawing_Wall'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Generic - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Drawing_Wall\");"}
{"prompt":"Exporta los IDs y las elevaciones de los niveles a un archivo CSV.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Export level IDs and elevations to a CSV file.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Elimina todos los montantes (mullions) desbloqueados de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Delete all unlocked mullions from a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}

{"prompt":"Crea un muro de hormigón en el Nivel 1.","completion":"// Estrategia: Manejar tipo de muro ambiguo.\n// 1. Encontrar el nivel.\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Nivel 1\") as Level;\nif (level == null) {\n    TaskDialog.Show(\"Error\", \"No se encontró el Nivel 1.\");\n    return;\n}\n\n// 2. Buscar todos los tipos de muro que contengan 'hormigón'.\nvar wallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().Where(wt => wt.Name.ToLower().Contains(\"hormigón\")).ToList();\n\nWallType selectedWallType = null;\n\n// 3. Evaluar resultados.\nif (wallTypes.Count == 1) {\n    selectedWallType = wallTypes.First();\n} else if (wallTypes.Count > 1) {\n    TaskDialog.Show(\"Ambigüedad\", \"Se encontraron varios tipos de muro de hormigón. Por favor, sé más específico.\");\n    return;\n} else {\n    TaskDialog.Show(\"Error\", \"No se encontró ningún tipo de muro de 'hormigón'.\");\n    return;\n}\n\n// 4. Crear el muro si se encontró un tipo.\nLine wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10, 0, 0));\nWall.Create(doc, wallCurve, selectedWallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);"}
{"prompt":"Create a concrete wall on Level 1.","completion":"// Strategy: Handle ambiguous wall type.\n// 1. Find the level.\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nif (level == null) {\n    TaskDialog.Show(\"Error\", \"Level 1 not found.\");\n    return;\n}\n\n// 2. Find all wall types containing 'concrete'.\nvar wallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().Where(wt => wt.Name.ToLower().Contains(\"concrete\")).ToList();\n\nWallType selectedWallType = null;\n\n// 3. Evaluate results.\nif (wallTypes.Count == 1) {\n    selectedWallType = wallTypes.First();\n} else if (wallTypes.Count > 1) {\n    TaskDialog.Show(\"Ambiguity\", \"Multiple concrete wall types found. Please be more specific.\");\n    return;\n} else {\n    TaskDialog.Show(\"Error\", \"No 'concrete' wall types found.\");\n    return;\n}\n\n// 4. Create the wall if a type was found.\nLine wallCurve = Line.CreateBound(XYZ.Zero, new XYZ(10, 0, 0));\nWall.Create(doc, wallCurve, selectedWallType.Id, level.Id, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, false, false);"}
{"prompt":"Inserta una puerta abatible en un muro.","completion":"// Estrategia: Manejar familia ambigua.\n// 1. Buscar todos los tipos de puerta que contengan 'abatible'.\nvar doorSymbols = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().Cast<FamilySymbol>().Where(s => s.Name.ToLower().Contains(\"abatible\")).ToList();\n\nFamilySymbol selectedSymbol = null;\n\n// 2. Evaluar resultados.\nif (doorSymbols.Count == 1) {\n    selectedSymbol = doorSymbols.First();\n} else if (doorSymbols.Count > 1) {\n    TaskDialog.Show(\"Ambigüedad\", \"Se encontraron varios tipos de puertas abatibles. Por favor, especifica el nombre completo.\");\n    return;\n} else {\n    TaskDialog.Show(\"Error\", \"No se encontró ningún tipo de puerta 'abatible'.\");\n    return;\n}\n\n// 3. Encontrar un muro anfitrión y crear la puerta.\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif (hostWall != null) {\n    if (!selectedSymbol.IsActive) selectedSymbol.Activate();\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    XYZ insertionPoint = (hostWall.Location as LocationCurve).Curve.Evaluate(0.5, true);\n    doc.Create.NewFamilyInstance(insertionPoint, selectedSymbol, hostWall, level, StructuralType.NonStructural);\n} else {\n    TaskDialog.Show(\"Error\", \"No se encontró ningún muro para colocar la puerta.\");\n}"}
{"prompt":"Insert a swing door into a wall.","completion":"// Strategy: Handle ambiguous family.\n// 1. Find all door types containing 'swing'.\nvar doorSymbols = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().Cast<FamilySymbol>().Where(s => s.Name.ToLower().Contains(\"swing\")).ToList();\n\nFamilySymbol selectedSymbol = null;\n\n// 2. Evaluate results.\nif (doorSymbols.Count == 1) {\n    selectedSymbol = doorSymbols.First();\n} else if (doorSymbols.Count > 1) {\n    TaskDialog.Show(\"Ambiguity\", \"Multiple swing door types found. Please specify the full name.\");\n    return;\n} else {\n    TaskDialog.Show(\"Error\", \"No 'swing' door types found.\");\n    return;\n}\n\n// 3. Find a host wall and create the door.\nWall hostWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault() as Wall;\nif (hostWall != null) {\n    if (!selectedSymbol.IsActive) selectedSymbol.Activate();\n    Level level = doc.GetElement(hostWall.LevelId) as Level;\n    XYZ insertionPoint = (hostWall.Location as LocationCurve).Curve.Evaluate(0.5, true);\n    doc.Create.NewFamilyInstance(insertionPoint, selectedSymbol, hostWall, level, StructuralType.NonStructural);\n} else {\n    TaskDialog.Show(\"Error\", \"No host wall found to place the door.\");\n}"}
{"prompt":"Copia las propiedades de un muro a otro.","completion":"// Estrategia: Simular 'Match Properties' pidiendo dos selecciones.\nUIDocument uidoc = new UIDocument(doc);\ntry {\n    // 1. Pedir al usuario que seleccione el elemento de origen.\n    Reference sourceRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el muro de origen\");\n    Wall sourceWall = doc.GetElement(sourceRef) as Wall;\n\n    // 2. Pedir al usuario que seleccione el elemento de destino.\n    Reference targetRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el muro de destino\");\n    Wall targetWall = doc.GetElement(targetRef) as Wall;\n\n    // 3. Verificar que ambos son muros.\n    if (sourceWall != null && targetWall != null) {\n        // 4. Cambiar el tipo del muro de destino para que coincida con el de origen.\n        targetWall.ChangeTypeId(sourceWall.WallType.Id);\n    }\n} catch (Autodesk.Revit.Exceptions.OperationCanceledException) { /* El usuario canceló la operación */ }"}
{"prompt":"Match the properties of one wall to another.","completion":"// Strategy: Simulate 'Match Properties' by prompting for two selections.\nUIDocument uidoc = new UIDocument(doc);\ntry {\n    // 1. Prompt user to select the source element.\n    Reference sourceRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select the source wall\");\n    Wall sourceWall = doc.GetElement(sourceRef) as Wall;\n\n    // 2. Prompt user to select the target element.\n    Reference targetRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select the target wall\");\n    Wall targetWall = doc.GetElement(targetRef) as Wall;\n\n    // 3. Verify that both are walls.\n    if (sourceWall != null && targetWall != null) {\n        // 4. Change the target wall's type to match the source.\n        targetWall.ChangeTypeId(sourceWall.WallType.Id);\n    }\n} catch (Autodesk.Revit.Exceptions.OperationCanceledException) { /* User cancelled the operation */ }"}
{"prompt":"Elimina todos los muros que no sean estructurales.","completion":"// Estrategia: Filtrar por una condición negada y eliminar.\n// 1. Crear un filtro para muros que SÍ son estructurales.\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\nFilterRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\nElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n\n// 2. Obtener todos los muros y luego excluir los que cumplen el filtro.\nvar allWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).ToElementIds();\nvar structuralWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WherePasses(structuralFilter).ToElementIds();\nvar nonStructuralWallIds = allWalls.Except(structuralWalls).ToList();\n\n// 3. Eliminar los muros no estructurales.\nif (nonStructuralWallIds.Any()) {\n    doc.Delete(nonStructuralWallIds);\n    TaskDialog.Show(\"Resultado\", $\"Se eliminaron {nonStructuralWallIds.Count} muros no estructurales.\");\n}"}
{"prompt":"Delete all non-structural walls.","completion":"// Strategy: Filter by a negated condition and delete.\n// 1. Create a filter for walls that ARE structural.\nParameterValueProvider pvp = new ParameterValueProvider(new ElementId(BuiltInParameter.WALL_STRUCTURAL_SIGNIFICANT));\nFilterRule rule = new FilterIntegerRule(pvp, new FilterNumericEquals(), 1);\nElementParameterFilter structuralFilter = new ElementParameterFilter(rule);\n\n// 2. Get all walls and then exclude those that pass the filter.\nvar allWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).ToElementIds();\nvar structuralWalls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WherePasses(structuralFilter).ToElementIds();\nvar nonStructuralWallIds = allWalls.Except(structuralWalls).ToList();\n\n// 3. Delete the non-structural walls.\nif (nonStructuralWallIds.Any()) {\n    doc.Delete(nonStructuralWallIds);\n    TaskDialog.Show(\"Result\", $\"Deleted {nonStructuralWallIds.Count} non-structural walls.\");\n}"}
{"prompt":"¿Cuál es el área total de los muros con la función 'Exterior'?","completion":"// Estrategia: Filtrar por un parámetro de tipo y sumar un valor.\ndouble totalArea = 0.0;\nvar exteriorWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().Where(wt => wt.Function == WallFunction.Exterior);\n\nforeach(WallType wt in exteriorWallTypes){\n    var wallsOfType = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.GetTypeId() == wt.Id);\n    foreach(Wall wall in wallsOfType){\n        totalArea += wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED).AsDouble();\n    }\n}\nTaskDialog.Show(\"Área Total\", $\"Área total de muros exteriores: {UnitUtils.ConvertFromInternalUnits(totalArea, UnitTypeId.SquareMeters):F2} m²\");"}
{"prompt":"What is the total area of walls with the 'Exterior' function?","completion":"// Strategy: Filter by a type parameter and sum a value.\ndouble totalArea = 0.0;\nvar exteriorWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().Where(wt => wt.Function == WallFunction.Exterior);\n\nforeach(WallType wt in exteriorWallTypes){\n    var wallsOfType = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.GetTypeId() == wt.Id);\n    foreach(Wall wall in wallsOfType){\n        totalArea += wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED).AsDouble();\n    }\n}\nTaskDialog.Show(\"Total Area\", $\"Total area of exterior walls: {UnitUtils.ConvertFromInternalUnits(totalArea, UnitTypeId.SquareMeters):F2} m²\");"}
{"prompt":"Permíteme seleccionar varias ventanas y cambiar su tipo a 'Fijo 100x100'.","completion":"// Estrategia: Modificar en lote una selección del usuario.\nUIDocument uidoc = new UIDocument(doc);\nFamilySymbol targetSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Fijo 100x100\") as FamilySymbol;\nif (targetSymbol == null) {\n    TaskDialog.Show(\"Error\", \"No se encontró el tipo de ventana 'Fijo 100x100'.\");\n    return;\n}\ntry {\n    IList<Reference> pickedRefs = uidoc.Selection.PickObjects(ObjectType.Element, new Autodesk.Revit.UI.Selection.SelectionFilter.CategorySelectionFilter(\"Windows\"), \"Selecciona las ventanas a cambiar\");\n    if (pickedRefs.Any()){\n        if(!targetSymbol.IsActive) targetSymbol.Activate();\n        foreach(Reference r in pickedRefs){\n            FamilyInstance window = doc.GetElement(r) as FamilyInstance;\n            if(window != null) window.Symbol = targetSymbol;\n        }\n    }\n} catch (Autodesk.Revit.Exceptions.OperationCanceledException) { /* Operación cancelada */ }"}
{"prompt":"Let me select multiple windows and change their type to 'Fixed 100x100'.","completion":"// Strategy: Batch modify a user selection.\nUIDocument uidoc = new UIDocument(doc);\nFamilySymbol targetSymbol = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsElementType().FirstOrDefault(s => s.Name == \"Fixed 100x100\") as FamilySymbol;\nif (targetSymbol == null) {\n    TaskDialog.Show(\"Error\", \"Window type 'Fixed 100x100' not found.\");\n    return;\n}\ntry {\n    IList<Reference> pickedRefs = uidoc.Selection.PickObjects(ObjectType.Element, new Autodesk.Revit.UI.Selection.SelectionFilter.CategorySelectionFilter(\"Windows\"), \"Select windows to change\");\n    if (pickedRefs.Any()){\n        if(!targetSymbol.IsActive) targetSymbol.Activate();\n        foreach(Reference r in pickedRefs){\n            FamilyInstance window = doc.GetElement(r) as FamilyInstance;\n            if(window != null) window.Symbol = targetSymbol;\n        }\n    }\n} catch (Autodesk.Revit.Exceptions.OperationCanceledException) { /* Operation cancelled */ }"}
{"prompt":"Crea un suelo del tipo 'Suelo de madera', si no existe, créalo y luego haz el suelo.","completion":"// Estrategia: Asegurar la existencia de un tipo antes de usarlo.\nstring floorTypeName = \"Suelo de madera\";\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault(ft => ft.Name == floorTypeName) as FloorType;\n\nif(floorType == null){\n    TaskDialog.Show(\"Info\", $\"El tipo '{floorTypeName}' no existe. Creando uno nuevo.\");\n    FloorType template = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n    if(template != null) floorType = template.Duplicate(floorTypeName) as FloorType;\n}\n\nif(floorType != null){\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    if(level != null){\n        CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(5,5,0));\n        Floor.Create(doc, new List<CurveLoop>{profile}, floorType.Id, level.Id);\n    }\n}"}
{"prompt":"Create a 'Wood Floor' type floor, if it doesn't exist, create it, then make the floor.","completion":"// Strategy: Ensure a type exists before using it.\nstring floorTypeName = \"Wood Floor\";\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault(ft => ft.Name == floorTypeName) as FloorType;\n\nif(floorType == null){\n    TaskDialog.Show(\"Info\", $\"Type '{floorTypeName}' does not exist. Creating a new one.\");\n    FloorType template = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n    if(template != null) floorType = template.Duplicate(floorTypeName) as FloorType;\n}\n\nif(floorType != null){\n    Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n    if(level != null){\n        CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(5,5,0));\n        Floor.Create(doc, new List<CurveLoop>{profile}, floorType.Id, level.Id);\n    }\n}"}
{"prompt":"Reporta el número de cada tipo de muro en el proyecto.","completion":"// Estrategia: Agrupar elementos por tipo y contar.\nvar wallTypeGroups = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().GroupBy(w => w.GetTypeId());\nStringBuilder report = new StringBuilder(\"Conteo de Muros por Tipo:\\n\");\nforeach(var group in wallTypeGroups)\n{\n    WallType wallType = doc.GetElement(group.Key) as WallType;\n    report.AppendLine($\"- {wallType.Name}: {group.Count()} unidades\");\n}\nTaskDialog.Show(\"Reporte de Muros\", report.ToString());"}
{"prompt":"Report the number of each wall type in the project.","completion":"// Strategy: Group elements by type and count them.\nvar wallTypeGroups = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().GroupBy(w => w.GetTypeId());\nStringBuilder report = new StringBuilder(\"Wall Count by Type:\\n\");\nforeach(var group in wallTypeGroups)\n{\n    WallType wallType = doc.GetElement(group.Key) as WallType;\n    report.AppendLine($\"- {wallType.Name}: {group.Count()} units\");\n}\nTaskDialog.Show(\"Wall Report\", report.ToString());"}
{"prompt":"Crea una masa de loft entre dos perfiles circulares.","completion":"// Estrategia: Crear una forma de masa compleja (loft).\n// 1. Definir los dos perfiles.\nCurveLoop profile1 = CurveLoop.Create(new List<Curve>{ Arc.Create(new XYZ(0,0,0), 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nCurveLoop profile2 = CurveLoop.Create(new List<Curve>{ Arc.Create(new XYZ(0,0,10), 3, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\n// 2. Crear la masa in-situ y la forma de loft.\nInPlaceElement ipe = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\ndoc.FamilyCreate.NewLoftForm(true, new List<CurveLoop>{profile1, profile2});\nipe.Commit();"}
{"prompt":"Create a loft mass between two circular profiles.","completion":"// Strategy: Create a complex mass form (loft).\n// 1. Define the two profiles.\nCurveLoop profile1 = CurveLoop.Create(new List<Curve>{ Arc.Create(new XYZ(0,0,0), 5, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\nCurveLoop profile2 = CurveLoop.Create(new List<Curve>{ Arc.Create(new XYZ(0,0,10), 3, 0, 2*Math.PI, XYZ.BasisX, XYZ.BasisY) });\n// 2. Create the in-place mass and the loft form.\nInPlaceElement ipe = InPlaceElement.Create(doc, new ElementId(BuiltInCategory.OST_Mass));\ndoc.FamilyCreate.NewLoftForm(true, new List<CurveLoop>{profile1, profile2});\nipe.Commit();"}
{"prompt":"Permíteme seleccionar varios elementos y asignarlos al workset 'Núcleo y Fachada'.","completion":"// Estrategia: Pedir selección al usuario y modificar parámetro en lote.\nUIDocument uidoc = new UIDocument(doc);\nif(doc.IsWorkshared)\n{\n    string wsName = \"Núcleo y Fachada\";\n    Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == wsName);\n    if(workset == null) workset = Workset.Create(doc, wsName);\n\n    try {\n        IList<Reference> pickedRefs = uidoc.Selection.PickObjects(ObjectType.Element, \"Selecciona elementos para asignar al workset\");\n        if(pickedRefs.Any()){\n            ICollection<ElementId> ids = pickedRefs.Select(r => r.ElementId).ToList();\n            WorksharingUtils.ChangeWorkset(doc, ids, workset.Id);\n        }\n    } catch (Autodesk.Revit.Exceptions.OperationCanceledException) { /* Operación cancelada */ }\n}"}
{"prompt":"Let me select multiple elements and assign them to the 'Core and Shell' workset.","completion":"// Strategy: Prompt user for selection and batch-modify a parameter.\nUIDocument uidoc = new UIDocument(doc);\nif(doc.IsWorkshared)\n{\n    string wsName = \"Core and Shell\";\n    Workset workset = new FilteredWorksetCollector(doc).OfKind(WorksetKind.UserWorkset).FirstOrDefault(ws => ws.Name == wsName);\n    if(workset == null) workset = Workset.Create(doc, wsName);\n\n    try {\n        IList<Reference> pickedRefs = uidoc.Selection.PickObjects(ObjectType.Element, \"Select elements to assign to the workset\");\n        if(pickedRefs.Any()){\n            ICollection<ElementId> ids = pickedRefs.Select(r => r.ElementId).ToList();\n            WorksharingUtils.ChangeWorkset(doc, ids, workset.Id);\n        }\n    } catch (Autodesk.Revit.Exceptions.OperationCanceledException) { /* Operation cancelled */ }\n}"}
{"prompt":"Recarga todos los vínculos CAD del proyecto.","completion":"// Estrategia: Filtrar por tipo de vínculo y ejecutar una acción en cada uno.\nvar cadLinkTypes = new FilteredElementCollector(doc).OfClass(typeof(CADLinkType)).Cast<CADLinkType>();\nint count = 0;\nforeach(CADLinkType linkType in cadLinkTypes){\n    linkType.Reload();\n    count++;\n}\nTaskDialog.Show(\"Resultado\", $\"Se recargaron {count} vínculos CAD.\");"}
{"prompt":"Reload all CAD links in the project.","completion":"// Strategy: Filter by link type and perform an action on each.\nvar cadLinkTypes = new FilteredElementCollector(doc).OfClass(typeof(CADLinkType)).Cast<CADLinkType>();\nint count = 0;\nforeach(CADLinkType linkType in cadLinkTypes){\n    linkType.Reload();\n    count++;\n}\nTaskDialog.Show(\"Result\", $\"Reloaded {count} CAD links.\");"}
{"prompt":"Encuentra todas las habitaciones con un área menor a 10 m².","completion":"// Estrategia: Filtrar por un parámetro numérico con una condición 'menor que'.\ndouble areaThreshold = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.SquareMeters);\nvar smallRooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().Where(r => r.Area < areaThreshold).ToList();\nTaskDialog.Show(\"Habitaciones Pequeñas\", $\"Se encontraron {smallRooms.Count} habitaciones con menos de 10 m².\");\nif(smallRooms.Any()) new UIDocument(doc).Selection.SetElementIds(smallRooms.Select(r=>r.Id).ToList());"}
{"prompt":"Find all rooms with an area smaller than 10 m².","completion":"// Strategy: Filter by a numeric parameter with a 'less than' condition.\ndouble areaThreshold = UnitUtils.ConvertToInternalUnits(10, UnitTypeId.SquareMeters);\nvar smallRooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>().Where(r => r.Area < areaThreshold).ToList();\nTaskDialog.Show(\"Small Rooms\", $\"Found {smallRooms.Count} rooms smaller than 10 m².\");\nif(smallRooms.Any()) new UIDocument(doc).Selection.SetElementIds(smallRooms.Select(r=>r.Id).ToList());"}
{"prompt":"Crea un nuevo tipo de losa 'Losa 20cm' y asígnale el material 'Hormigón'.","completion":"// Estrategia: Crear un tipo, modificar su estructura y material, y luego usarlo.\nstring typeName = \"Losa 20cm\";\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault(f => f.Name == typeName) as FloorType;\n\nif(floorType == null){\n    FloorType template = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n    if(template != null){\n        floorType = template.Duplicate(typeName) as FloorType;\n        CompoundStructure cs = floorType.GetCompoundStructure();\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Centimeters));\n        Material concrete = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Hormigón\")) as Material;\n        if(concrete != null) cs.SetMaterialId(cs.GetFirstCoreLayerIndex(), concrete.Id);\n        floorType.SetCompoundStructure(cs);\n    }\n}\nTaskDialog.Show(\"Éxito\", $\"Tipo '{typeName}' creado o ya existente.\");"}
{"prompt":"Create a new 'Slab 20cm' floor type and assign 'Concrete' material to it.","completion":"// Strategy: Create a type, modify its structure and material, then use it.\nstring typeName = \"Slab 20cm\";\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault(f => f.Name == typeName) as FloorType;\n\nif(floorType == null){\n    FloorType template = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault() as FloorType;\n    if(template != null){\n        floorType = template.Duplicate(typeName) as FloorType;\n        CompoundStructure cs = floorType.GetCompoundStructure();\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(20, UnitTypeId.Centimeters));\n        Material concrete = new FilteredElementCollector(doc).OfClass(typeof(Material)).FirstOrDefault(m => m.Name.Contains(\"Concrete\")) as Material;\n        if(concrete != null) cs.SetMaterialId(cs.GetFirstCoreLayerIndex(), concrete.Id);\n        floorType.SetCompoundStructure(cs);\n    }\n}\nTaskDialog.Show(\"Success\", $\"Type '{typeName}' created or already existed.\");"}
{"prompt":"Dibuja una línea de detalle roja y discontinua.","completion":"// Estrategia: Crear una línea de detalle y sobrescribir sus gráficos.\nLine line = Line.CreateBound(XYZ.Zero, new XYZ(10,10,0));\nSketchPlane sp = SketchPlane.Create(doc, doc.ActiveView.SketchPlane.GetPlane());\nDetailLine detailLine = doc.Create.NewDetailCurve(doc.ActiveView, line) as DetailLine;\n\nOverrideGraphicSettings ogs = new OverrideGraphicSettings();\nogs.SetProjectionLineColor(new Color(255, 0, 0));\nLinePatternElement dashPattern = new FilteredElementCollector(doc).OfClass(typeof(LinePatternElement)).Cast<LinePatternElement>().FirstOrDefault(p => p.Name.Contains(\"Dash\"));\nif(dashPattern != null) ogs.SetProjectionLinePatternId(dashPattern.Id);\n\ndoc.ActiveView.SetElementOverrides(detailLine.Id, ogs);"}
{"prompt":"Draw a red, dashed detail line.","completion":"// Strategy: Create a detail line and override its graphics.\nLine line = Line.CreateBound(XYZ.Zero, new XYZ(10,10,0));\nSketchPlane sp = SketchPlane.Create(doc, doc.ActiveView.SketchPlane.GetPlane());\nDetailLine detailLine = doc.Create.NewDetailCurve(doc.ActiveView, line) as DetailLine;\n\nOverrideGraphicSettings ogs = new OverrideGraphicSettings();\nogs.SetProjectionLineColor(new Color(255, 0, 0));\nLinePatternElement dashPattern = new FilteredElementCollector(doc).OfClass(typeof(LinePatternElement)).Cast<LinePatternElement>().FirstOrDefault(p => p.Name.Contains(\"Dash\"));\nif(dashPattern != null) ogs.SetProjectionLinePatternId(dashPattern.Id);\n\ndoc.ActiveView.SetElementOverrides(detailLine.Id, ogs);"}
{"prompt":"Crea un suelo rectangular con el tipo 'Suelo de madera'.","completion":"// Estrategia: Crear un suelo con un tipo específico.\nstring floorTypeName = \"Suelo de madera\";\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault(f => f.Name == floorTypeName) as FloorType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif(floorType != null && level != null){\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(10, 8, 0));\n    Floor.Create(doc, new List<CurveLoop>{profile}, floorType.Id, level.Id);\n} else {\n    TaskDialog.Show(\"Error\", $\"No se encontró el tipo '{floorTypeName}' o un nivel válido.\");\n}"}
{"prompt":"Create a rectangular floor with the 'Wood Floor' type.","completion":"// Strategy: Create a floor with a specific type.\nstring floorTypeName = \"Wood Floor\";\nFloorType floorType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).FirstOrDefault(f => f.Name == floorTypeName) as FloorType;\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\n\nif(floorType != null && level != null){\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(10, 8, 0));\n    Floor.Create(doc, new List<CurveLoop>{profile}, floorType.Id, level.Id);\n} else {\n    TaskDialog.Show(\"Error\", $\"Could not find type '{floorTypeName}' or a valid level.\");\n}"}
{"prompt":"Crea una nueva tabla de planificación para Pilares Estructurales.","completion":"ElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = \"Tabla de Pilares Estructurales\";"}
{"prompt":"Create a new schedule for Structural Columns.","completion":"ElementId categoryId = new ElementId(BuiltInCategory.OST_StructuralColumns);\nViewSchedule schedule = ViewSchedule.CreateSchedule(doc, categoryId);\nschedule.Name = \"Structural Column Schedule\";"}
{"prompt":"Añade los campos 'Nivel', 'Marca' y 'Volumen' a la tabla de pilares.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Pilares\"));\nif(schedule != null){\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.FAMILY_LEVEL_PARAM));\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.ALL_MODEL_MARK));\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.HOST_VOLUME_COMPUTED));\n    if(levelField != null) def.AddField(levelField);\n    if(markField != null) def.AddField(markField);\n    if(volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Add the 'Level', 'Mark', and 'Volume' fields to the column schedule.","completion":"ViewSchedule schedule = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().FirstOrDefault(s => s.Name.Contains(\"Column\"));\nif(schedule != null){\n    ScheduleDefinition def = schedule.Definition;\n    SchedulableField levelField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.FAMILY_LEVEL_PARAM));\n    SchedulableField markField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.ALL_MODEL_MARK));\n    SchedulableField volumeField = def.GetSchedulableFields().FirstOrDefault(f => f.ParameterId == new ElementId(BuiltInParameter.HOST_VOLUME_COMPUTED));\n    if(levelField != null) def.AddField(levelField);\n    if(markField != null) def.AddField(markField);\n    if(volumeField != null) def.AddField(volumeField);\n}"}
{"prompt":"Crea una nueva hoja A3 y colócale una leyenda.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A3\")) as FamilySymbol;\nViewLegend legendView = new FilteredElementCollector(doc).OfClass(typeof(ViewLegend)).FirstOrDefault() as ViewLegend;\nif(titleBlock != null && legendView != null){\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Leyendas\";\n    newSheet.SheetNumber = \"G-002\";\n    if(Viewport.CanAddViewToSheet(doc, newSheet.Id, legendView.Id)){\n        Viewport.Create(doc, newSheet.Id, legendView.Id, new XYZ(0.5, 0.5, 0));\n    }\n}"}
{"prompt":"Create a new A3 sheet and place a legend on it.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A3\")) as FamilySymbol;\nViewLegend legendView = new FilteredElementCollector(doc).OfClass(typeof(ViewLegend)).FirstOrDefault() as ViewLegend;\nif(titleBlock != null && legendView != null){\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Legends\";\n    newSheet.SheetNumber = \"G-002\";\n    if(Viewport.CanAddViewToSheet(doc, newSheet.Id, legendView.Id)){\n        Viewport.Create(doc, newSheet.Id, legendView.Id, new XYZ(0.5, 0.5, 0));\n    }\n}"}
{"prompt":"Obtén todas las familias de puertas cargadas en el proyecto.","completion":"var doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory?.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Get all door families loaded in the project.","completion":"var doorFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory?.Id.IntegerValue == (int)BuiltInCategory.OST_Doors).ToList();"}
{"prompt":"Aplica el estilo visual 'Rayos X' a la vista 3D activa.","completion":"View3D view3d = doc.ActiveView as View3D;\nif(view3d != null){\n    view3d.DisplayStyle = DisplayStyle.Wireframe;\n    // La API no tiene un modo 'Rayos X' directo, Wireframe es lo más cercano.\n}"}
{"prompt":"Apply the 'X-Ray' visual style to the active 3D view.","completion":"View3D view3d = doc.ActiveView as View3D;\nif(view3d != null){\n    view3d.DisplayStyle = DisplayStyle.Wireframe;\n    // The API does not have a direct 'X-Ray' mode, Wireframe is the closest equivalent.\n}"}
{"prompt":"Crea una losa de cimentación estructural de 40cm de espesor.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundationLevel != null && slabType != null){\n    FloorType newSlabType = slabType.Duplicate(\"Losa Cimentación 40cm\") as FloorType;\n    CompoundStructure cs = newSlabType.GetCompoundStructure();\n    if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(40, UnitTypeId.Centimeters));\n    newSlabType.SetCompoundStructure(cs);\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(10,10,0));\n    Floor.Create(doc, new List<CurveLoop>{profile}, newSlabType.Id, foundationLevel.Id);\n}"}
{"prompt":"Create a structural foundation slab 40cm thick.","completion":"Level foundationLevel = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.IsGroundPlane) as Level;\nFloorType slabType = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(ft => ft.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundationLevel != null && slabType != null){\n    FloorType newSlabType = slabType.Duplicate(\"Foundation Slab 40cm\") as FloorType;\n    CompoundStructure cs = newSlabType.GetCompoundStructure();\n    if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(40, UnitTypeId.Centimeters));\n    newSlabType.SetCompoundStructure(cs);\n    CurveLoop profile = CurveLoop.CreateViaRectangle(new XYZ(0,0,0), new XYZ(10,10,0));\n    Floor.Create(doc, new List<CurveLoop>{profile}, newSlabType.Id, foundationLevel.Id);\n}"}
{"prompt":"Genera un reporte con el área de todas las habitaciones del proyecto.","completion":"StringBuilder report = new StringBuilder(\"Reporte de Áreas de Habitaciones:\\n\");\nvar rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>();\nforeach(Room room in rooms)\n{\n    double area = room.get_Parameter(BuiltInParameter.ROOM_AREA).AsDouble();\n    report.AppendLine($\"- {room.Name}: {UnitUtils.ConvertFromInternalUnits(area, UnitTypeId.SquareMeters):F2} m²\");\n}\nTaskDialog.Show(\"Reporte de Áreas\", report.ToString());"}
{"prompt":"Generate a report with the area of all rooms in the project.","completion":"StringBuilder report = new StringBuilder(\"Room Area Report:\\n\");\nvar rooms = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().Cast<Room>();\nforeach(Room room in rooms)\n{\n    double area = room.get_Parameter(BuiltInParameter.ROOM_AREA).AsDouble();\n    report.AppendLine($\"- {room.Name}: {UnitUtils.ConvertFromInternalUnits(area, UnitTypeId.SquareMeters):F2} m²\");\n}\nTaskDialog.Show(\"Area Report\", report.ToString());"}
{"prompt":"Crea un techo por extrusión con un perfil en arco.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nif(level != null && roofType != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n    ReferencePlane refPlane = ReferencePlane.Create(doc, new XYZ(0,0,level.Elevation), XYZ.BasisY, doc.ActiveView);\n    doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n}"}
{"prompt":"Create an extrusion roof with an arc profile.","completion":"Level level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nRoofType roofType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).FirstOrDefault() as RoofType;\nif(level != null && roofType != null)\n{\n    CurveLoop profile = new CurveLoop();\n    profile.Append(Arc.Create(new XYZ(-10,0,0), new XYZ(10,0,0), new XYZ(0,5,0)));\n    ReferencePlane refPlane = ReferencePlane.Create(doc, new XYZ(0,0,level.Elevation), XYZ.BasisY, doc.ActiveView);\n    doc.Create.NewExtrusionRoof(profile, refPlane, level, roofType, 0, 20);\n}"}
{"prompt":"Oculta todos los elementos de anotación en la vista activa.","completion":"var annotationCategories = new List<BuiltInCategory>\n{\n    BuiltInCategory.OST_GenericAnnotation,\n    BuiltInCategory.OST_TextNotes,\n    BuiltInCategory.OST_Tags,\n    BuiltInCategory.OST_Dimensions\n};\nvar multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\nvar elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\nif(elementsToHide.Any())\n{\n    doc.ActiveView.HideElements(elementsToHide);\n}"}
{"prompt":"Hide all annotation elements in the active view.","completion":"var annotationCategories = new List<BuiltInCategory>\n{\n    BuiltInCategory.OST_GenericAnnotation,\n    BuiltInCategory.OST_TextNotes,\n    BuiltInCategory.OST_Tags,\n    BuiltInCategory.OST_Dimensions\n};\nvar multiCategoryFilter = new ElementMulticategoryFilter(annotationCategories);\nvar elementsToHide = new FilteredElementCollector(doc, doc.ActiveView.Id).WherePasses(multiCategoryFilter).ToElementIds();\nif(elementsToHide.Any())\n{\n    doc.ActiveView.HideElements(elementsToHide);\n}"}
{"prompt":"Encuentra todas las vistas que no tienen una plantilla de vista asignada.","completion":"var viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View))\n    .Cast<View>()\n    .Where(v => v.CanBePrinted() && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId)\n    .ToList();\nStringBuilder sb = new StringBuilder(\"Vistas sin plantilla:\\n\");\nforeach(var view in viewsWithoutTemplate)\n{\n    sb.AppendLine(view.Name);\n}\nTaskDialog.Show(\"Auditoría de Vistas\", sb.ToString());"}
{"prompt":"Find all views that do not have a view template assigned.","completion":"var viewsWithoutTemplate = new FilteredElementCollector(doc).OfClass(typeof(View))\n    .Cast<View>()\n    .Where(v => v.CanBePrinted() && !v.IsTemplate && v.ViewTemplateId == ElementId.InvalidElementId)\n    .ToList();\nStringBuilder sb = new StringBuilder(\"Views without template:\\n\");\nforeach(var view in viewsWithoutTemplate)\n{\n    sb.AppendLine(view.Name);\n}\nTaskDialog.Show(\"View Audit\", sb.ToString());"}
{"prompt":"Establece el parámetro 'Marca' de todos los muros seleccionados a 'M-01'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any())\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall)\n        {\n            Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n            if(markParam != null) markParam.Set(\"M-01\");\n        }\n    }\n}"}
{"prompt":"Set the 'Mark' parameter of all selected walls to 'W-01'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any())\n{\n    foreach(ElementId id in selectedIds)\n    {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall)\n        {\n            Parameter markParam = elem.get_Parameter(BuiltInParameter.ALL_MODEL_MARK);\n            if(markParam != null) markParam.Set(\"W-01\");\n        }\n    }\n}"}
{"prompt":"Crea 10 worksets de arquitectura.","completion":"if(doc.IsWorkshared)\n{\n    var worksetNames = new List<string> { \"TAD_ARQ_MAM\", \"TAD_ARQ_ACA\", \"TAD_ARQ_PLA\", \"TAD_ARQ_PSO\", \"TAD_ARQ_HRE\", \"TAD_ARQ_ALU\", \"TAD_ARQ_CAR\", \"TAD_ARQ_MOB\", \"TAD_ARQ_PLO\", \"TAD_ARQ_EXT\" };\n    foreach(string name in worksetNames)\n    {\n        Workset.Create(doc, name);\n    }\n}"}
{"prompt":"Create 10 architectural worksets.","completion":"if(doc.IsWorkshared)\n{\n    var worksetNames = new List<string> { \"TAD_ARQ_WALLS\", \"TAD_ARQ_FINISHES\", \"TAD_ARQ_CEILINGS\", \"TAD_ARQ_FLOORS\", \"TAD_ARQ_RAILINGS\", \"TAD_ARQ_WINDOWS\", \"TAD_ARQ_CARPENTRY\", \"TAD_ARQ_FURNITURE\", \"TAD_ARQ_PLUMBING\", \"TAD_ARQ_EXTERIOR\" };\n    foreach(string name in worksetNames)\n    {\n        Workset.Create(doc, name);\n    }\n}"}
{"prompt":"Cambia el nombre de todas las tablas que contienen 'Muros' por 'Cuantificación de Muros'.","completion":"var schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"Muros\"));\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"Muros\", \"Cuantificación de Muros\");\n}"}
{"prompt":"Rename all schedules containing 'Walls' to 'Wall Quantity Takeoff'.","completion":"var schedules = new FilteredElementCollector(doc).OfClass(typeof(ViewSchedule)).Cast<ViewSchedule>().Where(vs => vs.Name.Contains(\"Walls\"));\nforeach(ViewSchedule schedule in schedules)\n{\n    schedule.Name = schedule.Name.Replace(\"Walls\", \"Wall Quantity Takeoff\");\n}"}
{"prompt":"Encuentra todas las familias de anotación y muestra sus nombres.","completion":"var annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation);\nStringBuilder sb = new StringBuilder(\"Familias de Anotación:\\n\");\nforeach(var fam in annotationFamilies)\n{\n    sb.AppendLine(fam.Name);\n}\nTaskDialog.Show(\"Familias de Anotación\", sb.ToString());"}
{"prompt":"Find all annotation families and display their names.","completion":"var annotationFamilies = new FilteredElementCollector(doc).OfClass(typeof(Family)).Cast<Family>().Where(f => f.FamilyCategory != null && f.FamilyCategory.CategoryType == CategoryType.Annotation);\nStringBuilder sb = new StringBuilder(\"Annotation Families:\\n\");\nforeach(var fam in annotationFamilies)\n{\n    sb.AppendLine(fam.Name);\n}\nTaskDialog.Show(\"Annotation Families\", sb.ToString());"}
{"prompt":"Crea un tipo de cota lineal con texto rojo.","completion":"DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\nif(linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"Cota Roja\") as DimensionType;\n    if(newDimType != null)\n    {\n        newDimType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(255,0,0).GetElementId());\n    }\n}"}
{"prompt":"Create a linear dimension type with red text.","completion":"DimensionType linearDimType = new FilteredElementCollector(doc).OfClass(typeof(DimensionType)).Cast<DimensionType>().FirstOrDefault(dt => dt.StyleType == DimensionStyleType.Linear);\nif(linearDimType != null)\n{\n    DimensionType newDimType = linearDimType.Duplicate(\"Red Dimension\") as DimensionType;\n    if(newDimType != null)\n    {\n        newDimType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(255,0,0).GetElementId());\n    }\n}"}
{"prompt":"Establece la visibilidad de la categoría 'Mobiliario' en falso en la vista activa.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif(furnitureCat != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Set the visibility of the 'Furniture' category to false in the active view.","completion":"Category furnitureCat = doc.Settings.Categories.get_Item(BuiltInCategory.OST_Furniture);\nif(furnitureCat != null)\n{\n    doc.ActiveView.SetCategoryHidden(furnitureCat.Id, true);\n}"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Éxito\", $\"Se eliminaron {unusedWallTypes.Count} tipos de muro no utilizados.\");\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Success\", $\"Deleted {unusedWallTypes.Count} unused wall types.\");\n}"}
{"prompt":"Crea una nueva hoja A1 y coloca la vista 'Planta Baja' en ella.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A1\")) as FamilySymbol;\nView viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Planta Baja\") as View;\nif (titleBlock != null && viewToPlace != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Planta Arquitectónica\";\n    newSheet.SheetNumber = \"A-101\";\n    if (Viewport.CanAddViewToSheet(doc, newSheet.Id, viewToPlace.Id))\n    {\n        Viewport.Create(doc, newSheet.Id, viewToPlace.Id, new XYZ(0.5, 0.5, 0));\n    }\n}"}
{"prompt":"Create a new A1 sheet and place the 'Ground Floor' view on it.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault(tb => tb.Name.Contains(\"A1\")) as FamilySymbol;\nView viewToPlace = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).FirstOrDefault(v => v.Name == \"Ground Floor\") as View;\nif (titleBlock != null && viewToPlace != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Architectural Plan\";\n    newSheet.SheetNumber = \"A-101\";\n    if (Viewport.CanAddViewToSheet(doc, newSheet.Id, viewToPlace.Id))\n    {\n        Viewport.Create(doc, newSheet.Id, viewToPlace.Id, new XYZ(0.5, 0.5, 0));\n    }\n}"}
{"prompt":"Reporta el número total de advertencias en el proyecto.","completion":"int warningCount = doc.GetWarnings().Count;\nTaskDialog.Show(\"Auditoría de Proyecto\", $\"El proyecto tiene {warningCount} advertencias.\");"}
{"prompt":"Report the total number of warnings in the project.","completion":"int warningCount = doc.GetWarnings().Count;\nTaskDialog.Show(\"Project Audit\", $\"The project has {warningCount} warnings.\");"}
{"prompt":"Crea un nuevo tipo de puerta llamado 'Puerta RF-60' basado en un tipo existente, y asigna '60 min' al parámetro 'Fire Rating'.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"Puerta RF-60\") as FamilySymbol;\n    Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n    if (fireRatingParam != null && !fireRatingParam.IsReadOnly)\n    {\n        fireRatingParam.Set(\"60 min\");\n    }\n}"}
{"prompt":"Create a new door type named 'FR-60 Door' based on an existing type, and set the 'Fire Rating' parameter to '60 min'.","completion":"FamilySymbol doorTypeToDuplicate = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (doorTypeToDuplicate != null)\n{\n    FamilySymbol newDoorType = doorTypeToDuplicate.Duplicate(\"FR-60 Door\") as FamilySymbol;\n    Parameter fireRatingParam = newDoorType.get_Parameter(BuiltInParameter.FIRE_RATING);\n    if (fireRatingParam != null && !fireRatingParam.IsReadOnly)\n    {\n        fireRatingParam.Set(\"60 min\");\n    }\n}"}
{"prompt":"Mueve todos los elementos seleccionados 3 metros hacia arriba.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any())\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Move all selected elements 3 meters up.","completion":"UIDocument uidoc = new UIDocument(doc);\nICollection<ElementId> selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any())\n{\n    XYZ translation = new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters));\n    ElementTransformUtils.MoveElements(doc, selectedIds, translation);\n}"}
{"prompt":"Encuentra todos los muros que no están asociados a ningún nivel.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nvar unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToElements();\nTaskDialog.Show(\"Muros sin Nivel\", $\"Se encontraron {unassignedWalls.Count} muros sin nivel base.\");"}
{"prompt":"Find all walls that are not associated with any level.","completion":"ElementFilter unassociatedFilter = new ElementLevelFilter(ElementId.InvalidElementId);\nvar unassignedWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(unassociatedFilter).ToElements();\nTaskDialog.Show(\"Unassigned Walls\", $\"Found {unassignedWalls.Count} walls with no base level.\");"}
{"prompt":"Exporta todos los tipos de familia de la categoría 'Mobiliario' a un archivo de texto.","completion":"string path = @\"C:\\RevitExports\\FurnitureTypes.txt\";\nvar furnitureTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType();\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(path))\n{\n    writer.WriteLine(\"Tipos de Mobiliario:\");\n    foreach(Element type in furnitureTypes)\n    {\n        writer.WriteLine(type.Name);\n    }\n}"}
{"prompt":"Export all family types from the 'Furniture' category to a text file.","completion":"string path = @\"C:\\RevitExports\\FurnitureTypes.txt\";\nvar furnitureTypes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Furniture).WhereElementIsElementType();\nusing(System.IO.StreamWriter writer = new System.IO.StreamWriter(path))\n{\n    writer.WriteLine(\"Furniture Types:\");\n    foreach(Element type in furnitureTypes)\n    {\n        writer.WriteLine(type.Name);\n    }\n}"}
{"prompt":"Copia todos los muros del Nivel 1 al Nivel 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif (level1 != null && level2 != null)\n{\n    var wallsToCopy = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level1.Id).ToElementIds();\n    double elevationDiff = level2.Elevation - level1.Elevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(wallsToCopy.Any()) ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n}"}
{"prompt":"Copy all walls from Level 1 to Level 2.","completion":"Level level1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 1\") as Level;\nLevel level2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault(l => l.Name == \"Level 2\") as Level;\nif (level1 != null && level2 != null)\n{\n    var wallsToCopy = new FilteredElementCollector(doc).OfClass(typeof(Wall)).Where(w => w.LevelId == level1.Id).ToElementIds();\n    double elevationDiff = level2.Elevation - level1.Elevation;\n    XYZ translation = new XYZ(0, 0, elevationDiff);\n    if(wallsToCopy.Any()) ElementTransformUtils.CopyElements(doc, wallsToCopy, translation);\n}"}
{"prompt":"Crea un nuevo tipo de texto de 3mm de color azul.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"3mm Azul\") as TextNoteType;\n    newType.get_Parameter(BuiltInParameter.TEXT_SIZE).Set(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Millimeters));\n    newType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(0,0,255).GetElementId());\n}"}
{"prompt":"Create a new 3mm text type in blue color.","completion":"TextNoteType defaultType = new FilteredElementCollector(doc).OfClass(typeof(TextNoteType)).FirstOrDefault() as TextNoteType;\nif (defaultType != null)\n{\n    TextNoteType newType = defaultType.Duplicate(\"3mm Blue\") as TextNoteType;\n    newType.get_Parameter(BuiltInParameter.TEXT_SIZE).Set(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Millimeters));\n    newType.get_Parameter(BuiltInParameter.LINE_COLOR).Set(new Color(0,0,255).GetElementId());\n}"}
{"prompt":"Encuentra todos los muros que midan más de 3 metros de alto.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nvar tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds();\nTaskDialog.Show(\"Resultado\", $\"Se encontraron {tallWalls.Count} muros con más de 3m de altura.\");"}
{"prompt":"Find all walls taller than 3 meters.","completion":"double heightThreshold = UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters);\nElementId heightParamId = new ElementId(BuiltInParameter.WALL_USER_HEIGHT_PARAM);\nParameterValueProvider pvp = new ParameterValueProvider(heightParamId);\nFilterNumericRuleEvaluator evaluator = new FilterNumericGreater();\nFilterRule rule = new FilterDoubleRule(pvp, evaluator, heightThreshold, 1e-6);\nElementParameterFilter filter = new ElementParameterFilter(rule);\nvar tallWalls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WherePasses(filter).ToElementIds();\nTaskDialog.Show(\"Result\", $\"Found {tallWalls.Count} walls taller than 3m.\");"}
{"prompt":"Selecciona un muro y encuentra todas las tuberías que lo atraviesan.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona un muro\");\nElement wall = doc.GetElement(wallRef);\nif(wall != null)\n{\n    ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n    var intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds();\n    TaskDialog.Show(\"Colisiones\", $\"El muro intersecta con {intersectingPipes.Count} tuberías.\");\n    if(intersectingPipes.Any()) uidoc.Selection.SetElementIds(intersectingPipes);\n}"}
{"prompt":"Select a wall and find all pipes passing through it.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference wallRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a wall\");\nElement wall = doc.GetElement(wallRef);\nif(wall != null)\n{\n    ElementIntersectsElementFilter filter = new ElementIntersectsElementFilter(wall);\n    var intersectingPipes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_PipeCurves).WherePasses(filter).ToElementIds();\n    TaskDialog.Show(\"Clashes\", $\"The wall intersects with {intersectingPipes.Count} pipes.\");\n    if(intersectingPipes.Any()) uidoc.Selection.SetElementIds(intersectingPipes);\n}"}
{"prompt":"Crea una nota de texto que apunte al elemento seleccionado y diga 'REVISAR CLASH'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference targetRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona el elemento a anotar\");\nif(targetRef != null)\n{\n    XYZ textLocation = uidoc.Selection.PickPoint(\"Elige la ubicación del texto\");\n    TextNoteOptions opts = new TextNoteOptions() { HorizontalAlignment = HorizontalAlignment.Left };\n    \n    TextNote note = TextNote.Create(doc, doc.ActiveView.Id, textLocation, \"REVISAR CLASH\", opts);\n    note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L, targetRef.GlobalPoint);\n}"}
{"prompt":"Create a text note pointing to the selected element that says 'REVIEW CLASH'.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference targetRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element to annotate\");\nif(targetRef != null)\n{\n    XYZ textLocation = uidoc.Selection.PickPoint(\"Choose the text location\");\n    TextNoteOptions opts = new TextNoteOptions() { HorizontalAlignment = HorizontalAlignment.Left };\n    \n    TextNote note = TextNote.Create(doc, doc.ActiveView.Id, \"REVIEW CLASH\", textLocation, opts);\n    note.AddLeader(TextNoteLeaderTypes.TNLT_STRAIGHT_L, targetRef.GlobalPoint);\n}"}
{"prompt":"Oculta todos los muros que sean más cortos de 2 metros.","completion":"double lengthThreshold = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nvar walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\nList<ElementId> shortWallIds = new List<ElementId>();\n\nforeach(Wall wall in walls)\n{\n    double length = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n    if(length < lengthThreshold)\n    {\n        shortWallIds.Add(wall.Id);\n    }\n}\n\nif(shortWallIds.Any())\n{\n    doc.ActiveView.HideElements(shortWallIds);\n    TaskDialog.Show(\"Resultado\", $\"Se ocultaron {shortWallIds.Count} muros cortos.\");\n}"}
{"prompt":"Hide all walls shorter than 2 meters.","completion":"double lengthThreshold = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\nvar walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\nList<ElementId> shortWallIds = new List<ElementId>();\n\nforeach(Wall wall in walls)\n{\n    double length = wall.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n    if(length < lengthThreshold)\n    {\n        shortWallIds.Add(wall.Id);\n    }\n}\n\nif(shortWallIds.Any())\n{\n    doc.ActiveView.HideElements(shortWallIds);\n    TaskDialog.Show(\"Result\", $\"Hid {shortWallIds.Count} short walls.\");\n}"}
{"prompt":"Crea una viga estructural entre (0,0,0) y (5,0,0) en el Nivel 1.","completion":"XYZ start = new XYZ(0, 0, 0);\nXYZ end = new XYZ(5, 0, 0);\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault();\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nif(beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Create a structural beam between (0,0,0) and (5,0,0) on Level 1.","completion":"XYZ start = new XYZ(0, 0, 0);\nXYZ end = new XYZ(5, 0, 0);\nFamilySymbol beamType = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_StructuralFraming).OfClass(typeof(FamilySymbol)).Cast<FamilySymbol>().FirstOrDefault();\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nif(beamType != null && level != null)\n{\n    if(!beamType.IsActive) beamType.Activate();\n    Line beamCurve = Line.CreateBound(start, end);\n    doc.Create.NewFamilyInstance(beamCurve, beamType, level, StructuralType.Beam);\n}"}
{"prompt":"Crea una cortina mural rectangular del Nivel 1 al Nivel 2 entre (0,0) y (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Create a rectangular curtain wall from Level 1 to Level 2 between (0,0) and (10,0).","completion":"Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nLevel lvl2 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 2\");\nWallType cwType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Kind == WallKind.Curtain);\nif(lvl1 != null && lvl2 != null && cwType != null)\n{\n    Line line = Line.CreateBound(new XYZ(0,0,lvl1.Elevation), new XYZ(10,0,lvl1.Elevation));\n    Wall.Create(doc, line, cwType.Id, lvl1.Id, lvl2.Elevation - lvl1.Elevation, 0, false, false);\n}"}
{"prompt":"Añade rejillas U y V cada 2 m a un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Add U and V gridlines every 2m to a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null){\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    double uSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    double vSpacing = UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters);\n    // Add more logic for grid creation\n}"}
{"prompt":"Carga la familia 'LightingFixture.rfa' e inserta una instancia en coordenadas (2,2,3) en Nivel 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Load the 'LightingFixture.rfa' family and insert an instance at (2,2,3) on Level 1.","completion":"string path = \"C:\\\\RevitFamilies\\\\LightingFixture.rfa\";\nFamily fam;\nif(doc.LoadFamily(path, out fam)){\n  FamilySymbol sym = doc.GetElement(fam.GetFamilySymbolIds().First()) as FamilySymbol;\n  Level lvl1 = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\n  if(sym != null && lvl1 != null){if(!sym.IsActive) sym.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(2,2,3), sym, lvl1, StructuralType.NonStructural);\n  }\n}"}
{"prompt":"Crea un techo esquemático rectangular en 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Create a schematic rectangular roof at 'Roof Level'.","completion":"Level roof = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Roof Level\");\nRoofType rType = new FilteredElementCollector(doc).OfClass(typeof(RoofType)).Cast<RoofType>().FirstOrDefault();\nif(roof != null && rType != null){\n  CurveLoop cl = new CurveLoop();\n  cl.Append(Line.CreateBound(new XYZ(0,0,roof.Elevation), new XYZ(10,0,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,0,roof.Elevation), new XYZ(10,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(10,10,roof.Elevation), new XYZ(0,10,roof.Elevation)));\n  cl.Append(Line.CreateBound(new XYZ(0,10,roof.Elevation), new XYZ(0,0,roof.Elevation)));\n  doc.Create.NewFootPrintRoof(new List<CurveLoop>{cl}, roof, rType);\n}"}
{"prompt":"Genera una losa de cimentación de 1m de espesor.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Create a 1m thick structural footing slab.","completion":"Level foundation = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.IsGroundPlane);\nFloorType ft = new FilteredElementCollector(doc).OfClass(typeof(FloorType)).Cast<FloorType>().FirstOrDefault(f=>f.Category.Id.IntegerValue == (int)BuiltInCategory.OST_StructuralFoundation);\nif(foundation!=null && ft!=null){\n  FloorType newFt = ft.Duplicate(\"Footing_1m\") as FloorType;\n  CompoundStructure cs=newFt.GetCompoundStructure();\n  if(cs.GetLayerCount() > 0) cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(1, UnitTypeId.Meters));\n  newFt.SetCompoundStructure(cs);\n  CurveLoop loop = CurveLoop.CreateViaRectangle(new XYZ(0,0,foundation.Elevation), new XYZ(5,5,foundation.Elevation));\n  Floor.Create(doc, new List<CurveLoop>{loop}, newFt.Id, foundation.Id);\n}"}
{"prompt":"Localiza todos los muros con un parámetro 'Marca' vacío y asigna 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Find all walls with an empty 'Mark' parameter and set it to 'WM-01'.","completion":"var walls = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nforeach(var w in walls){\n  Parameter p=w.LookupParameter(\"Mark\");\n  if(p!=null && string.IsNullOrEmpty(p.AsString())) p.Set(\"WM-01\");\n}"}
{"prompt":"Exporta todos los muros con 'Mark' a un archivo CSV.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Export all walls with a 'Mark' to a CSV file.","completion":"var walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\walls_mark.csv\")){\n  sw.WriteLine(\"Id,Mark\");\n  foreach(var w in walls){ var p=w.LookupParameter(\"Mark\");\n    if(p!=null) sw.WriteLine($\"{w.Id.IntegerValue},{p.AsString()}\");\n  }\n}"}
{"prompt":"Crea un nivel intermedio llamado 'Mezzanine' a mitad de camino entre el Nivel 1 y el Nivel 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Create an intermediate level named 'Mezzanine' halfway between Level 1 and Level 2.","completion":"Level lvl1=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 1\");\nLevel lvl2=new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l=>l.Name==\"Level 2\");\nif(lvl1!=null&&lvl2!=null){\n  double midElevation = (lvl1.Elevation+lvl2.Elevation)/2.0;\n  Level.Create(doc, midElevation).Name=\"Mezzanine\";\n}"}
{"prompt":"Cambia el material de todos los muros a 'Acero'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Acero\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Change the material of all walls to 'Steel'.","completion":"Material steelMaterial = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Steel\"));\nvar walls=new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().Cast<Wall>();\nif(steelMaterial != null) { foreach(var w in walls) { var p = w.get_Parameter(BuiltInParameter.STRUCTURAL_MATERIAL_PARAM); if(p!=null&&!p.IsReadOnly) p.Set(steelMaterial.Id); } }"}
{"prompt":"Elimina todos los tipos de muro no utilizados en el proyecto.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Éxito\", $\"Se eliminaron {unusedWallTypes.Count} tipos de muro no utilizados.\");\n}"}
{"prompt":"Delete all unused wall types in the project.","completion":"var allWallTypes = new FilteredElementCollector(doc).OfClass(typeof(WallType)).ToElementIds();\nvar usedWallTypes = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Select(w => w.GetTypeId()).Distinct().ToList();\nvar unusedWallTypes = allWallTypes.Except(usedWallTypes).ToList();\nif(unusedWallTypes.Any())\n{\n    doc.Delete(unusedWallTypes);\n    TaskDialog.Show(\"Success\", $\"Deleted {unusedWallTypes.Count} unused wall types.\");\n}"}
{"prompt":"Añade una línea de rejilla U en un muro cortina a 3m desde el origen.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Add a U grid line to a curtain wall at 3m from the origin.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(true, new XYZ(UnitUtils.ConvertToInternalUnits(3, UnitTypeId.Meters), 0, 0), false);\n}"}
{"prompt":"Añade una línea de rejilla V en un muro cortina a 2m de altura.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Add a V grid line to a curtain wall at 2m height.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    grid.AddGridLine(false, new XYZ(0, 0, UnitUtils.ConvertToInternalUnits(2, UnitTypeId.Meters)), false);\n}"}
{"prompt":"Activa todos los segmentos en la primera línea de rejilla U.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Activate all segments on the first U grid line.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    CurtainGrid grid = curtainWall.CurtainGrid;\n    ElementId firstUGridLineId = grid.GetUGridLineIds().FirstOrDefault();\n    if(firstUGridLineId != null) {\n        CurtainGridLine uLine = doc.GetElement(firstUGridLineId) as CurtainGridLine;\n        if(uLine != null) uLine.AddAllSegments();\n    }\n}"}
{"prompt":"Añade montantes en la línea de rejilla U seleccionada.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla de muro cortina\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Add mullions to the selected U grid line.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a curtain grid line\");\nCurtainGridLine gridLine = doc.GetElement(pickedRef) as CurtainGridLine;\nMullionType mullionType = new FilteredElementCollector(doc).OfClass(typeof(MullionType)).FirstOrDefault() as MullionType;\nif(gridLine != null && mullionType != null) {\n    gridLine.AddMullions(gridLine.FullCurve, mullionType, false);\n}"}
{"prompt":"Aísla la rejilla V seleccionada y añade solo un segmento.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Selecciona una línea de rejilla V\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Isolate the selected V gridline and add only one segment.","completion":"UIDocument uidoc = new UIDocument(doc);\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Element, \"Select a V grid line\");\nCurtainGridLine vLine = doc.GetElement(pickedRef) as CurtainGridLine;\nif(vLine != null) {\n    Curve segment = vLine.GetSegmentCurves().FirstOrDefault();\n    if(segment != null) vLine.AddSegment(segment);\n}"}
{"prompt":"Crea una nueva fase 'Fase 3 - Ejecución'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Fase 3 - Ejecución\";"}
{"prompt":"Create a new phase 'Phase 3 - Execution'.","completion":"Phase newPhase = doc.Phases.CreateAfter(doc.Phases.Cast<Phase>().Last().Id);\nnewPhase.Name = \"Phase 3 - Execution\";"}
{"prompt":"Asigna la demolición de los muros seleccionados a la 'Fase 3 - Ejecución'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Fase 3 - Ejecución\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Assign the demolition of selected walls to 'Phase 3 - Execution'.","completion":"Phase phase = new FilteredElementCollector(doc).OfClass(typeof(Phase)).Cast<Phase>().FirstOrDefault(p=>p.Name==\"Phase 3 - Execution\");\nUIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(phase != null && selectedIds.Any()) {\n    foreach(ElementId id in selectedIds) {\n        Element elem = doc.GetElement(id);\n        if(elem is Wall) elem.DemolishedPhaseId = phase.Id;\n    }\n}"}
{"prompt":"Cambia el primer tipo de muro curvo a un tipo estructural.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curved);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Change the first curved wall type to a structural type.","completion":"WallType curvedWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Kind==WallKind.Curtain);\nif(curvedWallType != null) {\n    Parameter p = curvedWallType.get_Parameter(BuiltInParameter.FUNCTION_PARAM);\n    if(p != null) p.Set((int)WallFunction.Structural);\n}"}
{"prompt":"Cambia el material de los paneles de muro cortina a 'Vidrio' si no tienen material.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Set curtain panel material to 'Glass' if unassigned.","completion":"Material glass = new FilteredElementCollector(doc).OfClass(typeof(Material)).Cast<Material>().FirstOrDefault(m=>m.Name.Contains(\"Glass\"));\nWall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(glass != null && curtainWall != null) {\n    foreach(ElementId panelId in curtainWall.CurtainGrid.GetPanelIds()) {\n        Panel panel = doc.GetElement(panelId) as Panel;\n        if(panel != null) {\n            Parameter matParam = panel.Symbol.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM);\n            if(matParam != null && matParam.AsElementId() == ElementId.InvalidElementId) matParam.Set(glass.Id);\n        }\n    }\n}"}
{"prompt":"Duplica el tipo de muro 'Genérico - 200mm' y nómbralo 'Muro_Dibujo'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Genérico - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Muro_Dibujo\");"}
{"prompt":"Duplicate wall type 'Generic - 200mm' and name it 'Drawing_Wall'.","completion":"WallType originalType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(w=>w.Name==\"Generic - 200mm\");\nif(originalType!=null) originalType.Duplicate(\"Drawing_Wall\");"}
{"prompt":"Exporta los IDs y las elevaciones de los niveles a un archivo CSV.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Export level IDs and elevations to a CSV file.","completion":"var levels = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>();\nusing(var sw=new System.IO.StreamWriter(\"C:\\\\Exports\\\\levels.csv\")){\n  sw.WriteLine(\"Id,Name,Elevation_m\");\n  foreach(var l in levels) sw.WriteLine($\"{l.Id.IntegerValue},{l.Name},{UnitUtils.ConvertFromInternalUnits(l.Elevation,UnitTypeId.Meters)}\");\n}"}
{"prompt":"Elimina todos los montantes (mullions) desbloqueados de un muro cortina.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Delete all unlocked mullions from a curtain wall.","completion":"Wall curtainWall = new FilteredElementCollector(doc).OfClass(typeof(Wall)).FirstOrDefault(w => w.WallType.Kind == WallKind.Curtain) as Wall;\nif(curtainWall != null) {\n    var unlockedMullionIds = curtainWall.CurtainGrid.GetUnlockedMullionIds();\n    if(unlockedMullionIds.Any()) doc.Delete(unlockedMullionIds);\n}"}
{"prompt":"Crea un nuevo tipo de muro llamado 'Muro Genérico - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Muro Genérico - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Create a new wall type named 'Generic Wall - 300mm'.","completion":"WallType oldWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).FirstOrDefault() as WallType;\nif(oldWallType != null)\n{\n    WallType newWallType = oldWallType.Duplicate(\"Generic Wall - 300mm\") as WallType;\n    CompoundStructure cs = newWallType.GetCompoundStructure();\n    if(cs != null && cs.GetLayerCount() > 0) {\n        cs.SetLayerWidth(cs.GetFirstCoreLayerIndex(), UnitUtils.ConvertToInternalUnits(300, UnitTypeId.Millimeters));\n        newWallType.SetCompoundStructure(cs);\n    }\n}"}
{"prompt":"Cambia el tipo de todos los muros seleccionados a 'Muro Exterior - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Muro Exterior - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Change the type of all selected walls to 'Exterior Wall - 300mm'.","completion":"UIDocument uidoc = new UIDocument(doc);\nvar selectedIds = uidoc.Selection.GetElementIds();\nif(selectedIds.Any()) {\n    WallType targetWallType = new FilteredElementCollector(doc).OfClass(typeof(WallType)).Cast<WallType>().FirstOrDefault(wt => wt.Name == \"Exterior Wall - 300mm\");\n    if(targetWallType != null) {\n        foreach(ElementId id in selectedIds) {\n            Wall wall = doc.GetElement(id) as Wall;\n            if(wall != null) wall.ChangeTypeId(targetWallType.Id);\n        }\n    }\n}"}
{"prompt":"Crea una nueva hoja con el nombre 'Planos de Planta'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Planos de Planta\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Create a new sheet with the name 'Floor Plans'.","completion":"FamilySymbol titleBlock = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_TitleBlocks).WhereElementIsElementType().FirstOrDefault() as FamilySymbol;\nif (titleBlock != null)\n{\n    ViewSheet newSheet = ViewSheet.Create(doc, titleBlock.Id);\n    newSheet.Name = \"Floor Plans\";\n    newSheet.SheetNumber = \"A-101\";\n}"}
{"prompt":"Coloca la vista 'Nivel 1' en la hoja 'Planos de Planta' en el centro.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Planos de Planta\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Nivel 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Place the 'Level 1' view on the 'Floor Plans' sheet at its center.","completion":"ViewSheet targetSheet = new FilteredElementCollector(doc).OfClass(typeof(ViewSheet)).Cast<ViewSheet>().FirstOrDefault(vs => vs.Name == \"Floor Plans\");\nViewPlan targetView = new FilteredElementCollector(doc).OfClass(typeof(ViewPlan)).Cast<ViewPlan>().FirstOrDefault(vp => vp.Name == \"Level 1\");\nif(targetSheet != null && targetView != null && Viewport.CanAddViewToSheet(doc, targetSheet.Id, targetView.Id))\n{\n    BoundingBoxUV sheetBox = targetSheet.get_BoundingBox(null);\n    XYZ centerPoint = (sheetBox.Min + sheetBox.Max) / 2;\n    Viewport.Create(doc, targetSheet.Id, targetView.Id, centerPoint);\n}"}
{"prompt":"Establece el nivel de detalle de la vista activa a 'Fino'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Set the detail level of the active view to 'Fine'.","completion":"View activeView = doc.ActiveView;\nif(activeView != null) activeView.DetailLevel = ViewDetailLevel.Fine;"}
{"prompt":"Renombrar el nivel 'Nivel 1' a 'Planta Baja'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Nivel 1\");\nif(levelToRename != null) levelToRename.Name = \"Planta Baja\";"}
{"prompt":"Rename the 'Level 1' level to 'Ground Floor'.","completion":"Level levelToRename = new FilteredElementCollector(doc).OfClass(typeof(Level)).Cast<Level>().FirstOrDefault(l => l.Name == \"Level 1\");\nif(levelToRename != null) levelToRename.Name = \"Ground Floor\";"}
{"prompt":"Crea un pilar estructural con una sección de 300x300mm en (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Create a structural column with a 300x300mm section at (10,10,0).","completion":"FamilySymbol columnType = new FilteredElementCollector(doc).OfClass(typeof(FamilySymbol)).OfCategory(BuiltInCategory.OST_StructuralColumns).Cast<FamilySymbol>().FirstOrDefault(fs => fs.Name.Contains(\"300x300\"));\nLevel level = new FilteredElementCollector(doc).OfClass(typeof(Level)).FirstOrDefault() as Level;\nif(columnType != null && level != null)\n{\n    if(!columnType.IsActive) columnType.Activate();\n    doc.Create.NewFamilyInstance(new XYZ(10, 10, 0), columnType, level, StructuralType.Column);\n}"}
{"prompt":"Alinea todos los muros con el eje '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"prompt":"Align all walls to grid '1'.","completion":"Grid targetGrid = new FilteredElementCollector(doc).OfClass(typeof(Grid)).Cast<Grid>().FirstOrDefault(g => g.Name == \"1\");\nif(targetGrid != null)\n{\n    var walls = new FilteredElementCollector(doc).OfClass(typeof(Wall)).WhereElementIsNotElementType().Cast<Wall>();\n    foreach(Wall wall in walls)\n    {\n        LocationCurve lc = wall.Location as LocationCurve;\n        if(lc != null)\n        {\n            Line wallLine = lc.Curve as Line;\n            if(wallLine != null)\n            {\n                Line gridLine = targetGrid.Curve as Line;\n                if(gridLine != null)\n                {\n                    XYZ wallDirection = (wallLine.GetEndPoint(1) - wallLine.GetEndPoint(0)).Normalize();\n                    XYZ gridDirection = (gridLine.GetEndPoint(1) - gridLine.GetEndPoint(0)).Normalize();\n                    if(Math.Abs(wallDirection.DotProduct(gridDirection)) > 0.99)\n                    {\n                        XYZ currentWallOrigin = wallLine.Origin;\n                        XYZ projectedPoint = gridLine.Project(currentWallOrigin).XYZPoint;\n                        ElementTransformUtils.MoveElement(doc, wall.Id, projectedPoint - currentWallOrigin);\n                    }\n                }\n            }\n        }\n    }\n}"}
